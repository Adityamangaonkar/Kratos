// KRATOS  ___|  |       |       |
//       \___ \  __|  __| |   |  __| __| |   |  __| _` | |
//           | |   |    |   | (    |   |   | |   (   | |
//       _____/ \__|_|   \__,_|\___|\__|\__,_|_|  \__,_|_| MECHANICS
//
//  License: BSD License
//   license: StructuralMechanicsApplication/license.txt
//
//  Main authors:  Vicente Mataix Ferr√°ndiz
//

// System includes

// External includes

// Project includes
/* Mortar includes */
#include "custom_conditions/ALM_frictional_mortar_contact_condition.h"

/* Utilities */
#include "custom_utilities/contact_utilities.h"

namespace Kratos 
{
/************************************* OPERATIONS **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::Create( 
    IndexType NewId,
    NodesArrayType const& rThisNodes,
    PropertiesPointerType pProperties ) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes> >( NewId, this->GetGeometry().Create( rThisNodes ), pProperties );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::Create(
    IndexType NewId,
    GeometryPointerType pGeom,
    PropertiesPointerType pProperties) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes> >( NewId, pGeom, pProperties );
}

/************************************* DESTRUCTOR **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::~AugmentedLagrangianMethodFrictionalMortarContactCondition( )
{
}

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
bounded_matrix<double, 12, 12> AugmentedLagrangianMethodFrictionalMortarContactCondition<2,2>::CalculateLocalLHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    bounded_matrix<double,12,12> lhs;
    
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u1old = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2old = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const bounded_matrix<double, 2, 2> lm = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), VECTOR_LAGRANGE_MULTIPLIER, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL);
    const bounded_matrix<double, 2, 2> tangentxislave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_XI);
    const bounded_matrix<double, 2, 2> tangentetaslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_ETA);
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    // Mortar operators derivatives
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaMOperator = rMortarConditionMatrices.DeltaMOperator;
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaDOperator = rMortarConditionMatrices.DeltaDOperator;
    
    // We get the friction coefficient
    const array_1d<double, 2> mu = GetFrictionCoefficient();

    if (rActiveInactive == 0 )
    {
        const double clhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs1 =     clhs0*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs2 =     clhs0*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=0;
        lhs(0,1)=0;
        lhs(0,2)=0;
        lhs(0,3)=0;
        lhs(0,4)=0;
        lhs(0,5)=0;
        lhs(0,6)=0;
        lhs(0,7)=0;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(1,0)=0;
        lhs(1,1)=0;
        lhs(1,2)=0;
        lhs(1,3)=0;
        lhs(1,4)=0;
        lhs(1,5)=0;
        lhs(1,6)=0;
        lhs(1,7)=0;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(2,0)=0;
        lhs(2,1)=0;
        lhs(2,2)=0;
        lhs(2,3)=0;
        lhs(2,4)=0;
        lhs(2,5)=0;
        lhs(2,6)=0;
        lhs(2,7)=0;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(3,0)=0;
        lhs(3,1)=0;
        lhs(3,2)=0;
        lhs(3,3)=0;
        lhs(3,4)=0;
        lhs(3,5)=0;
        lhs(3,6)=0;
        lhs(3,7)=0;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(4,0)=0;
        lhs(4,1)=0;
        lhs(4,2)=0;
        lhs(4,3)=0;
        lhs(4,4)=0;
        lhs(4,5)=0;
        lhs(4,6)=0;
        lhs(4,7)=0;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(5,0)=0;
        lhs(5,1)=0;
        lhs(5,2)=0;
        lhs(5,3)=0;
        lhs(5,4)=0;
        lhs(5,5)=0;
        lhs(5,6)=0;
        lhs(5,7)=0;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(6,0)=0;
        lhs(6,1)=0;
        lhs(6,2)=0;
        lhs(6,3)=0;
        lhs(6,4)=0;
        lhs(6,5)=0;
        lhs(6,6)=0;
        lhs(6,7)=0;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(7,0)=0;
        lhs(7,1)=0;
        lhs(7,2)=0;
        lhs(7,3)=0;
        lhs(7,4)=0;
        lhs(7,5)=0;
        lhs(7,6)=0;
        lhs(7,7)=0;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs0*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs1;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs1;
        lhs(9,9)=clhs0*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs0*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs2;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs2;
        lhs(11,11)=clhs0*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 1 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(0,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(0,0);
        const double clhs17 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs18 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs20 =     normalslave(0,1)*(-clhs1*clhs12 + clhs10*clhs17 + clhs11*clhs18 - clhs13*clhs19);
        const double clhs21 =     normalslave(0,0)*(clhs0 + clhs1*clhs7 - clhs17*clhs3 - clhs18*clhs5 + clhs19*clhs8);
        const double clhs22 =     -clhs20 + clhs21;
        const double clhs23 =     clhs22*normalslave(0,0)*penalty_parameter;
        const double clhs24 =     lm(0,0)*tangentetaslave(0,0);
        const double clhs25 =     lm(0,1)*tangentetaslave(0,1);
        const double clhs26 =     clhs24 + clhs25;
        const double clhs27 =     lm(0,0)*tangentxislave(0,0);
        const double clhs28 =     lm(0,1)*tangentxislave(0,1);
        const double clhs29 =     clhs27 + clhs28;
        const double clhs30 =     clhs26*tangentetaslave(0,0) + clhs29*tangentxislave(0,0);
        const double clhs31 =     clhs26*tangentetaslave(0,1) + clhs29*tangentxislave(0,1);
        const double clhs32 =     std::pow(fabs(clhs30), 2) + std::pow(fabs(clhs31), 2);
        const double clhs33 =     std::pow(clhs32, -1.0L/2.0L);
        const double clhs34 =     lm(1,0)*tangentetaslave(1,0);
        const double clhs35 =     lm(1,1)*tangentetaslave(1,1);
        const double clhs36 =     clhs34 + clhs35;
        const double clhs37 =     lm(1,0)*tangentxislave(1,0);
        const double clhs38 =     lm(1,1)*tangentxislave(1,1);
        const double clhs39 =     clhs37 + clhs38;
        const double clhs40 =     std::pow(fabs(clhs36*tangentetaslave(1,0) + clhs39*tangentxislave(1,0)), 2) + std::pow(fabs(clhs36*tangentetaslave(1,1) + clhs39*tangentxislave(1,1)), 2);
        const double clhs41 =     std::pow(clhs40, -1.0L/2.0L);
        const double clhs42 =     clhs15*clhs30*clhs33*clhs41*mu[0];
        const double clhs43 =     clhs22*clhs30*clhs33*clhs41*mu[0]*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     normalslave(0,0)*(clhs3*clhs45 - clhs44*clhs7 + clhs46*clhs5 - clhs47*clhs8) - normalslave(0,1)*(clhs0 - clhs10*clhs45 - clhs11*clhs46 + clhs12*clhs44 + clhs13*clhs47);
        const double clhs49 =     clhs48*normalslave(0,0)*penalty_parameter;
        const double clhs50 =     clhs30*clhs33*clhs41*clhs48*mu[0]*penalty_parameter;
        const double clhs51 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs52 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs53 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs54 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs55 =     normalslave(0,1)*(clhs10*clhs52 + clhs11*clhs53 - clhs12*clhs51 - clhs13*clhs54);
        const double clhs56 =     normalslave(0,0)*(-clhs3*clhs52 - clhs5*clhs53 + clhs51*clhs7 + clhs54*clhs8 + clhs9);
        const double clhs57 =     -clhs55 + clhs56;
        const double clhs58 =     clhs57*normalslave(0,0)*penalty_parameter;
        const double clhs59 =     clhs30*clhs33*clhs41*clhs57*mu[0]*penalty_parameter;
        const double clhs60 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs61 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs62 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs63 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs64 =     normalslave(0,0)*(clhs3*clhs61 + clhs5*clhs62 - clhs60*clhs7 - clhs63*clhs8) - normalslave(0,1)*(-clhs10*clhs61 - clhs11*clhs62 + clhs12*clhs60 + clhs13*clhs63 + clhs9);
        const double clhs65 =     clhs64*normalslave(0,0)*penalty_parameter;
        const double clhs66 =     clhs30*clhs33*clhs41*clhs64*mu[0]*penalty_parameter;
        const double clhs67 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs68 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs69 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs70 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs71 =     normalslave(0,0)*(clhs3*clhs68 + clhs4 + clhs5*clhs69 - clhs67*clhs7 - clhs70*clhs8) + normalslave(0,1)*(clhs10*clhs68 + clhs11*clhs69 - clhs12*clhs67 - clhs13*clhs70);
        const double clhs72 =     clhs71*normalslave(0,0)*penalty_parameter;
        const double clhs73 =     clhs30*clhs33*clhs41*clhs71*mu[0]*penalty_parameter;
        const double clhs74 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs75 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs76 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs77 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs78 =     normalslave(0,0)*(clhs3*clhs75 + clhs5*clhs76 - clhs7*clhs74 - clhs77*clhs8) + normalslave(0,1)*(clhs10*clhs75 + clhs11*clhs76 - clhs12*clhs74 - clhs13*clhs77 + clhs4);
        const double clhs79 =     clhs78*normalslave(0,0)*penalty_parameter;
        const double clhs80 =     clhs30*clhs33*clhs41*clhs78*mu[0]*penalty_parameter;
        const double clhs81 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs82 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs83 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs84 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs85 =     normalslave(0,0)*(clhs3*clhs82 + clhs5*clhs83 + clhs6 - clhs7*clhs81 - clhs8*clhs84) + normalslave(0,1)*(clhs10*clhs82 + clhs11*clhs83 - clhs12*clhs81 - clhs13*clhs84);
        const double clhs86 =     clhs85*normalslave(0,0)*penalty_parameter;
        const double clhs87 =     clhs30*clhs33*clhs41*clhs85*mu[0]*penalty_parameter;
        const double clhs88 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs89 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs90 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs91 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs92 =     normalslave(0,0)*(clhs3*clhs89 + clhs5*clhs90 - clhs7*clhs88 - clhs8*clhs91) + normalslave(0,1)*(clhs10*clhs89 + clhs11*clhs90 - clhs12*clhs88 - clhs13*clhs91 + clhs6);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     clhs30*clhs33*clhs41*clhs92*mu[0]*penalty_parameter;
        const double clhs95 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs96 =     clhs33*clhs41*mu[0]*normalslave(0,0)*scale_factor;
        const double clhs97 =     clhs30*clhs96;
        const double clhs98 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs99 =     clhs33*clhs41*clhs98*mu[0];
        const double clhs100 =     -clhs14 + clhs2;
        const double clhs101 =     std::pow(clhs32, -3.0L/2.0L);
        const double clhs102 =     clhs100*clhs101*clhs30*clhs41*mu[0];
        const double clhs103 =     re(tangentetaslave(0,0)); // RE(TANGENTETASLAVE(0,0))
        const double clhs104 =     im(clhs24); // IM(CLHS24)
        const double clhs105 =     Derivative(im(clhs24), lm(0,0)); // DERIVATIVE(IM(CLHS24), LM(0,0))
        const double clhs106 =     re(tangentxislave(0,0)); // RE(TANGENTXISLAVE(0,0))
        const double clhs107 =     im(clhs27); // IM(CLHS27)
        const double clhs108 =     Derivative(im(clhs27), lm(0,0)); // DERIVATIVE(IM(CLHS27), LM(0,0))
        const double clhs109 =     im(tangentetaslave(0,0)); // IM(TANGENTETASLAVE(0,0))
        const double clhs110 =     re(clhs24); // RE(CLHS24)
        const double clhs111 =     Derivative(re(clhs24), lm(0,0)); // DERIVATIVE(RE(CLHS24), LM(0,0))
        const double clhs112 =     im(tangentxislave(0,0)); // IM(TANGENTXISLAVE(0,0))
        const double clhs113 =     re(clhs27); // RE(CLHS27)
        const double clhs114 =     Derivative(re(clhs27), lm(0,0)); // DERIVATIVE(RE(CLHS27), LM(0,0))
        const double clhs115 =     re(clhs25); // RE(CLHS25)
        const double clhs116 =     clhs110 + clhs115;
        const double clhs117 =     re(clhs28); // RE(CLHS28)
        const double clhs118 =     clhs113 + clhs117;
        const double clhs119 =     im(clhs25); // IM(CLHS25)
        const double clhs120 =     clhs104 + clhs119;
        const double clhs121 =     im(clhs28); // IM(CLHS28)
        const double clhs122 =     clhs107 + clhs121;
        const double clhs123 =     clhs103*clhs120 + clhs106*clhs122 + clhs109*clhs116 + clhs112*clhs118;
        const double clhs124 =     re(tangentetaslave(0,1)); // RE(TANGENTETASLAVE(0,1))
        const double clhs125 =     re(tangentxislave(0,1)); // RE(TANGENTXISLAVE(0,1))
        const double clhs126 =     im(tangentetaslave(0,1)); // IM(TANGENTETASLAVE(0,1))
        const double clhs127 =     im(tangentxislave(0,1)); // IM(TANGENTXISLAVE(0,1))
        const double clhs128 =     clhs116*clhs126 + clhs118*clhs127 + clhs120*clhs124 + clhs122*clhs125;
        const double clhs129 =     clhs103*clhs116 + clhs106*clhs118 - clhs109*clhs120 - clhs112*clhs122;
        const double clhs130 =     clhs116*clhs124 + clhs118*clhs125 - clhs120*clhs126 - clhs122*clhs127;
        const double clhs131 =     clhs123*(clhs103*clhs105 + clhs106*clhs108 + clhs109*clhs111 + clhs112*clhs114) + clhs128*(clhs105*clhs124 + clhs108*clhs125 + clhs111*clhs126 + clhs114*clhs127) + clhs129*(clhs103*clhs111 - clhs105*clhs109 + clhs106*clhs114 - clhs108*clhs112) + clhs130*(-clhs105*clhs126 - clhs108*clhs127 + clhs111*clhs124 + clhs114*clhs125);
        const double clhs132 =     -clhs100*clhs99 + clhs102*clhs131 + clhs95 - clhs97;
        const double clhs133 =     normalslave(0,1)*(normalslave(0,0)*scale_factor);
        const double clhs134 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs135 =     clhs134*clhs33*clhs41*mu[0];
        const double clhs136 =     -clhs100*clhs135 + clhs133;
        const double clhs137 =     clhs33*clhs41*mu[0]*normalslave(0,1)*scale_factor;
        const double clhs138 =     clhs137*clhs30;
        const double clhs139 =     Derivative(im(clhs25), lm(0,1)); // DERIVATIVE(IM(CLHS25), LM(0,1))
        const double clhs140 =     Derivative(im(clhs28), lm(0,1)); // DERIVATIVE(IM(CLHS28), LM(0,1))
        const double clhs141 =     Derivative(re(clhs25), lm(0,1)); // DERIVATIVE(RE(CLHS25), LM(0,1))
        const double clhs142 =     Derivative(re(clhs28), lm(0,1)); // DERIVATIVE(RE(CLHS28), LM(0,1))
        const double clhs143 =     clhs123*(clhs103*clhs139 + clhs106*clhs140 + clhs109*clhs141 + clhs112*clhs142) + clhs128*(clhs124*clhs139 + clhs125*clhs140 + clhs126*clhs141 + clhs127*clhs142) + clhs129*(clhs103*clhs141 + clhs106*clhs142 - clhs109*clhs139 - clhs112*clhs140) + clhs130*(clhs124*clhs141 + clhs125*clhs142 - clhs126*clhs139 - clhs127*clhs140);
        const double clhs144 =     clhs102*clhs143 + clhs136 - clhs138;
        const double clhs145 =     std::pow(clhs40, -3.0L/2.0L);
        const double clhs146 =     re(tangentetaslave(1,0)); // RE(TANGENTETASLAVE(1,0))
        const double clhs147 =     im(clhs34); // IM(CLHS34)
        const double clhs148 =     Derivative(im(clhs34), lm(1,0)); // DERIVATIVE(IM(CLHS34), LM(1,0))
        const double clhs149 =     re(tangentxislave(1,0)); // RE(TANGENTXISLAVE(1,0))
        const double clhs150 =     im(clhs37); // IM(CLHS37)
        const double clhs151 =     Derivative(im(clhs37), lm(1,0)); // DERIVATIVE(IM(CLHS37), LM(1,0))
        const double clhs152 =     im(tangentetaslave(1,0)); // IM(TANGENTETASLAVE(1,0))
        const double clhs153 =     re(clhs34); // RE(CLHS34)
        const double clhs154 =     Derivative(re(clhs34), lm(1,0)); // DERIVATIVE(RE(CLHS34), LM(1,0))
        const double clhs155 =     im(tangentxislave(1,0)); // IM(TANGENTXISLAVE(1,0))
        const double clhs156 =     re(clhs37); // RE(CLHS37)
        const double clhs157 =     Derivative(re(clhs37), lm(1,0)); // DERIVATIVE(RE(CLHS37), LM(1,0))
        const double clhs158 =     re(clhs35); // RE(CLHS35)
        const double clhs159 =     clhs153 + clhs158;
        const double clhs160 =     re(clhs38); // RE(CLHS38)
        const double clhs161 =     clhs156 + clhs160;
        const double clhs162 =     im(clhs35); // IM(CLHS35)
        const double clhs163 =     clhs147 + clhs162;
        const double clhs164 =     im(clhs38); // IM(CLHS38)
        const double clhs165 =     clhs150 + clhs164;
        const double clhs166 =     clhs146*clhs163 + clhs149*clhs165 + clhs152*clhs159 + clhs155*clhs161;
        const double clhs167 =     re(tangentetaslave(1,1)); // RE(TANGENTETASLAVE(1,1))
        const double clhs168 =     re(tangentxislave(1,1)); // RE(TANGENTXISLAVE(1,1))
        const double clhs169 =     im(tangentetaslave(1,1)); // IM(TANGENTETASLAVE(1,1))
        const double clhs170 =     im(tangentxislave(1,1)); // IM(TANGENTXISLAVE(1,1))
        const double clhs171 =     clhs159*clhs169 + clhs161*clhs170 + clhs163*clhs167 + clhs165*clhs168;
        const double clhs172 =     clhs146*clhs159 + clhs149*clhs161 - clhs152*clhs163 - clhs155*clhs165;
        const double clhs173 =     clhs159*clhs167 + clhs161*clhs168 - clhs163*clhs169 - clhs165*clhs170;
        const double clhs174 =     clhs166*(clhs146*clhs148 + clhs149*clhs151 + clhs152*clhs154 + clhs155*clhs157) + clhs171*(clhs148*clhs167 + clhs151*clhs168 + clhs154*clhs169 + clhs157*clhs170) + clhs172*(clhs146*clhs154 - clhs148*clhs152 + clhs149*clhs157 - clhs151*clhs155) + clhs173*(-clhs148*clhs169 - clhs151*clhs170 + clhs154*clhs167 + clhs157*clhs168);
        const double clhs175 =     clhs145*clhs15*clhs174*clhs30*clhs33*mu[0];
        const double clhs176 =     Derivative(im(clhs35), lm(1,1)); // DERIVATIVE(IM(CLHS35), LM(1,1))
        const double clhs177 =     Derivative(im(clhs38), lm(1,1)); // DERIVATIVE(IM(CLHS38), LM(1,1))
        const double clhs178 =     Derivative(re(clhs35), lm(1,1)); // DERIVATIVE(RE(CLHS35), LM(1,1))
        const double clhs179 =     Derivative(re(clhs38), lm(1,1)); // DERIVATIVE(RE(CLHS38), LM(1,1))
        const double clhs180 =     clhs166*(clhs146*clhs176 + clhs149*clhs177 + clhs152*clhs178 + clhs155*clhs179) + clhs171*(clhs167*clhs176 + clhs168*clhs177 + clhs169*clhs178 + clhs170*clhs179) + clhs172*(clhs146*clhs178 + clhs149*clhs179 - clhs152*clhs176 - clhs155*clhs177) + clhs173*(clhs167*clhs178 + clhs168*clhs179 - clhs169*clhs176 - clhs170*clhs177);
        const double clhs181 =     clhs145*clhs15*clhs180*clhs30*clhs33*mu[0];
        const double clhs182 =     clhs15*normalslave(0,1);
        const double clhs183 =     clhs22*normalslave(0,1)*penalty_parameter;
        const double clhs184 =     clhs15*clhs31*clhs33*clhs41*mu[0];
        const double clhs185 =     clhs22*clhs31*clhs33*clhs41*mu[0]*penalty_parameter;
        const double clhs186 =     clhs48*normalslave(0,1)*penalty_parameter;
        const double clhs187 =     clhs31*clhs33*clhs41*clhs48*mu[0]*penalty_parameter;
        const double clhs188 =     clhs57*normalslave(0,1)*penalty_parameter;
        const double clhs189 =     clhs31*clhs33*clhs41*clhs57*mu[0]*penalty_parameter;
        const double clhs190 =     clhs64*normalslave(0,1)*penalty_parameter;
        const double clhs191 =     clhs31*clhs33*clhs41*clhs64*mu[0]*penalty_parameter;
        const double clhs192 =     clhs71*normalslave(0,1)*penalty_parameter;
        const double clhs193 =     clhs31*clhs33*clhs41*clhs71*mu[0]*penalty_parameter;
        const double clhs194 =     clhs78*normalslave(0,1)*penalty_parameter;
        const double clhs195 =     clhs31*clhs33*clhs41*clhs78*mu[0]*penalty_parameter;
        const double clhs196 =     clhs85*normalslave(0,1)*penalty_parameter;
        const double clhs197 =     clhs31*clhs33*clhs41*clhs85*mu[0]*penalty_parameter;
        const double clhs198 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs199 =     clhs31*clhs33*clhs41*clhs92*mu[0]*penalty_parameter;
        const double clhs200 =     clhs31*clhs96;
        const double clhs201 =     clhs100*clhs101*clhs31*clhs41*mu[0];
        const double clhs202 =     clhs131*clhs201 + clhs136 - clhs200;
        const double clhs203 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs204 =     clhs137*clhs31;
        const double clhs205 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs206 =     clhs205*clhs33*clhs41*mu[0];
        const double clhs207 =     -clhs100*clhs206 + clhs143*clhs201 + clhs203 - clhs204;
        const double clhs208 =     clhs145*clhs15*clhs174*clhs31*clhs33*mu[0];
        const double clhs209 =     clhs145*clhs15*clhs180*clhs31*clhs33*mu[0];
        const double clhs210 =     clhs100*normalslave(0,0);
        const double clhs211 =     clhs20 - clhs21;
        const double clhs212 =     clhs211*normalslave(0,0)*penalty_parameter;
        const double clhs213 =     clhs100*clhs30*clhs33*clhs41*mu[0];
        const double clhs214 =     clhs211*clhs30*clhs33*clhs41*mu[0]*penalty_parameter;
        const double clhs215 =     clhs55 - clhs56;
        const double clhs216 =     clhs215*normalslave(0,0)*penalty_parameter;
        const double clhs217 =     clhs215*clhs30*clhs33*clhs41*mu[0]*penalty_parameter;
        const double clhs218 =     clhs101*clhs15*clhs30*clhs41*mu[0];
        const double clhs219 =     clhs131*clhs218 - clhs15*clhs99 + clhs97;
        const double clhs220 =     clhs219 - clhs95;
        const double clhs221 =     -clhs135*clhs15;
        const double clhs222 =     -clhs133 + clhs221;
        const double clhs223 =     clhs138 + clhs143*clhs218;
        const double clhs224 =     clhs222 + clhs223;
        const double clhs225 =     clhs100*normalslave(0,1);
        const double clhs226 =     clhs211*normalslave(0,1)*penalty_parameter;
        const double clhs227 =     clhs100*clhs31*clhs33*clhs41*mu[0];
        const double clhs228 =     clhs211*clhs31*clhs33*clhs41*mu[0]*penalty_parameter;
        const double clhs229 =     clhs215*normalslave(0,1)*penalty_parameter;
        const double clhs230 =     clhs215*clhs31*clhs33*clhs41*mu[0]*penalty_parameter;
        const double clhs231 =     clhs101*clhs15*clhs31*clhs41*mu[0];
        const double clhs232 =     clhs131*clhs231 + clhs200;
        const double clhs233 =     clhs222 + clhs232;
        const double clhs234 =     clhs143*clhs231 - clhs15*clhs206 + clhs204;
        const double clhs235 =     -clhs203 + clhs234;
        const double clhs236 =     clhs211*scale_factor;
        const double clhs237 =     clhs30*clhs98;
        const double clhs238 =     0.5*clhs33*clhs41*mu[0];
        const double clhs239 =     clhs134*clhs31;
        const double clhs240 =     -clhs237*clhs238 - clhs238*clhs239 + normalslave(0,0);
        const double clhs241 =     clhs48*scale_factor;
        const double clhs242 =     clhs215*scale_factor;
        const double clhs243 =     clhs64*scale_factor;
        const double clhs244 =     clhs71*scale_factor;
        const double clhs245 =     clhs78*scale_factor;
        const double clhs246 =     clhs85*scale_factor;
        const double clhs247 =     clhs92*scale_factor;
        const double clhs248 =     1.0/penalty_parameter;
        const double clhs249 =     0.5*clhs248*scale_factor;
        const double clhs250 =     clhs219 + clhs98*scale_factor;
        const double clhs251 =     clhs134*scale_factor + clhs221;
        const double clhs252 =     clhs232 + clhs251;
        const double clhs253 =     clhs223 + clhs251;
        const double clhs254 =     clhs205*scale_factor + clhs234;
        const double clhs255 =     0.5*clhs100*clhs145*clhs248*clhs33*mu[0]*scale_factor*(clhs237 + clhs239);
        const double clhs256 =     clhs205*clhs31;
        const double clhs257 =     clhs134*clhs30;
        const double clhs258 =     -clhs238*clhs256 - clhs238*clhs257 + normalslave(0,1);
        const double clhs259 =     0.5*clhs100*clhs145*clhs248*clhs33*mu[0]*scale_factor*(clhs256 + clhs257);
        const double clhs260 =     0.5*clhs248*std::pow(scale_factor, 2.0);
        const double clhs261 =     clhs260*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=clhs0*clhs23 - clhs0*clhs43 - clhs1*clhs16 + clhs1*clhs42;
        lhs(0,1)=-clhs0*clhs49 + clhs0*clhs50 - clhs16*clhs44 + clhs42*clhs44;
        lhs(0,2)=clhs0*clhs58 - clhs0*clhs59 - clhs16*clhs51 + clhs42*clhs51;
        lhs(0,3)=-clhs0*clhs65 + clhs0*clhs66 - clhs16*clhs60 + clhs42*clhs60;
        lhs(0,4)=-clhs0*clhs72 + clhs0*clhs73 - clhs16*clhs67 + clhs42*clhs67;
        lhs(0,5)=-clhs0*clhs79 + clhs0*clhs80 - clhs16*clhs74 + clhs42*clhs74;
        lhs(0,6)=-clhs0*clhs86 + clhs0*clhs87 - clhs16*clhs81 + clhs42*clhs81;
        lhs(0,7)=-clhs0*clhs93 + clhs0*clhs94 - clhs16*clhs88 + clhs42*clhs88;
        lhs(0,8)=clhs0*clhs132;
        lhs(0,9)=clhs0*clhs144;
        lhs(0,10)=-clhs0*clhs175;
        lhs(0,11)=-clhs0*clhs181;
        lhs(1,0)=clhs0*clhs183 - clhs0*clhs185 - clhs1*clhs182 + clhs1*clhs184;
        lhs(1,1)=-clhs0*clhs186 + clhs0*clhs187 - clhs182*clhs44 + clhs184*clhs44;
        lhs(1,2)=clhs0*clhs188 - clhs0*clhs189 - clhs182*clhs51 + clhs184*clhs51;
        lhs(1,3)=-clhs0*clhs190 + clhs0*clhs191 - clhs182*clhs60 + clhs184*clhs60;
        lhs(1,4)=-clhs0*clhs192 + clhs0*clhs193 - clhs182*clhs67 + clhs184*clhs67;
        lhs(1,5)=-clhs0*clhs194 + clhs0*clhs195 - clhs182*clhs74 + clhs184*clhs74;
        lhs(1,6)=-clhs0*clhs196 + clhs0*clhs197 - clhs182*clhs81 + clhs184*clhs81;
        lhs(1,7)=-clhs0*clhs198 + clhs0*clhs199 - clhs182*clhs88 + clhs184*clhs88;
        lhs(1,8)=clhs0*clhs202;
        lhs(1,9)=clhs0*clhs207;
        lhs(1,10)=-clhs0*clhs208;
        lhs(1,11)=-clhs0*clhs209;
        lhs(2,0)=-clhs16*clhs19 + clhs19*clhs42 + clhs23*clhs9 - clhs43*clhs9;
        lhs(2,1)=-clhs16*clhs47 + clhs42*clhs47 - clhs49*clhs9 + clhs50*clhs9;
        lhs(2,2)=-clhs16*clhs54 + clhs42*clhs54 + clhs58*clhs9 - clhs59*clhs9;
        lhs(2,3)=-clhs16*clhs63 + clhs42*clhs63 - clhs65*clhs9 + clhs66*clhs9;
        lhs(2,4)=-clhs16*clhs70 + clhs42*clhs70 - clhs72*clhs9 + clhs73*clhs9;
        lhs(2,5)=-clhs16*clhs77 + clhs42*clhs77 - clhs79*clhs9 + clhs80*clhs9;
        lhs(2,6)=-clhs16*clhs84 + clhs42*clhs84 - clhs86*clhs9 + clhs87*clhs9;
        lhs(2,7)=-clhs16*clhs91 + clhs42*clhs91 - clhs9*clhs93 + clhs9*clhs94;
        lhs(2,8)=clhs132*clhs9;
        lhs(2,9)=clhs144*clhs9;
        lhs(2,10)=-clhs175*clhs9;
        lhs(2,11)=-clhs181*clhs9;
        lhs(3,0)=-clhs182*clhs19 + clhs183*clhs9 + clhs184*clhs19 - clhs185*clhs9;
        lhs(3,1)=-clhs182*clhs47 + clhs184*clhs47 - clhs186*clhs9 + clhs187*clhs9;
        lhs(3,2)=-clhs182*clhs54 + clhs184*clhs54 + clhs188*clhs9 - clhs189*clhs9;
        lhs(3,3)=-clhs182*clhs63 + clhs184*clhs63 - clhs190*clhs9 + clhs191*clhs9;
        lhs(3,4)=-clhs182*clhs70 + clhs184*clhs70 - clhs192*clhs9 + clhs193*clhs9;
        lhs(3,5)=-clhs182*clhs77 + clhs184*clhs77 - clhs194*clhs9 + clhs195*clhs9;
        lhs(3,6)=-clhs182*clhs84 + clhs184*clhs84 - clhs196*clhs9 + clhs197*clhs9;
        lhs(3,7)=-clhs182*clhs91 + clhs184*clhs91 - clhs198*clhs9 + clhs199*clhs9;
        lhs(3,8)=clhs202*clhs9;
        lhs(3,9)=clhs207*clhs9;
        lhs(3,10)=-clhs208*clhs9;
        lhs(3,11)=-clhs209*clhs9;
        lhs(4,0)=-clhs17*clhs210 + clhs17*clhs213 + clhs212*clhs4 - clhs214*clhs4;
        lhs(4,1)=-clhs210*clhs45 + clhs213*clhs45 + clhs4*clhs49 - clhs4*clhs50;
        lhs(4,2)=-clhs210*clhs52 + clhs213*clhs52 + clhs216*clhs4 - clhs217*clhs4;
        lhs(4,3)=-clhs210*clhs61 + clhs213*clhs61 + clhs4*clhs65 - clhs4*clhs66;
        lhs(4,4)=-clhs210*clhs68 + clhs213*clhs68 + clhs4*clhs72 - clhs4*clhs73;
        lhs(4,5)=-clhs210*clhs75 + clhs213*clhs75 + clhs4*clhs79 - clhs4*clhs80;
        lhs(4,6)=-clhs210*clhs82 + clhs213*clhs82 + clhs4*clhs86 - clhs4*clhs87;
        lhs(4,7)=-clhs210*clhs89 + clhs213*clhs89 + clhs4*clhs93 - clhs4*clhs94;
        lhs(4,8)=clhs220*clhs4;
        lhs(4,9)=clhs224*clhs4;
        lhs(4,10)=clhs175*clhs4;
        lhs(4,11)=clhs181*clhs4;
        lhs(5,0)=-clhs17*clhs225 + clhs17*clhs227 + clhs226*clhs4 - clhs228*clhs4;
        lhs(5,1)=clhs186*clhs4 - clhs187*clhs4 - clhs225*clhs45 + clhs227*clhs45;
        lhs(5,2)=-clhs225*clhs52 + clhs227*clhs52 + clhs229*clhs4 - clhs230*clhs4;
        lhs(5,3)=clhs190*clhs4 - clhs191*clhs4 - clhs225*clhs61 + clhs227*clhs61;
        lhs(5,4)=clhs192*clhs4 - clhs193*clhs4 - clhs225*clhs68 + clhs227*clhs68;
        lhs(5,5)=clhs194*clhs4 - clhs195*clhs4 - clhs225*clhs75 + clhs227*clhs75;
        lhs(5,6)=clhs196*clhs4 - clhs197*clhs4 - clhs225*clhs82 + clhs227*clhs82;
        lhs(5,7)=clhs198*clhs4 - clhs199*clhs4 - clhs225*clhs89 + clhs227*clhs89;
        lhs(5,8)=clhs233*clhs4;
        lhs(5,9)=clhs235*clhs4;
        lhs(5,10)=clhs208*clhs4;
        lhs(5,11)=clhs209*clhs4;
        lhs(6,0)=-clhs18*clhs210 + clhs18*clhs213 + clhs212*clhs6 - clhs214*clhs6;
        lhs(6,1)=-clhs210*clhs46 + clhs213*clhs46 + clhs49*clhs6 - clhs50*clhs6;
        lhs(6,2)=-clhs210*clhs53 + clhs213*clhs53 + clhs216*clhs6 - clhs217*clhs6;
        lhs(6,3)=-clhs210*clhs62 + clhs213*clhs62 + clhs6*clhs65 - clhs6*clhs66;
        lhs(6,4)=-clhs210*clhs69 + clhs213*clhs69 + clhs6*clhs72 - clhs6*clhs73;
        lhs(6,5)=-clhs210*clhs76 + clhs213*clhs76 + clhs6*clhs79 - clhs6*clhs80;
        lhs(6,6)=-clhs210*clhs83 + clhs213*clhs83 + clhs6*clhs86 - clhs6*clhs87;
        lhs(6,7)=-clhs210*clhs90 + clhs213*clhs90 + clhs6*clhs93 - clhs6*clhs94;
        lhs(6,8)=clhs220*clhs6;
        lhs(6,9)=clhs224*clhs6;
        lhs(6,10)=clhs175*clhs6;
        lhs(6,11)=clhs181*clhs6;
        lhs(7,0)=-clhs18*clhs225 + clhs18*clhs227 + clhs226*clhs6 - clhs228*clhs6;
        lhs(7,1)=clhs186*clhs6 - clhs187*clhs6 - clhs225*clhs46 + clhs227*clhs46;
        lhs(7,2)=-clhs225*clhs53 + clhs227*clhs53 + clhs229*clhs6 - clhs230*clhs6;
        lhs(7,3)=clhs190*clhs6 - clhs191*clhs6 - clhs225*clhs62 + clhs227*clhs62;
        lhs(7,4)=clhs192*clhs6 - clhs193*clhs6 - clhs225*clhs69 + clhs227*clhs69;
        lhs(7,5)=clhs194*clhs6 - clhs195*clhs6 - clhs225*clhs76 + clhs227*clhs76;
        lhs(7,6)=clhs196*clhs6 - clhs197*clhs6 - clhs225*clhs83 + clhs227*clhs83;
        lhs(7,7)=clhs198*clhs6 - clhs199*clhs6 - clhs225*clhs90 + clhs227*clhs90;
        lhs(7,8)=clhs233*clhs6;
        lhs(7,9)=clhs235*clhs6;
        lhs(7,10)=clhs208*clhs6;
        lhs(7,11)=clhs209*clhs6;
        lhs(8,0)=clhs236*clhs240;
        lhs(8,1)=clhs240*clhs241;
        lhs(8,2)=clhs240*clhs242;
        lhs(8,3)=clhs240*clhs243;
        lhs(8,4)=clhs240*clhs244;
        lhs(8,5)=clhs240*clhs245;
        lhs(8,6)=clhs240*clhs246;
        lhs(8,7)=clhs240*clhs247;
        lhs(8,8)=clhs249*(clhs134*clhs252 + clhs250*clhs98);
        lhs(8,9)=clhs249*(clhs134*clhs254 + clhs253*clhs98);
        lhs(8,10)=-clhs174*clhs255;
        lhs(8,11)=-clhs180*clhs255;
        lhs(9,0)=clhs236*clhs258;
        lhs(9,1)=clhs241*clhs258;
        lhs(9,2)=clhs242*clhs258;
        lhs(9,3)=clhs243*clhs258;
        lhs(9,4)=clhs244*clhs258;
        lhs(9,5)=clhs245*clhs258;
        lhs(9,6)=clhs246*clhs258;
        lhs(9,7)=clhs247*clhs258;
        lhs(9,8)=clhs249*(clhs134*clhs250 + clhs205*clhs252);
        lhs(9,9)=clhs249*(clhs134*clhs253 + clhs205*clhs254);
        lhs(9,10)=-clhs174*clhs259;
        lhs(9,11)=-clhs180*clhs259;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs260*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs261;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs261;
        lhs(11,11)=clhs260*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 2 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(0,1) + clhs9*tangentetaslave(0,0)) + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double clhs16 =     clhs15*tangentetaslave(0,0);
        const double clhs17 =     penalty_parameter*(clhs14*tangentxislave(0,1) + clhs9*tangentxislave(0,0)) + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double clhs18 =     clhs17*tangentxislave(0,0);
        const double clhs19 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs20 =     X1(0,0) + u1(0,0);
        const double clhs21 =     X1(1,0) + u1(1,0);
        const double clhs22 =     X2(0,0) + u2(0,0);
        const double clhs23 =     X2(1,0) + u2(1,0);
        const double clhs24 =     X1(0,1) + u1(0,1);
        const double clhs25 =     X1(1,1) + u1(1,1);
        const double clhs26 =     X2(0,1) + u2(0,1);
        const double clhs27 =     X2(1,1) + u2(1,1);
        const double clhs28 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs22 + clhs20*clhs3 + clhs21*clhs5 - clhs23*clhs8) + normalslave(0,1)*(-clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8));
        const double clhs29 =     -clhs19 + clhs28;
        const double clhs30 =     clhs29*normalslave(0,0);
        const double clhs31 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs32 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs33 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     -clhs1*clhs6 + clhs2*clhs31 + clhs32*clhs4 - clhs33*clhs7;
        const double clhs35 =     -clhs1*clhs12 + clhs10*clhs31 + clhs11*clhs32 - clhs13*clhs33;
        const double clhs36 =     clhs34*tangentetaslave(0,0) + clhs35*tangentetaslave(0,1);
        const double clhs37 =     clhs36*penalty_parameter*tangentetaslave(0,0);
        const double clhs38 =     clhs34*tangentxislave(0,0) + clhs35*tangentxislave(0,1);
        const double clhs39 =     clhs38*penalty_parameter*tangentxislave(0,0);
        const double clhs40 =     normalslave(0,1)*(-clhs1*clhs26 + clhs24*clhs31 + clhs25*clhs32 - clhs27*clhs33);
        const double clhs41 =     normalslave(0,0)*(clhs0 + clhs1*clhs22 - clhs20*clhs31 - clhs21*clhs32 + clhs23*clhs33);
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(0,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     clhs2*clhs45 + clhs4*clhs46 - clhs44*clhs6 - clhs47*clhs7;
        const double clhs49 =     clhs10*clhs45 + clhs11*clhs46 - clhs12*clhs44 - clhs13*clhs47;
        const double clhs50 =     clhs48*tangentetaslave(0,0) + clhs49*tangentetaslave(0,1);
        const double clhs51 =     clhs50*penalty_parameter*tangentetaslave(0,0);
        const double clhs52 =     clhs48*tangentxislave(0,0) + clhs49*tangentxislave(0,1);
        const double clhs53 =     clhs52*penalty_parameter*tangentxislave(0,0);
        const double clhs54 =     normalslave(0,0)*(clhs20*clhs45 + clhs21*clhs46 - clhs22*clhs44 - clhs23*clhs47) - normalslave(0,1)*(clhs0 - clhs24*clhs45 - clhs25*clhs46 + clhs26*clhs44 + clhs27*clhs47);
        const double clhs55 =     clhs54*normalslave(0,0)*penalty_parameter;
        const double clhs56 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs57 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs58 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs59 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs60 =     clhs2*clhs57 + clhs4*clhs58 - clhs56*clhs6 - clhs59*clhs7;
        const double clhs61 =     clhs10*clhs57 + clhs11*clhs58 - clhs12*clhs56 - clhs13*clhs59;
        const double clhs62 =     clhs60*tangentetaslave(0,0) + clhs61*tangentetaslave(0,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentetaslave(0,0);
        const double clhs64 =     clhs60*tangentxislave(0,0) + clhs61*tangentxislave(0,1);
        const double clhs65 =     clhs64*penalty_parameter*tangentxislave(0,0);
        const double clhs66 =     normalslave(0,1)*(clhs24*clhs57 + clhs25*clhs58 - clhs26*clhs56 - clhs27*clhs59);
        const double clhs67 =     normalslave(0,0)*(-clhs20*clhs57 - clhs21*clhs58 + clhs22*clhs56 + clhs23*clhs59 + clhs8);
        const double clhs68 =     -clhs66 + clhs67;
        const double clhs69 =     clhs68*normalslave(0,0)*penalty_parameter;
        const double clhs70 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs71 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs72 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs73 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs74 =     clhs2*clhs71 + clhs4*clhs72 - clhs6*clhs70 - clhs7*clhs73;
        const double clhs75 =     clhs10*clhs71 + clhs11*clhs72 - clhs12*clhs70 - clhs13*clhs73;
        const double clhs76 =     clhs74*tangentetaslave(0,0) + clhs75*tangentetaslave(0,1);
        const double clhs77 =     clhs76*penalty_parameter*tangentetaslave(0,0);
        const double clhs78 =     clhs74*tangentxislave(0,0) + clhs75*tangentxislave(0,1);
        const double clhs79 =     clhs78*penalty_parameter*tangentxislave(0,0);
        const double clhs80 =     normalslave(0,0)*(clhs20*clhs71 + clhs21*clhs72 - clhs22*clhs70 - clhs23*clhs73) - normalslave(0,1)*(-clhs24*clhs71 - clhs25*clhs72 + clhs26*clhs70 + clhs27*clhs73 + clhs8);
        const double clhs81 =     clhs80*normalslave(0,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs83 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs84 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs85 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs86 =     clhs2*clhs83 + clhs4*clhs84 - clhs6*clhs82 - clhs7*clhs85;
        const double clhs87 =     clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85;
        const double clhs88 =     clhs86*tangentetaslave(0,0) + clhs87*tangentetaslave(0,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentetaslave(0,0);
        const double clhs90 =     clhs86*tangentxislave(0,0) + clhs87*tangentxislave(0,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(0,0);
        const double clhs92 =     normalslave(0,0)*(clhs20*clhs83 + clhs21*clhs84 - clhs22*clhs82 - clhs23*clhs85 + clhs3) + normalslave(0,1)*(clhs24*clhs83 + clhs25*clhs84 - clhs26*clhs82 - clhs27*clhs85);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs95 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs96 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs97 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs98 =     clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs94 - clhs7*clhs97;
        const double clhs99 =     clhs10*clhs95 + clhs11*clhs96 - clhs12*clhs94 - clhs13*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(0,0) + clhs99*tangentetaslave(0,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(0,0);
        const double clhs102 =     clhs98*tangentxislave(0,0) + clhs99*tangentxislave(0,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(0,0);
        const double clhs104 =     normalslave(0,0)*(clhs20*clhs95 + clhs21*clhs96 - clhs22*clhs94 - clhs23*clhs97) + normalslave(0,1)*(clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs94 - clhs27*clhs97 + clhs3);
        const double clhs105 =     clhs104*normalslave(0,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs107 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs108 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs109 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs110 =     -clhs106*clhs6 + clhs107*clhs2 + clhs108*clhs4 - clhs109*clhs7;
        const double clhs111 =     clhs10*clhs107 - clhs106*clhs12 + clhs108*clhs11 - clhs109*clhs13;
        const double clhs112 =     clhs110*tangentetaslave(0,0) + clhs111*tangentetaslave(0,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentetaslave(0,0);
        const double clhs114 =     clhs110*tangentxislave(0,0) + clhs111*tangentxislave(0,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(0,0);
        const double clhs116 =     normalslave(0,0)*(-clhs106*clhs22 + clhs107*clhs20 + clhs108*clhs21 - clhs109*clhs23 + clhs5) + normalslave(0,1)*(-clhs106*clhs26 + clhs107*clhs24 + clhs108*clhs25 - clhs109*clhs27);
        const double clhs117 =     clhs116*normalslave(0,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs119 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs120 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs121 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs122 =     -clhs118*clhs6 + clhs119*clhs2 + clhs120*clhs4 - clhs121*clhs7;
        const double clhs123 =     clhs10*clhs119 + clhs11*clhs120 - clhs118*clhs12 - clhs121*clhs13;
        const double clhs124 =     clhs122*tangentetaslave(0,0) + clhs123*tangentetaslave(0,1);
        const double clhs125 =     clhs124*penalty_parameter*tangentetaslave(0,0);
        const double clhs126 =     clhs122*tangentxislave(0,0) + clhs123*tangentxislave(0,1);
        const double clhs127 =     clhs126*penalty_parameter*tangentxislave(0,0);
        const double clhs128 =     normalslave(0,0)*(-clhs118*clhs22 + clhs119*clhs20 + clhs120*clhs21 - clhs121*clhs23) + normalslave(0,1)*(-clhs118*clhs26 + clhs119*clhs24 + clhs120*clhs25 - clhs121*clhs27 + clhs5);
        const double clhs129 =     clhs128*normalslave(0,0)*penalty_parameter;
        const double clhs130 =     scale_factor*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        const double clhs131 =     scale_factor*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs132 =     clhs0*clhs131;
        const double clhs133 =     clhs15*tangentetaslave(0,1);
        const double clhs134 =     clhs17*tangentxislave(0,1);
        const double clhs135 =     clhs29*normalslave(0,1);
        const double clhs136 =     clhs36*penalty_parameter*tangentetaslave(0,1);
        const double clhs137 =     clhs38*penalty_parameter*tangentxislave(0,1);
        const double clhs138 =     clhs42*normalslave(0,1)*penalty_parameter;
        const double clhs139 =     clhs50*penalty_parameter*tangentetaslave(0,1);
        const double clhs140 =     clhs52*penalty_parameter*tangentxislave(0,1);
        const double clhs141 =     clhs54*normalslave(0,1)*penalty_parameter;
        const double clhs142 =     clhs62*penalty_parameter*tangentetaslave(0,1);
        const double clhs143 =     clhs64*penalty_parameter*tangentxislave(0,1);
        const double clhs144 =     clhs68*normalslave(0,1)*penalty_parameter;
        const double clhs145 =     clhs76*penalty_parameter*tangentetaslave(0,1);
        const double clhs146 =     clhs78*penalty_parameter*tangentxislave(0,1);
        const double clhs147 =     clhs80*normalslave(0,1)*penalty_parameter;
        const double clhs148 =     clhs88*penalty_parameter*tangentetaslave(0,1);
        const double clhs149 =     clhs90*penalty_parameter*tangentxislave(0,1);
        const double clhs150 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs151 =     clhs100*penalty_parameter*tangentetaslave(0,1);
        const double clhs152 =     clhs102*penalty_parameter*tangentxislave(0,1);
        const double clhs153 =     clhs104*normalslave(0,1)*penalty_parameter;
        const double clhs154 =     clhs112*penalty_parameter*tangentetaslave(0,1);
        const double clhs155 =     clhs114*penalty_parameter*tangentxislave(0,1);
        const double clhs156 =     clhs116*normalslave(0,1)*penalty_parameter;
        const double clhs157 =     clhs124*penalty_parameter*tangentetaslave(0,1);
        const double clhs158 =     clhs126*penalty_parameter*tangentxislave(0,1);
        const double clhs159 =     clhs128*normalslave(0,1)*penalty_parameter;
        const double clhs160 =     scale_factor*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        const double clhs161 =     clhs131*clhs8;
        const double clhs162 =     clhs19 - clhs28;
        const double clhs163 =     clhs162*normalslave(0,0);
        const double clhs164 =     clhs40 - clhs41;
        const double clhs165 =     clhs164*normalslave(0,0)*penalty_parameter;
        const double clhs166 =     clhs66 - clhs67;
        const double clhs167 =     clhs166*normalslave(0,0)*penalty_parameter;
        const double clhs168 =     -clhs131*clhs3;
        const double clhs169 =     clhs162*normalslave(0,1);
        const double clhs170 =     clhs164*normalslave(0,1)*penalty_parameter;
        const double clhs171 =     clhs166*normalslave(0,1)*penalty_parameter;
        const double clhs172 =     -clhs131*clhs5;
        const double clhs173 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs174 =     clhs173*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=clhs0*clhs37 + clhs0*clhs39 + clhs0*clhs43 + clhs1*clhs16 + clhs1*clhs18 - clhs1*clhs30;
        lhs(0,1)=clhs0*clhs51 + clhs0*clhs53 - clhs0*clhs55 + clhs16*clhs44 + clhs18*clhs44 - clhs30*clhs44;
        lhs(0,2)=clhs0*clhs63 + clhs0*clhs65 + clhs0*clhs69 + clhs16*clhs56 + clhs18*clhs56 - clhs30*clhs56;
        lhs(0,3)=clhs0*clhs77 + clhs0*clhs79 - clhs0*clhs81 + clhs16*clhs70 + clhs18*clhs70 - clhs30*clhs70;
        lhs(0,4)=clhs0*clhs89 + clhs0*clhs91 - clhs0*clhs93 + clhs16*clhs82 + clhs18*clhs82 - clhs30*clhs82;
        lhs(0,5)=clhs0*clhs101 + clhs0*clhs103 - clhs0*clhs105 + clhs16*clhs94 + clhs18*clhs94 - clhs30*clhs94;
        lhs(0,6)=clhs0*clhs113 + clhs0*clhs115 - clhs0*clhs117 + clhs106*clhs16 + clhs106*clhs18 - clhs106*clhs30;
        lhs(0,7)=clhs0*clhs125 + clhs0*clhs127 - clhs0*clhs129 + clhs118*clhs16 + clhs118*clhs18 - clhs118*clhs30;
        lhs(0,8)=clhs0*clhs130;
        lhs(0,9)=clhs132;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(1,0)=clhs0*clhs136 + clhs0*clhs137 + clhs0*clhs138 + clhs1*clhs133 + clhs1*clhs134 - clhs1*clhs135;
        lhs(1,1)=clhs0*clhs139 + clhs0*clhs140 - clhs0*clhs141 + clhs133*clhs44 + clhs134*clhs44 - clhs135*clhs44;
        lhs(1,2)=clhs0*clhs142 + clhs0*clhs143 + clhs0*clhs144 + clhs133*clhs56 + clhs134*clhs56 - clhs135*clhs56;
        lhs(1,3)=clhs0*clhs145 + clhs0*clhs146 - clhs0*clhs147 + clhs133*clhs70 + clhs134*clhs70 - clhs135*clhs70;
        lhs(1,4)=clhs0*clhs148 + clhs0*clhs149 - clhs0*clhs150 + clhs133*clhs82 + clhs134*clhs82 - clhs135*clhs82;
        lhs(1,5)=clhs0*clhs151 + clhs0*clhs152 - clhs0*clhs153 + clhs133*clhs94 + clhs134*clhs94 - clhs135*clhs94;
        lhs(1,6)=clhs0*clhs154 + clhs0*clhs155 - clhs0*clhs156 + clhs106*clhs133 + clhs106*clhs134 - clhs106*clhs135;
        lhs(1,7)=clhs0*clhs157 + clhs0*clhs158 - clhs0*clhs159 + clhs118*clhs133 + clhs118*clhs134 - clhs118*clhs135;
        lhs(1,8)=clhs132;
        lhs(1,9)=clhs0*clhs160;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(2,0)=clhs16*clhs33 + clhs18*clhs33 - clhs30*clhs33 + clhs37*clhs8 + clhs39*clhs8 + clhs43*clhs8;
        lhs(2,1)=clhs16*clhs47 + clhs18*clhs47 - clhs30*clhs47 + clhs51*clhs8 + clhs53*clhs8 - clhs55*clhs8;
        lhs(2,2)=clhs16*clhs59 + clhs18*clhs59 - clhs30*clhs59 + clhs63*clhs8 + clhs65*clhs8 + clhs69*clhs8;
        lhs(2,3)=clhs16*clhs73 + clhs18*clhs73 - clhs30*clhs73 + clhs77*clhs8 + clhs79*clhs8 - clhs8*clhs81;
        lhs(2,4)=clhs16*clhs85 + clhs18*clhs85 - clhs30*clhs85 + clhs8*clhs89 + clhs8*clhs91 - clhs8*clhs93;
        lhs(2,5)=clhs101*clhs8 + clhs103*clhs8 - clhs105*clhs8 + clhs16*clhs97 + clhs18*clhs97 - clhs30*clhs97;
        lhs(2,6)=clhs109*clhs16 + clhs109*clhs18 - clhs109*clhs30 + clhs113*clhs8 + clhs115*clhs8 - clhs117*clhs8;
        lhs(2,7)=clhs121*clhs16 + clhs121*clhs18 - clhs121*clhs30 + clhs125*clhs8 + clhs127*clhs8 - clhs129*clhs8;
        lhs(2,8)=clhs130*clhs8;
        lhs(2,9)=clhs161;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(3,0)=clhs133*clhs33 + clhs134*clhs33 - clhs135*clhs33 + clhs136*clhs8 + clhs137*clhs8 + clhs138*clhs8;
        lhs(3,1)=clhs133*clhs47 + clhs134*clhs47 - clhs135*clhs47 + clhs139*clhs8 + clhs140*clhs8 - clhs141*clhs8;
        lhs(3,2)=clhs133*clhs59 + clhs134*clhs59 - clhs135*clhs59 + clhs142*clhs8 + clhs143*clhs8 + clhs144*clhs8;
        lhs(3,3)=clhs133*clhs73 + clhs134*clhs73 - clhs135*clhs73 + clhs145*clhs8 + clhs146*clhs8 - clhs147*clhs8;
        lhs(3,4)=clhs133*clhs85 + clhs134*clhs85 - clhs135*clhs85 + clhs148*clhs8 + clhs149*clhs8 - clhs150*clhs8;
        lhs(3,5)=clhs133*clhs97 + clhs134*clhs97 - clhs135*clhs97 + clhs151*clhs8 + clhs152*clhs8 - clhs153*clhs8;
        lhs(3,6)=clhs109*clhs133 + clhs109*clhs134 - clhs109*clhs135 + clhs154*clhs8 + clhs155*clhs8 - clhs156*clhs8;
        lhs(3,7)=clhs121*clhs133 + clhs121*clhs134 - clhs121*clhs135 + clhs157*clhs8 + clhs158*clhs8 - clhs159*clhs8;
        lhs(3,8)=clhs161;
        lhs(3,9)=clhs160*clhs8;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(4,0)=-clhs16*clhs31 - clhs163*clhs31 + clhs165*clhs3 - clhs18*clhs31 - clhs3*clhs37 - clhs3*clhs39;
        lhs(4,1)=-clhs16*clhs45 - clhs163*clhs45 - clhs18*clhs45 - clhs3*clhs51 - clhs3*clhs53 + clhs3*clhs55;
        lhs(4,2)=-clhs16*clhs57 - clhs163*clhs57 + clhs167*clhs3 - clhs18*clhs57 - clhs3*clhs63 - clhs3*clhs65;
        lhs(4,3)=-clhs16*clhs71 - clhs163*clhs71 - clhs18*clhs71 - clhs3*clhs77 - clhs3*clhs79 + clhs3*clhs81;
        lhs(4,4)=-clhs16*clhs83 - clhs163*clhs83 - clhs18*clhs83 - clhs3*clhs89 - clhs3*clhs91 + clhs3*clhs93;
        lhs(4,5)=-clhs101*clhs3 - clhs103*clhs3 + clhs105*clhs3 - clhs16*clhs95 - clhs163*clhs95 - clhs18*clhs95;
        lhs(4,6)=-clhs107*clhs16 - clhs107*clhs163 - clhs107*clhs18 - clhs113*clhs3 - clhs115*clhs3 + clhs117*clhs3;
        lhs(4,7)=-clhs119*clhs16 - clhs119*clhs163 - clhs119*clhs18 - clhs125*clhs3 - clhs127*clhs3 + clhs129*clhs3;
        lhs(4,8)=-clhs130*clhs3;
        lhs(4,9)=clhs168;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(5,0)=-clhs133*clhs31 - clhs134*clhs31 - clhs136*clhs3 - clhs137*clhs3 - clhs169*clhs31 + clhs170*clhs3;
        lhs(5,1)=-clhs133*clhs45 - clhs134*clhs45 - clhs139*clhs3 - clhs140*clhs3 + clhs141*clhs3 - clhs169*clhs45;
        lhs(5,2)=-clhs133*clhs57 - clhs134*clhs57 - clhs142*clhs3 - clhs143*clhs3 - clhs169*clhs57 + clhs171*clhs3;
        lhs(5,3)=-clhs133*clhs71 - clhs134*clhs71 - clhs145*clhs3 - clhs146*clhs3 + clhs147*clhs3 - clhs169*clhs71;
        lhs(5,4)=-clhs133*clhs83 - clhs134*clhs83 - clhs148*clhs3 - clhs149*clhs3 + clhs150*clhs3 - clhs169*clhs83;
        lhs(5,5)=-clhs133*clhs95 - clhs134*clhs95 - clhs151*clhs3 - clhs152*clhs3 + clhs153*clhs3 - clhs169*clhs95;
        lhs(5,6)=-clhs107*clhs133 - clhs107*clhs134 - clhs107*clhs169 - clhs154*clhs3 - clhs155*clhs3 + clhs156*clhs3;
        lhs(5,7)=-clhs119*clhs133 - clhs119*clhs134 - clhs119*clhs169 - clhs157*clhs3 - clhs158*clhs3 + clhs159*clhs3;
        lhs(5,8)=clhs168;
        lhs(5,9)=-clhs160*clhs3;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(6,0)=-clhs16*clhs32 - clhs163*clhs32 + clhs165*clhs5 - clhs18*clhs32 - clhs37*clhs5 - clhs39*clhs5;
        lhs(6,1)=-clhs16*clhs46 - clhs163*clhs46 - clhs18*clhs46 - clhs5*clhs51 - clhs5*clhs53 + clhs5*clhs55;
        lhs(6,2)=-clhs16*clhs58 - clhs163*clhs58 + clhs167*clhs5 - clhs18*clhs58 - clhs5*clhs63 - clhs5*clhs65;
        lhs(6,3)=-clhs16*clhs72 - clhs163*clhs72 - clhs18*clhs72 - clhs5*clhs77 - clhs5*clhs79 + clhs5*clhs81;
        lhs(6,4)=-clhs16*clhs84 - clhs163*clhs84 - clhs18*clhs84 - clhs5*clhs89 - clhs5*clhs91 + clhs5*clhs93;
        lhs(6,5)=-clhs101*clhs5 - clhs103*clhs5 + clhs105*clhs5 - clhs16*clhs96 - clhs163*clhs96 - clhs18*clhs96;
        lhs(6,6)=-clhs108*clhs16 - clhs108*clhs163 - clhs108*clhs18 - clhs113*clhs5 - clhs115*clhs5 + clhs117*clhs5;
        lhs(6,7)=-clhs120*clhs16 - clhs120*clhs163 - clhs120*clhs18 - clhs125*clhs5 - clhs127*clhs5 + clhs129*clhs5;
        lhs(6,8)=-clhs130*clhs5;
        lhs(6,9)=clhs172;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(7,0)=-clhs133*clhs32 - clhs134*clhs32 - clhs136*clhs5 - clhs137*clhs5 - clhs169*clhs32 + clhs170*clhs5;
        lhs(7,1)=-clhs133*clhs46 - clhs134*clhs46 - clhs139*clhs5 - clhs140*clhs5 + clhs141*clhs5 - clhs169*clhs46;
        lhs(7,2)=-clhs133*clhs58 - clhs134*clhs58 - clhs142*clhs5 - clhs143*clhs5 - clhs169*clhs58 + clhs171*clhs5;
        lhs(7,3)=-clhs133*clhs72 - clhs134*clhs72 - clhs145*clhs5 - clhs146*clhs5 + clhs147*clhs5 - clhs169*clhs72;
        lhs(7,4)=-clhs133*clhs84 - clhs134*clhs84 - clhs148*clhs5 - clhs149*clhs5 + clhs150*clhs5 - clhs169*clhs84;
        lhs(7,5)=-clhs133*clhs96 - clhs134*clhs96 - clhs151*clhs5 - clhs152*clhs5 + clhs153*clhs5 - clhs169*clhs96;
        lhs(7,6)=-clhs108*clhs133 - clhs108*clhs134 - clhs108*clhs169 - clhs154*clhs5 - clhs155*clhs5 + clhs156*clhs5;
        lhs(7,7)=-clhs120*clhs133 - clhs120*clhs134 - clhs120*clhs169 - clhs157*clhs5 - clhs158*clhs5 + clhs159*clhs5;
        lhs(7,8)=clhs172;
        lhs(7,9)=-clhs160*clhs5;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(8,0)=scale_factor*(clhs164*normalslave(0,0) - clhs36*tangentetaslave(0,0) - clhs38*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs50*tangentetaslave(0,0) - clhs52*tangentxislave(0,0) + clhs54*normalslave(0,0));
        lhs(8,2)=scale_factor*(clhs166*normalslave(0,0) - clhs62*tangentetaslave(0,0) - clhs64*tangentxislave(0,0));
        lhs(8,3)=scale_factor*(-clhs76*tangentetaslave(0,0) - clhs78*tangentxislave(0,0) + clhs80*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs88*tangentetaslave(0,0) - clhs90*tangentxislave(0,0) + clhs92*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs100*tangentetaslave(0,0) - clhs102*tangentxislave(0,0) + clhs104*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs112*tangentetaslave(0,0) - clhs114*tangentxislave(0,0) + clhs116*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs124*tangentetaslave(0,0) - clhs126*tangentxislave(0,0) + clhs128*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs164*normalslave(0,1) - clhs36*tangentetaslave(0,1) - clhs38*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs50*tangentetaslave(0,1) - clhs52*tangentxislave(0,1) + clhs54*normalslave(0,1));
        lhs(9,2)=scale_factor*(clhs166*normalslave(0,1) - clhs62*tangentetaslave(0,1) - clhs64*tangentxislave(0,1));
        lhs(9,3)=scale_factor*(-clhs76*tangentetaslave(0,1) - clhs78*tangentxislave(0,1) + clhs80*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs88*tangentetaslave(0,1) - clhs90*tangentxislave(0,1) + clhs92*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs100*tangentetaslave(0,1) - clhs102*tangentxislave(0,1) + clhs104*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs112*tangentetaslave(0,1) - clhs114*tangentxislave(0,1) + clhs116*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs124*tangentetaslave(0,1) - clhs126*tangentxislave(0,1) + clhs128*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs173*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs174;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs174;
        lhs(11,11)=clhs173*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 3 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(1,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(1,0);
        const double clhs17 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs18 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs20 =     normalslave(1,1)*(-clhs1*clhs12 + clhs10*clhs17 + clhs11*clhs18 - clhs13*clhs19);
        const double clhs21 =     normalslave(1,0)*(clhs0 + clhs1*clhs7 - clhs17*clhs3 - clhs18*clhs5 + clhs19*clhs8);
        const double clhs22 =     -clhs20 + clhs21;
        const double clhs23 =     clhs22*normalslave(1,0)*penalty_parameter;
        const double clhs24 =     lm(1,0)*tangentetaslave(1,0);
        const double clhs25 =     lm(1,1)*tangentetaslave(1,1);
        const double clhs26 =     clhs24 + clhs25;
        const double clhs27 =     lm(1,0)*tangentxislave(1,0);
        const double clhs28 =     lm(1,1)*tangentxislave(1,1);
        const double clhs29 =     clhs27 + clhs28;
        const double clhs30 =     clhs26*tangentetaslave(1,0) + clhs29*tangentxislave(1,0);
        const double clhs31 =     lm(0,0)*tangentetaslave(0,0);
        const double clhs32 =     lm(0,1)*tangentetaslave(0,1);
        const double clhs33 =     clhs31 + clhs32;
        const double clhs34 =     lm(0,0)*tangentxislave(0,0);
        const double clhs35 =     lm(0,1)*tangentxislave(0,1);
        const double clhs36 =     clhs34 + clhs35;
        const double clhs37 =     std::pow(fabs(clhs33*tangentetaslave(0,0) + clhs36*tangentxislave(0,0)), 2) + std::pow(fabs(clhs33*tangentetaslave(0,1) + clhs36*tangentxislave(0,1)), 2);
        const double clhs38 =     std::pow(clhs37, -1.0L/2.0L);
        const double clhs39 =     clhs26*tangentetaslave(1,1) + clhs29*tangentxislave(1,1);
        const double clhs40 =     std::pow(fabs(clhs30), 2) + std::pow(fabs(clhs39), 2);
        const double clhs41 =     std::pow(clhs40, -1.0L/2.0L);
        const double clhs42 =     clhs15*clhs30*clhs38*clhs41*mu[1];
        const double clhs43 =     clhs22*clhs30*clhs38*clhs41*mu[1]*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     normalslave(1,0)*(clhs3*clhs45 - clhs44*clhs7 + clhs46*clhs5 - clhs47*clhs8) - normalslave(1,1)*(clhs0 - clhs10*clhs45 - clhs11*clhs46 + clhs12*clhs44 + clhs13*clhs47);
        const double clhs49 =     clhs48*normalslave(1,0)*penalty_parameter;
        const double clhs50 =     clhs30*clhs38*clhs41*clhs48*mu[1]*penalty_parameter;
        const double clhs51 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs52 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs53 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs54 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs55 =     normalslave(1,1)*(clhs10*clhs52 + clhs11*clhs53 - clhs12*clhs51 - clhs13*clhs54);
        const double clhs56 =     normalslave(1,0)*(-clhs3*clhs52 - clhs5*clhs53 + clhs51*clhs7 + clhs54*clhs8 + clhs9);
        const double clhs57 =     -clhs55 + clhs56;
        const double clhs58 =     clhs57*normalslave(1,0)*penalty_parameter;
        const double clhs59 =     clhs30*clhs38*clhs41*clhs57*mu[1]*penalty_parameter;
        const double clhs60 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs61 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs62 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs63 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs64 =     normalslave(1,0)*(clhs3*clhs61 + clhs5*clhs62 - clhs60*clhs7 - clhs63*clhs8) - normalslave(1,1)*(-clhs10*clhs61 - clhs11*clhs62 + clhs12*clhs60 + clhs13*clhs63 + clhs9);
        const double clhs65 =     clhs64*normalslave(1,0)*penalty_parameter;
        const double clhs66 =     clhs30*clhs38*clhs41*clhs64*mu[1]*penalty_parameter;
        const double clhs67 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs68 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs69 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs70 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs71 =     normalslave(1,0)*(clhs3*clhs68 + clhs4 + clhs5*clhs69 - clhs67*clhs7 - clhs70*clhs8) + normalslave(1,1)*(clhs10*clhs68 + clhs11*clhs69 - clhs12*clhs67 - clhs13*clhs70);
        const double clhs72 =     clhs71*normalslave(1,0)*penalty_parameter;
        const double clhs73 =     clhs30*clhs38*clhs41*clhs71*mu[1]*penalty_parameter;
        const double clhs74 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs75 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs76 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs77 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs78 =     normalslave(1,0)*(clhs3*clhs75 + clhs5*clhs76 - clhs7*clhs74 - clhs77*clhs8) + normalslave(1,1)*(clhs10*clhs75 + clhs11*clhs76 - clhs12*clhs74 - clhs13*clhs77 + clhs4);
        const double clhs79 =     clhs78*normalslave(1,0)*penalty_parameter;
        const double clhs80 =     clhs30*clhs38*clhs41*clhs78*mu[1]*penalty_parameter;
        const double clhs81 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs82 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs83 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs84 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs85 =     normalslave(1,0)*(clhs3*clhs82 + clhs5*clhs83 + clhs6 - clhs7*clhs81 - clhs8*clhs84) + normalslave(1,1)*(clhs10*clhs82 + clhs11*clhs83 - clhs12*clhs81 - clhs13*clhs84);
        const double clhs86 =     clhs85*normalslave(1,0)*penalty_parameter;
        const double clhs87 =     clhs30*clhs38*clhs41*clhs85*mu[1]*penalty_parameter;
        const double clhs88 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs89 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs90 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs91 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs92 =     normalslave(1,0)*(clhs3*clhs89 + clhs5*clhs90 - clhs7*clhs88 - clhs8*clhs91) + normalslave(1,1)*(clhs10*clhs89 + clhs11*clhs90 - clhs12*clhs88 - clhs13*clhs91 + clhs6);
        const double clhs93 =     clhs92*normalslave(1,0)*penalty_parameter;
        const double clhs94 =     clhs30*clhs38*clhs41*clhs92*mu[1]*penalty_parameter;
        const double clhs95 =     std::pow(clhs37, -3.0L/2.0L);
        const double clhs96 =     re(tangentetaslave(0,0)); // RE(TANGENTETASLAVE(0,0))
        const double clhs97 =     im(clhs31); // IM(CLHS31)
        const double clhs98 =     Derivative(im(clhs31), lm(0,0)); // DERIVATIVE(IM(CLHS31), LM(0,0))
        const double clhs99 =     re(tangentxislave(0,0)); // RE(TANGENTXISLAVE(0,0))
        const double clhs100 =     im(clhs34); // IM(CLHS34)
        const double clhs101 =     Derivative(im(clhs34), lm(0,0)); // DERIVATIVE(IM(CLHS34), LM(0,0))
        const double clhs102 =     im(tangentetaslave(0,0)); // IM(TANGENTETASLAVE(0,0))
        const double clhs103 =     re(clhs31); // RE(CLHS31)
        const double clhs104 =     Derivative(re(clhs31), lm(0,0)); // DERIVATIVE(RE(CLHS31), LM(0,0))
        const double clhs105 =     im(tangentxislave(0,0)); // IM(TANGENTXISLAVE(0,0))
        const double clhs106 =     re(clhs34); // RE(CLHS34)
        const double clhs107 =     Derivative(re(clhs34), lm(0,0)); // DERIVATIVE(RE(CLHS34), LM(0,0))
        const double clhs108 =     re(clhs32); // RE(CLHS32)
        const double clhs109 =     clhs103 + clhs108;
        const double clhs110 =     re(clhs35); // RE(CLHS35)
        const double clhs111 =     clhs106 + clhs110;
        const double clhs112 =     im(clhs32); // IM(CLHS32)
        const double clhs113 =     clhs112 + clhs97;
        const double clhs114 =     im(clhs35); // IM(CLHS35)
        const double clhs115 =     clhs100 + clhs114;
        const double clhs116 =     clhs102*clhs109 + clhs105*clhs111 + clhs113*clhs96 + clhs115*clhs99;
        const double clhs117 =     re(tangentetaslave(0,1)); // RE(TANGENTETASLAVE(0,1))
        const double clhs118 =     re(tangentxislave(0,1)); // RE(TANGENTXISLAVE(0,1))
        const double clhs119 =     im(tangentetaslave(0,1)); // IM(TANGENTETASLAVE(0,1))
        const double clhs120 =     im(tangentxislave(0,1)); // IM(TANGENTXISLAVE(0,1))
        const double clhs121 =     clhs109*clhs119 + clhs111*clhs120 + clhs113*clhs117 + clhs115*clhs118;
        const double clhs122 =     -clhs102*clhs113 - clhs105*clhs115 + clhs109*clhs96 + clhs111*clhs99;
        const double clhs123 =     clhs109*clhs117 + clhs111*clhs118 - clhs113*clhs119 - clhs115*clhs120;
        const double clhs124 =     clhs116*(clhs101*clhs99 + clhs102*clhs104 + clhs105*clhs107 + clhs96*clhs98) + clhs121*(clhs101*clhs118 + clhs104*clhs119 + clhs107*clhs120 + clhs117*clhs98) + clhs122*(-clhs101*clhs105 - clhs102*clhs98 + clhs104*clhs96 + clhs107*clhs99) + clhs123*(-clhs101*clhs120 + clhs104*clhs117 + clhs107*clhs118 - clhs119*clhs98);
        const double clhs125 =     clhs124*clhs15*clhs30*clhs41*clhs95*mu[1];
        const double clhs126 =     Derivative(im(clhs32), lm(0,1)); // DERIVATIVE(IM(CLHS32), LM(0,1))
        const double clhs127 =     Derivative(im(clhs35), lm(0,1)); // DERIVATIVE(IM(CLHS35), LM(0,1))
        const double clhs128 =     Derivative(re(clhs32), lm(0,1)); // DERIVATIVE(RE(CLHS32), LM(0,1))
        const double clhs129 =     Derivative(re(clhs35), lm(0,1)); // DERIVATIVE(RE(CLHS35), LM(0,1))
        const double clhs130 =     clhs116*(clhs102*clhs128 + clhs105*clhs129 + clhs126*clhs96 + clhs127*clhs99) + clhs121*(clhs117*clhs126 + clhs118*clhs127 + clhs119*clhs128 + clhs120*clhs129) + clhs122*(-clhs102*clhs126 - clhs105*clhs127 + clhs128*clhs96 + clhs129*clhs99) + clhs123*(clhs117*clhs128 + clhs118*clhs129 - clhs119*clhs126 - clhs120*clhs127);
        const double clhs131 =     clhs130*clhs15*clhs30*clhs41*clhs95*mu[1];
        const double clhs132 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs133 =     clhs38*clhs41*mu[1]*normalslave(1,0)*scale_factor;
        const double clhs134 =     clhs133*clhs30;
        const double clhs135 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs136 =     clhs135*clhs38*clhs41*mu[1];
        const double clhs137 =     -clhs14 + clhs2;
        const double clhs138 =     std::pow(clhs40, -3.0L/2.0L);
        const double clhs139 =     clhs137*clhs138*clhs30*clhs38*mu[1];
        const double clhs140 =     re(tangentetaslave(1,0)); // RE(TANGENTETASLAVE(1,0))
        const double clhs141 =     im(clhs24); // IM(CLHS24)
        const double clhs142 =     Derivative(im(clhs24), lm(1,0)); // DERIVATIVE(IM(CLHS24), LM(1,0))
        const double clhs143 =     re(tangentxislave(1,0)); // RE(TANGENTXISLAVE(1,0))
        const double clhs144 =     im(clhs27); // IM(CLHS27)
        const double clhs145 =     Derivative(im(clhs27), lm(1,0)); // DERIVATIVE(IM(CLHS27), LM(1,0))
        const double clhs146 =     im(tangentetaslave(1,0)); // IM(TANGENTETASLAVE(1,0))
        const double clhs147 =     re(clhs24); // RE(CLHS24)
        const double clhs148 =     Derivative(re(clhs24), lm(1,0)); // DERIVATIVE(RE(CLHS24), LM(1,0))
        const double clhs149 =     im(tangentxislave(1,0)); // IM(TANGENTXISLAVE(1,0))
        const double clhs150 =     re(clhs27); // RE(CLHS27)
        const double clhs151 =     Derivative(re(clhs27), lm(1,0)); // DERIVATIVE(RE(CLHS27), LM(1,0))
        const double clhs152 =     re(clhs25); // RE(CLHS25)
        const double clhs153 =     clhs147 + clhs152;
        const double clhs154 =     re(clhs28); // RE(CLHS28)
        const double clhs155 =     clhs150 + clhs154;
        const double clhs156 =     im(clhs25); // IM(CLHS25)
        const double clhs157 =     clhs141 + clhs156;
        const double clhs158 =     im(clhs28); // IM(CLHS28)
        const double clhs159 =     clhs144 + clhs158;
        const double clhs160 =     clhs140*clhs157 + clhs143*clhs159 + clhs146*clhs153 + clhs149*clhs155;
        const double clhs161 =     re(tangentetaslave(1,1)); // RE(TANGENTETASLAVE(1,1))
        const double clhs162 =     re(tangentxislave(1,1)); // RE(TANGENTXISLAVE(1,1))
        const double clhs163 =     im(tangentetaslave(1,1)); // IM(TANGENTETASLAVE(1,1))
        const double clhs164 =     im(tangentxislave(1,1)); // IM(TANGENTXISLAVE(1,1))
        const double clhs165 =     clhs153*clhs163 + clhs155*clhs164 + clhs157*clhs161 + clhs159*clhs162;
        const double clhs166 =     clhs140*clhs153 + clhs143*clhs155 - clhs146*clhs157 - clhs149*clhs159;
        const double clhs167 =     clhs153*clhs161 + clhs155*clhs162 - clhs157*clhs163 - clhs159*clhs164;
        const double clhs168 =     clhs160*(clhs140*clhs142 + clhs143*clhs145 + clhs146*clhs148 + clhs149*clhs151) + clhs165*(clhs142*clhs161 + clhs145*clhs162 + clhs148*clhs163 + clhs151*clhs164) + clhs166*(clhs140*clhs148 - clhs142*clhs146 + clhs143*clhs151 - clhs145*clhs149) + clhs167*(-clhs142*clhs163 - clhs145*clhs164 + clhs148*clhs161 + clhs151*clhs162);
        const double clhs169 =     clhs132 - clhs134 - clhs136*clhs137 + clhs139*clhs168;
        const double clhs170 =     normalslave(1,1)*(normalslave(1,0)*scale_factor);
        const double clhs171 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs172 =     clhs171*clhs38*clhs41*mu[1];
        const double clhs173 =     -clhs137*clhs172 + clhs170;
        const double clhs174 =     clhs38*clhs41*mu[1]*normalslave(1,1)*scale_factor;
        const double clhs175 =     clhs174*clhs30;
        const double clhs176 =     Derivative(im(clhs25), lm(1,1)); // DERIVATIVE(IM(CLHS25), LM(1,1))
        const double clhs177 =     Derivative(im(clhs28), lm(1,1)); // DERIVATIVE(IM(CLHS28), LM(1,1))
        const double clhs178 =     Derivative(re(clhs25), lm(1,1)); // DERIVATIVE(RE(CLHS25), LM(1,1))
        const double clhs179 =     Derivative(re(clhs28), lm(1,1)); // DERIVATIVE(RE(CLHS28), LM(1,1))
        const double clhs180 =     clhs160*(clhs140*clhs176 + clhs143*clhs177 + clhs146*clhs178 + clhs149*clhs179) + clhs165*(clhs161*clhs176 + clhs162*clhs177 + clhs163*clhs178 + clhs164*clhs179) + clhs166*(clhs140*clhs178 + clhs143*clhs179 - clhs146*clhs176 - clhs149*clhs177) + clhs167*(clhs161*clhs178 + clhs162*clhs179 - clhs163*clhs176 - clhs164*clhs177);
        const double clhs181 =     clhs139*clhs180 + clhs173 - clhs175;
        const double clhs182 =     clhs15*normalslave(1,1);
        const double clhs183 =     clhs22*normalslave(1,1)*penalty_parameter;
        const double clhs184 =     clhs15*clhs38*clhs39*clhs41*mu[1];
        const double clhs185 =     clhs22*clhs38*clhs39*clhs41*mu[1]*penalty_parameter;
        const double clhs186 =     clhs48*normalslave(1,1)*penalty_parameter;
        const double clhs187 =     clhs38*clhs39*clhs41*clhs48*mu[1]*penalty_parameter;
        const double clhs188 =     clhs57*normalslave(1,1)*penalty_parameter;
        const double clhs189 =     clhs38*clhs39*clhs41*clhs57*mu[1]*penalty_parameter;
        const double clhs190 =     clhs64*normalslave(1,1)*penalty_parameter;
        const double clhs191 =     clhs38*clhs39*clhs41*clhs64*mu[1]*penalty_parameter;
        const double clhs192 =     clhs71*normalslave(1,1)*penalty_parameter;
        const double clhs193 =     clhs38*clhs39*clhs41*clhs71*mu[1]*penalty_parameter;
        const double clhs194 =     clhs78*normalslave(1,1)*penalty_parameter;
        const double clhs195 =     clhs38*clhs39*clhs41*clhs78*mu[1]*penalty_parameter;
        const double clhs196 =     clhs85*normalslave(1,1)*penalty_parameter;
        const double clhs197 =     clhs38*clhs39*clhs41*clhs85*mu[1]*penalty_parameter;
        const double clhs198 =     clhs92*normalslave(1,1)*penalty_parameter;
        const double clhs199 =     clhs38*clhs39*clhs41*clhs92*mu[1]*penalty_parameter;
        const double clhs200 =     clhs124*clhs15*clhs39*clhs41*clhs95*mu[1];
        const double clhs201 =     clhs130*clhs15*clhs39*clhs41*clhs95*mu[1];
        const double clhs202 =     clhs133*clhs39;
        const double clhs203 =     clhs137*clhs138*clhs38*clhs39*mu[1];
        const double clhs204 =     clhs168*clhs203 + clhs173 - clhs202;
        const double clhs205 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs206 =     clhs174*clhs39;
        const double clhs207 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs208 =     clhs207*clhs38*clhs41*mu[1];
        const double clhs209 =     -clhs137*clhs208 + clhs180*clhs203 + clhs205 - clhs206;
        const double clhs210 =     clhs137*normalslave(1,0);
        const double clhs211 =     clhs20 - clhs21;
        const double clhs212 =     clhs211*normalslave(1,0)*penalty_parameter;
        const double clhs213 =     clhs137*clhs30*clhs38*clhs41*mu[1];
        const double clhs214 =     clhs211*clhs30*clhs38*clhs41*mu[1]*penalty_parameter;
        const double clhs215 =     clhs55 - clhs56;
        const double clhs216 =     clhs215*normalslave(1,0)*penalty_parameter;
        const double clhs217 =     clhs215*clhs30*clhs38*clhs41*mu[1]*penalty_parameter;
        const double clhs218 =     clhs138*clhs15*clhs30*clhs38*mu[1];
        const double clhs219 =     clhs134 - clhs136*clhs15 + clhs168*clhs218;
        const double clhs220 =     -clhs132 + clhs219;
        const double clhs221 =     -clhs15*clhs172;
        const double clhs222 =     -clhs170 + clhs221;
        const double clhs223 =     clhs175 + clhs180*clhs218;
        const double clhs224 =     clhs222 + clhs223;
        const double clhs225 =     clhs137*normalslave(1,1);
        const double clhs226 =     clhs211*normalslave(1,1)*penalty_parameter;
        const double clhs227 =     clhs137*clhs38*clhs39*clhs41*mu[1];
        const double clhs228 =     clhs211*clhs38*clhs39*clhs41*mu[1]*penalty_parameter;
        const double clhs229 =     clhs215*normalslave(1,1)*penalty_parameter;
        const double clhs230 =     clhs215*clhs38*clhs39*clhs41*mu[1]*penalty_parameter;
        const double clhs231 =     clhs138*clhs15*clhs38*clhs39*mu[1];
        const double clhs232 =     clhs168*clhs231 + clhs202;
        const double clhs233 =     clhs222 + clhs232;
        const double clhs234 =     -clhs15*clhs208 + clhs180*clhs231 + clhs206;
        const double clhs235 =     -clhs205 + clhs234;
        const double clhs236 =     1.0/penalty_parameter;
        const double clhs237 =     0.5*clhs236*std::pow(scale_factor, 2.0);
        const double clhs238 =     clhs237*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs239 =     clhs211*scale_factor;
        const double clhs240 =     clhs135*clhs30;
        const double clhs241 =     0.5*clhs38*clhs41*mu[1];
        const double clhs242 =     clhs171*clhs39;
        const double clhs243 =     -clhs240*clhs241 - clhs241*clhs242 + normalslave(1,0);
        const double clhs244 =     clhs48*scale_factor;
        const double clhs245 =     clhs215*scale_factor;
        const double clhs246 =     clhs64*scale_factor;
        const double clhs247 =     clhs71*scale_factor;
        const double clhs248 =     clhs78*scale_factor;
        const double clhs249 =     clhs85*scale_factor;
        const double clhs250 =     clhs92*scale_factor;
        const double clhs251 =     0.5*clhs137*clhs236*clhs41*clhs95*mu[1]*scale_factor*(clhs240 + clhs242);
        const double clhs252 =     0.5*clhs236*scale_factor;
        const double clhs253 =     clhs135*scale_factor + clhs219;
        const double clhs254 =     clhs171*scale_factor + clhs221;
        const double clhs255 =     clhs232 + clhs254;
        const double clhs256 =     clhs223 + clhs254;
        const double clhs257 =     clhs207*scale_factor + clhs234;
        const double clhs258 =     clhs207*clhs39;
        const double clhs259 =     clhs171*clhs30;
        const double clhs260 =     -clhs241*clhs258 - clhs241*clhs259 + normalslave(1,1);
        const double clhs261 =     0.5*clhs137*clhs236*clhs41*clhs95*mu[1]*scale_factor*(clhs258 + clhs259);
    
        lhs(0,0)=clhs0*clhs23 - clhs0*clhs43 - clhs1*clhs16 + clhs1*clhs42;
        lhs(0,1)=-clhs0*clhs49 + clhs0*clhs50 - clhs16*clhs44 + clhs42*clhs44;
        lhs(0,2)=clhs0*clhs58 - clhs0*clhs59 - clhs16*clhs51 + clhs42*clhs51;
        lhs(0,3)=-clhs0*clhs65 + clhs0*clhs66 - clhs16*clhs60 + clhs42*clhs60;
        lhs(0,4)=-clhs0*clhs72 + clhs0*clhs73 - clhs16*clhs67 + clhs42*clhs67;
        lhs(0,5)=-clhs0*clhs79 + clhs0*clhs80 - clhs16*clhs74 + clhs42*clhs74;
        lhs(0,6)=-clhs0*clhs86 + clhs0*clhs87 - clhs16*clhs81 + clhs42*clhs81;
        lhs(0,7)=-clhs0*clhs93 + clhs0*clhs94 - clhs16*clhs88 + clhs42*clhs88;
        lhs(0,8)=-clhs0*clhs125;
        lhs(0,9)=-clhs0*clhs131;
        lhs(0,10)=clhs0*clhs169;
        lhs(0,11)=clhs0*clhs181;
        lhs(1,0)=clhs0*clhs183 - clhs0*clhs185 - clhs1*clhs182 + clhs1*clhs184;
        lhs(1,1)=-clhs0*clhs186 + clhs0*clhs187 - clhs182*clhs44 + clhs184*clhs44;
        lhs(1,2)=clhs0*clhs188 - clhs0*clhs189 - clhs182*clhs51 + clhs184*clhs51;
        lhs(1,3)=-clhs0*clhs190 + clhs0*clhs191 - clhs182*clhs60 + clhs184*clhs60;
        lhs(1,4)=-clhs0*clhs192 + clhs0*clhs193 - clhs182*clhs67 + clhs184*clhs67;
        lhs(1,5)=-clhs0*clhs194 + clhs0*clhs195 - clhs182*clhs74 + clhs184*clhs74;
        lhs(1,6)=-clhs0*clhs196 + clhs0*clhs197 - clhs182*clhs81 + clhs184*clhs81;
        lhs(1,7)=-clhs0*clhs198 + clhs0*clhs199 - clhs182*clhs88 + clhs184*clhs88;
        lhs(1,8)=-clhs0*clhs200;
        lhs(1,9)=-clhs0*clhs201;
        lhs(1,10)=clhs0*clhs204;
        lhs(1,11)=clhs0*clhs209;
        lhs(2,0)=-clhs16*clhs19 + clhs19*clhs42 + clhs23*clhs9 - clhs43*clhs9;
        lhs(2,1)=-clhs16*clhs47 + clhs42*clhs47 - clhs49*clhs9 + clhs50*clhs9;
        lhs(2,2)=-clhs16*clhs54 + clhs42*clhs54 + clhs58*clhs9 - clhs59*clhs9;
        lhs(2,3)=-clhs16*clhs63 + clhs42*clhs63 - clhs65*clhs9 + clhs66*clhs9;
        lhs(2,4)=-clhs16*clhs70 + clhs42*clhs70 - clhs72*clhs9 + clhs73*clhs9;
        lhs(2,5)=-clhs16*clhs77 + clhs42*clhs77 - clhs79*clhs9 + clhs80*clhs9;
        lhs(2,6)=-clhs16*clhs84 + clhs42*clhs84 - clhs86*clhs9 + clhs87*clhs9;
        lhs(2,7)=-clhs16*clhs91 + clhs42*clhs91 - clhs9*clhs93 + clhs9*clhs94;
        lhs(2,8)=-clhs125*clhs9;
        lhs(2,9)=-clhs131*clhs9;
        lhs(2,10)=clhs169*clhs9;
        lhs(2,11)=clhs181*clhs9;
        lhs(3,0)=-clhs182*clhs19 + clhs183*clhs9 + clhs184*clhs19 - clhs185*clhs9;
        lhs(3,1)=-clhs182*clhs47 + clhs184*clhs47 - clhs186*clhs9 + clhs187*clhs9;
        lhs(3,2)=-clhs182*clhs54 + clhs184*clhs54 + clhs188*clhs9 - clhs189*clhs9;
        lhs(3,3)=-clhs182*clhs63 + clhs184*clhs63 - clhs190*clhs9 + clhs191*clhs9;
        lhs(3,4)=-clhs182*clhs70 + clhs184*clhs70 - clhs192*clhs9 + clhs193*clhs9;
        lhs(3,5)=-clhs182*clhs77 + clhs184*clhs77 - clhs194*clhs9 + clhs195*clhs9;
        lhs(3,6)=-clhs182*clhs84 + clhs184*clhs84 - clhs196*clhs9 + clhs197*clhs9;
        lhs(3,7)=-clhs182*clhs91 + clhs184*clhs91 - clhs198*clhs9 + clhs199*clhs9;
        lhs(3,8)=-clhs200*clhs9;
        lhs(3,9)=-clhs201*clhs9;
        lhs(3,10)=clhs204*clhs9;
        lhs(3,11)=clhs209*clhs9;
        lhs(4,0)=-clhs17*clhs210 + clhs17*clhs213 + clhs212*clhs4 - clhs214*clhs4;
        lhs(4,1)=-clhs210*clhs45 + clhs213*clhs45 + clhs4*clhs49 - clhs4*clhs50;
        lhs(4,2)=-clhs210*clhs52 + clhs213*clhs52 + clhs216*clhs4 - clhs217*clhs4;
        lhs(4,3)=-clhs210*clhs61 + clhs213*clhs61 + clhs4*clhs65 - clhs4*clhs66;
        lhs(4,4)=-clhs210*clhs68 + clhs213*clhs68 + clhs4*clhs72 - clhs4*clhs73;
        lhs(4,5)=-clhs210*clhs75 + clhs213*clhs75 + clhs4*clhs79 - clhs4*clhs80;
        lhs(4,6)=-clhs210*clhs82 + clhs213*clhs82 + clhs4*clhs86 - clhs4*clhs87;
        lhs(4,7)=-clhs210*clhs89 + clhs213*clhs89 + clhs4*clhs93 - clhs4*clhs94;
        lhs(4,8)=clhs125*clhs4;
        lhs(4,9)=clhs131*clhs4;
        lhs(4,10)=clhs220*clhs4;
        lhs(4,11)=clhs224*clhs4;
        lhs(5,0)=-clhs17*clhs225 + clhs17*clhs227 + clhs226*clhs4 - clhs228*clhs4;
        lhs(5,1)=clhs186*clhs4 - clhs187*clhs4 - clhs225*clhs45 + clhs227*clhs45;
        lhs(5,2)=-clhs225*clhs52 + clhs227*clhs52 + clhs229*clhs4 - clhs230*clhs4;
        lhs(5,3)=clhs190*clhs4 - clhs191*clhs4 - clhs225*clhs61 + clhs227*clhs61;
        lhs(5,4)=clhs192*clhs4 - clhs193*clhs4 - clhs225*clhs68 + clhs227*clhs68;
        lhs(5,5)=clhs194*clhs4 - clhs195*clhs4 - clhs225*clhs75 + clhs227*clhs75;
        lhs(5,6)=clhs196*clhs4 - clhs197*clhs4 - clhs225*clhs82 + clhs227*clhs82;
        lhs(5,7)=clhs198*clhs4 - clhs199*clhs4 - clhs225*clhs89 + clhs227*clhs89;
        lhs(5,8)=clhs200*clhs4;
        lhs(5,9)=clhs201*clhs4;
        lhs(5,10)=clhs233*clhs4;
        lhs(5,11)=clhs235*clhs4;
        lhs(6,0)=-clhs18*clhs210 + clhs18*clhs213 + clhs212*clhs6 - clhs214*clhs6;
        lhs(6,1)=-clhs210*clhs46 + clhs213*clhs46 + clhs49*clhs6 - clhs50*clhs6;
        lhs(6,2)=-clhs210*clhs53 + clhs213*clhs53 + clhs216*clhs6 - clhs217*clhs6;
        lhs(6,3)=-clhs210*clhs62 + clhs213*clhs62 + clhs6*clhs65 - clhs6*clhs66;
        lhs(6,4)=-clhs210*clhs69 + clhs213*clhs69 + clhs6*clhs72 - clhs6*clhs73;
        lhs(6,5)=-clhs210*clhs76 + clhs213*clhs76 + clhs6*clhs79 - clhs6*clhs80;
        lhs(6,6)=-clhs210*clhs83 + clhs213*clhs83 + clhs6*clhs86 - clhs6*clhs87;
        lhs(6,7)=-clhs210*clhs90 + clhs213*clhs90 + clhs6*clhs93 - clhs6*clhs94;
        lhs(6,8)=clhs125*clhs6;
        lhs(6,9)=clhs131*clhs6;
        lhs(6,10)=clhs220*clhs6;
        lhs(6,11)=clhs224*clhs6;
        lhs(7,0)=-clhs18*clhs225 + clhs18*clhs227 + clhs226*clhs6 - clhs228*clhs6;
        lhs(7,1)=clhs186*clhs6 - clhs187*clhs6 - clhs225*clhs46 + clhs227*clhs46;
        lhs(7,2)=-clhs225*clhs53 + clhs227*clhs53 + clhs229*clhs6 - clhs230*clhs6;
        lhs(7,3)=clhs190*clhs6 - clhs191*clhs6 - clhs225*clhs62 + clhs227*clhs62;
        lhs(7,4)=clhs192*clhs6 - clhs193*clhs6 - clhs225*clhs69 + clhs227*clhs69;
        lhs(7,5)=clhs194*clhs6 - clhs195*clhs6 - clhs225*clhs76 + clhs227*clhs76;
        lhs(7,6)=clhs196*clhs6 - clhs197*clhs6 - clhs225*clhs83 + clhs227*clhs83;
        lhs(7,7)=clhs198*clhs6 - clhs199*clhs6 - clhs225*clhs90 + clhs227*clhs90;
        lhs(7,8)=clhs200*clhs6;
        lhs(7,9)=clhs201*clhs6;
        lhs(7,10)=clhs233*clhs6;
        lhs(7,11)=clhs235*clhs6;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs237*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs238;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs238;
        lhs(9,9)=clhs237*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=clhs239*clhs243;
        lhs(10,1)=clhs243*clhs244;
        lhs(10,2)=clhs243*clhs245;
        lhs(10,3)=clhs243*clhs246;
        lhs(10,4)=clhs243*clhs247;
        lhs(10,5)=clhs243*clhs248;
        lhs(10,6)=clhs243*clhs249;
        lhs(10,7)=clhs243*clhs250;
        lhs(10,8)=-clhs124*clhs251;
        lhs(10,9)=-clhs130*clhs251;
        lhs(10,10)=clhs252*(clhs135*clhs253 + clhs171*clhs255);
        lhs(10,11)=clhs252*(clhs135*clhs256 + clhs171*clhs257);
        lhs(11,0)=clhs239*clhs260;
        lhs(11,1)=clhs244*clhs260;
        lhs(11,2)=clhs245*clhs260;
        lhs(11,3)=clhs246*clhs260;
        lhs(11,4)=clhs247*clhs260;
        lhs(11,5)=clhs248*clhs260;
        lhs(11,6)=clhs249*clhs260;
        lhs(11,7)=clhs250*clhs260;
        lhs(11,8)=-clhs124*clhs261;
        lhs(11,9)=-clhs130*clhs261;
        lhs(11,10)=clhs252*(clhs171*clhs253 + clhs207*clhs255);
        lhs(11,11)=clhs252*(clhs171*clhs256 + clhs207*clhs257);
    }
    else if (rActiveInactive == 4 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(0,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(0,0);
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs18 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs20 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs21 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs22 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs23 =     penalty_parameter*(normalslave(1,0)*(-clhs17*clhs7 + clhs20*clhs3 + clhs21*clhs5 - clhs22*clhs8) + normalslave(1,1)*(clhs10*clhs20 + clhs11*clhs21 - clhs12*clhs17 - clhs13*clhs22));
        const double clhs24 =     -clhs19 + clhs23;
        const double clhs25 =     clhs24*normalslave(1,0);
        const double clhs26 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs27 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs28 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs29 =     normalslave(0,1)*(-clhs1*clhs12 + clhs10*clhs26 + clhs11*clhs27 - clhs13*clhs28);
        const double clhs30 =     normalslave(0,0)*(clhs0 + clhs1*clhs7 - clhs26*clhs3 - clhs27*clhs5 + clhs28*clhs8);
        const double clhs31 =     -clhs29 + clhs30;
        const double clhs32 =     clhs31*normalslave(0,0)*penalty_parameter;
        const double clhs33 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs35 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs36 =     normalslave(1,1)*(clhs10*clhs33 + clhs11*clhs34 - clhs12*clhs18 - clhs13*clhs35);
        const double clhs37 =     normalslave(1,0)*(clhs17 + clhs18*clhs7 - clhs3*clhs33 - clhs34*clhs5 + clhs35*clhs8);
        const double clhs38 =     -clhs36 + clhs37;
        const double clhs39 =     clhs38*normalslave(1,0)*penalty_parameter;
        const double clhs40 =     lm(0,0)*tangentetaslave(0,0);
        const double clhs41 =     lm(0,1)*tangentetaslave(0,1);
        const double clhs42 =     clhs40 + clhs41;
        const double clhs43 =     lm(0,0)*tangentxislave(0,0);
        const double clhs44 =     lm(0,1)*tangentxislave(0,1);
        const double clhs45 =     clhs43 + clhs44;
        const double clhs46 =     clhs42*tangentetaslave(0,0) + clhs45*tangentxislave(0,0);
        const double clhs47 =     clhs42*tangentetaslave(0,1) + clhs45*tangentxislave(0,1);
        const double clhs48 =     std::pow(fabs(clhs46), 2) + std::pow(fabs(clhs47), 2);
        const double clhs49 =     std::pow(clhs48, -1.0L/2.0L);
        const double clhs50 =     lm(1,0)*tangentetaslave(1,0);
        const double clhs51 =     lm(1,1)*tangentetaslave(1,1);
        const double clhs52 =     clhs50 + clhs51;
        const double clhs53 =     lm(1,0)*tangentxislave(1,0);
        const double clhs54 =     lm(1,1)*tangentxislave(1,1);
        const double clhs55 =     clhs53 + clhs54;
        const double clhs56 =     clhs52*tangentetaslave(1,0) + clhs55*tangentxislave(1,0);
        const double clhs57 =     clhs52*tangentetaslave(1,1) + clhs55*tangentxislave(1,1);
        const double clhs58 =     std::pow(fabs(clhs56), 2) + std::pow(fabs(clhs57), 2);
        const double clhs59 =     std::pow(clhs58, -1.0L/2.0L);
        const double clhs60 =     clhs15*clhs46*clhs49*clhs59*mu[0];
        const double clhs61 =     clhs24*clhs49*clhs56*clhs59*mu[1];
        const double clhs62 =     clhs31*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs63 =     clhs38*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs64 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs65 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs66 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs67 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs68 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs69 =     normalslave(0,0)*(clhs3*clhs66 + clhs5*clhs67 - clhs64*clhs7 - clhs68*clhs8) - normalslave(0,1)*(clhs0 - clhs10*clhs66 - clhs11*clhs67 + clhs12*clhs64 + clhs13*clhs68);
        const double clhs70 =     clhs69*normalslave(0,0)*penalty_parameter;
        const double clhs71 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs72 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs73 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs74 =     normalslave(1,0)*(clhs3*clhs71 + clhs5*clhs72 - clhs65*clhs7 - clhs73*clhs8) - normalslave(1,1)*(-clhs10*clhs71 - clhs11*clhs72 + clhs12*clhs65 + clhs13*clhs73 + clhs17);
        const double clhs75 =     clhs74*normalslave(1,0)*penalty_parameter;
        const double clhs76 =     clhs46*clhs49*clhs59*clhs69*mu[0]*penalty_parameter;
        const double clhs77 =     clhs49*clhs56*clhs59*clhs74*mu[1]*penalty_parameter;
        const double clhs78 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs79 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs80 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs81 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs82 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs83 =     normalslave(0,1)*(clhs10*clhs80 + clhs11*clhs81 - clhs12*clhs78 - clhs13*clhs82);
        const double clhs84 =     normalslave(0,0)*(-clhs3*clhs80 - clhs5*clhs81 + clhs7*clhs78 + clhs8*clhs82 + clhs9);
        const double clhs85 =     -clhs83 + clhs84;
        const double clhs86 =     clhs85*normalslave(0,0)*penalty_parameter;
        const double clhs87 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs88 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs89 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs90 =     normalslave(1,1)*(clhs10*clhs87 + clhs11*clhs88 - clhs12*clhs79 - clhs13*clhs89);
        const double clhs91 =     normalslave(1,0)*(clhs22 - clhs3*clhs87 - clhs5*clhs88 + clhs7*clhs79 + clhs8*clhs89);
        const double clhs92 =     -clhs90 + clhs91;
        const double clhs93 =     clhs92*normalslave(1,0)*penalty_parameter;
        const double clhs94 =     clhs46*clhs49*clhs59*clhs85*mu[0]*penalty_parameter;
        const double clhs95 =     clhs49*clhs56*clhs59*clhs92*mu[1]*penalty_parameter;
        const double clhs96 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs97 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs98 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs99 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs100 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs101 =     normalslave(0,0)*(-clhs100*clhs8 + clhs3*clhs98 + clhs5*clhs99 - clhs7*clhs96) - normalslave(0,1)*(-clhs10*clhs98 + clhs100*clhs13 - clhs11*clhs99 + clhs12*clhs96 + clhs9);
        const double clhs102 =     clhs101*normalslave(0,0)*penalty_parameter;
        const double clhs103 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs104 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs105 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs106 =     normalslave(1,0)*(clhs103*clhs3 + clhs104*clhs5 - clhs105*clhs8 - clhs7*clhs97) - normalslave(1,1)*(-clhs10*clhs103 - clhs104*clhs11 + clhs105*clhs13 + clhs12*clhs97 + clhs22);
        const double clhs107 =     clhs106*normalslave(1,0)*penalty_parameter;
        const double clhs108 =     clhs101*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs109 =     clhs106*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs110 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs111 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs112 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs113 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs114 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs115 =     normalslave(0,0)*(-clhs110*clhs7 + clhs112*clhs3 + clhs113*clhs5 - clhs114*clhs8 + clhs4) + normalslave(0,1)*(clhs10*clhs112 + clhs11*clhs113 - clhs110*clhs12 - clhs114*clhs13);
        const double clhs116 =     clhs115*normalslave(0,0)*penalty_parameter;
        const double clhs117 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs118 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs119 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs120 =     normalslave(1,0)*(-clhs111*clhs7 + clhs117*clhs3 + clhs118*clhs5 - clhs119*clhs8 + clhs20) + normalslave(1,1)*(clhs10*clhs117 + clhs11*clhs118 - clhs111*clhs12 - clhs119*clhs13);
        const double clhs121 =     clhs120*normalslave(1,0)*penalty_parameter;
        const double clhs122 =     clhs115*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs123 =     clhs120*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs124 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs125 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs126 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs127 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs128 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs129 =     normalslave(0,0)*(-clhs124*clhs7 + clhs126*clhs3 + clhs127*clhs5 - clhs128*clhs8) + normalslave(0,1)*(clhs10*clhs126 + clhs11*clhs127 - clhs12*clhs124 - clhs128*clhs13 + clhs4);
        const double clhs130 =     clhs129*normalslave(0,0)*penalty_parameter;
        const double clhs131 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs132 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs133 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs134 =     normalslave(1,0)*(-clhs125*clhs7 + clhs131*clhs3 + clhs132*clhs5 - clhs133*clhs8) + normalslave(1,1)*(clhs10*clhs131 + clhs11*clhs132 - clhs12*clhs125 - clhs13*clhs133 + clhs20);
        const double clhs135 =     clhs134*normalslave(1,0)*penalty_parameter;
        const double clhs136 =     clhs129*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs137 =     clhs134*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs138 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs139 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs140 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs141 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs142 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs143 =     normalslave(0,0)*(-clhs138*clhs7 + clhs140*clhs3 + clhs141*clhs5 - clhs142*clhs8 + clhs6) + normalslave(0,1)*(clhs10*clhs140 + clhs11*clhs141 - clhs12*clhs138 - clhs13*clhs142);
        const double clhs144 =     clhs143*normalslave(0,0)*penalty_parameter;
        const double clhs145 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs146 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs147 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs148 =     normalslave(1,0)*(-clhs139*clhs7 + clhs145*clhs3 + clhs146*clhs5 - clhs147*clhs8 + clhs21) + normalslave(1,1)*(clhs10*clhs145 + clhs11*clhs146 - clhs12*clhs139 - clhs13*clhs147);
        const double clhs149 =     clhs148*normalslave(1,0)*penalty_parameter;
        const double clhs150 =     clhs143*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs151 =     clhs148*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs152 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs153 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs154 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs155 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs156 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs157 =     normalslave(0,0)*(-clhs152*clhs7 + clhs154*clhs3 + clhs155*clhs5 - clhs156*clhs8) + normalslave(0,1)*(clhs10*clhs154 + clhs11*clhs155 - clhs12*clhs152 - clhs13*clhs156 + clhs6);
        const double clhs158 =     clhs157*normalslave(0,0)*penalty_parameter;
        const double clhs159 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs160 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs161 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs162 =     normalslave(1,0)*(-clhs153*clhs7 + clhs159*clhs3 + clhs160*clhs5 - clhs161*clhs8) + normalslave(1,1)*(clhs10*clhs159 + clhs11*clhs160 - clhs12*clhs153 - clhs13*clhs161 + clhs21);
        const double clhs163 =     clhs162*normalslave(1,0)*penalty_parameter;
        const double clhs164 =     clhs157*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs165 =     clhs162*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs166 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs167 =     clhs49*clhs59*mu[0]*normalslave(0,0)*scale_factor;
        const double clhs168 =     clhs167*clhs46;
        const double clhs169 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs170 =     clhs15*clhs49*clhs59*mu[0];
        const double clhs171 =     clhs169*clhs170;
        const double clhs172 =     std::pow(clhs48, -3.0L/2.0L);
        const double clhs173 =     clhs15*clhs172*clhs46*clhs59*mu[0];
        const double clhs174 =     re(tangentetaslave(0,0)); // RE(TANGENTETASLAVE(0,0))
        const double clhs175 =     im(clhs40); // IM(CLHS40)
        const double clhs176 =     Derivative(im(clhs40), lm(0,0)); // DERIVATIVE(IM(CLHS40), LM(0,0))
        const double clhs177 =     re(tangentxislave(0,0)); // RE(TANGENTXISLAVE(0,0))
        const double clhs178 =     im(clhs43); // IM(CLHS43)
        const double clhs179 =     Derivative(im(clhs43), lm(0,0)); // DERIVATIVE(IM(CLHS43), LM(0,0))
        const double clhs180 =     im(tangentetaslave(0,0)); // IM(TANGENTETASLAVE(0,0))
        const double clhs181 =     re(clhs40); // RE(CLHS40)
        const double clhs182 =     Derivative(re(clhs40), lm(0,0)); // DERIVATIVE(RE(CLHS40), LM(0,0))
        const double clhs183 =     im(tangentxislave(0,0)); // IM(TANGENTXISLAVE(0,0))
        const double clhs184 =     re(clhs43); // RE(CLHS43)
        const double clhs185 =     Derivative(re(clhs43), lm(0,0)); // DERIVATIVE(RE(CLHS43), LM(0,0))
        const double clhs186 =     re(clhs41); // RE(CLHS41)
        const double clhs187 =     clhs181 + clhs186;
        const double clhs188 =     re(clhs44); // RE(CLHS44)
        const double clhs189 =     clhs184 + clhs188;
        const double clhs190 =     im(clhs41); // IM(CLHS41)
        const double clhs191 =     clhs175 + clhs190;
        const double clhs192 =     im(clhs44); // IM(CLHS44)
        const double clhs193 =     clhs178 + clhs192;
        const double clhs194 =     clhs174*clhs191 + clhs177*clhs193 + clhs180*clhs187 + clhs183*clhs189;
        const double clhs195 =     re(tangentetaslave(0,1)); // RE(TANGENTETASLAVE(0,1))
        const double clhs196 =     re(tangentxislave(0,1)); // RE(TANGENTXISLAVE(0,1))
        const double clhs197 =     im(tangentetaslave(0,1)); // IM(TANGENTETASLAVE(0,1))
        const double clhs198 =     im(tangentxislave(0,1)); // IM(TANGENTXISLAVE(0,1))
        const double clhs199 =     clhs187*clhs197 + clhs189*clhs198 + clhs191*clhs195 + clhs193*clhs196;
        const double clhs200 =     clhs174*clhs187 + clhs177*clhs189 - clhs180*clhs191 - clhs183*clhs193;
        const double clhs201 =     clhs187*clhs195 + clhs189*clhs196 - clhs191*clhs197 - clhs193*clhs198;
        const double clhs202 =     clhs194*(clhs174*clhs176 + clhs177*clhs179 + clhs180*clhs182 + clhs183*clhs185) + clhs199*(clhs176*clhs195 + clhs179*clhs196 + clhs182*clhs197 + clhs185*clhs198) + clhs200*(clhs174*clhs182 - clhs176*clhs180 + clhs177*clhs185 - clhs179*clhs183) + clhs201*(-clhs176*clhs197 - clhs179*clhs198 + clhs182*clhs195 + clhs185*clhs196);
        const double clhs203 =     clhs173*clhs202;
        const double clhs204 =     clhs172*clhs202*clhs24*clhs56*clhs59*mu[1];
        const double clhs205 =     normalslave(0,0)*normalslave(0,1)*scale_factor;
        const double clhs206 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs207 =     clhs170*clhs206;
        const double clhs208 =     clhs0*clhs205 + clhs0*clhs207;
        const double clhs209 =     clhs49*clhs59*mu[0]*normalslave(0,1)*scale_factor;
        const double clhs210 =     clhs209*clhs46;
        const double clhs211 =     Derivative(im(clhs41), lm(0,1)); // DERIVATIVE(IM(CLHS41), LM(0,1))
        const double clhs212 =     Derivative(im(clhs44), lm(0,1)); // DERIVATIVE(IM(CLHS44), LM(0,1))
        const double clhs213 =     Derivative(re(clhs41), lm(0,1)); // DERIVATIVE(RE(CLHS41), LM(0,1))
        const double clhs214 =     Derivative(re(clhs44), lm(0,1)); // DERIVATIVE(RE(CLHS44), LM(0,1))
        const double clhs215 =     clhs194*(clhs174*clhs211 + clhs177*clhs212 + clhs180*clhs213 + clhs183*clhs214) + clhs199*(clhs195*clhs211 + clhs196*clhs212 + clhs197*clhs213 + clhs198*clhs214) + clhs200*(clhs174*clhs213 + clhs177*clhs214 - clhs180*clhs211 - clhs183*clhs212) + clhs201*(clhs195*clhs213 + clhs196*clhs214 - clhs197*clhs211 - clhs198*clhs212);
        const double clhs216 =     clhs173*clhs215;
        const double clhs217 =     clhs172*clhs215*clhs24*clhs56*clhs59*mu[1];
        const double clhs218 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs219 =     clhs49*clhs59*mu[1]*normalslave(1,0)*scale_factor;
        const double clhs220 =     clhs219*clhs56;
        const double clhs221 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs222 =     clhs24*clhs49*clhs59*mu[1];
        const double clhs223 =     clhs221*clhs222;
        const double clhs224 =     std::pow(clhs58, -3.0L/2.0L);
        const double clhs225 =     re(tangentetaslave(1,0)); // RE(TANGENTETASLAVE(1,0))
        const double clhs226 =     im(clhs50); // IM(CLHS50)
        const double clhs227 =     Derivative(im(clhs50), lm(1,0)); // DERIVATIVE(IM(CLHS50), LM(1,0))
        const double clhs228 =     re(tangentxislave(1,0)); // RE(TANGENTXISLAVE(1,0))
        const double clhs229 =     im(clhs53); // IM(CLHS53)
        const double clhs230 =     Derivative(im(clhs53), lm(1,0)); // DERIVATIVE(IM(CLHS53), LM(1,0))
        const double clhs231 =     im(tangentetaslave(1,0)); // IM(TANGENTETASLAVE(1,0))
        const double clhs232 =     re(clhs50); // RE(CLHS50)
        const double clhs233 =     Derivative(re(clhs50), lm(1,0)); // DERIVATIVE(RE(CLHS50), LM(1,0))
        const double clhs234 =     im(tangentxislave(1,0)); // IM(TANGENTXISLAVE(1,0))
        const double clhs235 =     re(clhs53); // RE(CLHS53)
        const double clhs236 =     Derivative(re(clhs53), lm(1,0)); // DERIVATIVE(RE(CLHS53), LM(1,0))
        const double clhs237 =     re(clhs51); // RE(CLHS51)
        const double clhs238 =     clhs232 + clhs237;
        const double clhs239 =     re(clhs54); // RE(CLHS54)
        const double clhs240 =     clhs235 + clhs239;
        const double clhs241 =     im(clhs51); // IM(CLHS51)
        const double clhs242 =     clhs226 + clhs241;
        const double clhs243 =     im(clhs54); // IM(CLHS54)
        const double clhs244 =     clhs229 + clhs243;
        const double clhs245 =     clhs225*clhs242 + clhs228*clhs244 + clhs231*clhs238 + clhs234*clhs240;
        const double clhs246 =     re(tangentetaslave(1,1)); // RE(TANGENTETASLAVE(1,1))
        const double clhs247 =     re(tangentxislave(1,1)); // RE(TANGENTXISLAVE(1,1))
        const double clhs248 =     im(tangentetaslave(1,1)); // IM(TANGENTETASLAVE(1,1))
        const double clhs249 =     im(tangentxislave(1,1)); // IM(TANGENTXISLAVE(1,1))
        const double clhs250 =     clhs238*clhs248 + clhs240*clhs249 + clhs242*clhs246 + clhs244*clhs247;
        const double clhs251 =     clhs225*clhs238 + clhs228*clhs240 - clhs231*clhs242 - clhs234*clhs244;
        const double clhs252 =     clhs238*clhs246 + clhs240*clhs247 - clhs242*clhs248 - clhs244*clhs249;
        const double clhs253 =     clhs245*(clhs225*clhs227 + clhs228*clhs230 + clhs231*clhs233 + clhs234*clhs236) + clhs250*(clhs227*clhs246 + clhs230*clhs247 + clhs233*clhs248 + clhs236*clhs249) + clhs251*(clhs225*clhs233 - clhs227*clhs231 + clhs228*clhs236 - clhs230*clhs234) + clhs252*(-clhs227*clhs248 - clhs230*clhs249 + clhs233*clhs246 + clhs236*clhs247);
        const double clhs254 =     clhs15*clhs224*clhs253*clhs46*clhs49*mu[0];
        const double clhs255 =     clhs224*clhs24*clhs49*clhs56*mu[1];
        const double clhs256 =     clhs253*clhs255;
        const double clhs257 =     normalslave(1,0)*normalslave(1,1)*scale_factor;
        const double clhs258 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs259 =     clhs222*clhs258;
        const double clhs260 =     clhs17*clhs257 + clhs17*clhs259;
        const double clhs261 =     clhs49*clhs59*mu[1]*normalslave(1,1)*scale_factor;
        const double clhs262 =     clhs261*clhs56;
        const double clhs263 =     Derivative(im(clhs51), lm(1,1)); // DERIVATIVE(IM(CLHS51), LM(1,1))
        const double clhs264 =     Derivative(im(clhs54), lm(1,1)); // DERIVATIVE(IM(CLHS54), LM(1,1))
        const double clhs265 =     Derivative(re(clhs51), lm(1,1)); // DERIVATIVE(RE(CLHS51), LM(1,1))
        const double clhs266 =     Derivative(re(clhs54), lm(1,1)); // DERIVATIVE(RE(CLHS54), LM(1,1))
        const double clhs267 =     clhs245*(clhs225*clhs263 + clhs228*clhs264 + clhs231*clhs265 + clhs234*clhs266) + clhs250*(clhs246*clhs263 + clhs247*clhs264 + clhs248*clhs265 + clhs249*clhs266) + clhs251*(clhs225*clhs265 + clhs228*clhs266 - clhs231*clhs263 - clhs234*clhs264) + clhs252*(clhs246*clhs265 + clhs247*clhs266 - clhs248*clhs263 - clhs249*clhs264);
        const double clhs268 =     clhs15*clhs224*clhs267*clhs46*clhs49*mu[0];
        const double clhs269 =     clhs255*clhs267;
        const double clhs270 =     clhs15*normalslave(0,1);
        const double clhs271 =     clhs24*normalslave(1,1);
        const double clhs272 =     clhs31*normalslave(0,1)*penalty_parameter;
        const double clhs273 =     clhs38*normalslave(1,1)*penalty_parameter;
        const double clhs274 =     clhs15*clhs47*clhs49*clhs59*mu[0];
        const double clhs275 =     clhs24*clhs49*clhs57*clhs59*mu[1];
        const double clhs276 =     clhs31*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs277 =     clhs38*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs278 =     clhs69*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs74*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs47*clhs49*clhs59*clhs69*mu[0]*penalty_parameter;
        const double clhs281 =     clhs49*clhs57*clhs59*clhs74*mu[1]*penalty_parameter;
        const double clhs282 =     clhs85*normalslave(0,1)*penalty_parameter;
        const double clhs283 =     clhs92*normalslave(1,1)*penalty_parameter;
        const double clhs284 =     clhs47*clhs49*clhs59*clhs85*mu[0]*penalty_parameter;
        const double clhs285 =     clhs49*clhs57*clhs59*clhs92*mu[1]*penalty_parameter;
        const double clhs286 =     clhs101*normalslave(0,1)*penalty_parameter;
        const double clhs287 =     clhs106*normalslave(1,1)*penalty_parameter;
        const double clhs288 =     clhs101*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs289 =     clhs106*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs290 =     clhs115*normalslave(0,1)*penalty_parameter;
        const double clhs291 =     clhs120*normalslave(1,1)*penalty_parameter;
        const double clhs292 =     clhs115*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs293 =     clhs120*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs294 =     clhs129*normalslave(0,1)*penalty_parameter;
        const double clhs295 =     clhs134*normalslave(1,1)*penalty_parameter;
        const double clhs296 =     clhs129*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs297 =     clhs134*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs298 =     clhs143*normalslave(0,1)*penalty_parameter;
        const double clhs299 =     clhs148*normalslave(1,1)*penalty_parameter;
        const double clhs300 =     clhs143*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs301 =     clhs148*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs302 =     clhs157*normalslave(0,1)*penalty_parameter;
        const double clhs303 =     clhs162*normalslave(1,1)*penalty_parameter;
        const double clhs304 =     clhs157*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs305 =     clhs162*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs306 =     clhs167*clhs47;
        const double clhs307 =     clhs15*clhs172*clhs47*clhs59*mu[0];
        const double clhs308 =     clhs202*clhs307;
        const double clhs309 =     clhs172*clhs202*clhs24*clhs57*clhs59*mu[1];
        const double clhs310 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs311 =     clhs209*clhs47;
        const double clhs312 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs313 =     clhs170*clhs312;
        const double clhs314 =     clhs215*clhs307;
        const double clhs315 =     clhs172*clhs215*clhs24*clhs57*clhs59*mu[1];
        const double clhs316 =     clhs219*clhs57;
        const double clhs317 =     clhs15*clhs224*clhs253*clhs47*clhs49*mu[0];
        const double clhs318 =     clhs224*clhs24*clhs49*clhs57*mu[1];
        const double clhs319 =     clhs253*clhs318;
        const double clhs320 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs321 =     clhs261*clhs57;
        const double clhs322 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs323 =     clhs222*clhs322;
        const double clhs324 =     clhs15*clhs224*clhs267*clhs47*clhs49*mu[0];
        const double clhs325 =     clhs267*clhs318;
        const double clhs326 =     clhs205*clhs9 + clhs207*clhs9;
        const double clhs327 =     clhs22*clhs257 + clhs22*clhs259;
        const double clhs328 =     -clhs14 + clhs2;
        const double clhs329 =     clhs328*normalslave(0,0);
        const double clhs330 =     clhs19 - clhs23;
        const double clhs331 =     clhs330*normalslave(1,0);
        const double clhs332 =     clhs29 - clhs30;
        const double clhs333 =     clhs332*normalslave(0,0)*penalty_parameter;
        const double clhs334 =     clhs36 - clhs37;
        const double clhs335 =     clhs334*normalslave(1,0)*penalty_parameter;
        const double clhs336 =     clhs328*clhs46*clhs49*clhs59*mu[0];
        const double clhs337 =     clhs330*clhs49*clhs56*clhs59*mu[1];
        const double clhs338 =     clhs332*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs339 =     clhs334*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs340 =     clhs83 - clhs84;
        const double clhs341 =     clhs340*normalslave(0,0)*penalty_parameter;
        const double clhs342 =     clhs90 - clhs91;
        const double clhs343 =     clhs342*normalslave(1,0)*penalty_parameter;
        const double clhs344 =     clhs340*clhs46*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs345 =     clhs342*clhs49*clhs56*clhs59*mu[1]*penalty_parameter;
        const double clhs346 =     clhs169*clhs328*clhs49*clhs59*mu[0];
        const double clhs347 =     clhs172*clhs202*clhs328*clhs46*clhs59*mu[0];
        const double clhs348 =     clhs172*clhs202*clhs330*clhs56*clhs59*mu[1];
        const double clhs349 =     clhs206*clhs328*clhs49*clhs59*mu[0];
        const double clhs350 =     -clhs205*clhs4 + clhs349*clhs4;
        const double clhs351 =     clhs172*clhs215*clhs328*clhs46*clhs59*mu[0];
        const double clhs352 =     clhs172*clhs215*clhs330*clhs56*clhs59*mu[1];
        const double clhs353 =     clhs221*clhs330*clhs49*clhs59*mu[1];
        const double clhs354 =     clhs224*clhs253*clhs328*clhs46*clhs49*mu[0];
        const double clhs355 =     clhs224*clhs253*clhs330*clhs49*clhs56*mu[1];
        const double clhs356 =     clhs258*clhs330*clhs49*clhs59*mu[1];
        const double clhs357 =     -clhs20*clhs257 + clhs20*clhs356;
        const double clhs358 =     clhs224*clhs267*clhs328*clhs46*clhs49*mu[0];
        const double clhs359 =     clhs224*clhs267*clhs330*clhs49*clhs56*mu[1];
        const double clhs360 =     clhs328*normalslave(0,1);
        const double clhs361 =     clhs330*normalslave(1,1);
        const double clhs362 =     clhs332*normalslave(0,1)*penalty_parameter;
        const double clhs363 =     clhs334*normalslave(1,1)*penalty_parameter;
        const double clhs364 =     clhs328*clhs47*clhs49*clhs59*mu[0];
        const double clhs365 =     clhs330*clhs49*clhs57*clhs59*mu[1];
        const double clhs366 =     clhs332*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs367 =     clhs334*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs368 =     clhs340*normalslave(0,1)*penalty_parameter;
        const double clhs369 =     clhs342*normalslave(1,1)*penalty_parameter;
        const double clhs370 =     clhs340*clhs47*clhs49*clhs59*mu[0]*penalty_parameter;
        const double clhs371 =     clhs342*clhs49*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs372 =     clhs172*clhs202*clhs328*clhs47*clhs59*mu[0];
        const double clhs373 =     clhs172*clhs202*clhs330*clhs57*clhs59*mu[1];
        const double clhs374 =     clhs312*clhs328*clhs49*clhs59*mu[0];
        const double clhs375 =     clhs172*clhs215*clhs328*clhs47*clhs59*mu[0];
        const double clhs376 =     clhs172*clhs215*clhs330*clhs57*clhs59*mu[1];
        const double clhs377 =     clhs224*clhs253*clhs328*clhs47*clhs49*mu[0];
        const double clhs378 =     clhs224*clhs253*clhs330*clhs49*clhs57*mu[1];
        const double clhs379 =     clhs322*clhs330*clhs49*clhs59*mu[1];
        const double clhs380 =     clhs224*clhs267*clhs328*clhs47*clhs49*mu[0];
        const double clhs381 =     clhs224*clhs267*clhs330*clhs49*clhs57*mu[1];
        const double clhs382 =     -clhs205*clhs6 + clhs349*clhs6;
        const double clhs383 =     -clhs21*clhs257 + clhs21*clhs356;
        const double clhs384 =     clhs332*scale_factor;
        const double clhs385 =     clhs169*clhs46;
        const double clhs386 =     0.5*clhs49*clhs59*mu[0];
        const double clhs387 =     clhs206*clhs47;
        const double clhs388 =     -clhs385*clhs386 - clhs386*clhs387 + normalslave(0,0);
        const double clhs389 =     clhs69*scale_factor;
        const double clhs390 =     clhs340*scale_factor;
        const double clhs391 =     clhs101*scale_factor;
        const double clhs392 =     clhs115*scale_factor;
        const double clhs393 =     clhs129*scale_factor;
        const double clhs394 =     clhs143*scale_factor;
        const double clhs395 =     clhs157*scale_factor;
        const double clhs396 =     1.0/penalty_parameter;
        const double clhs397 =     0.5*clhs396*scale_factor;
        const double clhs398 =     clhs168 + clhs169*scale_factor - clhs171 + clhs203;
        const double clhs399 =     clhs206*scale_factor - clhs207;
        const double clhs400 =     clhs306 + clhs308 + clhs399;
        const double clhs401 =     clhs210 + clhs216 + clhs399;
        const double clhs402 =     clhs311 + clhs312*scale_factor - clhs313 + clhs314;
        const double clhs403 =     0.5*clhs224*clhs328*clhs396*clhs49*mu[0]*scale_factor*(clhs385 + clhs387);
        const double clhs404 =     clhs312*clhs47;
        const double clhs405 =     clhs206*clhs46;
        const double clhs406 =     -clhs386*clhs404 - clhs386*clhs405 + normalslave(0,1);
        const double clhs407 =     0.5*clhs224*clhs328*clhs396*clhs49*mu[0]*scale_factor*(clhs404 + clhs405);
        const double clhs408 =     clhs334*scale_factor;
        const double clhs409 =     clhs221*clhs56;
        const double clhs410 =     0.5*clhs49*clhs59*mu[1];
        const double clhs411 =     clhs258*clhs57;
        const double clhs412 =     -clhs409*clhs410 - clhs410*clhs411 + normalslave(1,0);
        const double clhs413 =     clhs74*scale_factor;
        const double clhs414 =     clhs342*scale_factor;
        const double clhs415 =     clhs106*scale_factor;
        const double clhs416 =     clhs120*scale_factor;
        const double clhs417 =     clhs134*scale_factor;
        const double clhs418 =     clhs148*scale_factor;
        const double clhs419 =     clhs162*scale_factor;
        const double clhs420 =     0.5*clhs172*clhs330*clhs396*clhs59*mu[1]*scale_factor*(clhs409 + clhs411);
        const double clhs421 =     clhs220 + clhs221*scale_factor - clhs223 + clhs256;
        const double clhs422 =     clhs258*scale_factor - clhs259;
        const double clhs423 =     clhs316 + clhs319 + clhs422;
        const double clhs424 =     clhs262 + clhs269 + clhs422;
        const double clhs425 =     clhs321 + clhs322*scale_factor - clhs323 + clhs325;
        const double clhs426 =     clhs322*clhs57;
        const double clhs427 =     clhs258*clhs56;
        const double clhs428 =     -clhs410*clhs426 - clhs410*clhs427 + normalslave(1,1);
        const double clhs429 =     0.5*clhs172*clhs330*clhs396*clhs59*mu[1]*scale_factor*(clhs426 + clhs427);
    
        lhs(0,0)=clhs0*clhs32 - clhs0*clhs62 - clhs1*clhs16 + clhs1*clhs60 + clhs17*clhs39 - clhs17*clhs63 - clhs18*clhs25 + clhs18*clhs61;
        lhs(0,1)=-clhs0*clhs70 + clhs0*clhs76 - clhs16*clhs64 - clhs17*clhs75 + clhs17*clhs77 - clhs25*clhs65 + clhs60*clhs64 + clhs61*clhs65;
        lhs(0,2)=clhs0*clhs86 - clhs0*clhs94 - clhs16*clhs78 + clhs17*clhs93 - clhs17*clhs95 - clhs25*clhs79 + clhs60*clhs78 + clhs61*clhs79;
        lhs(0,3)=-clhs0*clhs102 + clhs0*clhs108 - clhs107*clhs17 + clhs109*clhs17 - clhs16*clhs96 - clhs25*clhs97 + clhs60*clhs96 + clhs61*clhs97;
        lhs(0,4)=-clhs0*clhs116 + clhs0*clhs122 - clhs110*clhs16 + clhs110*clhs60 - clhs111*clhs25 + clhs111*clhs61 - clhs121*clhs17 + clhs123*clhs17;
        lhs(0,5)=-clhs0*clhs130 + clhs0*clhs136 - clhs124*clhs16 + clhs124*clhs60 - clhs125*clhs25 + clhs125*clhs61 - clhs135*clhs17 + clhs137*clhs17;
        lhs(0,6)=-clhs0*clhs144 + clhs0*clhs150 - clhs138*clhs16 + clhs138*clhs60 - clhs139*clhs25 + clhs139*clhs61 - clhs149*clhs17 + clhs151*clhs17;
        lhs(0,7)=-clhs0*clhs158 + clhs0*clhs164 - clhs152*clhs16 + clhs152*clhs60 - clhs153*clhs25 + clhs153*clhs61 - clhs163*clhs17 + clhs165*clhs17;
        lhs(0,8)=clhs0*clhs166 - clhs0*clhs168 + clhs0*clhs171 - clhs0*clhs203 - clhs17*clhs204;
        lhs(0,9)=-clhs0*clhs210 - clhs0*clhs216 - clhs17*clhs217 + clhs208;
        lhs(0,10)=-clhs0*clhs254 + clhs17*clhs218 - clhs17*clhs220 + clhs17*clhs223 - clhs17*clhs256;
        lhs(0,11)=-clhs0*clhs268 - clhs17*clhs262 - clhs17*clhs269 + clhs260;
        lhs(1,0)=clhs0*clhs272 - clhs0*clhs276 - clhs1*clhs270 + clhs1*clhs274 + clhs17*clhs273 - clhs17*clhs277 - clhs18*clhs271 + clhs18*clhs275;
        lhs(1,1)=-clhs0*clhs278 + clhs0*clhs280 - clhs17*clhs279 + clhs17*clhs281 - clhs270*clhs64 - clhs271*clhs65 + clhs274*clhs64 + clhs275*clhs65;
        lhs(1,2)=clhs0*clhs282 - clhs0*clhs284 + clhs17*clhs283 - clhs17*clhs285 - clhs270*clhs78 - clhs271*clhs79 + clhs274*clhs78 + clhs275*clhs79;
        lhs(1,3)=-clhs0*clhs286 + clhs0*clhs288 - clhs17*clhs287 + clhs17*clhs289 - clhs270*clhs96 - clhs271*clhs97 + clhs274*clhs96 + clhs275*clhs97;
        lhs(1,4)=-clhs0*clhs290 + clhs0*clhs292 - clhs110*clhs270 + clhs110*clhs274 - clhs111*clhs271 + clhs111*clhs275 - clhs17*clhs291 + clhs17*clhs293;
        lhs(1,5)=-clhs0*clhs294 + clhs0*clhs296 - clhs124*clhs270 + clhs124*clhs274 - clhs125*clhs271 + clhs125*clhs275 - clhs17*clhs295 + clhs17*clhs297;
        lhs(1,6)=-clhs0*clhs298 + clhs0*clhs300 - clhs138*clhs270 + clhs138*clhs274 - clhs139*clhs271 + clhs139*clhs275 - clhs17*clhs299 + clhs17*clhs301;
        lhs(1,7)=-clhs0*clhs302 + clhs0*clhs304 - clhs152*clhs270 + clhs152*clhs274 - clhs153*clhs271 + clhs153*clhs275 - clhs17*clhs303 + clhs17*clhs305;
        lhs(1,8)=-clhs0*clhs306 - clhs0*clhs308 - clhs17*clhs309 + clhs208;
        lhs(1,9)=clhs0*clhs310 - clhs0*clhs311 + clhs0*clhs313 - clhs0*clhs314 - clhs17*clhs315;
        lhs(1,10)=-clhs0*clhs317 - clhs17*clhs316 - clhs17*clhs319 + clhs260;
        lhs(1,11)=-clhs0*clhs324 + clhs17*clhs320 - clhs17*clhs321 + clhs17*clhs323 - clhs17*clhs325;
        lhs(2,0)=-clhs16*clhs28 + clhs22*clhs39 - clhs22*clhs63 - clhs25*clhs35 + clhs28*clhs60 + clhs32*clhs9 + clhs35*clhs61 - clhs62*clhs9;
        lhs(2,1)=-clhs16*clhs68 - clhs22*clhs75 + clhs22*clhs77 - clhs25*clhs73 + clhs60*clhs68 + clhs61*clhs73 - clhs70*clhs9 + clhs76*clhs9;
        lhs(2,2)=-clhs16*clhs82 + clhs22*clhs93 - clhs22*clhs95 - clhs25*clhs89 + clhs60*clhs82 + clhs61*clhs89 + clhs86*clhs9 - clhs9*clhs94;
        lhs(2,3)=-clhs100*clhs16 + clhs100*clhs60 - clhs102*clhs9 - clhs105*clhs25 + clhs105*clhs61 - clhs107*clhs22 + clhs108*clhs9 + clhs109*clhs22;
        lhs(2,4)=-clhs114*clhs16 + clhs114*clhs60 - clhs116*clhs9 - clhs119*clhs25 + clhs119*clhs61 - clhs121*clhs22 + clhs122*clhs9 + clhs123*clhs22;
        lhs(2,5)=-clhs128*clhs16 + clhs128*clhs60 - clhs130*clhs9 - clhs133*clhs25 + clhs133*clhs61 - clhs135*clhs22 + clhs136*clhs9 + clhs137*clhs22;
        lhs(2,6)=-clhs142*clhs16 + clhs142*clhs60 - clhs144*clhs9 - clhs147*clhs25 + clhs147*clhs61 - clhs149*clhs22 + clhs150*clhs9 + clhs151*clhs22;
        lhs(2,7)=-clhs156*clhs16 + clhs156*clhs60 - clhs158*clhs9 - clhs161*clhs25 + clhs161*clhs61 - clhs163*clhs22 + clhs164*clhs9 + clhs165*clhs22;
        lhs(2,8)=clhs166*clhs9 - clhs168*clhs9 + clhs171*clhs9 - clhs203*clhs9 - clhs204*clhs22;
        lhs(2,9)=-clhs210*clhs9 - clhs216*clhs9 - clhs217*clhs22 + clhs326;
        lhs(2,10)=clhs218*clhs22 - clhs22*clhs220 + clhs22*clhs223 - clhs22*clhs256 - clhs254*clhs9;
        lhs(2,11)=-clhs22*clhs262 - clhs22*clhs269 - clhs268*clhs9 + clhs327;
        lhs(3,0)=clhs22*clhs273 - clhs22*clhs277 - clhs270*clhs28 - clhs271*clhs35 + clhs272*clhs9 + clhs274*clhs28 + clhs275*clhs35 - clhs276*clhs9;
        lhs(3,1)=-clhs22*clhs279 + clhs22*clhs281 - clhs270*clhs68 - clhs271*clhs73 + clhs274*clhs68 + clhs275*clhs73 - clhs278*clhs9 + clhs280*clhs9;
        lhs(3,2)=clhs22*clhs283 - clhs22*clhs285 - clhs270*clhs82 - clhs271*clhs89 + clhs274*clhs82 + clhs275*clhs89 + clhs282*clhs9 - clhs284*clhs9;
        lhs(3,3)=-clhs100*clhs270 + clhs100*clhs274 - clhs105*clhs271 + clhs105*clhs275 - clhs22*clhs287 + clhs22*clhs289 - clhs286*clhs9 + clhs288*clhs9;
        lhs(3,4)=-clhs114*clhs270 + clhs114*clhs274 - clhs119*clhs271 + clhs119*clhs275 - clhs22*clhs291 + clhs22*clhs293 - clhs290*clhs9 + clhs292*clhs9;
        lhs(3,5)=-clhs128*clhs270 + clhs128*clhs274 - clhs133*clhs271 + clhs133*clhs275 - clhs22*clhs295 + clhs22*clhs297 - clhs294*clhs9 + clhs296*clhs9;
        lhs(3,6)=-clhs142*clhs270 + clhs142*clhs274 - clhs147*clhs271 + clhs147*clhs275 - clhs22*clhs299 + clhs22*clhs301 - clhs298*clhs9 + clhs300*clhs9;
        lhs(3,7)=-clhs156*clhs270 + clhs156*clhs274 - clhs161*clhs271 + clhs161*clhs275 - clhs22*clhs303 + clhs22*clhs305 - clhs302*clhs9 + clhs304*clhs9;
        lhs(3,8)=-clhs22*clhs309 - clhs306*clhs9 - clhs308*clhs9 + clhs326;
        lhs(3,9)=-clhs22*clhs315 + clhs310*clhs9 - clhs311*clhs9 + clhs313*clhs9 - clhs314*clhs9;
        lhs(3,10)=-clhs22*clhs316 - clhs22*clhs319 - clhs317*clhs9 + clhs327;
        lhs(3,11)=clhs22*clhs320 - clhs22*clhs321 + clhs22*clhs323 - clhs22*clhs325 - clhs324*clhs9;
        lhs(4,0)=clhs20*clhs335 - clhs20*clhs339 - clhs26*clhs329 + clhs26*clhs336 - clhs33*clhs331 + clhs33*clhs337 + clhs333*clhs4 - clhs338*clhs4;
        lhs(4,1)=clhs20*clhs75 - clhs20*clhs77 - clhs329*clhs66 - clhs331*clhs71 + clhs336*clhs66 + clhs337*clhs71 + clhs4*clhs70 - clhs4*clhs76;
        lhs(4,2)=clhs20*clhs343 - clhs20*clhs345 - clhs329*clhs80 - clhs331*clhs87 + clhs336*clhs80 + clhs337*clhs87 + clhs341*clhs4 - clhs344*clhs4;
        lhs(4,3)=clhs102*clhs4 - clhs103*clhs331 + clhs103*clhs337 + clhs107*clhs20 - clhs108*clhs4 - clhs109*clhs20 - clhs329*clhs98 + clhs336*clhs98;
        lhs(4,4)=-clhs112*clhs329 + clhs112*clhs336 + clhs116*clhs4 - clhs117*clhs331 + clhs117*clhs337 + clhs121*clhs20 - clhs122*clhs4 - clhs123*clhs20;
        lhs(4,5)=-clhs126*clhs329 + clhs126*clhs336 + clhs130*clhs4 - clhs131*clhs331 + clhs131*clhs337 + clhs135*clhs20 - clhs136*clhs4 - clhs137*clhs20;
        lhs(4,6)=-clhs140*clhs329 + clhs140*clhs336 + clhs144*clhs4 - clhs145*clhs331 + clhs145*clhs337 + clhs149*clhs20 - clhs150*clhs4 - clhs151*clhs20;
        lhs(4,7)=-clhs154*clhs329 + clhs154*clhs336 + clhs158*clhs4 - clhs159*clhs331 + clhs159*clhs337 + clhs163*clhs20 - clhs164*clhs4 - clhs165*clhs20;
        lhs(4,8)=-clhs166*clhs4 + clhs168*clhs4 - clhs20*clhs348 + clhs346*clhs4 - clhs347*clhs4;
        lhs(4,9)=-clhs20*clhs352 + clhs210*clhs4 + clhs350 - clhs351*clhs4;
        lhs(4,10)=-clhs20*clhs218 + clhs20*clhs220 + clhs20*clhs353 - clhs20*clhs355 - clhs354*clhs4;
        lhs(4,11)=clhs20*clhs262 - clhs20*clhs359 + clhs357 - clhs358*clhs4;
        lhs(5,0)=clhs20*clhs363 - clhs20*clhs367 - clhs26*clhs360 + clhs26*clhs364 - clhs33*clhs361 + clhs33*clhs365 + clhs362*clhs4 - clhs366*clhs4;
        lhs(5,1)=clhs20*clhs279 - clhs20*clhs281 + clhs278*clhs4 - clhs280*clhs4 - clhs360*clhs66 - clhs361*clhs71 + clhs364*clhs66 + clhs365*clhs71;
        lhs(5,2)=clhs20*clhs369 - clhs20*clhs371 - clhs360*clhs80 - clhs361*clhs87 + clhs364*clhs80 + clhs365*clhs87 + clhs368*clhs4 - clhs370*clhs4;
        lhs(5,3)=-clhs103*clhs361 + clhs103*clhs365 + clhs20*clhs287 - clhs20*clhs289 + clhs286*clhs4 - clhs288*clhs4 - clhs360*clhs98 + clhs364*clhs98;
        lhs(5,4)=-clhs112*clhs360 + clhs112*clhs364 - clhs117*clhs361 + clhs117*clhs365 + clhs20*clhs291 - clhs20*clhs293 + clhs290*clhs4 - clhs292*clhs4;
        lhs(5,5)=-clhs126*clhs360 + clhs126*clhs364 - clhs131*clhs361 + clhs131*clhs365 + clhs20*clhs295 - clhs20*clhs297 + clhs294*clhs4 - clhs296*clhs4;
        lhs(5,6)=-clhs140*clhs360 + clhs140*clhs364 - clhs145*clhs361 + clhs145*clhs365 + clhs20*clhs299 - clhs20*clhs301 + clhs298*clhs4 - clhs300*clhs4;
        lhs(5,7)=-clhs154*clhs360 + clhs154*clhs364 - clhs159*clhs361 + clhs159*clhs365 + clhs20*clhs303 - clhs20*clhs305 + clhs302*clhs4 - clhs304*clhs4;
        lhs(5,8)=-clhs20*clhs373 + clhs306*clhs4 + clhs350 - clhs372*clhs4;
        lhs(5,9)=-clhs20*clhs376 - clhs310*clhs4 + clhs311*clhs4 + clhs374*clhs4 - clhs375*clhs4;
        lhs(5,10)=clhs20*clhs316 - clhs20*clhs378 + clhs357 - clhs377*clhs4;
        lhs(5,11)=-clhs20*clhs320 + clhs20*clhs321 + clhs20*clhs379 - clhs20*clhs381 - clhs380*clhs4;
        lhs(6,0)=clhs21*clhs335 - clhs21*clhs339 - clhs27*clhs329 + clhs27*clhs336 - clhs331*clhs34 + clhs333*clhs6 + clhs337*clhs34 - clhs338*clhs6;
        lhs(6,1)=clhs21*clhs75 - clhs21*clhs77 - clhs329*clhs67 - clhs331*clhs72 + clhs336*clhs67 + clhs337*clhs72 + clhs6*clhs70 - clhs6*clhs76;
        lhs(6,2)=clhs21*clhs343 - clhs21*clhs345 - clhs329*clhs81 - clhs331*clhs88 + clhs336*clhs81 + clhs337*clhs88 + clhs341*clhs6 - clhs344*clhs6;
        lhs(6,3)=clhs102*clhs6 - clhs104*clhs331 + clhs104*clhs337 + clhs107*clhs21 - clhs108*clhs6 - clhs109*clhs21 - clhs329*clhs99 + clhs336*clhs99;
        lhs(6,4)=-clhs113*clhs329 + clhs113*clhs336 + clhs116*clhs6 - clhs118*clhs331 + clhs118*clhs337 + clhs121*clhs21 - clhs122*clhs6 - clhs123*clhs21;
        lhs(6,5)=-clhs127*clhs329 + clhs127*clhs336 + clhs130*clhs6 - clhs132*clhs331 + clhs132*clhs337 + clhs135*clhs21 - clhs136*clhs6 - clhs137*clhs21;
        lhs(6,6)=-clhs141*clhs329 + clhs141*clhs336 + clhs144*clhs6 - clhs146*clhs331 + clhs146*clhs337 + clhs149*clhs21 - clhs150*clhs6 - clhs151*clhs21;
        lhs(6,7)=-clhs155*clhs329 + clhs155*clhs336 + clhs158*clhs6 - clhs160*clhs331 + clhs160*clhs337 + clhs163*clhs21 - clhs164*clhs6 - clhs165*clhs21;
        lhs(6,8)=-clhs166*clhs6 + clhs168*clhs6 - clhs21*clhs348 + clhs346*clhs6 - clhs347*clhs6;
        lhs(6,9)=-clhs21*clhs352 + clhs210*clhs6 - clhs351*clhs6 + clhs382;
        lhs(6,10)=-clhs21*clhs218 + clhs21*clhs220 + clhs21*clhs353 - clhs21*clhs355 - clhs354*clhs6;
        lhs(6,11)=clhs21*clhs262 - clhs21*clhs359 - clhs358*clhs6 + clhs383;
        lhs(7,0)=clhs21*clhs363 - clhs21*clhs367 - clhs27*clhs360 + clhs27*clhs364 - clhs34*clhs361 + clhs34*clhs365 + clhs362*clhs6 - clhs366*clhs6;
        lhs(7,1)=clhs21*clhs279 - clhs21*clhs281 + clhs278*clhs6 - clhs280*clhs6 - clhs360*clhs67 - clhs361*clhs72 + clhs364*clhs67 + clhs365*clhs72;
        lhs(7,2)=clhs21*clhs369 - clhs21*clhs371 - clhs360*clhs81 - clhs361*clhs88 + clhs364*clhs81 + clhs365*clhs88 + clhs368*clhs6 - clhs370*clhs6;
        lhs(7,3)=-clhs104*clhs361 + clhs104*clhs365 + clhs21*clhs287 - clhs21*clhs289 + clhs286*clhs6 - clhs288*clhs6 - clhs360*clhs99 + clhs364*clhs99;
        lhs(7,4)=-clhs113*clhs360 + clhs113*clhs364 - clhs118*clhs361 + clhs118*clhs365 + clhs21*clhs291 - clhs21*clhs293 + clhs290*clhs6 - clhs292*clhs6;
        lhs(7,5)=-clhs127*clhs360 + clhs127*clhs364 - clhs132*clhs361 + clhs132*clhs365 + clhs21*clhs295 - clhs21*clhs297 + clhs294*clhs6 - clhs296*clhs6;
        lhs(7,6)=-clhs141*clhs360 + clhs141*clhs364 - clhs146*clhs361 + clhs146*clhs365 + clhs21*clhs299 - clhs21*clhs301 + clhs298*clhs6 - clhs300*clhs6;
        lhs(7,7)=-clhs155*clhs360 + clhs155*clhs364 - clhs160*clhs361 + clhs160*clhs365 + clhs21*clhs303 - clhs21*clhs305 + clhs302*clhs6 - clhs304*clhs6;
        lhs(7,8)=-clhs21*clhs373 + clhs306*clhs6 - clhs372*clhs6 + clhs382;
        lhs(7,9)=-clhs21*clhs376 - clhs310*clhs6 + clhs311*clhs6 + clhs374*clhs6 - clhs375*clhs6;
        lhs(7,10)=clhs21*clhs316 - clhs21*clhs378 - clhs377*clhs6 + clhs383;
        lhs(7,11)=-clhs21*clhs320 + clhs21*clhs321 + clhs21*clhs379 - clhs21*clhs381 - clhs380*clhs6;
        lhs(8,0)=clhs384*clhs388;
        lhs(8,1)=clhs388*clhs389;
        lhs(8,2)=clhs388*clhs390;
        lhs(8,3)=clhs388*clhs391;
        lhs(8,4)=clhs388*clhs392;
        lhs(8,5)=clhs388*clhs393;
        lhs(8,6)=clhs388*clhs394;
        lhs(8,7)=clhs388*clhs395;
        lhs(8,8)=clhs397*(clhs169*clhs398 + clhs206*clhs400);
        lhs(8,9)=clhs397*(clhs169*clhs401 + clhs206*clhs402);
        lhs(8,10)=-clhs253*clhs403;
        lhs(8,11)=-clhs267*clhs403;
        lhs(9,0)=clhs384*clhs406;
        lhs(9,1)=clhs389*clhs406;
        lhs(9,2)=clhs390*clhs406;
        lhs(9,3)=clhs391*clhs406;
        lhs(9,4)=clhs392*clhs406;
        lhs(9,5)=clhs393*clhs406;
        lhs(9,6)=clhs394*clhs406;
        lhs(9,7)=clhs395*clhs406;
        lhs(9,8)=clhs397*(clhs206*clhs398 + clhs312*clhs400);
        lhs(9,9)=clhs397*(clhs206*clhs401 + clhs312*clhs402);
        lhs(9,10)=-clhs253*clhs407;
        lhs(9,11)=-clhs267*clhs407;
        lhs(10,0)=clhs408*clhs412;
        lhs(10,1)=clhs412*clhs413;
        lhs(10,2)=clhs412*clhs414;
        lhs(10,3)=clhs412*clhs415;
        lhs(10,4)=clhs412*clhs416;
        lhs(10,5)=clhs412*clhs417;
        lhs(10,6)=clhs412*clhs418;
        lhs(10,7)=clhs412*clhs419;
        lhs(10,8)=-clhs202*clhs420;
        lhs(10,9)=-clhs215*clhs420;
        lhs(10,10)=clhs397*(clhs221*clhs421 + clhs258*clhs423);
        lhs(10,11)=clhs397*(clhs221*clhs424 + clhs258*clhs425);
        lhs(11,0)=clhs408*clhs428;
        lhs(11,1)=clhs413*clhs428;
        lhs(11,2)=clhs414*clhs428;
        lhs(11,3)=clhs415*clhs428;
        lhs(11,4)=clhs416*clhs428;
        lhs(11,5)=clhs417*clhs428;
        lhs(11,6)=clhs418*clhs428;
        lhs(11,7)=clhs419*clhs428;
        lhs(11,8)=-clhs202*clhs429;
        lhs(11,9)=-clhs215*clhs429;
        lhs(11,10)=clhs397*(clhs258*clhs421 + clhs322*clhs423);
        lhs(11,11)=clhs397*(clhs258*clhs424 + clhs322*clhs425);
    }
    else if (rActiveInactive == 5 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     lm(0,0)*tangentetaslave(0,0);
        const double clhs3 =     lm(0,1)*tangentetaslave(0,1);
        const double clhs4 =     clhs2 + clhs3;
        const double clhs5 =     X1(0,0) + u1old(0,0);
        const double clhs6 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X1(1,0) + u1old(1,0);
        const double clhs8 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     X2(0,0) + u2old(0,0);
        const double clhs10 =     X2(1,0) + u2old(1,0);
        const double clhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs12 =     -clhs0*clhs9 - clhs10*clhs11 + clhs5*clhs6 + clhs7*clhs8;
        const double clhs13 =     X1(0,1) + u1old(0,1);
        const double clhs14 =     X1(1,1) + u1old(1,1);
        const double clhs15 =     X2(0,1) + u2old(0,1);
        const double clhs16 =     X2(1,1) + u2old(1,1);
        const double clhs17 =     -clhs0*clhs15 - clhs11*clhs16 + clhs13*clhs6 + clhs14*clhs8;
        const double clhs18 =     clhs4*scale_factor + penalty_parameter*(clhs12*tangentetaslave(0,0) + clhs17*tangentetaslave(0,1));
        const double clhs19 =     clhs18*tangentetaslave(0,0);
        const double clhs20 =     lm(0,0)*tangentxislave(0,0);
        const double clhs21 =     lm(0,1)*tangentxislave(0,1);
        const double clhs22 =     clhs20 + clhs21;
        const double clhs23 =     clhs22*scale_factor + penalty_parameter*(clhs12*tangentxislave(0,0) + clhs17*tangentxislave(0,1));
        const double clhs24 =     clhs23*tangentxislave(0,0);
        const double clhs25 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs26 =     X1(0,0) + u1(0,0);
        const double clhs27 =     X1(1,0) + u1(1,0);
        const double clhs28 =     X2(0,0) + u2(0,0);
        const double clhs29 =     X2(1,0) + u2(1,0);
        const double clhs30 =     X1(0,1) + u1(0,1);
        const double clhs31 =     X1(1,1) + u1(1,1);
        const double clhs32 =     X2(0,1) + u2(0,1);
        const double clhs33 =     X2(1,1) + u2(1,1);
        const double clhs34 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs28 - clhs11*clhs29 + clhs26*clhs6 + clhs27*clhs8) + normalslave(0,1)*(-clhs0*clhs32 - clhs11*clhs33 + clhs30*clhs6 + clhs31*clhs8));
        const double clhs35 =     -clhs25 + clhs34;
        const double clhs36 =     clhs35*normalslave(0,0);
        const double clhs37 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs38 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs39 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs40 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs41 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs42 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs43 =     penalty_parameter*(normalslave(1,0)*(clhs26*clhs40 + clhs27*clhs41 - clhs28*clhs37 - clhs29*clhs42) + normalslave(1,1)*(clhs30*clhs40 + clhs31*clhs41 - clhs32*clhs37 - clhs33*clhs42));
        const double clhs44 =     -clhs39 + clhs43;
        const double clhs45 =     clhs44*normalslave(1,0);
        const double clhs46 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs48 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs49 =     -clhs1*clhs9 - clhs10*clhs48 + clhs46*clhs5 + clhs47*clhs7;
        const double clhs50 =     -clhs1*clhs15 + clhs13*clhs46 + clhs14*clhs47 - clhs16*clhs48;
        const double clhs51 =     clhs49*tangentetaslave(0,0) + clhs50*tangentetaslave(0,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentetaslave(0,0);
        const double clhs53 =     clhs49*tangentxislave(0,0) + clhs50*tangentxislave(0,1);
        const double clhs54 =     clhs53*penalty_parameter*tangentxislave(0,0);
        const double clhs55 =     normalslave(0,1)*(-clhs1*clhs32 + clhs30*clhs46 + clhs31*clhs47 - clhs33*clhs48);
        const double clhs56 =     normalslave(0,0)*(clhs0 + clhs1*clhs28 - clhs26*clhs46 - clhs27*clhs47 + clhs29*clhs48);
        const double clhs57 =     -clhs55 + clhs56;
        const double clhs58 =     clhs57*normalslave(0,0)*penalty_parameter;
        const double clhs59 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs60 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs61 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs62 =     normalslave(1,1)*(clhs30*clhs59 + clhs31*clhs60 - clhs32*clhs38 - clhs33*clhs61);
        const double clhs63 =     normalslave(1,0)*(-clhs26*clhs59 - clhs27*clhs60 + clhs28*clhs38 + clhs29*clhs61 + clhs37);
        const double clhs64 =     -clhs62 + clhs63;
        const double clhs65 =     clhs64*normalslave(1,0)*penalty_parameter;
        const double clhs66 =     lm(1,0)*tangentetaslave(1,0);
        const double clhs67 =     lm(1,1)*tangentetaslave(1,1);
        const double clhs68 =     clhs66 + clhs67;
        const double clhs69 =     lm(1,0)*tangentxislave(1,0);
        const double clhs70 =     lm(1,1)*tangentxislave(1,1);
        const double clhs71 =     clhs69 + clhs70;
        const double clhs72 =     clhs68*tangentetaslave(1,0) + clhs71*tangentxislave(1,0);
        const double clhs73 =     std::pow(fabs(clhs22*tangentxislave(0,0) + clhs4*tangentetaslave(0,0)), 2) + std::pow(fabs(clhs22*tangentxislave(0,1) + clhs4*tangentetaslave(0,1)), 2);
        const double clhs74 =     std::pow(clhs73, -1.0L/2.0L);
        const double clhs75 =     clhs68*tangentetaslave(1,1) + clhs71*tangentxislave(1,1);
        const double clhs76 =     std::pow(fabs(clhs72), 2) + std::pow(fabs(clhs75), 2);
        const double clhs77 =     std::pow(clhs76, -1.0L/2.0L);
        const double clhs78 =     clhs44*clhs72*clhs74*clhs77*mu[1];
        const double clhs79 =     clhs64*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs80 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs81 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs82 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs85 =     -clhs10*clhs84 + clhs5*clhs82 + clhs7*clhs83 - clhs80*clhs9;
        const double clhs86 =     clhs13*clhs82 + clhs14*clhs83 - clhs15*clhs80 - clhs16*clhs84;
        const double clhs87 =     clhs85*tangentetaslave(0,0) + clhs86*tangentetaslave(0,1);
        const double clhs88 =     clhs87*penalty_parameter*tangentetaslave(0,0);
        const double clhs89 =     clhs85*tangentxislave(0,0) + clhs86*tangentxislave(0,1);
        const double clhs90 =     clhs89*penalty_parameter*tangentxislave(0,0);
        const double clhs91 =     normalslave(0,0)*(clhs26*clhs82 + clhs27*clhs83 - clhs28*clhs80 - clhs29*clhs84) - normalslave(0,1)*(clhs0 - clhs30*clhs82 - clhs31*clhs83 + clhs32*clhs80 + clhs33*clhs84);
        const double clhs92 =     clhs91*normalslave(0,0)*penalty_parameter;
        const double clhs93 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs94 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs95 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs96 =     normalslave(1,0)*(clhs26*clhs93 + clhs27*clhs94 - clhs28*clhs81 - clhs29*clhs95) - normalslave(1,1)*(-clhs30*clhs93 - clhs31*clhs94 + clhs32*clhs81 + clhs33*clhs95 + clhs37);
        const double clhs97 =     clhs96*normalslave(1,0)*penalty_parameter;
        const double clhs98 =     clhs72*clhs74*clhs77*clhs96*mu[1]*penalty_parameter;
        const double clhs99 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs100 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs101 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs102 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs103 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs104 =     -clhs10*clhs103 + clhs101*clhs5 + clhs102*clhs7 - clhs9*clhs99;
        const double clhs105 =     clhs101*clhs13 + clhs102*clhs14 - clhs103*clhs16 - clhs15*clhs99;
        const double clhs106 =     clhs104*tangentetaslave(0,0) + clhs105*tangentetaslave(0,1);
        const double clhs107 =     clhs106*penalty_parameter*tangentetaslave(0,0);
        const double clhs108 =     clhs104*tangentxislave(0,0) + clhs105*tangentxislave(0,1);
        const double clhs109 =     clhs108*penalty_parameter*tangentxislave(0,0);
        const double clhs110 =     normalslave(0,1)*(clhs101*clhs30 + clhs102*clhs31 - clhs103*clhs33 - clhs32*clhs99);
        const double clhs111 =     normalslave(0,0)*(-clhs101*clhs26 - clhs102*clhs27 + clhs103*clhs29 + clhs11 + clhs28*clhs99);
        const double clhs112 =     -clhs110 + clhs111;
        const double clhs113 =     clhs112*normalslave(0,0)*penalty_parameter;
        const double clhs114 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs115 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs116 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs117 =     normalslave(1,1)*(-clhs100*clhs32 + clhs114*clhs30 + clhs115*clhs31 - clhs116*clhs33);
        const double clhs118 =     normalslave(1,0)*(clhs100*clhs28 - clhs114*clhs26 - clhs115*clhs27 + clhs116*clhs29 + clhs42);
        const double clhs119 =     -clhs117 + clhs118;
        const double clhs120 =     clhs119*normalslave(1,0)*penalty_parameter;
        const double clhs121 =     clhs119*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs122 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs123 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs124 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs125 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs126 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     -clhs10*clhs126 - clhs122*clhs9 + clhs124*clhs5 + clhs125*clhs7;
        const double clhs128 =     -clhs122*clhs15 + clhs124*clhs13 + clhs125*clhs14 - clhs126*clhs16;
        const double clhs129 =     clhs127*tangentetaslave(0,0) + clhs128*tangentetaslave(0,1);
        const double clhs130 =     clhs129*penalty_parameter*tangentetaslave(0,0);
        const double clhs131 =     clhs127*tangentxislave(0,0) + clhs128*tangentxislave(0,1);
        const double clhs132 =     clhs131*penalty_parameter*tangentxislave(0,0);
        const double clhs133 =     normalslave(0,0)*(-clhs122*clhs28 + clhs124*clhs26 + clhs125*clhs27 - clhs126*clhs29) - normalslave(0,1)*(clhs11 + clhs122*clhs32 - clhs124*clhs30 - clhs125*clhs31 + clhs126*clhs33);
        const double clhs134 =     clhs133*normalslave(0,0)*penalty_parameter;
        const double clhs135 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs136 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs137 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs138 =     normalslave(1,0)*(-clhs123*clhs28 + clhs135*clhs26 + clhs136*clhs27 - clhs137*clhs29) - normalslave(1,1)*(clhs123*clhs32 - clhs135*clhs30 - clhs136*clhs31 + clhs137*clhs33 + clhs42);
        const double clhs139 =     clhs138*normalslave(1,0)*penalty_parameter;
        const double clhs140 =     clhs138*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs141 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs142 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs143 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs144 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs145 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs146 =     -clhs10*clhs145 - clhs141*clhs9 + clhs143*clhs5 + clhs144*clhs7;
        const double clhs147 =     clhs13*clhs143 + clhs14*clhs144 - clhs141*clhs15 - clhs145*clhs16;
        const double clhs148 =     clhs146*tangentetaslave(0,0) + clhs147*tangentetaslave(0,1);
        const double clhs149 =     clhs148*penalty_parameter*tangentetaslave(0,0);
        const double clhs150 =     clhs146*tangentxislave(0,0) + clhs147*tangentxislave(0,1);
        const double clhs151 =     clhs150*penalty_parameter*tangentxislave(0,0);
        const double clhs152 =     normalslave(0,0)*(-clhs141*clhs28 + clhs143*clhs26 + clhs144*clhs27 - clhs145*clhs29 + clhs6) + normalslave(0,1)*(-clhs141*clhs32 + clhs143*clhs30 + clhs144*clhs31 - clhs145*clhs33);
        const double clhs153 =     clhs152*normalslave(0,0)*penalty_parameter;
        const double clhs154 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs155 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs156 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs157 =     normalslave(1,0)*(-clhs142*clhs28 + clhs154*clhs26 + clhs155*clhs27 - clhs156*clhs29 + clhs40) + normalslave(1,1)*(-clhs142*clhs32 + clhs154*clhs30 + clhs155*clhs31 - clhs156*clhs33);
        const double clhs158 =     clhs157*normalslave(1,0)*penalty_parameter;
        const double clhs159 =     clhs157*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs160 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs161 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs162 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs163 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs164 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs165 =     -clhs10*clhs164 - clhs160*clhs9 + clhs162*clhs5 + clhs163*clhs7;
        const double clhs166 =     clhs13*clhs162 + clhs14*clhs163 - clhs15*clhs160 - clhs16*clhs164;
        const double clhs167 =     clhs165*tangentetaslave(0,0) + clhs166*tangentetaslave(0,1);
        const double clhs168 =     clhs167*penalty_parameter*tangentetaslave(0,0);
        const double clhs169 =     clhs165*tangentxislave(0,0) + clhs166*tangentxislave(0,1);
        const double clhs170 =     clhs169*penalty_parameter*tangentxislave(0,0);
        const double clhs171 =     normalslave(0,0)*(-clhs160*clhs28 + clhs162*clhs26 + clhs163*clhs27 - clhs164*clhs29) + normalslave(0,1)*(-clhs160*clhs32 + clhs162*clhs30 + clhs163*clhs31 - clhs164*clhs33 + clhs6);
        const double clhs172 =     clhs171*normalslave(0,0)*penalty_parameter;
        const double clhs173 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs174 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs175 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs176 =     normalslave(1,0)*(-clhs161*clhs28 + clhs173*clhs26 + clhs174*clhs27 - clhs175*clhs29) + normalslave(1,1)*(-clhs161*clhs32 + clhs173*clhs30 + clhs174*clhs31 - clhs175*clhs33 + clhs40);
        const double clhs177 =     clhs176*normalslave(1,0)*penalty_parameter;
        const double clhs178 =     clhs176*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs179 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs180 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs181 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs182 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs183 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs184 =     -clhs10*clhs183 - clhs179*clhs9 + clhs181*clhs5 + clhs182*clhs7;
        const double clhs185 =     clhs13*clhs181 + clhs14*clhs182 - clhs15*clhs179 - clhs16*clhs183;
        const double clhs186 =     clhs184*tangentetaslave(0,0) + clhs185*tangentetaslave(0,1);
        const double clhs187 =     clhs186*penalty_parameter*tangentetaslave(0,0);
        const double clhs188 =     clhs184*tangentxislave(0,0) + clhs185*tangentxislave(0,1);
        const double clhs189 =     clhs188*penalty_parameter*tangentxislave(0,0);
        const double clhs190 =     normalslave(0,0)*(-clhs179*clhs28 + clhs181*clhs26 + clhs182*clhs27 - clhs183*clhs29 + clhs8) + normalslave(0,1)*(-clhs179*clhs32 + clhs181*clhs30 + clhs182*clhs31 - clhs183*clhs33);
        const double clhs191 =     clhs190*normalslave(0,0)*penalty_parameter;
        const double clhs192 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs193 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs194 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs195 =     normalslave(1,0)*(-clhs180*clhs28 + clhs192*clhs26 + clhs193*clhs27 - clhs194*clhs29 + clhs41) + normalslave(1,1)*(-clhs180*clhs32 + clhs192*clhs30 + clhs193*clhs31 - clhs194*clhs33);
        const double clhs196 =     clhs195*normalslave(1,0)*penalty_parameter;
        const double clhs197 =     clhs195*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs198 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs199 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs200 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs201 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs202 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs203 =     -clhs10*clhs202 - clhs198*clhs9 + clhs200*clhs5 + clhs201*clhs7;
        const double clhs204 =     clhs13*clhs200 + clhs14*clhs201 - clhs15*clhs198 - clhs16*clhs202;
        const double clhs205 =     clhs203*tangentetaslave(0,0) + clhs204*tangentetaslave(0,1);
        const double clhs206 =     clhs205*penalty_parameter*tangentetaslave(0,0);
        const double clhs207 =     clhs203*tangentxislave(0,0) + clhs204*tangentxislave(0,1);
        const double clhs208 =     clhs207*penalty_parameter*tangentxislave(0,0);
        const double clhs209 =     normalslave(0,0)*(-clhs198*clhs28 + clhs200*clhs26 + clhs201*clhs27 - clhs202*clhs29) + normalslave(0,1)*(-clhs198*clhs32 + clhs200*clhs30 + clhs201*clhs31 - clhs202*clhs33 + clhs8);
        const double clhs210 =     clhs209*normalslave(0,0)*penalty_parameter;
        const double clhs211 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs212 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs213 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs214 =     normalslave(1,0)*(-clhs199*clhs28 + clhs211*clhs26 + clhs212*clhs27 - clhs213*clhs29) + normalslave(1,1)*(-clhs199*clhs32 + clhs211*clhs30 + clhs212*clhs31 - clhs213*clhs33 + clhs41);
        const double clhs215 =     clhs214*normalslave(1,0)*penalty_parameter;
        const double clhs216 =     clhs214*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs217 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs218 =     scale_factor*std::pow(tangentetaslave(0,0), 2);
        const double clhs219 =     scale_factor*std::pow(tangentxislave(0,0), 2);
        const double clhs220 =     std::pow(clhs73, -3.0L/2.0L);
        const double clhs221 =     re(tangentetaslave(0,0)); // RE(TANGENTETASLAVE(0,0))
        const double clhs222 =     im(clhs2); // IM(CLHS2)
        const double clhs223 =     Derivative(im(clhs2), lm(0,0)); // DERIVATIVE(IM(CLHS2), LM(0,0))
        const double clhs224 =     re(tangentxislave(0,0)); // RE(TANGENTXISLAVE(0,0))
        const double clhs225 =     im(clhs20); // IM(CLHS20)
        const double clhs226 =     Derivative(im(clhs20), lm(0,0)); // DERIVATIVE(IM(CLHS20), LM(0,0))
        const double clhs227 =     im(tangentetaslave(0,0)); // IM(TANGENTETASLAVE(0,0))
        const double clhs228 =     re(clhs2); // RE(CLHS2)
        const double clhs229 =     Derivative(re(clhs2), lm(0,0)); // DERIVATIVE(RE(CLHS2), LM(0,0))
        const double clhs230 =     im(tangentxislave(0,0)); // IM(TANGENTXISLAVE(0,0))
        const double clhs231 =     re(clhs20); // RE(CLHS20)
        const double clhs232 =     Derivative(re(clhs20), lm(0,0)); // DERIVATIVE(RE(CLHS20), LM(0,0))
        const double clhs233 =     re(clhs3); // RE(CLHS3)
        const double clhs234 =     clhs228 + clhs233;
        const double clhs235 =     re(clhs21); // RE(CLHS21)
        const double clhs236 =     clhs231 + clhs235;
        const double clhs237 =     im(clhs3); // IM(CLHS3)
        const double clhs238 =     clhs222 + clhs237;
        const double clhs239 =     im(clhs21); // IM(CLHS21)
        const double clhs240 =     clhs225 + clhs239;
        const double clhs241 =     clhs221*clhs238 + clhs224*clhs240 + clhs227*clhs234 + clhs230*clhs236;
        const double clhs242 =     re(tangentetaslave(0,1)); // RE(TANGENTETASLAVE(0,1))
        const double clhs243 =     re(tangentxislave(0,1)); // RE(TANGENTXISLAVE(0,1))
        const double clhs244 =     im(tangentetaslave(0,1)); // IM(TANGENTETASLAVE(0,1))
        const double clhs245 =     im(tangentxislave(0,1)); // IM(TANGENTXISLAVE(0,1))
        const double clhs246 =     clhs234*clhs244 + clhs236*clhs245 + clhs238*clhs242 + clhs240*clhs243;
        const double clhs247 =     clhs221*clhs234 + clhs224*clhs236 - clhs227*clhs238 - clhs230*clhs240;
        const double clhs248 =     clhs234*clhs242 + clhs236*clhs243 - clhs238*clhs244 - clhs240*clhs245;
        const double clhs249 =     clhs241*(clhs221*clhs223 + clhs224*clhs226 + clhs227*clhs229 + clhs230*clhs232) + clhs246*(clhs223*clhs242 + clhs226*clhs243 + clhs229*clhs244 + clhs232*clhs245) + clhs247*(clhs221*clhs229 - clhs223*clhs227 + clhs224*clhs232 - clhs226*clhs230) + clhs248*(-clhs223*clhs244 - clhs226*clhs245 + clhs229*clhs242 + clhs232*clhs243);
        const double clhs250 =     clhs220*clhs249*clhs44*clhs72*clhs77*mu[1];
        const double clhs251 =     normalslave(0,0)*normalslave(0,1)*scale_factor;
        const double clhs252 =     scale_factor*tangentetaslave(0,0)*tangentetaslave(0,1);
        const double clhs253 =     scale_factor*tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs254 =     clhs0*clhs251 + clhs0*clhs252 + clhs0*clhs253;
        const double clhs255 =     Derivative(im(clhs3), lm(0,1)); // DERIVATIVE(IM(CLHS3), LM(0,1))
        const double clhs256 =     Derivative(im(clhs21), lm(0,1)); // DERIVATIVE(IM(CLHS21), LM(0,1))
        const double clhs257 =     Derivative(re(clhs3), lm(0,1)); // DERIVATIVE(RE(CLHS3), LM(0,1))
        const double clhs258 =     Derivative(re(clhs21), lm(0,1)); // DERIVATIVE(RE(CLHS21), LM(0,1))
        const double clhs259 =     clhs241*(clhs221*clhs255 + clhs224*clhs256 + clhs227*clhs257 + clhs230*clhs258) + clhs246*(clhs242*clhs255 + clhs243*clhs256 + clhs244*clhs257 + clhs245*clhs258) + clhs247*(clhs221*clhs257 + clhs224*clhs258 - clhs227*clhs255 - clhs230*clhs256) + clhs248*(clhs242*clhs257 + clhs243*clhs258 - clhs244*clhs255 - clhs245*clhs256);
        const double clhs260 =     clhs220*clhs259*clhs44*clhs72*clhs77*mu[1];
        const double clhs261 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs262 =     clhs74*clhs77*mu[1]*normalslave(1,0)*scale_factor;
        const double clhs263 =     clhs262*clhs72;
        const double clhs264 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs265 =     clhs264*clhs74*clhs77*mu[1];
        const double clhs266 =     clhs39 - clhs43;
        const double clhs267 =     std::pow(clhs76, -3.0L/2.0L);
        const double clhs268 =     clhs266*clhs267*clhs72*clhs74*mu[1];
        const double clhs269 =     re(tangentetaslave(1,0)); // RE(TANGENTETASLAVE(1,0))
        const double clhs270 =     im(clhs66); // IM(CLHS66)
        const double clhs271 =     Derivative(im(clhs66), lm(1,0)); // DERIVATIVE(IM(CLHS66), LM(1,0))
        const double clhs272 =     re(tangentxislave(1,0)); // RE(TANGENTXISLAVE(1,0))
        const double clhs273 =     im(clhs69); // IM(CLHS69)
        const double clhs274 =     Derivative(im(clhs69), lm(1,0)); // DERIVATIVE(IM(CLHS69), LM(1,0))
        const double clhs275 =     im(tangentetaslave(1,0)); // IM(TANGENTETASLAVE(1,0))
        const double clhs276 =     re(clhs66); // RE(CLHS66)
        const double clhs277 =     Derivative(re(clhs66), lm(1,0)); // DERIVATIVE(RE(CLHS66), LM(1,0))
        const double clhs278 =     im(tangentxislave(1,0)); // IM(TANGENTXISLAVE(1,0))
        const double clhs279 =     re(clhs69); // RE(CLHS69)
        const double clhs280 =     Derivative(re(clhs69), lm(1,0)); // DERIVATIVE(RE(CLHS69), LM(1,0))
        const double clhs281 =     re(clhs67); // RE(CLHS67)
        const double clhs282 =     clhs276 + clhs281;
        const double clhs283 =     re(clhs70); // RE(CLHS70)
        const double clhs284 =     clhs279 + clhs283;
        const double clhs285 =     im(clhs67); // IM(CLHS67)
        const double clhs286 =     clhs270 + clhs285;
        const double clhs287 =     im(clhs70); // IM(CLHS70)
        const double clhs288 =     clhs273 + clhs287;
        const double clhs289 =     clhs269*clhs286 + clhs272*clhs288 + clhs275*clhs282 + clhs278*clhs284;
        const double clhs290 =     re(tangentetaslave(1,1)); // RE(TANGENTETASLAVE(1,1))
        const double clhs291 =     re(tangentxislave(1,1)); // RE(TANGENTXISLAVE(1,1))
        const double clhs292 =     im(tangentetaslave(1,1)); // IM(TANGENTETASLAVE(1,1))
        const double clhs293 =     im(tangentxislave(1,1)); // IM(TANGENTXISLAVE(1,1))
        const double clhs294 =     clhs282*clhs292 + clhs284*clhs293 + clhs286*clhs290 + clhs288*clhs291;
        const double clhs295 =     clhs269*clhs282 + clhs272*clhs284 - clhs275*clhs286 - clhs278*clhs288;
        const double clhs296 =     clhs282*clhs290 + clhs284*clhs291 - clhs286*clhs292 - clhs288*clhs293;
        const double clhs297 =     clhs289*(clhs269*clhs271 + clhs272*clhs274 + clhs275*clhs277 + clhs278*clhs280) + clhs294*(clhs271*clhs290 + clhs274*clhs291 + clhs277*clhs292 + clhs280*clhs293) + clhs295*(clhs269*clhs277 - clhs271*clhs275 + clhs272*clhs280 - clhs274*clhs278) + clhs296*(-clhs271*clhs292 - clhs274*clhs293 + clhs277*clhs290 + clhs280*clhs291);
        const double clhs298 =     clhs261 - clhs263 - clhs265*clhs266 + clhs268*clhs297;
        const double clhs299 =     normalslave(1,1)*(normalslave(1,0)*scale_factor);
        const double clhs300 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs301 =     clhs300*clhs74*clhs77*mu[1];
        const double clhs302 =     -clhs266*clhs301 + clhs299;
        const double clhs303 =     clhs74*clhs77*mu[1]*normalslave(1,1)*scale_factor;
        const double clhs304 =     clhs303*clhs72;
        const double clhs305 =     Derivative(im(clhs67), lm(1,1)); // DERIVATIVE(IM(CLHS67), LM(1,1))
        const double clhs306 =     Derivative(im(clhs70), lm(1,1)); // DERIVATIVE(IM(CLHS70), LM(1,1))
        const double clhs307 =     Derivative(re(clhs67), lm(1,1)); // DERIVATIVE(RE(CLHS67), LM(1,1))
        const double clhs308 =     Derivative(re(clhs70), lm(1,1)); // DERIVATIVE(RE(CLHS70), LM(1,1))
        const double clhs309 =     clhs289*(clhs269*clhs305 + clhs272*clhs306 + clhs275*clhs307 + clhs278*clhs308) + clhs294*(clhs290*clhs305 + clhs291*clhs306 + clhs292*clhs307 + clhs293*clhs308) + clhs295*(clhs269*clhs307 + clhs272*clhs308 - clhs275*clhs305 - clhs278*clhs306) + clhs296*(clhs290*clhs307 + clhs291*clhs308 - clhs292*clhs305 - clhs293*clhs306);
        const double clhs310 =     clhs268*clhs309 + clhs302 - clhs304;
        const double clhs311 =     clhs18*tangentetaslave(0,1);
        const double clhs312 =     clhs23*tangentxislave(0,1);
        const double clhs313 =     clhs35*normalslave(0,1);
        const double clhs314 =     clhs44*normalslave(1,1);
        const double clhs315 =     clhs51*penalty_parameter*tangentetaslave(0,1);
        const double clhs316 =     clhs53*penalty_parameter*tangentxislave(0,1);
        const double clhs317 =     clhs57*normalslave(0,1)*penalty_parameter;
        const double clhs318 =     clhs64*normalslave(1,1)*penalty_parameter;
        const double clhs319 =     clhs44*clhs74*clhs75*clhs77*mu[1];
        const double clhs320 =     clhs64*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs321 =     clhs87*penalty_parameter*tangentetaslave(0,1);
        const double clhs322 =     clhs89*penalty_parameter*tangentxislave(0,1);
        const double clhs323 =     clhs91*normalslave(0,1)*penalty_parameter;
        const double clhs324 =     clhs96*normalslave(1,1)*penalty_parameter;
        const double clhs325 =     clhs74*clhs75*clhs77*clhs96*mu[1]*penalty_parameter;
        const double clhs326 =     clhs106*penalty_parameter*tangentetaslave(0,1);
        const double clhs327 =     clhs108*penalty_parameter*tangentxislave(0,1);
        const double clhs328 =     clhs112*normalslave(0,1)*penalty_parameter;
        const double clhs329 =     clhs119*normalslave(1,1)*penalty_parameter;
        const double clhs330 =     clhs119*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs331 =     clhs129*penalty_parameter*tangentetaslave(0,1);
        const double clhs332 =     clhs131*penalty_parameter*tangentxislave(0,1);
        const double clhs333 =     clhs133*normalslave(0,1)*penalty_parameter;
        const double clhs334 =     clhs138*normalslave(1,1)*penalty_parameter;
        const double clhs335 =     clhs138*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs336 =     clhs148*penalty_parameter*tangentetaslave(0,1);
        const double clhs337 =     clhs150*penalty_parameter*tangentxislave(0,1);
        const double clhs338 =     clhs152*normalslave(0,1)*penalty_parameter;
        const double clhs339 =     clhs157*normalslave(1,1)*penalty_parameter;
        const double clhs340 =     clhs157*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs341 =     clhs167*penalty_parameter*tangentetaslave(0,1);
        const double clhs342 =     clhs169*penalty_parameter*tangentxislave(0,1);
        const double clhs343 =     clhs171*normalslave(0,1)*penalty_parameter;
        const double clhs344 =     clhs176*normalslave(1,1)*penalty_parameter;
        const double clhs345 =     clhs176*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs346 =     clhs186*penalty_parameter*tangentetaslave(0,1);
        const double clhs347 =     clhs188*penalty_parameter*tangentxislave(0,1);
        const double clhs348 =     clhs190*normalslave(0,1)*penalty_parameter;
        const double clhs349 =     clhs195*normalslave(1,1)*penalty_parameter;
        const double clhs350 =     clhs195*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs351 =     clhs205*penalty_parameter*tangentetaslave(0,1);
        const double clhs352 =     clhs207*penalty_parameter*tangentxislave(0,1);
        const double clhs353 =     clhs209*normalslave(0,1)*penalty_parameter;
        const double clhs354 =     clhs214*normalslave(1,1)*penalty_parameter;
        const double clhs355 =     clhs214*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs356 =     clhs220*clhs249*clhs44*clhs75*clhs77*mu[1];
        const double clhs357 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs358 =     scale_factor*std::pow(tangentetaslave(0,1), 2);
        const double clhs359 =     scale_factor*std::pow(tangentxislave(0,1), 2);
        const double clhs360 =     clhs220*clhs259*clhs44*clhs75*clhs77*mu[1];
        const double clhs361 =     clhs262*clhs75;
        const double clhs362 =     clhs266*clhs267*clhs74*clhs75*mu[1];
        const double clhs363 =     clhs297*clhs362 + clhs302 - clhs361;
        const double clhs364 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs365 =     clhs303*clhs75;
        const double clhs366 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs367 =     clhs366*clhs74*clhs77*mu[1];
        const double clhs368 =     -clhs266*clhs367 + clhs309*clhs362 + clhs364 - clhs365;
        const double clhs369 =     clhs11*clhs251 + clhs11*clhs252 + clhs11*clhs253;
        const double clhs370 =     clhs25 - clhs34;
        const double clhs371 =     clhs370*normalslave(0,0);
        const double clhs372 =     clhs266*normalslave(1,0);
        const double clhs373 =     clhs55 - clhs56;
        const double clhs374 =     clhs373*normalslave(0,0)*penalty_parameter;
        const double clhs375 =     clhs62 - clhs63;
        const double clhs376 =     clhs375*normalslave(1,0)*penalty_parameter;
        const double clhs377 =     clhs266*clhs72*clhs74*clhs77*mu[1];
        const double clhs378 =     clhs375*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs379 =     clhs110 - clhs111;
        const double clhs380 =     clhs379*normalslave(0,0)*penalty_parameter;
        const double clhs381 =     clhs117 - clhs118;
        const double clhs382 =     clhs381*normalslave(1,0)*penalty_parameter;
        const double clhs383 =     clhs381*clhs72*clhs74*clhs77*mu[1]*penalty_parameter;
        const double clhs384 =     clhs220*clhs249*clhs266*clhs72*clhs77*mu[1];
        const double clhs385 =     clhs251*clhs6 + clhs252*clhs6 + clhs253*clhs6;
        const double clhs386 =     clhs220*clhs259*clhs266*clhs72*clhs77*mu[1];
        const double clhs387 =     clhs267*clhs44*clhs72*clhs74*mu[1];
        const double clhs388 =     clhs263 - clhs265*clhs44 + clhs297*clhs387;
        const double clhs389 =     -clhs261 + clhs388;
        const double clhs390 =     -clhs301*clhs44;
        const double clhs391 =     -clhs299 + clhs390;
        const double clhs392 =     clhs304 + clhs309*clhs387;
        const double clhs393 =     clhs391 + clhs392;
        const double clhs394 =     clhs370*normalslave(0,1);
        const double clhs395 =     clhs266*normalslave(1,1);
        const double clhs396 =     clhs373*normalslave(0,1)*penalty_parameter;
        const double clhs397 =     clhs375*normalslave(1,1)*penalty_parameter;
        const double clhs398 =     clhs266*clhs74*clhs75*clhs77*mu[1];
        const double clhs399 =     clhs375*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs400 =     clhs379*normalslave(0,1)*penalty_parameter;
        const double clhs401 =     clhs381*normalslave(1,1)*penalty_parameter;
        const double clhs402 =     clhs381*clhs74*clhs75*clhs77*mu[1]*penalty_parameter;
        const double clhs403 =     clhs220*clhs249*clhs266*clhs75*clhs77*mu[1];
        const double clhs404 =     clhs220*clhs259*clhs266*clhs75*clhs77*mu[1];
        const double clhs405 =     clhs267*clhs44*clhs74*clhs75*mu[1];
        const double clhs406 =     clhs297*clhs405 + clhs361;
        const double clhs407 =     clhs391 + clhs406;
        const double clhs408 =     clhs309*clhs405 + clhs365 - clhs367*clhs44;
        const double clhs409 =     -clhs364 + clhs408;
        const double clhs410 =     clhs251*clhs8 + clhs252*clhs8 + clhs253*clhs8;
        const double clhs411 =     clhs375*scale_factor;
        const double clhs412 =     clhs264*clhs72;
        const double clhs413 =     0.5*clhs74*clhs77*mu[1];
        const double clhs414 =     clhs300*clhs75;
        const double clhs415 =     -clhs412*clhs413 - clhs413*clhs414 + normalslave(1,0);
        const double clhs416 =     clhs96*scale_factor;
        const double clhs417 =     clhs381*scale_factor;
        const double clhs418 =     clhs138*scale_factor;
        const double clhs419 =     clhs157*scale_factor;
        const double clhs420 =     clhs176*scale_factor;
        const double clhs421 =     clhs195*scale_factor;
        const double clhs422 =     clhs214*scale_factor;
        const double clhs423 =     1.0/penalty_parameter;
        const double clhs424 =     0.5*clhs220*clhs266*clhs423*clhs77*mu[1]*scale_factor*(clhs412 + clhs414);
        const double clhs425 =     0.5*clhs423*scale_factor;
        const double clhs426 =     clhs264*scale_factor + clhs388;
        const double clhs427 =     clhs300*scale_factor + clhs390;
        const double clhs428 =     clhs406 + clhs427;
        const double clhs429 =     clhs392 + clhs427;
        const double clhs430 =     clhs366*scale_factor + clhs408;
        const double clhs431 =     clhs366*clhs75;
        const double clhs432 =     clhs300*clhs72;
        const double clhs433 =     -clhs413*clhs431 - clhs413*clhs432 + normalslave(1,1);
        const double clhs434 =     0.5*clhs220*clhs266*clhs423*clhs77*mu[1]*scale_factor*(clhs431 + clhs432);
    
        lhs(0,0)=clhs0*clhs52 + clhs0*clhs54 + clhs0*clhs58 + clhs1*clhs19 + clhs1*clhs24 - clhs1*clhs36 + clhs37*clhs65 - clhs37*clhs79 - clhs38*clhs45 + clhs38*clhs78;
        lhs(0,1)=clhs0*clhs88 + clhs0*clhs90 - clhs0*clhs92 + clhs19*clhs80 + clhs24*clhs80 - clhs36*clhs80 - clhs37*clhs97 + clhs37*clhs98 - clhs45*clhs81 + clhs78*clhs81;
        lhs(0,2)=clhs0*clhs107 + clhs0*clhs109 + clhs0*clhs113 - clhs100*clhs45 + clhs100*clhs78 + clhs120*clhs37 - clhs121*clhs37 + clhs19*clhs99 + clhs24*clhs99 - clhs36*clhs99;
        lhs(0,3)=clhs0*clhs130 + clhs0*clhs132 - clhs0*clhs134 + clhs122*clhs19 + clhs122*clhs24 - clhs122*clhs36 - clhs123*clhs45 + clhs123*clhs78 - clhs139*clhs37 + clhs140*clhs37;
        lhs(0,4)=clhs0*clhs149 + clhs0*clhs151 - clhs0*clhs153 + clhs141*clhs19 + clhs141*clhs24 - clhs141*clhs36 - clhs142*clhs45 + clhs142*clhs78 - clhs158*clhs37 + clhs159*clhs37;
        lhs(0,5)=clhs0*clhs168 + clhs0*clhs170 - clhs0*clhs172 + clhs160*clhs19 + clhs160*clhs24 - clhs160*clhs36 - clhs161*clhs45 + clhs161*clhs78 - clhs177*clhs37 + clhs178*clhs37;
        lhs(0,6)=clhs0*clhs187 + clhs0*clhs189 - clhs0*clhs191 + clhs179*clhs19 + clhs179*clhs24 - clhs179*clhs36 - clhs180*clhs45 + clhs180*clhs78 - clhs196*clhs37 + clhs197*clhs37;
        lhs(0,7)=clhs0*clhs206 + clhs0*clhs208 - clhs0*clhs210 + clhs19*clhs198 + clhs198*clhs24 - clhs198*clhs36 - clhs199*clhs45 + clhs199*clhs78 - clhs215*clhs37 + clhs216*clhs37;
        lhs(0,8)=clhs0*clhs217 + clhs0*clhs218 + clhs0*clhs219 - clhs250*clhs37;
        lhs(0,9)=clhs254 - clhs260*clhs37;
        lhs(0,10)=clhs298*clhs37;
        lhs(0,11)=clhs310*clhs37;
        lhs(1,0)=clhs0*clhs315 + clhs0*clhs316 + clhs0*clhs317 + clhs1*clhs311 + clhs1*clhs312 - clhs1*clhs313 - clhs314*clhs38 + clhs318*clhs37 + clhs319*clhs38 - clhs320*clhs37;
        lhs(1,1)=clhs0*clhs321 + clhs0*clhs322 - clhs0*clhs323 + clhs311*clhs80 + clhs312*clhs80 - clhs313*clhs80 - clhs314*clhs81 + clhs319*clhs81 - clhs324*clhs37 + clhs325*clhs37;
        lhs(1,2)=clhs0*clhs326 + clhs0*clhs327 + clhs0*clhs328 - clhs100*clhs314 + clhs100*clhs319 + clhs311*clhs99 + clhs312*clhs99 - clhs313*clhs99 + clhs329*clhs37 - clhs330*clhs37;
        lhs(1,3)=clhs0*clhs331 + clhs0*clhs332 - clhs0*clhs333 + clhs122*clhs311 + clhs122*clhs312 - clhs122*clhs313 - clhs123*clhs314 + clhs123*clhs319 - clhs334*clhs37 + clhs335*clhs37;
        lhs(1,4)=clhs0*clhs336 + clhs0*clhs337 - clhs0*clhs338 + clhs141*clhs311 + clhs141*clhs312 - clhs141*clhs313 - clhs142*clhs314 + clhs142*clhs319 - clhs339*clhs37 + clhs340*clhs37;
        lhs(1,5)=clhs0*clhs341 + clhs0*clhs342 - clhs0*clhs343 + clhs160*clhs311 + clhs160*clhs312 - clhs160*clhs313 - clhs161*clhs314 + clhs161*clhs319 - clhs344*clhs37 + clhs345*clhs37;
        lhs(1,6)=clhs0*clhs346 + clhs0*clhs347 - clhs0*clhs348 + clhs179*clhs311 + clhs179*clhs312 - clhs179*clhs313 - clhs180*clhs314 + clhs180*clhs319 - clhs349*clhs37 + clhs350*clhs37;
        lhs(1,7)=clhs0*clhs351 + clhs0*clhs352 - clhs0*clhs353 + clhs198*clhs311 + clhs198*clhs312 - clhs198*clhs313 - clhs199*clhs314 + clhs199*clhs319 - clhs354*clhs37 + clhs355*clhs37;
        lhs(1,8)=clhs254 - clhs356*clhs37;
        lhs(1,9)=clhs0*clhs357 + clhs0*clhs358 + clhs0*clhs359 - clhs360*clhs37;
        lhs(1,10)=clhs363*clhs37;
        lhs(1,11)=clhs368*clhs37;
        lhs(2,0)=clhs11*clhs52 + clhs11*clhs54 + clhs11*clhs58 + clhs19*clhs48 + clhs24*clhs48 - clhs36*clhs48 + clhs42*clhs65 - clhs42*clhs79 - clhs45*clhs61 + clhs61*clhs78;
        lhs(2,1)=clhs11*clhs88 + clhs11*clhs90 - clhs11*clhs92 + clhs19*clhs84 + clhs24*clhs84 - clhs36*clhs84 - clhs42*clhs97 + clhs42*clhs98 - clhs45*clhs95 + clhs78*clhs95;
        lhs(2,2)=clhs103*clhs19 + clhs103*clhs24 - clhs103*clhs36 + clhs107*clhs11 + clhs109*clhs11 + clhs11*clhs113 - clhs116*clhs45 + clhs116*clhs78 + clhs120*clhs42 - clhs121*clhs42;
        lhs(2,3)=clhs11*clhs130 + clhs11*clhs132 - clhs11*clhs134 + clhs126*clhs19 + clhs126*clhs24 - clhs126*clhs36 - clhs137*clhs45 + clhs137*clhs78 - clhs139*clhs42 + clhs140*clhs42;
        lhs(2,4)=clhs11*clhs149 + clhs11*clhs151 - clhs11*clhs153 + clhs145*clhs19 + clhs145*clhs24 - clhs145*clhs36 - clhs156*clhs45 + clhs156*clhs78 - clhs158*clhs42 + clhs159*clhs42;
        lhs(2,5)=clhs11*clhs168 + clhs11*clhs170 - clhs11*clhs172 + clhs164*clhs19 + clhs164*clhs24 - clhs164*clhs36 - clhs175*clhs45 + clhs175*clhs78 - clhs177*clhs42 + clhs178*clhs42;
        lhs(2,6)=clhs11*clhs187 + clhs11*clhs189 - clhs11*clhs191 + clhs183*clhs19 + clhs183*clhs24 - clhs183*clhs36 - clhs194*clhs45 + clhs194*clhs78 - clhs196*clhs42 + clhs197*clhs42;
        lhs(2,7)=clhs11*clhs206 + clhs11*clhs208 - clhs11*clhs210 + clhs19*clhs202 + clhs202*clhs24 - clhs202*clhs36 - clhs213*clhs45 + clhs213*clhs78 - clhs215*clhs42 + clhs216*clhs42;
        lhs(2,8)=clhs11*clhs217 + clhs11*clhs218 + clhs11*clhs219 - clhs250*clhs42;
        lhs(2,9)=-clhs260*clhs42 + clhs369;
        lhs(2,10)=clhs298*clhs42;
        lhs(2,11)=clhs310*clhs42;
        lhs(3,0)=clhs11*clhs315 + clhs11*clhs316 + clhs11*clhs317 + clhs311*clhs48 + clhs312*clhs48 - clhs313*clhs48 - clhs314*clhs61 + clhs318*clhs42 + clhs319*clhs61 - clhs320*clhs42;
        lhs(3,1)=clhs11*clhs321 + clhs11*clhs322 - clhs11*clhs323 + clhs311*clhs84 + clhs312*clhs84 - clhs313*clhs84 - clhs314*clhs95 + clhs319*clhs95 - clhs324*clhs42 + clhs325*clhs42;
        lhs(3,2)=clhs103*clhs311 + clhs103*clhs312 - clhs103*clhs313 + clhs11*clhs326 + clhs11*clhs327 + clhs11*clhs328 - clhs116*clhs314 + clhs116*clhs319 + clhs329*clhs42 - clhs330*clhs42;
        lhs(3,3)=clhs11*clhs331 + clhs11*clhs332 - clhs11*clhs333 + clhs126*clhs311 + clhs126*clhs312 - clhs126*clhs313 - clhs137*clhs314 + clhs137*clhs319 - clhs334*clhs42 + clhs335*clhs42;
        lhs(3,4)=clhs11*clhs336 + clhs11*clhs337 - clhs11*clhs338 + clhs145*clhs311 + clhs145*clhs312 - clhs145*clhs313 - clhs156*clhs314 + clhs156*clhs319 - clhs339*clhs42 + clhs340*clhs42;
        lhs(3,5)=clhs11*clhs341 + clhs11*clhs342 - clhs11*clhs343 + clhs164*clhs311 + clhs164*clhs312 - clhs164*clhs313 - clhs175*clhs314 + clhs175*clhs319 - clhs344*clhs42 + clhs345*clhs42;
        lhs(3,6)=clhs11*clhs346 + clhs11*clhs347 - clhs11*clhs348 + clhs183*clhs311 + clhs183*clhs312 - clhs183*clhs313 - clhs194*clhs314 + clhs194*clhs319 - clhs349*clhs42 + clhs350*clhs42;
        lhs(3,7)=clhs11*clhs351 + clhs11*clhs352 - clhs11*clhs353 + clhs202*clhs311 + clhs202*clhs312 - clhs202*clhs313 - clhs213*clhs314 + clhs213*clhs319 - clhs354*clhs42 + clhs355*clhs42;
        lhs(3,8)=-clhs356*clhs42 + clhs369;
        lhs(3,9)=clhs11*clhs357 + clhs11*clhs358 + clhs11*clhs359 - clhs360*clhs42;
        lhs(3,10)=clhs363*clhs42;
        lhs(3,11)=clhs368*clhs42;
        lhs(4,0)=-clhs19*clhs46 - clhs24*clhs46 - clhs371*clhs46 - clhs372*clhs59 + clhs374*clhs6 + clhs376*clhs40 + clhs377*clhs59 - clhs378*clhs40 - clhs52*clhs6 - clhs54*clhs6;
        lhs(4,1)=-clhs19*clhs82 - clhs24*clhs82 - clhs371*clhs82 - clhs372*clhs93 + clhs377*clhs93 + clhs40*clhs97 - clhs40*clhs98 - clhs6*clhs88 - clhs6*clhs90 + clhs6*clhs92;
        lhs(4,2)=-clhs101*clhs19 - clhs101*clhs24 - clhs101*clhs371 - clhs107*clhs6 - clhs109*clhs6 - clhs114*clhs372 + clhs114*clhs377 + clhs380*clhs6 + clhs382*clhs40 - clhs383*clhs40;
        lhs(4,3)=-clhs124*clhs19 - clhs124*clhs24 - clhs124*clhs371 - clhs130*clhs6 - clhs132*clhs6 + clhs134*clhs6 - clhs135*clhs372 + clhs135*clhs377 + clhs139*clhs40 - clhs140*clhs40;
        lhs(4,4)=-clhs143*clhs19 - clhs143*clhs24 - clhs143*clhs371 - clhs149*clhs6 - clhs151*clhs6 + clhs153*clhs6 - clhs154*clhs372 + clhs154*clhs377 + clhs158*clhs40 - clhs159*clhs40;
        lhs(4,5)=-clhs162*clhs19 - clhs162*clhs24 - clhs162*clhs371 - clhs168*clhs6 - clhs170*clhs6 + clhs172*clhs6 - clhs173*clhs372 + clhs173*clhs377 + clhs177*clhs40 - clhs178*clhs40;
        lhs(4,6)=-clhs181*clhs19 - clhs181*clhs24 - clhs181*clhs371 - clhs187*clhs6 - clhs189*clhs6 + clhs191*clhs6 - clhs192*clhs372 + clhs192*clhs377 + clhs196*clhs40 - clhs197*clhs40;
        lhs(4,7)=-clhs19*clhs200 - clhs200*clhs24 - clhs200*clhs371 - clhs206*clhs6 - clhs208*clhs6 + clhs210*clhs6 - clhs211*clhs372 + clhs211*clhs377 + clhs215*clhs40 - clhs216*clhs40;
        lhs(4,8)=-clhs217*clhs6 - clhs218*clhs6 - clhs219*clhs6 - clhs384*clhs40;
        lhs(4,9)=-clhs385 - clhs386*clhs40;
        lhs(4,10)=clhs389*clhs40;
        lhs(4,11)=clhs393*clhs40;
        lhs(5,0)=-clhs311*clhs46 - clhs312*clhs46 - clhs315*clhs6 - clhs316*clhs6 - clhs394*clhs46 - clhs395*clhs59 + clhs396*clhs6 + clhs397*clhs40 + clhs398*clhs59 - clhs399*clhs40;
        lhs(5,1)=-clhs311*clhs82 - clhs312*clhs82 - clhs321*clhs6 - clhs322*clhs6 + clhs323*clhs6 + clhs324*clhs40 - clhs325*clhs40 - clhs394*clhs82 - clhs395*clhs93 + clhs398*clhs93;
        lhs(5,2)=-clhs101*clhs311 - clhs101*clhs312 - clhs101*clhs394 - clhs114*clhs395 + clhs114*clhs398 - clhs326*clhs6 - clhs327*clhs6 + clhs40*clhs401 - clhs40*clhs402 + clhs400*clhs6;
        lhs(5,3)=-clhs124*clhs311 - clhs124*clhs312 - clhs124*clhs394 - clhs135*clhs395 + clhs135*clhs398 - clhs331*clhs6 - clhs332*clhs6 + clhs333*clhs6 + clhs334*clhs40 - clhs335*clhs40;
        lhs(5,4)=-clhs143*clhs311 - clhs143*clhs312 - clhs143*clhs394 - clhs154*clhs395 + clhs154*clhs398 - clhs336*clhs6 - clhs337*clhs6 + clhs338*clhs6 + clhs339*clhs40 - clhs340*clhs40;
        lhs(5,5)=-clhs162*clhs311 - clhs162*clhs312 - clhs162*clhs394 - clhs173*clhs395 + clhs173*clhs398 - clhs341*clhs6 - clhs342*clhs6 + clhs343*clhs6 + clhs344*clhs40 - clhs345*clhs40;
        lhs(5,6)=-clhs181*clhs311 - clhs181*clhs312 - clhs181*clhs394 - clhs192*clhs395 + clhs192*clhs398 - clhs346*clhs6 - clhs347*clhs6 + clhs348*clhs6 + clhs349*clhs40 - clhs350*clhs40;
        lhs(5,7)=-clhs200*clhs311 - clhs200*clhs312 - clhs200*clhs394 - clhs211*clhs395 + clhs211*clhs398 - clhs351*clhs6 - clhs352*clhs6 + clhs353*clhs6 + clhs354*clhs40 - clhs355*clhs40;
        lhs(5,8)=-clhs385 - clhs40*clhs403;
        lhs(5,9)=-clhs357*clhs6 - clhs358*clhs6 - clhs359*clhs6 - clhs40*clhs404;
        lhs(5,10)=clhs40*clhs407;
        lhs(5,11)=clhs40*clhs409;
        lhs(6,0)=-clhs19*clhs47 - clhs24*clhs47 - clhs371*clhs47 - clhs372*clhs60 + clhs374*clhs8 + clhs376*clhs41 + clhs377*clhs60 - clhs378*clhs41 - clhs52*clhs8 - clhs54*clhs8;
        lhs(6,1)=-clhs19*clhs83 - clhs24*clhs83 - clhs371*clhs83 - clhs372*clhs94 + clhs377*clhs94 + clhs41*clhs97 - clhs41*clhs98 - clhs8*clhs88 - clhs8*clhs90 + clhs8*clhs92;
        lhs(6,2)=-clhs102*clhs19 - clhs102*clhs24 - clhs102*clhs371 - clhs107*clhs8 - clhs109*clhs8 - clhs115*clhs372 + clhs115*clhs377 + clhs380*clhs8 + clhs382*clhs41 - clhs383*clhs41;
        lhs(6,3)=-clhs125*clhs19 - clhs125*clhs24 - clhs125*clhs371 - clhs130*clhs8 - clhs132*clhs8 + clhs134*clhs8 - clhs136*clhs372 + clhs136*clhs377 + clhs139*clhs41 - clhs140*clhs41;
        lhs(6,4)=-clhs144*clhs19 - clhs144*clhs24 - clhs144*clhs371 - clhs149*clhs8 - clhs151*clhs8 + clhs153*clhs8 - clhs155*clhs372 + clhs155*clhs377 + clhs158*clhs41 - clhs159*clhs41;
        lhs(6,5)=-clhs163*clhs19 - clhs163*clhs24 - clhs163*clhs371 - clhs168*clhs8 - clhs170*clhs8 + clhs172*clhs8 - clhs174*clhs372 + clhs174*clhs377 + clhs177*clhs41 - clhs178*clhs41;
        lhs(6,6)=-clhs182*clhs19 - clhs182*clhs24 - clhs182*clhs371 - clhs187*clhs8 - clhs189*clhs8 + clhs191*clhs8 - clhs193*clhs372 + clhs193*clhs377 + clhs196*clhs41 - clhs197*clhs41;
        lhs(6,7)=-clhs19*clhs201 - clhs201*clhs24 - clhs201*clhs371 - clhs206*clhs8 - clhs208*clhs8 + clhs210*clhs8 - clhs212*clhs372 + clhs212*clhs377 + clhs215*clhs41 - clhs216*clhs41;
        lhs(6,8)=-clhs217*clhs8 - clhs218*clhs8 - clhs219*clhs8 - clhs384*clhs41;
        lhs(6,9)=-clhs386*clhs41 - clhs410;
        lhs(6,10)=clhs389*clhs41;
        lhs(6,11)=clhs393*clhs41;
        lhs(7,0)=-clhs311*clhs47 - clhs312*clhs47 - clhs315*clhs8 - clhs316*clhs8 - clhs394*clhs47 - clhs395*clhs60 + clhs396*clhs8 + clhs397*clhs41 + clhs398*clhs60 - clhs399*clhs41;
        lhs(7,1)=-clhs311*clhs83 - clhs312*clhs83 - clhs321*clhs8 - clhs322*clhs8 + clhs323*clhs8 + clhs324*clhs41 - clhs325*clhs41 - clhs394*clhs83 - clhs395*clhs94 + clhs398*clhs94;
        lhs(7,2)=-clhs102*clhs311 - clhs102*clhs312 - clhs102*clhs394 - clhs115*clhs395 + clhs115*clhs398 - clhs326*clhs8 - clhs327*clhs8 + clhs400*clhs8 + clhs401*clhs41 - clhs402*clhs41;
        lhs(7,3)=-clhs125*clhs311 - clhs125*clhs312 - clhs125*clhs394 - clhs136*clhs395 + clhs136*clhs398 - clhs331*clhs8 - clhs332*clhs8 + clhs333*clhs8 + clhs334*clhs41 - clhs335*clhs41;
        lhs(7,4)=-clhs144*clhs311 - clhs144*clhs312 - clhs144*clhs394 - clhs155*clhs395 + clhs155*clhs398 - clhs336*clhs8 - clhs337*clhs8 + clhs338*clhs8 + clhs339*clhs41 - clhs340*clhs41;
        lhs(7,5)=-clhs163*clhs311 - clhs163*clhs312 - clhs163*clhs394 - clhs174*clhs395 + clhs174*clhs398 - clhs341*clhs8 - clhs342*clhs8 + clhs343*clhs8 + clhs344*clhs41 - clhs345*clhs41;
        lhs(7,6)=-clhs182*clhs311 - clhs182*clhs312 - clhs182*clhs394 - clhs193*clhs395 + clhs193*clhs398 - clhs346*clhs8 - clhs347*clhs8 + clhs348*clhs8 + clhs349*clhs41 - clhs350*clhs41;
        lhs(7,7)=-clhs201*clhs311 - clhs201*clhs312 - clhs201*clhs394 - clhs212*clhs395 + clhs212*clhs398 - clhs351*clhs8 - clhs352*clhs8 + clhs353*clhs8 + clhs354*clhs41 - clhs355*clhs41;
        lhs(7,8)=-clhs403*clhs41 - clhs410;
        lhs(7,9)=-clhs357*clhs8 - clhs358*clhs8 - clhs359*clhs8 - clhs404*clhs41;
        lhs(7,10)=clhs407*clhs41;
        lhs(7,11)=clhs409*clhs41;
        lhs(8,0)=scale_factor*(clhs373*normalslave(0,0) - clhs51*tangentetaslave(0,0) - clhs53*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs87*tangentetaslave(0,0) - clhs89*tangentxislave(0,0) + clhs91*normalslave(0,0));
        lhs(8,2)=scale_factor*(-clhs106*tangentetaslave(0,0) - clhs108*tangentxislave(0,0) + clhs379*normalslave(0,0));
        lhs(8,3)=scale_factor*(-clhs129*tangentetaslave(0,0) - clhs131*tangentxislave(0,0) + clhs133*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs148*tangentetaslave(0,0) - clhs150*tangentxislave(0,0) + clhs152*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs167*tangentetaslave(0,0) - clhs169*tangentxislave(0,0) + clhs171*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs186*tangentetaslave(0,0) - clhs188*tangentxislave(0,0) + clhs190*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs205*tangentetaslave(0,0) - clhs207*tangentxislave(0,0) + clhs209*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs373*normalslave(0,1) - clhs51*tangentetaslave(0,1) - clhs53*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs87*tangentetaslave(0,1) - clhs89*tangentxislave(0,1) + clhs91*normalslave(0,1));
        lhs(9,2)=scale_factor*(-clhs106*tangentetaslave(0,1) - clhs108*tangentxislave(0,1) + clhs379*normalslave(0,1));
        lhs(9,3)=scale_factor*(-clhs129*tangentetaslave(0,1) - clhs131*tangentxislave(0,1) + clhs133*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs148*tangentetaslave(0,1) - clhs150*tangentxislave(0,1) + clhs152*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs167*tangentetaslave(0,1) - clhs169*tangentxislave(0,1) + clhs171*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs186*tangentetaslave(0,1) - clhs188*tangentxislave(0,1) + clhs190*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs205*tangentetaslave(0,1) - clhs207*tangentxislave(0,1) + clhs209*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=clhs411*clhs415;
        lhs(10,1)=clhs415*clhs416;
        lhs(10,2)=clhs415*clhs417;
        lhs(10,3)=clhs415*clhs418;
        lhs(10,4)=clhs415*clhs419;
        lhs(10,5)=clhs415*clhs420;
        lhs(10,6)=clhs415*clhs421;
        lhs(10,7)=clhs415*clhs422;
        lhs(10,8)=-clhs249*clhs424;
        lhs(10,9)=-clhs259*clhs424;
        lhs(10,10)=clhs425*(clhs264*clhs426 + clhs300*clhs428);
        lhs(10,11)=clhs425*(clhs264*clhs429 + clhs300*clhs430);
        lhs(11,0)=clhs411*clhs433;
        lhs(11,1)=clhs416*clhs433;
        lhs(11,2)=clhs417*clhs433;
        lhs(11,3)=clhs418*clhs433;
        lhs(11,4)=clhs419*clhs433;
        lhs(11,5)=clhs420*clhs433;
        lhs(11,6)=clhs421*clhs433;
        lhs(11,7)=clhs422*clhs433;
        lhs(11,8)=-clhs249*clhs434;
        lhs(11,9)=-clhs259*clhs434;
        lhs(11,10)=clhs425*(clhs300*clhs426 + clhs366*clhs428);
        lhs(11,11)=clhs425*(clhs300*clhs429 + clhs366*clhs430);
    }
    else if (rActiveInactive == 6 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(1,1) + clhs9*tangentetaslave(1,0)) + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double clhs16 =     clhs15*tangentetaslave(1,0);
        const double clhs17 =     penalty_parameter*(clhs14*tangentxislave(1,1) + clhs9*tangentxislave(1,0)) + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double clhs18 =     clhs17*tangentxislave(1,0);
        const double clhs19 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs20 =     X1(0,0) + u1(0,0);
        const double clhs21 =     X1(1,0) + u1(1,0);
        const double clhs22 =     X2(0,0) + u2(0,0);
        const double clhs23 =     X2(1,0) + u2(1,0);
        const double clhs24 =     X1(0,1) + u1(0,1);
        const double clhs25 =     X1(1,1) + u1(1,1);
        const double clhs26 =     X2(0,1) + u2(0,1);
        const double clhs27 =     X2(1,1) + u2(1,1);
        const double clhs28 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs22 + clhs20*clhs3 + clhs21*clhs5 - clhs23*clhs8) + normalslave(1,1)*(-clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8));
        const double clhs29 =     -clhs19 + clhs28;
        const double clhs30 =     clhs29*normalslave(1,0);
        const double clhs31 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs32 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs33 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     -clhs1*clhs6 + clhs2*clhs31 + clhs32*clhs4 - clhs33*clhs7;
        const double clhs35 =     -clhs1*clhs12 + clhs10*clhs31 + clhs11*clhs32 - clhs13*clhs33;
        const double clhs36 =     clhs34*tangentetaslave(1,0) + clhs35*tangentetaslave(1,1);
        const double clhs37 =     clhs36*penalty_parameter*tangentetaslave(1,0);
        const double clhs38 =     clhs34*tangentxislave(1,0) + clhs35*tangentxislave(1,1);
        const double clhs39 =     clhs38*penalty_parameter*tangentxislave(1,0);
        const double clhs40 =     normalslave(1,1)*(-clhs1*clhs26 + clhs24*clhs31 + clhs25*clhs32 - clhs27*clhs33);
        const double clhs41 =     normalslave(1,0)*(clhs0 + clhs1*clhs22 - clhs20*clhs31 - clhs21*clhs32 + clhs23*clhs33);
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(1,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     clhs2*clhs45 + clhs4*clhs46 - clhs44*clhs6 - clhs47*clhs7;
        const double clhs49 =     clhs10*clhs45 + clhs11*clhs46 - clhs12*clhs44 - clhs13*clhs47;
        const double clhs50 =     clhs48*tangentetaslave(1,0) + clhs49*tangentetaslave(1,1);
        const double clhs51 =     clhs50*penalty_parameter*tangentetaslave(1,0);
        const double clhs52 =     clhs48*tangentxislave(1,0) + clhs49*tangentxislave(1,1);
        const double clhs53 =     clhs52*penalty_parameter*tangentxislave(1,0);
        const double clhs54 =     normalslave(1,0)*(clhs20*clhs45 + clhs21*clhs46 - clhs22*clhs44 - clhs23*clhs47) - normalslave(1,1)*(clhs0 - clhs24*clhs45 - clhs25*clhs46 + clhs26*clhs44 + clhs27*clhs47);
        const double clhs55 =     clhs54*normalslave(1,0)*penalty_parameter;
        const double clhs56 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs57 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs58 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs59 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs60 =     clhs2*clhs57 + clhs4*clhs58 - clhs56*clhs6 - clhs59*clhs7;
        const double clhs61 =     clhs10*clhs57 + clhs11*clhs58 - clhs12*clhs56 - clhs13*clhs59;
        const double clhs62 =     clhs60*tangentetaslave(1,0) + clhs61*tangentetaslave(1,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentetaslave(1,0);
        const double clhs64 =     clhs60*tangentxislave(1,0) + clhs61*tangentxislave(1,1);
        const double clhs65 =     clhs64*penalty_parameter*tangentxislave(1,0);
        const double clhs66 =     normalslave(1,1)*(clhs24*clhs57 + clhs25*clhs58 - clhs26*clhs56 - clhs27*clhs59);
        const double clhs67 =     normalslave(1,0)*(-clhs20*clhs57 - clhs21*clhs58 + clhs22*clhs56 + clhs23*clhs59 + clhs8);
        const double clhs68 =     -clhs66 + clhs67;
        const double clhs69 =     clhs68*normalslave(1,0)*penalty_parameter;
        const double clhs70 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs71 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs72 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs73 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs74 =     clhs2*clhs71 + clhs4*clhs72 - clhs6*clhs70 - clhs7*clhs73;
        const double clhs75 =     clhs10*clhs71 + clhs11*clhs72 - clhs12*clhs70 - clhs13*clhs73;
        const double clhs76 =     clhs74*tangentetaslave(1,0) + clhs75*tangentetaslave(1,1);
        const double clhs77 =     clhs76*penalty_parameter*tangentetaslave(1,0);
        const double clhs78 =     clhs74*tangentxislave(1,0) + clhs75*tangentxislave(1,1);
        const double clhs79 =     clhs78*penalty_parameter*tangentxislave(1,0);
        const double clhs80 =     normalslave(1,0)*(clhs20*clhs71 + clhs21*clhs72 - clhs22*clhs70 - clhs23*clhs73) - normalslave(1,1)*(-clhs24*clhs71 - clhs25*clhs72 + clhs26*clhs70 + clhs27*clhs73 + clhs8);
        const double clhs81 =     clhs80*normalslave(1,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs83 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs84 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs85 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs86 =     clhs2*clhs83 + clhs4*clhs84 - clhs6*clhs82 - clhs7*clhs85;
        const double clhs87 =     clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85;
        const double clhs88 =     clhs86*tangentetaslave(1,0) + clhs87*tangentetaslave(1,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentetaslave(1,0);
        const double clhs90 =     clhs86*tangentxislave(1,0) + clhs87*tangentxislave(1,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(1,0);
        const double clhs92 =     normalslave(1,0)*(clhs20*clhs83 + clhs21*clhs84 - clhs22*clhs82 - clhs23*clhs85 + clhs3) + normalslave(1,1)*(clhs24*clhs83 + clhs25*clhs84 - clhs26*clhs82 - clhs27*clhs85);
        const double clhs93 =     clhs92*normalslave(1,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs95 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs96 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs97 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs98 =     clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs94 - clhs7*clhs97;
        const double clhs99 =     clhs10*clhs95 + clhs11*clhs96 - clhs12*clhs94 - clhs13*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(1,0) + clhs99*tangentetaslave(1,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(1,0);
        const double clhs102 =     clhs98*tangentxislave(1,0) + clhs99*tangentxislave(1,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(1,0);
        const double clhs104 =     normalslave(1,0)*(clhs20*clhs95 + clhs21*clhs96 - clhs22*clhs94 - clhs23*clhs97) + normalslave(1,1)*(clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs94 - clhs27*clhs97 + clhs3);
        const double clhs105 =     clhs104*normalslave(1,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs107 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs108 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs109 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs110 =     -clhs106*clhs6 + clhs107*clhs2 + clhs108*clhs4 - clhs109*clhs7;
        const double clhs111 =     clhs10*clhs107 - clhs106*clhs12 + clhs108*clhs11 - clhs109*clhs13;
        const double clhs112 =     clhs110*tangentetaslave(1,0) + clhs111*tangentetaslave(1,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentetaslave(1,0);
        const double clhs114 =     clhs110*tangentxislave(1,0) + clhs111*tangentxislave(1,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(1,0);
        const double clhs116 =     normalslave(1,0)*(-clhs106*clhs22 + clhs107*clhs20 + clhs108*clhs21 - clhs109*clhs23 + clhs5) + normalslave(1,1)*(-clhs106*clhs26 + clhs107*clhs24 + clhs108*clhs25 - clhs109*clhs27);
        const double clhs117 =     clhs116*normalslave(1,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs119 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs120 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs121 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs122 =     -clhs118*clhs6 + clhs119*clhs2 + clhs120*clhs4 - clhs121*clhs7;
        const double clhs123 =     clhs10*clhs119 + clhs11*clhs120 - clhs118*clhs12 - clhs121*clhs13;
        const double clhs124 =     clhs122*tangentetaslave(1,0) + clhs123*tangentetaslave(1,1);
        const double clhs125 =     clhs124*penalty_parameter*tangentetaslave(1,0);
        const double clhs126 =     clhs122*tangentxislave(1,0) + clhs123*tangentxislave(1,1);
        const double clhs127 =     clhs126*penalty_parameter*tangentxislave(1,0);
        const double clhs128 =     normalslave(1,0)*(-clhs118*clhs22 + clhs119*clhs20 + clhs120*clhs21 - clhs121*clhs23) + normalslave(1,1)*(-clhs118*clhs26 + clhs119*clhs24 + clhs120*clhs25 - clhs121*clhs27 + clhs5);
        const double clhs129 =     clhs128*normalslave(1,0)*penalty_parameter;
        const double clhs130 =     scale_factor*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        const double clhs131 =     scale_factor*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
        const double clhs132 =     clhs0*clhs131;
        const double clhs133 =     clhs15*tangentetaslave(1,1);
        const double clhs134 =     clhs17*tangentxislave(1,1);
        const double clhs135 =     clhs29*normalslave(1,1);
        const double clhs136 =     clhs36*penalty_parameter*tangentetaslave(1,1);
        const double clhs137 =     clhs38*penalty_parameter*tangentxislave(1,1);
        const double clhs138 =     clhs42*normalslave(1,1)*penalty_parameter;
        const double clhs139 =     clhs50*penalty_parameter*tangentetaslave(1,1);
        const double clhs140 =     clhs52*penalty_parameter*tangentxislave(1,1);
        const double clhs141 =     clhs54*normalslave(1,1)*penalty_parameter;
        const double clhs142 =     clhs62*penalty_parameter*tangentetaslave(1,1);
        const double clhs143 =     clhs64*penalty_parameter*tangentxislave(1,1);
        const double clhs144 =     clhs68*normalslave(1,1)*penalty_parameter;
        const double clhs145 =     clhs76*penalty_parameter*tangentetaslave(1,1);
        const double clhs146 =     clhs78*penalty_parameter*tangentxislave(1,1);
        const double clhs147 =     clhs80*normalslave(1,1)*penalty_parameter;
        const double clhs148 =     clhs88*penalty_parameter*tangentetaslave(1,1);
        const double clhs149 =     clhs90*penalty_parameter*tangentxislave(1,1);
        const double clhs150 =     clhs92*normalslave(1,1)*penalty_parameter;
        const double clhs151 =     clhs100*penalty_parameter*tangentetaslave(1,1);
        const double clhs152 =     clhs102*penalty_parameter*tangentxislave(1,1);
        const double clhs153 =     clhs104*normalslave(1,1)*penalty_parameter;
        const double clhs154 =     clhs112*penalty_parameter*tangentetaslave(1,1);
        const double clhs155 =     clhs114*penalty_parameter*tangentxislave(1,1);
        const double clhs156 =     clhs116*normalslave(1,1)*penalty_parameter;
        const double clhs157 =     clhs124*penalty_parameter*tangentetaslave(1,1);
        const double clhs158 =     clhs126*penalty_parameter*tangentxislave(1,1);
        const double clhs159 =     clhs128*normalslave(1,1)*penalty_parameter;
        const double clhs160 =     scale_factor*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
        const double clhs161 =     clhs131*clhs8;
        const double clhs162 =     clhs19 - clhs28;
        const double clhs163 =     clhs162*normalslave(1,0);
        const double clhs164 =     clhs40 - clhs41;
        const double clhs165 =     clhs164*normalslave(1,0)*penalty_parameter;
        const double clhs166 =     clhs66 - clhs67;
        const double clhs167 =     clhs166*normalslave(1,0)*penalty_parameter;
        const double clhs168 =     -clhs131*clhs3;
        const double clhs169 =     clhs162*normalslave(1,1);
        const double clhs170 =     clhs164*normalslave(1,1)*penalty_parameter;
        const double clhs171 =     clhs166*normalslave(1,1)*penalty_parameter;
        const double clhs172 =     -clhs131*clhs5;
        const double clhs173 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs174 =     clhs173*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
    
        lhs(0,0)=clhs0*clhs37 + clhs0*clhs39 + clhs0*clhs43 + clhs1*clhs16 + clhs1*clhs18 - clhs1*clhs30;
        lhs(0,1)=clhs0*clhs51 + clhs0*clhs53 - clhs0*clhs55 + clhs16*clhs44 + clhs18*clhs44 - clhs30*clhs44;
        lhs(0,2)=clhs0*clhs63 + clhs0*clhs65 + clhs0*clhs69 + clhs16*clhs56 + clhs18*clhs56 - clhs30*clhs56;
        lhs(0,3)=clhs0*clhs77 + clhs0*clhs79 - clhs0*clhs81 + clhs16*clhs70 + clhs18*clhs70 - clhs30*clhs70;
        lhs(0,4)=clhs0*clhs89 + clhs0*clhs91 - clhs0*clhs93 + clhs16*clhs82 + clhs18*clhs82 - clhs30*clhs82;
        lhs(0,5)=clhs0*clhs101 + clhs0*clhs103 - clhs0*clhs105 + clhs16*clhs94 + clhs18*clhs94 - clhs30*clhs94;
        lhs(0,6)=clhs0*clhs113 + clhs0*clhs115 - clhs0*clhs117 + clhs106*clhs16 + clhs106*clhs18 - clhs106*clhs30;
        lhs(0,7)=clhs0*clhs125 + clhs0*clhs127 - clhs0*clhs129 + clhs118*clhs16 + clhs118*clhs18 - clhs118*clhs30;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=clhs0*clhs130;
        lhs(0,11)=clhs132;
        lhs(1,0)=clhs0*clhs136 + clhs0*clhs137 + clhs0*clhs138 + clhs1*clhs133 + clhs1*clhs134 - clhs1*clhs135;
        lhs(1,1)=clhs0*clhs139 + clhs0*clhs140 - clhs0*clhs141 + clhs133*clhs44 + clhs134*clhs44 - clhs135*clhs44;
        lhs(1,2)=clhs0*clhs142 + clhs0*clhs143 + clhs0*clhs144 + clhs133*clhs56 + clhs134*clhs56 - clhs135*clhs56;
        lhs(1,3)=clhs0*clhs145 + clhs0*clhs146 - clhs0*clhs147 + clhs133*clhs70 + clhs134*clhs70 - clhs135*clhs70;
        lhs(1,4)=clhs0*clhs148 + clhs0*clhs149 - clhs0*clhs150 + clhs133*clhs82 + clhs134*clhs82 - clhs135*clhs82;
        lhs(1,5)=clhs0*clhs151 + clhs0*clhs152 - clhs0*clhs153 + clhs133*clhs94 + clhs134*clhs94 - clhs135*clhs94;
        lhs(1,6)=clhs0*clhs154 + clhs0*clhs155 - clhs0*clhs156 + clhs106*clhs133 + clhs106*clhs134 - clhs106*clhs135;
        lhs(1,7)=clhs0*clhs157 + clhs0*clhs158 - clhs0*clhs159 + clhs118*clhs133 + clhs118*clhs134 - clhs118*clhs135;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=clhs132;
        lhs(1,11)=clhs0*clhs160;
        lhs(2,0)=clhs16*clhs33 + clhs18*clhs33 - clhs30*clhs33 + clhs37*clhs8 + clhs39*clhs8 + clhs43*clhs8;
        lhs(2,1)=clhs16*clhs47 + clhs18*clhs47 - clhs30*clhs47 + clhs51*clhs8 + clhs53*clhs8 - clhs55*clhs8;
        lhs(2,2)=clhs16*clhs59 + clhs18*clhs59 - clhs30*clhs59 + clhs63*clhs8 + clhs65*clhs8 + clhs69*clhs8;
        lhs(2,3)=clhs16*clhs73 + clhs18*clhs73 - clhs30*clhs73 + clhs77*clhs8 + clhs79*clhs8 - clhs8*clhs81;
        lhs(2,4)=clhs16*clhs85 + clhs18*clhs85 - clhs30*clhs85 + clhs8*clhs89 + clhs8*clhs91 - clhs8*clhs93;
        lhs(2,5)=clhs101*clhs8 + clhs103*clhs8 - clhs105*clhs8 + clhs16*clhs97 + clhs18*clhs97 - clhs30*clhs97;
        lhs(2,6)=clhs109*clhs16 + clhs109*clhs18 - clhs109*clhs30 + clhs113*clhs8 + clhs115*clhs8 - clhs117*clhs8;
        lhs(2,7)=clhs121*clhs16 + clhs121*clhs18 - clhs121*clhs30 + clhs125*clhs8 + clhs127*clhs8 - clhs129*clhs8;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=clhs130*clhs8;
        lhs(2,11)=clhs161;
        lhs(3,0)=clhs133*clhs33 + clhs134*clhs33 - clhs135*clhs33 + clhs136*clhs8 + clhs137*clhs8 + clhs138*clhs8;
        lhs(3,1)=clhs133*clhs47 + clhs134*clhs47 - clhs135*clhs47 + clhs139*clhs8 + clhs140*clhs8 - clhs141*clhs8;
        lhs(3,2)=clhs133*clhs59 + clhs134*clhs59 - clhs135*clhs59 + clhs142*clhs8 + clhs143*clhs8 + clhs144*clhs8;
        lhs(3,3)=clhs133*clhs73 + clhs134*clhs73 - clhs135*clhs73 + clhs145*clhs8 + clhs146*clhs8 - clhs147*clhs8;
        lhs(3,4)=clhs133*clhs85 + clhs134*clhs85 - clhs135*clhs85 + clhs148*clhs8 + clhs149*clhs8 - clhs150*clhs8;
        lhs(3,5)=clhs133*clhs97 + clhs134*clhs97 - clhs135*clhs97 + clhs151*clhs8 + clhs152*clhs8 - clhs153*clhs8;
        lhs(3,6)=clhs109*clhs133 + clhs109*clhs134 - clhs109*clhs135 + clhs154*clhs8 + clhs155*clhs8 - clhs156*clhs8;
        lhs(3,7)=clhs121*clhs133 + clhs121*clhs134 - clhs121*clhs135 + clhs157*clhs8 + clhs158*clhs8 - clhs159*clhs8;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=clhs161;
        lhs(3,11)=clhs160*clhs8;
        lhs(4,0)=-clhs16*clhs31 - clhs163*clhs31 + clhs165*clhs3 - clhs18*clhs31 - clhs3*clhs37 - clhs3*clhs39;
        lhs(4,1)=-clhs16*clhs45 - clhs163*clhs45 - clhs18*clhs45 - clhs3*clhs51 - clhs3*clhs53 + clhs3*clhs55;
        lhs(4,2)=-clhs16*clhs57 - clhs163*clhs57 + clhs167*clhs3 - clhs18*clhs57 - clhs3*clhs63 - clhs3*clhs65;
        lhs(4,3)=-clhs16*clhs71 - clhs163*clhs71 - clhs18*clhs71 - clhs3*clhs77 - clhs3*clhs79 + clhs3*clhs81;
        lhs(4,4)=-clhs16*clhs83 - clhs163*clhs83 - clhs18*clhs83 - clhs3*clhs89 - clhs3*clhs91 + clhs3*clhs93;
        lhs(4,5)=-clhs101*clhs3 - clhs103*clhs3 + clhs105*clhs3 - clhs16*clhs95 - clhs163*clhs95 - clhs18*clhs95;
        lhs(4,6)=-clhs107*clhs16 - clhs107*clhs163 - clhs107*clhs18 - clhs113*clhs3 - clhs115*clhs3 + clhs117*clhs3;
        lhs(4,7)=-clhs119*clhs16 - clhs119*clhs163 - clhs119*clhs18 - clhs125*clhs3 - clhs127*clhs3 + clhs129*clhs3;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=-clhs130*clhs3;
        lhs(4,11)=clhs168;
        lhs(5,0)=-clhs133*clhs31 - clhs134*clhs31 - clhs136*clhs3 - clhs137*clhs3 - clhs169*clhs31 + clhs170*clhs3;
        lhs(5,1)=-clhs133*clhs45 - clhs134*clhs45 - clhs139*clhs3 - clhs140*clhs3 + clhs141*clhs3 - clhs169*clhs45;
        lhs(5,2)=-clhs133*clhs57 - clhs134*clhs57 - clhs142*clhs3 - clhs143*clhs3 - clhs169*clhs57 + clhs171*clhs3;
        lhs(5,3)=-clhs133*clhs71 - clhs134*clhs71 - clhs145*clhs3 - clhs146*clhs3 + clhs147*clhs3 - clhs169*clhs71;
        lhs(5,4)=-clhs133*clhs83 - clhs134*clhs83 - clhs148*clhs3 - clhs149*clhs3 + clhs150*clhs3 - clhs169*clhs83;
        lhs(5,5)=-clhs133*clhs95 - clhs134*clhs95 - clhs151*clhs3 - clhs152*clhs3 + clhs153*clhs3 - clhs169*clhs95;
        lhs(5,6)=-clhs107*clhs133 - clhs107*clhs134 - clhs107*clhs169 - clhs154*clhs3 - clhs155*clhs3 + clhs156*clhs3;
        lhs(5,7)=-clhs119*clhs133 - clhs119*clhs134 - clhs119*clhs169 - clhs157*clhs3 - clhs158*clhs3 + clhs159*clhs3;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=clhs168;
        lhs(5,11)=-clhs160*clhs3;
        lhs(6,0)=-clhs16*clhs32 - clhs163*clhs32 + clhs165*clhs5 - clhs18*clhs32 - clhs37*clhs5 - clhs39*clhs5;
        lhs(6,1)=-clhs16*clhs46 - clhs163*clhs46 - clhs18*clhs46 - clhs5*clhs51 - clhs5*clhs53 + clhs5*clhs55;
        lhs(6,2)=-clhs16*clhs58 - clhs163*clhs58 + clhs167*clhs5 - clhs18*clhs58 - clhs5*clhs63 - clhs5*clhs65;
        lhs(6,3)=-clhs16*clhs72 - clhs163*clhs72 - clhs18*clhs72 - clhs5*clhs77 - clhs5*clhs79 + clhs5*clhs81;
        lhs(6,4)=-clhs16*clhs84 - clhs163*clhs84 - clhs18*clhs84 - clhs5*clhs89 - clhs5*clhs91 + clhs5*clhs93;
        lhs(6,5)=-clhs101*clhs5 - clhs103*clhs5 + clhs105*clhs5 - clhs16*clhs96 - clhs163*clhs96 - clhs18*clhs96;
        lhs(6,6)=-clhs108*clhs16 - clhs108*clhs163 - clhs108*clhs18 - clhs113*clhs5 - clhs115*clhs5 + clhs117*clhs5;
        lhs(6,7)=-clhs120*clhs16 - clhs120*clhs163 - clhs120*clhs18 - clhs125*clhs5 - clhs127*clhs5 + clhs129*clhs5;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=-clhs130*clhs5;
        lhs(6,11)=clhs172;
        lhs(7,0)=-clhs133*clhs32 - clhs134*clhs32 - clhs136*clhs5 - clhs137*clhs5 - clhs169*clhs32 + clhs170*clhs5;
        lhs(7,1)=-clhs133*clhs46 - clhs134*clhs46 - clhs139*clhs5 - clhs140*clhs5 + clhs141*clhs5 - clhs169*clhs46;
        lhs(7,2)=-clhs133*clhs58 - clhs134*clhs58 - clhs142*clhs5 - clhs143*clhs5 - clhs169*clhs58 + clhs171*clhs5;
        lhs(7,3)=-clhs133*clhs72 - clhs134*clhs72 - clhs145*clhs5 - clhs146*clhs5 + clhs147*clhs5 - clhs169*clhs72;
        lhs(7,4)=-clhs133*clhs84 - clhs134*clhs84 - clhs148*clhs5 - clhs149*clhs5 + clhs150*clhs5 - clhs169*clhs84;
        lhs(7,5)=-clhs133*clhs96 - clhs134*clhs96 - clhs151*clhs5 - clhs152*clhs5 + clhs153*clhs5 - clhs169*clhs96;
        lhs(7,6)=-clhs108*clhs133 - clhs108*clhs134 - clhs108*clhs169 - clhs154*clhs5 - clhs155*clhs5 + clhs156*clhs5;
        lhs(7,7)=-clhs120*clhs133 - clhs120*clhs134 - clhs120*clhs169 - clhs157*clhs5 - clhs158*clhs5 + clhs159*clhs5;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=clhs172;
        lhs(7,11)=-clhs160*clhs5;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs173*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs174;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs174;
        lhs(9,9)=clhs173*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=scale_factor*(clhs164*normalslave(1,0) - clhs36*tangentetaslave(1,0) - clhs38*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs50*tangentetaslave(1,0) - clhs52*tangentxislave(1,0) + clhs54*normalslave(1,0));
        lhs(10,2)=scale_factor*(clhs166*normalslave(1,0) - clhs62*tangentetaslave(1,0) - clhs64*tangentxislave(1,0));
        lhs(10,3)=scale_factor*(-clhs76*tangentetaslave(1,0) - clhs78*tangentxislave(1,0) + clhs80*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs88*tangentetaslave(1,0) - clhs90*tangentxislave(1,0) + clhs92*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs100*tangentetaslave(1,0) - clhs102*tangentxislave(1,0) + clhs104*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs112*tangentetaslave(1,0) - clhs114*tangentxislave(1,0) + clhs116*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs124*tangentetaslave(1,0) - clhs126*tangentxislave(1,0) + clhs128*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs164*normalslave(1,1) - clhs36*tangentetaslave(1,1) - clhs38*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs50*tangentetaslave(1,1) - clhs52*tangentxislave(1,1) + clhs54*normalslave(1,1));
        lhs(11,2)=scale_factor*(clhs166*normalslave(1,1) - clhs62*tangentetaslave(1,1) - clhs64*tangentxislave(1,1));
        lhs(11,3)=scale_factor*(-clhs76*tangentetaslave(1,1) - clhs78*tangentxislave(1,1) + clhs80*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs88*tangentetaslave(1,1) - clhs90*tangentxislave(1,1) + clhs92*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs100*tangentetaslave(1,1) - clhs102*tangentxislave(1,1) + clhs104*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs112*tangentetaslave(1,1) - clhs114*tangentxislave(1,1) + clhs116*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs124*tangentetaslave(1,1) - clhs126*tangentxislave(1,1) + clhs128*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }
    else if (rActiveInactive == 7 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     lm(1,0)*tangentetaslave(1,0);
        const double clhs3 =     lm(1,1)*tangentetaslave(1,1);
        const double clhs4 =     clhs2 + clhs3;
        const double clhs5 =     X1(0,0) + u1old(0,0);
        const double clhs6 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X1(1,0) + u1old(1,0);
        const double clhs8 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     X2(0,0) + u2old(0,0);
        const double clhs10 =     X2(1,0) + u2old(1,0);
        const double clhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs12 =     -clhs0*clhs9 - clhs10*clhs11 + clhs5*clhs6 + clhs7*clhs8;
        const double clhs13 =     X1(0,1) + u1old(0,1);
        const double clhs14 =     X1(1,1) + u1old(1,1);
        const double clhs15 =     X2(0,1) + u2old(0,1);
        const double clhs16 =     X2(1,1) + u2old(1,1);
        const double clhs17 =     -clhs0*clhs15 - clhs11*clhs16 + clhs13*clhs6 + clhs14*clhs8;
        const double clhs18 =     clhs4*scale_factor + penalty_parameter*(clhs12*tangentetaslave(1,0) + clhs17*tangentetaslave(1,1));
        const double clhs19 =     clhs18*tangentetaslave(1,0);
        const double clhs20 =     lm(1,0)*tangentxislave(1,0);
        const double clhs21 =     lm(1,1)*tangentxislave(1,1);
        const double clhs22 =     clhs20 + clhs21;
        const double clhs23 =     clhs22*scale_factor + penalty_parameter*(clhs12*tangentxislave(1,0) + clhs17*tangentxislave(1,1));
        const double clhs24 =     clhs23*tangentxislave(1,0);
        const double clhs25 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs26 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs27 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs28 =     X1(0,0) + u1(0,0);
        const double clhs29 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs30 =     X1(1,0) + u1(1,0);
        const double clhs31 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs32 =     X2(0,0) + u2(0,0);
        const double clhs33 =     X2(1,0) + u2(1,0);
        const double clhs34 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs35 =     X1(0,1) + u1(0,1);
        const double clhs36 =     X1(1,1) + u1(1,1);
        const double clhs37 =     X2(0,1) + u2(0,1);
        const double clhs38 =     X2(1,1) + u2(1,1);
        const double clhs39 =     penalty_parameter*(normalslave(0,0)*(-clhs25*clhs32 + clhs28*clhs29 + clhs30*clhs31 - clhs33*clhs34) + normalslave(0,1)*(-clhs25*clhs37 + clhs29*clhs35 + clhs31*clhs36 - clhs34*clhs38));
        const double clhs40 =     -clhs27 + clhs39;
        const double clhs41 =     clhs40*normalslave(0,0);
        const double clhs42 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs43 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs32 - clhs11*clhs33 + clhs28*clhs6 + clhs30*clhs8) + normalslave(1,1)*(-clhs0*clhs37 - clhs11*clhs38 + clhs35*clhs6 + clhs36*clhs8));
        const double clhs44 =     -clhs42 + clhs43;
        const double clhs45 =     clhs44*normalslave(1,0);
        const double clhs46 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs48 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs49 =     -clhs1*clhs9 - clhs10*clhs48 + clhs46*clhs5 + clhs47*clhs7;
        const double clhs50 =     -clhs1*clhs15 + clhs13*clhs46 + clhs14*clhs47 - clhs16*clhs48;
        const double clhs51 =     clhs49*tangentetaslave(1,0) + clhs50*tangentetaslave(1,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentetaslave(1,0);
        const double clhs53 =     clhs49*tangentxislave(1,0) + clhs50*tangentxislave(1,1);
        const double clhs54 =     clhs53*penalty_parameter*tangentxislave(1,0);
        const double clhs55 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs56 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs57 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs58 =     normalslave(0,1)*(-clhs26*clhs37 + clhs35*clhs55 + clhs36*clhs56 - clhs38*clhs57);
        const double clhs59 =     normalslave(0,0)*(clhs25 + clhs26*clhs32 - clhs28*clhs55 - clhs30*clhs56 + clhs33*clhs57);
        const double clhs60 =     -clhs58 + clhs59;
        const double clhs61 =     clhs60*normalslave(0,0)*penalty_parameter;
        const double clhs62 =     normalslave(1,1)*(-clhs1*clhs37 + clhs35*clhs46 + clhs36*clhs47 - clhs38*clhs48);
        const double clhs63 =     normalslave(1,0)*(clhs0 + clhs1*clhs32 - clhs28*clhs46 - clhs30*clhs47 + clhs33*clhs48);
        const double clhs64 =     -clhs62 + clhs63;
        const double clhs65 =     clhs64*normalslave(1,0)*penalty_parameter;
        const double clhs66 =     lm(0,0)*tangentetaslave(0,0);
        const double clhs67 =     lm(0,1)*tangentetaslave(0,1);
        const double clhs68 =     clhs66 + clhs67;
        const double clhs69 =     lm(0,0)*tangentxislave(0,0);
        const double clhs70 =     lm(0,1)*tangentxislave(0,1);
        const double clhs71 =     clhs69 + clhs70;
        const double clhs72 =     clhs68*tangentetaslave(0,0) + clhs71*tangentxislave(0,0);
        const double clhs73 =     clhs68*tangentetaslave(0,1) + clhs71*tangentxislave(0,1);
        const double clhs74 =     std::pow(fabs(clhs72), 2) + std::pow(fabs(clhs73), 2);
        const double clhs75 =     std::pow(clhs74, -1.0L/2.0L);
        const double clhs76 =     std::pow(fabs(clhs22*tangentxislave(1,0) + clhs4*tangentetaslave(1,0)), 2) + std::pow(fabs(clhs22*tangentxislave(1,1) + clhs4*tangentetaslave(1,1)), 2);
        const double clhs77 =     std::pow(clhs76, -1.0L/2.0L);
        const double clhs78 =     clhs40*clhs72*clhs75*clhs77*mu[0];
        const double clhs79 =     clhs60*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs80 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs81 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs82 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs85 =     -clhs10*clhs84 + clhs5*clhs82 + clhs7*clhs83 - clhs80*clhs9;
        const double clhs86 =     clhs13*clhs82 + clhs14*clhs83 - clhs15*clhs80 - clhs16*clhs84;
        const double clhs87 =     clhs85*tangentetaslave(1,0) + clhs86*tangentetaslave(1,1);
        const double clhs88 =     clhs87*penalty_parameter*tangentetaslave(1,0);
        const double clhs89 =     clhs85*tangentxislave(1,0) + clhs86*tangentxislave(1,1);
        const double clhs90 =     clhs89*penalty_parameter*tangentxislave(1,0);
        const double clhs91 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs92 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs93 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs94 =     normalslave(0,0)*(clhs28*clhs91 + clhs30*clhs92 - clhs32*clhs81 - clhs33*clhs93) - normalslave(0,1)*(clhs25 - clhs35*clhs91 - clhs36*clhs92 + clhs37*clhs81 + clhs38*clhs93);
        const double clhs95 =     clhs94*normalslave(0,0)*penalty_parameter;
        const double clhs96 =     normalslave(1,0)*(clhs28*clhs82 + clhs30*clhs83 - clhs32*clhs80 - clhs33*clhs84) - normalslave(1,1)*(clhs0 - clhs35*clhs82 - clhs36*clhs83 + clhs37*clhs80 + clhs38*clhs84);
        const double clhs97 =     clhs96*normalslave(1,0)*penalty_parameter;
        const double clhs98 =     clhs72*clhs75*clhs77*clhs94*mu[0]*penalty_parameter;
        const double clhs99 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs100 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs101 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs102 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs103 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs104 =     -clhs10*clhs103 + clhs101*clhs5 + clhs102*clhs7 - clhs9*clhs99;
        const double clhs105 =     clhs101*clhs13 + clhs102*clhs14 - clhs103*clhs16 - clhs15*clhs99;
        const double clhs106 =     clhs104*tangentetaslave(1,0) + clhs105*tangentetaslave(1,1);
        const double clhs107 =     clhs106*penalty_parameter*tangentetaslave(1,0);
        const double clhs108 =     clhs104*tangentxislave(1,0) + clhs105*tangentxislave(1,1);
        const double clhs109 =     clhs108*penalty_parameter*tangentxislave(1,0);
        const double clhs110 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs111 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs112 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs113 =     normalslave(0,1)*(-clhs100*clhs37 + clhs110*clhs35 + clhs111*clhs36 - clhs112*clhs38);
        const double clhs114 =     normalslave(0,0)*(clhs100*clhs32 - clhs110*clhs28 - clhs111*clhs30 + clhs112*clhs33 + clhs34);
        const double clhs115 =     -clhs113 + clhs114;
        const double clhs116 =     clhs115*normalslave(0,0)*penalty_parameter;
        const double clhs117 =     normalslave(1,1)*(clhs101*clhs35 + clhs102*clhs36 - clhs103*clhs38 - clhs37*clhs99);
        const double clhs118 =     normalslave(1,0)*(-clhs101*clhs28 - clhs102*clhs30 + clhs103*clhs33 + clhs11 + clhs32*clhs99);
        const double clhs119 =     -clhs117 + clhs118;
        const double clhs120 =     clhs119*normalslave(1,0)*penalty_parameter;
        const double clhs121 =     clhs115*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs122 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs123 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs124 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs125 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs126 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     -clhs10*clhs126 - clhs122*clhs9 + clhs124*clhs5 + clhs125*clhs7;
        const double clhs128 =     -clhs122*clhs15 + clhs124*clhs13 + clhs125*clhs14 - clhs126*clhs16;
        const double clhs129 =     clhs127*tangentetaslave(1,0) + clhs128*tangentetaslave(1,1);
        const double clhs130 =     clhs129*penalty_parameter*tangentetaslave(1,0);
        const double clhs131 =     clhs127*tangentxislave(1,0) + clhs128*tangentxislave(1,1);
        const double clhs132 =     clhs131*penalty_parameter*tangentxislave(1,0);
        const double clhs133 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs134 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs135 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs136 =     normalslave(0,0)*(-clhs123*clhs32 + clhs133*clhs28 + clhs134*clhs30 - clhs135*clhs33) - normalslave(0,1)*(clhs123*clhs37 - clhs133*clhs35 - clhs134*clhs36 + clhs135*clhs38 + clhs34);
        const double clhs137 =     clhs136*normalslave(0,0)*penalty_parameter;
        const double clhs138 =     normalslave(1,0)*(-clhs122*clhs32 + clhs124*clhs28 + clhs125*clhs30 - clhs126*clhs33) - normalslave(1,1)*(clhs11 + clhs122*clhs37 - clhs124*clhs35 - clhs125*clhs36 + clhs126*clhs38);
        const double clhs139 =     clhs138*normalslave(1,0)*penalty_parameter;
        const double clhs140 =     clhs136*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs141 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs142 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs143 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs144 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs145 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs146 =     -clhs10*clhs145 - clhs141*clhs9 + clhs143*clhs5 + clhs144*clhs7;
        const double clhs147 =     clhs13*clhs143 + clhs14*clhs144 - clhs141*clhs15 - clhs145*clhs16;
        const double clhs148 =     clhs146*tangentetaslave(1,0) + clhs147*tangentetaslave(1,1);
        const double clhs149 =     clhs148*penalty_parameter*tangentetaslave(1,0);
        const double clhs150 =     clhs146*tangentxislave(1,0) + clhs147*tangentxislave(1,1);
        const double clhs151 =     clhs150*penalty_parameter*tangentxislave(1,0);
        const double clhs152 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs153 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs154 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs155 =     normalslave(0,0)*(-clhs142*clhs32 + clhs152*clhs28 + clhs153*clhs30 - clhs154*clhs33 + clhs29) + normalslave(0,1)*(-clhs142*clhs37 + clhs152*clhs35 + clhs153*clhs36 - clhs154*clhs38);
        const double clhs156 =     clhs155*normalslave(0,0)*penalty_parameter;
        const double clhs157 =     normalslave(1,0)*(-clhs141*clhs32 + clhs143*clhs28 + clhs144*clhs30 - clhs145*clhs33 + clhs6) + normalslave(1,1)*(-clhs141*clhs37 + clhs143*clhs35 + clhs144*clhs36 - clhs145*clhs38);
        const double clhs158 =     clhs157*normalslave(1,0)*penalty_parameter;
        const double clhs159 =     clhs155*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs160 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs161 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs162 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs163 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs164 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs165 =     -clhs10*clhs164 - clhs160*clhs9 + clhs162*clhs5 + clhs163*clhs7;
        const double clhs166 =     clhs13*clhs162 + clhs14*clhs163 - clhs15*clhs160 - clhs16*clhs164;
        const double clhs167 =     clhs165*tangentetaslave(1,0) + clhs166*tangentetaslave(1,1);
        const double clhs168 =     clhs167*penalty_parameter*tangentetaslave(1,0);
        const double clhs169 =     clhs165*tangentxislave(1,0) + clhs166*tangentxislave(1,1);
        const double clhs170 =     clhs169*penalty_parameter*tangentxislave(1,0);
        const double clhs171 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs172 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs173 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs174 =     normalslave(0,0)*(-clhs161*clhs32 + clhs171*clhs28 + clhs172*clhs30 - clhs173*clhs33) + normalslave(0,1)*(-clhs161*clhs37 + clhs171*clhs35 + clhs172*clhs36 - clhs173*clhs38 + clhs29);
        const double clhs175 =     clhs174*normalslave(0,0)*penalty_parameter;
        const double clhs176 =     normalslave(1,0)*(-clhs160*clhs32 + clhs162*clhs28 + clhs163*clhs30 - clhs164*clhs33) + normalslave(1,1)*(-clhs160*clhs37 + clhs162*clhs35 + clhs163*clhs36 - clhs164*clhs38 + clhs6);
        const double clhs177 =     clhs176*normalslave(1,0)*penalty_parameter;
        const double clhs178 =     clhs174*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs179 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs180 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs181 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs182 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs183 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs184 =     -clhs10*clhs183 - clhs179*clhs9 + clhs181*clhs5 + clhs182*clhs7;
        const double clhs185 =     clhs13*clhs181 + clhs14*clhs182 - clhs15*clhs179 - clhs16*clhs183;
        const double clhs186 =     clhs184*tangentetaslave(1,0) + clhs185*tangentetaslave(1,1);
        const double clhs187 =     clhs186*penalty_parameter*tangentetaslave(1,0);
        const double clhs188 =     clhs184*tangentxislave(1,0) + clhs185*tangentxislave(1,1);
        const double clhs189 =     clhs188*penalty_parameter*tangentxislave(1,0);
        const double clhs190 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs191 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs192 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs193 =     normalslave(0,0)*(-clhs180*clhs32 + clhs190*clhs28 + clhs191*clhs30 - clhs192*clhs33 + clhs31) + normalslave(0,1)*(-clhs180*clhs37 + clhs190*clhs35 + clhs191*clhs36 - clhs192*clhs38);
        const double clhs194 =     clhs193*normalslave(0,0)*penalty_parameter;
        const double clhs195 =     normalslave(1,0)*(-clhs179*clhs32 + clhs181*clhs28 + clhs182*clhs30 - clhs183*clhs33 + clhs8) + normalslave(1,1)*(-clhs179*clhs37 + clhs181*clhs35 + clhs182*clhs36 - clhs183*clhs38);
        const double clhs196 =     clhs195*normalslave(1,0)*penalty_parameter;
        const double clhs197 =     clhs193*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs198 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs199 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs200 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs201 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs202 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs203 =     -clhs10*clhs202 - clhs198*clhs9 + clhs200*clhs5 + clhs201*clhs7;
        const double clhs204 =     clhs13*clhs200 + clhs14*clhs201 - clhs15*clhs198 - clhs16*clhs202;
        const double clhs205 =     clhs203*tangentetaslave(1,0) + clhs204*tangentetaslave(1,1);
        const double clhs206 =     clhs205*penalty_parameter*tangentetaslave(1,0);
        const double clhs207 =     clhs203*tangentxislave(1,0) + clhs204*tangentxislave(1,1);
        const double clhs208 =     clhs207*penalty_parameter*tangentxislave(1,0);
        const double clhs209 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs210 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs211 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs212 =     normalslave(0,0)*(-clhs199*clhs32 + clhs209*clhs28 + clhs210*clhs30 - clhs211*clhs33) + normalslave(0,1)*(-clhs199*clhs37 + clhs209*clhs35 + clhs210*clhs36 - clhs211*clhs38 + clhs31);
        const double clhs213 =     clhs212*normalslave(0,0)*penalty_parameter;
        const double clhs214 =     normalslave(1,0)*(-clhs198*clhs32 + clhs200*clhs28 + clhs201*clhs30 - clhs202*clhs33) + normalslave(1,1)*(-clhs198*clhs37 + clhs200*clhs35 + clhs201*clhs36 - clhs202*clhs38 + clhs8);
        const double clhs215 =     clhs214*normalslave(1,0)*penalty_parameter;
        const double clhs216 =     clhs212*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs217 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs218 =     clhs75*clhs77*mu[0]*normalslave(0,0)*scale_factor;
        const double clhs219 =     clhs218*clhs72;
        const double clhs220 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs221 =     clhs220*clhs75*clhs77*mu[0];
        const double clhs222 =     clhs27 - clhs39;
        const double clhs223 =     std::pow(clhs74, -3.0L/2.0L);
        const double clhs224 =     clhs222*clhs223*clhs72*clhs77*mu[0];
        const double clhs225 =     re(tangentetaslave(0,0)); // RE(TANGENTETASLAVE(0,0))
        const double clhs226 =     im(clhs66); // IM(CLHS66)
        const double clhs227 =     Derivative(im(clhs66), lm(0,0)); // DERIVATIVE(IM(CLHS66), LM(0,0))
        const double clhs228 =     re(tangentxislave(0,0)); // RE(TANGENTXISLAVE(0,0))
        const double clhs229 =     im(clhs69); // IM(CLHS69)
        const double clhs230 =     Derivative(im(clhs69), lm(0,0)); // DERIVATIVE(IM(CLHS69), LM(0,0))
        const double clhs231 =     im(tangentetaslave(0,0)); // IM(TANGENTETASLAVE(0,0))
        const double clhs232 =     re(clhs66); // RE(CLHS66)
        const double clhs233 =     Derivative(re(clhs66), lm(0,0)); // DERIVATIVE(RE(CLHS66), LM(0,0))
        const double clhs234 =     im(tangentxislave(0,0)); // IM(TANGENTXISLAVE(0,0))
        const double clhs235 =     re(clhs69); // RE(CLHS69)
        const double clhs236 =     Derivative(re(clhs69), lm(0,0)); // DERIVATIVE(RE(CLHS69), LM(0,0))
        const double clhs237 =     re(clhs67); // RE(CLHS67)
        const double clhs238 =     clhs232 + clhs237;
        const double clhs239 =     re(clhs70); // RE(CLHS70)
        const double clhs240 =     clhs235 + clhs239;
        const double clhs241 =     im(clhs67); // IM(CLHS67)
        const double clhs242 =     clhs226 + clhs241;
        const double clhs243 =     im(clhs70); // IM(CLHS70)
        const double clhs244 =     clhs229 + clhs243;
        const double clhs245 =     clhs225*clhs242 + clhs228*clhs244 + clhs231*clhs238 + clhs234*clhs240;
        const double clhs246 =     re(tangentetaslave(0,1)); // RE(TANGENTETASLAVE(0,1))
        const double clhs247 =     re(tangentxislave(0,1)); // RE(TANGENTXISLAVE(0,1))
        const double clhs248 =     im(tangentetaslave(0,1)); // IM(TANGENTETASLAVE(0,1))
        const double clhs249 =     im(tangentxislave(0,1)); // IM(TANGENTXISLAVE(0,1))
        const double clhs250 =     clhs238*clhs248 + clhs240*clhs249 + clhs242*clhs246 + clhs244*clhs247;
        const double clhs251 =     clhs225*clhs238 + clhs228*clhs240 - clhs231*clhs242 - clhs234*clhs244;
        const double clhs252 =     clhs238*clhs246 + clhs240*clhs247 - clhs242*clhs248 - clhs244*clhs249;
        const double clhs253 =     clhs245*(clhs225*clhs227 + clhs228*clhs230 + clhs231*clhs233 + clhs234*clhs236) + clhs250*(clhs227*clhs246 + clhs230*clhs247 + clhs233*clhs248 + clhs236*clhs249) + clhs251*(clhs225*clhs233 - clhs227*clhs231 + clhs228*clhs236 - clhs230*clhs234) + clhs252*(-clhs227*clhs248 - clhs230*clhs249 + clhs233*clhs246 + clhs236*clhs247);
        const double clhs254 =     clhs217 - clhs219 - clhs221*clhs222 + clhs224*clhs253;
        const double clhs255 =     normalslave(0,1)*(normalslave(0,0)*scale_factor);
        const double clhs256 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs257 =     clhs256*clhs75*clhs77*mu[0];
        const double clhs258 =     -clhs222*clhs257 + clhs255;
        const double clhs259 =     clhs75*clhs77*mu[0]*normalslave(0,1)*scale_factor;
        const double clhs260 =     clhs259*clhs72;
        const double clhs261 =     Derivative(im(clhs67), lm(0,1)); // DERIVATIVE(IM(CLHS67), LM(0,1))
        const double clhs262 =     Derivative(im(clhs70), lm(0,1)); // DERIVATIVE(IM(CLHS70), LM(0,1))
        const double clhs263 =     Derivative(re(clhs67), lm(0,1)); // DERIVATIVE(RE(CLHS67), LM(0,1))
        const double clhs264 =     Derivative(re(clhs70), lm(0,1)); // DERIVATIVE(RE(CLHS70), LM(0,1))
        const double clhs265 =     clhs245*(clhs225*clhs261 + clhs228*clhs262 + clhs231*clhs263 + clhs234*clhs264) + clhs250*(clhs246*clhs261 + clhs247*clhs262 + clhs248*clhs263 + clhs249*clhs264) + clhs251*(clhs225*clhs263 + clhs228*clhs264 - clhs231*clhs261 - clhs234*clhs262) + clhs252*(clhs246*clhs263 + clhs247*clhs264 - clhs248*clhs261 - clhs249*clhs262);
        const double clhs266 =     clhs224*clhs265 + clhs258 - clhs260;
        const double clhs267 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs268 =     scale_factor*std::pow(tangentetaslave(1,0), 2);
        const double clhs269 =     scale_factor*std::pow(tangentxislave(1,0), 2);
        const double clhs270 =     std::pow(clhs76, -3.0L/2.0L);
        const double clhs271 =     re(tangentetaslave(1,0)); // RE(TANGENTETASLAVE(1,0))
        const double clhs272 =     im(clhs2); // IM(CLHS2)
        const double clhs273 =     Derivative(im(clhs2), lm(1,0)); // DERIVATIVE(IM(CLHS2), LM(1,0))
        const double clhs274 =     re(tangentxislave(1,0)); // RE(TANGENTXISLAVE(1,0))
        const double clhs275 =     im(clhs20); // IM(CLHS20)
        const double clhs276 =     Derivative(im(clhs20), lm(1,0)); // DERIVATIVE(IM(CLHS20), LM(1,0))
        const double clhs277 =     im(tangentetaslave(1,0)); // IM(TANGENTETASLAVE(1,0))
        const double clhs278 =     re(clhs2); // RE(CLHS2)
        const double clhs279 =     Derivative(re(clhs2), lm(1,0)); // DERIVATIVE(RE(CLHS2), LM(1,0))
        const double clhs280 =     im(tangentxislave(1,0)); // IM(TANGENTXISLAVE(1,0))
        const double clhs281 =     re(clhs20); // RE(CLHS20)
        const double clhs282 =     Derivative(re(clhs20), lm(1,0)); // DERIVATIVE(RE(CLHS20), LM(1,0))
        const double clhs283 =     re(clhs3); // RE(CLHS3)
        const double clhs284 =     clhs278 + clhs283;
        const double clhs285 =     re(clhs21); // RE(CLHS21)
        const double clhs286 =     clhs281 + clhs285;
        const double clhs287 =     im(clhs3); // IM(CLHS3)
        const double clhs288 =     clhs272 + clhs287;
        const double clhs289 =     im(clhs21); // IM(CLHS21)
        const double clhs290 =     clhs275 + clhs289;
        const double clhs291 =     clhs271*clhs288 + clhs274*clhs290 + clhs277*clhs284 + clhs280*clhs286;
        const double clhs292 =     re(tangentetaslave(1,1)); // RE(TANGENTETASLAVE(1,1))
        const double clhs293 =     re(tangentxislave(1,1)); // RE(TANGENTXISLAVE(1,1))
        const double clhs294 =     im(tangentetaslave(1,1)); // IM(TANGENTETASLAVE(1,1))
        const double clhs295 =     im(tangentxislave(1,1)); // IM(TANGENTXISLAVE(1,1))
        const double clhs296 =     clhs284*clhs294 + clhs286*clhs295 + clhs288*clhs292 + clhs290*clhs293;
        const double clhs297 =     clhs271*clhs284 + clhs274*clhs286 - clhs277*clhs288 - clhs280*clhs290;
        const double clhs298 =     clhs284*clhs292 + clhs286*clhs293 - clhs288*clhs294 - clhs290*clhs295;
        const double clhs299 =     clhs291*(clhs271*clhs273 + clhs274*clhs276 + clhs277*clhs279 + clhs280*clhs282) + clhs296*(clhs273*clhs292 + clhs276*clhs293 + clhs279*clhs294 + clhs282*clhs295) + clhs297*(clhs271*clhs279 - clhs273*clhs277 + clhs274*clhs282 - clhs276*clhs280) + clhs298*(-clhs273*clhs294 - clhs276*clhs295 + clhs279*clhs292 + clhs282*clhs293);
        const double clhs300 =     clhs270*clhs299*clhs40*clhs72*clhs75*mu[0];
        const double clhs301 =     normalslave(1,0)*normalslave(1,1)*scale_factor;
        const double clhs302 =     scale_factor*tangentetaslave(1,0)*tangentetaslave(1,1);
        const double clhs303 =     scale_factor*tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs304 =     clhs0*clhs301 + clhs0*clhs302 + clhs0*clhs303;
        const double clhs305 =     Derivative(im(clhs3), lm(1,1)); // DERIVATIVE(IM(CLHS3), LM(1,1))
        const double clhs306 =     Derivative(im(clhs21), lm(1,1)); // DERIVATIVE(IM(CLHS21), LM(1,1))
        const double clhs307 =     Derivative(re(clhs3), lm(1,1)); // DERIVATIVE(RE(CLHS3), LM(1,1))
        const double clhs308 =     Derivative(re(clhs21), lm(1,1)); // DERIVATIVE(RE(CLHS21), LM(1,1))
        const double clhs309 =     clhs291*(clhs271*clhs305 + clhs274*clhs306 + clhs277*clhs307 + clhs280*clhs308) + clhs296*(clhs292*clhs305 + clhs293*clhs306 + clhs294*clhs307 + clhs295*clhs308) + clhs297*(clhs271*clhs307 + clhs274*clhs308 - clhs277*clhs305 - clhs280*clhs306) + clhs298*(clhs292*clhs307 + clhs293*clhs308 - clhs294*clhs305 - clhs295*clhs306);
        const double clhs310 =     clhs270*clhs309*clhs40*clhs72*clhs75*mu[0];
        const double clhs311 =     clhs18*tangentetaslave(1,1);
        const double clhs312 =     clhs23*tangentxislave(1,1);
        const double clhs313 =     clhs40*normalslave(0,1);
        const double clhs314 =     clhs44*normalslave(1,1);
        const double clhs315 =     clhs51*penalty_parameter*tangentetaslave(1,1);
        const double clhs316 =     clhs53*penalty_parameter*tangentxislave(1,1);
        const double clhs317 =     clhs60*normalslave(0,1)*penalty_parameter;
        const double clhs318 =     clhs64*normalslave(1,1)*penalty_parameter;
        const double clhs319 =     clhs40*clhs73*clhs75*clhs77*mu[0];
        const double clhs320 =     clhs60*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs321 =     clhs87*penalty_parameter*tangentetaslave(1,1);
        const double clhs322 =     clhs89*penalty_parameter*tangentxislave(1,1);
        const double clhs323 =     clhs94*normalslave(0,1)*penalty_parameter;
        const double clhs324 =     clhs96*normalslave(1,1)*penalty_parameter;
        const double clhs325 =     clhs73*clhs75*clhs77*clhs94*mu[0]*penalty_parameter;
        const double clhs326 =     clhs106*penalty_parameter*tangentetaslave(1,1);
        const double clhs327 =     clhs108*penalty_parameter*tangentxislave(1,1);
        const double clhs328 =     clhs115*normalslave(0,1)*penalty_parameter;
        const double clhs329 =     clhs119*normalslave(1,1)*penalty_parameter;
        const double clhs330 =     clhs115*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs331 =     clhs129*penalty_parameter*tangentetaslave(1,1);
        const double clhs332 =     clhs131*penalty_parameter*tangentxislave(1,1);
        const double clhs333 =     clhs136*normalslave(0,1)*penalty_parameter;
        const double clhs334 =     clhs138*normalslave(1,1)*penalty_parameter;
        const double clhs335 =     clhs136*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs336 =     clhs148*penalty_parameter*tangentetaslave(1,1);
        const double clhs337 =     clhs150*penalty_parameter*tangentxislave(1,1);
        const double clhs338 =     clhs155*normalslave(0,1)*penalty_parameter;
        const double clhs339 =     clhs157*normalslave(1,1)*penalty_parameter;
        const double clhs340 =     clhs155*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs341 =     clhs167*penalty_parameter*tangentetaslave(1,1);
        const double clhs342 =     clhs169*penalty_parameter*tangentxislave(1,1);
        const double clhs343 =     clhs174*normalslave(0,1)*penalty_parameter;
        const double clhs344 =     clhs176*normalslave(1,1)*penalty_parameter;
        const double clhs345 =     clhs174*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs346 =     clhs186*penalty_parameter*tangentetaslave(1,1);
        const double clhs347 =     clhs188*penalty_parameter*tangentxislave(1,1);
        const double clhs348 =     clhs193*normalslave(0,1)*penalty_parameter;
        const double clhs349 =     clhs195*normalslave(1,1)*penalty_parameter;
        const double clhs350 =     clhs193*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs351 =     clhs205*penalty_parameter*tangentetaslave(1,1);
        const double clhs352 =     clhs207*penalty_parameter*tangentxislave(1,1);
        const double clhs353 =     clhs212*normalslave(0,1)*penalty_parameter;
        const double clhs354 =     clhs214*normalslave(1,1)*penalty_parameter;
        const double clhs355 =     clhs212*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs356 =     clhs218*clhs73;
        const double clhs357 =     clhs222*clhs223*clhs73*clhs77*mu[0];
        const double clhs358 =     clhs253*clhs357 + clhs258 - clhs356;
        const double clhs359 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs360 =     clhs259*clhs73;
        const double clhs361 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs362 =     clhs361*clhs75*clhs77*mu[0];
        const double clhs363 =     -clhs222*clhs362 + clhs265*clhs357 + clhs359 - clhs360;
        const double clhs364 =     clhs270*clhs299*clhs40*clhs73*clhs75*mu[0];
        const double clhs365 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs366 =     scale_factor*std::pow(tangentetaslave(1,1), 2);
        const double clhs367 =     scale_factor*std::pow(tangentxislave(1,1), 2);
        const double clhs368 =     clhs270*clhs309*clhs40*clhs73*clhs75*mu[0];
        const double clhs369 =     clhs11*clhs301 + clhs11*clhs302 + clhs11*clhs303;
        const double clhs370 =     clhs222*normalslave(0,0);
        const double clhs371 =     clhs42 - clhs43;
        const double clhs372 =     clhs371*normalslave(1,0);
        const double clhs373 =     clhs58 - clhs59;
        const double clhs374 =     clhs373*normalslave(0,0)*penalty_parameter;
        const double clhs375 =     clhs62 - clhs63;
        const double clhs376 =     clhs375*normalslave(1,0)*penalty_parameter;
        const double clhs377 =     clhs222*clhs72*clhs75*clhs77*mu[0];
        const double clhs378 =     clhs373*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs379 =     clhs113 - clhs114;
        const double clhs380 =     clhs379*normalslave(0,0)*penalty_parameter;
        const double clhs381 =     clhs117 - clhs118;
        const double clhs382 =     clhs381*normalslave(1,0)*penalty_parameter;
        const double clhs383 =     clhs379*clhs72*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs384 =     clhs223*clhs40*clhs72*clhs77*mu[0];
        const double clhs385 =     clhs219 - clhs221*clhs40 + clhs253*clhs384;
        const double clhs386 =     -clhs217 + clhs385;
        const double clhs387 =     -clhs257*clhs40;
        const double clhs388 =     -clhs255 + clhs387;
        const double clhs389 =     clhs260 + clhs265*clhs384;
        const double clhs390 =     clhs388 + clhs389;
        const double clhs391 =     clhs222*clhs270*clhs299*clhs72*clhs75*mu[0];
        const double clhs392 =     clhs301*clhs6 + clhs302*clhs6 + clhs303*clhs6;
        const double clhs393 =     clhs222*clhs270*clhs309*clhs72*clhs75*mu[0];
        const double clhs394 =     clhs222*normalslave(0,1);
        const double clhs395 =     clhs371*normalslave(1,1);
        const double clhs396 =     clhs373*normalslave(0,1)*penalty_parameter;
        const double clhs397 =     clhs375*normalslave(1,1)*penalty_parameter;
        const double clhs398 =     clhs222*clhs73*clhs75*clhs77*mu[0];
        const double clhs399 =     clhs373*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs400 =     clhs379*normalslave(0,1)*penalty_parameter;
        const double clhs401 =     clhs381*normalslave(1,1)*penalty_parameter;
        const double clhs402 =     clhs379*clhs73*clhs75*clhs77*mu[0]*penalty_parameter;
        const double clhs403 =     clhs223*clhs40*clhs73*clhs77*mu[0];
        const double clhs404 =     clhs253*clhs403 + clhs356;
        const double clhs405 =     clhs388 + clhs404;
        const double clhs406 =     clhs265*clhs403 + clhs360 - clhs362*clhs40;
        const double clhs407 =     -clhs359 + clhs406;
        const double clhs408 =     clhs222*clhs270*clhs299*clhs73*clhs75*mu[0];
        const double clhs409 =     clhs222*clhs270*clhs309*clhs73*clhs75*mu[0];
        const double clhs410 =     clhs301*clhs8 + clhs302*clhs8 + clhs303*clhs8;
        const double clhs411 =     clhs373*scale_factor;
        const double clhs412 =     clhs220*clhs72;
        const double clhs413 =     0.5*clhs75*clhs77*mu[0];
        const double clhs414 =     clhs256*clhs73;
        const double clhs415 =     -clhs412*clhs413 - clhs413*clhs414 + normalslave(0,0);
        const double clhs416 =     clhs94*scale_factor;
        const double clhs417 =     clhs379*scale_factor;
        const double clhs418 =     clhs136*scale_factor;
        const double clhs419 =     clhs155*scale_factor;
        const double clhs420 =     clhs174*scale_factor;
        const double clhs421 =     clhs193*scale_factor;
        const double clhs422 =     clhs212*scale_factor;
        const double clhs423 =     1.0/penalty_parameter;
        const double clhs424 =     0.5*clhs423*scale_factor;
        const double clhs425 =     clhs220*scale_factor + clhs385;
        const double clhs426 =     clhs256*scale_factor + clhs387;
        const double clhs427 =     clhs404 + clhs426;
        const double clhs428 =     clhs389 + clhs426;
        const double clhs429 =     clhs361*scale_factor + clhs406;
        const double clhs430 =     0.5*clhs222*clhs270*clhs423*clhs75*mu[0]*scale_factor*(clhs412 + clhs414);
        const double clhs431 =     clhs361*clhs73;
        const double clhs432 =     clhs256*clhs72;
        const double clhs433 =     -clhs413*clhs431 - clhs413*clhs432 + normalslave(0,1);
        const double clhs434 =     0.5*clhs222*clhs270*clhs423*clhs75*mu[0]*scale_factor*(clhs431 + clhs432);
    
        lhs(0,0)=clhs0*clhs52 + clhs0*clhs54 + clhs0*clhs65 + clhs1*clhs19 + clhs1*clhs24 - clhs1*clhs45 + clhs25*clhs61 - clhs25*clhs79 - clhs26*clhs41 + clhs26*clhs78;
        lhs(0,1)=clhs0*clhs88 + clhs0*clhs90 - clhs0*clhs97 + clhs19*clhs80 + clhs24*clhs80 - clhs25*clhs95 + clhs25*clhs98 - clhs41*clhs81 - clhs45*clhs80 + clhs78*clhs81;
        lhs(0,2)=clhs0*clhs107 + clhs0*clhs109 + clhs0*clhs120 - clhs100*clhs41 + clhs100*clhs78 + clhs116*clhs25 - clhs121*clhs25 + clhs19*clhs99 + clhs24*clhs99 - clhs45*clhs99;
        lhs(0,3)=clhs0*clhs130 + clhs0*clhs132 - clhs0*clhs139 + clhs122*clhs19 + clhs122*clhs24 - clhs122*clhs45 - clhs123*clhs41 + clhs123*clhs78 - clhs137*clhs25 + clhs140*clhs25;
        lhs(0,4)=clhs0*clhs149 + clhs0*clhs151 - clhs0*clhs158 + clhs141*clhs19 + clhs141*clhs24 - clhs141*clhs45 - clhs142*clhs41 + clhs142*clhs78 - clhs156*clhs25 + clhs159*clhs25;
        lhs(0,5)=clhs0*clhs168 + clhs0*clhs170 - clhs0*clhs177 + clhs160*clhs19 + clhs160*clhs24 - clhs160*clhs45 - clhs161*clhs41 + clhs161*clhs78 - clhs175*clhs25 + clhs178*clhs25;
        lhs(0,6)=clhs0*clhs187 + clhs0*clhs189 - clhs0*clhs196 + clhs179*clhs19 + clhs179*clhs24 - clhs179*clhs45 - clhs180*clhs41 + clhs180*clhs78 - clhs194*clhs25 + clhs197*clhs25;
        lhs(0,7)=clhs0*clhs206 + clhs0*clhs208 - clhs0*clhs215 + clhs19*clhs198 + clhs198*clhs24 - clhs198*clhs45 - clhs199*clhs41 + clhs199*clhs78 - clhs213*clhs25 + clhs216*clhs25;
        lhs(0,8)=clhs25*clhs254;
        lhs(0,9)=clhs25*clhs266;
        lhs(0,10)=clhs0*clhs267 + clhs0*clhs268 + clhs0*clhs269 - clhs25*clhs300;
        lhs(0,11)=-clhs25*clhs310 + clhs304;
        lhs(1,0)=clhs0*clhs315 + clhs0*clhs316 + clhs0*clhs318 + clhs1*clhs311 + clhs1*clhs312 - clhs1*clhs314 + clhs25*clhs317 - clhs25*clhs320 - clhs26*clhs313 + clhs26*clhs319;
        lhs(1,1)=clhs0*clhs321 + clhs0*clhs322 - clhs0*clhs324 - clhs25*clhs323 + clhs25*clhs325 + clhs311*clhs80 + clhs312*clhs80 - clhs313*clhs81 - clhs314*clhs80 + clhs319*clhs81;
        lhs(1,2)=clhs0*clhs326 + clhs0*clhs327 + clhs0*clhs329 - clhs100*clhs313 + clhs100*clhs319 + clhs25*clhs328 - clhs25*clhs330 + clhs311*clhs99 + clhs312*clhs99 - clhs314*clhs99;
        lhs(1,3)=clhs0*clhs331 + clhs0*clhs332 - clhs0*clhs334 + clhs122*clhs311 + clhs122*clhs312 - clhs122*clhs314 - clhs123*clhs313 + clhs123*clhs319 - clhs25*clhs333 + clhs25*clhs335;
        lhs(1,4)=clhs0*clhs336 + clhs0*clhs337 - clhs0*clhs339 + clhs141*clhs311 + clhs141*clhs312 - clhs141*clhs314 - clhs142*clhs313 + clhs142*clhs319 - clhs25*clhs338 + clhs25*clhs340;
        lhs(1,5)=clhs0*clhs341 + clhs0*clhs342 - clhs0*clhs344 + clhs160*clhs311 + clhs160*clhs312 - clhs160*clhs314 - clhs161*clhs313 + clhs161*clhs319 - clhs25*clhs343 + clhs25*clhs345;
        lhs(1,6)=clhs0*clhs346 + clhs0*clhs347 - clhs0*clhs349 + clhs179*clhs311 + clhs179*clhs312 - clhs179*clhs314 - clhs180*clhs313 + clhs180*clhs319 - clhs25*clhs348 + clhs25*clhs350;
        lhs(1,7)=clhs0*clhs351 + clhs0*clhs352 - clhs0*clhs354 + clhs198*clhs311 + clhs198*clhs312 - clhs198*clhs314 - clhs199*clhs313 + clhs199*clhs319 - clhs25*clhs353 + clhs25*clhs355;
        lhs(1,8)=clhs25*clhs358;
        lhs(1,9)=clhs25*clhs363;
        lhs(1,10)=-clhs25*clhs364 + clhs304;
        lhs(1,11)=clhs0*clhs365 + clhs0*clhs366 + clhs0*clhs367 - clhs25*clhs368;
        lhs(2,0)=clhs11*clhs52 + clhs11*clhs54 + clhs11*clhs65 + clhs19*clhs48 + clhs24*clhs48 + clhs34*clhs61 - clhs34*clhs79 - clhs41*clhs57 - clhs45*clhs48 + clhs57*clhs78;
        lhs(2,1)=clhs11*clhs88 + clhs11*clhs90 - clhs11*clhs97 + clhs19*clhs84 + clhs24*clhs84 - clhs34*clhs95 + clhs34*clhs98 - clhs41*clhs93 - clhs45*clhs84 + clhs78*clhs93;
        lhs(2,2)=clhs103*clhs19 + clhs103*clhs24 - clhs103*clhs45 + clhs107*clhs11 + clhs109*clhs11 + clhs11*clhs120 - clhs112*clhs41 + clhs112*clhs78 + clhs116*clhs34 - clhs121*clhs34;
        lhs(2,3)=clhs11*clhs130 + clhs11*clhs132 - clhs11*clhs139 + clhs126*clhs19 + clhs126*clhs24 - clhs126*clhs45 - clhs135*clhs41 + clhs135*clhs78 - clhs137*clhs34 + clhs140*clhs34;
        lhs(2,4)=clhs11*clhs149 + clhs11*clhs151 - clhs11*clhs158 + clhs145*clhs19 + clhs145*clhs24 - clhs145*clhs45 - clhs154*clhs41 + clhs154*clhs78 - clhs156*clhs34 + clhs159*clhs34;
        lhs(2,5)=clhs11*clhs168 + clhs11*clhs170 - clhs11*clhs177 + clhs164*clhs19 + clhs164*clhs24 - clhs164*clhs45 - clhs173*clhs41 + clhs173*clhs78 - clhs175*clhs34 + clhs178*clhs34;
        lhs(2,6)=clhs11*clhs187 + clhs11*clhs189 - clhs11*clhs196 + clhs183*clhs19 + clhs183*clhs24 - clhs183*clhs45 - clhs192*clhs41 + clhs192*clhs78 - clhs194*clhs34 + clhs197*clhs34;
        lhs(2,7)=clhs11*clhs206 + clhs11*clhs208 - clhs11*clhs215 + clhs19*clhs202 + clhs202*clhs24 - clhs202*clhs45 - clhs211*clhs41 + clhs211*clhs78 - clhs213*clhs34 + clhs216*clhs34;
        lhs(2,8)=clhs254*clhs34;
        lhs(2,9)=clhs266*clhs34;
        lhs(2,10)=clhs11*clhs267 + clhs11*clhs268 + clhs11*clhs269 - clhs300*clhs34;
        lhs(2,11)=-clhs310*clhs34 + clhs369;
        lhs(3,0)=clhs11*clhs315 + clhs11*clhs316 + clhs11*clhs318 + clhs311*clhs48 + clhs312*clhs48 - clhs313*clhs57 - clhs314*clhs48 + clhs317*clhs34 + clhs319*clhs57 - clhs320*clhs34;
        lhs(3,1)=clhs11*clhs321 + clhs11*clhs322 - clhs11*clhs324 + clhs311*clhs84 + clhs312*clhs84 - clhs313*clhs93 - clhs314*clhs84 + clhs319*clhs93 - clhs323*clhs34 + clhs325*clhs34;
        lhs(3,2)=clhs103*clhs311 + clhs103*clhs312 - clhs103*clhs314 + clhs11*clhs326 + clhs11*clhs327 + clhs11*clhs329 - clhs112*clhs313 + clhs112*clhs319 + clhs328*clhs34 - clhs330*clhs34;
        lhs(3,3)=clhs11*clhs331 + clhs11*clhs332 - clhs11*clhs334 + clhs126*clhs311 + clhs126*clhs312 - clhs126*clhs314 - clhs135*clhs313 + clhs135*clhs319 - clhs333*clhs34 + clhs335*clhs34;
        lhs(3,4)=clhs11*clhs336 + clhs11*clhs337 - clhs11*clhs339 + clhs145*clhs311 + clhs145*clhs312 - clhs145*clhs314 - clhs154*clhs313 + clhs154*clhs319 - clhs338*clhs34 + clhs34*clhs340;
        lhs(3,5)=clhs11*clhs341 + clhs11*clhs342 - clhs11*clhs344 + clhs164*clhs311 + clhs164*clhs312 - clhs164*clhs314 - clhs173*clhs313 + clhs173*clhs319 - clhs34*clhs343 + clhs34*clhs345;
        lhs(3,6)=clhs11*clhs346 + clhs11*clhs347 - clhs11*clhs349 + clhs183*clhs311 + clhs183*clhs312 - clhs183*clhs314 - clhs192*clhs313 + clhs192*clhs319 - clhs34*clhs348 + clhs34*clhs350;
        lhs(3,7)=clhs11*clhs351 + clhs11*clhs352 - clhs11*clhs354 + clhs202*clhs311 + clhs202*clhs312 - clhs202*clhs314 - clhs211*clhs313 + clhs211*clhs319 - clhs34*clhs353 + clhs34*clhs355;
        lhs(3,8)=clhs34*clhs358;
        lhs(3,9)=clhs34*clhs363;
        lhs(3,10)=-clhs34*clhs364 + clhs369;
        lhs(3,11)=clhs11*clhs365 + clhs11*clhs366 + clhs11*clhs367 - clhs34*clhs368;
        lhs(4,0)=-clhs19*clhs46 - clhs24*clhs46 + clhs29*clhs374 - clhs29*clhs378 - clhs370*clhs55 - clhs372*clhs46 + clhs376*clhs6 + clhs377*clhs55 - clhs52*clhs6 - clhs54*clhs6;
        lhs(4,1)=-clhs19*clhs82 - clhs24*clhs82 + clhs29*clhs95 - clhs29*clhs98 - clhs370*clhs91 - clhs372*clhs82 + clhs377*clhs91 - clhs6*clhs88 - clhs6*clhs90 + clhs6*clhs97;
        lhs(4,2)=-clhs101*clhs19 - clhs101*clhs24 - clhs101*clhs372 - clhs107*clhs6 - clhs109*clhs6 - clhs110*clhs370 + clhs110*clhs377 + clhs29*clhs380 - clhs29*clhs383 + clhs382*clhs6;
        lhs(4,3)=-clhs124*clhs19 - clhs124*clhs24 - clhs124*clhs372 - clhs130*clhs6 - clhs132*clhs6 - clhs133*clhs370 + clhs133*clhs377 + clhs137*clhs29 + clhs139*clhs6 - clhs140*clhs29;
        lhs(4,4)=-clhs143*clhs19 - clhs143*clhs24 - clhs143*clhs372 - clhs149*clhs6 - clhs151*clhs6 - clhs152*clhs370 + clhs152*clhs377 + clhs156*clhs29 + clhs158*clhs6 - clhs159*clhs29;
        lhs(4,5)=-clhs162*clhs19 - clhs162*clhs24 - clhs162*clhs372 - clhs168*clhs6 - clhs170*clhs6 - clhs171*clhs370 + clhs171*clhs377 + clhs175*clhs29 + clhs177*clhs6 - clhs178*clhs29;
        lhs(4,6)=-clhs181*clhs19 - clhs181*clhs24 - clhs181*clhs372 - clhs187*clhs6 - clhs189*clhs6 - clhs190*clhs370 + clhs190*clhs377 + clhs194*clhs29 + clhs196*clhs6 - clhs197*clhs29;
        lhs(4,7)=-clhs19*clhs200 - clhs200*clhs24 - clhs200*clhs372 - clhs206*clhs6 - clhs208*clhs6 - clhs209*clhs370 + clhs209*clhs377 + clhs213*clhs29 + clhs215*clhs6 - clhs216*clhs29;
        lhs(4,8)=clhs29*clhs386;
        lhs(4,9)=clhs29*clhs390;
        lhs(4,10)=-clhs267*clhs6 - clhs268*clhs6 - clhs269*clhs6 - clhs29*clhs391;
        lhs(4,11)=-clhs29*clhs393 - clhs392;
        lhs(5,0)=clhs29*clhs396 - clhs29*clhs399 - clhs311*clhs46 - clhs312*clhs46 - clhs315*clhs6 - clhs316*clhs6 - clhs394*clhs55 - clhs395*clhs46 + clhs397*clhs6 + clhs398*clhs55;
        lhs(5,1)=clhs29*clhs323 - clhs29*clhs325 - clhs311*clhs82 - clhs312*clhs82 - clhs321*clhs6 - clhs322*clhs6 + clhs324*clhs6 - clhs394*clhs91 - clhs395*clhs82 + clhs398*clhs91;
        lhs(5,2)=-clhs101*clhs311 - clhs101*clhs312 - clhs101*clhs395 - clhs110*clhs394 + clhs110*clhs398 + clhs29*clhs400 - clhs29*clhs402 - clhs326*clhs6 - clhs327*clhs6 + clhs401*clhs6;
        lhs(5,3)=-clhs124*clhs311 - clhs124*clhs312 - clhs124*clhs395 - clhs133*clhs394 + clhs133*clhs398 + clhs29*clhs333 - clhs29*clhs335 - clhs331*clhs6 - clhs332*clhs6 + clhs334*clhs6;
        lhs(5,4)=-clhs143*clhs311 - clhs143*clhs312 - clhs143*clhs395 - clhs152*clhs394 + clhs152*clhs398 + clhs29*clhs338 - clhs29*clhs340 - clhs336*clhs6 - clhs337*clhs6 + clhs339*clhs6;
        lhs(5,5)=-clhs162*clhs311 - clhs162*clhs312 - clhs162*clhs395 - clhs171*clhs394 + clhs171*clhs398 + clhs29*clhs343 - clhs29*clhs345 - clhs341*clhs6 - clhs342*clhs6 + clhs344*clhs6;
        lhs(5,6)=-clhs181*clhs311 - clhs181*clhs312 - clhs181*clhs395 - clhs190*clhs394 + clhs190*clhs398 + clhs29*clhs348 - clhs29*clhs350 - clhs346*clhs6 - clhs347*clhs6 + clhs349*clhs6;
        lhs(5,7)=-clhs200*clhs311 - clhs200*clhs312 - clhs200*clhs395 - clhs209*clhs394 + clhs209*clhs398 + clhs29*clhs353 - clhs29*clhs355 - clhs351*clhs6 - clhs352*clhs6 + clhs354*clhs6;
        lhs(5,8)=clhs29*clhs405;
        lhs(5,9)=clhs29*clhs407;
        lhs(5,10)=-clhs29*clhs408 - clhs392;
        lhs(5,11)=-clhs29*clhs409 - clhs365*clhs6 - clhs366*clhs6 - clhs367*clhs6;
        lhs(6,0)=-clhs19*clhs47 - clhs24*clhs47 + clhs31*clhs374 - clhs31*clhs378 - clhs370*clhs56 - clhs372*clhs47 + clhs376*clhs8 + clhs377*clhs56 - clhs52*clhs8 - clhs54*clhs8;
        lhs(6,1)=-clhs19*clhs83 - clhs24*clhs83 + clhs31*clhs95 - clhs31*clhs98 - clhs370*clhs92 - clhs372*clhs83 + clhs377*clhs92 - clhs8*clhs88 - clhs8*clhs90 + clhs8*clhs97;
        lhs(6,2)=-clhs102*clhs19 - clhs102*clhs24 - clhs102*clhs372 - clhs107*clhs8 - clhs109*clhs8 - clhs111*clhs370 + clhs111*clhs377 + clhs31*clhs380 - clhs31*clhs383 + clhs382*clhs8;
        lhs(6,3)=-clhs125*clhs19 - clhs125*clhs24 - clhs125*clhs372 - clhs130*clhs8 - clhs132*clhs8 - clhs134*clhs370 + clhs134*clhs377 + clhs137*clhs31 + clhs139*clhs8 - clhs140*clhs31;
        lhs(6,4)=-clhs144*clhs19 - clhs144*clhs24 - clhs144*clhs372 - clhs149*clhs8 - clhs151*clhs8 - clhs153*clhs370 + clhs153*clhs377 + clhs156*clhs31 + clhs158*clhs8 - clhs159*clhs31;
        lhs(6,5)=-clhs163*clhs19 - clhs163*clhs24 - clhs163*clhs372 - clhs168*clhs8 - clhs170*clhs8 - clhs172*clhs370 + clhs172*clhs377 + clhs175*clhs31 + clhs177*clhs8 - clhs178*clhs31;
        lhs(6,6)=-clhs182*clhs19 - clhs182*clhs24 - clhs182*clhs372 - clhs187*clhs8 - clhs189*clhs8 - clhs191*clhs370 + clhs191*clhs377 + clhs194*clhs31 + clhs196*clhs8 - clhs197*clhs31;
        lhs(6,7)=-clhs19*clhs201 - clhs201*clhs24 - clhs201*clhs372 - clhs206*clhs8 - clhs208*clhs8 - clhs210*clhs370 + clhs210*clhs377 + clhs213*clhs31 + clhs215*clhs8 - clhs216*clhs31;
        lhs(6,8)=clhs31*clhs386;
        lhs(6,9)=clhs31*clhs390;
        lhs(6,10)=-clhs267*clhs8 - clhs268*clhs8 - clhs269*clhs8 - clhs31*clhs391;
        lhs(6,11)=-clhs31*clhs393 - clhs410;
        lhs(7,0)=clhs31*clhs396 - clhs31*clhs399 - clhs311*clhs47 - clhs312*clhs47 - clhs315*clhs8 - clhs316*clhs8 - clhs394*clhs56 - clhs395*clhs47 + clhs397*clhs8 + clhs398*clhs56;
        lhs(7,1)=clhs31*clhs323 - clhs31*clhs325 - clhs311*clhs83 - clhs312*clhs83 - clhs321*clhs8 - clhs322*clhs8 + clhs324*clhs8 - clhs394*clhs92 - clhs395*clhs83 + clhs398*clhs92;
        lhs(7,2)=-clhs102*clhs311 - clhs102*clhs312 - clhs102*clhs395 - clhs111*clhs394 + clhs111*clhs398 + clhs31*clhs400 - clhs31*clhs402 - clhs326*clhs8 - clhs327*clhs8 + clhs401*clhs8;
        lhs(7,3)=-clhs125*clhs311 - clhs125*clhs312 - clhs125*clhs395 - clhs134*clhs394 + clhs134*clhs398 + clhs31*clhs333 - clhs31*clhs335 - clhs331*clhs8 - clhs332*clhs8 + clhs334*clhs8;
        lhs(7,4)=-clhs144*clhs311 - clhs144*clhs312 - clhs144*clhs395 - clhs153*clhs394 + clhs153*clhs398 + clhs31*clhs338 - clhs31*clhs340 - clhs336*clhs8 - clhs337*clhs8 + clhs339*clhs8;
        lhs(7,5)=-clhs163*clhs311 - clhs163*clhs312 - clhs163*clhs395 - clhs172*clhs394 + clhs172*clhs398 + clhs31*clhs343 - clhs31*clhs345 - clhs341*clhs8 - clhs342*clhs8 + clhs344*clhs8;
        lhs(7,6)=-clhs182*clhs311 - clhs182*clhs312 - clhs182*clhs395 - clhs191*clhs394 + clhs191*clhs398 + clhs31*clhs348 - clhs31*clhs350 - clhs346*clhs8 - clhs347*clhs8 + clhs349*clhs8;
        lhs(7,7)=-clhs201*clhs311 - clhs201*clhs312 - clhs201*clhs395 - clhs210*clhs394 + clhs210*clhs398 + clhs31*clhs353 - clhs31*clhs355 - clhs351*clhs8 - clhs352*clhs8 + clhs354*clhs8;
        lhs(7,8)=clhs31*clhs405;
        lhs(7,9)=clhs31*clhs407;
        lhs(7,10)=-clhs31*clhs408 - clhs410;
        lhs(7,11)=-clhs31*clhs409 - clhs365*clhs8 - clhs366*clhs8 - clhs367*clhs8;
        lhs(8,0)=clhs411*clhs415;
        lhs(8,1)=clhs415*clhs416;
        lhs(8,2)=clhs415*clhs417;
        lhs(8,3)=clhs415*clhs418;
        lhs(8,4)=clhs415*clhs419;
        lhs(8,5)=clhs415*clhs420;
        lhs(8,6)=clhs415*clhs421;
        lhs(8,7)=clhs415*clhs422;
        lhs(8,8)=clhs424*(clhs220*clhs425 + clhs256*clhs427);
        lhs(8,9)=clhs424*(clhs220*clhs428 + clhs256*clhs429);
        lhs(8,10)=-clhs299*clhs430;
        lhs(8,11)=-clhs309*clhs430;
        lhs(9,0)=clhs411*clhs433;
        lhs(9,1)=clhs416*clhs433;
        lhs(9,2)=clhs417*clhs433;
        lhs(9,3)=clhs418*clhs433;
        lhs(9,4)=clhs419*clhs433;
        lhs(9,5)=clhs420*clhs433;
        lhs(9,6)=clhs421*clhs433;
        lhs(9,7)=clhs422*clhs433;
        lhs(9,8)=clhs424*(clhs256*clhs425 + clhs361*clhs427);
        lhs(9,9)=clhs424*(clhs256*clhs428 + clhs361*clhs429);
        lhs(9,10)=-clhs299*clhs434;
        lhs(9,11)=-clhs309*clhs434;
        lhs(10,0)=scale_factor*(clhs375*normalslave(1,0) - clhs51*tangentetaslave(1,0) - clhs53*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs87*tangentetaslave(1,0) - clhs89*tangentxislave(1,0) + clhs96*normalslave(1,0));
        lhs(10,2)=scale_factor*(-clhs106*tangentetaslave(1,0) - clhs108*tangentxislave(1,0) + clhs381*normalslave(1,0));
        lhs(10,3)=scale_factor*(-clhs129*tangentetaslave(1,0) - clhs131*tangentxislave(1,0) + clhs138*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs148*tangentetaslave(1,0) - clhs150*tangentxislave(1,0) + clhs157*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs167*tangentetaslave(1,0) - clhs169*tangentxislave(1,0) + clhs176*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs186*tangentetaslave(1,0) - clhs188*tangentxislave(1,0) + clhs195*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs205*tangentetaslave(1,0) - clhs207*tangentxislave(1,0) + clhs214*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs375*normalslave(1,1) - clhs51*tangentetaslave(1,1) - clhs53*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs87*tangentetaslave(1,1) - clhs89*tangentxislave(1,1) + clhs96*normalslave(1,1));
        lhs(11,2)=scale_factor*(-clhs106*tangentetaslave(1,1) - clhs108*tangentxislave(1,1) + clhs381*normalslave(1,1));
        lhs(11,3)=scale_factor*(-clhs129*tangentetaslave(1,1) - clhs131*tangentxislave(1,1) + clhs138*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs148*tangentetaslave(1,1) - clhs150*tangentxislave(1,1) + clhs157*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs167*tangentetaslave(1,1) - clhs169*tangentxislave(1,1) + clhs176*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs186*tangentetaslave(1,1) - clhs188*tangentxislave(1,1) + clhs195*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs205*tangentetaslave(1,1) - clhs207*tangentxislave(1,1) + clhs214*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }
    else if (rActiveInactive == 8 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(0,1) + clhs9*tangentetaslave(0,0)) + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double clhs16 =     clhs15*tangentetaslave(0,0);
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs18 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs21 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs22 =     -clhs17*clhs6 + clhs19*clhs2 + clhs20*clhs4 - clhs21*clhs7;
        const double clhs23 =     clhs10*clhs19 + clhs11*clhs20 - clhs12*clhs17 - clhs13*clhs21;
        const double clhs24 =     penalty_parameter*(clhs22*tangentetaslave(1,0) + clhs23*tangentetaslave(1,1)) + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double clhs25 =     clhs24*tangentetaslave(1,0);
        const double clhs26 =     penalty_parameter*(clhs14*tangentxislave(0,1) + clhs9*tangentxislave(0,0)) + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double clhs27 =     clhs26*tangentxislave(0,0);
        const double clhs28 =     penalty_parameter*(clhs22*tangentxislave(1,0) + clhs23*tangentxislave(1,1)) + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double clhs29 =     clhs28*tangentxislave(1,0);
        const double clhs30 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs31 =     X1(0,0) + u1(0,0);
        const double clhs32 =     X1(1,0) + u1(1,0);
        const double clhs33 =     X2(0,0) + u2(0,0);
        const double clhs34 =     X2(1,0) + u2(1,0);
        const double clhs35 =     X1(0,1) + u1(0,1);
        const double clhs36 =     X1(1,1) + u1(1,1);
        const double clhs37 =     X2(0,1) + u2(0,1);
        const double clhs38 =     X2(1,1) + u2(1,1);
        const double clhs39 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs33 + clhs3*clhs31 + clhs32*clhs5 - clhs34*clhs8) + normalslave(0,1)*(-clhs0*clhs37 + clhs3*clhs35 + clhs36*clhs5 - clhs38*clhs8));
        const double clhs40 =     -clhs30 + clhs39;
        const double clhs41 =     clhs40*normalslave(0,0);
        const double clhs42 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs43 =     penalty_parameter*(normalslave(1,0)*(-clhs17*clhs33 + clhs19*clhs31 + clhs20*clhs32 - clhs21*clhs34) + normalslave(1,1)*(-clhs17*clhs37 + clhs19*clhs35 + clhs20*clhs36 - clhs21*clhs38));
        const double clhs44 =     -clhs42 + clhs43;
        const double clhs45 =     clhs44*normalslave(1,0);
        const double clhs46 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs48 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs49 =     -clhs1*clhs6 + clhs2*clhs46 + clhs4*clhs47 - clhs48*clhs7;
        const double clhs50 =     -clhs1*clhs12 + clhs10*clhs46 + clhs11*clhs47 - clhs13*clhs48;
        const double clhs51 =     clhs49*tangentetaslave(0,0) + clhs50*tangentetaslave(0,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentetaslave(0,0);
        const double clhs53 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs54 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs55 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs56 =     -clhs18*clhs6 + clhs2*clhs53 + clhs4*clhs54 - clhs55*clhs7;
        const double clhs57 =     clhs10*clhs53 + clhs11*clhs54 - clhs12*clhs18 - clhs13*clhs55;
        const double clhs58 =     clhs56*tangentetaslave(1,0) + clhs57*tangentetaslave(1,1);
        const double clhs59 =     clhs58*penalty_parameter*tangentetaslave(1,0);
        const double clhs60 =     clhs49*tangentxislave(0,0) + clhs50*tangentxislave(0,1);
        const double clhs61 =     clhs60*penalty_parameter*tangentxislave(0,0);
        const double clhs62 =     clhs56*tangentxislave(1,0) + clhs57*tangentxislave(1,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentxislave(1,0);
        const double clhs64 =     normalslave(0,1)*(-clhs1*clhs37 + clhs35*clhs46 + clhs36*clhs47 - clhs38*clhs48);
        const double clhs65 =     normalslave(0,0)*(clhs0 + clhs1*clhs33 - clhs31*clhs46 - clhs32*clhs47 + clhs34*clhs48);
        const double clhs66 =     -clhs64 + clhs65;
        const double clhs67 =     clhs66*normalslave(0,0)*penalty_parameter;
        const double clhs68 =     normalslave(1,1)*(-clhs18*clhs37 + clhs35*clhs53 + clhs36*clhs54 - clhs38*clhs55);
        const double clhs69 =     normalslave(1,0)*(clhs17 + clhs18*clhs33 - clhs31*clhs53 - clhs32*clhs54 + clhs34*clhs55);
        const double clhs70 =     -clhs68 + clhs69;
        const double clhs71 =     clhs70*normalslave(1,0)*penalty_parameter;
        const double clhs72 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs73 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs74 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs75 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs76 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs77 =     clhs2*clhs74 + clhs4*clhs75 - clhs6*clhs72 - clhs7*clhs76;
        const double clhs78 =     clhs10*clhs74 + clhs11*clhs75 - clhs12*clhs72 - clhs13*clhs76;
        const double clhs79 =     clhs77*tangentetaslave(0,0) + clhs78*tangentetaslave(0,1);
        const double clhs80 =     clhs79*penalty_parameter*tangentetaslave(0,0);
        const double clhs81 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs82 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     clhs2*clhs81 + clhs4*clhs82 - clhs6*clhs73 - clhs7*clhs83;
        const double clhs85 =     clhs10*clhs81 + clhs11*clhs82 - clhs12*clhs73 - clhs13*clhs83;
        const double clhs86 =     clhs84*tangentetaslave(1,0) + clhs85*tangentetaslave(1,1);
        const double clhs87 =     clhs86*penalty_parameter*tangentetaslave(1,0);
        const double clhs88 =     clhs77*tangentxislave(0,0) + clhs78*tangentxislave(0,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentxislave(0,0);
        const double clhs90 =     clhs84*tangentxislave(1,0) + clhs85*tangentxislave(1,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(1,0);
        const double clhs92 =     normalslave(0,0)*(clhs31*clhs74 + clhs32*clhs75 - clhs33*clhs72 - clhs34*clhs76) - normalslave(0,1)*(clhs0 - clhs35*clhs74 - clhs36*clhs75 + clhs37*clhs72 + clhs38*clhs76);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     normalslave(1,0)*(clhs31*clhs81 + clhs32*clhs82 - clhs33*clhs73 - clhs34*clhs83) - normalslave(1,1)*(clhs17 - clhs35*clhs81 - clhs36*clhs82 + clhs37*clhs73 + clhs38*clhs83);
        const double clhs95 =     clhs94*normalslave(1,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs97 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs98 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs99 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs100 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs101 =     -clhs100*clhs7 + clhs2*clhs98 + clhs4*clhs99 - clhs6*clhs96;
        const double clhs102 =     clhs10*clhs98 - clhs100*clhs13 + clhs11*clhs99 - clhs12*clhs96;
        const double clhs103 =     clhs101*tangentetaslave(0,0) + clhs102*tangentetaslave(0,1);
        const double clhs104 =     clhs103*penalty_parameter*tangentetaslave(0,0);
        const double clhs105 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs106 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs107 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs108 =     clhs105*clhs2 + clhs106*clhs4 - clhs107*clhs7 - clhs6*clhs97;
        const double clhs109 =     clhs10*clhs105 + clhs106*clhs11 - clhs107*clhs13 - clhs12*clhs97;
        const double clhs110 =     clhs108*tangentetaslave(1,0) + clhs109*tangentetaslave(1,1);
        const double clhs111 =     clhs110*penalty_parameter*tangentetaslave(1,0);
        const double clhs112 =     clhs101*tangentxislave(0,0) + clhs102*tangentxislave(0,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentxislave(0,0);
        const double clhs114 =     clhs108*tangentxislave(1,0) + clhs109*tangentxislave(1,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(1,0);
        const double clhs116 =     normalslave(0,1)*(-clhs100*clhs38 + clhs35*clhs98 + clhs36*clhs99 - clhs37*clhs96);
        const double clhs117 =     normalslave(0,0)*(clhs100*clhs34 - clhs31*clhs98 - clhs32*clhs99 + clhs33*clhs96 + clhs8);
        const double clhs118 =     -clhs116 + clhs117;
        const double clhs119 =     clhs118*normalslave(0,0)*penalty_parameter;
        const double clhs120 =     normalslave(1,1)*(clhs105*clhs35 + clhs106*clhs36 - clhs107*clhs38 - clhs37*clhs97);
        const double clhs121 =     normalslave(1,0)*(-clhs105*clhs31 - clhs106*clhs32 + clhs107*clhs34 + clhs21 + clhs33*clhs97);
        const double clhs122 =     -clhs120 + clhs121;
        const double clhs123 =     clhs122*normalslave(1,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs125 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs126 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs128 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs129 =     -clhs124*clhs6 + clhs126*clhs2 + clhs127*clhs4 - clhs128*clhs7;
        const double clhs130 =     clhs10*clhs126 + clhs11*clhs127 - clhs12*clhs124 - clhs128*clhs13;
        const double clhs131 =     clhs129*tangentetaslave(0,0) + clhs130*tangentetaslave(0,1);
        const double clhs132 =     clhs131*penalty_parameter*tangentetaslave(0,0);
        const double clhs133 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs134 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs135 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs136 =     -clhs125*clhs6 + clhs133*clhs2 + clhs134*clhs4 - clhs135*clhs7;
        const double clhs137 =     clhs10*clhs133 + clhs11*clhs134 - clhs12*clhs125 - clhs13*clhs135;
        const double clhs138 =     clhs136*tangentetaslave(1,0) + clhs137*tangentetaslave(1,1);
        const double clhs139 =     clhs138*penalty_parameter*tangentetaslave(1,0);
        const double clhs140 =     clhs129*tangentxislave(0,0) + clhs130*tangentxislave(0,1);
        const double clhs141 =     clhs140*penalty_parameter*tangentxislave(0,0);
        const double clhs142 =     clhs136*tangentxislave(1,0) + clhs137*tangentxislave(1,1);
        const double clhs143 =     clhs142*penalty_parameter*tangentxislave(1,0);
        const double clhs144 =     normalslave(0,0)*(-clhs124*clhs33 + clhs126*clhs31 + clhs127*clhs32 - clhs128*clhs34) - normalslave(0,1)*(clhs124*clhs37 - clhs126*clhs35 - clhs127*clhs36 + clhs128*clhs38 + clhs8);
        const double clhs145 =     clhs144*normalslave(0,0)*penalty_parameter;
        const double clhs146 =     normalslave(1,0)*(-clhs125*clhs33 + clhs133*clhs31 + clhs134*clhs32 - clhs135*clhs34) - normalslave(1,1)*(clhs125*clhs37 - clhs133*clhs35 - clhs134*clhs36 + clhs135*clhs38 + clhs21);
        const double clhs147 =     clhs146*normalslave(1,0)*penalty_parameter;
        const double clhs148 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs150 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs151 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs152 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs153 =     -clhs148*clhs6 + clhs150*clhs2 + clhs151*clhs4 - clhs152*clhs7;
        const double clhs154 =     clhs10*clhs150 + clhs11*clhs151 - clhs12*clhs148 - clhs13*clhs152;
        const double clhs155 =     clhs153*tangentetaslave(0,0) + clhs154*tangentetaslave(0,1);
        const double clhs156 =     clhs155*penalty_parameter*tangentetaslave(0,0);
        const double clhs157 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs158 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs159 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs160 =     -clhs149*clhs6 + clhs157*clhs2 + clhs158*clhs4 - clhs159*clhs7;
        const double clhs161 =     clhs10*clhs157 + clhs11*clhs158 - clhs12*clhs149 - clhs13*clhs159;
        const double clhs162 =     clhs160*tangentetaslave(1,0) + clhs161*tangentetaslave(1,1);
        const double clhs163 =     clhs162*penalty_parameter*tangentetaslave(1,0);
        const double clhs164 =     clhs153*tangentxislave(0,0) + clhs154*tangentxislave(0,1);
        const double clhs165 =     clhs164*penalty_parameter*tangentxislave(0,0);
        const double clhs166 =     clhs160*tangentxislave(1,0) + clhs161*tangentxislave(1,1);
        const double clhs167 =     clhs166*penalty_parameter*tangentxislave(1,0);
        const double clhs168 =     normalslave(0,0)*(-clhs148*clhs33 + clhs150*clhs31 + clhs151*clhs32 - clhs152*clhs34 + clhs3) + normalslave(0,1)*(-clhs148*clhs37 + clhs150*clhs35 + clhs151*clhs36 - clhs152*clhs38);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     normalslave(1,0)*(-clhs149*clhs33 + clhs157*clhs31 + clhs158*clhs32 - clhs159*clhs34 + clhs19) + normalslave(1,1)*(-clhs149*clhs37 + clhs157*clhs35 + clhs158*clhs36 - clhs159*clhs38);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs173 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs174 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs175 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs176 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs177 =     -clhs172*clhs6 + clhs174*clhs2 + clhs175*clhs4 - clhs176*clhs7;
        const double clhs178 =     clhs10*clhs174 + clhs11*clhs175 - clhs12*clhs172 - clhs13*clhs176;
        const double clhs179 =     clhs177*tangentetaslave(0,0) + clhs178*tangentetaslave(0,1);
        const double clhs180 =     clhs179*penalty_parameter*tangentetaslave(0,0);
        const double clhs181 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs182 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs183 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs184 =     -clhs173*clhs6 + clhs181*clhs2 + clhs182*clhs4 - clhs183*clhs7;
        const double clhs185 =     clhs10*clhs181 + clhs11*clhs182 - clhs12*clhs173 - clhs13*clhs183;
        const double clhs186 =     clhs184*tangentetaslave(1,0) + clhs185*tangentetaslave(1,1);
        const double clhs187 =     clhs186*penalty_parameter*tangentetaslave(1,0);
        const double clhs188 =     clhs177*tangentxislave(0,0) + clhs178*tangentxislave(0,1);
        const double clhs189 =     clhs188*penalty_parameter*tangentxislave(0,0);
        const double clhs190 =     clhs184*tangentxislave(1,0) + clhs185*tangentxislave(1,1);
        const double clhs191 =     clhs190*penalty_parameter*tangentxislave(1,0);
        const double clhs192 =     normalslave(0,0)*(-clhs172*clhs33 + clhs174*clhs31 + clhs175*clhs32 - clhs176*clhs34) + normalslave(0,1)*(-clhs172*clhs37 + clhs174*clhs35 + clhs175*clhs36 - clhs176*clhs38 + clhs3);
        const double clhs193 =     clhs192*normalslave(0,0)*penalty_parameter;
        const double clhs194 =     normalslave(1,0)*(-clhs173*clhs33 + clhs181*clhs31 + clhs182*clhs32 - clhs183*clhs34) + normalslave(1,1)*(-clhs173*clhs37 + clhs181*clhs35 + clhs182*clhs36 - clhs183*clhs38 + clhs19);
        const double clhs195 =     clhs194*normalslave(1,0)*penalty_parameter;
        const double clhs196 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs197 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs198 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs199 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs200 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs201 =     -clhs196*clhs6 + clhs198*clhs2 + clhs199*clhs4 - clhs200*clhs7;
        const double clhs202 =     clhs10*clhs198 + clhs11*clhs199 - clhs12*clhs196 - clhs13*clhs200;
        const double clhs203 =     clhs201*tangentetaslave(0,0) + clhs202*tangentetaslave(0,1);
        const double clhs204 =     clhs203*penalty_parameter*tangentetaslave(0,0);
        const double clhs205 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs206 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs207 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs208 =     -clhs197*clhs6 + clhs2*clhs205 + clhs206*clhs4 - clhs207*clhs7;
        const double clhs209 =     clhs10*clhs205 + clhs11*clhs206 - clhs12*clhs197 - clhs13*clhs207;
        const double clhs210 =     clhs208*tangentetaslave(1,0) + clhs209*tangentetaslave(1,1);
        const double clhs211 =     clhs210*penalty_parameter*tangentetaslave(1,0);
        const double clhs212 =     clhs201*tangentxislave(0,0) + clhs202*tangentxislave(0,1);
        const double clhs213 =     clhs212*penalty_parameter*tangentxislave(0,0);
        const double clhs214 =     clhs208*tangentxislave(1,0) + clhs209*tangentxislave(1,1);
        const double clhs215 =     clhs214*penalty_parameter*tangentxislave(1,0);
        const double clhs216 =     normalslave(0,0)*(-clhs196*clhs33 + clhs198*clhs31 + clhs199*clhs32 - clhs200*clhs34 + clhs5) + normalslave(0,1)*(-clhs196*clhs37 + clhs198*clhs35 + clhs199*clhs36 - clhs200*clhs38);
        const double clhs217 =     clhs216*normalslave(0,0)*penalty_parameter;
        const double clhs218 =     normalslave(1,0)*(-clhs197*clhs33 + clhs20 + clhs205*clhs31 + clhs206*clhs32 - clhs207*clhs34) + normalslave(1,1)*(-clhs197*clhs37 + clhs205*clhs35 + clhs206*clhs36 - clhs207*clhs38);
        const double clhs219 =     clhs218*normalslave(1,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs221 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs222 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs223 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs224 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs225 =     clhs2*clhs222 - clhs220*clhs6 + clhs223*clhs4 - clhs224*clhs7;
        const double clhs226 =     clhs10*clhs222 + clhs11*clhs223 - clhs12*clhs220 - clhs13*clhs224;
        const double clhs227 =     clhs225*tangentetaslave(0,0) + clhs226*tangentetaslave(0,1);
        const double clhs228 =     clhs227*penalty_parameter*tangentetaslave(0,0);
        const double clhs229 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs230 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs231 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs232 =     clhs2*clhs229 - clhs221*clhs6 + clhs230*clhs4 - clhs231*clhs7;
        const double clhs233 =     clhs10*clhs229 + clhs11*clhs230 - clhs12*clhs221 - clhs13*clhs231;
        const double clhs234 =     clhs232*tangentetaslave(1,0) + clhs233*tangentetaslave(1,1);
        const double clhs235 =     clhs234*penalty_parameter*tangentetaslave(1,0);
        const double clhs236 =     clhs225*tangentxislave(0,0) + clhs226*tangentxislave(0,1);
        const double clhs237 =     clhs236*penalty_parameter*tangentxislave(0,0);
        const double clhs238 =     clhs232*tangentxislave(1,0) + clhs233*tangentxislave(1,1);
        const double clhs239 =     clhs238*penalty_parameter*tangentxislave(1,0);
        const double clhs240 =     normalslave(0,0)*(-clhs220*clhs33 + clhs222*clhs31 + clhs223*clhs32 - clhs224*clhs34) + normalslave(0,1)*(-clhs220*clhs37 + clhs222*clhs35 + clhs223*clhs36 - clhs224*clhs38 + clhs5);
        const double clhs241 =     clhs240*normalslave(0,0)*penalty_parameter;
        const double clhs242 =     normalslave(1,0)*(-clhs221*clhs33 + clhs229*clhs31 + clhs230*clhs32 - clhs231*clhs34) + normalslave(1,1)*(clhs20 - clhs221*clhs37 + clhs229*clhs35 + clhs230*clhs36 - clhs231*clhs38);
        const double clhs243 =     clhs242*normalslave(1,0)*penalty_parameter;
        const double clhs244 =     scale_factor*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        const double clhs245 =     scale_factor*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs246 =     clhs0*clhs245;
        const double clhs247 =     scale_factor*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        const double clhs248 =     scale_factor*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
        const double clhs249 =     clhs17*clhs248;
        const double clhs250 =     clhs15*tangentetaslave(0,1);
        const double clhs251 =     clhs24*tangentetaslave(1,1);
        const double clhs252 =     clhs26*tangentxislave(0,1);
        const double clhs253 =     clhs28*tangentxislave(1,1);
        const double clhs254 =     clhs40*normalslave(0,1);
        const double clhs255 =     clhs44*normalslave(1,1);
        const double clhs256 =     clhs51*penalty_parameter*tangentetaslave(0,1);
        const double clhs257 =     clhs58*penalty_parameter*tangentetaslave(1,1);
        const double clhs258 =     clhs60*penalty_parameter*tangentxislave(0,1);
        const double clhs259 =     clhs62*penalty_parameter*tangentxislave(1,1);
        const double clhs260 =     clhs66*normalslave(0,1)*penalty_parameter;
        const double clhs261 =     clhs70*normalslave(1,1)*penalty_parameter;
        const double clhs262 =     clhs79*penalty_parameter*tangentetaslave(0,1);
        const double clhs263 =     clhs86*penalty_parameter*tangentetaslave(1,1);
        const double clhs264 =     clhs88*penalty_parameter*tangentxislave(0,1);
        const double clhs265 =     clhs90*penalty_parameter*tangentxislave(1,1);
        const double clhs266 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs267 =     clhs94*normalslave(1,1)*penalty_parameter;
        const double clhs268 =     clhs103*penalty_parameter*tangentetaslave(0,1);
        const double clhs269 =     clhs110*penalty_parameter*tangentetaslave(1,1);
        const double clhs270 =     clhs112*penalty_parameter*tangentxislave(0,1);
        const double clhs271 =     clhs114*penalty_parameter*tangentxislave(1,1);
        const double clhs272 =     clhs118*normalslave(0,1)*penalty_parameter;
        const double clhs273 =     clhs122*normalslave(1,1)*penalty_parameter;
        const double clhs274 =     clhs131*penalty_parameter*tangentetaslave(0,1);
        const double clhs275 =     clhs138*penalty_parameter*tangentetaslave(1,1);
        const double clhs276 =     clhs140*penalty_parameter*tangentxislave(0,1);
        const double clhs277 =     clhs142*penalty_parameter*tangentxislave(1,1);
        const double clhs278 =     clhs144*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs146*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs155*penalty_parameter*tangentetaslave(0,1);
        const double clhs281 =     clhs162*penalty_parameter*tangentetaslave(1,1);
        const double clhs282 =     clhs164*penalty_parameter*tangentxislave(0,1);
        const double clhs283 =     clhs166*penalty_parameter*tangentxislave(1,1);
        const double clhs284 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs285 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs286 =     clhs179*penalty_parameter*tangentetaslave(0,1);
        const double clhs287 =     clhs186*penalty_parameter*tangentetaslave(1,1);
        const double clhs288 =     clhs188*penalty_parameter*tangentxislave(0,1);
        const double clhs289 =     clhs190*penalty_parameter*tangentxislave(1,1);
        const double clhs290 =     clhs192*normalslave(0,1)*penalty_parameter;
        const double clhs291 =     clhs194*normalslave(1,1)*penalty_parameter;
        const double clhs292 =     clhs203*penalty_parameter*tangentetaslave(0,1);
        const double clhs293 =     clhs210*penalty_parameter*tangentetaslave(1,1);
        const double clhs294 =     clhs212*penalty_parameter*tangentxislave(0,1);
        const double clhs295 =     clhs214*penalty_parameter*tangentxislave(1,1);
        const double clhs296 =     clhs216*normalslave(0,1)*penalty_parameter;
        const double clhs297 =     clhs218*normalslave(1,1)*penalty_parameter;
        const double clhs298 =     clhs227*penalty_parameter*tangentetaslave(0,1);
        const double clhs299 =     clhs234*penalty_parameter*tangentetaslave(1,1);
        const double clhs300 =     clhs236*penalty_parameter*tangentxislave(0,1);
        const double clhs301 =     clhs238*penalty_parameter*tangentxislave(1,1);
        const double clhs302 =     clhs240*normalslave(0,1)*penalty_parameter;
        const double clhs303 =     clhs242*normalslave(1,1)*penalty_parameter;
        const double clhs304 =     scale_factor*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        const double clhs305 =     scale_factor*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
        const double clhs306 =     clhs245*clhs8;
        const double clhs307 =     clhs21*clhs248;
        const double clhs308 =     clhs30 - clhs39;
        const double clhs309 =     clhs308*normalslave(0,0);
        const double clhs310 =     clhs42 - clhs43;
        const double clhs311 =     clhs310*normalslave(1,0);
        const double clhs312 =     clhs64 - clhs65;
        const double clhs313 =     clhs312*normalslave(0,0)*penalty_parameter;
        const double clhs314 =     clhs68 - clhs69;
        const double clhs315 =     clhs314*normalslave(1,0)*penalty_parameter;
        const double clhs316 =     clhs116 - clhs117;
        const double clhs317 =     clhs316*normalslave(0,0)*penalty_parameter;
        const double clhs318 =     clhs120 - clhs121;
        const double clhs319 =     clhs318*normalslave(1,0)*penalty_parameter;
        const double clhs320 =     -clhs245*clhs3;
        const double clhs321 =     -clhs19*clhs248;
        const double clhs322 =     clhs308*normalslave(0,1);
        const double clhs323 =     clhs310*normalslave(1,1);
        const double clhs324 =     clhs312*normalslave(0,1)*penalty_parameter;
        const double clhs325 =     clhs314*normalslave(1,1)*penalty_parameter;
        const double clhs326 =     clhs316*normalslave(0,1)*penalty_parameter;
        const double clhs327 =     clhs318*normalslave(1,1)*penalty_parameter;
        const double clhs328 =     -clhs245*clhs5;
        const double clhs329 =     -clhs20*clhs248;
    
        lhs(0,0)=clhs0*clhs52 + clhs0*clhs61 + clhs0*clhs67 + clhs1*clhs16 + clhs1*clhs27 - clhs1*clhs41 + clhs17*clhs59 + clhs17*clhs63 + clhs17*clhs71 + clhs18*clhs25 + clhs18*clhs29 - clhs18*clhs45;
        lhs(0,1)=clhs0*clhs80 + clhs0*clhs89 - clhs0*clhs93 + clhs16*clhs72 + clhs17*clhs87 + clhs17*clhs91 - clhs17*clhs95 + clhs25*clhs73 + clhs27*clhs72 + clhs29*clhs73 - clhs41*clhs72 - clhs45*clhs73;
        lhs(0,2)=clhs0*clhs104 + clhs0*clhs113 + clhs0*clhs119 + clhs111*clhs17 + clhs115*clhs17 + clhs123*clhs17 + clhs16*clhs96 + clhs25*clhs97 + clhs27*clhs96 + clhs29*clhs97 - clhs41*clhs96 - clhs45*clhs97;
        lhs(0,3)=clhs0*clhs132 + clhs0*clhs141 - clhs0*clhs145 + clhs124*clhs16 + clhs124*clhs27 - clhs124*clhs41 + clhs125*clhs25 + clhs125*clhs29 - clhs125*clhs45 + clhs139*clhs17 + clhs143*clhs17 - clhs147*clhs17;
        lhs(0,4)=clhs0*clhs156 + clhs0*clhs165 - clhs0*clhs169 + clhs148*clhs16 + clhs148*clhs27 - clhs148*clhs41 + clhs149*clhs25 + clhs149*clhs29 - clhs149*clhs45 + clhs163*clhs17 + clhs167*clhs17 - clhs17*clhs171;
        lhs(0,5)=clhs0*clhs180 + clhs0*clhs189 - clhs0*clhs193 + clhs16*clhs172 + clhs17*clhs187 + clhs17*clhs191 - clhs17*clhs195 + clhs172*clhs27 - clhs172*clhs41 + clhs173*clhs25 + clhs173*clhs29 - clhs173*clhs45;
        lhs(0,6)=clhs0*clhs204 + clhs0*clhs213 - clhs0*clhs217 + clhs16*clhs196 + clhs17*clhs211 + clhs17*clhs215 - clhs17*clhs219 + clhs196*clhs27 - clhs196*clhs41 + clhs197*clhs25 + clhs197*clhs29 - clhs197*clhs45;
        lhs(0,7)=clhs0*clhs228 + clhs0*clhs237 - clhs0*clhs241 + clhs16*clhs220 + clhs17*clhs235 + clhs17*clhs239 - clhs17*clhs243 + clhs220*clhs27 - clhs220*clhs41 + clhs221*clhs25 + clhs221*clhs29 - clhs221*clhs45;
        lhs(0,8)=clhs0*clhs244;
        lhs(0,9)=clhs246;
        lhs(0,10)=clhs17*clhs247;
        lhs(0,11)=clhs249;
        lhs(1,0)=clhs0*clhs256 + clhs0*clhs258 + clhs0*clhs260 + clhs1*clhs250 + clhs1*clhs252 - clhs1*clhs254 + clhs17*clhs257 + clhs17*clhs259 + clhs17*clhs261 + clhs18*clhs251 + clhs18*clhs253 - clhs18*clhs255;
        lhs(1,1)=clhs0*clhs262 + clhs0*clhs264 - clhs0*clhs266 + clhs17*clhs263 + clhs17*clhs265 - clhs17*clhs267 + clhs250*clhs72 + clhs251*clhs73 + clhs252*clhs72 + clhs253*clhs73 - clhs254*clhs72 - clhs255*clhs73;
        lhs(1,2)=clhs0*clhs268 + clhs0*clhs270 + clhs0*clhs272 + clhs17*clhs269 + clhs17*clhs271 + clhs17*clhs273 + clhs250*clhs96 + clhs251*clhs97 + clhs252*clhs96 + clhs253*clhs97 - clhs254*clhs96 - clhs255*clhs97;
        lhs(1,3)=clhs0*clhs274 + clhs0*clhs276 - clhs0*clhs278 + clhs124*clhs250 + clhs124*clhs252 - clhs124*clhs254 + clhs125*clhs251 + clhs125*clhs253 - clhs125*clhs255 + clhs17*clhs275 + clhs17*clhs277 - clhs17*clhs279;
        lhs(1,4)=clhs0*clhs280 + clhs0*clhs282 - clhs0*clhs284 + clhs148*clhs250 + clhs148*clhs252 - clhs148*clhs254 + clhs149*clhs251 + clhs149*clhs253 - clhs149*clhs255 + clhs17*clhs281 + clhs17*clhs283 - clhs17*clhs285;
        lhs(1,5)=clhs0*clhs286 + clhs0*clhs288 - clhs0*clhs290 + clhs17*clhs287 + clhs17*clhs289 - clhs17*clhs291 + clhs172*clhs250 + clhs172*clhs252 - clhs172*clhs254 + clhs173*clhs251 + clhs173*clhs253 - clhs173*clhs255;
        lhs(1,6)=clhs0*clhs292 + clhs0*clhs294 - clhs0*clhs296 + clhs17*clhs293 + clhs17*clhs295 - clhs17*clhs297 + clhs196*clhs250 + clhs196*clhs252 - clhs196*clhs254 + clhs197*clhs251 + clhs197*clhs253 - clhs197*clhs255;
        lhs(1,7)=clhs0*clhs298 + clhs0*clhs300 - clhs0*clhs302 + clhs17*clhs299 + clhs17*clhs301 - clhs17*clhs303 + clhs220*clhs250 + clhs220*clhs252 - clhs220*clhs254 + clhs221*clhs251 + clhs221*clhs253 - clhs221*clhs255;
        lhs(1,8)=clhs246;
        lhs(1,9)=clhs0*clhs304;
        lhs(1,10)=clhs249;
        lhs(1,11)=clhs17*clhs305;
        lhs(2,0)=clhs16*clhs48 + clhs21*clhs59 + clhs21*clhs63 + clhs21*clhs71 + clhs25*clhs55 + clhs27*clhs48 + clhs29*clhs55 - clhs41*clhs48 - clhs45*clhs55 + clhs52*clhs8 + clhs61*clhs8 + clhs67*clhs8;
        lhs(2,1)=clhs16*clhs76 + clhs21*clhs87 + clhs21*clhs91 - clhs21*clhs95 + clhs25*clhs83 + clhs27*clhs76 + clhs29*clhs83 - clhs41*clhs76 - clhs45*clhs83 + clhs8*clhs80 + clhs8*clhs89 - clhs8*clhs93;
        lhs(2,2)=clhs100*clhs16 + clhs100*clhs27 - clhs100*clhs41 + clhs104*clhs8 + clhs107*clhs25 + clhs107*clhs29 - clhs107*clhs45 + clhs111*clhs21 + clhs113*clhs8 + clhs115*clhs21 + clhs119*clhs8 + clhs123*clhs21;
        lhs(2,3)=clhs128*clhs16 + clhs128*clhs27 - clhs128*clhs41 + clhs132*clhs8 + clhs135*clhs25 + clhs135*clhs29 - clhs135*clhs45 + clhs139*clhs21 + clhs141*clhs8 + clhs143*clhs21 - clhs145*clhs8 - clhs147*clhs21;
        lhs(2,4)=clhs152*clhs16 + clhs152*clhs27 - clhs152*clhs41 + clhs156*clhs8 + clhs159*clhs25 + clhs159*clhs29 - clhs159*clhs45 + clhs163*clhs21 + clhs165*clhs8 + clhs167*clhs21 - clhs169*clhs8 - clhs171*clhs21;
        lhs(2,5)=clhs16*clhs176 + clhs176*clhs27 - clhs176*clhs41 + clhs180*clhs8 + clhs183*clhs25 + clhs183*clhs29 - clhs183*clhs45 + clhs187*clhs21 + clhs189*clhs8 + clhs191*clhs21 - clhs193*clhs8 - clhs195*clhs21;
        lhs(2,6)=clhs16*clhs200 + clhs200*clhs27 - clhs200*clhs41 + clhs204*clhs8 + clhs207*clhs25 + clhs207*clhs29 - clhs207*clhs45 + clhs21*clhs211 + clhs21*clhs215 - clhs21*clhs219 + clhs213*clhs8 - clhs217*clhs8;
        lhs(2,7)=clhs16*clhs224 + clhs21*clhs235 + clhs21*clhs239 - clhs21*clhs243 + clhs224*clhs27 - clhs224*clhs41 + clhs228*clhs8 + clhs231*clhs25 + clhs231*clhs29 - clhs231*clhs45 + clhs237*clhs8 - clhs241*clhs8;
        lhs(2,8)=clhs244*clhs8;
        lhs(2,9)=clhs306;
        lhs(2,10)=clhs21*clhs247;
        lhs(2,11)=clhs307;
        lhs(3,0)=clhs21*clhs257 + clhs21*clhs259 + clhs21*clhs261 + clhs250*clhs48 + clhs251*clhs55 + clhs252*clhs48 + clhs253*clhs55 - clhs254*clhs48 - clhs255*clhs55 + clhs256*clhs8 + clhs258*clhs8 + clhs260*clhs8;
        lhs(3,1)=clhs21*clhs263 + clhs21*clhs265 - clhs21*clhs267 + clhs250*clhs76 + clhs251*clhs83 + clhs252*clhs76 + clhs253*clhs83 - clhs254*clhs76 - clhs255*clhs83 + clhs262*clhs8 + clhs264*clhs8 - clhs266*clhs8;
        lhs(3,2)=clhs100*clhs250 + clhs100*clhs252 - clhs100*clhs254 + clhs107*clhs251 + clhs107*clhs253 - clhs107*clhs255 + clhs21*clhs269 + clhs21*clhs271 + clhs21*clhs273 + clhs268*clhs8 + clhs270*clhs8 + clhs272*clhs8;
        lhs(3,3)=clhs128*clhs250 + clhs128*clhs252 - clhs128*clhs254 + clhs135*clhs251 + clhs135*clhs253 - clhs135*clhs255 + clhs21*clhs275 + clhs21*clhs277 - clhs21*clhs279 + clhs274*clhs8 + clhs276*clhs8 - clhs278*clhs8;
        lhs(3,4)=clhs152*clhs250 + clhs152*clhs252 - clhs152*clhs254 + clhs159*clhs251 + clhs159*clhs253 - clhs159*clhs255 + clhs21*clhs281 + clhs21*clhs283 - clhs21*clhs285 + clhs280*clhs8 + clhs282*clhs8 - clhs284*clhs8;
        lhs(3,5)=clhs176*clhs250 + clhs176*clhs252 - clhs176*clhs254 + clhs183*clhs251 + clhs183*clhs253 - clhs183*clhs255 + clhs21*clhs287 + clhs21*clhs289 - clhs21*clhs291 + clhs286*clhs8 + clhs288*clhs8 - clhs290*clhs8;
        lhs(3,6)=clhs200*clhs250 + clhs200*clhs252 - clhs200*clhs254 + clhs207*clhs251 + clhs207*clhs253 - clhs207*clhs255 + clhs21*clhs293 + clhs21*clhs295 - clhs21*clhs297 + clhs292*clhs8 + clhs294*clhs8 - clhs296*clhs8;
        lhs(3,7)=clhs21*clhs299 + clhs21*clhs301 - clhs21*clhs303 + clhs224*clhs250 + clhs224*clhs252 - clhs224*clhs254 + clhs231*clhs251 + clhs231*clhs253 - clhs231*clhs255 + clhs298*clhs8 + clhs300*clhs8 - clhs302*clhs8;
        lhs(3,8)=clhs306;
        lhs(3,9)=clhs304*clhs8;
        lhs(3,10)=clhs307;
        lhs(3,11)=clhs21*clhs305;
        lhs(4,0)=-clhs16*clhs46 + clhs19*clhs315 - clhs19*clhs59 - clhs19*clhs63 - clhs25*clhs53 - clhs27*clhs46 - clhs29*clhs53 + clhs3*clhs313 - clhs3*clhs52 - clhs3*clhs61 - clhs309*clhs46 - clhs311*clhs53;
        lhs(4,1)=-clhs16*clhs74 - clhs19*clhs87 - clhs19*clhs91 + clhs19*clhs95 - clhs25*clhs81 - clhs27*clhs74 - clhs29*clhs81 - clhs3*clhs80 - clhs3*clhs89 + clhs3*clhs93 - clhs309*clhs74 - clhs311*clhs81;
        lhs(4,2)=-clhs104*clhs3 - clhs105*clhs25 - clhs105*clhs29 - clhs105*clhs311 - clhs111*clhs19 - clhs113*clhs3 - clhs115*clhs19 - clhs16*clhs98 + clhs19*clhs319 - clhs27*clhs98 + clhs3*clhs317 - clhs309*clhs98;
        lhs(4,3)=-clhs126*clhs16 - clhs126*clhs27 - clhs126*clhs309 - clhs132*clhs3 - clhs133*clhs25 - clhs133*clhs29 - clhs133*clhs311 - clhs139*clhs19 - clhs141*clhs3 - clhs143*clhs19 + clhs145*clhs3 + clhs147*clhs19;
        lhs(4,4)=-clhs150*clhs16 - clhs150*clhs27 - clhs150*clhs309 - clhs156*clhs3 - clhs157*clhs25 - clhs157*clhs29 - clhs157*clhs311 - clhs163*clhs19 - clhs165*clhs3 - clhs167*clhs19 + clhs169*clhs3 + clhs171*clhs19;
        lhs(4,5)=-clhs16*clhs174 - clhs174*clhs27 - clhs174*clhs309 - clhs180*clhs3 - clhs181*clhs25 - clhs181*clhs29 - clhs181*clhs311 - clhs187*clhs19 - clhs189*clhs3 - clhs19*clhs191 + clhs19*clhs195 + clhs193*clhs3;
        lhs(4,6)=-clhs16*clhs198 - clhs19*clhs211 - clhs19*clhs215 + clhs19*clhs219 - clhs198*clhs27 - clhs198*clhs309 - clhs204*clhs3 - clhs205*clhs25 - clhs205*clhs29 - clhs205*clhs311 - clhs213*clhs3 + clhs217*clhs3;
        lhs(4,7)=-clhs16*clhs222 - clhs19*clhs235 - clhs19*clhs239 + clhs19*clhs243 - clhs222*clhs27 - clhs222*clhs309 - clhs228*clhs3 - clhs229*clhs25 - clhs229*clhs29 - clhs229*clhs311 - clhs237*clhs3 + clhs241*clhs3;
        lhs(4,8)=-clhs244*clhs3;
        lhs(4,9)=clhs320;
        lhs(4,10)=-clhs19*clhs247;
        lhs(4,11)=clhs321;
        lhs(5,0)=-clhs19*clhs257 - clhs19*clhs259 + clhs19*clhs325 - clhs250*clhs46 - clhs251*clhs53 - clhs252*clhs46 - clhs253*clhs53 - clhs256*clhs3 - clhs258*clhs3 + clhs3*clhs324 - clhs322*clhs46 - clhs323*clhs53;
        lhs(5,1)=-clhs19*clhs263 - clhs19*clhs265 + clhs19*clhs267 - clhs250*clhs74 - clhs251*clhs81 - clhs252*clhs74 - clhs253*clhs81 - clhs262*clhs3 - clhs264*clhs3 + clhs266*clhs3 - clhs322*clhs74 - clhs323*clhs81;
        lhs(5,2)=-clhs105*clhs251 - clhs105*clhs253 - clhs105*clhs323 - clhs19*clhs269 - clhs19*clhs271 + clhs19*clhs327 - clhs250*clhs98 - clhs252*clhs98 - clhs268*clhs3 - clhs270*clhs3 + clhs3*clhs326 - clhs322*clhs98;
        lhs(5,3)=-clhs126*clhs250 - clhs126*clhs252 - clhs126*clhs322 - clhs133*clhs251 - clhs133*clhs253 - clhs133*clhs323 - clhs19*clhs275 - clhs19*clhs277 + clhs19*clhs279 - clhs274*clhs3 - clhs276*clhs3 + clhs278*clhs3;
        lhs(5,4)=-clhs150*clhs250 - clhs150*clhs252 - clhs150*clhs322 - clhs157*clhs251 - clhs157*clhs253 - clhs157*clhs323 - clhs19*clhs281 - clhs19*clhs283 + clhs19*clhs285 - clhs280*clhs3 - clhs282*clhs3 + clhs284*clhs3;
        lhs(5,5)=-clhs174*clhs250 - clhs174*clhs252 - clhs174*clhs322 - clhs181*clhs251 - clhs181*clhs253 - clhs181*clhs323 - clhs19*clhs287 - clhs19*clhs289 + clhs19*clhs291 - clhs286*clhs3 - clhs288*clhs3 + clhs290*clhs3;
        lhs(5,6)=-clhs19*clhs293 - clhs19*clhs295 + clhs19*clhs297 - clhs198*clhs250 - clhs198*clhs252 - clhs198*clhs322 - clhs205*clhs251 - clhs205*clhs253 - clhs205*clhs323 - clhs292*clhs3 - clhs294*clhs3 + clhs296*clhs3;
        lhs(5,7)=-clhs19*clhs299 - clhs19*clhs301 + clhs19*clhs303 - clhs222*clhs250 - clhs222*clhs252 - clhs222*clhs322 - clhs229*clhs251 - clhs229*clhs253 - clhs229*clhs323 - clhs298*clhs3 - clhs3*clhs300 + clhs3*clhs302;
        lhs(5,8)=clhs320;
        lhs(5,9)=-clhs3*clhs304;
        lhs(5,10)=clhs321;
        lhs(5,11)=-clhs19*clhs305;
        lhs(6,0)=-clhs16*clhs47 + clhs20*clhs315 - clhs20*clhs59 - clhs20*clhs63 - clhs25*clhs54 - clhs27*clhs47 - clhs29*clhs54 - clhs309*clhs47 - clhs311*clhs54 + clhs313*clhs5 - clhs5*clhs52 - clhs5*clhs61;
        lhs(6,1)=-clhs16*clhs75 - clhs20*clhs87 - clhs20*clhs91 + clhs20*clhs95 - clhs25*clhs82 - clhs27*clhs75 - clhs29*clhs82 - clhs309*clhs75 - clhs311*clhs82 - clhs5*clhs80 - clhs5*clhs89 + clhs5*clhs93;
        lhs(6,2)=-clhs104*clhs5 - clhs106*clhs25 - clhs106*clhs29 - clhs106*clhs311 - clhs111*clhs20 - clhs113*clhs5 - clhs115*clhs20 - clhs16*clhs99 + clhs20*clhs319 - clhs27*clhs99 - clhs309*clhs99 + clhs317*clhs5;
        lhs(6,3)=-clhs127*clhs16 - clhs127*clhs27 - clhs127*clhs309 - clhs132*clhs5 - clhs134*clhs25 - clhs134*clhs29 - clhs134*clhs311 - clhs139*clhs20 - clhs141*clhs5 - clhs143*clhs20 + clhs145*clhs5 + clhs147*clhs20;
        lhs(6,4)=-clhs151*clhs16 - clhs151*clhs27 - clhs151*clhs309 - clhs156*clhs5 - clhs158*clhs25 - clhs158*clhs29 - clhs158*clhs311 - clhs163*clhs20 - clhs165*clhs5 - clhs167*clhs20 + clhs169*clhs5 + clhs171*clhs20;
        lhs(6,5)=-clhs16*clhs175 - clhs175*clhs27 - clhs175*clhs309 - clhs180*clhs5 - clhs182*clhs25 - clhs182*clhs29 - clhs182*clhs311 - clhs187*clhs20 - clhs189*clhs5 - clhs191*clhs20 + clhs193*clhs5 + clhs195*clhs20;
        lhs(6,6)=-clhs16*clhs199 - clhs199*clhs27 - clhs199*clhs309 - clhs20*clhs211 - clhs20*clhs215 + clhs20*clhs219 - clhs204*clhs5 - clhs206*clhs25 - clhs206*clhs29 - clhs206*clhs311 - clhs213*clhs5 + clhs217*clhs5;
        lhs(6,7)=-clhs16*clhs223 - clhs20*clhs235 - clhs20*clhs239 + clhs20*clhs243 - clhs223*clhs27 - clhs223*clhs309 - clhs228*clhs5 - clhs230*clhs25 - clhs230*clhs29 - clhs230*clhs311 - clhs237*clhs5 + clhs241*clhs5;
        lhs(6,8)=-clhs244*clhs5;
        lhs(6,9)=clhs328;
        lhs(6,10)=-clhs20*clhs247;
        lhs(6,11)=clhs329;
        lhs(7,0)=-clhs20*clhs257 - clhs20*clhs259 + clhs20*clhs325 - clhs250*clhs47 - clhs251*clhs54 - clhs252*clhs47 - clhs253*clhs54 - clhs256*clhs5 - clhs258*clhs5 - clhs322*clhs47 - clhs323*clhs54 + clhs324*clhs5;
        lhs(7,1)=-clhs20*clhs263 - clhs20*clhs265 + clhs20*clhs267 - clhs250*clhs75 - clhs251*clhs82 - clhs252*clhs75 - clhs253*clhs82 - clhs262*clhs5 - clhs264*clhs5 + clhs266*clhs5 - clhs322*clhs75 - clhs323*clhs82;
        lhs(7,2)=-clhs106*clhs251 - clhs106*clhs253 - clhs106*clhs323 - clhs20*clhs269 - clhs20*clhs271 + clhs20*clhs327 - clhs250*clhs99 - clhs252*clhs99 - clhs268*clhs5 - clhs270*clhs5 - clhs322*clhs99 + clhs326*clhs5;
        lhs(7,3)=-clhs127*clhs250 - clhs127*clhs252 - clhs127*clhs322 - clhs134*clhs251 - clhs134*clhs253 - clhs134*clhs323 - clhs20*clhs275 - clhs20*clhs277 + clhs20*clhs279 - clhs274*clhs5 - clhs276*clhs5 + clhs278*clhs5;
        lhs(7,4)=-clhs151*clhs250 - clhs151*clhs252 - clhs151*clhs322 - clhs158*clhs251 - clhs158*clhs253 - clhs158*clhs323 - clhs20*clhs281 - clhs20*clhs283 + clhs20*clhs285 - clhs280*clhs5 - clhs282*clhs5 + clhs284*clhs5;
        lhs(7,5)=-clhs175*clhs250 - clhs175*clhs252 - clhs175*clhs322 - clhs182*clhs251 - clhs182*clhs253 - clhs182*clhs323 - clhs20*clhs287 - clhs20*clhs289 + clhs20*clhs291 - clhs286*clhs5 - clhs288*clhs5 + clhs290*clhs5;
        lhs(7,6)=-clhs199*clhs250 - clhs199*clhs252 - clhs199*clhs322 - clhs20*clhs293 - clhs20*clhs295 + clhs20*clhs297 - clhs206*clhs251 - clhs206*clhs253 - clhs206*clhs323 - clhs292*clhs5 - clhs294*clhs5 + clhs296*clhs5;
        lhs(7,7)=-clhs20*clhs299 - clhs20*clhs301 + clhs20*clhs303 - clhs223*clhs250 - clhs223*clhs252 - clhs223*clhs322 - clhs230*clhs251 - clhs230*clhs253 - clhs230*clhs323 - clhs298*clhs5 - clhs300*clhs5 + clhs302*clhs5;
        lhs(7,8)=clhs328;
        lhs(7,9)=-clhs304*clhs5;
        lhs(7,10)=clhs329;
        lhs(7,11)=-clhs20*clhs305;
        lhs(8,0)=scale_factor*(clhs312*normalslave(0,0) - clhs51*tangentetaslave(0,0) - clhs60*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs79*tangentetaslave(0,0) - clhs88*tangentxislave(0,0) + clhs92*normalslave(0,0));
        lhs(8,2)=scale_factor*(-clhs103*tangentetaslave(0,0) - clhs112*tangentxislave(0,0) + clhs316*normalslave(0,0));
        lhs(8,3)=scale_factor*(-clhs131*tangentetaslave(0,0) - clhs140*tangentxislave(0,0) + clhs144*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs155*tangentetaslave(0,0) - clhs164*tangentxislave(0,0) + clhs168*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs179*tangentetaslave(0,0) - clhs188*tangentxislave(0,0) + clhs192*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs203*tangentetaslave(0,0) - clhs212*tangentxislave(0,0) + clhs216*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs227*tangentetaslave(0,0) - clhs236*tangentxislave(0,0) + clhs240*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs312*normalslave(0,1) - clhs51*tangentetaslave(0,1) - clhs60*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs79*tangentetaslave(0,1) - clhs88*tangentxislave(0,1) + clhs92*normalslave(0,1));
        lhs(9,2)=scale_factor*(-clhs103*tangentetaslave(0,1) - clhs112*tangentxislave(0,1) + clhs316*normalslave(0,1));
        lhs(9,3)=scale_factor*(-clhs131*tangentetaslave(0,1) - clhs140*tangentxislave(0,1) + clhs144*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs155*tangentetaslave(0,1) - clhs164*tangentxislave(0,1) + clhs168*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs179*tangentetaslave(0,1) - clhs188*tangentxislave(0,1) + clhs192*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs203*tangentetaslave(0,1) - clhs212*tangentxislave(0,1) + clhs216*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs227*tangentetaslave(0,1) - clhs236*tangentxislave(0,1) + clhs240*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=scale_factor*(clhs314*normalslave(1,0) - clhs58*tangentetaslave(1,0) - clhs62*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs86*tangentetaslave(1,0) - clhs90*tangentxislave(1,0) + clhs94*normalslave(1,0));
        lhs(10,2)=scale_factor*(-clhs110*tangentetaslave(1,0) - clhs114*tangentxislave(1,0) + clhs318*normalslave(1,0));
        lhs(10,3)=scale_factor*(-clhs138*tangentetaslave(1,0) - clhs142*tangentxislave(1,0) + clhs146*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs162*tangentetaslave(1,0) - clhs166*tangentxislave(1,0) + clhs170*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs186*tangentetaslave(1,0) - clhs190*tangentxislave(1,0) + clhs194*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs210*tangentetaslave(1,0) - clhs214*tangentxislave(1,0) + clhs218*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs234*tangentetaslave(1,0) - clhs238*tangentxislave(1,0) + clhs242*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs314*normalslave(1,1) - clhs58*tangentetaslave(1,1) - clhs62*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs86*tangentetaslave(1,1) - clhs90*tangentxislave(1,1) + clhs94*normalslave(1,1));
        lhs(11,2)=scale_factor*(-clhs110*tangentetaslave(1,1) - clhs114*tangentxislave(1,1) + clhs318*normalslave(1,1));
        lhs(11,3)=scale_factor*(-clhs138*tangentetaslave(1,1) - clhs142*tangentxislave(1,1) + clhs146*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs162*tangentetaslave(1,1) - clhs166*tangentxislave(1,1) + clhs170*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs186*tangentetaslave(1,1) - clhs190*tangentxislave(1,1) + clhs194*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs210*tangentetaslave(1,1) - clhs214*tangentxislave(1,1) + clhs218*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs234*tangentetaslave(1,1) - clhs238*tangentxislave(1,1) + clhs242*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }


    return lhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
array_1d<double, 12> AugmentedLagrangianMethodFrictionalMortarContactCondition<2,2>::CalculateLocalRHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,12> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u1old = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2old = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const bounded_matrix<double, 2, 2> lm = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), VECTOR_LAGRANGE_MULTIPLIER, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL);
    const bounded_matrix<double, 2, 2> tangentxislave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_XI);
    const bounded_matrix<double, 2, 2> tangentetaslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_ETA);
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    
    // We get the friction coefficient
    const array_1d<double, 2> mu = GetFrictionCoefficient();

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs1 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs2 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs3 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs4 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
        const double crhs5 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs6 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=-crhs0*(crhs1*normalslave(0,0) + crhs2*tangentetaslave(0,0) + crhs3*tangentxislave(0,0));
        rhs[9]=-crhs0*(crhs1*normalslave(0,1) + crhs2*tangentetaslave(0,1) + crhs3*tangentxislave(0,1));
        rhs[10]=-crhs0*(crhs4*normalslave(1,0) + crhs5*tangentetaslave(1,0) + crhs6*tangentxislave(1,0));
        rhs[11]=-crhs0*(crhs4*normalslave(1,1) + crhs5*tangentetaslave(1,1) + crhs6*tangentxislave(1,1));
    }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs2 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs3 =     crhs1*tangentetaslave(0,0) + crhs2*tangentxislave(0,0);
        const double crhs4 =     crhs1*tangentetaslave(0,1) + crhs2*tangentxislave(0,1);
        const double crhs5 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs6 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs7 =     crhs5*tangentetaslave(1,0) + crhs6*tangentxislave(1,0);
        const double crhs8 =     crhs5*tangentetaslave(1,1) + crhs6*tangentxislave(1,1);
        const double crhs9 =     mu[0]/(std::sqrt(std::pow(fabs(crhs3), 2) + std::pow(fabs(crhs4), 2))*std::sqrt(std::pow(fabs(crhs7), 2) + std::pow(fabs(crhs8), 2)));
        const double crhs10 =     -crhs3*crhs9 + normalslave(0,0);
        const double crhs11 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs12 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs13 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs14 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs15 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs12*(X1(0,0) + u1(0,0)) + crhs13*(X1(1,0) + u1(1,0)) - crhs14*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs12*(X1(0,1) + u1(0,1)) + crhs13*(X1(1,1) + u1(1,1)) - crhs14*(X2(1,1) + u2(1,1)));
        const double crhs16 =     crhs15*penalty_parameter;
        const double crhs17 =     -crhs11 + crhs16;
        const double crhs18 =     crhs10*crhs17;
        const double crhs19 =     -crhs4*crhs9 + normalslave(0,1);
        const double crhs20 =     crhs17*crhs19;
        const double crhs21 =     crhs11 - crhs16;
        const double crhs22 =     crhs10*crhs21;
        const double crhs23 =     crhs19*crhs21;
        const double crhs24 =     1.0/penalty_parameter;
        const double crhs25 =     crhs21*crhs9 + scale_factor;
        const double crhs26 =     0.5*crhs24*crhs25*crhs3;
        const double crhs27 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs28 =     0.5*crhs24*crhs25*crhs4;
        const double crhs29 =     0.5*crhs24*std::pow(scale_factor, 2.0);
        const double crhs30 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
    
        rhs[0]=crhs0*crhs18;
        rhs[1]=crhs0*crhs20;
        rhs[2]=crhs14*crhs18;
        rhs[3]=crhs14*crhs20;
        rhs[4]=crhs12*crhs22;
        rhs[5]=crhs12*crhs23;
        rhs[6]=crhs13*crhs22;
        rhs[7]=crhs13*crhs23;
        rhs[8]=-scale_factor*(crhs15*normalslave(0,0) + crhs26*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs27*crhs28);
        rhs[9]=-scale_factor*(crhs15*normalslave(0,1) + crhs26*crhs27 + crhs28*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=-crhs29*(crhs30*normalslave(1,0) + crhs7);
        rhs[11]=-crhs29*(crhs30*normalslave(1,1) + crhs8);
    }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     crhs1 - crhs6;
        const double crhs8 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs9 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs10 =     crhs8*tangentetaslave(0,0) + crhs9*tangentetaslave(0,1);
        const double crhs11 =     crhs10*penalty_parameter + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double crhs12 =     crhs8*tangentxislave(0,0) + crhs9*tangentxislave(0,1);
        const double crhs13 =     crhs12*penalty_parameter + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double crhs14 =     crhs11*tangentetaslave(0,0) + crhs13*tangentxislave(0,0);
        const double crhs15 =     crhs14 + crhs7*normalslave(0,0);
        const double crhs16 =     crhs11*tangentetaslave(0,1) + crhs13*tangentxislave(0,1);
        const double crhs17 =     crhs16 + crhs7*normalslave(0,1);
        const double crhs18 =     -crhs1 + crhs6;
        const double crhs19 =     crhs14 - crhs18*normalslave(0,0);
        const double crhs20 =     crhs16 - crhs18*normalslave(0,1);
        const double crhs21 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs22 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
        const double crhs23 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs24 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
    
        rhs[0]=-crhs0*crhs15;
        rhs[1]=-crhs0*crhs17;
        rhs[2]=-crhs15*crhs4;
        rhs[3]=-crhs17*crhs4;
        rhs[4]=crhs19*crhs2;
        rhs[5]=crhs2*crhs20;
        rhs[6]=crhs19*crhs3;
        rhs[7]=crhs20*crhs3;
        rhs[8]=scale_factor*(crhs10*tangentetaslave(0,0) + crhs12*tangentxislave(0,0) - crhs5*normalslave(0,0));
        rhs[9]=scale_factor*(crhs10*tangentetaslave(0,1) + crhs12*tangentxislave(0,1) - crhs5*normalslave(0,1));
        rhs[10]=-crhs21*(crhs22*normalslave(1,0) + crhs23*tangentetaslave(1,0) + crhs24*tangentxislave(1,0));
        rhs[11]=-crhs21*(crhs22*normalslave(1,1) + crhs23*tangentetaslave(1,1) + crhs24*tangentxislave(1,1));
    }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs2 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs3 =     crhs1*tangentetaslave(1,0) + crhs2*tangentxislave(1,0);
        const double crhs4 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs5 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs6 =     crhs4*tangentetaslave(0,0) + crhs5*tangentxislave(0,0);
        const double crhs7 =     crhs4*tangentetaslave(0,1) + crhs5*tangentxislave(0,1);
        const double crhs8 =     crhs1*tangentetaslave(1,1) + crhs2*tangentxislave(1,1);
        const double crhs9 =     mu[1]/(std::sqrt(std::pow(fabs(crhs3), 2) + std::pow(fabs(crhs8), 2))*std::sqrt(std::pow(fabs(crhs6), 2) + std::pow(fabs(crhs7), 2)));
        const double crhs10 =     -crhs3*crhs9 + normalslave(1,0);
        const double crhs11 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs12 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs13 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs14 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs15 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs12*(X1(0,0) + u1(0,0)) + crhs13*(X1(1,0) + u1(1,0)) - crhs14*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs12*(X1(0,1) + u1(0,1)) + crhs13*(X1(1,1) + u1(1,1)) - crhs14*(X2(1,1) + u2(1,1)));
        const double crhs16 =     crhs15*penalty_parameter;
        const double crhs17 =     -crhs11 + crhs16;
        const double crhs18 =     crhs10*crhs17;
        const double crhs19 =     -crhs8*crhs9 + normalslave(1,1);
        const double crhs20 =     crhs17*crhs19;
        const double crhs21 =     crhs11 - crhs16;
        const double crhs22 =     crhs10*crhs21;
        const double crhs23 =     crhs19*crhs21;
        const double crhs24 =     1.0/penalty_parameter;
        const double crhs25 =     0.5*crhs24*std::pow(scale_factor, 2.0);
        const double crhs26 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs27 =     crhs21*crhs9 + scale_factor;
        const double crhs28 =     0.5*crhs24*crhs27*crhs3;
        const double crhs29 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs30 =     0.5*crhs24*crhs27*crhs8;
    
        rhs[0]=crhs0*crhs18;
        rhs[1]=crhs0*crhs20;
        rhs[2]=crhs14*crhs18;
        rhs[3]=crhs14*crhs20;
        rhs[4]=crhs12*crhs22;
        rhs[5]=crhs12*crhs23;
        rhs[6]=crhs13*crhs22;
        rhs[7]=crhs13*crhs23;
        rhs[8]=-crhs25*(crhs26*normalslave(0,0) + crhs6);
        rhs[9]=-crhs25*(crhs26*normalslave(0,1) + crhs7);
        rhs[10]=-scale_factor*(crhs15*normalslave(1,0) + crhs28*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs29*crhs30);
        rhs[11]=-scale_factor*(crhs15*normalslave(1,1) + crhs28*crhs29 + crhs30*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     X1(0,0) + u1(0,0);
        const double crhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     X1(1,0) + u1(1,0);
        const double crhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs6 =     X2(0,0) + u2(0,0);
        const double crhs7 =     X2(1,0) + u2(1,0);
        const double crhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs9 =     X1(0,1) + u1(0,1);
        const double crhs10 =     X1(1,1) + u1(1,1);
        const double crhs11 =     X2(0,1) + u2(0,1);
        const double crhs12 =     X2(1,1) + u2(1,1);
        const double crhs13 =     normalslave(0,0)*(-crhs0*crhs6 + crhs2*crhs3 + crhs4*crhs5 - crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs11 + crhs10*crhs5 - crhs12*crhs8 + crhs3*crhs9);
        const double crhs14 =     crhs13*penalty_parameter;
        const double crhs15 =     -crhs1 + crhs14;
        const double crhs16 =     crhs15*normalslave(0,0);
        const double crhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs19 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs21 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs22 =     normalslave(1,0)*(-crhs17*crhs6 + crhs19*crhs2 + crhs20*crhs4 - crhs21*crhs7) + normalslave(1,1)*(crhs10*crhs20 - crhs11*crhs17 - crhs12*crhs21 + crhs19*crhs9);
        const double crhs23 =     crhs22*penalty_parameter;
        const double crhs24 =     -crhs18 + crhs23;
        const double crhs25 =     crhs24*normalslave(1,0);
        const double crhs26 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs27 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs28 =     crhs26*tangentetaslave(0,0) + crhs27*tangentxislave(0,0);
        const double crhs29 =     crhs26*tangentetaslave(0,1) + crhs27*tangentxislave(0,1);
        const double crhs30 =     std::pow(std::pow(fabs(crhs28), 2) + std::pow(fabs(crhs29), 2), -1.0L/2.0L);
        const double crhs31 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs32 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs33 =     crhs31*tangentetaslave(1,0) + crhs32*tangentxislave(1,0);
        const double crhs34 =     crhs31*tangentetaslave(1,1) + crhs32*tangentxislave(1,1);
        const double crhs35 =     std::pow(std::pow(fabs(crhs33), 2) + std::pow(fabs(crhs34), 2), -1.0L/2.0L);
        const double crhs36 =     crhs15*crhs28*crhs30*crhs35*mu[0];
        const double crhs37 =     crhs24*crhs30*crhs33*crhs35*mu[1];
        const double crhs38 =     crhs15*normalslave(0,1);
        const double crhs39 =     crhs24*normalslave(1,1);
        const double crhs40 =     crhs15*crhs29*crhs30*crhs35*mu[0];
        const double crhs41 =     crhs24*crhs30*crhs34*crhs35*mu[1];
        const double crhs42 =     crhs1 - crhs14;
        const double crhs43 =     crhs42*normalslave(0,0);
        const double crhs44 =     crhs18 - crhs23;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     crhs28*crhs30*crhs35*crhs42*mu[0];
        const double crhs47 =     crhs30*crhs33*crhs35*crhs44*mu[1];
        const double crhs48 =     crhs42*normalslave(0,1);
        const double crhs49 =     crhs44*normalslave(1,1);
        const double crhs50 =     crhs29*crhs30*crhs35*crhs42*mu[0];
        const double crhs51 =     crhs30*crhs34*crhs35*crhs44*mu[1];
        const double crhs52 =     1.0/penalty_parameter;
        const double crhs53 =     crhs30*crhs35;
        const double crhs54 =     crhs42*crhs53*mu[0] + scale_factor;
        const double crhs55 =     0.5*crhs28*crhs52*crhs54;
        const double crhs56 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs57 =     0.5*crhs29*crhs52*crhs54;
        const double crhs58 =     crhs44*crhs53*mu[1] + scale_factor;
        const double crhs59 =     0.5*crhs33*crhs52*crhs58;
        const double crhs60 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs61 =     0.5*crhs34*crhs52*crhs58;
    
        rhs[0]=crhs0*crhs16 - crhs0*crhs36 + crhs17*crhs25 - crhs17*crhs37;
        rhs[1]=crhs0*crhs38 - crhs0*crhs40 + crhs17*crhs39 - crhs17*crhs41;
        rhs[2]=crhs16*crhs8 + crhs21*crhs25 - crhs21*crhs37 - crhs36*crhs8;
        rhs[3]=crhs21*crhs39 - crhs21*crhs41 + crhs38*crhs8 - crhs40*crhs8;
        rhs[4]=crhs19*crhs45 - crhs19*crhs47 + crhs3*crhs43 - crhs3*crhs46;
        rhs[5]=crhs19*crhs49 - crhs19*crhs51 + crhs3*crhs48 - crhs3*crhs50;
        rhs[6]=crhs20*crhs45 - crhs20*crhs47 + crhs43*crhs5 - crhs46*crhs5;
        rhs[7]=crhs20*crhs49 - crhs20*crhs51 + crhs48*crhs5 - crhs5*crhs50;
        rhs[8]=-scale_factor*(crhs13*normalslave(0,0) + crhs55*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs56*crhs57);
        rhs[9]=-scale_factor*(crhs13*normalslave(0,1) + crhs55*crhs56 + crhs57*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=-scale_factor*(crhs22*normalslave(1,0) + crhs59*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs60*crhs61);
        rhs[11]=-scale_factor*(crhs22*normalslave(1,1) + crhs59*crhs60 + crhs61*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs6 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs7 =     crhs5*tangentetaslave(0,0) + crhs6*tangentetaslave(0,1);
        const double crhs8 =     crhs1*scale_factor + crhs7*penalty_parameter;
        const double crhs9 =     crhs8*tangentetaslave(0,0);
        const double crhs10 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs11 =     crhs5*tangentxislave(0,0) + crhs6*tangentxislave(0,1);
        const double crhs12 =     crhs10*scale_factor + crhs11*penalty_parameter;
        const double crhs13 =     crhs12*tangentxislave(0,0);
        const double crhs14 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs15 =     X1(0,0) + u1(0,0);
        const double crhs16 =     X1(1,0) + u1(1,0);
        const double crhs17 =     X2(0,0) + u2(0,0);
        const double crhs18 =     X2(1,0) + u2(1,0);
        const double crhs19 =     X1(0,1) + u1(0,1);
        const double crhs20 =     X1(1,1) + u1(1,1);
        const double crhs21 =     X2(0,1) + u2(0,1);
        const double crhs22 =     X2(1,1) + u2(1,1);
        const double crhs23 =     normalslave(0,0)*(-crhs0*crhs17 + crhs15*crhs2 + crhs16*crhs3 - crhs18*crhs4) + normalslave(0,1)*(-crhs0*crhs21 + crhs19*crhs2 + crhs20*crhs3 - crhs22*crhs4);
        const double crhs24 =     crhs23*penalty_parameter;
        const double crhs25 =     crhs14 - crhs24;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs28 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs29 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs30 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs32 =     normalslave(1,0)*(crhs15*crhs29 + crhs16*crhs30 - crhs17*crhs27 - crhs18*crhs31) + normalslave(1,1)*(crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31);
        const double crhs33 =     crhs32*penalty_parameter;
        const double crhs34 =     crhs28 - crhs33;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs37 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs38 =     crhs36*tangentetaslave(1,0) + crhs37*tangentxislave(1,0);
        const double crhs39 =     std::pow(std::pow(fabs(crhs1*tangentetaslave(0,0) + crhs10*tangentxislave(0,0)), 2) + std::pow(fabs(crhs1*tangentetaslave(0,1) + crhs10*tangentxislave(0,1)), 2), -1.0L/2.0L);
        const double crhs40 =     crhs36*tangentetaslave(1,1) + crhs37*tangentxislave(1,1);
        const double crhs41 =     std::pow(std::pow(fabs(crhs38), 2) + std::pow(fabs(crhs40), 2), -1.0L/2.0L);
        const double crhs42 =     crhs34*crhs38*crhs39*crhs41*mu[1];
        const double crhs43 =     crhs8*tangentetaslave(0,1);
        const double crhs44 =     crhs12*tangentxislave(0,1);
        const double crhs45 =     crhs25*normalslave(0,1);
        const double crhs46 =     crhs34*normalslave(1,1);
        const double crhs47 =     crhs34*crhs39*crhs40*crhs41*mu[1];
        const double crhs48 =     -crhs14 + crhs24;
        const double crhs49 =     crhs48*normalslave(0,0);
        const double crhs50 =     -crhs28 + crhs33;
        const double crhs51 =     crhs50*normalslave(1,0);
        const double crhs52 =     crhs38*crhs39*crhs41*crhs50*mu[1];
        const double crhs53 =     crhs48*normalslave(0,1);
        const double crhs54 =     crhs50*normalslave(1,1);
        const double crhs55 =     crhs39*crhs40*crhs41*crhs50*mu[1];
        const double crhs56 =     1.0/penalty_parameter;
        const double crhs57 =     crhs34*crhs39*crhs41*mu[1] + scale_factor;
        const double crhs58 =     0.5*crhs38*crhs56*crhs57;
        const double crhs59 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs60 =     0.5*crhs40*crhs56*crhs57;
    
        rhs[0]=-crhs0*crhs13 - crhs0*crhs26 - crhs0*crhs9 - crhs27*crhs35 + crhs27*crhs42;
        rhs[1]=-crhs0*crhs43 - crhs0*crhs44 - crhs0*crhs45 - crhs27*crhs46 + crhs27*crhs47;
        rhs[2]=-crhs13*crhs4 - crhs26*crhs4 - crhs31*crhs35 + crhs31*crhs42 - crhs4*crhs9;
        rhs[3]=-crhs31*crhs46 + crhs31*crhs47 - crhs4*crhs43 - crhs4*crhs44 - crhs4*crhs45;
        rhs[4]=crhs13*crhs2 - crhs2*crhs49 + crhs2*crhs9 - crhs29*crhs51 + crhs29*crhs52;
        rhs[5]=crhs2*crhs43 + crhs2*crhs44 - crhs2*crhs53 - crhs29*crhs54 + crhs29*crhs55;
        rhs[6]=crhs13*crhs3 - crhs3*crhs49 + crhs3*crhs9 - crhs30*crhs51 + crhs30*crhs52;
        rhs[7]=crhs3*crhs43 + crhs3*crhs44 - crhs3*crhs53 - crhs30*crhs54 + crhs30*crhs55;
        rhs[8]=scale_factor*(crhs11*tangentxislave(0,0) - crhs23*normalslave(0,0) + crhs7*tangentetaslave(0,0));
        rhs[9]=scale_factor*(crhs11*tangentxislave(0,1) - crhs23*normalslave(0,1) + crhs7*tangentetaslave(0,1));
        rhs[10]=-scale_factor*(crhs32*normalslave(1,0) + crhs58*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs59*crhs60);
        rhs[11]=-scale_factor*(crhs32*normalslave(1,1) + crhs58*crhs59 + crhs60*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     crhs1 - crhs6;
        const double crhs8 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs9 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs10 =     crhs8*tangentetaslave(1,0) + crhs9*tangentetaslave(1,1);
        const double crhs11 =     crhs10*penalty_parameter + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double crhs12 =     crhs8*tangentxislave(1,0) + crhs9*tangentxislave(1,1);
        const double crhs13 =     crhs12*penalty_parameter + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double crhs14 =     crhs11*tangentetaslave(1,0) + crhs13*tangentxislave(1,0);
        const double crhs15 =     crhs14 + crhs7*normalslave(1,0);
        const double crhs16 =     crhs11*tangentetaslave(1,1) + crhs13*tangentxislave(1,1);
        const double crhs17 =     crhs16 + crhs7*normalslave(1,1);
        const double crhs18 =     -crhs1 + crhs6;
        const double crhs19 =     crhs14 - crhs18*normalslave(1,0);
        const double crhs20 =     crhs16 - crhs18*normalslave(1,1);
        const double crhs21 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs22 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs23 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs24 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
    
        rhs[0]=-crhs0*crhs15;
        rhs[1]=-crhs0*crhs17;
        rhs[2]=-crhs15*crhs4;
        rhs[3]=-crhs17*crhs4;
        rhs[4]=crhs19*crhs2;
        rhs[5]=crhs2*crhs20;
        rhs[6]=crhs19*crhs3;
        rhs[7]=crhs20*crhs3;
        rhs[8]=-crhs21*(crhs22*normalslave(0,0) + crhs23*tangentetaslave(0,0) + crhs24*tangentxislave(0,0));
        rhs[9]=-crhs21*(crhs22*normalslave(0,1) + crhs23*tangentetaslave(0,1) + crhs24*tangentxislave(0,1));
        rhs[10]=scale_factor*(crhs10*tangentetaslave(1,0) + crhs12*tangentxislave(1,0) - crhs5*normalslave(1,0));
        rhs[11]=scale_factor*(crhs10*tangentetaslave(1,1) + crhs12*tangentxislave(1,1) - crhs5*normalslave(1,1));
    }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs6 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs7 =     crhs5*tangentetaslave(1,0) + crhs6*tangentetaslave(1,1);
        const double crhs8 =     crhs1*scale_factor + crhs7*penalty_parameter;
        const double crhs9 =     crhs8*tangentetaslave(1,0);
        const double crhs10 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs11 =     crhs5*tangentxislave(1,0) + crhs6*tangentxislave(1,1);
        const double crhs12 =     crhs10*scale_factor + crhs11*penalty_parameter;
        const double crhs13 =     crhs12*tangentxislave(1,0);
        const double crhs14 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs15 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs16 =     X1(0,0) + u1(0,0);
        const double crhs17 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     X1(1,0) + u1(1,0);
        const double crhs19 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     X2(0,0) + u2(0,0);
        const double crhs21 =     X2(1,0) + u2(1,0);
        const double crhs22 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs23 =     X1(0,1) + u1(0,1);
        const double crhs24 =     X1(1,1) + u1(1,1);
        const double crhs25 =     X2(0,1) + u2(0,1);
        const double crhs26 =     X2(1,1) + u2(1,1);
        const double crhs27 =     normalslave(0,0)*(-crhs14*crhs20 + crhs16*crhs17 + crhs18*crhs19 - crhs21*crhs22) + normalslave(0,1)*(-crhs14*crhs25 + crhs17*crhs23 + crhs19*crhs24 - crhs22*crhs26);
        const double crhs28 =     crhs27*penalty_parameter;
        const double crhs29 =     crhs15 - crhs28;
        const double crhs30 =     crhs29*normalslave(0,0);
        const double crhs31 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs20 + crhs16*crhs2 + crhs18*crhs3 - crhs21*crhs4) + normalslave(1,1)*(-crhs0*crhs25 + crhs2*crhs23 + crhs24*crhs3 - crhs26*crhs4);
        const double crhs33 =     crhs32*penalty_parameter;
        const double crhs34 =     crhs31 - crhs33;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs37 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs38 =     crhs36*tangentetaslave(0,0) + crhs37*tangentxislave(0,0);
        const double crhs39 =     crhs36*tangentetaslave(0,1) + crhs37*tangentxislave(0,1);
        const double crhs40 =     std::pow(std::pow(fabs(crhs38), 2) + std::pow(fabs(crhs39), 2), -1.0L/2.0L);
        const double crhs41 =     std::pow(std::pow(fabs(crhs1*tangentetaslave(1,0) + crhs10*tangentxislave(1,0)), 2) + std::pow(fabs(crhs1*tangentetaslave(1,1) + crhs10*tangentxislave(1,1)), 2), -1.0L/2.0L);
        const double crhs42 =     crhs29*crhs38*crhs40*crhs41*mu[0];
        const double crhs43 =     crhs8*tangentetaslave(1,1);
        const double crhs44 =     crhs12*tangentxislave(1,1);
        const double crhs45 =     crhs29*normalslave(0,1);
        const double crhs46 =     crhs34*normalslave(1,1);
        const double crhs47 =     crhs29*crhs39*crhs40*crhs41*mu[0];
        const double crhs48 =     -crhs15 + crhs28;
        const double crhs49 =     crhs48*normalslave(0,0);
        const double crhs50 =     -crhs31 + crhs33;
        const double crhs51 =     crhs50*normalslave(1,0);
        const double crhs52 =     crhs38*crhs40*crhs41*crhs48*mu[0];
        const double crhs53 =     crhs48*normalslave(0,1);
        const double crhs54 =     crhs50*normalslave(1,1);
        const double crhs55 =     crhs39*crhs40*crhs41*crhs48*mu[0];
        const double crhs56 =     1.0/penalty_parameter;
        const double crhs57 =     crhs29*crhs40*crhs41*mu[0] + scale_factor;
        const double crhs58 =     0.5*crhs38*crhs56*crhs57;
        const double crhs59 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs60 =     0.5*crhs39*crhs56*crhs57;
    
        rhs[0]=-crhs0*crhs13 - crhs0*crhs35 - crhs0*crhs9 - crhs14*crhs30 + crhs14*crhs42;
        rhs[1]=-crhs0*crhs43 - crhs0*crhs44 - crhs0*crhs46 - crhs14*crhs45 + crhs14*crhs47;
        rhs[2]=-crhs13*crhs4 - crhs22*crhs30 + crhs22*crhs42 - crhs35*crhs4 - crhs4*crhs9;
        rhs[3]=-crhs22*crhs45 + crhs22*crhs47 - crhs4*crhs43 - crhs4*crhs44 - crhs4*crhs46;
        rhs[4]=crhs13*crhs2 - crhs17*crhs49 + crhs17*crhs52 - crhs2*crhs51 + crhs2*crhs9;
        rhs[5]=-crhs17*crhs53 + crhs17*crhs55 + crhs2*crhs43 + crhs2*crhs44 - crhs2*crhs54;
        rhs[6]=crhs13*crhs3 - crhs19*crhs49 + crhs19*crhs52 - crhs3*crhs51 + crhs3*crhs9;
        rhs[7]=-crhs19*crhs53 + crhs19*crhs55 + crhs3*crhs43 + crhs3*crhs44 - crhs3*crhs54;
        rhs[8]=-scale_factor*(crhs27*normalslave(0,0) + crhs58*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs59*crhs60);
        rhs[9]=-scale_factor*(crhs27*normalslave(0,1) + crhs58*crhs59 + crhs60*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=scale_factor*(crhs11*tangentxislave(1,0) - crhs32*normalslave(1,0) + crhs7*tangentetaslave(1,0));
        rhs[11]=scale_factor*(crhs11*tangentxislave(1,1) - crhs32*normalslave(1,1) + crhs7*tangentetaslave(1,1));
    }
    else if (rActiveInactive == 8 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     X1(0,0) + u1old(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     X1(1,0) + u1old(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     X2(0,0) + u2old(0,0);
        const double crhs6 =     X2(1,0) + u2old(1,0);
        const double crhs7 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs8 =     -crhs0*crhs5 + crhs1*crhs2 + crhs3*crhs4 - crhs6*crhs7;
        const double crhs9 =     X1(0,1) + u1old(0,1);
        const double crhs10 =     X1(1,1) + u1old(1,1);
        const double crhs11 =     X2(0,1) + u2old(0,1);
        const double crhs12 =     X2(1,1) + u2old(1,1);
        const double crhs13 =     -crhs0*crhs11 + crhs10*crhs4 - crhs12*crhs7 + crhs2*crhs9;
        const double crhs14 =     crhs13*tangentetaslave(0,1) + crhs8*tangentetaslave(0,0);
        const double crhs15 =     crhs14*penalty_parameter + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double crhs16 =     crhs15*tangentetaslave(0,0);
        const double crhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs19 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs21 =     crhs1*crhs18 - crhs17*crhs5 + crhs19*crhs3 - crhs20*crhs6;
        const double crhs22 =     crhs10*crhs19 - crhs11*crhs17 - crhs12*crhs20 + crhs18*crhs9;
        const double crhs23 =     crhs21*tangentetaslave(1,0) + crhs22*tangentetaslave(1,1);
        const double crhs24 =     crhs23*penalty_parameter + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double crhs25 =     crhs24*tangentetaslave(1,0);
        const double crhs26 =     crhs13*tangentxislave(0,1) + crhs8*tangentxislave(0,0);
        const double crhs27 =     crhs26*penalty_parameter + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double crhs28 =     crhs27*tangentxislave(0,0);
        const double crhs29 =     crhs21*tangentxislave(1,0) + crhs22*tangentxislave(1,1);
        const double crhs30 =     crhs29*penalty_parameter + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double crhs31 =     crhs30*tangentxislave(1,0);
        const double crhs32 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs33 =     X1(0,0) + u1(0,0);
        const double crhs34 =     X1(1,0) + u1(1,0);
        const double crhs35 =     X2(0,0) + u2(0,0);
        const double crhs36 =     X2(1,0) + u2(1,0);
        const double crhs37 =     X1(0,1) + u1(0,1);
        const double crhs38 =     X1(1,1) + u1(1,1);
        const double crhs39 =     X2(0,1) + u2(0,1);
        const double crhs40 =     X2(1,1) + u2(1,1);
        const double crhs41 =     normalslave(0,0)*(-crhs0*crhs35 + crhs2*crhs33 + crhs34*crhs4 - crhs36*crhs7) + normalslave(0,1)*(-crhs0*crhs39 + crhs2*crhs37 + crhs38*crhs4 - crhs40*crhs7);
        const double crhs42 =     crhs41*penalty_parameter;
        const double crhs43 =     crhs32 - crhs42;
        const double crhs44 =     crhs43*normalslave(0,0);
        const double crhs45 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs46 =     normalslave(1,0)*(-crhs17*crhs35 + crhs18*crhs33 + crhs19*crhs34 - crhs20*crhs36) + normalslave(1,1)*(-crhs17*crhs39 + crhs18*crhs37 + crhs19*crhs38 - crhs20*crhs40);
        const double crhs47 =     crhs46*penalty_parameter;
        const double crhs48 =     crhs45 - crhs47;
        const double crhs49 =     crhs48*normalslave(1,0);
        const double crhs50 =     crhs15*tangentetaslave(0,1);
        const double crhs51 =     crhs24*tangentetaslave(1,1);
        const double crhs52 =     crhs27*tangentxislave(0,1);
        const double crhs53 =     crhs30*tangentxislave(1,1);
        const double crhs54 =     crhs43*normalslave(0,1);
        const double crhs55 =     crhs48*normalslave(1,1);
        const double crhs56 =     -crhs32 + crhs42;
        const double crhs57 =     crhs56*normalslave(0,0);
        const double crhs58 =     -crhs45 + crhs47;
        const double crhs59 =     crhs58*normalslave(1,0);
        const double crhs60 =     crhs56*normalslave(0,1);
        const double crhs61 =     crhs58*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs16 - crhs0*crhs28 - crhs0*crhs44 - crhs17*crhs25 - crhs17*crhs31 - crhs17*crhs49;
        rhs[1]=-crhs0*crhs50 - crhs0*crhs52 - crhs0*crhs54 - crhs17*crhs51 - crhs17*crhs53 - crhs17*crhs55;
        rhs[2]=-crhs16*crhs7 - crhs20*crhs25 - crhs20*crhs31 - crhs20*crhs49 - crhs28*crhs7 - crhs44*crhs7;
        rhs[3]=-crhs20*crhs51 - crhs20*crhs53 - crhs20*crhs55 - crhs50*crhs7 - crhs52*crhs7 - crhs54*crhs7;
        rhs[4]=crhs16*crhs2 + crhs18*crhs25 + crhs18*crhs31 - crhs18*crhs59 + crhs2*crhs28 - crhs2*crhs57;
        rhs[5]=crhs18*crhs51 + crhs18*crhs53 - crhs18*crhs61 + crhs2*crhs50 + crhs2*crhs52 - crhs2*crhs60;
        rhs[6]=crhs16*crhs4 + crhs19*crhs25 + crhs19*crhs31 - crhs19*crhs59 + crhs28*crhs4 - crhs4*crhs57;
        rhs[7]=crhs19*crhs51 + crhs19*crhs53 - crhs19*crhs61 + crhs4*crhs50 + crhs4*crhs52 - crhs4*crhs60;
        rhs[8]=scale_factor*(crhs14*tangentetaslave(0,0) + crhs26*tangentxislave(0,0) - crhs41*normalslave(0,0));
        rhs[9]=scale_factor*(crhs14*tangentetaslave(0,1) + crhs26*tangentxislave(0,1) - crhs41*normalslave(0,1));
        rhs[10]=scale_factor*(crhs23*tangentetaslave(1,0) + crhs29*tangentxislave(1,0) - crhs46*normalslave(1,0));
        rhs[11]=scale_factor*(crhs23*tangentetaslave(1,1) + crhs29*tangentxislave(1,1) - crhs46*normalslave(1,1));
    }


    return rhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::EquationIdVector(
    EquationIdVectorType& rResult,
    ProcessInfo& CurrentProcessInfo 
    )
{
    KRATOS_TRY;   
    
    boost::shared_ptr<ConditionMap>& AllConditionSets = this->GetValue( CONTACT_SETS );
    
    // Calculates the size of the system
    const unsigned int ConditionSize = (TDim * ( TNumNodes + TNumNodes + TNumNodes) ) * AllConditionSets->size(); 
    
    if (rResult.size() != ConditionSize)
    {
        rResult.resize( ConditionSize, false );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for (auto ipair = AllConditionSets->begin(); ipair != AllConditionSets->end(); ++ipair )
    {
        GeometryType& current_master = (ipair->first)->GetGeometry( );
        
        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rResult[index++] = master_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = master_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = master_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes  Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_Z ).EquationId( );
            }
        }
        
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim, TNumNodes>::GetDofList(
    DofsVectorType& rConditionalDofList,
    ProcessInfo& rCurrentProcessInfo 
)
{
    KRATOS_TRY;
    
    boost::shared_ptr<ConditionMap>& AllConditionSets = this->GetValue( CONTACT_SETS );
    
    // Calculates the size of the system
    const unsigned int ConditionSize = (TDim * ( TNumNodes + TNumNodes + TNumNodes) ) * AllConditionSets->size(); 
    
    if (rConditionalDofList.size() != ConditionSize)
    {
        rConditionalDofList.resize( ConditionSize );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for (auto ipair = AllConditionSets->begin(); ipair != AllConditionSets->end(); ++ipair )
    {
        GeometryType& current_master = (ipair->first)->GetGeometry( );

        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_X );
            rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_Z );
            }
        }
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template class AugmentedLagrangianMethodFrictionalMortarContactCondition<2, 2>;
// template class AugmentedLagrangianMethodFrictionalMortarContactCondition<3, 3>;
// template class AugmentedLagrangianMethodFrictionalMortarContactCondition<3, 4>;

} // Namespace Kratos
