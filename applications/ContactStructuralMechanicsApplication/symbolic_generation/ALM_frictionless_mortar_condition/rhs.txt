
/***********************************************************************************/
/***********************************************************************************/

template<>
array_1d<double, 10> AugmentedLagrangianMethodFrictionlessMortarContactCondition<2,2>::CalculateLocalRHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,10> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const array_1d<double, 2> lmnormal = ContactUtilities::GetVariableVector<2>(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=-crhs0*lmnormal[0];
        rhs[9]=-crhs0*lmnormal[1];
    }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs2 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) - crhs3*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) - crhs3*(X2(1,1) + u2(1,1)));
        const double crhs5 =     -crhs4*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs6 =     crhs5*normalslave(1,0);
        const double crhs7 =     crhs5*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs6;
        rhs[1]=-crhs0*crhs7;
        rhs[2]=-crhs3*crhs6;
        rhs[3]=-crhs3*crhs7;
        rhs[4]=crhs1*crhs6;
        rhs[5]=crhs1*crhs7;
        rhs[6]=crhs2*crhs6;
        rhs[7]=crhs2*crhs7;
        rhs[8]=-0.5*lmnormal[0]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[9]=-crhs4*scale_factor;
    }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs2 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) - crhs3*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) - crhs3*(X2(1,1) + u2(1,1)));
        const double crhs5 =     -crhs4*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs6 =     crhs5*normalslave(0,0);
        const double crhs7 =     crhs5*normalslave(0,1);
    
        rhs[0]=-crhs0*crhs6;
        rhs[1]=-crhs0*crhs7;
        rhs[2]=-crhs3*crhs6;
        rhs[3]=-crhs3*crhs7;
        rhs[4]=crhs1*crhs6;
        rhs[5]=crhs1*crhs7;
        rhs[6]=crhs2*crhs6;
        rhs[7]=crhs2*crhs7;
        rhs[8]=-crhs4*scale_factor;
        rhs[9]=-0.5*lmnormal[1]*std::pow(scale_factor, 2.0)/penalty_parameter;
    }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     X2(0,0) + u2(0,0);
        const double crhs6 =     X2(1,0) + u2(1,0);
        const double crhs7 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs8 =     X1(0,1) + u1(0,1);
        const double crhs9 =     X1(1,1) + u1(1,1);
        const double crhs10 =     X2(0,1) + u2(0,1);
        const double crhs11 =     X2(1,1) + u2(1,1);
        const double crhs12 =     normalslave(0,0)*(-crhs0*crhs5 + crhs1*crhs2 + crhs3*crhs4 - crhs6*crhs7) + normalslave(0,1)*(-crhs0*crhs10 - crhs11*crhs7 + crhs2*crhs8 + crhs4*crhs9);
        const double crhs13 =     -crhs12*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs14 =     crhs13*normalslave(0,0);
        const double crhs15 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs16 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs17 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs19 =     normalslave(1,0)*(crhs1*crhs16 - crhs15*crhs5 + crhs17*crhs3 - crhs18*crhs6) + normalslave(1,1)*(-crhs10*crhs15 - crhs11*crhs18 + crhs16*crhs8 + crhs17*crhs9);
        const double crhs20 =     -crhs19*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs21 =     crhs20*normalslave(1,0);
        const double crhs22 =     crhs13*normalslave(0,1);
        const double crhs23 =     crhs20*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs14 - crhs15*crhs21;
        rhs[1]=-crhs0*crhs22 - crhs15*crhs23;
        rhs[2]=-crhs14*crhs7 - crhs18*crhs21;
        rhs[3]=-crhs18*crhs23 - crhs22*crhs7;
        rhs[4]=crhs14*crhs2 + crhs16*crhs21;
        rhs[5]=crhs16*crhs23 + crhs2*crhs22;
        rhs[6]=crhs14*crhs4 + crhs17*crhs21;
        rhs[7]=crhs17*crhs23 + crhs22*crhs4;
        rhs[8]=-crhs12*scale_factor;
        rhs[9]=-crhs19*scale_factor;
    }


    return rhs;
}

/***********************************************************************************/
/***********************************************************************************/

template<>
array_1d<double, 21> AugmentedLagrangianMethodFrictionlessMortarContactCondition<3,3>::CalculateLocalRHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,21> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 3, 3> u1 = ContactUtilities::GetVariableMatrix<3,3>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 3, 3> u2 = ContactUtilities::GetVariableMatrix<3,3>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 3, 3> X1 = ContactUtilities::GetCoordinates<3,3>(this->GetGeometry(), false);
    const bounded_matrix<double, 3, 3> X2 = ContactUtilities::GetCoordinates<3,3>(CurrentMasterElement, false);
    
    const array_1d<double, 3> lmnormal = ContactUtilities::GetVariableVector<3>(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 3, 3> normalslave = ContactUtilities::GetVariableMatrix<3,3>(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 3, 3> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 3, 3> DOperator = rMortarConditionMatrices.DOperator;

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=0;
        rhs[9]=0;
        rhs[10]=0;
        rhs[11]=0;
        rhs[12]=0;
        rhs[13]=0;
        rhs[14]=0;
        rhs[15]=0;
        rhs[16]=0;
        rhs[17]=0;
        rhs[18]=-crhs0*lmnormal[0];
        rhs[19]=-crhs0*lmnormal[1];
        rhs[20]=-crhs0*lmnormal[2];
    }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs2 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs4 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs6 =     normalslave(2,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) - crhs4*(X2(1,0) + u2(1,0)) - crhs5*(X2(2,0) + u2(2,0))) + normalslave(2,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) - crhs4*(X2(1,1) + u2(1,1)) - crhs5*(X2(2,1) + u2(2,1))) + normalslave(2,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) - crhs4*(X2(1,2) + u2(1,2)) - crhs5*(X2(2,2) + u2(2,2)));
        const double crhs7 =     -crhs6*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs8 =     crhs7*normalslave(2,0);
        const double crhs9 =     crhs7*normalslave(2,1);
        const double crhs10 =     crhs7*normalslave(2,2);
        const double crhs11 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs8;
        rhs[1]=-crhs0*crhs9;
        rhs[2]=-crhs0*crhs10;
        rhs[3]=-crhs4*crhs8;
        rhs[4]=-crhs4*crhs9;
        rhs[5]=-crhs10*crhs4;
        rhs[6]=-crhs5*crhs8;
        rhs[7]=-crhs5*crhs9;
        rhs[8]=-crhs10*crhs5;
        rhs[9]=crhs1*crhs8;
        rhs[10]=crhs1*crhs9;
        rhs[11]=crhs1*crhs10;
        rhs[12]=crhs2*crhs8;
        rhs[13]=crhs2*crhs9;
        rhs[14]=crhs10*crhs2;
        rhs[15]=crhs3*crhs8;
        rhs[16]=crhs3*crhs9;
        rhs[17]=crhs10*crhs3;
        rhs[18]=-crhs11*lmnormal[0];
        rhs[19]=-crhs11*lmnormal[1];
        rhs[20]=-crhs6*scale_factor;
    }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs2 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs6 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) - crhs4*(X2(1,0) + u2(1,0)) - crhs5*(X2(2,0) + u2(2,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) - crhs4*(X2(1,1) + u2(1,1)) - crhs5*(X2(2,1) + u2(2,1))) + normalslave(1,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) - crhs4*(X2(1,2) + u2(1,2)) - crhs5*(X2(2,2) + u2(2,2)));
        const double crhs7 =     -crhs6*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs8 =     crhs7*normalslave(1,0);
        const double crhs9 =     crhs7*normalslave(1,1);
        const double crhs10 =     crhs7*normalslave(1,2);
        const double crhs11 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs8;
        rhs[1]=-crhs0*crhs9;
        rhs[2]=-crhs0*crhs10;
        rhs[3]=-crhs4*crhs8;
        rhs[4]=-crhs4*crhs9;
        rhs[5]=-crhs10*crhs4;
        rhs[6]=-crhs5*crhs8;
        rhs[7]=-crhs5*crhs9;
        rhs[8]=-crhs10*crhs5;
        rhs[9]=crhs1*crhs8;
        rhs[10]=crhs1*crhs9;
        rhs[11]=crhs1*crhs10;
        rhs[12]=crhs2*crhs8;
        rhs[13]=crhs2*crhs9;
        rhs[14]=crhs10*crhs2;
        rhs[15]=crhs3*crhs8;
        rhs[16]=crhs3*crhs9;
        rhs[17]=crhs10*crhs3;
        rhs[18]=-crhs11*lmnormal[0];
        rhs[19]=-crhs6*scale_factor;
        rhs[20]=-crhs11*lmnormal[2];
    }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(1,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(1,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(1,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     -crhs24*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs26 =     crhs25*normalslave(1,0);
        const double crhs27 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs29 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs30 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs31 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(2,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(2,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(2,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     -crhs33*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs35 =     crhs34*normalslave(2,0);
        const double crhs36 =     crhs25*normalslave(1,1);
        const double crhs37 =     crhs34*normalslave(2,1);
        const double crhs38 =     crhs25*normalslave(1,2);
        const double crhs39 =     crhs34*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35;
        rhs[1]=-crhs0*crhs36 - crhs27*crhs37;
        rhs[2]=-crhs0*crhs38 - crhs27*crhs39;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35;
        rhs[4]=-crhs31*crhs37 - crhs36*crhs9;
        rhs[5]=-crhs31*crhs39 - crhs38*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35;
        rhs[7]=-crhs11*crhs36 - crhs32*crhs37;
        rhs[8]=-crhs11*crhs38 - crhs32*crhs39;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35;
        rhs[10]=crhs2*crhs36 + crhs28*crhs37;
        rhs[11]=crhs2*crhs38 + crhs28*crhs39;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35;
        rhs[13]=crhs29*crhs37 + crhs36*crhs4;
        rhs[14]=crhs29*crhs39 + crhs38*crhs4;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35;
        rhs[16]=crhs30*crhs37 + crhs36*crhs6;
        rhs[17]=crhs30*crhs39 + crhs38*crhs6;
        rhs[18]=-0.5*lmnormal[0]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[19]=-crhs24*scale_factor;
        rhs[20]=-crhs33*scale_factor;
    }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs2 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs6 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) - crhs4*(X2(1,0) + u2(1,0)) - crhs5*(X2(2,0) + u2(2,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) - crhs4*(X2(1,1) + u2(1,1)) - crhs5*(X2(2,1) + u2(2,1))) + normalslave(0,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) - crhs4*(X2(1,2) + u2(1,2)) - crhs5*(X2(2,2) + u2(2,2)));
        const double crhs7 =     -crhs6*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs8 =     crhs7*normalslave(0,0);
        const double crhs9 =     crhs7*normalslave(0,1);
        const double crhs10 =     crhs7*normalslave(0,2);
        const double crhs11 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs8;
        rhs[1]=-crhs0*crhs9;
        rhs[2]=-crhs0*crhs10;
        rhs[3]=-crhs4*crhs8;
        rhs[4]=-crhs4*crhs9;
        rhs[5]=-crhs10*crhs4;
        rhs[6]=-crhs5*crhs8;
        rhs[7]=-crhs5*crhs9;
        rhs[8]=-crhs10*crhs5;
        rhs[9]=crhs1*crhs8;
        rhs[10]=crhs1*crhs9;
        rhs[11]=crhs1*crhs10;
        rhs[12]=crhs2*crhs8;
        rhs[13]=crhs2*crhs9;
        rhs[14]=crhs10*crhs2;
        rhs[15]=crhs3*crhs8;
        rhs[16]=crhs3*crhs9;
        rhs[17]=crhs10*crhs3;
        rhs[18]=-crhs6*scale_factor;
        rhs[19]=-crhs11*lmnormal[1];
        rhs[20]=-crhs11*lmnormal[2];
    }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(0,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(0,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(0,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     -crhs24*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs29 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs30 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs31 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(2,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(2,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(2,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     -crhs33*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs35 =     crhs34*normalslave(2,0);
        const double crhs36 =     crhs25*normalslave(0,1);
        const double crhs37 =     crhs34*normalslave(2,1);
        const double crhs38 =     crhs25*normalslave(0,2);
        const double crhs39 =     crhs34*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35;
        rhs[1]=-crhs0*crhs36 - crhs27*crhs37;
        rhs[2]=-crhs0*crhs38 - crhs27*crhs39;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35;
        rhs[4]=-crhs31*crhs37 - crhs36*crhs9;
        rhs[5]=-crhs31*crhs39 - crhs38*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35;
        rhs[7]=-crhs11*crhs36 - crhs32*crhs37;
        rhs[8]=-crhs11*crhs38 - crhs32*crhs39;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35;
        rhs[10]=crhs2*crhs36 + crhs28*crhs37;
        rhs[11]=crhs2*crhs38 + crhs28*crhs39;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35;
        rhs[13]=crhs29*crhs37 + crhs36*crhs4;
        rhs[14]=crhs29*crhs39 + crhs38*crhs4;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35;
        rhs[16]=crhs30*crhs37 + crhs36*crhs6;
        rhs[17]=crhs30*crhs39 + crhs38*crhs6;
        rhs[18]=-crhs24*scale_factor;
        rhs[19]=-0.5*lmnormal[1]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[20]=-crhs33*scale_factor;
    }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(0,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(0,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(0,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     -crhs24*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs29 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs30 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(1,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(1,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(1,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     -crhs33*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     crhs25*normalslave(0,1);
        const double crhs37 =     crhs34*normalslave(1,1);
        const double crhs38 =     crhs25*normalslave(0,2);
        const double crhs39 =     crhs34*normalslave(1,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35;
        rhs[1]=-crhs0*crhs36 - crhs27*crhs37;
        rhs[2]=-crhs0*crhs38 - crhs27*crhs39;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35;
        rhs[4]=-crhs31*crhs37 - crhs36*crhs9;
        rhs[5]=-crhs31*crhs39 - crhs38*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35;
        rhs[7]=-crhs11*crhs36 - crhs32*crhs37;
        rhs[8]=-crhs11*crhs38 - crhs32*crhs39;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35;
        rhs[10]=crhs2*crhs36 + crhs28*crhs37;
        rhs[11]=crhs2*crhs38 + crhs28*crhs39;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35;
        rhs[13]=crhs29*crhs37 + crhs36*crhs4;
        rhs[14]=crhs29*crhs39 + crhs38*crhs4;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35;
        rhs[16]=crhs30*crhs37 + crhs36*crhs6;
        rhs[17]=crhs30*crhs39 + crhs38*crhs6;
        rhs[18]=-crhs24*scale_factor;
        rhs[19]=-crhs33*scale_factor;
        rhs[20]=-0.5*lmnormal[2]*std::pow(scale_factor, 2.0)/penalty_parameter;
    }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(0,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(0,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(0,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     -crhs24*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs29 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs30 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(1,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(1,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(1,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     -crhs33*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs37 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs38 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs39 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs42 =     normalslave(2,0)*(crhs1*crhs37 - crhs10*crhs41 + crhs3*crhs38 - crhs36*crhs7 + crhs39*crhs5 - crhs40*crhs8) + normalslave(2,1)*(crhs12*crhs37 + crhs13*crhs38 + crhs14*crhs39 - crhs15*crhs36 - crhs16*crhs40 - crhs17*crhs41) + normalslave(2,2)*(crhs18*crhs37 + crhs19*crhs38 + crhs20*crhs39 - crhs21*crhs36 - crhs22*crhs40 - crhs23*crhs41);
        const double crhs43 =     -crhs42*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs44 =     crhs43*normalslave(2,0);
        const double crhs45 =     crhs25*normalslave(0,1);
        const double crhs46 =     crhs34*normalslave(1,1);
        const double crhs47 =     crhs43*normalslave(2,1);
        const double crhs48 =     crhs25*normalslave(0,2);
        const double crhs49 =     crhs34*normalslave(1,2);
        const double crhs50 =     crhs43*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35 - crhs36*crhs44;
        rhs[1]=-crhs0*crhs45 - crhs27*crhs46 - crhs36*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs27*crhs49 - crhs36*crhs50;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35 - crhs40*crhs44;
        rhs[4]=-crhs31*crhs46 - crhs40*crhs47 - crhs45*crhs9;
        rhs[5]=-crhs31*crhs49 - crhs40*crhs50 - crhs48*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35 - crhs41*crhs44;
        rhs[7]=-crhs11*crhs45 - crhs32*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs11*crhs48 - crhs32*crhs49 - crhs41*crhs50;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35 + crhs37*crhs44;
        rhs[10]=crhs2*crhs45 + crhs28*crhs46 + crhs37*crhs47;
        rhs[11]=crhs2*crhs48 + crhs28*crhs49 + crhs37*crhs50;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35 + crhs38*crhs44;
        rhs[13]=crhs29*crhs46 + crhs38*crhs47 + crhs4*crhs45;
        rhs[14]=crhs29*crhs49 + crhs38*crhs50 + crhs4*crhs48;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35 + crhs39*crhs44;
        rhs[16]=crhs30*crhs46 + crhs39*crhs47 + crhs45*crhs6;
        rhs[17]=crhs30*crhs49 + crhs39*crhs50 + crhs48*crhs6;
        rhs[18]=-crhs24*scale_factor;
        rhs[19]=-crhs33*scale_factor;
        rhs[20]=-crhs42*scale_factor;
    }


    return rhs;
}

/***********************************************************************************/
/***********************************************************************************/

template<>
array_1d<double, 28> AugmentedLagrangianMethodFrictionlessMortarContactCondition<3,4>::CalculateLocalRHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,28> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 4, 3> u1 = ContactUtilities::GetVariableMatrix<3,4>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 4, 3> u2 = ContactUtilities::GetVariableMatrix<3,4>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 4, 3> X1 = ContactUtilities::GetCoordinates<3,4>(this->GetGeometry(), false);
    const bounded_matrix<double, 4, 3> X2 = ContactUtilities::GetCoordinates<3,4>(CurrentMasterElement, false);
    
    const array_1d<double, 4> lmnormal = ContactUtilities::GetVariableVector<4>(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 4, 3> normalslave = ContactUtilities::GetVariableMatrix<3,4>(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 4, 4> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 4, 4> DOperator = rMortarConditionMatrices.DOperator;

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=0;
        rhs[9]=0;
        rhs[10]=0;
        rhs[11]=0;
        rhs[12]=0;
        rhs[13]=0;
        rhs[14]=0;
        rhs[15]=0;
        rhs[16]=0;
        rhs[17]=0;
        rhs[18]=0;
        rhs[19]=0;
        rhs[20]=0;
        rhs[21]=0;
        rhs[22]=0;
        rhs[23]=0;
        rhs[24]=-crhs0*lmnormal[0];
        rhs[25]=-crhs0*lmnormal[1];
        rhs[26]=-crhs0*lmnormal[2];
        rhs[27]=-crhs0*lmnormal[3];
    }
    else if (rActiveInactive == 8 )
    {
        const double crhs0 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs2 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs4 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(3,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(3,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(3,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     -crhs8*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs10 =     crhs9*normalslave(3,0);
        const double crhs11 =     crhs9*normalslave(3,1);
        const double crhs12 =     crhs9*normalslave(3,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs13*lmnormal[0];
        rhs[25]=-crhs13*lmnormal[1];
        rhs[26]=-crhs13*lmnormal[2];
        rhs[27]=-crhs8*scale_factor;
    }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs2 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs4 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(2,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(2,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(2,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     -crhs8*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs10 =     crhs9*normalslave(2,0);
        const double crhs11 =     crhs9*normalslave(2,1);
        const double crhs12 =     crhs9*normalslave(2,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs13*lmnormal[0];
        rhs[25]=-crhs13*lmnormal[1];
        rhs[26]=-crhs8*scale_factor;
        rhs[27]=-crhs13*lmnormal[3];
    }
    else if (rActiveInactive == 12 )
    {
        const double crhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(2,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(2,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(2,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs34 =     crhs33*normalslave(2,0);
        const double crhs35 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(3,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(3,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(3,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs45 =     crhs44*normalslave(3,0);
        const double crhs46 =     crhs33*normalslave(2,1);
        const double crhs47 =     crhs44*normalslave(3,1);
        const double crhs48 =     crhs33*normalslave(2,2);
        const double crhs49 =     crhs44*normalslave(3,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs50*lmnormal[0];
        rhs[25]=-crhs50*lmnormal[1];
        rhs[26]=-crhs32*scale_factor;
        rhs[27]=-crhs43*scale_factor;
    }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs2 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs4 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(1,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     -crhs8*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs10 =     crhs9*normalslave(1,0);
        const double crhs11 =     crhs9*normalslave(1,1);
        const double crhs12 =     crhs9*normalslave(1,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs13*lmnormal[0];
        rhs[25]=-crhs8*scale_factor;
        rhs[26]=-crhs13*lmnormal[2];
        rhs[27]=-crhs13*lmnormal[3];
    }
    else if (rActiveInactive == 10 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(1,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(1,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs34 =     crhs33*normalslave(1,0);
        const double crhs35 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(3,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(3,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(3,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs45 =     crhs44*normalslave(3,0);
        const double crhs46 =     crhs33*normalslave(1,1);
        const double crhs47 =     crhs44*normalslave(3,1);
        const double crhs48 =     crhs33*normalslave(1,2);
        const double crhs49 =     crhs44*normalslave(3,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs50*lmnormal[0];
        rhs[25]=-crhs32*scale_factor;
        rhs[26]=-crhs50*lmnormal[2];
        rhs[27]=-crhs43*scale_factor;
    }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(1,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(1,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs34 =     crhs33*normalslave(1,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     crhs33*normalslave(1,1);
        const double crhs47 =     crhs44*normalslave(2,1);
        const double crhs48 =     crhs33*normalslave(1,2);
        const double crhs49 =     crhs44*normalslave(2,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs50*lmnormal[0];
        rhs[25]=-crhs32*scale_factor;
        rhs[26]=-crhs43*scale_factor;
        rhs[27]=-crhs50*lmnormal[3];
    }
    else if (rActiveInactive == 14 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(1,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(1,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs34 =     crhs33*normalslave(1,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs48 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs49 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs50 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs51 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(3,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(3,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(3,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     -crhs54*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs56 =     crhs55*normalslave(3,0);
        const double crhs57 =     crhs33*normalslave(1,1);
        const double crhs58 =     crhs44*normalslave(2,1);
        const double crhs59 =     crhs55*normalslave(3,1);
        const double crhs60 =     crhs33*normalslave(1,2);
        const double crhs61 =     crhs44*normalslave(2,2);
        const double crhs62 =     crhs55*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=-0.5*lmnormal[0]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[25]=-crhs32*scale_factor;
        rhs[26]=-crhs43*scale_factor;
        rhs[27]=-crhs54*scale_factor;
    }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs2 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs4 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(0,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     -crhs8*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs10 =     crhs9*normalslave(0,0);
        const double crhs11 =     crhs9*normalslave(0,1);
        const double crhs12 =     crhs9*normalslave(0,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs8*scale_factor;
        rhs[25]=-crhs13*lmnormal[1];
        rhs[26]=-crhs13*lmnormal[2];
        rhs[27]=-crhs13*lmnormal[3];
    }
    else if (rActiveInactive == 9 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(3,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(3,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(3,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs45 =     crhs44*normalslave(3,0);
        const double crhs46 =     crhs33*normalslave(0,1);
        const double crhs47 =     crhs44*normalslave(3,1);
        const double crhs48 =     crhs33*normalslave(0,2);
        const double crhs49 =     crhs44*normalslave(3,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-crhs50*lmnormal[1];
        rhs[26]=-crhs50*lmnormal[2];
        rhs[27]=-crhs43*scale_factor;
    }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     crhs33*normalslave(0,1);
        const double crhs47 =     crhs44*normalslave(2,1);
        const double crhs48 =     crhs33*normalslave(0,2);
        const double crhs49 =     crhs44*normalslave(2,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-crhs50*lmnormal[1];
        rhs[26]=-crhs43*scale_factor;
        rhs[27]=-crhs50*lmnormal[3];
    }
    else if (rActiveInactive == 13 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs48 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs49 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs50 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs51 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(3,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(3,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(3,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     -crhs54*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs56 =     crhs55*normalslave(3,0);
        const double crhs57 =     crhs33*normalslave(0,1);
        const double crhs58 =     crhs44*normalslave(2,1);
        const double crhs59 =     crhs55*normalslave(3,1);
        const double crhs60 =     crhs33*normalslave(0,2);
        const double crhs61 =     crhs44*normalslave(2,2);
        const double crhs62 =     crhs55*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-0.5*lmnormal[1]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[26]=-crhs43*scale_factor;
        rhs[27]=-crhs54*scale_factor;
    }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     crhs33*normalslave(0,1);
        const double crhs47 =     crhs44*normalslave(1,1);
        const double crhs48 =     crhs33*normalslave(0,2);
        const double crhs49 =     crhs44*normalslave(1,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-crhs43*scale_factor;
        rhs[26]=-crhs50*lmnormal[2];
        rhs[27]=-crhs50*lmnormal[3];
    }
    else if (rActiveInactive == 11 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs48 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs49 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs50 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs51 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(3,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(3,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(3,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     -crhs54*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs56 =     crhs55*normalslave(3,0);
        const double crhs57 =     crhs33*normalslave(0,1);
        const double crhs58 =     crhs44*normalslave(1,1);
        const double crhs59 =     crhs55*normalslave(3,1);
        const double crhs60 =     crhs33*normalslave(0,2);
        const double crhs61 =     crhs44*normalslave(1,2);
        const double crhs62 =     crhs55*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-crhs43*scale_factor;
        rhs[26]=-0.5*lmnormal[2]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[27]=-crhs54*scale_factor;
    }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs48 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs49 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs50 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs51 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(2,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(2,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(2,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     -crhs54*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs56 =     crhs55*normalslave(2,0);
        const double crhs57 =     crhs33*normalslave(0,1);
        const double crhs58 =     crhs44*normalslave(1,1);
        const double crhs59 =     crhs55*normalslave(2,1);
        const double crhs60 =     crhs33*normalslave(0,2);
        const double crhs61 =     crhs44*normalslave(1,2);
        const double crhs62 =     crhs55*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-crhs43*scale_factor;
        rhs[26]=-crhs54*scale_factor;
        rhs[27]=-0.5*lmnormal[3]*std::pow(scale_factor, 2.0)/penalty_parameter;
    }
    else if (rActiveInactive == 15 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     -crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     -crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs48 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs49 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs50 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs51 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(2,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(2,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(2,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     -crhs54*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs56 =     crhs55*normalslave(2,0);
        const double crhs57 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs58 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs59 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs60 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs61 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs62 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs63 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs64 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs65 =     normalslave(3,0)*(crhs1*crhs58 - crhs10*crhs62 - crhs12*crhs63 - crhs14*crhs64 + crhs3*crhs59 + crhs5*crhs60 - crhs57*crhs9 + crhs61*crhs7) + normalslave(3,1)*(crhs16*crhs58 + crhs17*crhs59 + crhs18*crhs60 + crhs19*crhs61 - crhs20*crhs57 - crhs21*crhs62 - crhs22*crhs63 - crhs23*crhs64) + normalslave(3,2)*(crhs24*crhs58 + crhs25*crhs59 + crhs26*crhs60 + crhs27*crhs61 - crhs28*crhs57 - crhs29*crhs62 - crhs30*crhs63 - crhs31*crhs64);
        const double crhs66 =     -crhs65*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs67 =     crhs66*normalslave(3,0);
        const double crhs68 =     crhs33*normalslave(0,1);
        const double crhs69 =     crhs44*normalslave(1,1);
        const double crhs70 =     crhs55*normalslave(2,1);
        const double crhs71 =     crhs66*normalslave(3,1);
        const double crhs72 =     crhs33*normalslave(0,2);
        const double crhs73 =     crhs44*normalslave(1,2);
        const double crhs74 =     crhs55*normalslave(2,2);
        const double crhs75 =     crhs66*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56 - crhs57*crhs67;
        rhs[1]=-crhs0*crhs68 - crhs35*crhs69 - crhs46*crhs70 - crhs57*crhs71;
        rhs[2]=-crhs0*crhs72 - crhs35*crhs73 - crhs46*crhs74 - crhs57*crhs75;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56 - crhs62*crhs67;
        rhs[4]=-crhs11*crhs68 - crhs40*crhs69 - crhs51*crhs70 - crhs62*crhs71;
        rhs[5]=-crhs11*crhs72 - crhs40*crhs73 - crhs51*crhs74 - crhs62*crhs75;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56 - crhs63*crhs67;
        rhs[7]=-crhs13*crhs68 - crhs41*crhs69 - crhs52*crhs70 - crhs63*crhs71;
        rhs[8]=-crhs13*crhs72 - crhs41*crhs73 - crhs52*crhs74 - crhs63*crhs75;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56 - crhs64*crhs67;
        rhs[10]=-crhs15*crhs68 - crhs42*crhs69 - crhs53*crhs70 - crhs64*crhs71;
        rhs[11]=-crhs15*crhs72 - crhs42*crhs73 - crhs53*crhs74 - crhs64*crhs75;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56 + crhs58*crhs67;
        rhs[13]=crhs2*crhs68 + crhs36*crhs69 + crhs47*crhs70 + crhs58*crhs71;
        rhs[14]=crhs2*crhs72 + crhs36*crhs73 + crhs47*crhs74 + crhs58*crhs75;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56 + crhs59*crhs67;
        rhs[16]=crhs37*crhs69 + crhs4*crhs68 + crhs48*crhs70 + crhs59*crhs71;
        rhs[17]=crhs37*crhs73 + crhs4*crhs72 + crhs48*crhs74 + crhs59*crhs75;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56 + crhs60*crhs67;
        rhs[19]=crhs38*crhs69 + crhs49*crhs70 + crhs6*crhs68 + crhs60*crhs71;
        rhs[20]=crhs38*crhs73 + crhs49*crhs74 + crhs6*crhs72 + crhs60*crhs75;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56 + crhs61*crhs67;
        rhs[22]=crhs39*crhs69 + crhs50*crhs70 + crhs61*crhs71 + crhs68*crhs8;
        rhs[23]=crhs39*crhs73 + crhs50*crhs74 + crhs61*crhs75 + crhs72*crhs8;
        rhs[24]=-crhs32*scale_factor;
        rhs[25]=-crhs43*scale_factor;
        rhs[26]=-crhs54*scale_factor;
        rhs[27]=-crhs65*scale_factor;
    }


    return rhs;
}
