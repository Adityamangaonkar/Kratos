// KRATOS  ___|  |       |       |
//       \___ \  __|  __| |   |  __| __| |   |  __| _` | |
//           | |   |    |   | (    |   |   | |   (   | |
//       _____/ \__|_|   \__,_|\___|\__|\__,_|_|  \__,_|_| MECHANICS
//
//  License: BSD License
//   license: StructuralMechanicsApplication/license.txt
//
//  Main authors:  Vicente Mataix Ferr√°ndiz
//

// System includes

// External includes

// Project includes
/* Mortar includes */
#include "custom_conditions/ALM_frictional_mortar_contact_condition.h"

/* Utilities */
#include "custom_utilities/contact_utilities.h"

namespace Kratos 
{
/************************************* OPERATIONS **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::Create( 
    IndexType NewId,
    NodesArrayType const& rThisNodes,
    PropertiesPointerType pProperties ) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes> >( NewId, this->GetGeometry().Create( rThisNodes ), pProperties );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::Create(
    IndexType NewId,
    GeometryPointerType pGeom,
    PropertiesPointerType pProperties) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes> >( NewId, pGeom, pProperties );
}

/************************************* DESTRUCTOR **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::~AugmentedLagrangianMethodFrictionalMortarContactCondition( )
{
}

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/


/***********************************************************************************/
/***********************************************************************************/

template<>
bounded_matrix<double, 12, 12> AugmentedLagrangianMethodFrictionalMortarContactCondition<2,2>::CalculateLocalLHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    bounded_matrix<double,12,12> lhs;
    
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u1old = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2old = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const bounded_matrix<double, 2, 2> lm = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), VECTOR_LAGRANGE_MULTIPLIER, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL);
    const bounded_matrix<double, 2, 2> tangentxislave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_XI);
    const bounded_matrix<double, 2, 2> tangentetaslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_ETA);
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    // Mortar operators derivatives
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaMOperator = rMortarConditionMatrices.DeltaMOperator;
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaDOperator = rMortarConditionMatrices.DeltaDOperator;

    // We get the friction coefficient
    const array_1d<double, 2> mu = GetFrictionCoefficient();

    if (rActiveInactive == 0 )
    {
        const double clhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs1 =     clhs0*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs2 =     clhs0*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=0;
        lhs(0,1)=0;
        lhs(0,2)=0;
        lhs(0,3)=0;
        lhs(0,4)=0;
        lhs(0,5)=0;
        lhs(0,6)=0;
        lhs(0,7)=0;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(1,0)=0;
        lhs(1,1)=0;
        lhs(1,2)=0;
        lhs(1,3)=0;
        lhs(1,4)=0;
        lhs(1,5)=0;
        lhs(1,6)=0;
        lhs(1,7)=0;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(2,0)=0;
        lhs(2,1)=0;
        lhs(2,2)=0;
        lhs(2,3)=0;
        lhs(2,4)=0;
        lhs(2,5)=0;
        lhs(2,6)=0;
        lhs(2,7)=0;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(3,0)=0;
        lhs(3,1)=0;
        lhs(3,2)=0;
        lhs(3,3)=0;
        lhs(3,4)=0;
        lhs(3,5)=0;
        lhs(3,6)=0;
        lhs(3,7)=0;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(4,0)=0;
        lhs(4,1)=0;
        lhs(4,2)=0;
        lhs(4,3)=0;
        lhs(4,4)=0;
        lhs(4,5)=0;
        lhs(4,6)=0;
        lhs(4,7)=0;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(5,0)=0;
        lhs(5,1)=0;
        lhs(5,2)=0;
        lhs(5,3)=0;
        lhs(5,4)=0;
        lhs(5,5)=0;
        lhs(5,6)=0;
        lhs(5,7)=0;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(6,0)=0;
        lhs(6,1)=0;
        lhs(6,2)=0;
        lhs(6,3)=0;
        lhs(6,4)=0;
        lhs(6,5)=0;
        lhs(6,6)=0;
        lhs(6,7)=0;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(7,0)=0;
        lhs(7,1)=0;
        lhs(7,2)=0;
        lhs(7,3)=0;
        lhs(7,4)=0;
        lhs(7,5)=0;
        lhs(7,6)=0;
        lhs(7,7)=0;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs0*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs1;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs1;
        lhs(9,9)=clhs0*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs0*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs2;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs2;
        lhs(11,11)=clhs0*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 1 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(0,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(0,0);
        const double clhs17 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs18 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs20 =     normalslave(0,1)*(-clhs1*clhs12 + clhs10*clhs17 + clhs11*clhs18 - clhs13*clhs19);
        const double clhs21 =     normalslave(0,0)*(clhs0 + clhs1*clhs7 - clhs17*clhs3 - clhs18*clhs5 + clhs19*clhs8);
        const double clhs22 =     -clhs20 + clhs21;
        const double clhs23 =     clhs22*normalslave(0,0)*penalty_parameter;
        const double clhs24 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs25 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs26 =     clhs24*tangentetaslave(0,0) + clhs25*tangentxislave(0,0);
        const double clhs27 =     clhs24*tangentetaslave(0,1) + clhs25*tangentxislave(0,1);
        const double clhs28 =     std::pow(clhs26, 2) + std::pow(clhs27, 2);
        const double clhs29 =     std::pow(clhs28, -1.0L/2.0L);
        const double clhs30 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs31 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs32 =     clhs30*tangentetaslave(1,0) + clhs31*tangentxislave(1,0);
        const double clhs33 =     clhs30*tangentetaslave(1,1) + clhs31*tangentxislave(1,1);
        const double clhs34 =     std::pow(clhs32, 2) + std::pow(clhs33, 2);
        const double clhs35 =     std::pow(clhs34, -1.0L/2.0L);
        const double clhs36 =     clhs15*clhs26*clhs29*clhs35*mu[0];
        const double clhs37 =     clhs22*clhs26*clhs29*clhs35*mu[0]*penalty_parameter;
        const double clhs38 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs39 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs40 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs41 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs42 =     normalslave(0,0)*(clhs3*clhs39 - clhs38*clhs7 + clhs40*clhs5 - clhs41*clhs8) - normalslave(0,1)*(clhs0 - clhs10*clhs39 - clhs11*clhs40 + clhs12*clhs38 + clhs13*clhs41);
        const double clhs43 =     clhs42*normalslave(0,0)*penalty_parameter;
        const double clhs44 =     clhs26*clhs29*clhs35*clhs42*mu[0]*penalty_parameter;
        const double clhs45 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs46 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs47 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs48 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs49 =     normalslave(0,1)*(clhs10*clhs46 + clhs11*clhs47 - clhs12*clhs45 - clhs13*clhs48);
        const double clhs50 =     normalslave(0,0)*(-clhs3*clhs46 + clhs45*clhs7 - clhs47*clhs5 + clhs48*clhs8 + clhs9);
        const double clhs51 =     -clhs49 + clhs50;
        const double clhs52 =     clhs51*normalslave(0,0)*penalty_parameter;
        const double clhs53 =     clhs26*clhs29*clhs35*clhs51*mu[0]*penalty_parameter;
        const double clhs54 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs55 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs56 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs57 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs58 =     normalslave(0,0)*(clhs3*clhs55 + clhs5*clhs56 - clhs54*clhs7 - clhs57*clhs8) - normalslave(0,1)*(-clhs10*clhs55 - clhs11*clhs56 + clhs12*clhs54 + clhs13*clhs57 + clhs9);
        const double clhs59 =     clhs58*normalslave(0,0)*penalty_parameter;
        const double clhs60 =     clhs26*clhs29*clhs35*clhs58*mu[0]*penalty_parameter;
        const double clhs61 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs62 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs63 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs64 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs65 =     normalslave(0,0)*(clhs3*clhs62 + clhs4 + clhs5*clhs63 - clhs61*clhs7 - clhs64*clhs8) + normalslave(0,1)*(clhs10*clhs62 + clhs11*clhs63 - clhs12*clhs61 - clhs13*clhs64);
        const double clhs66 =     clhs65*normalslave(0,0)*penalty_parameter;
        const double clhs67 =     clhs26*clhs29*clhs35*clhs65*mu[0]*penalty_parameter;
        const double clhs68 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs69 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs70 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs71 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs72 =     normalslave(0,0)*(clhs3*clhs69 + clhs5*clhs70 - clhs68*clhs7 - clhs71*clhs8) + normalslave(0,1)*(clhs10*clhs69 + clhs11*clhs70 - clhs12*clhs68 - clhs13*clhs71 + clhs4);
        const double clhs73 =     clhs72*normalslave(0,0)*penalty_parameter;
        const double clhs74 =     clhs26*clhs29*clhs35*clhs72*mu[0]*penalty_parameter;
        const double clhs75 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs76 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs77 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs78 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs79 =     normalslave(0,0)*(clhs3*clhs76 + clhs5*clhs77 + clhs6 - clhs7*clhs75 - clhs78*clhs8) + normalslave(0,1)*(clhs10*clhs76 + clhs11*clhs77 - clhs12*clhs75 - clhs13*clhs78);
        const double clhs80 =     clhs79*normalslave(0,0)*penalty_parameter;
        const double clhs81 =     clhs26*clhs29*clhs35*clhs79*mu[0]*penalty_parameter;
        const double clhs82 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs83 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs84 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs85 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs86 =     normalslave(0,0)*(clhs3*clhs83 + clhs5*clhs84 - clhs7*clhs82 - clhs8*clhs85) + normalslave(0,1)*(clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85 + clhs6);
        const double clhs87 =     clhs86*normalslave(0,0)*penalty_parameter;
        const double clhs88 =     clhs26*clhs29*clhs35*clhs86*mu[0]*penalty_parameter;
        const double clhs89 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs90 =     clhs29*clhs35*mu[0]*normalslave(0,0)*scale_factor;
        const double clhs91 =     clhs26*clhs90;
        const double clhs92 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs93 =     clhs29*clhs35*clhs92*mu[0];
        const double clhs94 =     -clhs14 + clhs2;
        const double clhs95 =     clhs26*clhs92;
        const double clhs96 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs97 =     clhs27*clhs96;
        const double clhs98 =     clhs95 + clhs97;
        const double clhs99 =     std::pow(clhs28, -3.0L/2.0L);
        const double clhs100 =     clhs26*clhs35*clhs94*clhs99*mu[0];
        const double clhs101 =     clhs100*clhs98 + clhs89 - clhs91 - clhs93*clhs94;
        const double clhs102 =     normalslave(0,1)*(normalslave(0,0)*scale_factor);
        const double clhs103 =     clhs29*clhs35*clhs96*mu[0];
        const double clhs104 =     clhs102 - clhs103*clhs94;
        const double clhs105 =     clhs29*clhs35*mu[0]*normalslave(0,1)*scale_factor;
        const double clhs106 =     clhs105*clhs26;
        const double clhs107 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs108 =     clhs107*clhs27;
        const double clhs109 =     clhs26*clhs96;
        const double clhs110 =     clhs108 + clhs109;
        const double clhs111 =     clhs100*clhs110 + clhs104 - clhs106;
        const double clhs112 =     std::pow(clhs34, -3.0L/2.0L);
        const double clhs113 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs114 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs115 =     clhs113*clhs32 + clhs114*clhs33;
        const double clhs116 =     clhs112*clhs115*clhs15*clhs26*clhs29*mu[0];
        const double clhs117 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs118 =     clhs114*clhs32 + clhs117*clhs33;
        const double clhs119 =     clhs112*clhs118*clhs15*clhs26*clhs29*mu[0];
        const double clhs120 =     clhs15*normalslave(0,1);
        const double clhs121 =     clhs22*normalslave(0,1)*penalty_parameter;
        const double clhs122 =     clhs15*clhs27*clhs29*clhs35*mu[0];
        const double clhs123 =     clhs22*clhs27*clhs29*clhs35*mu[0]*penalty_parameter;
        const double clhs124 =     clhs42*normalslave(0,1)*penalty_parameter;
        const double clhs125 =     clhs27*clhs29*clhs35*clhs42*mu[0]*penalty_parameter;
        const double clhs126 =     clhs51*normalslave(0,1)*penalty_parameter;
        const double clhs127 =     clhs27*clhs29*clhs35*clhs51*mu[0]*penalty_parameter;
        const double clhs128 =     clhs58*normalslave(0,1)*penalty_parameter;
        const double clhs129 =     clhs27*clhs29*clhs35*clhs58*mu[0]*penalty_parameter;
        const double clhs130 =     clhs65*normalslave(0,1)*penalty_parameter;
        const double clhs131 =     clhs27*clhs29*clhs35*clhs65*mu[0]*penalty_parameter;
        const double clhs132 =     clhs72*normalslave(0,1)*penalty_parameter;
        const double clhs133 =     clhs27*clhs29*clhs35*clhs72*mu[0]*penalty_parameter;
        const double clhs134 =     clhs79*normalslave(0,1)*penalty_parameter;
        const double clhs135 =     clhs27*clhs29*clhs35*clhs79*mu[0]*penalty_parameter;
        const double clhs136 =     clhs86*normalslave(0,1)*penalty_parameter;
        const double clhs137 =     clhs27*clhs29*clhs35*clhs86*mu[0]*penalty_parameter;
        const double clhs138 =     clhs27*clhs90;
        const double clhs139 =     clhs27*clhs35*clhs94*clhs99*mu[0];
        const double clhs140 =     clhs104 - clhs138 + clhs139*clhs98;
        const double clhs141 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs142 =     clhs105*clhs27;
        const double clhs143 =     clhs107*clhs29*clhs35*mu[0];
        const double clhs144 =     clhs110*clhs139 + clhs141 - clhs142 - clhs143*clhs94;
        const double clhs145 =     clhs112*clhs115*clhs15*clhs27*clhs29*mu[0];
        const double clhs146 =     clhs112*clhs118*clhs15*clhs27*clhs29*mu[0];
        const double clhs147 =     clhs94*normalslave(0,0);
        const double clhs148 =     clhs20 - clhs21;
        const double clhs149 =     clhs148*normalslave(0,0)*penalty_parameter;
        const double clhs150 =     clhs26*clhs29*clhs35*clhs94*mu[0];
        const double clhs151 =     clhs148*clhs26*clhs29*clhs35*mu[0]*penalty_parameter;
        const double clhs152 =     clhs49 - clhs50;
        const double clhs153 =     clhs152*normalslave(0,0)*penalty_parameter;
        const double clhs154 =     clhs152*clhs26*clhs29*clhs35*mu[0]*penalty_parameter;
        const double clhs155 =     clhs15*clhs26*clhs35*clhs99*mu[0];
        const double clhs156 =     -clhs15*clhs93 + clhs155*clhs98 + clhs91;
        const double clhs157 =     clhs156 - clhs89;
        const double clhs158 =     -clhs103*clhs15;
        const double clhs159 =     -clhs102 + clhs158;
        const double clhs160 =     clhs106 + clhs110*clhs155;
        const double clhs161 =     clhs159 + clhs160;
        const double clhs162 =     clhs94*normalslave(0,1);
        const double clhs163 =     clhs148*normalslave(0,1)*penalty_parameter;
        const double clhs164 =     clhs27*clhs29*clhs35*clhs94*mu[0];
        const double clhs165 =     clhs148*clhs27*clhs29*clhs35*mu[0]*penalty_parameter;
        const double clhs166 =     clhs152*normalslave(0,1)*penalty_parameter;
        const double clhs167 =     clhs152*clhs27*clhs29*clhs35*mu[0]*penalty_parameter;
        const double clhs168 =     clhs15*clhs27*clhs35*clhs99*mu[0];
        const double clhs169 =     clhs138 + clhs168*clhs98;
        const double clhs170 =     clhs159 + clhs169;
        const double clhs171 =     clhs110*clhs168 + clhs142 - clhs143*clhs15;
        const double clhs172 =     -clhs141 + clhs171;
        const double clhs173 =     clhs148*scale_factor;
        const double clhs174 =     0.5*clhs29*clhs35*mu[0];
        const double clhs175 =     -clhs174*clhs95 - clhs174*clhs97 + normalslave(0,0);
        const double clhs176 =     clhs42*scale_factor;
        const double clhs177 =     clhs152*scale_factor;
        const double clhs178 =     clhs58*scale_factor;
        const double clhs179 =     clhs65*scale_factor;
        const double clhs180 =     clhs72*scale_factor;
        const double clhs181 =     clhs79*scale_factor;
        const double clhs182 =     clhs86*scale_factor;
        const double clhs183 =     1.0/penalty_parameter;
        const double clhs184 =     0.5*clhs183*scale_factor;
        const double clhs185 =     clhs156 + clhs92*scale_factor;
        const double clhs186 =     clhs158 + clhs96*scale_factor;
        const double clhs187 =     clhs169 + clhs186;
        const double clhs188 =     clhs160 + clhs186;
        const double clhs189 =     clhs107*scale_factor + clhs171;
        const double clhs190 =     0.5*clhs112*clhs183*clhs29*clhs94*clhs98*mu[0]*scale_factor;
        const double clhs191 =     -clhs108*clhs174 - clhs109*clhs174 + normalslave(0,1);
        const double clhs192 =     0.5*clhs110*clhs112*clhs183*clhs29*clhs94*mu[0]*scale_factor;
        const double clhs193 =     0.5*clhs183*std::pow(scale_factor, 2.0);
        const double clhs194 =     clhs193*(clhs114 + normalslave(1,0)*normalslave(1,1));
    
        lhs(0,0)=clhs0*clhs23 - clhs0*clhs37 - clhs1*clhs16 + clhs1*clhs36;
        lhs(0,1)=-clhs0*clhs43 + clhs0*clhs44 - clhs16*clhs38 + clhs36*clhs38;
        lhs(0,2)=clhs0*clhs52 - clhs0*clhs53 - clhs16*clhs45 + clhs36*clhs45;
        lhs(0,3)=-clhs0*clhs59 + clhs0*clhs60 - clhs16*clhs54 + clhs36*clhs54;
        lhs(0,4)=-clhs0*clhs66 + clhs0*clhs67 - clhs16*clhs61 + clhs36*clhs61;
        lhs(0,5)=-clhs0*clhs73 + clhs0*clhs74 - clhs16*clhs68 + clhs36*clhs68;
        lhs(0,6)=-clhs0*clhs80 + clhs0*clhs81 - clhs16*clhs75 + clhs36*clhs75;
        lhs(0,7)=-clhs0*clhs87 + clhs0*clhs88 - clhs16*clhs82 + clhs36*clhs82;
        lhs(0,8)=clhs0*clhs101;
        lhs(0,9)=clhs0*clhs111;
        lhs(0,10)=-clhs0*clhs116;
        lhs(0,11)=-clhs0*clhs119;
        lhs(1,0)=clhs0*clhs121 - clhs0*clhs123 - clhs1*clhs120 + clhs1*clhs122;
        lhs(1,1)=-clhs0*clhs124 + clhs0*clhs125 - clhs120*clhs38 + clhs122*clhs38;
        lhs(1,2)=clhs0*clhs126 - clhs0*clhs127 - clhs120*clhs45 + clhs122*clhs45;
        lhs(1,3)=-clhs0*clhs128 + clhs0*clhs129 - clhs120*clhs54 + clhs122*clhs54;
        lhs(1,4)=-clhs0*clhs130 + clhs0*clhs131 - clhs120*clhs61 + clhs122*clhs61;
        lhs(1,5)=-clhs0*clhs132 + clhs0*clhs133 - clhs120*clhs68 + clhs122*clhs68;
        lhs(1,6)=-clhs0*clhs134 + clhs0*clhs135 - clhs120*clhs75 + clhs122*clhs75;
        lhs(1,7)=-clhs0*clhs136 + clhs0*clhs137 - clhs120*clhs82 + clhs122*clhs82;
        lhs(1,8)=clhs0*clhs140;
        lhs(1,9)=clhs0*clhs144;
        lhs(1,10)=-clhs0*clhs145;
        lhs(1,11)=-clhs0*clhs146;
        lhs(2,0)=-clhs16*clhs19 + clhs19*clhs36 + clhs23*clhs9 - clhs37*clhs9;
        lhs(2,1)=-clhs16*clhs41 + clhs36*clhs41 - clhs43*clhs9 + clhs44*clhs9;
        lhs(2,2)=-clhs16*clhs48 + clhs36*clhs48 + clhs52*clhs9 - clhs53*clhs9;
        lhs(2,3)=-clhs16*clhs57 + clhs36*clhs57 - clhs59*clhs9 + clhs60*clhs9;
        lhs(2,4)=-clhs16*clhs64 + clhs36*clhs64 - clhs66*clhs9 + clhs67*clhs9;
        lhs(2,5)=-clhs16*clhs71 + clhs36*clhs71 - clhs73*clhs9 + clhs74*clhs9;
        lhs(2,6)=-clhs16*clhs78 + clhs36*clhs78 - clhs80*clhs9 + clhs81*clhs9;
        lhs(2,7)=-clhs16*clhs85 + clhs36*clhs85 - clhs87*clhs9 + clhs88*clhs9;
        lhs(2,8)=clhs101*clhs9;
        lhs(2,9)=clhs111*clhs9;
        lhs(2,10)=-clhs116*clhs9;
        lhs(2,11)=-clhs119*clhs9;
        lhs(3,0)=-clhs120*clhs19 + clhs121*clhs9 + clhs122*clhs19 - clhs123*clhs9;
        lhs(3,1)=-clhs120*clhs41 + clhs122*clhs41 - clhs124*clhs9 + clhs125*clhs9;
        lhs(3,2)=-clhs120*clhs48 + clhs122*clhs48 + clhs126*clhs9 - clhs127*clhs9;
        lhs(3,3)=-clhs120*clhs57 + clhs122*clhs57 - clhs128*clhs9 + clhs129*clhs9;
        lhs(3,4)=-clhs120*clhs64 + clhs122*clhs64 - clhs130*clhs9 + clhs131*clhs9;
        lhs(3,5)=-clhs120*clhs71 + clhs122*clhs71 - clhs132*clhs9 + clhs133*clhs9;
        lhs(3,6)=-clhs120*clhs78 + clhs122*clhs78 - clhs134*clhs9 + clhs135*clhs9;
        lhs(3,7)=-clhs120*clhs85 + clhs122*clhs85 - clhs136*clhs9 + clhs137*clhs9;
        lhs(3,8)=clhs140*clhs9;
        lhs(3,9)=clhs144*clhs9;
        lhs(3,10)=-clhs145*clhs9;
        lhs(3,11)=-clhs146*clhs9;
        lhs(4,0)=-clhs147*clhs17 + clhs149*clhs4 + clhs150*clhs17 - clhs151*clhs4;
        lhs(4,1)=-clhs147*clhs39 + clhs150*clhs39 + clhs4*clhs43 - clhs4*clhs44;
        lhs(4,2)=-clhs147*clhs46 + clhs150*clhs46 + clhs153*clhs4 - clhs154*clhs4;
        lhs(4,3)=-clhs147*clhs55 + clhs150*clhs55 + clhs4*clhs59 - clhs4*clhs60;
        lhs(4,4)=-clhs147*clhs62 + clhs150*clhs62 + clhs4*clhs66 - clhs4*clhs67;
        lhs(4,5)=-clhs147*clhs69 + clhs150*clhs69 + clhs4*clhs73 - clhs4*clhs74;
        lhs(4,6)=-clhs147*clhs76 + clhs150*clhs76 + clhs4*clhs80 - clhs4*clhs81;
        lhs(4,7)=-clhs147*clhs83 + clhs150*clhs83 + clhs4*clhs87 - clhs4*clhs88;
        lhs(4,8)=clhs157*clhs4;
        lhs(4,9)=clhs161*clhs4;
        lhs(4,10)=clhs116*clhs4;
        lhs(4,11)=clhs119*clhs4;
        lhs(5,0)=-clhs162*clhs17 + clhs163*clhs4 + clhs164*clhs17 - clhs165*clhs4;
        lhs(5,1)=clhs124*clhs4 - clhs125*clhs4 - clhs162*clhs39 + clhs164*clhs39;
        lhs(5,2)=-clhs162*clhs46 + clhs164*clhs46 + clhs166*clhs4 - clhs167*clhs4;
        lhs(5,3)=clhs128*clhs4 - clhs129*clhs4 - clhs162*clhs55 + clhs164*clhs55;
        lhs(5,4)=clhs130*clhs4 - clhs131*clhs4 - clhs162*clhs62 + clhs164*clhs62;
        lhs(5,5)=clhs132*clhs4 - clhs133*clhs4 - clhs162*clhs69 + clhs164*clhs69;
        lhs(5,6)=clhs134*clhs4 - clhs135*clhs4 - clhs162*clhs76 + clhs164*clhs76;
        lhs(5,7)=clhs136*clhs4 - clhs137*clhs4 - clhs162*clhs83 + clhs164*clhs83;
        lhs(5,8)=clhs170*clhs4;
        lhs(5,9)=clhs172*clhs4;
        lhs(5,10)=clhs145*clhs4;
        lhs(5,11)=clhs146*clhs4;
        lhs(6,0)=-clhs147*clhs18 + clhs149*clhs6 + clhs150*clhs18 - clhs151*clhs6;
        lhs(6,1)=-clhs147*clhs40 + clhs150*clhs40 + clhs43*clhs6 - clhs44*clhs6;
        lhs(6,2)=-clhs147*clhs47 + clhs150*clhs47 + clhs153*clhs6 - clhs154*clhs6;
        lhs(6,3)=-clhs147*clhs56 + clhs150*clhs56 + clhs59*clhs6 - clhs6*clhs60;
        lhs(6,4)=-clhs147*clhs63 + clhs150*clhs63 + clhs6*clhs66 - clhs6*clhs67;
        lhs(6,5)=-clhs147*clhs70 + clhs150*clhs70 + clhs6*clhs73 - clhs6*clhs74;
        lhs(6,6)=-clhs147*clhs77 + clhs150*clhs77 + clhs6*clhs80 - clhs6*clhs81;
        lhs(6,7)=-clhs147*clhs84 + clhs150*clhs84 + clhs6*clhs87 - clhs6*clhs88;
        lhs(6,8)=clhs157*clhs6;
        lhs(6,9)=clhs161*clhs6;
        lhs(6,10)=clhs116*clhs6;
        lhs(6,11)=clhs119*clhs6;
        lhs(7,0)=-clhs162*clhs18 + clhs163*clhs6 + clhs164*clhs18 - clhs165*clhs6;
        lhs(7,1)=clhs124*clhs6 - clhs125*clhs6 - clhs162*clhs40 + clhs164*clhs40;
        lhs(7,2)=-clhs162*clhs47 + clhs164*clhs47 + clhs166*clhs6 - clhs167*clhs6;
        lhs(7,3)=clhs128*clhs6 - clhs129*clhs6 - clhs162*clhs56 + clhs164*clhs56;
        lhs(7,4)=clhs130*clhs6 - clhs131*clhs6 - clhs162*clhs63 + clhs164*clhs63;
        lhs(7,5)=clhs132*clhs6 - clhs133*clhs6 - clhs162*clhs70 + clhs164*clhs70;
        lhs(7,6)=clhs134*clhs6 - clhs135*clhs6 - clhs162*clhs77 + clhs164*clhs77;
        lhs(7,7)=clhs136*clhs6 - clhs137*clhs6 - clhs162*clhs84 + clhs164*clhs84;
        lhs(7,8)=clhs170*clhs6;
        lhs(7,9)=clhs172*clhs6;
        lhs(7,10)=clhs145*clhs6;
        lhs(7,11)=clhs146*clhs6;
        lhs(8,0)=clhs173*clhs175;
        lhs(8,1)=clhs175*clhs176;
        lhs(8,2)=clhs175*clhs177;
        lhs(8,3)=clhs175*clhs178;
        lhs(8,4)=clhs175*clhs179;
        lhs(8,5)=clhs175*clhs180;
        lhs(8,6)=clhs175*clhs181;
        lhs(8,7)=clhs175*clhs182;
        lhs(8,8)=clhs184*(clhs185*clhs92 + clhs187*clhs96);
        lhs(8,9)=clhs184*(clhs188*clhs92 + clhs189*clhs96);
        lhs(8,10)=-clhs115*clhs190;
        lhs(8,11)=-clhs118*clhs190;
        lhs(9,0)=clhs173*clhs191;
        lhs(9,1)=clhs176*clhs191;
        lhs(9,2)=clhs177*clhs191;
        lhs(9,3)=clhs178*clhs191;
        lhs(9,4)=clhs179*clhs191;
        lhs(9,5)=clhs180*clhs191;
        lhs(9,6)=clhs181*clhs191;
        lhs(9,7)=clhs182*clhs191;
        lhs(9,8)=clhs184*(clhs107*clhs187 + clhs185*clhs96);
        lhs(9,9)=clhs184*(clhs107*clhs189 + clhs188*clhs96);
        lhs(9,10)=-clhs115*clhs192;
        lhs(9,11)=-clhs118*clhs192;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs193*(clhs113 + std::pow(normalslave(1,0), 2));
        lhs(10,11)=clhs194;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs194;
        lhs(11,11)=clhs193*(clhs117 + std::pow(normalslave(1,1), 2));
    }
    else if (rActiveInactive == 2 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(0,1) + clhs9*tangentetaslave(0,0)) + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double clhs16 =     clhs15*tangentetaslave(0,0);
        const double clhs17 =     penalty_parameter*(clhs14*tangentxislave(0,1) + clhs9*tangentxislave(0,0)) + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double clhs18 =     clhs17*tangentxislave(0,0);
        const double clhs19 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs20 =     X1(0,0) + u1(0,0);
        const double clhs21 =     X1(1,0) + u1(1,0);
        const double clhs22 =     X2(0,0) + u2(0,0);
        const double clhs23 =     X2(1,0) + u2(1,0);
        const double clhs24 =     X1(0,1) + u1(0,1);
        const double clhs25 =     X1(1,1) + u1(1,1);
        const double clhs26 =     X2(0,1) + u2(0,1);
        const double clhs27 =     X2(1,1) + u2(1,1);
        const double clhs28 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs22 + clhs20*clhs3 + clhs21*clhs5 - clhs23*clhs8) + normalslave(0,1)*(-clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8));
        const double clhs29 =     -clhs19 + clhs28;
        const double clhs30 =     clhs29*normalslave(0,0);
        const double clhs31 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs32 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs33 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     -clhs1*clhs6 + clhs2*clhs31 + clhs32*clhs4 - clhs33*clhs7;
        const double clhs35 =     -clhs1*clhs12 + clhs10*clhs31 + clhs11*clhs32 - clhs13*clhs33;
        const double clhs36 =     clhs34*tangentetaslave(0,0) + clhs35*tangentetaslave(0,1);
        const double clhs37 =     clhs36*penalty_parameter*tangentetaslave(0,0);
        const double clhs38 =     clhs34*tangentxislave(0,0) + clhs35*tangentxislave(0,1);
        const double clhs39 =     clhs38*penalty_parameter*tangentxislave(0,0);
        const double clhs40 =     normalslave(0,1)*(-clhs1*clhs26 + clhs24*clhs31 + clhs25*clhs32 - clhs27*clhs33);
        const double clhs41 =     normalslave(0,0)*(clhs0 + clhs1*clhs22 - clhs20*clhs31 - clhs21*clhs32 + clhs23*clhs33);
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(0,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     clhs2*clhs45 + clhs4*clhs46 - clhs44*clhs6 - clhs47*clhs7;
        const double clhs49 =     clhs10*clhs45 + clhs11*clhs46 - clhs12*clhs44 - clhs13*clhs47;
        const double clhs50 =     clhs48*tangentetaslave(0,0) + clhs49*tangentetaslave(0,1);
        const double clhs51 =     clhs50*penalty_parameter*tangentetaslave(0,0);
        const double clhs52 =     clhs48*tangentxislave(0,0) + clhs49*tangentxislave(0,1);
        const double clhs53 =     clhs52*penalty_parameter*tangentxislave(0,0);
        const double clhs54 =     normalslave(0,0)*(clhs20*clhs45 + clhs21*clhs46 - clhs22*clhs44 - clhs23*clhs47) - normalslave(0,1)*(clhs0 - clhs24*clhs45 - clhs25*clhs46 + clhs26*clhs44 + clhs27*clhs47);
        const double clhs55 =     clhs54*normalslave(0,0)*penalty_parameter;
        const double clhs56 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs57 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs58 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs59 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs60 =     clhs2*clhs57 + clhs4*clhs58 - clhs56*clhs6 - clhs59*clhs7;
        const double clhs61 =     clhs10*clhs57 + clhs11*clhs58 - clhs12*clhs56 - clhs13*clhs59;
        const double clhs62 =     clhs60*tangentetaslave(0,0) + clhs61*tangentetaslave(0,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentetaslave(0,0);
        const double clhs64 =     clhs60*tangentxislave(0,0) + clhs61*tangentxislave(0,1);
        const double clhs65 =     clhs64*penalty_parameter*tangentxislave(0,0);
        const double clhs66 =     normalslave(0,1)*(clhs24*clhs57 + clhs25*clhs58 - clhs26*clhs56 - clhs27*clhs59);
        const double clhs67 =     normalslave(0,0)*(-clhs20*clhs57 - clhs21*clhs58 + clhs22*clhs56 + clhs23*clhs59 + clhs8);
        const double clhs68 =     -clhs66 + clhs67;
        const double clhs69 =     clhs68*normalslave(0,0)*penalty_parameter;
        const double clhs70 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs71 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs72 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs73 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs74 =     clhs2*clhs71 + clhs4*clhs72 - clhs6*clhs70 - clhs7*clhs73;
        const double clhs75 =     clhs10*clhs71 + clhs11*clhs72 - clhs12*clhs70 - clhs13*clhs73;
        const double clhs76 =     clhs74*tangentetaslave(0,0) + clhs75*tangentetaslave(0,1);
        const double clhs77 =     clhs76*penalty_parameter*tangentetaslave(0,0);
        const double clhs78 =     clhs74*tangentxislave(0,0) + clhs75*tangentxislave(0,1);
        const double clhs79 =     clhs78*penalty_parameter*tangentxislave(0,0);
        const double clhs80 =     normalslave(0,0)*(clhs20*clhs71 + clhs21*clhs72 - clhs22*clhs70 - clhs23*clhs73) - normalslave(0,1)*(-clhs24*clhs71 - clhs25*clhs72 + clhs26*clhs70 + clhs27*clhs73 + clhs8);
        const double clhs81 =     clhs80*normalslave(0,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs83 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs84 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs85 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs86 =     clhs2*clhs83 + clhs4*clhs84 - clhs6*clhs82 - clhs7*clhs85;
        const double clhs87 =     clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85;
        const double clhs88 =     clhs86*tangentetaslave(0,0) + clhs87*tangentetaslave(0,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentetaslave(0,0);
        const double clhs90 =     clhs86*tangentxislave(0,0) + clhs87*tangentxislave(0,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(0,0);
        const double clhs92 =     normalslave(0,0)*(clhs20*clhs83 + clhs21*clhs84 - clhs22*clhs82 - clhs23*clhs85 + clhs3) + normalslave(0,1)*(clhs24*clhs83 + clhs25*clhs84 - clhs26*clhs82 - clhs27*clhs85);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs95 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs96 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs97 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs98 =     clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs94 - clhs7*clhs97;
        const double clhs99 =     clhs10*clhs95 + clhs11*clhs96 - clhs12*clhs94 - clhs13*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(0,0) + clhs99*tangentetaslave(0,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(0,0);
        const double clhs102 =     clhs98*tangentxislave(0,0) + clhs99*tangentxislave(0,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(0,0);
        const double clhs104 =     normalslave(0,0)*(clhs20*clhs95 + clhs21*clhs96 - clhs22*clhs94 - clhs23*clhs97) + normalslave(0,1)*(clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs94 - clhs27*clhs97 + clhs3);
        const double clhs105 =     clhs104*normalslave(0,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs107 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs108 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs109 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs110 =     -clhs106*clhs6 + clhs107*clhs2 + clhs108*clhs4 - clhs109*clhs7;
        const double clhs111 =     clhs10*clhs107 - clhs106*clhs12 + clhs108*clhs11 - clhs109*clhs13;
        const double clhs112 =     clhs110*tangentetaslave(0,0) + clhs111*tangentetaslave(0,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentetaslave(0,0);
        const double clhs114 =     clhs110*tangentxislave(0,0) + clhs111*tangentxislave(0,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(0,0);
        const double clhs116 =     normalslave(0,0)*(-clhs106*clhs22 + clhs107*clhs20 + clhs108*clhs21 - clhs109*clhs23 + clhs5) + normalslave(0,1)*(-clhs106*clhs26 + clhs107*clhs24 + clhs108*clhs25 - clhs109*clhs27);
        const double clhs117 =     clhs116*normalslave(0,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs119 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs120 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs121 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs122 =     -clhs118*clhs6 + clhs119*clhs2 + clhs120*clhs4 - clhs121*clhs7;
        const double clhs123 =     clhs10*clhs119 + clhs11*clhs120 - clhs118*clhs12 - clhs121*clhs13;
        const double clhs124 =     clhs122*tangentetaslave(0,0) + clhs123*tangentetaslave(0,1);
        const double clhs125 =     clhs124*penalty_parameter*tangentetaslave(0,0);
        const double clhs126 =     clhs122*tangentxislave(0,0) + clhs123*tangentxislave(0,1);
        const double clhs127 =     clhs126*penalty_parameter*tangentxislave(0,0);
        const double clhs128 =     normalslave(0,0)*(-clhs118*clhs22 + clhs119*clhs20 + clhs120*clhs21 - clhs121*clhs23) + normalslave(0,1)*(-clhs118*clhs26 + clhs119*clhs24 + clhs120*clhs25 - clhs121*clhs27 + clhs5);
        const double clhs129 =     clhs128*normalslave(0,0)*penalty_parameter;
        const double clhs130 =     scale_factor*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        const double clhs131 =     scale_factor*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs132 =     clhs0*clhs131;
        const double clhs133 =     clhs15*tangentetaslave(0,1);
        const double clhs134 =     clhs17*tangentxislave(0,1);
        const double clhs135 =     clhs29*normalslave(0,1);
        const double clhs136 =     clhs36*penalty_parameter*tangentetaslave(0,1);
        const double clhs137 =     clhs38*penalty_parameter*tangentxislave(0,1);
        const double clhs138 =     clhs42*normalslave(0,1)*penalty_parameter;
        const double clhs139 =     clhs50*penalty_parameter*tangentetaslave(0,1);
        const double clhs140 =     clhs52*penalty_parameter*tangentxislave(0,1);
        const double clhs141 =     clhs54*normalslave(0,1)*penalty_parameter;
        const double clhs142 =     clhs62*penalty_parameter*tangentetaslave(0,1);
        const double clhs143 =     clhs64*penalty_parameter*tangentxislave(0,1);
        const double clhs144 =     clhs68*normalslave(0,1)*penalty_parameter;
        const double clhs145 =     clhs76*penalty_parameter*tangentetaslave(0,1);
        const double clhs146 =     clhs78*penalty_parameter*tangentxislave(0,1);
        const double clhs147 =     clhs80*normalslave(0,1)*penalty_parameter;
        const double clhs148 =     clhs88*penalty_parameter*tangentetaslave(0,1);
        const double clhs149 =     clhs90*penalty_parameter*tangentxislave(0,1);
        const double clhs150 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs151 =     clhs100*penalty_parameter*tangentetaslave(0,1);
        const double clhs152 =     clhs102*penalty_parameter*tangentxislave(0,1);
        const double clhs153 =     clhs104*normalslave(0,1)*penalty_parameter;
        const double clhs154 =     clhs112*penalty_parameter*tangentetaslave(0,1);
        const double clhs155 =     clhs114*penalty_parameter*tangentxislave(0,1);
        const double clhs156 =     clhs116*normalslave(0,1)*penalty_parameter;
        const double clhs157 =     clhs124*penalty_parameter*tangentetaslave(0,1);
        const double clhs158 =     clhs126*penalty_parameter*tangentxislave(0,1);
        const double clhs159 =     clhs128*normalslave(0,1)*penalty_parameter;
        const double clhs160 =     scale_factor*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        const double clhs161 =     clhs131*clhs8;
        const double clhs162 =     clhs19 - clhs28;
        const double clhs163 =     clhs162*normalslave(0,0);
        const double clhs164 =     clhs40 - clhs41;
        const double clhs165 =     clhs164*normalslave(0,0)*penalty_parameter;
        const double clhs166 =     clhs66 - clhs67;
        const double clhs167 =     clhs166*normalslave(0,0)*penalty_parameter;
        const double clhs168 =     -clhs131*clhs3;
        const double clhs169 =     clhs162*normalslave(0,1);
        const double clhs170 =     clhs164*normalslave(0,1)*penalty_parameter;
        const double clhs171 =     clhs166*normalslave(0,1)*penalty_parameter;
        const double clhs172 =     -clhs131*clhs5;
        const double clhs173 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs174 =     clhs173*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=clhs0*clhs37 + clhs0*clhs39 + clhs0*clhs43 + clhs1*clhs16 + clhs1*clhs18 - clhs1*clhs30;
        lhs(0,1)=clhs0*clhs51 + clhs0*clhs53 - clhs0*clhs55 + clhs16*clhs44 + clhs18*clhs44 - clhs30*clhs44;
        lhs(0,2)=clhs0*clhs63 + clhs0*clhs65 + clhs0*clhs69 + clhs16*clhs56 + clhs18*clhs56 - clhs30*clhs56;
        lhs(0,3)=clhs0*clhs77 + clhs0*clhs79 - clhs0*clhs81 + clhs16*clhs70 + clhs18*clhs70 - clhs30*clhs70;
        lhs(0,4)=clhs0*clhs89 + clhs0*clhs91 - clhs0*clhs93 + clhs16*clhs82 + clhs18*clhs82 - clhs30*clhs82;
        lhs(0,5)=clhs0*clhs101 + clhs0*clhs103 - clhs0*clhs105 + clhs16*clhs94 + clhs18*clhs94 - clhs30*clhs94;
        lhs(0,6)=clhs0*clhs113 + clhs0*clhs115 - clhs0*clhs117 + clhs106*clhs16 + clhs106*clhs18 - clhs106*clhs30;
        lhs(0,7)=clhs0*clhs125 + clhs0*clhs127 - clhs0*clhs129 + clhs118*clhs16 + clhs118*clhs18 - clhs118*clhs30;
        lhs(0,8)=clhs0*clhs130;
        lhs(0,9)=clhs132;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(1,0)=clhs0*clhs136 + clhs0*clhs137 + clhs0*clhs138 + clhs1*clhs133 + clhs1*clhs134 - clhs1*clhs135;
        lhs(1,1)=clhs0*clhs139 + clhs0*clhs140 - clhs0*clhs141 + clhs133*clhs44 + clhs134*clhs44 - clhs135*clhs44;
        lhs(1,2)=clhs0*clhs142 + clhs0*clhs143 + clhs0*clhs144 + clhs133*clhs56 + clhs134*clhs56 - clhs135*clhs56;
        lhs(1,3)=clhs0*clhs145 + clhs0*clhs146 - clhs0*clhs147 + clhs133*clhs70 + clhs134*clhs70 - clhs135*clhs70;
        lhs(1,4)=clhs0*clhs148 + clhs0*clhs149 - clhs0*clhs150 + clhs133*clhs82 + clhs134*clhs82 - clhs135*clhs82;
        lhs(1,5)=clhs0*clhs151 + clhs0*clhs152 - clhs0*clhs153 + clhs133*clhs94 + clhs134*clhs94 - clhs135*clhs94;
        lhs(1,6)=clhs0*clhs154 + clhs0*clhs155 - clhs0*clhs156 + clhs106*clhs133 + clhs106*clhs134 - clhs106*clhs135;
        lhs(1,7)=clhs0*clhs157 + clhs0*clhs158 - clhs0*clhs159 + clhs118*clhs133 + clhs118*clhs134 - clhs118*clhs135;
        lhs(1,8)=clhs132;
        lhs(1,9)=clhs0*clhs160;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(2,0)=clhs16*clhs33 + clhs18*clhs33 - clhs30*clhs33 + clhs37*clhs8 + clhs39*clhs8 + clhs43*clhs8;
        lhs(2,1)=clhs16*clhs47 + clhs18*clhs47 - clhs30*clhs47 + clhs51*clhs8 + clhs53*clhs8 - clhs55*clhs8;
        lhs(2,2)=clhs16*clhs59 + clhs18*clhs59 - clhs30*clhs59 + clhs63*clhs8 + clhs65*clhs8 + clhs69*clhs8;
        lhs(2,3)=clhs16*clhs73 + clhs18*clhs73 - clhs30*clhs73 + clhs77*clhs8 + clhs79*clhs8 - clhs8*clhs81;
        lhs(2,4)=clhs16*clhs85 + clhs18*clhs85 - clhs30*clhs85 + clhs8*clhs89 + clhs8*clhs91 - clhs8*clhs93;
        lhs(2,5)=clhs101*clhs8 + clhs103*clhs8 - clhs105*clhs8 + clhs16*clhs97 + clhs18*clhs97 - clhs30*clhs97;
        lhs(2,6)=clhs109*clhs16 + clhs109*clhs18 - clhs109*clhs30 + clhs113*clhs8 + clhs115*clhs8 - clhs117*clhs8;
        lhs(2,7)=clhs121*clhs16 + clhs121*clhs18 - clhs121*clhs30 + clhs125*clhs8 + clhs127*clhs8 - clhs129*clhs8;
        lhs(2,8)=clhs130*clhs8;
        lhs(2,9)=clhs161;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(3,0)=clhs133*clhs33 + clhs134*clhs33 - clhs135*clhs33 + clhs136*clhs8 + clhs137*clhs8 + clhs138*clhs8;
        lhs(3,1)=clhs133*clhs47 + clhs134*clhs47 - clhs135*clhs47 + clhs139*clhs8 + clhs140*clhs8 - clhs141*clhs8;
        lhs(3,2)=clhs133*clhs59 + clhs134*clhs59 - clhs135*clhs59 + clhs142*clhs8 + clhs143*clhs8 + clhs144*clhs8;
        lhs(3,3)=clhs133*clhs73 + clhs134*clhs73 - clhs135*clhs73 + clhs145*clhs8 + clhs146*clhs8 - clhs147*clhs8;
        lhs(3,4)=clhs133*clhs85 + clhs134*clhs85 - clhs135*clhs85 + clhs148*clhs8 + clhs149*clhs8 - clhs150*clhs8;
        lhs(3,5)=clhs133*clhs97 + clhs134*clhs97 - clhs135*clhs97 + clhs151*clhs8 + clhs152*clhs8 - clhs153*clhs8;
        lhs(3,6)=clhs109*clhs133 + clhs109*clhs134 - clhs109*clhs135 + clhs154*clhs8 + clhs155*clhs8 - clhs156*clhs8;
        lhs(3,7)=clhs121*clhs133 + clhs121*clhs134 - clhs121*clhs135 + clhs157*clhs8 + clhs158*clhs8 - clhs159*clhs8;
        lhs(3,8)=clhs161;
        lhs(3,9)=clhs160*clhs8;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(4,0)=-clhs16*clhs31 - clhs163*clhs31 + clhs165*clhs3 - clhs18*clhs31 - clhs3*clhs37 - clhs3*clhs39;
        lhs(4,1)=-clhs16*clhs45 - clhs163*clhs45 - clhs18*clhs45 - clhs3*clhs51 - clhs3*clhs53 + clhs3*clhs55;
        lhs(4,2)=-clhs16*clhs57 - clhs163*clhs57 + clhs167*clhs3 - clhs18*clhs57 - clhs3*clhs63 - clhs3*clhs65;
        lhs(4,3)=-clhs16*clhs71 - clhs163*clhs71 - clhs18*clhs71 - clhs3*clhs77 - clhs3*clhs79 + clhs3*clhs81;
        lhs(4,4)=-clhs16*clhs83 - clhs163*clhs83 - clhs18*clhs83 - clhs3*clhs89 - clhs3*clhs91 + clhs3*clhs93;
        lhs(4,5)=-clhs101*clhs3 - clhs103*clhs3 + clhs105*clhs3 - clhs16*clhs95 - clhs163*clhs95 - clhs18*clhs95;
        lhs(4,6)=-clhs107*clhs16 - clhs107*clhs163 - clhs107*clhs18 - clhs113*clhs3 - clhs115*clhs3 + clhs117*clhs3;
        lhs(4,7)=-clhs119*clhs16 - clhs119*clhs163 - clhs119*clhs18 - clhs125*clhs3 - clhs127*clhs3 + clhs129*clhs3;
        lhs(4,8)=-clhs130*clhs3;
        lhs(4,9)=clhs168;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(5,0)=-clhs133*clhs31 - clhs134*clhs31 - clhs136*clhs3 - clhs137*clhs3 - clhs169*clhs31 + clhs170*clhs3;
        lhs(5,1)=-clhs133*clhs45 - clhs134*clhs45 - clhs139*clhs3 - clhs140*clhs3 + clhs141*clhs3 - clhs169*clhs45;
        lhs(5,2)=-clhs133*clhs57 - clhs134*clhs57 - clhs142*clhs3 - clhs143*clhs3 - clhs169*clhs57 + clhs171*clhs3;
        lhs(5,3)=-clhs133*clhs71 - clhs134*clhs71 - clhs145*clhs3 - clhs146*clhs3 + clhs147*clhs3 - clhs169*clhs71;
        lhs(5,4)=-clhs133*clhs83 - clhs134*clhs83 - clhs148*clhs3 - clhs149*clhs3 + clhs150*clhs3 - clhs169*clhs83;
        lhs(5,5)=-clhs133*clhs95 - clhs134*clhs95 - clhs151*clhs3 - clhs152*clhs3 + clhs153*clhs3 - clhs169*clhs95;
        lhs(5,6)=-clhs107*clhs133 - clhs107*clhs134 - clhs107*clhs169 - clhs154*clhs3 - clhs155*clhs3 + clhs156*clhs3;
        lhs(5,7)=-clhs119*clhs133 - clhs119*clhs134 - clhs119*clhs169 - clhs157*clhs3 - clhs158*clhs3 + clhs159*clhs3;
        lhs(5,8)=clhs168;
        lhs(5,9)=-clhs160*clhs3;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(6,0)=-clhs16*clhs32 - clhs163*clhs32 + clhs165*clhs5 - clhs18*clhs32 - clhs37*clhs5 - clhs39*clhs5;
        lhs(6,1)=-clhs16*clhs46 - clhs163*clhs46 - clhs18*clhs46 - clhs5*clhs51 - clhs5*clhs53 + clhs5*clhs55;
        lhs(6,2)=-clhs16*clhs58 - clhs163*clhs58 + clhs167*clhs5 - clhs18*clhs58 - clhs5*clhs63 - clhs5*clhs65;
        lhs(6,3)=-clhs16*clhs72 - clhs163*clhs72 - clhs18*clhs72 - clhs5*clhs77 - clhs5*clhs79 + clhs5*clhs81;
        lhs(6,4)=-clhs16*clhs84 - clhs163*clhs84 - clhs18*clhs84 - clhs5*clhs89 - clhs5*clhs91 + clhs5*clhs93;
        lhs(6,5)=-clhs101*clhs5 - clhs103*clhs5 + clhs105*clhs5 - clhs16*clhs96 - clhs163*clhs96 - clhs18*clhs96;
        lhs(6,6)=-clhs108*clhs16 - clhs108*clhs163 - clhs108*clhs18 - clhs113*clhs5 - clhs115*clhs5 + clhs117*clhs5;
        lhs(6,7)=-clhs120*clhs16 - clhs120*clhs163 - clhs120*clhs18 - clhs125*clhs5 - clhs127*clhs5 + clhs129*clhs5;
        lhs(6,8)=-clhs130*clhs5;
        lhs(6,9)=clhs172;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(7,0)=-clhs133*clhs32 - clhs134*clhs32 - clhs136*clhs5 - clhs137*clhs5 - clhs169*clhs32 + clhs170*clhs5;
        lhs(7,1)=-clhs133*clhs46 - clhs134*clhs46 - clhs139*clhs5 - clhs140*clhs5 + clhs141*clhs5 - clhs169*clhs46;
        lhs(7,2)=-clhs133*clhs58 - clhs134*clhs58 - clhs142*clhs5 - clhs143*clhs5 - clhs169*clhs58 + clhs171*clhs5;
        lhs(7,3)=-clhs133*clhs72 - clhs134*clhs72 - clhs145*clhs5 - clhs146*clhs5 + clhs147*clhs5 - clhs169*clhs72;
        lhs(7,4)=-clhs133*clhs84 - clhs134*clhs84 - clhs148*clhs5 - clhs149*clhs5 + clhs150*clhs5 - clhs169*clhs84;
        lhs(7,5)=-clhs133*clhs96 - clhs134*clhs96 - clhs151*clhs5 - clhs152*clhs5 + clhs153*clhs5 - clhs169*clhs96;
        lhs(7,6)=-clhs108*clhs133 - clhs108*clhs134 - clhs108*clhs169 - clhs154*clhs5 - clhs155*clhs5 + clhs156*clhs5;
        lhs(7,7)=-clhs120*clhs133 - clhs120*clhs134 - clhs120*clhs169 - clhs157*clhs5 - clhs158*clhs5 + clhs159*clhs5;
        lhs(7,8)=clhs172;
        lhs(7,9)=-clhs160*clhs5;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(8,0)=scale_factor*(clhs164*normalslave(0,0) - clhs36*tangentetaslave(0,0) - clhs38*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs50*tangentetaslave(0,0) - clhs52*tangentxislave(0,0) + clhs54*normalslave(0,0));
        lhs(8,2)=scale_factor*(clhs166*normalslave(0,0) - clhs62*tangentetaslave(0,0) - clhs64*tangentxislave(0,0));
        lhs(8,3)=scale_factor*(-clhs76*tangentetaslave(0,0) - clhs78*tangentxislave(0,0) + clhs80*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs88*tangentetaslave(0,0) - clhs90*tangentxislave(0,0) + clhs92*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs100*tangentetaslave(0,0) - clhs102*tangentxislave(0,0) + clhs104*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs112*tangentetaslave(0,0) - clhs114*tangentxislave(0,0) + clhs116*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs124*tangentetaslave(0,0) - clhs126*tangentxislave(0,0) + clhs128*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs164*normalslave(0,1) - clhs36*tangentetaslave(0,1) - clhs38*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs50*tangentetaslave(0,1) - clhs52*tangentxislave(0,1) + clhs54*normalslave(0,1));
        lhs(9,2)=scale_factor*(clhs166*normalslave(0,1) - clhs62*tangentetaslave(0,1) - clhs64*tangentxislave(0,1));
        lhs(9,3)=scale_factor*(-clhs76*tangentetaslave(0,1) - clhs78*tangentxislave(0,1) + clhs80*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs88*tangentetaslave(0,1) - clhs90*tangentxislave(0,1) + clhs92*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs100*tangentetaslave(0,1) - clhs102*tangentxislave(0,1) + clhs104*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs112*tangentetaslave(0,1) - clhs114*tangentxislave(0,1) + clhs116*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs124*tangentetaslave(0,1) - clhs126*tangentxislave(0,1) + clhs128*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs173*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs174;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs174;
        lhs(11,11)=clhs173*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 3 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(1,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(1,0);
        const double clhs17 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs18 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs20 =     normalslave(1,1)*(-clhs1*clhs12 + clhs10*clhs17 + clhs11*clhs18 - clhs13*clhs19);
        const double clhs21 =     normalslave(1,0)*(clhs0 + clhs1*clhs7 - clhs17*clhs3 - clhs18*clhs5 + clhs19*clhs8);
        const double clhs22 =     -clhs20 + clhs21;
        const double clhs23 =     clhs22*normalslave(1,0)*penalty_parameter;
        const double clhs24 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs25 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs26 =     clhs24*tangentetaslave(1,0) + clhs25*tangentxislave(1,0);
        const double clhs27 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs28 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs29 =     clhs27*tangentetaslave(0,0) + clhs28*tangentxislave(0,0);
        const double clhs30 =     clhs27*tangentetaslave(0,1) + clhs28*tangentxislave(0,1);
        const double clhs31 =     std::pow(clhs29, 2) + std::pow(clhs30, 2);
        const double clhs32 =     std::pow(clhs31, -1.0L/2.0L);
        const double clhs33 =     clhs24*tangentetaslave(1,1) + clhs25*tangentxislave(1,1);
        const double clhs34 =     std::pow(clhs26, 2) + std::pow(clhs33, 2);
        const double clhs35 =     std::pow(clhs34, -1.0L/2.0L);
        const double clhs36 =     clhs15*clhs26*clhs32*clhs35*mu[1];
        const double clhs37 =     clhs22*clhs26*clhs32*clhs35*mu[1]*penalty_parameter;
        const double clhs38 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs39 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs40 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs41 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs42 =     normalslave(1,0)*(clhs3*clhs39 - clhs38*clhs7 + clhs40*clhs5 - clhs41*clhs8) - normalslave(1,1)*(clhs0 - clhs10*clhs39 - clhs11*clhs40 + clhs12*clhs38 + clhs13*clhs41);
        const double clhs43 =     clhs42*normalslave(1,0)*penalty_parameter;
        const double clhs44 =     clhs26*clhs32*clhs35*clhs42*mu[1]*penalty_parameter;
        const double clhs45 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs46 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs47 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs48 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs49 =     normalslave(1,1)*(clhs10*clhs46 + clhs11*clhs47 - clhs12*clhs45 - clhs13*clhs48);
        const double clhs50 =     normalslave(1,0)*(-clhs3*clhs46 + clhs45*clhs7 - clhs47*clhs5 + clhs48*clhs8 + clhs9);
        const double clhs51 =     -clhs49 + clhs50;
        const double clhs52 =     clhs51*normalslave(1,0)*penalty_parameter;
        const double clhs53 =     clhs26*clhs32*clhs35*clhs51*mu[1]*penalty_parameter;
        const double clhs54 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs55 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs56 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs57 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs58 =     normalslave(1,0)*(clhs3*clhs55 + clhs5*clhs56 - clhs54*clhs7 - clhs57*clhs8) - normalslave(1,1)*(-clhs10*clhs55 - clhs11*clhs56 + clhs12*clhs54 + clhs13*clhs57 + clhs9);
        const double clhs59 =     clhs58*normalslave(1,0)*penalty_parameter;
        const double clhs60 =     clhs26*clhs32*clhs35*clhs58*mu[1]*penalty_parameter;
        const double clhs61 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs62 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs63 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs64 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs65 =     normalslave(1,0)*(clhs3*clhs62 + clhs4 + clhs5*clhs63 - clhs61*clhs7 - clhs64*clhs8) + normalslave(1,1)*(clhs10*clhs62 + clhs11*clhs63 - clhs12*clhs61 - clhs13*clhs64);
        const double clhs66 =     clhs65*normalslave(1,0)*penalty_parameter;
        const double clhs67 =     clhs26*clhs32*clhs35*clhs65*mu[1]*penalty_parameter;
        const double clhs68 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs69 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs70 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs71 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs72 =     normalslave(1,0)*(clhs3*clhs69 + clhs5*clhs70 - clhs68*clhs7 - clhs71*clhs8) + normalslave(1,1)*(clhs10*clhs69 + clhs11*clhs70 - clhs12*clhs68 - clhs13*clhs71 + clhs4);
        const double clhs73 =     clhs72*normalslave(1,0)*penalty_parameter;
        const double clhs74 =     clhs26*clhs32*clhs35*clhs72*mu[1]*penalty_parameter;
        const double clhs75 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs76 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs77 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs78 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs79 =     normalslave(1,0)*(clhs3*clhs76 + clhs5*clhs77 + clhs6 - clhs7*clhs75 - clhs78*clhs8) + normalslave(1,1)*(clhs10*clhs76 + clhs11*clhs77 - clhs12*clhs75 - clhs13*clhs78);
        const double clhs80 =     clhs79*normalslave(1,0)*penalty_parameter;
        const double clhs81 =     clhs26*clhs32*clhs35*clhs79*mu[1]*penalty_parameter;
        const double clhs82 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs83 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs84 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs85 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs86 =     normalslave(1,0)*(clhs3*clhs83 + clhs5*clhs84 - clhs7*clhs82 - clhs8*clhs85) + normalslave(1,1)*(clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85 + clhs6);
        const double clhs87 =     clhs86*normalslave(1,0)*penalty_parameter;
        const double clhs88 =     clhs26*clhs32*clhs35*clhs86*mu[1]*penalty_parameter;
        const double clhs89 =     std::pow(clhs31, -3.0L/2.0L);
        const double clhs90 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs91 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs92 =     clhs29*clhs90 + clhs30*clhs91;
        const double clhs93 =     clhs15*clhs26*clhs35*clhs89*clhs92*mu[1];
        const double clhs94 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs95 =     clhs29*clhs91 + clhs30*clhs94;
        const double clhs96 =     clhs15*clhs26*clhs35*clhs89*clhs95*mu[1];
        const double clhs97 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs98 =     clhs32*clhs35*mu[1]*normalslave(1,0)*scale_factor;
        const double clhs99 =     clhs26*clhs98;
        const double clhs100 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs101 =     clhs100*clhs32*clhs35*mu[1];
        const double clhs102 =     -clhs14 + clhs2;
        const double clhs103 =     clhs100*clhs26;
        const double clhs104 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs105 =     clhs104*clhs33;
        const double clhs106 =     clhs103 + clhs105;
        const double clhs107 =     std::pow(clhs34, -3.0L/2.0L);
        const double clhs108 =     clhs102*clhs107*clhs26*clhs32*mu[1];
        const double clhs109 =     -clhs101*clhs102 + clhs106*clhs108 + clhs97 - clhs99;
        const double clhs110 =     normalslave(1,1)*(normalslave(1,0)*scale_factor);
        const double clhs111 =     clhs104*clhs32*clhs35*mu[1];
        const double clhs112 =     -clhs102*clhs111 + clhs110;
        const double clhs113 =     clhs32*clhs35*mu[1]*normalslave(1,1)*scale_factor;
        const double clhs114 =     clhs113*clhs26;
        const double clhs115 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs116 =     clhs115*clhs33;
        const double clhs117 =     clhs104*clhs26;
        const double clhs118 =     clhs116 + clhs117;
        const double clhs119 =     clhs108*clhs118 + clhs112 - clhs114;
        const double clhs120 =     clhs15*normalslave(1,1);
        const double clhs121 =     clhs22*normalslave(1,1)*penalty_parameter;
        const double clhs122 =     clhs15*clhs32*clhs33*clhs35*mu[1];
        const double clhs123 =     clhs22*clhs32*clhs33*clhs35*mu[1]*penalty_parameter;
        const double clhs124 =     clhs42*normalslave(1,1)*penalty_parameter;
        const double clhs125 =     clhs32*clhs33*clhs35*clhs42*mu[1]*penalty_parameter;
        const double clhs126 =     clhs51*normalslave(1,1)*penalty_parameter;
        const double clhs127 =     clhs32*clhs33*clhs35*clhs51*mu[1]*penalty_parameter;
        const double clhs128 =     clhs58*normalslave(1,1)*penalty_parameter;
        const double clhs129 =     clhs32*clhs33*clhs35*clhs58*mu[1]*penalty_parameter;
        const double clhs130 =     clhs65*normalslave(1,1)*penalty_parameter;
        const double clhs131 =     clhs32*clhs33*clhs35*clhs65*mu[1]*penalty_parameter;
        const double clhs132 =     clhs72*normalslave(1,1)*penalty_parameter;
        const double clhs133 =     clhs32*clhs33*clhs35*clhs72*mu[1]*penalty_parameter;
        const double clhs134 =     clhs79*normalslave(1,1)*penalty_parameter;
        const double clhs135 =     clhs32*clhs33*clhs35*clhs79*mu[1]*penalty_parameter;
        const double clhs136 =     clhs86*normalslave(1,1)*penalty_parameter;
        const double clhs137 =     clhs32*clhs33*clhs35*clhs86*mu[1]*penalty_parameter;
        const double clhs138 =     clhs15*clhs33*clhs35*clhs89*clhs92*mu[1];
        const double clhs139 =     clhs15*clhs33*clhs35*clhs89*clhs95*mu[1];
        const double clhs140 =     clhs33*clhs98;
        const double clhs141 =     clhs102*clhs107*clhs32*clhs33*mu[1];
        const double clhs142 =     clhs106*clhs141 + clhs112 - clhs140;
        const double clhs143 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs144 =     clhs113*clhs33;
        const double clhs145 =     clhs115*clhs32*clhs35*mu[1];
        const double clhs146 =     -clhs102*clhs145 + clhs118*clhs141 + clhs143 - clhs144;
        const double clhs147 =     clhs102*normalslave(1,0);
        const double clhs148 =     clhs20 - clhs21;
        const double clhs149 =     clhs148*normalslave(1,0)*penalty_parameter;
        const double clhs150 =     clhs102*clhs26*clhs32*clhs35*mu[1];
        const double clhs151 =     clhs148*clhs26*clhs32*clhs35*mu[1]*penalty_parameter;
        const double clhs152 =     clhs49 - clhs50;
        const double clhs153 =     clhs152*normalslave(1,0)*penalty_parameter;
        const double clhs154 =     clhs152*clhs26*clhs32*clhs35*mu[1]*penalty_parameter;
        const double clhs155 =     clhs107*clhs15*clhs26*clhs32*mu[1];
        const double clhs156 =     -clhs101*clhs15 + clhs106*clhs155 + clhs99;
        const double clhs157 =     clhs156 - clhs97;
        const double clhs158 =     -clhs111*clhs15;
        const double clhs159 =     -clhs110 + clhs158;
        const double clhs160 =     clhs114 + clhs118*clhs155;
        const double clhs161 =     clhs159 + clhs160;
        const double clhs162 =     clhs102*normalslave(1,1);
        const double clhs163 =     clhs148*normalslave(1,1)*penalty_parameter;
        const double clhs164 =     clhs102*clhs32*clhs33*clhs35*mu[1];
        const double clhs165 =     clhs148*clhs32*clhs33*clhs35*mu[1]*penalty_parameter;
        const double clhs166 =     clhs152*normalslave(1,1)*penalty_parameter;
        const double clhs167 =     clhs152*clhs32*clhs33*clhs35*mu[1]*penalty_parameter;
        const double clhs168 =     clhs107*clhs15*clhs32*clhs33*mu[1];
        const double clhs169 =     clhs106*clhs168 + clhs140;
        const double clhs170 =     clhs159 + clhs169;
        const double clhs171 =     clhs118*clhs168 + clhs144 - clhs145*clhs15;
        const double clhs172 =     -clhs143 + clhs171;
        const double clhs173 =     1.0/penalty_parameter;
        const double clhs174 =     0.5*clhs173*std::pow(scale_factor, 2.0);
        const double clhs175 =     clhs174*(clhs91 + normalslave(0,0)*normalslave(0,1));
        const double clhs176 =     clhs148*scale_factor;
        const double clhs177 =     0.5*clhs32*clhs35*mu[1];
        const double clhs178 =     -clhs103*clhs177 - clhs105*clhs177 + normalslave(1,0);
        const double clhs179 =     clhs42*scale_factor;
        const double clhs180 =     clhs152*scale_factor;
        const double clhs181 =     clhs58*scale_factor;
        const double clhs182 =     clhs65*scale_factor;
        const double clhs183 =     clhs72*scale_factor;
        const double clhs184 =     clhs79*scale_factor;
        const double clhs185 =     clhs86*scale_factor;
        const double clhs186 =     0.5*clhs102*clhs173*clhs35*clhs89*clhs92*mu[1]*scale_factor;
        const double clhs187 =     0.5*clhs102*clhs173*clhs35*clhs89*clhs95*mu[1]*scale_factor;
        const double clhs188 =     0.5*clhs173*scale_factor;
        const double clhs189 =     clhs100*scale_factor + clhs156;
        const double clhs190 =     clhs104*scale_factor + clhs158;
        const double clhs191 =     clhs169 + clhs190;
        const double clhs192 =     clhs160 + clhs190;
        const double clhs193 =     clhs115*scale_factor + clhs171;
        const double clhs194 =     -clhs116*clhs177 - clhs117*clhs177 + normalslave(1,1);
    
        lhs(0,0)=clhs0*clhs23 - clhs0*clhs37 - clhs1*clhs16 + clhs1*clhs36;
        lhs(0,1)=-clhs0*clhs43 + clhs0*clhs44 - clhs16*clhs38 + clhs36*clhs38;
        lhs(0,2)=clhs0*clhs52 - clhs0*clhs53 - clhs16*clhs45 + clhs36*clhs45;
        lhs(0,3)=-clhs0*clhs59 + clhs0*clhs60 - clhs16*clhs54 + clhs36*clhs54;
        lhs(0,4)=-clhs0*clhs66 + clhs0*clhs67 - clhs16*clhs61 + clhs36*clhs61;
        lhs(0,5)=-clhs0*clhs73 + clhs0*clhs74 - clhs16*clhs68 + clhs36*clhs68;
        lhs(0,6)=-clhs0*clhs80 + clhs0*clhs81 - clhs16*clhs75 + clhs36*clhs75;
        lhs(0,7)=-clhs0*clhs87 + clhs0*clhs88 - clhs16*clhs82 + clhs36*clhs82;
        lhs(0,8)=-clhs0*clhs93;
        lhs(0,9)=-clhs0*clhs96;
        lhs(0,10)=clhs0*clhs109;
        lhs(0,11)=clhs0*clhs119;
        lhs(1,0)=clhs0*clhs121 - clhs0*clhs123 - clhs1*clhs120 + clhs1*clhs122;
        lhs(1,1)=-clhs0*clhs124 + clhs0*clhs125 - clhs120*clhs38 + clhs122*clhs38;
        lhs(1,2)=clhs0*clhs126 - clhs0*clhs127 - clhs120*clhs45 + clhs122*clhs45;
        lhs(1,3)=-clhs0*clhs128 + clhs0*clhs129 - clhs120*clhs54 + clhs122*clhs54;
        lhs(1,4)=-clhs0*clhs130 + clhs0*clhs131 - clhs120*clhs61 + clhs122*clhs61;
        lhs(1,5)=-clhs0*clhs132 + clhs0*clhs133 - clhs120*clhs68 + clhs122*clhs68;
        lhs(1,6)=-clhs0*clhs134 + clhs0*clhs135 - clhs120*clhs75 + clhs122*clhs75;
        lhs(1,7)=-clhs0*clhs136 + clhs0*clhs137 - clhs120*clhs82 + clhs122*clhs82;
        lhs(1,8)=-clhs0*clhs138;
        lhs(1,9)=-clhs0*clhs139;
        lhs(1,10)=clhs0*clhs142;
        lhs(1,11)=clhs0*clhs146;
        lhs(2,0)=-clhs16*clhs19 + clhs19*clhs36 + clhs23*clhs9 - clhs37*clhs9;
        lhs(2,1)=-clhs16*clhs41 + clhs36*clhs41 - clhs43*clhs9 + clhs44*clhs9;
        lhs(2,2)=-clhs16*clhs48 + clhs36*clhs48 + clhs52*clhs9 - clhs53*clhs9;
        lhs(2,3)=-clhs16*clhs57 + clhs36*clhs57 - clhs59*clhs9 + clhs60*clhs9;
        lhs(2,4)=-clhs16*clhs64 + clhs36*clhs64 - clhs66*clhs9 + clhs67*clhs9;
        lhs(2,5)=-clhs16*clhs71 + clhs36*clhs71 - clhs73*clhs9 + clhs74*clhs9;
        lhs(2,6)=-clhs16*clhs78 + clhs36*clhs78 - clhs80*clhs9 + clhs81*clhs9;
        lhs(2,7)=-clhs16*clhs85 + clhs36*clhs85 - clhs87*clhs9 + clhs88*clhs9;
        lhs(2,8)=-clhs9*clhs93;
        lhs(2,9)=-clhs9*clhs96;
        lhs(2,10)=clhs109*clhs9;
        lhs(2,11)=clhs119*clhs9;
        lhs(3,0)=-clhs120*clhs19 + clhs121*clhs9 + clhs122*clhs19 - clhs123*clhs9;
        lhs(3,1)=-clhs120*clhs41 + clhs122*clhs41 - clhs124*clhs9 + clhs125*clhs9;
        lhs(3,2)=-clhs120*clhs48 + clhs122*clhs48 + clhs126*clhs9 - clhs127*clhs9;
        lhs(3,3)=-clhs120*clhs57 + clhs122*clhs57 - clhs128*clhs9 + clhs129*clhs9;
        lhs(3,4)=-clhs120*clhs64 + clhs122*clhs64 - clhs130*clhs9 + clhs131*clhs9;
        lhs(3,5)=-clhs120*clhs71 + clhs122*clhs71 - clhs132*clhs9 + clhs133*clhs9;
        lhs(3,6)=-clhs120*clhs78 + clhs122*clhs78 - clhs134*clhs9 + clhs135*clhs9;
        lhs(3,7)=-clhs120*clhs85 + clhs122*clhs85 - clhs136*clhs9 + clhs137*clhs9;
        lhs(3,8)=-clhs138*clhs9;
        lhs(3,9)=-clhs139*clhs9;
        lhs(3,10)=clhs142*clhs9;
        lhs(3,11)=clhs146*clhs9;
        lhs(4,0)=-clhs147*clhs17 + clhs149*clhs4 + clhs150*clhs17 - clhs151*clhs4;
        lhs(4,1)=-clhs147*clhs39 + clhs150*clhs39 + clhs4*clhs43 - clhs4*clhs44;
        lhs(4,2)=-clhs147*clhs46 + clhs150*clhs46 + clhs153*clhs4 - clhs154*clhs4;
        lhs(4,3)=-clhs147*clhs55 + clhs150*clhs55 + clhs4*clhs59 - clhs4*clhs60;
        lhs(4,4)=-clhs147*clhs62 + clhs150*clhs62 + clhs4*clhs66 - clhs4*clhs67;
        lhs(4,5)=-clhs147*clhs69 + clhs150*clhs69 + clhs4*clhs73 - clhs4*clhs74;
        lhs(4,6)=-clhs147*clhs76 + clhs150*clhs76 + clhs4*clhs80 - clhs4*clhs81;
        lhs(4,7)=-clhs147*clhs83 + clhs150*clhs83 + clhs4*clhs87 - clhs4*clhs88;
        lhs(4,8)=clhs4*clhs93;
        lhs(4,9)=clhs4*clhs96;
        lhs(4,10)=clhs157*clhs4;
        lhs(4,11)=clhs161*clhs4;
        lhs(5,0)=-clhs162*clhs17 + clhs163*clhs4 + clhs164*clhs17 - clhs165*clhs4;
        lhs(5,1)=clhs124*clhs4 - clhs125*clhs4 - clhs162*clhs39 + clhs164*clhs39;
        lhs(5,2)=-clhs162*clhs46 + clhs164*clhs46 + clhs166*clhs4 - clhs167*clhs4;
        lhs(5,3)=clhs128*clhs4 - clhs129*clhs4 - clhs162*clhs55 + clhs164*clhs55;
        lhs(5,4)=clhs130*clhs4 - clhs131*clhs4 - clhs162*clhs62 + clhs164*clhs62;
        lhs(5,5)=clhs132*clhs4 - clhs133*clhs4 - clhs162*clhs69 + clhs164*clhs69;
        lhs(5,6)=clhs134*clhs4 - clhs135*clhs4 - clhs162*clhs76 + clhs164*clhs76;
        lhs(5,7)=clhs136*clhs4 - clhs137*clhs4 - clhs162*clhs83 + clhs164*clhs83;
        lhs(5,8)=clhs138*clhs4;
        lhs(5,9)=clhs139*clhs4;
        lhs(5,10)=clhs170*clhs4;
        lhs(5,11)=clhs172*clhs4;
        lhs(6,0)=-clhs147*clhs18 + clhs149*clhs6 + clhs150*clhs18 - clhs151*clhs6;
        lhs(6,1)=-clhs147*clhs40 + clhs150*clhs40 + clhs43*clhs6 - clhs44*clhs6;
        lhs(6,2)=-clhs147*clhs47 + clhs150*clhs47 + clhs153*clhs6 - clhs154*clhs6;
        lhs(6,3)=-clhs147*clhs56 + clhs150*clhs56 + clhs59*clhs6 - clhs6*clhs60;
        lhs(6,4)=-clhs147*clhs63 + clhs150*clhs63 + clhs6*clhs66 - clhs6*clhs67;
        lhs(6,5)=-clhs147*clhs70 + clhs150*clhs70 + clhs6*clhs73 - clhs6*clhs74;
        lhs(6,6)=-clhs147*clhs77 + clhs150*clhs77 + clhs6*clhs80 - clhs6*clhs81;
        lhs(6,7)=-clhs147*clhs84 + clhs150*clhs84 + clhs6*clhs87 - clhs6*clhs88;
        lhs(6,8)=clhs6*clhs93;
        lhs(6,9)=clhs6*clhs96;
        lhs(6,10)=clhs157*clhs6;
        lhs(6,11)=clhs161*clhs6;
        lhs(7,0)=-clhs162*clhs18 + clhs163*clhs6 + clhs164*clhs18 - clhs165*clhs6;
        lhs(7,1)=clhs124*clhs6 - clhs125*clhs6 - clhs162*clhs40 + clhs164*clhs40;
        lhs(7,2)=-clhs162*clhs47 + clhs164*clhs47 + clhs166*clhs6 - clhs167*clhs6;
        lhs(7,3)=clhs128*clhs6 - clhs129*clhs6 - clhs162*clhs56 + clhs164*clhs56;
        lhs(7,4)=clhs130*clhs6 - clhs131*clhs6 - clhs162*clhs63 + clhs164*clhs63;
        lhs(7,5)=clhs132*clhs6 - clhs133*clhs6 - clhs162*clhs70 + clhs164*clhs70;
        lhs(7,6)=clhs134*clhs6 - clhs135*clhs6 - clhs162*clhs77 + clhs164*clhs77;
        lhs(7,7)=clhs136*clhs6 - clhs137*clhs6 - clhs162*clhs84 + clhs164*clhs84;
        lhs(7,8)=clhs138*clhs6;
        lhs(7,9)=clhs139*clhs6;
        lhs(7,10)=clhs170*clhs6;
        lhs(7,11)=clhs172*clhs6;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs174*(clhs90 + std::pow(normalslave(0,0), 2));
        lhs(8,9)=clhs175;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs175;
        lhs(9,9)=clhs174*(clhs94 + std::pow(normalslave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=clhs176*clhs178;
        lhs(10,1)=clhs178*clhs179;
        lhs(10,2)=clhs178*clhs180;
        lhs(10,3)=clhs178*clhs181;
        lhs(10,4)=clhs178*clhs182;
        lhs(10,5)=clhs178*clhs183;
        lhs(10,6)=clhs178*clhs184;
        lhs(10,7)=clhs178*clhs185;
        lhs(10,8)=-clhs106*clhs186;
        lhs(10,9)=-clhs106*clhs187;
        lhs(10,10)=clhs188*(clhs100*clhs189 + clhs104*clhs191);
        lhs(10,11)=clhs188*(clhs100*clhs192 + clhs104*clhs193);
        lhs(11,0)=clhs176*clhs194;
        lhs(11,1)=clhs179*clhs194;
        lhs(11,2)=clhs180*clhs194;
        lhs(11,3)=clhs181*clhs194;
        lhs(11,4)=clhs182*clhs194;
        lhs(11,5)=clhs183*clhs194;
        lhs(11,6)=clhs184*clhs194;
        lhs(11,7)=clhs185*clhs194;
        lhs(11,8)=-clhs118*clhs186;
        lhs(11,9)=-clhs118*clhs187;
        lhs(11,10)=clhs188*(clhs104*clhs189 + clhs115*clhs191);
        lhs(11,11)=clhs188*(clhs104*clhs192 + clhs115*clhs193);
    }
    else if (rActiveInactive == 4 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(0,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(0,0);
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs18 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs20 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs21 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs22 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs23 =     penalty_parameter*(normalslave(1,0)*(-clhs17*clhs7 + clhs20*clhs3 + clhs21*clhs5 - clhs22*clhs8) + normalslave(1,1)*(clhs10*clhs20 + clhs11*clhs21 - clhs12*clhs17 - clhs13*clhs22));
        const double clhs24 =     -clhs19 + clhs23;
        const double clhs25 =     clhs24*normalslave(1,0);
        const double clhs26 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs27 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs28 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs29 =     normalslave(0,1)*(-clhs1*clhs12 + clhs10*clhs26 + clhs11*clhs27 - clhs13*clhs28);
        const double clhs30 =     normalslave(0,0)*(clhs0 + clhs1*clhs7 - clhs26*clhs3 - clhs27*clhs5 + clhs28*clhs8);
        const double clhs31 =     -clhs29 + clhs30;
        const double clhs32 =     clhs31*normalslave(0,0)*penalty_parameter;
        const double clhs33 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs35 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs36 =     normalslave(1,1)*(clhs10*clhs33 + clhs11*clhs34 - clhs12*clhs18 - clhs13*clhs35);
        const double clhs37 =     normalslave(1,0)*(clhs17 + clhs18*clhs7 - clhs3*clhs33 - clhs34*clhs5 + clhs35*clhs8);
        const double clhs38 =     -clhs36 + clhs37;
        const double clhs39 =     clhs38*normalslave(1,0)*penalty_parameter;
        const double clhs40 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs41 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs42 =     clhs40*tangentetaslave(0,0) + clhs41*tangentxislave(0,0);
        const double clhs43 =     clhs40*tangentetaslave(0,1) + clhs41*tangentxislave(0,1);
        const double clhs44 =     std::pow(clhs42, 2) + std::pow(clhs43, 2);
        const double clhs45 =     std::pow(clhs44, -1.0L/2.0L);
        const double clhs46 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs47 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs48 =     clhs46*tangentetaslave(1,0) + clhs47*tangentxislave(1,0);
        const double clhs49 =     clhs46*tangentetaslave(1,1) + clhs47*tangentxislave(1,1);
        const double clhs50 =     std::pow(clhs48, 2) + std::pow(clhs49, 2);
        const double clhs51 =     std::pow(clhs50, -1.0L/2.0L);
        const double clhs52 =     clhs15*clhs42*clhs45*clhs51*mu[0];
        const double clhs53 =     clhs24*clhs45*clhs48*clhs51*mu[1];
        const double clhs54 =     clhs31*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs55 =     clhs38*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs56 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs57 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs58 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs59 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs60 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs61 =     normalslave(0,0)*(clhs3*clhs58 + clhs5*clhs59 - clhs56*clhs7 - clhs60*clhs8) - normalslave(0,1)*(clhs0 - clhs10*clhs58 - clhs11*clhs59 + clhs12*clhs56 + clhs13*clhs60);
        const double clhs62 =     clhs61*normalslave(0,0)*penalty_parameter;
        const double clhs63 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs64 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs65 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs66 =     normalslave(1,0)*(clhs3*clhs63 + clhs5*clhs64 - clhs57*clhs7 - clhs65*clhs8) - normalslave(1,1)*(-clhs10*clhs63 - clhs11*clhs64 + clhs12*clhs57 + clhs13*clhs65 + clhs17);
        const double clhs67 =     clhs66*normalslave(1,0)*penalty_parameter;
        const double clhs68 =     clhs42*clhs45*clhs51*clhs61*mu[0]*penalty_parameter;
        const double clhs69 =     clhs45*clhs48*clhs51*clhs66*mu[1]*penalty_parameter;
        const double clhs70 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs71 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs72 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs73 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs74 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs75 =     normalslave(0,1)*(clhs10*clhs72 + clhs11*clhs73 - clhs12*clhs70 - clhs13*clhs74);
        const double clhs76 =     normalslave(0,0)*(-clhs3*clhs72 - clhs5*clhs73 + clhs7*clhs70 + clhs74*clhs8 + clhs9);
        const double clhs77 =     -clhs75 + clhs76;
        const double clhs78 =     clhs77*normalslave(0,0)*penalty_parameter;
        const double clhs79 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs80 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs81 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs82 =     normalslave(1,1)*(clhs10*clhs79 + clhs11*clhs80 - clhs12*clhs71 - clhs13*clhs81);
        const double clhs83 =     normalslave(1,0)*(clhs22 - clhs3*clhs79 - clhs5*clhs80 + clhs7*clhs71 + clhs8*clhs81);
        const double clhs84 =     -clhs82 + clhs83;
        const double clhs85 =     clhs84*normalslave(1,0)*penalty_parameter;
        const double clhs86 =     clhs42*clhs45*clhs51*clhs77*mu[0]*penalty_parameter;
        const double clhs87 =     clhs45*clhs48*clhs51*clhs84*mu[1]*penalty_parameter;
        const double clhs88 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs89 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs90 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs91 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs92 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs93 =     normalslave(0,0)*(clhs3*clhs90 + clhs5*clhs91 - clhs7*clhs88 - clhs8*clhs92) - normalslave(0,1)*(-clhs10*clhs90 - clhs11*clhs91 + clhs12*clhs88 + clhs13*clhs92 + clhs9);
        const double clhs94 =     clhs93*normalslave(0,0)*penalty_parameter;
        const double clhs95 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs96 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs97 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs98 =     normalslave(1,0)*(clhs3*clhs95 + clhs5*clhs96 - clhs7*clhs89 - clhs8*clhs97) - normalslave(1,1)*(-clhs10*clhs95 - clhs11*clhs96 + clhs12*clhs89 + clhs13*clhs97 + clhs22);
        const double clhs99 =     clhs98*normalslave(1,0)*penalty_parameter;
        const double clhs100 =     clhs42*clhs45*clhs51*clhs93*mu[0]*penalty_parameter;
        const double clhs101 =     clhs45*clhs48*clhs51*clhs98*mu[1]*penalty_parameter;
        const double clhs102 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs103 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs104 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs105 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs106 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs107 =     normalslave(0,0)*(-clhs102*clhs7 + clhs104*clhs3 + clhs105*clhs5 - clhs106*clhs8 + clhs4) + normalslave(0,1)*(clhs10*clhs104 - clhs102*clhs12 + clhs105*clhs11 - clhs106*clhs13);
        const double clhs108 =     clhs107*normalslave(0,0)*penalty_parameter;
        const double clhs109 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs110 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs111 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs112 =     normalslave(1,0)*(-clhs103*clhs7 + clhs109*clhs3 + clhs110*clhs5 - clhs111*clhs8 + clhs20) + normalslave(1,1)*(clhs10*clhs109 - clhs103*clhs12 + clhs11*clhs110 - clhs111*clhs13);
        const double clhs113 =     clhs112*normalslave(1,0)*penalty_parameter;
        const double clhs114 =     clhs107*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs115 =     clhs112*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs116 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs117 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs118 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs119 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs120 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs121 =     normalslave(0,0)*(-clhs116*clhs7 + clhs118*clhs3 + clhs119*clhs5 - clhs120*clhs8) + normalslave(0,1)*(clhs10*clhs118 + clhs11*clhs119 - clhs116*clhs12 - clhs120*clhs13 + clhs4);
        const double clhs122 =     clhs121*normalslave(0,0)*penalty_parameter;
        const double clhs123 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs124 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs125 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs126 =     normalslave(1,0)*(-clhs117*clhs7 + clhs123*clhs3 + clhs124*clhs5 - clhs125*clhs8) + normalslave(1,1)*(clhs10*clhs123 + clhs11*clhs124 - clhs117*clhs12 - clhs125*clhs13 + clhs20);
        const double clhs127 =     clhs126*normalslave(1,0)*penalty_parameter;
        const double clhs128 =     clhs121*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs129 =     clhs126*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs130 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs131 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs132 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs133 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs134 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs135 =     normalslave(0,0)*(-clhs130*clhs7 + clhs132*clhs3 + clhs133*clhs5 - clhs134*clhs8 + clhs6) + normalslave(0,1)*(clhs10*clhs132 + clhs11*clhs133 - clhs12*clhs130 - clhs13*clhs134);
        const double clhs136 =     clhs135*normalslave(0,0)*penalty_parameter;
        const double clhs137 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs138 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs139 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs140 =     normalslave(1,0)*(-clhs131*clhs7 + clhs137*clhs3 + clhs138*clhs5 - clhs139*clhs8 + clhs21) + normalslave(1,1)*(clhs10*clhs137 + clhs11*clhs138 - clhs12*clhs131 - clhs13*clhs139);
        const double clhs141 =     clhs140*normalslave(1,0)*penalty_parameter;
        const double clhs142 =     clhs135*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs143 =     clhs140*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs144 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs145 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs146 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs147 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs148 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs149 =     normalslave(0,0)*(-clhs144*clhs7 + clhs146*clhs3 + clhs147*clhs5 - clhs148*clhs8) + normalslave(0,1)*(clhs10*clhs146 + clhs11*clhs147 - clhs12*clhs144 - clhs13*clhs148 + clhs6);
        const double clhs150 =     clhs149*normalslave(0,0)*penalty_parameter;
        const double clhs151 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs152 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs153 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs154 =     normalslave(1,0)*(-clhs145*clhs7 + clhs151*clhs3 + clhs152*clhs5 - clhs153*clhs8) + normalslave(1,1)*(clhs10*clhs151 + clhs11*clhs152 - clhs12*clhs145 - clhs13*clhs153 + clhs21);
        const double clhs155 =     clhs154*normalslave(1,0)*penalty_parameter;
        const double clhs156 =     clhs149*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs157 =     clhs154*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs158 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs159 =     clhs45*clhs51*mu[0]*normalslave(0,0)*scale_factor;
        const double clhs160 =     clhs159*clhs42;
        const double clhs161 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs162 =     clhs15*clhs45*clhs51*mu[0];
        const double clhs163 =     clhs161*clhs162;
        const double clhs164 =     clhs161*clhs42;
        const double clhs165 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs166 =     clhs165*clhs43;
        const double clhs167 =     clhs164 + clhs166;
        const double clhs168 =     std::pow(clhs44, -3.0L/2.0L);
        const double clhs169 =     clhs15*clhs168*clhs42*clhs51*mu[0];
        const double clhs170 =     clhs167*clhs169;
        const double clhs171 =     clhs167*clhs168*clhs24*clhs48*clhs51*mu[1];
        const double clhs172 =     normalslave(0,0)*normalslave(0,1)*scale_factor;
        const double clhs173 =     clhs162*clhs165;
        const double clhs174 =     clhs0*clhs172 + clhs0*clhs173;
        const double clhs175 =     clhs45*clhs51*mu[0]*normalslave(0,1)*scale_factor;
        const double clhs176 =     clhs175*clhs42;
        const double clhs177 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs178 =     clhs177*clhs43;
        const double clhs179 =     clhs165*clhs42;
        const double clhs180 =     clhs178 + clhs179;
        const double clhs181 =     clhs169*clhs180;
        const double clhs182 =     clhs168*clhs180*clhs24*clhs48*clhs51*mu[1];
        const double clhs183 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs184 =     clhs45*clhs51*mu[1]*normalslave(1,0)*scale_factor;
        const double clhs185 =     clhs184*clhs48;
        const double clhs186 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs187 =     clhs24*clhs45*clhs51*mu[1];
        const double clhs188 =     clhs186*clhs187;
        const double clhs189 =     std::pow(clhs50, -3.0L/2.0L);
        const double clhs190 =     clhs186*clhs48;
        const double clhs191 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs192 =     clhs191*clhs49;
        const double clhs193 =     clhs190 + clhs192;
        const double clhs194 =     clhs15*clhs189*clhs193*clhs42*clhs45*mu[0];
        const double clhs195 =     clhs189*clhs24*clhs45*clhs48*mu[1];
        const double clhs196 =     clhs193*clhs195;
        const double clhs197 =     normalslave(1,0)*normalslave(1,1)*scale_factor;
        const double clhs198 =     clhs187*clhs191;
        const double clhs199 =     clhs17*clhs197 + clhs17*clhs198;
        const double clhs200 =     clhs45*clhs51*mu[1]*normalslave(1,1)*scale_factor;
        const double clhs201 =     clhs200*clhs48;
        const double clhs202 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs203 =     clhs202*clhs49;
        const double clhs204 =     clhs191*clhs48;
        const double clhs205 =     clhs203 + clhs204;
        const double clhs206 =     clhs15*clhs189*clhs205*clhs42*clhs45*mu[0];
        const double clhs207 =     clhs195*clhs205;
        const double clhs208 =     clhs15*normalslave(0,1);
        const double clhs209 =     clhs24*normalslave(1,1);
        const double clhs210 =     clhs31*normalslave(0,1)*penalty_parameter;
        const double clhs211 =     clhs38*normalslave(1,1)*penalty_parameter;
        const double clhs212 =     clhs15*clhs43*clhs45*clhs51*mu[0];
        const double clhs213 =     clhs24*clhs45*clhs49*clhs51*mu[1];
        const double clhs214 =     clhs31*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs215 =     clhs38*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs216 =     clhs61*normalslave(0,1)*penalty_parameter;
        const double clhs217 =     clhs66*normalslave(1,1)*penalty_parameter;
        const double clhs218 =     clhs43*clhs45*clhs51*clhs61*mu[0]*penalty_parameter;
        const double clhs219 =     clhs45*clhs49*clhs51*clhs66*mu[1]*penalty_parameter;
        const double clhs220 =     clhs77*normalslave(0,1)*penalty_parameter;
        const double clhs221 =     clhs84*normalslave(1,1)*penalty_parameter;
        const double clhs222 =     clhs43*clhs45*clhs51*clhs77*mu[0]*penalty_parameter;
        const double clhs223 =     clhs45*clhs49*clhs51*clhs84*mu[1]*penalty_parameter;
        const double clhs224 =     clhs93*normalslave(0,1)*penalty_parameter;
        const double clhs225 =     clhs98*normalslave(1,1)*penalty_parameter;
        const double clhs226 =     clhs43*clhs45*clhs51*clhs93*mu[0]*penalty_parameter;
        const double clhs227 =     clhs45*clhs49*clhs51*clhs98*mu[1]*penalty_parameter;
        const double clhs228 =     clhs107*normalslave(0,1)*penalty_parameter;
        const double clhs229 =     clhs112*normalslave(1,1)*penalty_parameter;
        const double clhs230 =     clhs107*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs231 =     clhs112*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs232 =     clhs121*normalslave(0,1)*penalty_parameter;
        const double clhs233 =     clhs126*normalslave(1,1)*penalty_parameter;
        const double clhs234 =     clhs121*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs235 =     clhs126*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs236 =     clhs135*normalslave(0,1)*penalty_parameter;
        const double clhs237 =     clhs140*normalslave(1,1)*penalty_parameter;
        const double clhs238 =     clhs135*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs239 =     clhs140*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs240 =     clhs149*normalslave(0,1)*penalty_parameter;
        const double clhs241 =     clhs154*normalslave(1,1)*penalty_parameter;
        const double clhs242 =     clhs149*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs243 =     clhs154*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs244 =     clhs159*clhs43;
        const double clhs245 =     clhs15*clhs168*clhs43*clhs51*mu[0];
        const double clhs246 =     clhs167*clhs245;
        const double clhs247 =     clhs167*clhs168*clhs24*clhs49*clhs51*mu[1];
        const double clhs248 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs249 =     clhs175*clhs43;
        const double clhs250 =     clhs162*clhs177;
        const double clhs251 =     clhs180*clhs245;
        const double clhs252 =     clhs168*clhs180*clhs24*clhs49*clhs51*mu[1];
        const double clhs253 =     clhs184*clhs49;
        const double clhs254 =     clhs15*clhs189*clhs193*clhs43*clhs45*mu[0];
        const double clhs255 =     clhs189*clhs24*clhs45*clhs49*mu[1];
        const double clhs256 =     clhs193*clhs255;
        const double clhs257 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs258 =     clhs200*clhs49;
        const double clhs259 =     clhs187*clhs202;
        const double clhs260 =     clhs15*clhs189*clhs205*clhs43*clhs45*mu[0];
        const double clhs261 =     clhs205*clhs255;
        const double clhs262 =     clhs172*clhs9 + clhs173*clhs9;
        const double clhs263 =     clhs197*clhs22 + clhs198*clhs22;
        const double clhs264 =     -clhs14 + clhs2;
        const double clhs265 =     clhs264*normalslave(0,0);
        const double clhs266 =     clhs19 - clhs23;
        const double clhs267 =     clhs266*normalslave(1,0);
        const double clhs268 =     clhs29 - clhs30;
        const double clhs269 =     clhs268*normalslave(0,0)*penalty_parameter;
        const double clhs270 =     clhs36 - clhs37;
        const double clhs271 =     clhs270*normalslave(1,0)*penalty_parameter;
        const double clhs272 =     clhs264*clhs42*clhs45*clhs51*mu[0];
        const double clhs273 =     clhs266*clhs45*clhs48*clhs51*mu[1];
        const double clhs274 =     clhs268*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs275 =     clhs270*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs276 =     clhs75 - clhs76;
        const double clhs277 =     clhs276*normalslave(0,0)*penalty_parameter;
        const double clhs278 =     clhs82 - clhs83;
        const double clhs279 =     clhs278*normalslave(1,0)*penalty_parameter;
        const double clhs280 =     clhs276*clhs42*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs281 =     clhs278*clhs45*clhs48*clhs51*mu[1]*penalty_parameter;
        const double clhs282 =     clhs161*clhs264*clhs45*clhs51*mu[0];
        const double clhs283 =     clhs167*clhs168*clhs264*clhs42*clhs51*mu[0];
        const double clhs284 =     clhs167*clhs168*clhs266*clhs48*clhs51*mu[1];
        const double clhs285 =     clhs165*clhs264*clhs45*clhs51*mu[0];
        const double clhs286 =     -clhs172*clhs4 + clhs285*clhs4;
        const double clhs287 =     clhs168*clhs180*clhs264*clhs42*clhs51*mu[0];
        const double clhs288 =     clhs168*clhs180*clhs266*clhs48*clhs51*mu[1];
        const double clhs289 =     clhs186*clhs266*clhs45*clhs51*mu[1];
        const double clhs290 =     clhs189*clhs193*clhs264*clhs42*clhs45*mu[0];
        const double clhs291 =     clhs189*clhs193*clhs266*clhs45*clhs48*mu[1];
        const double clhs292 =     clhs191*clhs266*clhs45*clhs51*mu[1];
        const double clhs293 =     -clhs197*clhs20 + clhs20*clhs292;
        const double clhs294 =     clhs189*clhs205*clhs264*clhs42*clhs45*mu[0];
        const double clhs295 =     clhs189*clhs205*clhs266*clhs45*clhs48*mu[1];
        const double clhs296 =     clhs264*normalslave(0,1);
        const double clhs297 =     clhs266*normalslave(1,1);
        const double clhs298 =     clhs268*normalslave(0,1)*penalty_parameter;
        const double clhs299 =     clhs270*normalslave(1,1)*penalty_parameter;
        const double clhs300 =     clhs264*clhs43*clhs45*clhs51*mu[0];
        const double clhs301 =     clhs266*clhs45*clhs49*clhs51*mu[1];
        const double clhs302 =     clhs268*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs303 =     clhs270*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs304 =     clhs276*normalslave(0,1)*penalty_parameter;
        const double clhs305 =     clhs278*normalslave(1,1)*penalty_parameter;
        const double clhs306 =     clhs276*clhs43*clhs45*clhs51*mu[0]*penalty_parameter;
        const double clhs307 =     clhs278*clhs45*clhs49*clhs51*mu[1]*penalty_parameter;
        const double clhs308 =     clhs167*clhs168*clhs264*clhs43*clhs51*mu[0];
        const double clhs309 =     clhs167*clhs168*clhs266*clhs49*clhs51*mu[1];
        const double clhs310 =     clhs177*clhs264*clhs45*clhs51*mu[0];
        const double clhs311 =     clhs168*clhs180*clhs264*clhs43*clhs51*mu[0];
        const double clhs312 =     clhs168*clhs180*clhs266*clhs49*clhs51*mu[1];
        const double clhs313 =     clhs189*clhs193*clhs264*clhs43*clhs45*mu[0];
        const double clhs314 =     clhs189*clhs193*clhs266*clhs45*clhs49*mu[1];
        const double clhs315 =     clhs202*clhs266*clhs45*clhs51*mu[1];
        const double clhs316 =     clhs189*clhs205*clhs264*clhs43*clhs45*mu[0];
        const double clhs317 =     clhs189*clhs205*clhs266*clhs45*clhs49*mu[1];
        const double clhs318 =     -clhs172*clhs6 + clhs285*clhs6;
        const double clhs319 =     -clhs197*clhs21 + clhs21*clhs292;
        const double clhs320 =     clhs268*scale_factor;
        const double clhs321 =     0.5*clhs45*clhs51*mu[0];
        const double clhs322 =     -clhs164*clhs321 - clhs166*clhs321 + normalslave(0,0);
        const double clhs323 =     clhs61*scale_factor;
        const double clhs324 =     clhs276*scale_factor;
        const double clhs325 =     clhs93*scale_factor;
        const double clhs326 =     clhs107*scale_factor;
        const double clhs327 =     clhs121*scale_factor;
        const double clhs328 =     clhs135*scale_factor;
        const double clhs329 =     clhs149*scale_factor;
        const double clhs330 =     1.0/penalty_parameter;
        const double clhs331 =     0.5*clhs330*scale_factor;
        const double clhs332 =     clhs160 + clhs161*scale_factor - clhs163 + clhs170;
        const double clhs333 =     clhs165*scale_factor - clhs173;
        const double clhs334 =     clhs244 + clhs246 + clhs333;
        const double clhs335 =     clhs176 + clhs181 + clhs333;
        const double clhs336 =     clhs177*scale_factor + clhs249 - clhs250 + clhs251;
        const double clhs337 =     0.5*clhs167*clhs189*clhs264*clhs330*clhs45*mu[0]*scale_factor;
        const double clhs338 =     -clhs178*clhs321 - clhs179*clhs321 + normalslave(0,1);
        const double clhs339 =     0.5*clhs180*clhs189*clhs264*clhs330*clhs45*mu[0]*scale_factor;
        const double clhs340 =     clhs270*scale_factor;
        const double clhs341 =     0.5*clhs45*clhs51*mu[1];
        const double clhs342 =     -clhs190*clhs341 - clhs192*clhs341 + normalslave(1,0);
        const double clhs343 =     clhs66*scale_factor;
        const double clhs344 =     clhs278*scale_factor;
        const double clhs345 =     clhs98*scale_factor;
        const double clhs346 =     clhs112*scale_factor;
        const double clhs347 =     clhs126*scale_factor;
        const double clhs348 =     clhs140*scale_factor;
        const double clhs349 =     clhs154*scale_factor;
        const double clhs350 =     0.5*clhs167*clhs168*clhs266*clhs330*clhs51*mu[1]*scale_factor;
        const double clhs351 =     0.5*clhs168*clhs180*clhs266*clhs330*clhs51*mu[1]*scale_factor;
        const double clhs352 =     clhs185 + clhs186*scale_factor - clhs188 + clhs196;
        const double clhs353 =     clhs191*scale_factor - clhs198;
        const double clhs354 =     clhs253 + clhs256 + clhs353;
        const double clhs355 =     clhs201 + clhs207 + clhs353;
        const double clhs356 =     clhs202*scale_factor + clhs258 - clhs259 + clhs261;
        const double clhs357 =     -clhs203*clhs341 - clhs204*clhs341 + normalslave(1,1);
    
        lhs(0,0)=clhs0*clhs32 - clhs0*clhs54 - clhs1*clhs16 + clhs1*clhs52 + clhs17*clhs39 - clhs17*clhs55 - clhs18*clhs25 + clhs18*clhs53;
        lhs(0,1)=-clhs0*clhs62 + clhs0*clhs68 - clhs16*clhs56 - clhs17*clhs67 + clhs17*clhs69 - clhs25*clhs57 + clhs52*clhs56 + clhs53*clhs57;
        lhs(0,2)=clhs0*clhs78 - clhs0*clhs86 - clhs16*clhs70 + clhs17*clhs85 - clhs17*clhs87 - clhs25*clhs71 + clhs52*clhs70 + clhs53*clhs71;
        lhs(0,3)=clhs0*clhs100 - clhs0*clhs94 + clhs101*clhs17 - clhs16*clhs88 - clhs17*clhs99 - clhs25*clhs89 + clhs52*clhs88 + clhs53*clhs89;
        lhs(0,4)=-clhs0*clhs108 + clhs0*clhs114 - clhs102*clhs16 + clhs102*clhs52 - clhs103*clhs25 + clhs103*clhs53 - clhs113*clhs17 + clhs115*clhs17;
        lhs(0,5)=-clhs0*clhs122 + clhs0*clhs128 - clhs116*clhs16 + clhs116*clhs52 - clhs117*clhs25 + clhs117*clhs53 - clhs127*clhs17 + clhs129*clhs17;
        lhs(0,6)=-clhs0*clhs136 + clhs0*clhs142 - clhs130*clhs16 + clhs130*clhs52 - clhs131*clhs25 + clhs131*clhs53 - clhs141*clhs17 + clhs143*clhs17;
        lhs(0,7)=-clhs0*clhs150 + clhs0*clhs156 - clhs144*clhs16 + clhs144*clhs52 - clhs145*clhs25 + clhs145*clhs53 - clhs155*clhs17 + clhs157*clhs17;
        lhs(0,8)=clhs0*clhs158 - clhs0*clhs160 + clhs0*clhs163 - clhs0*clhs170 - clhs17*clhs171;
        lhs(0,9)=-clhs0*clhs176 - clhs0*clhs181 - clhs17*clhs182 + clhs174;
        lhs(0,10)=-clhs0*clhs194 + clhs17*clhs183 - clhs17*clhs185 + clhs17*clhs188 - clhs17*clhs196;
        lhs(0,11)=-clhs0*clhs206 - clhs17*clhs201 - clhs17*clhs207 + clhs199;
        lhs(1,0)=clhs0*clhs210 - clhs0*clhs214 - clhs1*clhs208 + clhs1*clhs212 + clhs17*clhs211 - clhs17*clhs215 - clhs18*clhs209 + clhs18*clhs213;
        lhs(1,1)=-clhs0*clhs216 + clhs0*clhs218 - clhs17*clhs217 + clhs17*clhs219 - clhs208*clhs56 - clhs209*clhs57 + clhs212*clhs56 + clhs213*clhs57;
        lhs(1,2)=clhs0*clhs220 - clhs0*clhs222 + clhs17*clhs221 - clhs17*clhs223 - clhs208*clhs70 - clhs209*clhs71 + clhs212*clhs70 + clhs213*clhs71;
        lhs(1,3)=-clhs0*clhs224 + clhs0*clhs226 - clhs17*clhs225 + clhs17*clhs227 - clhs208*clhs88 - clhs209*clhs89 + clhs212*clhs88 + clhs213*clhs89;
        lhs(1,4)=-clhs0*clhs228 + clhs0*clhs230 - clhs102*clhs208 + clhs102*clhs212 - clhs103*clhs209 + clhs103*clhs213 - clhs17*clhs229 + clhs17*clhs231;
        lhs(1,5)=-clhs0*clhs232 + clhs0*clhs234 - clhs116*clhs208 + clhs116*clhs212 - clhs117*clhs209 + clhs117*clhs213 - clhs17*clhs233 + clhs17*clhs235;
        lhs(1,6)=-clhs0*clhs236 + clhs0*clhs238 - clhs130*clhs208 + clhs130*clhs212 - clhs131*clhs209 + clhs131*clhs213 - clhs17*clhs237 + clhs17*clhs239;
        lhs(1,7)=-clhs0*clhs240 + clhs0*clhs242 - clhs144*clhs208 + clhs144*clhs212 - clhs145*clhs209 + clhs145*clhs213 - clhs17*clhs241 + clhs17*clhs243;
        lhs(1,8)=-clhs0*clhs244 - clhs0*clhs246 - clhs17*clhs247 + clhs174;
        lhs(1,9)=clhs0*clhs248 - clhs0*clhs249 + clhs0*clhs250 - clhs0*clhs251 - clhs17*clhs252;
        lhs(1,10)=-clhs0*clhs254 - clhs17*clhs253 - clhs17*clhs256 + clhs199;
        lhs(1,11)=-clhs0*clhs260 + clhs17*clhs257 - clhs17*clhs258 + clhs17*clhs259 - clhs17*clhs261;
        lhs(2,0)=-clhs16*clhs28 + clhs22*clhs39 - clhs22*clhs55 - clhs25*clhs35 + clhs28*clhs52 + clhs32*clhs9 + clhs35*clhs53 - clhs54*clhs9;
        lhs(2,1)=-clhs16*clhs60 - clhs22*clhs67 + clhs22*clhs69 - clhs25*clhs65 + clhs52*clhs60 + clhs53*clhs65 - clhs62*clhs9 + clhs68*clhs9;
        lhs(2,2)=-clhs16*clhs74 + clhs22*clhs85 - clhs22*clhs87 - clhs25*clhs81 + clhs52*clhs74 + clhs53*clhs81 + clhs78*clhs9 - clhs86*clhs9;
        lhs(2,3)=clhs100*clhs9 + clhs101*clhs22 - clhs16*clhs92 - clhs22*clhs99 - clhs25*clhs97 + clhs52*clhs92 + clhs53*clhs97 - clhs9*clhs94;
        lhs(2,4)=-clhs106*clhs16 + clhs106*clhs52 - clhs108*clhs9 - clhs111*clhs25 + clhs111*clhs53 - clhs113*clhs22 + clhs114*clhs9 + clhs115*clhs22;
        lhs(2,5)=-clhs120*clhs16 + clhs120*clhs52 - clhs122*clhs9 - clhs125*clhs25 + clhs125*clhs53 - clhs127*clhs22 + clhs128*clhs9 + clhs129*clhs22;
        lhs(2,6)=-clhs134*clhs16 + clhs134*clhs52 - clhs136*clhs9 - clhs139*clhs25 + clhs139*clhs53 - clhs141*clhs22 + clhs142*clhs9 + clhs143*clhs22;
        lhs(2,7)=-clhs148*clhs16 + clhs148*clhs52 - clhs150*clhs9 - clhs153*clhs25 + clhs153*clhs53 - clhs155*clhs22 + clhs156*clhs9 + clhs157*clhs22;
        lhs(2,8)=clhs158*clhs9 - clhs160*clhs9 + clhs163*clhs9 - clhs170*clhs9 - clhs171*clhs22;
        lhs(2,9)=-clhs176*clhs9 - clhs181*clhs9 - clhs182*clhs22 + clhs262;
        lhs(2,10)=clhs183*clhs22 - clhs185*clhs22 + clhs188*clhs22 - clhs194*clhs9 - clhs196*clhs22;
        lhs(2,11)=-clhs201*clhs22 - clhs206*clhs9 - clhs207*clhs22 + clhs263;
        lhs(3,0)=-clhs208*clhs28 - clhs209*clhs35 + clhs210*clhs9 + clhs211*clhs22 + clhs212*clhs28 + clhs213*clhs35 - clhs214*clhs9 - clhs215*clhs22;
        lhs(3,1)=-clhs208*clhs60 - clhs209*clhs65 + clhs212*clhs60 + clhs213*clhs65 - clhs216*clhs9 - clhs217*clhs22 + clhs218*clhs9 + clhs219*clhs22;
        lhs(3,2)=-clhs208*clhs74 - clhs209*clhs81 + clhs212*clhs74 + clhs213*clhs81 + clhs22*clhs221 - clhs22*clhs223 + clhs220*clhs9 - clhs222*clhs9;
        lhs(3,3)=-clhs208*clhs92 - clhs209*clhs97 + clhs212*clhs92 + clhs213*clhs97 - clhs22*clhs225 + clhs22*clhs227 - clhs224*clhs9 + clhs226*clhs9;
        lhs(3,4)=-clhs106*clhs208 + clhs106*clhs212 - clhs111*clhs209 + clhs111*clhs213 - clhs22*clhs229 + clhs22*clhs231 - clhs228*clhs9 + clhs230*clhs9;
        lhs(3,5)=-clhs120*clhs208 + clhs120*clhs212 - clhs125*clhs209 + clhs125*clhs213 - clhs22*clhs233 + clhs22*clhs235 - clhs232*clhs9 + clhs234*clhs9;
        lhs(3,6)=-clhs134*clhs208 + clhs134*clhs212 - clhs139*clhs209 + clhs139*clhs213 - clhs22*clhs237 + clhs22*clhs239 - clhs236*clhs9 + clhs238*clhs9;
        lhs(3,7)=-clhs148*clhs208 + clhs148*clhs212 - clhs153*clhs209 + clhs153*clhs213 - clhs22*clhs241 + clhs22*clhs243 - clhs240*clhs9 + clhs242*clhs9;
        lhs(3,8)=-clhs22*clhs247 - clhs244*clhs9 - clhs246*clhs9 + clhs262;
        lhs(3,9)=-clhs22*clhs252 + clhs248*clhs9 - clhs249*clhs9 + clhs250*clhs9 - clhs251*clhs9;
        lhs(3,10)=-clhs22*clhs253 - clhs22*clhs256 - clhs254*clhs9 + clhs263;
        lhs(3,11)=clhs22*clhs257 - clhs22*clhs258 + clhs22*clhs259 - clhs22*clhs261 - clhs260*clhs9;
        lhs(4,0)=clhs20*clhs271 - clhs20*clhs275 - clhs26*clhs265 + clhs26*clhs272 - clhs267*clhs33 + clhs269*clhs4 + clhs273*clhs33 - clhs274*clhs4;
        lhs(4,1)=clhs20*clhs67 - clhs20*clhs69 - clhs265*clhs58 - clhs267*clhs63 + clhs272*clhs58 + clhs273*clhs63 + clhs4*clhs62 - clhs4*clhs68;
        lhs(4,2)=clhs20*clhs279 - clhs20*clhs281 - clhs265*clhs72 - clhs267*clhs79 + clhs272*clhs72 + clhs273*clhs79 + clhs277*clhs4 - clhs280*clhs4;
        lhs(4,3)=-clhs100*clhs4 - clhs101*clhs20 + clhs20*clhs99 - clhs265*clhs90 - clhs267*clhs95 + clhs272*clhs90 + clhs273*clhs95 + clhs4*clhs94;
        lhs(4,4)=-clhs104*clhs265 + clhs104*clhs272 + clhs108*clhs4 - clhs109*clhs267 + clhs109*clhs273 + clhs113*clhs20 - clhs114*clhs4 - clhs115*clhs20;
        lhs(4,5)=-clhs118*clhs265 + clhs118*clhs272 + clhs122*clhs4 - clhs123*clhs267 + clhs123*clhs273 + clhs127*clhs20 - clhs128*clhs4 - clhs129*clhs20;
        lhs(4,6)=-clhs132*clhs265 + clhs132*clhs272 + clhs136*clhs4 - clhs137*clhs267 + clhs137*clhs273 + clhs141*clhs20 - clhs142*clhs4 - clhs143*clhs20;
        lhs(4,7)=-clhs146*clhs265 + clhs146*clhs272 + clhs150*clhs4 - clhs151*clhs267 + clhs151*clhs273 + clhs155*clhs20 - clhs156*clhs4 - clhs157*clhs20;
        lhs(4,8)=-clhs158*clhs4 + clhs160*clhs4 - clhs20*clhs284 + clhs282*clhs4 - clhs283*clhs4;
        lhs(4,9)=clhs176*clhs4 - clhs20*clhs288 + clhs286 - clhs287*clhs4;
        lhs(4,10)=-clhs183*clhs20 + clhs185*clhs20 + clhs20*clhs289 - clhs20*clhs291 - clhs290*clhs4;
        lhs(4,11)=clhs20*clhs201 - clhs20*clhs295 + clhs293 - clhs294*clhs4;
        lhs(5,0)=clhs20*clhs299 - clhs20*clhs303 - clhs26*clhs296 + clhs26*clhs300 - clhs297*clhs33 + clhs298*clhs4 + clhs301*clhs33 - clhs302*clhs4;
        lhs(5,1)=clhs20*clhs217 - clhs20*clhs219 + clhs216*clhs4 - clhs218*clhs4 - clhs296*clhs58 - clhs297*clhs63 + clhs300*clhs58 + clhs301*clhs63;
        lhs(5,2)=clhs20*clhs305 - clhs20*clhs307 - clhs296*clhs72 - clhs297*clhs79 + clhs300*clhs72 + clhs301*clhs79 + clhs304*clhs4 - clhs306*clhs4;
        lhs(5,3)=clhs20*clhs225 - clhs20*clhs227 + clhs224*clhs4 - clhs226*clhs4 - clhs296*clhs90 - clhs297*clhs95 + clhs300*clhs90 + clhs301*clhs95;
        lhs(5,4)=-clhs104*clhs296 + clhs104*clhs300 - clhs109*clhs297 + clhs109*clhs301 + clhs20*clhs229 - clhs20*clhs231 + clhs228*clhs4 - clhs230*clhs4;
        lhs(5,5)=-clhs118*clhs296 + clhs118*clhs300 - clhs123*clhs297 + clhs123*clhs301 + clhs20*clhs233 - clhs20*clhs235 + clhs232*clhs4 - clhs234*clhs4;
        lhs(5,6)=-clhs132*clhs296 + clhs132*clhs300 - clhs137*clhs297 + clhs137*clhs301 + clhs20*clhs237 - clhs20*clhs239 + clhs236*clhs4 - clhs238*clhs4;
        lhs(5,7)=-clhs146*clhs296 + clhs146*clhs300 - clhs151*clhs297 + clhs151*clhs301 + clhs20*clhs241 - clhs20*clhs243 + clhs240*clhs4 - clhs242*clhs4;
        lhs(5,8)=-clhs20*clhs309 + clhs244*clhs4 + clhs286 - clhs308*clhs4;
        lhs(5,9)=-clhs20*clhs312 - clhs248*clhs4 + clhs249*clhs4 + clhs310*clhs4 - clhs311*clhs4;
        lhs(5,10)=clhs20*clhs253 - clhs20*clhs314 + clhs293 - clhs313*clhs4;
        lhs(5,11)=-clhs20*clhs257 + clhs20*clhs258 + clhs20*clhs315 - clhs20*clhs317 - clhs316*clhs4;
        lhs(6,0)=clhs21*clhs271 - clhs21*clhs275 - clhs265*clhs27 - clhs267*clhs34 + clhs269*clhs6 + clhs27*clhs272 + clhs273*clhs34 - clhs274*clhs6;
        lhs(6,1)=clhs21*clhs67 - clhs21*clhs69 - clhs265*clhs59 - clhs267*clhs64 + clhs272*clhs59 + clhs273*clhs64 + clhs6*clhs62 - clhs6*clhs68;
        lhs(6,2)=clhs21*clhs279 - clhs21*clhs281 - clhs265*clhs73 - clhs267*clhs80 + clhs272*clhs73 + clhs273*clhs80 + clhs277*clhs6 - clhs280*clhs6;
        lhs(6,3)=-clhs100*clhs6 - clhs101*clhs21 + clhs21*clhs99 - clhs265*clhs91 - clhs267*clhs96 + clhs272*clhs91 + clhs273*clhs96 + clhs6*clhs94;
        lhs(6,4)=-clhs105*clhs265 + clhs105*clhs272 + clhs108*clhs6 - clhs110*clhs267 + clhs110*clhs273 + clhs113*clhs21 - clhs114*clhs6 - clhs115*clhs21;
        lhs(6,5)=-clhs119*clhs265 + clhs119*clhs272 + clhs122*clhs6 - clhs124*clhs267 + clhs124*clhs273 + clhs127*clhs21 - clhs128*clhs6 - clhs129*clhs21;
        lhs(6,6)=-clhs133*clhs265 + clhs133*clhs272 + clhs136*clhs6 - clhs138*clhs267 + clhs138*clhs273 + clhs141*clhs21 - clhs142*clhs6 - clhs143*clhs21;
        lhs(6,7)=-clhs147*clhs265 + clhs147*clhs272 + clhs150*clhs6 - clhs152*clhs267 + clhs152*clhs273 + clhs155*clhs21 - clhs156*clhs6 - clhs157*clhs21;
        lhs(6,8)=-clhs158*clhs6 + clhs160*clhs6 - clhs21*clhs284 + clhs282*clhs6 - clhs283*clhs6;
        lhs(6,9)=clhs176*clhs6 - clhs21*clhs288 - clhs287*clhs6 + clhs318;
        lhs(6,10)=-clhs183*clhs21 + clhs185*clhs21 + clhs21*clhs289 - clhs21*clhs291 - clhs290*clhs6;
        lhs(6,11)=clhs201*clhs21 - clhs21*clhs295 - clhs294*clhs6 + clhs319;
        lhs(7,0)=clhs21*clhs299 - clhs21*clhs303 - clhs27*clhs296 + clhs27*clhs300 - clhs297*clhs34 + clhs298*clhs6 + clhs301*clhs34 - clhs302*clhs6;
        lhs(7,1)=clhs21*clhs217 - clhs21*clhs219 + clhs216*clhs6 - clhs218*clhs6 - clhs296*clhs59 - clhs297*clhs64 + clhs300*clhs59 + clhs301*clhs64;
        lhs(7,2)=clhs21*clhs305 - clhs21*clhs307 - clhs296*clhs73 - clhs297*clhs80 + clhs300*clhs73 + clhs301*clhs80 + clhs304*clhs6 - clhs306*clhs6;
        lhs(7,3)=clhs21*clhs225 - clhs21*clhs227 + clhs224*clhs6 - clhs226*clhs6 - clhs296*clhs91 - clhs297*clhs96 + clhs300*clhs91 + clhs301*clhs96;
        lhs(7,4)=-clhs105*clhs296 + clhs105*clhs300 - clhs110*clhs297 + clhs110*clhs301 + clhs21*clhs229 - clhs21*clhs231 + clhs228*clhs6 - clhs230*clhs6;
        lhs(7,5)=-clhs119*clhs296 + clhs119*clhs300 - clhs124*clhs297 + clhs124*clhs301 + clhs21*clhs233 - clhs21*clhs235 + clhs232*clhs6 - clhs234*clhs6;
        lhs(7,6)=-clhs133*clhs296 + clhs133*clhs300 - clhs138*clhs297 + clhs138*clhs301 + clhs21*clhs237 - clhs21*clhs239 + clhs236*clhs6 - clhs238*clhs6;
        lhs(7,7)=-clhs147*clhs296 + clhs147*clhs300 - clhs152*clhs297 + clhs152*clhs301 + clhs21*clhs241 - clhs21*clhs243 + clhs240*clhs6 - clhs242*clhs6;
        lhs(7,8)=-clhs21*clhs309 + clhs244*clhs6 - clhs308*clhs6 + clhs318;
        lhs(7,9)=-clhs21*clhs312 - clhs248*clhs6 + clhs249*clhs6 + clhs310*clhs6 - clhs311*clhs6;
        lhs(7,10)=clhs21*clhs253 - clhs21*clhs314 - clhs313*clhs6 + clhs319;
        lhs(7,11)=-clhs21*clhs257 + clhs21*clhs258 + clhs21*clhs315 - clhs21*clhs317 - clhs316*clhs6;
        lhs(8,0)=clhs320*clhs322;
        lhs(8,1)=clhs322*clhs323;
        lhs(8,2)=clhs322*clhs324;
        lhs(8,3)=clhs322*clhs325;
        lhs(8,4)=clhs322*clhs326;
        lhs(8,5)=clhs322*clhs327;
        lhs(8,6)=clhs322*clhs328;
        lhs(8,7)=clhs322*clhs329;
        lhs(8,8)=clhs331*(clhs161*clhs332 + clhs165*clhs334);
        lhs(8,9)=clhs331*(clhs161*clhs335 + clhs165*clhs336);
        lhs(8,10)=-clhs193*clhs337;
        lhs(8,11)=-clhs205*clhs337;
        lhs(9,0)=clhs320*clhs338;
        lhs(9,1)=clhs323*clhs338;
        lhs(9,2)=clhs324*clhs338;
        lhs(9,3)=clhs325*clhs338;
        lhs(9,4)=clhs326*clhs338;
        lhs(9,5)=clhs327*clhs338;
        lhs(9,6)=clhs328*clhs338;
        lhs(9,7)=clhs329*clhs338;
        lhs(9,8)=clhs331*(clhs165*clhs332 + clhs177*clhs334);
        lhs(9,9)=clhs331*(clhs165*clhs335 + clhs177*clhs336);
        lhs(9,10)=-clhs193*clhs339;
        lhs(9,11)=-clhs205*clhs339;
        lhs(10,0)=clhs340*clhs342;
        lhs(10,1)=clhs342*clhs343;
        lhs(10,2)=clhs342*clhs344;
        lhs(10,3)=clhs342*clhs345;
        lhs(10,4)=clhs342*clhs346;
        lhs(10,5)=clhs342*clhs347;
        lhs(10,6)=clhs342*clhs348;
        lhs(10,7)=clhs342*clhs349;
        lhs(10,8)=-clhs193*clhs350;
        lhs(10,9)=-clhs193*clhs351;
        lhs(10,10)=clhs331*(clhs186*clhs352 + clhs191*clhs354);
        lhs(10,11)=clhs331*(clhs186*clhs355 + clhs191*clhs356);
        lhs(11,0)=clhs340*clhs357;
        lhs(11,1)=clhs343*clhs357;
        lhs(11,2)=clhs344*clhs357;
        lhs(11,3)=clhs345*clhs357;
        lhs(11,4)=clhs346*clhs357;
        lhs(11,5)=clhs347*clhs357;
        lhs(11,6)=clhs348*clhs357;
        lhs(11,7)=clhs349*clhs357;
        lhs(11,8)=-clhs205*clhs350;
        lhs(11,9)=-clhs205*clhs351;
        lhs(11,10)=clhs331*(clhs191*clhs352 + clhs202*clhs354);
        lhs(11,11)=clhs331*(clhs191*clhs355 + clhs202*clhs356);
    }
    else if (rActiveInactive == 5 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs3 =     X1(0,0) + u1old(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1old(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2old(0,0);
        const double clhs8 =     X2(1,0) + u2old(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     -clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9;
        const double clhs11 =     X1(0,1) + u1old(0,1);
        const double clhs12 =     X1(1,1) + u1old(1,1);
        const double clhs13 =     X2(0,1) + u2old(0,1);
        const double clhs14 =     X2(1,1) + u2old(1,1);
        const double clhs15 =     -clhs0*clhs13 + clhs11*clhs4 + clhs12*clhs6 - clhs14*clhs9;
        const double clhs16 =     clhs2*scale_factor + penalty_parameter*(clhs10*tangentetaslave(0,0) + clhs15*tangentetaslave(0,1));
        const double clhs17 =     clhs16*tangentetaslave(0,0);
        const double clhs18 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs19 =     clhs18*scale_factor + penalty_parameter*(clhs10*tangentxislave(0,0) + clhs15*tangentxislave(0,1));
        const double clhs20 =     clhs19*tangentxislave(0,0);
        const double clhs21 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs22 =     X1(0,0) + u1(0,0);
        const double clhs23 =     X1(1,0) + u1(1,0);
        const double clhs24 =     X2(0,0) + u2(0,0);
        const double clhs25 =     X2(1,0) + u2(1,0);
        const double clhs26 =     X1(0,1) + u1(0,1);
        const double clhs27 =     X1(1,1) + u1(1,1);
        const double clhs28 =     X2(0,1) + u2(0,1);
        const double clhs29 =     X2(1,1) + u2(1,1);
        const double clhs30 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs24 + clhs22*clhs4 + clhs23*clhs6 - clhs25*clhs9) + normalslave(0,1)*(-clhs0*clhs28 + clhs26*clhs4 + clhs27*clhs6 - clhs29*clhs9));
        const double clhs31 =     -clhs21 + clhs30;
        const double clhs32 =     clhs31*normalslave(0,0);
        const double clhs33 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs34 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs35 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs38 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs39 =     penalty_parameter*(normalslave(1,0)*(clhs22*clhs36 + clhs23*clhs37 - clhs24*clhs33 - clhs25*clhs38) + normalslave(1,1)*(clhs26*clhs36 + clhs27*clhs37 - clhs28*clhs33 - clhs29*clhs38));
        const double clhs40 =     -clhs35 + clhs39;
        const double clhs41 =     clhs40*normalslave(1,0);
        const double clhs42 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs43 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs44 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs45 =     -clhs1*clhs7 + clhs3*clhs42 + clhs43*clhs5 - clhs44*clhs8;
        const double clhs46 =     -clhs1*clhs13 + clhs11*clhs42 + clhs12*clhs43 - clhs14*clhs44;
        const double clhs47 =     clhs45*tangentetaslave(0,0) + clhs46*tangentetaslave(0,1);
        const double clhs48 =     clhs47*penalty_parameter*tangentetaslave(0,0);
        const double clhs49 =     clhs45*tangentxislave(0,0) + clhs46*tangentxislave(0,1);
        const double clhs50 =     clhs49*penalty_parameter*tangentxislave(0,0);
        const double clhs51 =     normalslave(0,1)*(-clhs1*clhs28 + clhs26*clhs42 + clhs27*clhs43 - clhs29*clhs44);
        const double clhs52 =     normalslave(0,0)*(clhs0 + clhs1*clhs24 - clhs22*clhs42 - clhs23*clhs43 + clhs25*clhs44);
        const double clhs53 =     -clhs51 + clhs52;
        const double clhs54 =     clhs53*normalslave(0,0)*penalty_parameter;
        const double clhs55 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs56 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs57 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs58 =     normalslave(1,1)*(clhs26*clhs55 + clhs27*clhs56 - clhs28*clhs34 - clhs29*clhs57);
        const double clhs59 =     normalslave(1,0)*(-clhs22*clhs55 - clhs23*clhs56 + clhs24*clhs34 + clhs25*clhs57 + clhs33);
        const double clhs60 =     -clhs58 + clhs59;
        const double clhs61 =     clhs60*normalslave(1,0)*penalty_parameter;
        const double clhs62 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs63 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs64 =     clhs62*tangentetaslave(1,0) + clhs63*tangentxislave(1,0);
        const double clhs65 =     clhs18*tangentxislave(0,0) + clhs2*tangentetaslave(0,0);
        const double clhs66 =     clhs18*tangentxislave(0,1) + clhs2*tangentetaslave(0,1);
        const double clhs67 =     std::pow(clhs65, 2) + std::pow(clhs66, 2);
        const double clhs68 =     std::pow(clhs67, -1.0L/2.0L);
        const double clhs69 =     clhs62*tangentetaslave(1,1) + clhs63*tangentxislave(1,1);
        const double clhs70 =     std::pow(clhs64, 2) + std::pow(clhs69, 2);
        const double clhs71 =     std::pow(clhs70, -1.0L/2.0L);
        const double clhs72 =     clhs40*clhs64*clhs68*clhs71*mu[1];
        const double clhs73 =     clhs60*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs74 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs75 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs76 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs77 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs78 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs79 =     clhs3*clhs76 + clhs5*clhs77 - clhs7*clhs74 - clhs78*clhs8;
        const double clhs80 =     clhs11*clhs76 + clhs12*clhs77 - clhs13*clhs74 - clhs14*clhs78;
        const double clhs81 =     clhs79*tangentetaslave(0,0) + clhs80*tangentetaslave(0,1);
        const double clhs82 =     clhs81*penalty_parameter*tangentetaslave(0,0);
        const double clhs83 =     clhs79*tangentxislave(0,0) + clhs80*tangentxislave(0,1);
        const double clhs84 =     clhs83*penalty_parameter*tangentxislave(0,0);
        const double clhs85 =     normalslave(0,0)*(clhs22*clhs76 + clhs23*clhs77 - clhs24*clhs74 - clhs25*clhs78) - normalslave(0,1)*(clhs0 - clhs26*clhs76 - clhs27*clhs77 + clhs28*clhs74 + clhs29*clhs78);
        const double clhs86 =     clhs85*normalslave(0,0)*penalty_parameter;
        const double clhs87 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs88 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs89 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs90 =     normalslave(1,0)*(clhs22*clhs87 + clhs23*clhs88 - clhs24*clhs75 - clhs25*clhs89) - normalslave(1,1)*(-clhs26*clhs87 - clhs27*clhs88 + clhs28*clhs75 + clhs29*clhs89 + clhs33);
        const double clhs91 =     clhs90*normalslave(1,0)*penalty_parameter;
        const double clhs92 =     clhs64*clhs68*clhs71*clhs90*mu[1]*penalty_parameter;
        const double clhs93 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs94 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs95 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs96 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs97 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs98 =     clhs3*clhs95 + clhs5*clhs96 - clhs7*clhs93 - clhs8*clhs97;
        const double clhs99 =     clhs11*clhs95 + clhs12*clhs96 - clhs13*clhs93 - clhs14*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(0,0) + clhs99*tangentetaslave(0,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(0,0);
        const double clhs102 =     clhs98*tangentxislave(0,0) + clhs99*tangentxislave(0,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(0,0);
        const double clhs104 =     normalslave(0,1)*(clhs26*clhs95 + clhs27*clhs96 - clhs28*clhs93 - clhs29*clhs97);
        const double clhs105 =     normalslave(0,0)*(-clhs22*clhs95 - clhs23*clhs96 + clhs24*clhs93 + clhs25*clhs97 + clhs9);
        const double clhs106 =     -clhs104 + clhs105;
        const double clhs107 =     clhs106*normalslave(0,0)*penalty_parameter;
        const double clhs108 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs109 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs110 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs111 =     normalslave(1,1)*(clhs108*clhs26 + clhs109*clhs27 - clhs110*clhs29 - clhs28*clhs94);
        const double clhs112 =     normalslave(1,0)*(-clhs108*clhs22 - clhs109*clhs23 + clhs110*clhs25 + clhs24*clhs94 + clhs38);
        const double clhs113 =     -clhs111 + clhs112;
        const double clhs114 =     clhs113*normalslave(1,0)*penalty_parameter;
        const double clhs115 =     clhs113*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs116 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs117 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs118 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs119 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs120 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs121 =     -clhs116*clhs7 + clhs118*clhs3 + clhs119*clhs5 - clhs120*clhs8;
        const double clhs122 =     clhs11*clhs118 - clhs116*clhs13 + clhs119*clhs12 - clhs120*clhs14;
        const double clhs123 =     clhs121*tangentetaslave(0,0) + clhs122*tangentetaslave(0,1);
        const double clhs124 =     clhs123*penalty_parameter*tangentetaslave(0,0);
        const double clhs125 =     clhs121*tangentxislave(0,0) + clhs122*tangentxislave(0,1);
        const double clhs126 =     clhs125*penalty_parameter*tangentxislave(0,0);
        const double clhs127 =     normalslave(0,0)*(-clhs116*clhs24 + clhs118*clhs22 + clhs119*clhs23 - clhs120*clhs25) - normalslave(0,1)*(clhs116*clhs28 - clhs118*clhs26 - clhs119*clhs27 + clhs120*clhs29 + clhs9);
        const double clhs128 =     clhs127*normalslave(0,0)*penalty_parameter;
        const double clhs129 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs130 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs131 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs132 =     normalslave(1,0)*(-clhs117*clhs24 + clhs129*clhs22 + clhs130*clhs23 - clhs131*clhs25) - normalslave(1,1)*(clhs117*clhs28 - clhs129*clhs26 - clhs130*clhs27 + clhs131*clhs29 + clhs38);
        const double clhs133 =     clhs132*normalslave(1,0)*penalty_parameter;
        const double clhs134 =     clhs132*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs135 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs136 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs137 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs138 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs139 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs140 =     -clhs135*clhs7 + clhs137*clhs3 + clhs138*clhs5 - clhs139*clhs8;
        const double clhs141 =     clhs11*clhs137 + clhs12*clhs138 - clhs13*clhs135 - clhs139*clhs14;
        const double clhs142 =     clhs140*tangentetaslave(0,0) + clhs141*tangentetaslave(0,1);
        const double clhs143 =     clhs142*penalty_parameter*tangentetaslave(0,0);
        const double clhs144 =     clhs140*tangentxislave(0,0) + clhs141*tangentxislave(0,1);
        const double clhs145 =     clhs144*penalty_parameter*tangentxislave(0,0);
        const double clhs146 =     normalslave(0,0)*(-clhs135*clhs24 + clhs137*clhs22 + clhs138*clhs23 - clhs139*clhs25 + clhs4) + normalslave(0,1)*(-clhs135*clhs28 + clhs137*clhs26 + clhs138*clhs27 - clhs139*clhs29);
        const double clhs147 =     clhs146*normalslave(0,0)*penalty_parameter;
        const double clhs148 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs150 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs151 =     normalslave(1,0)*(-clhs136*clhs24 + clhs148*clhs22 + clhs149*clhs23 - clhs150*clhs25 + clhs36) + normalslave(1,1)*(-clhs136*clhs28 + clhs148*clhs26 + clhs149*clhs27 - clhs150*clhs29);
        const double clhs152 =     clhs151*normalslave(1,0)*penalty_parameter;
        const double clhs153 =     clhs151*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs154 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs155 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs156 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs157 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs158 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs159 =     -clhs154*clhs7 + clhs156*clhs3 + clhs157*clhs5 - clhs158*clhs8;
        const double clhs160 =     clhs11*clhs156 + clhs12*clhs157 - clhs13*clhs154 - clhs14*clhs158;
        const double clhs161 =     clhs159*tangentetaslave(0,0) + clhs160*tangentetaslave(0,1);
        const double clhs162 =     clhs161*penalty_parameter*tangentetaslave(0,0);
        const double clhs163 =     clhs159*tangentxislave(0,0) + clhs160*tangentxislave(0,1);
        const double clhs164 =     clhs163*penalty_parameter*tangentxislave(0,0);
        const double clhs165 =     normalslave(0,0)*(-clhs154*clhs24 + clhs156*clhs22 + clhs157*clhs23 - clhs158*clhs25) + normalslave(0,1)*(-clhs154*clhs28 + clhs156*clhs26 + clhs157*clhs27 - clhs158*clhs29 + clhs4);
        const double clhs166 =     clhs165*normalslave(0,0)*penalty_parameter;
        const double clhs167 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs168 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs169 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs170 =     normalslave(1,0)*(-clhs155*clhs24 + clhs167*clhs22 + clhs168*clhs23 - clhs169*clhs25) + normalslave(1,1)*(-clhs155*clhs28 + clhs167*clhs26 + clhs168*clhs27 - clhs169*clhs29 + clhs36);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     clhs170*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs173 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs174 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs175 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs176 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs177 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs178 =     -clhs173*clhs7 + clhs175*clhs3 + clhs176*clhs5 - clhs177*clhs8;
        const double clhs179 =     clhs11*clhs175 + clhs12*clhs176 - clhs13*clhs173 - clhs14*clhs177;
        const double clhs180 =     clhs178*tangentetaslave(0,0) + clhs179*tangentetaslave(0,1);
        const double clhs181 =     clhs180*penalty_parameter*tangentetaslave(0,0);
        const double clhs182 =     clhs178*tangentxislave(0,0) + clhs179*tangentxislave(0,1);
        const double clhs183 =     clhs182*penalty_parameter*tangentxislave(0,0);
        const double clhs184 =     normalslave(0,0)*(-clhs173*clhs24 + clhs175*clhs22 + clhs176*clhs23 - clhs177*clhs25 + clhs6) + normalslave(0,1)*(-clhs173*clhs28 + clhs175*clhs26 + clhs176*clhs27 - clhs177*clhs29);
        const double clhs185 =     clhs184*normalslave(0,0)*penalty_parameter;
        const double clhs186 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs187 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs188 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs189 =     normalslave(1,0)*(-clhs174*clhs24 + clhs186*clhs22 + clhs187*clhs23 - clhs188*clhs25 + clhs37) + normalslave(1,1)*(-clhs174*clhs28 + clhs186*clhs26 + clhs187*clhs27 - clhs188*clhs29);
        const double clhs190 =     clhs189*normalslave(1,0)*penalty_parameter;
        const double clhs191 =     clhs189*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs192 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs193 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs194 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs195 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs196 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs197 =     -clhs192*clhs7 + clhs194*clhs3 + clhs195*clhs5 - clhs196*clhs8;
        const double clhs198 =     clhs11*clhs194 + clhs12*clhs195 - clhs13*clhs192 - clhs14*clhs196;
        const double clhs199 =     clhs197*tangentetaslave(0,0) + clhs198*tangentetaslave(0,1);
        const double clhs200 =     clhs199*penalty_parameter*tangentetaslave(0,0);
        const double clhs201 =     clhs197*tangentxislave(0,0) + clhs198*tangentxislave(0,1);
        const double clhs202 =     clhs201*penalty_parameter*tangentxislave(0,0);
        const double clhs203 =     normalslave(0,0)*(-clhs192*clhs24 + clhs194*clhs22 + clhs195*clhs23 - clhs196*clhs25) + normalslave(0,1)*(-clhs192*clhs28 + clhs194*clhs26 + clhs195*clhs27 - clhs196*clhs29 + clhs6);
        const double clhs204 =     clhs203*normalslave(0,0)*penalty_parameter;
        const double clhs205 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs206 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs207 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs208 =     normalslave(1,0)*(-clhs193*clhs24 + clhs205*clhs22 + clhs206*clhs23 - clhs207*clhs25) + normalslave(1,1)*(-clhs193*clhs28 + clhs205*clhs26 + clhs206*clhs27 - clhs207*clhs29 + clhs37);
        const double clhs209 =     clhs208*normalslave(1,0)*penalty_parameter;
        const double clhs210 =     clhs208*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs211 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs212 =     std::pow(tangentetaslave(0,0), 2);
        const double clhs213 =     clhs212*scale_factor;
        const double clhs214 =     std::pow(tangentxislave(0,0), 2);
        const double clhs215 =     clhs214*scale_factor;
        const double clhs216 =     std::pow(clhs67, -3.0L/2.0L);
        const double clhs217 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs218 =     clhs217*clhs66 + clhs65*(clhs212 + clhs214);
        const double clhs219 =     clhs216*clhs218*clhs40*clhs64*clhs71*mu[1];
        const double clhs220 =     normalslave(0,0)*normalslave(0,1)*scale_factor;
        const double clhs221 =     scale_factor*tangentetaslave(0,0)*tangentetaslave(0,1);
        const double clhs222 =     scale_factor*tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs223 =     clhs0*clhs220 + clhs0*clhs221 + clhs0*clhs222;
        const double clhs224 =     std::pow(tangentetaslave(0,1), 2);
        const double clhs225 =     std::pow(tangentxislave(0,1), 2);
        const double clhs226 =     clhs217*clhs65 + clhs66*(clhs224 + clhs225);
        const double clhs227 =     clhs216*clhs226*clhs40*clhs64*clhs71*mu[1];
        const double clhs228 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs229 =     clhs68*clhs71*mu[1]*normalslave(1,0)*scale_factor;
        const double clhs230 =     clhs229*clhs64;
        const double clhs231 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs232 =     clhs231*clhs68*clhs71*mu[1];
        const double clhs233 =     clhs35 - clhs39;
        const double clhs234 =     clhs231*clhs64;
        const double clhs235 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs236 =     clhs235*clhs69;
        const double clhs237 =     clhs234 + clhs236;
        const double clhs238 =     std::pow(clhs70, -3.0L/2.0L);
        const double clhs239 =     clhs233*clhs238*clhs64*clhs68*mu[1];
        const double clhs240 =     clhs228 - clhs230 - clhs232*clhs233 + clhs237*clhs239;
        const double clhs241 =     normalslave(1,1)*(normalslave(1,0)*scale_factor);
        const double clhs242 =     clhs235*clhs68*clhs71*mu[1];
        const double clhs243 =     -clhs233*clhs242 + clhs241;
        const double clhs244 =     clhs68*clhs71*mu[1]*normalslave(1,1)*scale_factor;
        const double clhs245 =     clhs244*clhs64;
        const double clhs246 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs247 =     clhs246*clhs69;
        const double clhs248 =     clhs235*clhs64;
        const double clhs249 =     clhs247 + clhs248;
        const double clhs250 =     clhs239*clhs249 + clhs243 - clhs245;
        const double clhs251 =     clhs16*tangentetaslave(0,1);
        const double clhs252 =     clhs19*tangentxislave(0,1);
        const double clhs253 =     clhs31*normalslave(0,1);
        const double clhs254 =     clhs40*normalslave(1,1);
        const double clhs255 =     clhs47*penalty_parameter*tangentetaslave(0,1);
        const double clhs256 =     clhs49*penalty_parameter*tangentxislave(0,1);
        const double clhs257 =     clhs53*normalslave(0,1)*penalty_parameter;
        const double clhs258 =     clhs60*normalslave(1,1)*penalty_parameter;
        const double clhs259 =     clhs40*clhs68*clhs69*clhs71*mu[1];
        const double clhs260 =     clhs60*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs261 =     clhs81*penalty_parameter*tangentetaslave(0,1);
        const double clhs262 =     clhs83*penalty_parameter*tangentxislave(0,1);
        const double clhs263 =     clhs85*normalslave(0,1)*penalty_parameter;
        const double clhs264 =     clhs90*normalslave(1,1)*penalty_parameter;
        const double clhs265 =     clhs68*clhs69*clhs71*clhs90*mu[1]*penalty_parameter;
        const double clhs266 =     clhs100*penalty_parameter*tangentetaslave(0,1);
        const double clhs267 =     clhs102*penalty_parameter*tangentxislave(0,1);
        const double clhs268 =     clhs106*normalslave(0,1)*penalty_parameter;
        const double clhs269 =     clhs113*normalslave(1,1)*penalty_parameter;
        const double clhs270 =     clhs113*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs271 =     clhs123*penalty_parameter*tangentetaslave(0,1);
        const double clhs272 =     clhs125*penalty_parameter*tangentxislave(0,1);
        const double clhs273 =     clhs127*normalslave(0,1)*penalty_parameter;
        const double clhs274 =     clhs132*normalslave(1,1)*penalty_parameter;
        const double clhs275 =     clhs132*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs276 =     clhs142*penalty_parameter*tangentetaslave(0,1);
        const double clhs277 =     clhs144*penalty_parameter*tangentxislave(0,1);
        const double clhs278 =     clhs146*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs151*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs151*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs281 =     clhs161*penalty_parameter*tangentetaslave(0,1);
        const double clhs282 =     clhs163*penalty_parameter*tangentxislave(0,1);
        const double clhs283 =     clhs165*normalslave(0,1)*penalty_parameter;
        const double clhs284 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs285 =     clhs170*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs286 =     clhs180*penalty_parameter*tangentetaslave(0,1);
        const double clhs287 =     clhs182*penalty_parameter*tangentxislave(0,1);
        const double clhs288 =     clhs184*normalslave(0,1)*penalty_parameter;
        const double clhs289 =     clhs189*normalslave(1,1)*penalty_parameter;
        const double clhs290 =     clhs189*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs291 =     clhs199*penalty_parameter*tangentetaslave(0,1);
        const double clhs292 =     clhs201*penalty_parameter*tangentxislave(0,1);
        const double clhs293 =     clhs203*normalslave(0,1)*penalty_parameter;
        const double clhs294 =     clhs208*normalslave(1,1)*penalty_parameter;
        const double clhs295 =     clhs208*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs296 =     clhs216*clhs218*clhs40*clhs69*clhs71*mu[1];
        const double clhs297 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs298 =     clhs224*scale_factor;
        const double clhs299 =     clhs225*scale_factor;
        const double clhs300 =     clhs216*clhs226*clhs40*clhs69*clhs71*mu[1];
        const double clhs301 =     clhs229*clhs69;
        const double clhs302 =     clhs233*clhs238*clhs68*clhs69*mu[1];
        const double clhs303 =     clhs237*clhs302 + clhs243 - clhs301;
        const double clhs304 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs305 =     clhs244*clhs69;
        const double clhs306 =     clhs246*clhs68*clhs71*mu[1];
        const double clhs307 =     -clhs233*clhs306 + clhs249*clhs302 + clhs304 - clhs305;
        const double clhs308 =     clhs220*clhs9 + clhs221*clhs9 + clhs222*clhs9;
        const double clhs309 =     clhs21 - clhs30;
        const double clhs310 =     clhs309*normalslave(0,0);
        const double clhs311 =     clhs233*normalslave(1,0);
        const double clhs312 =     clhs51 - clhs52;
        const double clhs313 =     clhs312*normalslave(0,0)*penalty_parameter;
        const double clhs314 =     clhs58 - clhs59;
        const double clhs315 =     clhs314*normalslave(1,0)*penalty_parameter;
        const double clhs316 =     clhs233*clhs64*clhs68*clhs71*mu[1];
        const double clhs317 =     clhs314*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs318 =     clhs104 - clhs105;
        const double clhs319 =     clhs318*normalslave(0,0)*penalty_parameter;
        const double clhs320 =     clhs111 - clhs112;
        const double clhs321 =     clhs320*normalslave(1,0)*penalty_parameter;
        const double clhs322 =     clhs320*clhs64*clhs68*clhs71*mu[1]*penalty_parameter;
        const double clhs323 =     clhs216*clhs218*clhs233*clhs64*clhs71*mu[1];
        const double clhs324 =     clhs220*clhs4 + clhs221*clhs4 + clhs222*clhs4;
        const double clhs325 =     clhs216*clhs226*clhs233*clhs64*clhs71*mu[1];
        const double clhs326 =     clhs238*clhs40*clhs64*clhs68*mu[1];
        const double clhs327 =     clhs230 - clhs232*clhs40 + clhs237*clhs326;
        const double clhs328 =     -clhs228 + clhs327;
        const double clhs329 =     -clhs242*clhs40;
        const double clhs330 =     -clhs241 + clhs329;
        const double clhs331 =     clhs245 + clhs249*clhs326;
        const double clhs332 =     clhs330 + clhs331;
        const double clhs333 =     clhs309*normalslave(0,1);
        const double clhs334 =     clhs233*normalslave(1,1);
        const double clhs335 =     clhs312*normalslave(0,1)*penalty_parameter;
        const double clhs336 =     clhs314*normalslave(1,1)*penalty_parameter;
        const double clhs337 =     clhs233*clhs68*clhs69*clhs71*mu[1];
        const double clhs338 =     clhs314*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs339 =     clhs318*normalslave(0,1)*penalty_parameter;
        const double clhs340 =     clhs320*normalslave(1,1)*penalty_parameter;
        const double clhs341 =     clhs320*clhs68*clhs69*clhs71*mu[1]*penalty_parameter;
        const double clhs342 =     clhs216*clhs218*clhs233*clhs69*clhs71*mu[1];
        const double clhs343 =     clhs216*clhs226*clhs233*clhs69*clhs71*mu[1];
        const double clhs344 =     clhs238*clhs40*clhs68*clhs69*mu[1];
        const double clhs345 =     clhs237*clhs344 + clhs301;
        const double clhs346 =     clhs330 + clhs345;
        const double clhs347 =     clhs249*clhs344 + clhs305 - clhs306*clhs40;
        const double clhs348 =     -clhs304 + clhs347;
        const double clhs349 =     clhs220*clhs6 + clhs221*clhs6 + clhs222*clhs6;
        const double clhs350 =     clhs314*scale_factor;
        const double clhs351 =     0.5*clhs68*clhs71*mu[1];
        const double clhs352 =     -clhs234*clhs351 - clhs236*clhs351 + normalslave(1,0);
        const double clhs353 =     clhs90*scale_factor;
        const double clhs354 =     clhs320*scale_factor;
        const double clhs355 =     clhs132*scale_factor;
        const double clhs356 =     clhs151*scale_factor;
        const double clhs357 =     clhs170*scale_factor;
        const double clhs358 =     clhs189*scale_factor;
        const double clhs359 =     clhs208*scale_factor;
        const double clhs360 =     1.0/penalty_parameter;
        const double clhs361 =     0.5*clhs216*clhs218*clhs233*clhs360*clhs71*mu[1]*scale_factor;
        const double clhs362 =     0.5*clhs216*clhs226*clhs233*clhs360*clhs71*mu[1]*scale_factor;
        const double clhs363 =     0.5*clhs360*scale_factor;
        const double clhs364 =     clhs231*scale_factor + clhs327;
        const double clhs365 =     clhs235*scale_factor + clhs329;
        const double clhs366 =     clhs345 + clhs365;
        const double clhs367 =     clhs331 + clhs365;
        const double clhs368 =     clhs246*scale_factor + clhs347;
        const double clhs369 =     -clhs247*clhs351 - clhs248*clhs351 + normalslave(1,1);
    
        lhs(0,0)=clhs0*clhs48 + clhs0*clhs50 + clhs0*clhs54 + clhs1*clhs17 + clhs1*clhs20 - clhs1*clhs32 + clhs33*clhs61 - clhs33*clhs73 - clhs34*clhs41 + clhs34*clhs72;
        lhs(0,1)=clhs0*clhs82 + clhs0*clhs84 - clhs0*clhs86 + clhs17*clhs74 + clhs20*clhs74 - clhs32*clhs74 - clhs33*clhs91 + clhs33*clhs92 - clhs41*clhs75 + clhs72*clhs75;
        lhs(0,2)=clhs0*clhs101 + clhs0*clhs103 + clhs0*clhs107 + clhs114*clhs33 - clhs115*clhs33 + clhs17*clhs93 + clhs20*clhs93 - clhs32*clhs93 - clhs41*clhs94 + clhs72*clhs94;
        lhs(0,3)=clhs0*clhs124 + clhs0*clhs126 - clhs0*clhs128 + clhs116*clhs17 + clhs116*clhs20 - clhs116*clhs32 - clhs117*clhs41 + clhs117*clhs72 - clhs133*clhs33 + clhs134*clhs33;
        lhs(0,4)=clhs0*clhs143 + clhs0*clhs145 - clhs0*clhs147 + clhs135*clhs17 + clhs135*clhs20 - clhs135*clhs32 - clhs136*clhs41 + clhs136*clhs72 - clhs152*clhs33 + clhs153*clhs33;
        lhs(0,5)=clhs0*clhs162 + clhs0*clhs164 - clhs0*clhs166 + clhs154*clhs17 + clhs154*clhs20 - clhs154*clhs32 - clhs155*clhs41 + clhs155*clhs72 - clhs171*clhs33 + clhs172*clhs33;
        lhs(0,6)=clhs0*clhs181 + clhs0*clhs183 - clhs0*clhs185 + clhs17*clhs173 + clhs173*clhs20 - clhs173*clhs32 - clhs174*clhs41 + clhs174*clhs72 - clhs190*clhs33 + clhs191*clhs33;
        lhs(0,7)=clhs0*clhs200 + clhs0*clhs202 - clhs0*clhs204 + clhs17*clhs192 + clhs192*clhs20 - clhs192*clhs32 - clhs193*clhs41 + clhs193*clhs72 - clhs209*clhs33 + clhs210*clhs33;
        lhs(0,8)=clhs0*clhs211 + clhs0*clhs213 + clhs0*clhs215 - clhs219*clhs33;
        lhs(0,9)=clhs223 - clhs227*clhs33;
        lhs(0,10)=clhs240*clhs33;
        lhs(0,11)=clhs250*clhs33;
        lhs(1,0)=clhs0*clhs255 + clhs0*clhs256 + clhs0*clhs257 + clhs1*clhs251 + clhs1*clhs252 - clhs1*clhs253 - clhs254*clhs34 + clhs258*clhs33 + clhs259*clhs34 - clhs260*clhs33;
        lhs(1,1)=clhs0*clhs261 + clhs0*clhs262 - clhs0*clhs263 + clhs251*clhs74 + clhs252*clhs74 - clhs253*clhs74 - clhs254*clhs75 + clhs259*clhs75 - clhs264*clhs33 + clhs265*clhs33;
        lhs(1,2)=clhs0*clhs266 + clhs0*clhs267 + clhs0*clhs268 + clhs251*clhs93 + clhs252*clhs93 - clhs253*clhs93 - clhs254*clhs94 + clhs259*clhs94 + clhs269*clhs33 - clhs270*clhs33;
        lhs(1,3)=clhs0*clhs271 + clhs0*clhs272 - clhs0*clhs273 + clhs116*clhs251 + clhs116*clhs252 - clhs116*clhs253 - clhs117*clhs254 + clhs117*clhs259 - clhs274*clhs33 + clhs275*clhs33;
        lhs(1,4)=clhs0*clhs276 + clhs0*clhs277 - clhs0*clhs278 + clhs135*clhs251 + clhs135*clhs252 - clhs135*clhs253 - clhs136*clhs254 + clhs136*clhs259 - clhs279*clhs33 + clhs280*clhs33;
        lhs(1,5)=clhs0*clhs281 + clhs0*clhs282 - clhs0*clhs283 + clhs154*clhs251 + clhs154*clhs252 - clhs154*clhs253 - clhs155*clhs254 + clhs155*clhs259 - clhs284*clhs33 + clhs285*clhs33;
        lhs(1,6)=clhs0*clhs286 + clhs0*clhs287 - clhs0*clhs288 + clhs173*clhs251 + clhs173*clhs252 - clhs173*clhs253 - clhs174*clhs254 + clhs174*clhs259 - clhs289*clhs33 + clhs290*clhs33;
        lhs(1,7)=clhs0*clhs291 + clhs0*clhs292 - clhs0*clhs293 + clhs192*clhs251 + clhs192*clhs252 - clhs192*clhs253 - clhs193*clhs254 + clhs193*clhs259 - clhs294*clhs33 + clhs295*clhs33;
        lhs(1,8)=clhs223 - clhs296*clhs33;
        lhs(1,9)=clhs0*clhs297 + clhs0*clhs298 + clhs0*clhs299 - clhs300*clhs33;
        lhs(1,10)=clhs303*clhs33;
        lhs(1,11)=clhs307*clhs33;
        lhs(2,0)=clhs17*clhs44 + clhs20*clhs44 - clhs32*clhs44 + clhs38*clhs61 - clhs38*clhs73 - clhs41*clhs57 + clhs48*clhs9 + clhs50*clhs9 + clhs54*clhs9 + clhs57*clhs72;
        lhs(2,1)=clhs17*clhs78 + clhs20*clhs78 - clhs32*clhs78 - clhs38*clhs91 + clhs38*clhs92 - clhs41*clhs89 + clhs72*clhs89 + clhs82*clhs9 + clhs84*clhs9 - clhs86*clhs9;
        lhs(2,2)=clhs101*clhs9 + clhs103*clhs9 + clhs107*clhs9 - clhs110*clhs41 + clhs110*clhs72 + clhs114*clhs38 - clhs115*clhs38 + clhs17*clhs97 + clhs20*clhs97 - clhs32*clhs97;
        lhs(2,3)=clhs120*clhs17 + clhs120*clhs20 - clhs120*clhs32 + clhs124*clhs9 + clhs126*clhs9 - clhs128*clhs9 - clhs131*clhs41 + clhs131*clhs72 - clhs133*clhs38 + clhs134*clhs38;
        lhs(2,4)=clhs139*clhs17 + clhs139*clhs20 - clhs139*clhs32 + clhs143*clhs9 + clhs145*clhs9 - clhs147*clhs9 - clhs150*clhs41 + clhs150*clhs72 - clhs152*clhs38 + clhs153*clhs38;
        lhs(2,5)=clhs158*clhs17 + clhs158*clhs20 - clhs158*clhs32 + clhs162*clhs9 + clhs164*clhs9 - clhs166*clhs9 - clhs169*clhs41 + clhs169*clhs72 - clhs171*clhs38 + clhs172*clhs38;
        lhs(2,6)=clhs17*clhs177 + clhs177*clhs20 - clhs177*clhs32 + clhs181*clhs9 + clhs183*clhs9 - clhs185*clhs9 - clhs188*clhs41 + clhs188*clhs72 - clhs190*clhs38 + clhs191*clhs38;
        lhs(2,7)=clhs17*clhs196 + clhs196*clhs20 - clhs196*clhs32 + clhs200*clhs9 + clhs202*clhs9 - clhs204*clhs9 - clhs207*clhs41 + clhs207*clhs72 - clhs209*clhs38 + clhs210*clhs38;
        lhs(2,8)=clhs211*clhs9 + clhs213*clhs9 + clhs215*clhs9 - clhs219*clhs38;
        lhs(2,9)=-clhs227*clhs38 + clhs308;
        lhs(2,10)=clhs240*clhs38;
        lhs(2,11)=clhs250*clhs38;
        lhs(3,0)=clhs251*clhs44 + clhs252*clhs44 - clhs253*clhs44 - clhs254*clhs57 + clhs255*clhs9 + clhs256*clhs9 + clhs257*clhs9 + clhs258*clhs38 + clhs259*clhs57 - clhs260*clhs38;
        lhs(3,1)=clhs251*clhs78 + clhs252*clhs78 - clhs253*clhs78 - clhs254*clhs89 + clhs259*clhs89 + clhs261*clhs9 + clhs262*clhs9 - clhs263*clhs9 - clhs264*clhs38 + clhs265*clhs38;
        lhs(3,2)=-clhs110*clhs254 + clhs110*clhs259 + clhs251*clhs97 + clhs252*clhs97 - clhs253*clhs97 + clhs266*clhs9 + clhs267*clhs9 + clhs268*clhs9 + clhs269*clhs38 - clhs270*clhs38;
        lhs(3,3)=clhs120*clhs251 + clhs120*clhs252 - clhs120*clhs253 - clhs131*clhs254 + clhs131*clhs259 + clhs271*clhs9 + clhs272*clhs9 - clhs273*clhs9 - clhs274*clhs38 + clhs275*clhs38;
        lhs(3,4)=clhs139*clhs251 + clhs139*clhs252 - clhs139*clhs253 - clhs150*clhs254 + clhs150*clhs259 + clhs276*clhs9 + clhs277*clhs9 - clhs278*clhs9 - clhs279*clhs38 + clhs280*clhs38;
        lhs(3,5)=clhs158*clhs251 + clhs158*clhs252 - clhs158*clhs253 - clhs169*clhs254 + clhs169*clhs259 + clhs281*clhs9 + clhs282*clhs9 - clhs283*clhs9 - clhs284*clhs38 + clhs285*clhs38;
        lhs(3,6)=clhs177*clhs251 + clhs177*clhs252 - clhs177*clhs253 - clhs188*clhs254 + clhs188*clhs259 + clhs286*clhs9 + clhs287*clhs9 - clhs288*clhs9 - clhs289*clhs38 + clhs290*clhs38;
        lhs(3,7)=clhs196*clhs251 + clhs196*clhs252 - clhs196*clhs253 - clhs207*clhs254 + clhs207*clhs259 + clhs291*clhs9 + clhs292*clhs9 - clhs293*clhs9 - clhs294*clhs38 + clhs295*clhs38;
        lhs(3,8)=-clhs296*clhs38 + clhs308;
        lhs(3,9)=clhs297*clhs9 + clhs298*clhs9 + clhs299*clhs9 - clhs300*clhs38;
        lhs(3,10)=clhs303*clhs38;
        lhs(3,11)=clhs307*clhs38;
        lhs(4,0)=-clhs17*clhs42 - clhs20*clhs42 - clhs310*clhs42 - clhs311*clhs55 + clhs313*clhs4 + clhs315*clhs36 + clhs316*clhs55 - clhs317*clhs36 - clhs4*clhs48 - clhs4*clhs50;
        lhs(4,1)=-clhs17*clhs76 - clhs20*clhs76 - clhs310*clhs76 - clhs311*clhs87 + clhs316*clhs87 + clhs36*clhs91 - clhs36*clhs92 - clhs4*clhs82 - clhs4*clhs84 + clhs4*clhs86;
        lhs(4,2)=-clhs101*clhs4 - clhs103*clhs4 - clhs108*clhs311 + clhs108*clhs316 - clhs17*clhs95 - clhs20*clhs95 - clhs310*clhs95 + clhs319*clhs4 + clhs321*clhs36 - clhs322*clhs36;
        lhs(4,3)=-clhs118*clhs17 - clhs118*clhs20 - clhs118*clhs310 - clhs124*clhs4 - clhs126*clhs4 + clhs128*clhs4 - clhs129*clhs311 + clhs129*clhs316 + clhs133*clhs36 - clhs134*clhs36;
        lhs(4,4)=-clhs137*clhs17 - clhs137*clhs20 - clhs137*clhs310 - clhs143*clhs4 - clhs145*clhs4 + clhs147*clhs4 - clhs148*clhs311 + clhs148*clhs316 + clhs152*clhs36 - clhs153*clhs36;
        lhs(4,5)=-clhs156*clhs17 - clhs156*clhs20 - clhs156*clhs310 - clhs162*clhs4 - clhs164*clhs4 + clhs166*clhs4 - clhs167*clhs311 + clhs167*clhs316 + clhs171*clhs36 - clhs172*clhs36;
        lhs(4,6)=-clhs17*clhs175 - clhs175*clhs20 - clhs175*clhs310 - clhs181*clhs4 - clhs183*clhs4 + clhs185*clhs4 - clhs186*clhs311 + clhs186*clhs316 + clhs190*clhs36 - clhs191*clhs36;
        lhs(4,7)=-clhs17*clhs194 - clhs194*clhs20 - clhs194*clhs310 - clhs200*clhs4 - clhs202*clhs4 + clhs204*clhs4 - clhs205*clhs311 + clhs205*clhs316 + clhs209*clhs36 - clhs210*clhs36;
        lhs(4,8)=-clhs211*clhs4 - clhs213*clhs4 - clhs215*clhs4 - clhs323*clhs36;
        lhs(4,9)=-clhs324 - clhs325*clhs36;
        lhs(4,10)=clhs328*clhs36;
        lhs(4,11)=clhs332*clhs36;
        lhs(5,0)=-clhs251*clhs42 - clhs252*clhs42 - clhs255*clhs4 - clhs256*clhs4 - clhs333*clhs42 - clhs334*clhs55 + clhs335*clhs4 + clhs336*clhs36 + clhs337*clhs55 - clhs338*clhs36;
        lhs(5,1)=-clhs251*clhs76 - clhs252*clhs76 - clhs261*clhs4 - clhs262*clhs4 + clhs263*clhs4 + clhs264*clhs36 - clhs265*clhs36 - clhs333*clhs76 - clhs334*clhs87 + clhs337*clhs87;
        lhs(5,2)=-clhs108*clhs334 + clhs108*clhs337 - clhs251*clhs95 - clhs252*clhs95 - clhs266*clhs4 - clhs267*clhs4 - clhs333*clhs95 + clhs339*clhs4 + clhs340*clhs36 - clhs341*clhs36;
        lhs(5,3)=-clhs118*clhs251 - clhs118*clhs252 - clhs118*clhs333 - clhs129*clhs334 + clhs129*clhs337 - clhs271*clhs4 - clhs272*clhs4 + clhs273*clhs4 + clhs274*clhs36 - clhs275*clhs36;
        lhs(5,4)=-clhs137*clhs251 - clhs137*clhs252 - clhs137*clhs333 - clhs148*clhs334 + clhs148*clhs337 - clhs276*clhs4 - clhs277*clhs4 + clhs278*clhs4 + clhs279*clhs36 - clhs280*clhs36;
        lhs(5,5)=-clhs156*clhs251 - clhs156*clhs252 - clhs156*clhs333 - clhs167*clhs334 + clhs167*clhs337 - clhs281*clhs4 - clhs282*clhs4 + clhs283*clhs4 + clhs284*clhs36 - clhs285*clhs36;
        lhs(5,6)=-clhs175*clhs251 - clhs175*clhs252 - clhs175*clhs333 - clhs186*clhs334 + clhs186*clhs337 - clhs286*clhs4 - clhs287*clhs4 + clhs288*clhs4 + clhs289*clhs36 - clhs290*clhs36;
        lhs(5,7)=-clhs194*clhs251 - clhs194*clhs252 - clhs194*clhs333 - clhs205*clhs334 + clhs205*clhs337 - clhs291*clhs4 - clhs292*clhs4 + clhs293*clhs4 + clhs294*clhs36 - clhs295*clhs36;
        lhs(5,8)=-clhs324 - clhs342*clhs36;
        lhs(5,9)=-clhs297*clhs4 - clhs298*clhs4 - clhs299*clhs4 - clhs343*clhs36;
        lhs(5,10)=clhs346*clhs36;
        lhs(5,11)=clhs348*clhs36;
        lhs(6,0)=-clhs17*clhs43 - clhs20*clhs43 - clhs310*clhs43 - clhs311*clhs56 + clhs313*clhs6 + clhs315*clhs37 + clhs316*clhs56 - clhs317*clhs37 - clhs48*clhs6 - clhs50*clhs6;
        lhs(6,1)=-clhs17*clhs77 - clhs20*clhs77 - clhs310*clhs77 - clhs311*clhs88 + clhs316*clhs88 + clhs37*clhs91 - clhs37*clhs92 - clhs6*clhs82 - clhs6*clhs84 + clhs6*clhs86;
        lhs(6,2)=-clhs101*clhs6 - clhs103*clhs6 - clhs109*clhs311 + clhs109*clhs316 - clhs17*clhs96 - clhs20*clhs96 - clhs310*clhs96 + clhs319*clhs6 + clhs321*clhs37 - clhs322*clhs37;
        lhs(6,3)=-clhs119*clhs17 - clhs119*clhs20 - clhs119*clhs310 - clhs124*clhs6 - clhs126*clhs6 + clhs128*clhs6 - clhs130*clhs311 + clhs130*clhs316 + clhs133*clhs37 - clhs134*clhs37;
        lhs(6,4)=-clhs138*clhs17 - clhs138*clhs20 - clhs138*clhs310 - clhs143*clhs6 - clhs145*clhs6 + clhs147*clhs6 - clhs149*clhs311 + clhs149*clhs316 + clhs152*clhs37 - clhs153*clhs37;
        lhs(6,5)=-clhs157*clhs17 - clhs157*clhs20 - clhs157*clhs310 - clhs162*clhs6 - clhs164*clhs6 + clhs166*clhs6 - clhs168*clhs311 + clhs168*clhs316 + clhs171*clhs37 - clhs172*clhs37;
        lhs(6,6)=-clhs17*clhs176 - clhs176*clhs20 - clhs176*clhs310 - clhs181*clhs6 - clhs183*clhs6 + clhs185*clhs6 - clhs187*clhs311 + clhs187*clhs316 + clhs190*clhs37 - clhs191*clhs37;
        lhs(6,7)=-clhs17*clhs195 - clhs195*clhs20 - clhs195*clhs310 - clhs200*clhs6 - clhs202*clhs6 + clhs204*clhs6 - clhs206*clhs311 + clhs206*clhs316 + clhs209*clhs37 - clhs210*clhs37;
        lhs(6,8)=-clhs211*clhs6 - clhs213*clhs6 - clhs215*clhs6 - clhs323*clhs37;
        lhs(6,9)=-clhs325*clhs37 - clhs349;
        lhs(6,10)=clhs328*clhs37;
        lhs(6,11)=clhs332*clhs37;
        lhs(7,0)=-clhs251*clhs43 - clhs252*clhs43 - clhs255*clhs6 - clhs256*clhs6 - clhs333*clhs43 - clhs334*clhs56 + clhs335*clhs6 + clhs336*clhs37 + clhs337*clhs56 - clhs338*clhs37;
        lhs(7,1)=-clhs251*clhs77 - clhs252*clhs77 - clhs261*clhs6 - clhs262*clhs6 + clhs263*clhs6 + clhs264*clhs37 - clhs265*clhs37 - clhs333*clhs77 - clhs334*clhs88 + clhs337*clhs88;
        lhs(7,2)=-clhs109*clhs334 + clhs109*clhs337 - clhs251*clhs96 - clhs252*clhs96 - clhs266*clhs6 - clhs267*clhs6 - clhs333*clhs96 + clhs339*clhs6 + clhs340*clhs37 - clhs341*clhs37;
        lhs(7,3)=-clhs119*clhs251 - clhs119*clhs252 - clhs119*clhs333 - clhs130*clhs334 + clhs130*clhs337 - clhs271*clhs6 - clhs272*clhs6 + clhs273*clhs6 + clhs274*clhs37 - clhs275*clhs37;
        lhs(7,4)=-clhs138*clhs251 - clhs138*clhs252 - clhs138*clhs333 - clhs149*clhs334 + clhs149*clhs337 - clhs276*clhs6 - clhs277*clhs6 + clhs278*clhs6 + clhs279*clhs37 - clhs280*clhs37;
        lhs(7,5)=-clhs157*clhs251 - clhs157*clhs252 - clhs157*clhs333 - clhs168*clhs334 + clhs168*clhs337 - clhs281*clhs6 - clhs282*clhs6 + clhs283*clhs6 + clhs284*clhs37 - clhs285*clhs37;
        lhs(7,6)=-clhs176*clhs251 - clhs176*clhs252 - clhs176*clhs333 - clhs187*clhs334 + clhs187*clhs337 - clhs286*clhs6 - clhs287*clhs6 + clhs288*clhs6 + clhs289*clhs37 - clhs290*clhs37;
        lhs(7,7)=-clhs195*clhs251 - clhs195*clhs252 - clhs195*clhs333 - clhs206*clhs334 + clhs206*clhs337 - clhs291*clhs6 - clhs292*clhs6 + clhs293*clhs6 + clhs294*clhs37 - clhs295*clhs37;
        lhs(7,8)=-clhs342*clhs37 - clhs349;
        lhs(7,9)=-clhs297*clhs6 - clhs298*clhs6 - clhs299*clhs6 - clhs343*clhs37;
        lhs(7,10)=clhs346*clhs37;
        lhs(7,11)=clhs348*clhs37;
        lhs(8,0)=scale_factor*(clhs312*normalslave(0,0) - clhs47*tangentetaslave(0,0) - clhs49*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs81*tangentetaslave(0,0) - clhs83*tangentxislave(0,0) + clhs85*normalslave(0,0));
        lhs(8,2)=scale_factor*(-clhs100*tangentetaslave(0,0) - clhs102*tangentxislave(0,0) + clhs318*normalslave(0,0));
        lhs(8,3)=scale_factor*(-clhs123*tangentetaslave(0,0) - clhs125*tangentxislave(0,0) + clhs127*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs142*tangentetaslave(0,0) - clhs144*tangentxislave(0,0) + clhs146*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs161*tangentetaslave(0,0) - clhs163*tangentxislave(0,0) + clhs165*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs180*tangentetaslave(0,0) - clhs182*tangentxislave(0,0) + clhs184*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs199*tangentetaslave(0,0) - clhs201*tangentxislave(0,0) + clhs203*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs312*normalslave(0,1) - clhs47*tangentetaslave(0,1) - clhs49*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs81*tangentetaslave(0,1) - clhs83*tangentxislave(0,1) + clhs85*normalslave(0,1));
        lhs(9,2)=scale_factor*(-clhs100*tangentetaslave(0,1) - clhs102*tangentxislave(0,1) + clhs318*normalslave(0,1));
        lhs(9,3)=scale_factor*(-clhs123*tangentetaslave(0,1) - clhs125*tangentxislave(0,1) + clhs127*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs142*tangentetaslave(0,1) - clhs144*tangentxislave(0,1) + clhs146*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs161*tangentetaslave(0,1) - clhs163*tangentxislave(0,1) + clhs165*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs180*tangentetaslave(0,1) - clhs182*tangentxislave(0,1) + clhs184*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs199*tangentetaslave(0,1) - clhs201*tangentxislave(0,1) + clhs203*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=clhs350*clhs352;
        lhs(10,1)=clhs352*clhs353;
        lhs(10,2)=clhs352*clhs354;
        lhs(10,3)=clhs352*clhs355;
        lhs(10,4)=clhs352*clhs356;
        lhs(10,5)=clhs352*clhs357;
        lhs(10,6)=clhs352*clhs358;
        lhs(10,7)=clhs352*clhs359;
        lhs(10,8)=-clhs237*clhs361;
        lhs(10,9)=-clhs237*clhs362;
        lhs(10,10)=clhs363*(clhs231*clhs364 + clhs235*clhs366);
        lhs(10,11)=clhs363*(clhs231*clhs367 + clhs235*clhs368);
        lhs(11,0)=clhs350*clhs369;
        lhs(11,1)=clhs353*clhs369;
        lhs(11,2)=clhs354*clhs369;
        lhs(11,3)=clhs355*clhs369;
        lhs(11,4)=clhs356*clhs369;
        lhs(11,5)=clhs357*clhs369;
        lhs(11,6)=clhs358*clhs369;
        lhs(11,7)=clhs359*clhs369;
        lhs(11,8)=-clhs249*clhs361;
        lhs(11,9)=-clhs249*clhs362;
        lhs(11,10)=clhs363*(clhs235*clhs364 + clhs246*clhs366);
        lhs(11,11)=clhs363*(clhs235*clhs367 + clhs246*clhs368);
    }
    else if (rActiveInactive == 6 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(1,1) + clhs9*tangentetaslave(1,0)) + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double clhs16 =     clhs15*tangentetaslave(1,0);
        const double clhs17 =     penalty_parameter*(clhs14*tangentxislave(1,1) + clhs9*tangentxislave(1,0)) + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double clhs18 =     clhs17*tangentxislave(1,0);
        const double clhs19 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs20 =     X1(0,0) + u1(0,0);
        const double clhs21 =     X1(1,0) + u1(1,0);
        const double clhs22 =     X2(0,0) + u2(0,0);
        const double clhs23 =     X2(1,0) + u2(1,0);
        const double clhs24 =     X1(0,1) + u1(0,1);
        const double clhs25 =     X1(1,1) + u1(1,1);
        const double clhs26 =     X2(0,1) + u2(0,1);
        const double clhs27 =     X2(1,1) + u2(1,1);
        const double clhs28 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs22 + clhs20*clhs3 + clhs21*clhs5 - clhs23*clhs8) + normalslave(1,1)*(-clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8));
        const double clhs29 =     -clhs19 + clhs28;
        const double clhs30 =     clhs29*normalslave(1,0);
        const double clhs31 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs32 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs33 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     -clhs1*clhs6 + clhs2*clhs31 + clhs32*clhs4 - clhs33*clhs7;
        const double clhs35 =     -clhs1*clhs12 + clhs10*clhs31 + clhs11*clhs32 - clhs13*clhs33;
        const double clhs36 =     clhs34*tangentetaslave(1,0) + clhs35*tangentetaslave(1,1);
        const double clhs37 =     clhs36*penalty_parameter*tangentetaslave(1,0);
        const double clhs38 =     clhs34*tangentxislave(1,0) + clhs35*tangentxislave(1,1);
        const double clhs39 =     clhs38*penalty_parameter*tangentxislave(1,0);
        const double clhs40 =     normalslave(1,1)*(-clhs1*clhs26 + clhs24*clhs31 + clhs25*clhs32 - clhs27*clhs33);
        const double clhs41 =     normalslave(1,0)*(clhs0 + clhs1*clhs22 - clhs20*clhs31 - clhs21*clhs32 + clhs23*clhs33);
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(1,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     clhs2*clhs45 + clhs4*clhs46 - clhs44*clhs6 - clhs47*clhs7;
        const double clhs49 =     clhs10*clhs45 + clhs11*clhs46 - clhs12*clhs44 - clhs13*clhs47;
        const double clhs50 =     clhs48*tangentetaslave(1,0) + clhs49*tangentetaslave(1,1);
        const double clhs51 =     clhs50*penalty_parameter*tangentetaslave(1,0);
        const double clhs52 =     clhs48*tangentxislave(1,0) + clhs49*tangentxislave(1,1);
        const double clhs53 =     clhs52*penalty_parameter*tangentxislave(1,0);
        const double clhs54 =     normalslave(1,0)*(clhs20*clhs45 + clhs21*clhs46 - clhs22*clhs44 - clhs23*clhs47) - normalslave(1,1)*(clhs0 - clhs24*clhs45 - clhs25*clhs46 + clhs26*clhs44 + clhs27*clhs47);
        const double clhs55 =     clhs54*normalslave(1,0)*penalty_parameter;
        const double clhs56 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs57 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs58 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs59 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs60 =     clhs2*clhs57 + clhs4*clhs58 - clhs56*clhs6 - clhs59*clhs7;
        const double clhs61 =     clhs10*clhs57 + clhs11*clhs58 - clhs12*clhs56 - clhs13*clhs59;
        const double clhs62 =     clhs60*tangentetaslave(1,0) + clhs61*tangentetaslave(1,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentetaslave(1,0);
        const double clhs64 =     clhs60*tangentxislave(1,0) + clhs61*tangentxislave(1,1);
        const double clhs65 =     clhs64*penalty_parameter*tangentxislave(1,0);
        const double clhs66 =     normalslave(1,1)*(clhs24*clhs57 + clhs25*clhs58 - clhs26*clhs56 - clhs27*clhs59);
        const double clhs67 =     normalslave(1,0)*(-clhs20*clhs57 - clhs21*clhs58 + clhs22*clhs56 + clhs23*clhs59 + clhs8);
        const double clhs68 =     -clhs66 + clhs67;
        const double clhs69 =     clhs68*normalslave(1,0)*penalty_parameter;
        const double clhs70 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs71 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs72 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs73 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs74 =     clhs2*clhs71 + clhs4*clhs72 - clhs6*clhs70 - clhs7*clhs73;
        const double clhs75 =     clhs10*clhs71 + clhs11*clhs72 - clhs12*clhs70 - clhs13*clhs73;
        const double clhs76 =     clhs74*tangentetaslave(1,0) + clhs75*tangentetaslave(1,1);
        const double clhs77 =     clhs76*penalty_parameter*tangentetaslave(1,0);
        const double clhs78 =     clhs74*tangentxislave(1,0) + clhs75*tangentxislave(1,1);
        const double clhs79 =     clhs78*penalty_parameter*tangentxislave(1,0);
        const double clhs80 =     normalslave(1,0)*(clhs20*clhs71 + clhs21*clhs72 - clhs22*clhs70 - clhs23*clhs73) - normalslave(1,1)*(-clhs24*clhs71 - clhs25*clhs72 + clhs26*clhs70 + clhs27*clhs73 + clhs8);
        const double clhs81 =     clhs80*normalslave(1,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs83 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs84 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs85 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs86 =     clhs2*clhs83 + clhs4*clhs84 - clhs6*clhs82 - clhs7*clhs85;
        const double clhs87 =     clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85;
        const double clhs88 =     clhs86*tangentetaslave(1,0) + clhs87*tangentetaslave(1,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentetaslave(1,0);
        const double clhs90 =     clhs86*tangentxislave(1,0) + clhs87*tangentxislave(1,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(1,0);
        const double clhs92 =     normalslave(1,0)*(clhs20*clhs83 + clhs21*clhs84 - clhs22*clhs82 - clhs23*clhs85 + clhs3) + normalslave(1,1)*(clhs24*clhs83 + clhs25*clhs84 - clhs26*clhs82 - clhs27*clhs85);
        const double clhs93 =     clhs92*normalslave(1,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs95 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs96 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs97 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs98 =     clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs94 - clhs7*clhs97;
        const double clhs99 =     clhs10*clhs95 + clhs11*clhs96 - clhs12*clhs94 - clhs13*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(1,0) + clhs99*tangentetaslave(1,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(1,0);
        const double clhs102 =     clhs98*tangentxislave(1,0) + clhs99*tangentxislave(1,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(1,0);
        const double clhs104 =     normalslave(1,0)*(clhs20*clhs95 + clhs21*clhs96 - clhs22*clhs94 - clhs23*clhs97) + normalslave(1,1)*(clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs94 - clhs27*clhs97 + clhs3);
        const double clhs105 =     clhs104*normalslave(1,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs107 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs108 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs109 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs110 =     -clhs106*clhs6 + clhs107*clhs2 + clhs108*clhs4 - clhs109*clhs7;
        const double clhs111 =     clhs10*clhs107 - clhs106*clhs12 + clhs108*clhs11 - clhs109*clhs13;
        const double clhs112 =     clhs110*tangentetaslave(1,0) + clhs111*tangentetaslave(1,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentetaslave(1,0);
        const double clhs114 =     clhs110*tangentxislave(1,0) + clhs111*tangentxislave(1,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(1,0);
        const double clhs116 =     normalslave(1,0)*(-clhs106*clhs22 + clhs107*clhs20 + clhs108*clhs21 - clhs109*clhs23 + clhs5) + normalslave(1,1)*(-clhs106*clhs26 + clhs107*clhs24 + clhs108*clhs25 - clhs109*clhs27);
        const double clhs117 =     clhs116*normalslave(1,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs119 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs120 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs121 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs122 =     -clhs118*clhs6 + clhs119*clhs2 + clhs120*clhs4 - clhs121*clhs7;
        const double clhs123 =     clhs10*clhs119 + clhs11*clhs120 - clhs118*clhs12 - clhs121*clhs13;
        const double clhs124 =     clhs122*tangentetaslave(1,0) + clhs123*tangentetaslave(1,1);
        const double clhs125 =     clhs124*penalty_parameter*tangentetaslave(1,0);
        const double clhs126 =     clhs122*tangentxislave(1,0) + clhs123*tangentxislave(1,1);
        const double clhs127 =     clhs126*penalty_parameter*tangentxislave(1,0);
        const double clhs128 =     normalslave(1,0)*(-clhs118*clhs22 + clhs119*clhs20 + clhs120*clhs21 - clhs121*clhs23) + normalslave(1,1)*(-clhs118*clhs26 + clhs119*clhs24 + clhs120*clhs25 - clhs121*clhs27 + clhs5);
        const double clhs129 =     clhs128*normalslave(1,0)*penalty_parameter;
        const double clhs130 =     scale_factor*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        const double clhs131 =     scale_factor*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
        const double clhs132 =     clhs0*clhs131;
        const double clhs133 =     clhs15*tangentetaslave(1,1);
        const double clhs134 =     clhs17*tangentxislave(1,1);
        const double clhs135 =     clhs29*normalslave(1,1);
        const double clhs136 =     clhs36*penalty_parameter*tangentetaslave(1,1);
        const double clhs137 =     clhs38*penalty_parameter*tangentxislave(1,1);
        const double clhs138 =     clhs42*normalslave(1,1)*penalty_parameter;
        const double clhs139 =     clhs50*penalty_parameter*tangentetaslave(1,1);
        const double clhs140 =     clhs52*penalty_parameter*tangentxislave(1,1);
        const double clhs141 =     clhs54*normalslave(1,1)*penalty_parameter;
        const double clhs142 =     clhs62*penalty_parameter*tangentetaslave(1,1);
        const double clhs143 =     clhs64*penalty_parameter*tangentxislave(1,1);
        const double clhs144 =     clhs68*normalslave(1,1)*penalty_parameter;
        const double clhs145 =     clhs76*penalty_parameter*tangentetaslave(1,1);
        const double clhs146 =     clhs78*penalty_parameter*tangentxislave(1,1);
        const double clhs147 =     clhs80*normalslave(1,1)*penalty_parameter;
        const double clhs148 =     clhs88*penalty_parameter*tangentetaslave(1,1);
        const double clhs149 =     clhs90*penalty_parameter*tangentxislave(1,1);
        const double clhs150 =     clhs92*normalslave(1,1)*penalty_parameter;
        const double clhs151 =     clhs100*penalty_parameter*tangentetaslave(1,1);
        const double clhs152 =     clhs102*penalty_parameter*tangentxislave(1,1);
        const double clhs153 =     clhs104*normalslave(1,1)*penalty_parameter;
        const double clhs154 =     clhs112*penalty_parameter*tangentetaslave(1,1);
        const double clhs155 =     clhs114*penalty_parameter*tangentxislave(1,1);
        const double clhs156 =     clhs116*normalslave(1,1)*penalty_parameter;
        const double clhs157 =     clhs124*penalty_parameter*tangentetaslave(1,1);
        const double clhs158 =     clhs126*penalty_parameter*tangentxislave(1,1);
        const double clhs159 =     clhs128*normalslave(1,1)*penalty_parameter;
        const double clhs160 =     scale_factor*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
        const double clhs161 =     clhs131*clhs8;
        const double clhs162 =     clhs19 - clhs28;
        const double clhs163 =     clhs162*normalslave(1,0);
        const double clhs164 =     clhs40 - clhs41;
        const double clhs165 =     clhs164*normalslave(1,0)*penalty_parameter;
        const double clhs166 =     clhs66 - clhs67;
        const double clhs167 =     clhs166*normalslave(1,0)*penalty_parameter;
        const double clhs168 =     -clhs131*clhs3;
        const double clhs169 =     clhs162*normalslave(1,1);
        const double clhs170 =     clhs164*normalslave(1,1)*penalty_parameter;
        const double clhs171 =     clhs166*normalslave(1,1)*penalty_parameter;
        const double clhs172 =     -clhs131*clhs5;
        const double clhs173 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs174 =     clhs173*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
    
        lhs(0,0)=clhs0*clhs37 + clhs0*clhs39 + clhs0*clhs43 + clhs1*clhs16 + clhs1*clhs18 - clhs1*clhs30;
        lhs(0,1)=clhs0*clhs51 + clhs0*clhs53 - clhs0*clhs55 + clhs16*clhs44 + clhs18*clhs44 - clhs30*clhs44;
        lhs(0,2)=clhs0*clhs63 + clhs0*clhs65 + clhs0*clhs69 + clhs16*clhs56 + clhs18*clhs56 - clhs30*clhs56;
        lhs(0,3)=clhs0*clhs77 + clhs0*clhs79 - clhs0*clhs81 + clhs16*clhs70 + clhs18*clhs70 - clhs30*clhs70;
        lhs(0,4)=clhs0*clhs89 + clhs0*clhs91 - clhs0*clhs93 + clhs16*clhs82 + clhs18*clhs82 - clhs30*clhs82;
        lhs(0,5)=clhs0*clhs101 + clhs0*clhs103 - clhs0*clhs105 + clhs16*clhs94 + clhs18*clhs94 - clhs30*clhs94;
        lhs(0,6)=clhs0*clhs113 + clhs0*clhs115 - clhs0*clhs117 + clhs106*clhs16 + clhs106*clhs18 - clhs106*clhs30;
        lhs(0,7)=clhs0*clhs125 + clhs0*clhs127 - clhs0*clhs129 + clhs118*clhs16 + clhs118*clhs18 - clhs118*clhs30;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=clhs0*clhs130;
        lhs(0,11)=clhs132;
        lhs(1,0)=clhs0*clhs136 + clhs0*clhs137 + clhs0*clhs138 + clhs1*clhs133 + clhs1*clhs134 - clhs1*clhs135;
        lhs(1,1)=clhs0*clhs139 + clhs0*clhs140 - clhs0*clhs141 + clhs133*clhs44 + clhs134*clhs44 - clhs135*clhs44;
        lhs(1,2)=clhs0*clhs142 + clhs0*clhs143 + clhs0*clhs144 + clhs133*clhs56 + clhs134*clhs56 - clhs135*clhs56;
        lhs(1,3)=clhs0*clhs145 + clhs0*clhs146 - clhs0*clhs147 + clhs133*clhs70 + clhs134*clhs70 - clhs135*clhs70;
        lhs(1,4)=clhs0*clhs148 + clhs0*clhs149 - clhs0*clhs150 + clhs133*clhs82 + clhs134*clhs82 - clhs135*clhs82;
        lhs(1,5)=clhs0*clhs151 + clhs0*clhs152 - clhs0*clhs153 + clhs133*clhs94 + clhs134*clhs94 - clhs135*clhs94;
        lhs(1,6)=clhs0*clhs154 + clhs0*clhs155 - clhs0*clhs156 + clhs106*clhs133 + clhs106*clhs134 - clhs106*clhs135;
        lhs(1,7)=clhs0*clhs157 + clhs0*clhs158 - clhs0*clhs159 + clhs118*clhs133 + clhs118*clhs134 - clhs118*clhs135;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=clhs132;
        lhs(1,11)=clhs0*clhs160;
        lhs(2,0)=clhs16*clhs33 + clhs18*clhs33 - clhs30*clhs33 + clhs37*clhs8 + clhs39*clhs8 + clhs43*clhs8;
        lhs(2,1)=clhs16*clhs47 + clhs18*clhs47 - clhs30*clhs47 + clhs51*clhs8 + clhs53*clhs8 - clhs55*clhs8;
        lhs(2,2)=clhs16*clhs59 + clhs18*clhs59 - clhs30*clhs59 + clhs63*clhs8 + clhs65*clhs8 + clhs69*clhs8;
        lhs(2,3)=clhs16*clhs73 + clhs18*clhs73 - clhs30*clhs73 + clhs77*clhs8 + clhs79*clhs8 - clhs8*clhs81;
        lhs(2,4)=clhs16*clhs85 + clhs18*clhs85 - clhs30*clhs85 + clhs8*clhs89 + clhs8*clhs91 - clhs8*clhs93;
        lhs(2,5)=clhs101*clhs8 + clhs103*clhs8 - clhs105*clhs8 + clhs16*clhs97 + clhs18*clhs97 - clhs30*clhs97;
        lhs(2,6)=clhs109*clhs16 + clhs109*clhs18 - clhs109*clhs30 + clhs113*clhs8 + clhs115*clhs8 - clhs117*clhs8;
        lhs(2,7)=clhs121*clhs16 + clhs121*clhs18 - clhs121*clhs30 + clhs125*clhs8 + clhs127*clhs8 - clhs129*clhs8;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=clhs130*clhs8;
        lhs(2,11)=clhs161;
        lhs(3,0)=clhs133*clhs33 + clhs134*clhs33 - clhs135*clhs33 + clhs136*clhs8 + clhs137*clhs8 + clhs138*clhs8;
        lhs(3,1)=clhs133*clhs47 + clhs134*clhs47 - clhs135*clhs47 + clhs139*clhs8 + clhs140*clhs8 - clhs141*clhs8;
        lhs(3,2)=clhs133*clhs59 + clhs134*clhs59 - clhs135*clhs59 + clhs142*clhs8 + clhs143*clhs8 + clhs144*clhs8;
        lhs(3,3)=clhs133*clhs73 + clhs134*clhs73 - clhs135*clhs73 + clhs145*clhs8 + clhs146*clhs8 - clhs147*clhs8;
        lhs(3,4)=clhs133*clhs85 + clhs134*clhs85 - clhs135*clhs85 + clhs148*clhs8 + clhs149*clhs8 - clhs150*clhs8;
        lhs(3,5)=clhs133*clhs97 + clhs134*clhs97 - clhs135*clhs97 + clhs151*clhs8 + clhs152*clhs8 - clhs153*clhs8;
        lhs(3,6)=clhs109*clhs133 + clhs109*clhs134 - clhs109*clhs135 + clhs154*clhs8 + clhs155*clhs8 - clhs156*clhs8;
        lhs(3,7)=clhs121*clhs133 + clhs121*clhs134 - clhs121*clhs135 + clhs157*clhs8 + clhs158*clhs8 - clhs159*clhs8;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=clhs161;
        lhs(3,11)=clhs160*clhs8;
        lhs(4,0)=-clhs16*clhs31 - clhs163*clhs31 + clhs165*clhs3 - clhs18*clhs31 - clhs3*clhs37 - clhs3*clhs39;
        lhs(4,1)=-clhs16*clhs45 - clhs163*clhs45 - clhs18*clhs45 - clhs3*clhs51 - clhs3*clhs53 + clhs3*clhs55;
        lhs(4,2)=-clhs16*clhs57 - clhs163*clhs57 + clhs167*clhs3 - clhs18*clhs57 - clhs3*clhs63 - clhs3*clhs65;
        lhs(4,3)=-clhs16*clhs71 - clhs163*clhs71 - clhs18*clhs71 - clhs3*clhs77 - clhs3*clhs79 + clhs3*clhs81;
        lhs(4,4)=-clhs16*clhs83 - clhs163*clhs83 - clhs18*clhs83 - clhs3*clhs89 - clhs3*clhs91 + clhs3*clhs93;
        lhs(4,5)=-clhs101*clhs3 - clhs103*clhs3 + clhs105*clhs3 - clhs16*clhs95 - clhs163*clhs95 - clhs18*clhs95;
        lhs(4,6)=-clhs107*clhs16 - clhs107*clhs163 - clhs107*clhs18 - clhs113*clhs3 - clhs115*clhs3 + clhs117*clhs3;
        lhs(4,7)=-clhs119*clhs16 - clhs119*clhs163 - clhs119*clhs18 - clhs125*clhs3 - clhs127*clhs3 + clhs129*clhs3;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=-clhs130*clhs3;
        lhs(4,11)=clhs168;
        lhs(5,0)=-clhs133*clhs31 - clhs134*clhs31 - clhs136*clhs3 - clhs137*clhs3 - clhs169*clhs31 + clhs170*clhs3;
        lhs(5,1)=-clhs133*clhs45 - clhs134*clhs45 - clhs139*clhs3 - clhs140*clhs3 + clhs141*clhs3 - clhs169*clhs45;
        lhs(5,2)=-clhs133*clhs57 - clhs134*clhs57 - clhs142*clhs3 - clhs143*clhs3 - clhs169*clhs57 + clhs171*clhs3;
        lhs(5,3)=-clhs133*clhs71 - clhs134*clhs71 - clhs145*clhs3 - clhs146*clhs3 + clhs147*clhs3 - clhs169*clhs71;
        lhs(5,4)=-clhs133*clhs83 - clhs134*clhs83 - clhs148*clhs3 - clhs149*clhs3 + clhs150*clhs3 - clhs169*clhs83;
        lhs(5,5)=-clhs133*clhs95 - clhs134*clhs95 - clhs151*clhs3 - clhs152*clhs3 + clhs153*clhs3 - clhs169*clhs95;
        lhs(5,6)=-clhs107*clhs133 - clhs107*clhs134 - clhs107*clhs169 - clhs154*clhs3 - clhs155*clhs3 + clhs156*clhs3;
        lhs(5,7)=-clhs119*clhs133 - clhs119*clhs134 - clhs119*clhs169 - clhs157*clhs3 - clhs158*clhs3 + clhs159*clhs3;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=clhs168;
        lhs(5,11)=-clhs160*clhs3;
        lhs(6,0)=-clhs16*clhs32 - clhs163*clhs32 + clhs165*clhs5 - clhs18*clhs32 - clhs37*clhs5 - clhs39*clhs5;
        lhs(6,1)=-clhs16*clhs46 - clhs163*clhs46 - clhs18*clhs46 - clhs5*clhs51 - clhs5*clhs53 + clhs5*clhs55;
        lhs(6,2)=-clhs16*clhs58 - clhs163*clhs58 + clhs167*clhs5 - clhs18*clhs58 - clhs5*clhs63 - clhs5*clhs65;
        lhs(6,3)=-clhs16*clhs72 - clhs163*clhs72 - clhs18*clhs72 - clhs5*clhs77 - clhs5*clhs79 + clhs5*clhs81;
        lhs(6,4)=-clhs16*clhs84 - clhs163*clhs84 - clhs18*clhs84 - clhs5*clhs89 - clhs5*clhs91 + clhs5*clhs93;
        lhs(6,5)=-clhs101*clhs5 - clhs103*clhs5 + clhs105*clhs5 - clhs16*clhs96 - clhs163*clhs96 - clhs18*clhs96;
        lhs(6,6)=-clhs108*clhs16 - clhs108*clhs163 - clhs108*clhs18 - clhs113*clhs5 - clhs115*clhs5 + clhs117*clhs5;
        lhs(6,7)=-clhs120*clhs16 - clhs120*clhs163 - clhs120*clhs18 - clhs125*clhs5 - clhs127*clhs5 + clhs129*clhs5;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=-clhs130*clhs5;
        lhs(6,11)=clhs172;
        lhs(7,0)=-clhs133*clhs32 - clhs134*clhs32 - clhs136*clhs5 - clhs137*clhs5 - clhs169*clhs32 + clhs170*clhs5;
        lhs(7,1)=-clhs133*clhs46 - clhs134*clhs46 - clhs139*clhs5 - clhs140*clhs5 + clhs141*clhs5 - clhs169*clhs46;
        lhs(7,2)=-clhs133*clhs58 - clhs134*clhs58 - clhs142*clhs5 - clhs143*clhs5 - clhs169*clhs58 + clhs171*clhs5;
        lhs(7,3)=-clhs133*clhs72 - clhs134*clhs72 - clhs145*clhs5 - clhs146*clhs5 + clhs147*clhs5 - clhs169*clhs72;
        lhs(7,4)=-clhs133*clhs84 - clhs134*clhs84 - clhs148*clhs5 - clhs149*clhs5 + clhs150*clhs5 - clhs169*clhs84;
        lhs(7,5)=-clhs133*clhs96 - clhs134*clhs96 - clhs151*clhs5 - clhs152*clhs5 + clhs153*clhs5 - clhs169*clhs96;
        lhs(7,6)=-clhs108*clhs133 - clhs108*clhs134 - clhs108*clhs169 - clhs154*clhs5 - clhs155*clhs5 + clhs156*clhs5;
        lhs(7,7)=-clhs120*clhs133 - clhs120*clhs134 - clhs120*clhs169 - clhs157*clhs5 - clhs158*clhs5 + clhs159*clhs5;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=clhs172;
        lhs(7,11)=-clhs160*clhs5;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs173*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs174;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs174;
        lhs(9,9)=clhs173*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=scale_factor*(clhs164*normalslave(1,0) - clhs36*tangentetaslave(1,0) - clhs38*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs50*tangentetaslave(1,0) - clhs52*tangentxislave(1,0) + clhs54*normalslave(1,0));
        lhs(10,2)=scale_factor*(clhs166*normalslave(1,0) - clhs62*tangentetaslave(1,0) - clhs64*tangentxislave(1,0));
        lhs(10,3)=scale_factor*(-clhs76*tangentetaslave(1,0) - clhs78*tangentxislave(1,0) + clhs80*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs88*tangentetaslave(1,0) - clhs90*tangentxislave(1,0) + clhs92*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs100*tangentetaslave(1,0) - clhs102*tangentxislave(1,0) + clhs104*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs112*tangentetaslave(1,0) - clhs114*tangentxislave(1,0) + clhs116*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs124*tangentetaslave(1,0) - clhs126*tangentxislave(1,0) + clhs128*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs164*normalslave(1,1) - clhs36*tangentetaslave(1,1) - clhs38*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs50*tangentetaslave(1,1) - clhs52*tangentxislave(1,1) + clhs54*normalslave(1,1));
        lhs(11,2)=scale_factor*(clhs166*normalslave(1,1) - clhs62*tangentetaslave(1,1) - clhs64*tangentxislave(1,1));
        lhs(11,3)=scale_factor*(-clhs76*tangentetaslave(1,1) - clhs78*tangentxislave(1,1) + clhs80*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs88*tangentetaslave(1,1) - clhs90*tangentxislave(1,1) + clhs92*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs100*tangentetaslave(1,1) - clhs102*tangentxislave(1,1) + clhs104*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs112*tangentetaslave(1,1) - clhs114*tangentxislave(1,1) + clhs116*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs124*tangentetaslave(1,1) - clhs126*tangentxislave(1,1) + clhs128*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }
    else if (rActiveInactive == 7 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs3 =     X1(0,0) + u1old(0,0);
        const double clhs4 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1old(1,0);
        const double clhs6 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2old(0,0);
        const double clhs8 =     X2(1,0) + u2old(1,0);
        const double clhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     -clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9;
        const double clhs11 =     X1(0,1) + u1old(0,1);
        const double clhs12 =     X1(1,1) + u1old(1,1);
        const double clhs13 =     X2(0,1) + u2old(0,1);
        const double clhs14 =     X2(1,1) + u2old(1,1);
        const double clhs15 =     -clhs0*clhs13 + clhs11*clhs4 + clhs12*clhs6 - clhs14*clhs9;
        const double clhs16 =     clhs2*scale_factor + penalty_parameter*(clhs10*tangentetaslave(1,0) + clhs15*tangentetaslave(1,1));
        const double clhs17 =     clhs16*tangentetaslave(1,0);
        const double clhs18 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs19 =     clhs18*scale_factor + penalty_parameter*(clhs10*tangentxislave(1,0) + clhs15*tangentxislave(1,1));
        const double clhs20 =     clhs19*tangentxislave(1,0);
        const double clhs21 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs22 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs23 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs24 =     X1(0,0) + u1(0,0);
        const double clhs25 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs26 =     X1(1,0) + u1(1,0);
        const double clhs27 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs28 =     X2(0,0) + u2(0,0);
        const double clhs29 =     X2(1,0) + u2(1,0);
        const double clhs30 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs31 =     X1(0,1) + u1(0,1);
        const double clhs32 =     X1(1,1) + u1(1,1);
        const double clhs33 =     X2(0,1) + u2(0,1);
        const double clhs34 =     X2(1,1) + u2(1,1);
        const double clhs35 =     penalty_parameter*(normalslave(0,0)*(-clhs21*clhs28 + clhs24*clhs25 + clhs26*clhs27 - clhs29*clhs30) + normalslave(0,1)*(-clhs21*clhs33 + clhs25*clhs31 + clhs27*clhs32 - clhs30*clhs34));
        const double clhs36 =     -clhs23 + clhs35;
        const double clhs37 =     clhs36*normalslave(0,0);
        const double clhs38 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs39 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs28 + clhs24*clhs4 + clhs26*clhs6 - clhs29*clhs9) + normalslave(1,1)*(-clhs0*clhs33 + clhs31*clhs4 + clhs32*clhs6 - clhs34*clhs9));
        const double clhs40 =     -clhs38 + clhs39;
        const double clhs41 =     clhs40*normalslave(1,0);
        const double clhs42 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs43 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs44 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs45 =     -clhs1*clhs7 + clhs3*clhs42 + clhs43*clhs5 - clhs44*clhs8;
        const double clhs46 =     -clhs1*clhs13 + clhs11*clhs42 + clhs12*clhs43 - clhs14*clhs44;
        const double clhs47 =     clhs45*tangentetaslave(1,0) + clhs46*tangentetaslave(1,1);
        const double clhs48 =     clhs47*penalty_parameter*tangentetaslave(1,0);
        const double clhs49 =     clhs45*tangentxislave(1,0) + clhs46*tangentxislave(1,1);
        const double clhs50 =     clhs49*penalty_parameter*tangentxislave(1,0);
        const double clhs51 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs52 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs53 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs54 =     normalslave(0,1)*(-clhs22*clhs33 + clhs31*clhs51 + clhs32*clhs52 - clhs34*clhs53);
        const double clhs55 =     normalslave(0,0)*(clhs21 + clhs22*clhs28 - clhs24*clhs51 - clhs26*clhs52 + clhs29*clhs53);
        const double clhs56 =     -clhs54 + clhs55;
        const double clhs57 =     clhs56*normalslave(0,0)*penalty_parameter;
        const double clhs58 =     normalslave(1,1)*(-clhs1*clhs33 + clhs31*clhs42 + clhs32*clhs43 - clhs34*clhs44);
        const double clhs59 =     normalslave(1,0)*(clhs0 + clhs1*clhs28 - clhs24*clhs42 - clhs26*clhs43 + clhs29*clhs44);
        const double clhs60 =     -clhs58 + clhs59;
        const double clhs61 =     clhs60*normalslave(1,0)*penalty_parameter;
        const double clhs62 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs63 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs64 =     clhs62*tangentetaslave(0,0) + clhs63*tangentxislave(0,0);
        const double clhs65 =     clhs62*tangentetaslave(0,1) + clhs63*tangentxislave(0,1);
        const double clhs66 =     std::pow(clhs64, 2) + std::pow(clhs65, 2);
        const double clhs67 =     std::pow(clhs66, -1.0L/2.0L);
        const double clhs68 =     clhs18*tangentxislave(1,0) + clhs2*tangentetaslave(1,0);
        const double clhs69 =     clhs18*tangentxislave(1,1) + clhs2*tangentetaslave(1,1);
        const double clhs70 =     std::pow(clhs68, 2) + std::pow(clhs69, 2);
        const double clhs71 =     std::pow(clhs70, -1.0L/2.0L);
        const double clhs72 =     clhs36*clhs64*clhs67*clhs71*mu[0];
        const double clhs73 =     clhs56*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs74 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs75 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs76 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs77 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs78 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs79 =     clhs3*clhs76 + clhs5*clhs77 - clhs7*clhs74 - clhs78*clhs8;
        const double clhs80 =     clhs11*clhs76 + clhs12*clhs77 - clhs13*clhs74 - clhs14*clhs78;
        const double clhs81 =     clhs79*tangentetaslave(1,0) + clhs80*tangentetaslave(1,1);
        const double clhs82 =     clhs81*penalty_parameter*tangentetaslave(1,0);
        const double clhs83 =     clhs79*tangentxislave(1,0) + clhs80*tangentxislave(1,1);
        const double clhs84 =     clhs83*penalty_parameter*tangentxislave(1,0);
        const double clhs85 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs86 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs87 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs88 =     normalslave(0,0)*(clhs24*clhs85 + clhs26*clhs86 - clhs28*clhs75 - clhs29*clhs87) - normalslave(0,1)*(clhs21 - clhs31*clhs85 - clhs32*clhs86 + clhs33*clhs75 + clhs34*clhs87);
        const double clhs89 =     clhs88*normalslave(0,0)*penalty_parameter;
        const double clhs90 =     normalslave(1,0)*(clhs24*clhs76 + clhs26*clhs77 - clhs28*clhs74 - clhs29*clhs78) - normalslave(1,1)*(clhs0 - clhs31*clhs76 - clhs32*clhs77 + clhs33*clhs74 + clhs34*clhs78);
        const double clhs91 =     clhs90*normalslave(1,0)*penalty_parameter;
        const double clhs92 =     clhs64*clhs67*clhs71*clhs88*mu[0]*penalty_parameter;
        const double clhs93 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs94 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs95 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs96 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs97 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs98 =     clhs3*clhs95 + clhs5*clhs96 - clhs7*clhs93 - clhs8*clhs97;
        const double clhs99 =     clhs11*clhs95 + clhs12*clhs96 - clhs13*clhs93 - clhs14*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(1,0) + clhs99*tangentetaslave(1,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(1,0);
        const double clhs102 =     clhs98*tangentxislave(1,0) + clhs99*tangentxislave(1,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(1,0);
        const double clhs104 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs105 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs106 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs107 =     normalslave(0,1)*(clhs104*clhs31 + clhs105*clhs32 - clhs106*clhs34 - clhs33*clhs94);
        const double clhs108 =     normalslave(0,0)*(-clhs104*clhs24 - clhs105*clhs26 + clhs106*clhs29 + clhs28*clhs94 + clhs30);
        const double clhs109 =     -clhs107 + clhs108;
        const double clhs110 =     clhs109*normalslave(0,0)*penalty_parameter;
        const double clhs111 =     normalslave(1,1)*(clhs31*clhs95 + clhs32*clhs96 - clhs33*clhs93 - clhs34*clhs97);
        const double clhs112 =     normalslave(1,0)*(-clhs24*clhs95 - clhs26*clhs96 + clhs28*clhs93 + clhs29*clhs97 + clhs9);
        const double clhs113 =     -clhs111 + clhs112;
        const double clhs114 =     clhs113*normalslave(1,0)*penalty_parameter;
        const double clhs115 =     clhs109*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs116 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs117 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs118 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs119 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs120 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs121 =     -clhs116*clhs7 + clhs118*clhs3 + clhs119*clhs5 - clhs120*clhs8;
        const double clhs122 =     clhs11*clhs118 - clhs116*clhs13 + clhs119*clhs12 - clhs120*clhs14;
        const double clhs123 =     clhs121*tangentetaslave(1,0) + clhs122*tangentetaslave(1,1);
        const double clhs124 =     clhs123*penalty_parameter*tangentetaslave(1,0);
        const double clhs125 =     clhs121*tangentxislave(1,0) + clhs122*tangentxislave(1,1);
        const double clhs126 =     clhs125*penalty_parameter*tangentxislave(1,0);
        const double clhs127 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs128 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs129 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs130 =     normalslave(0,0)*(-clhs117*clhs28 + clhs127*clhs24 + clhs128*clhs26 - clhs129*clhs29) - normalslave(0,1)*(clhs117*clhs33 - clhs127*clhs31 - clhs128*clhs32 + clhs129*clhs34 + clhs30);
        const double clhs131 =     clhs130*normalslave(0,0)*penalty_parameter;
        const double clhs132 =     normalslave(1,0)*(-clhs116*clhs28 + clhs118*clhs24 + clhs119*clhs26 - clhs120*clhs29) - normalslave(1,1)*(clhs116*clhs33 - clhs118*clhs31 - clhs119*clhs32 + clhs120*clhs34 + clhs9);
        const double clhs133 =     clhs132*normalslave(1,0)*penalty_parameter;
        const double clhs134 =     clhs130*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs135 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs136 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs137 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs138 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs139 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs140 =     -clhs135*clhs7 + clhs137*clhs3 + clhs138*clhs5 - clhs139*clhs8;
        const double clhs141 =     clhs11*clhs137 + clhs12*clhs138 - clhs13*clhs135 - clhs139*clhs14;
        const double clhs142 =     clhs140*tangentetaslave(1,0) + clhs141*tangentetaslave(1,1);
        const double clhs143 =     clhs142*penalty_parameter*tangentetaslave(1,0);
        const double clhs144 =     clhs140*tangentxislave(1,0) + clhs141*tangentxislave(1,1);
        const double clhs145 =     clhs144*penalty_parameter*tangentxislave(1,0);
        const double clhs146 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs147 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs148 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     normalslave(0,0)*(-clhs136*clhs28 + clhs146*clhs24 + clhs147*clhs26 - clhs148*clhs29 + clhs25) + normalslave(0,1)*(-clhs136*clhs33 + clhs146*clhs31 + clhs147*clhs32 - clhs148*clhs34);
        const double clhs150 =     clhs149*normalslave(0,0)*penalty_parameter;
        const double clhs151 =     normalslave(1,0)*(-clhs135*clhs28 + clhs137*clhs24 + clhs138*clhs26 - clhs139*clhs29 + clhs4) + normalslave(1,1)*(-clhs135*clhs33 + clhs137*clhs31 + clhs138*clhs32 - clhs139*clhs34);
        const double clhs152 =     clhs151*normalslave(1,0)*penalty_parameter;
        const double clhs153 =     clhs149*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs154 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs155 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs156 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs157 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs158 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs159 =     -clhs154*clhs7 + clhs156*clhs3 + clhs157*clhs5 - clhs158*clhs8;
        const double clhs160 =     clhs11*clhs156 + clhs12*clhs157 - clhs13*clhs154 - clhs14*clhs158;
        const double clhs161 =     clhs159*tangentetaslave(1,0) + clhs160*tangentetaslave(1,1);
        const double clhs162 =     clhs161*penalty_parameter*tangentetaslave(1,0);
        const double clhs163 =     clhs159*tangentxislave(1,0) + clhs160*tangentxislave(1,1);
        const double clhs164 =     clhs163*penalty_parameter*tangentxislave(1,0);
        const double clhs165 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs166 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs167 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs168 =     normalslave(0,0)*(-clhs155*clhs28 + clhs165*clhs24 + clhs166*clhs26 - clhs167*clhs29) + normalslave(0,1)*(-clhs155*clhs33 + clhs165*clhs31 + clhs166*clhs32 - clhs167*clhs34 + clhs25);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     normalslave(1,0)*(-clhs154*clhs28 + clhs156*clhs24 + clhs157*clhs26 - clhs158*clhs29) + normalslave(1,1)*(-clhs154*clhs33 + clhs156*clhs31 + clhs157*clhs32 - clhs158*clhs34 + clhs4);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     clhs168*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs173 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs174 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs175 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs176 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs177 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs178 =     -clhs173*clhs7 + clhs175*clhs3 + clhs176*clhs5 - clhs177*clhs8;
        const double clhs179 =     clhs11*clhs175 + clhs12*clhs176 - clhs13*clhs173 - clhs14*clhs177;
        const double clhs180 =     clhs178*tangentetaslave(1,0) + clhs179*tangentetaslave(1,1);
        const double clhs181 =     clhs180*penalty_parameter*tangentetaslave(1,0);
        const double clhs182 =     clhs178*tangentxislave(1,0) + clhs179*tangentxislave(1,1);
        const double clhs183 =     clhs182*penalty_parameter*tangentxislave(1,0);
        const double clhs184 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs185 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs186 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs187 =     normalslave(0,0)*(-clhs174*clhs28 + clhs184*clhs24 + clhs185*clhs26 - clhs186*clhs29 + clhs27) + normalslave(0,1)*(-clhs174*clhs33 + clhs184*clhs31 + clhs185*clhs32 - clhs186*clhs34);
        const double clhs188 =     clhs187*normalslave(0,0)*penalty_parameter;
        const double clhs189 =     normalslave(1,0)*(-clhs173*clhs28 + clhs175*clhs24 + clhs176*clhs26 - clhs177*clhs29 + clhs6) + normalslave(1,1)*(-clhs173*clhs33 + clhs175*clhs31 + clhs176*clhs32 - clhs177*clhs34);
        const double clhs190 =     clhs189*normalslave(1,0)*penalty_parameter;
        const double clhs191 =     clhs187*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs192 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs193 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs194 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs195 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs196 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs197 =     -clhs192*clhs7 + clhs194*clhs3 + clhs195*clhs5 - clhs196*clhs8;
        const double clhs198 =     clhs11*clhs194 + clhs12*clhs195 - clhs13*clhs192 - clhs14*clhs196;
        const double clhs199 =     clhs197*tangentetaslave(1,0) + clhs198*tangentetaslave(1,1);
        const double clhs200 =     clhs199*penalty_parameter*tangentetaslave(1,0);
        const double clhs201 =     clhs197*tangentxislave(1,0) + clhs198*tangentxislave(1,1);
        const double clhs202 =     clhs201*penalty_parameter*tangentxislave(1,0);
        const double clhs203 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs204 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs205 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs206 =     normalslave(0,0)*(-clhs193*clhs28 + clhs203*clhs24 + clhs204*clhs26 - clhs205*clhs29) + normalslave(0,1)*(-clhs193*clhs33 + clhs203*clhs31 + clhs204*clhs32 - clhs205*clhs34 + clhs27);
        const double clhs207 =     clhs206*normalslave(0,0)*penalty_parameter;
        const double clhs208 =     normalslave(1,0)*(-clhs192*clhs28 + clhs194*clhs24 + clhs195*clhs26 - clhs196*clhs29) + normalslave(1,1)*(-clhs192*clhs33 + clhs194*clhs31 + clhs195*clhs32 - clhs196*clhs34 + clhs6);
        const double clhs209 =     clhs208*normalslave(1,0)*penalty_parameter;
        const double clhs210 =     clhs206*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs211 =     std::pow(normalslave(0,0), 2)*scale_factor;
        const double clhs212 =     clhs67*clhs71*mu[0]*normalslave(0,0)*scale_factor;
        const double clhs213 =     clhs212*clhs64;
        const double clhs214 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs215 =     clhs214*clhs67*clhs71*mu[0];
        const double clhs216 =     clhs23 - clhs35;
        const double clhs217 =     clhs214*clhs64;
        const double clhs218 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs219 =     clhs218*clhs65;
        const double clhs220 =     clhs217 + clhs219;
        const double clhs221 =     std::pow(clhs66, -3.0L/2.0L);
        const double clhs222 =     clhs216*clhs221*clhs64*clhs71*mu[0];
        const double clhs223 =     clhs211 - clhs213 - clhs215*clhs216 + clhs220*clhs222;
        const double clhs224 =     normalslave(0,1)*(normalslave(0,0)*scale_factor);
        const double clhs225 =     clhs218*clhs67*clhs71*mu[0];
        const double clhs226 =     -clhs216*clhs225 + clhs224;
        const double clhs227 =     clhs67*clhs71*mu[0]*normalslave(0,1)*scale_factor;
        const double clhs228 =     clhs227*clhs64;
        const double clhs229 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs230 =     clhs229*clhs65;
        const double clhs231 =     clhs218*clhs64;
        const double clhs232 =     clhs230 + clhs231;
        const double clhs233 =     clhs222*clhs232 + clhs226 - clhs228;
        const double clhs234 =     std::pow(normalslave(1,0), 2)*scale_factor;
        const double clhs235 =     std::pow(tangentetaslave(1,0), 2);
        const double clhs236 =     clhs235*scale_factor;
        const double clhs237 =     std::pow(tangentxislave(1,0), 2);
        const double clhs238 =     clhs237*scale_factor;
        const double clhs239 =     std::pow(clhs70, -3.0L/2.0L);
        const double clhs240 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs241 =     clhs240*clhs69 + clhs68*(clhs235 + clhs237);
        const double clhs242 =     clhs239*clhs241*clhs36*clhs64*clhs67*mu[0];
        const double clhs243 =     normalslave(1,0)*normalslave(1,1)*scale_factor;
        const double clhs244 =     scale_factor*tangentetaslave(1,0)*tangentetaslave(1,1);
        const double clhs245 =     scale_factor*tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs246 =     clhs0*clhs243 + clhs0*clhs244 + clhs0*clhs245;
        const double clhs247 =     std::pow(tangentetaslave(1,1), 2);
        const double clhs248 =     std::pow(tangentxislave(1,1), 2);
        const double clhs249 =     clhs240*clhs68 + clhs69*(clhs247 + clhs248);
        const double clhs250 =     clhs239*clhs249*clhs36*clhs64*clhs67*mu[0];
        const double clhs251 =     clhs16*tangentetaslave(1,1);
        const double clhs252 =     clhs19*tangentxislave(1,1);
        const double clhs253 =     clhs36*normalslave(0,1);
        const double clhs254 =     clhs40*normalslave(1,1);
        const double clhs255 =     clhs47*penalty_parameter*tangentetaslave(1,1);
        const double clhs256 =     clhs49*penalty_parameter*tangentxislave(1,1);
        const double clhs257 =     clhs56*normalslave(0,1)*penalty_parameter;
        const double clhs258 =     clhs60*normalslave(1,1)*penalty_parameter;
        const double clhs259 =     clhs36*clhs65*clhs67*clhs71*mu[0];
        const double clhs260 =     clhs56*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs261 =     clhs81*penalty_parameter*tangentetaslave(1,1);
        const double clhs262 =     clhs83*penalty_parameter*tangentxislave(1,1);
        const double clhs263 =     clhs88*normalslave(0,1)*penalty_parameter;
        const double clhs264 =     clhs90*normalslave(1,1)*penalty_parameter;
        const double clhs265 =     clhs65*clhs67*clhs71*clhs88*mu[0]*penalty_parameter;
        const double clhs266 =     clhs100*penalty_parameter*tangentetaslave(1,1);
        const double clhs267 =     clhs102*penalty_parameter*tangentxislave(1,1);
        const double clhs268 =     clhs109*normalslave(0,1)*penalty_parameter;
        const double clhs269 =     clhs113*normalslave(1,1)*penalty_parameter;
        const double clhs270 =     clhs109*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs271 =     clhs123*penalty_parameter*tangentetaslave(1,1);
        const double clhs272 =     clhs125*penalty_parameter*tangentxislave(1,1);
        const double clhs273 =     clhs130*normalslave(0,1)*penalty_parameter;
        const double clhs274 =     clhs132*normalslave(1,1)*penalty_parameter;
        const double clhs275 =     clhs130*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs276 =     clhs142*penalty_parameter*tangentetaslave(1,1);
        const double clhs277 =     clhs144*penalty_parameter*tangentxislave(1,1);
        const double clhs278 =     clhs149*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs151*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs149*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs281 =     clhs161*penalty_parameter*tangentetaslave(1,1);
        const double clhs282 =     clhs163*penalty_parameter*tangentxislave(1,1);
        const double clhs283 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs284 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs285 =     clhs168*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs286 =     clhs180*penalty_parameter*tangentetaslave(1,1);
        const double clhs287 =     clhs182*penalty_parameter*tangentxislave(1,1);
        const double clhs288 =     clhs187*normalslave(0,1)*penalty_parameter;
        const double clhs289 =     clhs189*normalslave(1,1)*penalty_parameter;
        const double clhs290 =     clhs187*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs291 =     clhs199*penalty_parameter*tangentetaslave(1,1);
        const double clhs292 =     clhs201*penalty_parameter*tangentxislave(1,1);
        const double clhs293 =     clhs206*normalslave(0,1)*penalty_parameter;
        const double clhs294 =     clhs208*normalslave(1,1)*penalty_parameter;
        const double clhs295 =     clhs206*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs296 =     clhs212*clhs65;
        const double clhs297 =     clhs216*clhs221*clhs65*clhs71*mu[0];
        const double clhs298 =     clhs220*clhs297 + clhs226 - clhs296;
        const double clhs299 =     std::pow(normalslave(0,1), 2)*scale_factor;
        const double clhs300 =     clhs227*clhs65;
        const double clhs301 =     clhs229*clhs67*clhs71*mu[0];
        const double clhs302 =     -clhs216*clhs301 + clhs232*clhs297 + clhs299 - clhs300;
        const double clhs303 =     clhs239*clhs241*clhs36*clhs65*clhs67*mu[0];
        const double clhs304 =     std::pow(normalslave(1,1), 2)*scale_factor;
        const double clhs305 =     clhs247*scale_factor;
        const double clhs306 =     clhs248*scale_factor;
        const double clhs307 =     clhs239*clhs249*clhs36*clhs65*clhs67*mu[0];
        const double clhs308 =     clhs243*clhs9 + clhs244*clhs9 + clhs245*clhs9;
        const double clhs309 =     clhs216*normalslave(0,0);
        const double clhs310 =     clhs38 - clhs39;
        const double clhs311 =     clhs310*normalslave(1,0);
        const double clhs312 =     clhs54 - clhs55;
        const double clhs313 =     clhs312*normalslave(0,0)*penalty_parameter;
        const double clhs314 =     clhs58 - clhs59;
        const double clhs315 =     clhs314*normalslave(1,0)*penalty_parameter;
        const double clhs316 =     clhs216*clhs64*clhs67*clhs71*mu[0];
        const double clhs317 =     clhs312*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs318 =     clhs107 - clhs108;
        const double clhs319 =     clhs318*normalslave(0,0)*penalty_parameter;
        const double clhs320 =     clhs111 - clhs112;
        const double clhs321 =     clhs320*normalslave(1,0)*penalty_parameter;
        const double clhs322 =     clhs318*clhs64*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs323 =     clhs221*clhs36*clhs64*clhs71*mu[0];
        const double clhs324 =     clhs213 - clhs215*clhs36 + clhs220*clhs323;
        const double clhs325 =     -clhs211 + clhs324;
        const double clhs326 =     -clhs225*clhs36;
        const double clhs327 =     -clhs224 + clhs326;
        const double clhs328 =     clhs228 + clhs232*clhs323;
        const double clhs329 =     clhs327 + clhs328;
        const double clhs330 =     clhs216*clhs239*clhs241*clhs64*clhs67*mu[0];
        const double clhs331 =     clhs243*clhs4 + clhs244*clhs4 + clhs245*clhs4;
        const double clhs332 =     clhs216*clhs239*clhs249*clhs64*clhs67*mu[0];
        const double clhs333 =     clhs216*normalslave(0,1);
        const double clhs334 =     clhs310*normalslave(1,1);
        const double clhs335 =     clhs312*normalslave(0,1)*penalty_parameter;
        const double clhs336 =     clhs314*normalslave(1,1)*penalty_parameter;
        const double clhs337 =     clhs216*clhs65*clhs67*clhs71*mu[0];
        const double clhs338 =     clhs312*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs339 =     clhs318*normalslave(0,1)*penalty_parameter;
        const double clhs340 =     clhs320*normalslave(1,1)*penalty_parameter;
        const double clhs341 =     clhs318*clhs65*clhs67*clhs71*mu[0]*penalty_parameter;
        const double clhs342 =     clhs221*clhs36*clhs65*clhs71*mu[0];
        const double clhs343 =     clhs220*clhs342 + clhs296;
        const double clhs344 =     clhs327 + clhs343;
        const double clhs345 =     clhs232*clhs342 + clhs300 - clhs301*clhs36;
        const double clhs346 =     -clhs299 + clhs345;
        const double clhs347 =     clhs216*clhs239*clhs241*clhs65*clhs67*mu[0];
        const double clhs348 =     clhs216*clhs239*clhs249*clhs65*clhs67*mu[0];
        const double clhs349 =     clhs243*clhs6 + clhs244*clhs6 + clhs245*clhs6;
        const double clhs350 =     clhs312*scale_factor;
        const double clhs351 =     0.5*clhs67*clhs71*mu[0];
        const double clhs352 =     -clhs217*clhs351 - clhs219*clhs351 + normalslave(0,0);
        const double clhs353 =     clhs88*scale_factor;
        const double clhs354 =     clhs318*scale_factor;
        const double clhs355 =     clhs130*scale_factor;
        const double clhs356 =     clhs149*scale_factor;
        const double clhs357 =     clhs168*scale_factor;
        const double clhs358 =     clhs187*scale_factor;
        const double clhs359 =     clhs206*scale_factor;
        const double clhs360 =     1.0/penalty_parameter;
        const double clhs361 =     0.5*clhs360*scale_factor;
        const double clhs362 =     clhs214*scale_factor + clhs324;
        const double clhs363 =     clhs218*scale_factor + clhs326;
        const double clhs364 =     clhs343 + clhs363;
        const double clhs365 =     clhs328 + clhs363;
        const double clhs366 =     clhs229*scale_factor + clhs345;
        const double clhs367 =     0.5*clhs216*clhs220*clhs239*clhs360*clhs67*mu[0]*scale_factor;
        const double clhs368 =     -clhs230*clhs351 - clhs231*clhs351 + normalslave(0,1);
        const double clhs369 =     0.5*clhs216*clhs232*clhs239*clhs360*clhs67*mu[0]*scale_factor;
    
        lhs(0,0)=clhs0*clhs48 + clhs0*clhs50 + clhs0*clhs61 + clhs1*clhs17 + clhs1*clhs20 - clhs1*clhs41 + clhs21*clhs57 - clhs21*clhs73 - clhs22*clhs37 + clhs22*clhs72;
        lhs(0,1)=clhs0*clhs82 + clhs0*clhs84 - clhs0*clhs91 + clhs17*clhs74 + clhs20*clhs74 - clhs21*clhs89 + clhs21*clhs92 - clhs37*clhs75 - clhs41*clhs74 + clhs72*clhs75;
        lhs(0,2)=clhs0*clhs101 + clhs0*clhs103 + clhs0*clhs114 + clhs110*clhs21 - clhs115*clhs21 + clhs17*clhs93 + clhs20*clhs93 - clhs37*clhs94 - clhs41*clhs93 + clhs72*clhs94;
        lhs(0,3)=clhs0*clhs124 + clhs0*clhs126 - clhs0*clhs133 + clhs116*clhs17 + clhs116*clhs20 - clhs116*clhs41 - clhs117*clhs37 + clhs117*clhs72 - clhs131*clhs21 + clhs134*clhs21;
        lhs(0,4)=clhs0*clhs143 + clhs0*clhs145 - clhs0*clhs152 + clhs135*clhs17 + clhs135*clhs20 - clhs135*clhs41 - clhs136*clhs37 + clhs136*clhs72 - clhs150*clhs21 + clhs153*clhs21;
        lhs(0,5)=clhs0*clhs162 + clhs0*clhs164 - clhs0*clhs171 + clhs154*clhs17 + clhs154*clhs20 - clhs154*clhs41 - clhs155*clhs37 + clhs155*clhs72 - clhs169*clhs21 + clhs172*clhs21;
        lhs(0,6)=clhs0*clhs181 + clhs0*clhs183 - clhs0*clhs190 + clhs17*clhs173 + clhs173*clhs20 - clhs173*clhs41 - clhs174*clhs37 + clhs174*clhs72 - clhs188*clhs21 + clhs191*clhs21;
        lhs(0,7)=clhs0*clhs200 + clhs0*clhs202 - clhs0*clhs209 + clhs17*clhs192 + clhs192*clhs20 - clhs192*clhs41 - clhs193*clhs37 + clhs193*clhs72 - clhs207*clhs21 + clhs21*clhs210;
        lhs(0,8)=clhs21*clhs223;
        lhs(0,9)=clhs21*clhs233;
        lhs(0,10)=clhs0*clhs234 + clhs0*clhs236 + clhs0*clhs238 - clhs21*clhs242;
        lhs(0,11)=-clhs21*clhs250 + clhs246;
        lhs(1,0)=clhs0*clhs255 + clhs0*clhs256 + clhs0*clhs258 + clhs1*clhs251 + clhs1*clhs252 - clhs1*clhs254 + clhs21*clhs257 - clhs21*clhs260 - clhs22*clhs253 + clhs22*clhs259;
        lhs(1,1)=clhs0*clhs261 + clhs0*clhs262 - clhs0*clhs264 - clhs21*clhs263 + clhs21*clhs265 + clhs251*clhs74 + clhs252*clhs74 - clhs253*clhs75 - clhs254*clhs74 + clhs259*clhs75;
        lhs(1,2)=clhs0*clhs266 + clhs0*clhs267 + clhs0*clhs269 + clhs21*clhs268 - clhs21*clhs270 + clhs251*clhs93 + clhs252*clhs93 - clhs253*clhs94 - clhs254*clhs93 + clhs259*clhs94;
        lhs(1,3)=clhs0*clhs271 + clhs0*clhs272 - clhs0*clhs274 + clhs116*clhs251 + clhs116*clhs252 - clhs116*clhs254 - clhs117*clhs253 + clhs117*clhs259 - clhs21*clhs273 + clhs21*clhs275;
        lhs(1,4)=clhs0*clhs276 + clhs0*clhs277 - clhs0*clhs279 + clhs135*clhs251 + clhs135*clhs252 - clhs135*clhs254 - clhs136*clhs253 + clhs136*clhs259 - clhs21*clhs278 + clhs21*clhs280;
        lhs(1,5)=clhs0*clhs281 + clhs0*clhs282 - clhs0*clhs284 + clhs154*clhs251 + clhs154*clhs252 - clhs154*clhs254 - clhs155*clhs253 + clhs155*clhs259 - clhs21*clhs283 + clhs21*clhs285;
        lhs(1,6)=clhs0*clhs286 + clhs0*clhs287 - clhs0*clhs289 + clhs173*clhs251 + clhs173*clhs252 - clhs173*clhs254 - clhs174*clhs253 + clhs174*clhs259 - clhs21*clhs288 + clhs21*clhs290;
        lhs(1,7)=clhs0*clhs291 + clhs0*clhs292 - clhs0*clhs294 + clhs192*clhs251 + clhs192*clhs252 - clhs192*clhs254 - clhs193*clhs253 + clhs193*clhs259 - clhs21*clhs293 + clhs21*clhs295;
        lhs(1,8)=clhs21*clhs298;
        lhs(1,9)=clhs21*clhs302;
        lhs(1,10)=-clhs21*clhs303 + clhs246;
        lhs(1,11)=clhs0*clhs304 + clhs0*clhs305 + clhs0*clhs306 - clhs21*clhs307;
        lhs(2,0)=clhs17*clhs44 + clhs20*clhs44 + clhs30*clhs57 - clhs30*clhs73 - clhs37*clhs53 - clhs41*clhs44 + clhs48*clhs9 + clhs50*clhs9 + clhs53*clhs72 + clhs61*clhs9;
        lhs(2,1)=clhs17*clhs78 + clhs20*clhs78 - clhs30*clhs89 + clhs30*clhs92 - clhs37*clhs87 - clhs41*clhs78 + clhs72*clhs87 + clhs82*clhs9 + clhs84*clhs9 - clhs9*clhs91;
        lhs(2,2)=clhs101*clhs9 + clhs103*clhs9 - clhs106*clhs37 + clhs106*clhs72 + clhs110*clhs30 + clhs114*clhs9 - clhs115*clhs30 + clhs17*clhs97 + clhs20*clhs97 - clhs41*clhs97;
        lhs(2,3)=clhs120*clhs17 + clhs120*clhs20 - clhs120*clhs41 + clhs124*clhs9 + clhs126*clhs9 - clhs129*clhs37 + clhs129*clhs72 - clhs131*clhs30 - clhs133*clhs9 + clhs134*clhs30;
        lhs(2,4)=clhs139*clhs17 + clhs139*clhs20 - clhs139*clhs41 + clhs143*clhs9 + clhs145*clhs9 - clhs148*clhs37 + clhs148*clhs72 - clhs150*clhs30 - clhs152*clhs9 + clhs153*clhs30;
        lhs(2,5)=clhs158*clhs17 + clhs158*clhs20 - clhs158*clhs41 + clhs162*clhs9 + clhs164*clhs9 - clhs167*clhs37 + clhs167*clhs72 - clhs169*clhs30 - clhs171*clhs9 + clhs172*clhs30;
        lhs(2,6)=clhs17*clhs177 + clhs177*clhs20 - clhs177*clhs41 + clhs181*clhs9 + clhs183*clhs9 - clhs186*clhs37 + clhs186*clhs72 - clhs188*clhs30 - clhs190*clhs9 + clhs191*clhs30;
        lhs(2,7)=clhs17*clhs196 + clhs196*clhs20 - clhs196*clhs41 + clhs200*clhs9 + clhs202*clhs9 - clhs205*clhs37 + clhs205*clhs72 - clhs207*clhs30 - clhs209*clhs9 + clhs210*clhs30;
        lhs(2,8)=clhs223*clhs30;
        lhs(2,9)=clhs233*clhs30;
        lhs(2,10)=clhs234*clhs9 + clhs236*clhs9 + clhs238*clhs9 - clhs242*clhs30;
        lhs(2,11)=-clhs250*clhs30 + clhs308;
        lhs(3,0)=clhs251*clhs44 + clhs252*clhs44 - clhs253*clhs53 - clhs254*clhs44 + clhs255*clhs9 + clhs256*clhs9 + clhs257*clhs30 + clhs258*clhs9 + clhs259*clhs53 - clhs260*clhs30;
        lhs(3,1)=clhs251*clhs78 + clhs252*clhs78 - clhs253*clhs87 - clhs254*clhs78 + clhs259*clhs87 + clhs261*clhs9 + clhs262*clhs9 - clhs263*clhs30 - clhs264*clhs9 + clhs265*clhs30;
        lhs(3,2)=-clhs106*clhs253 + clhs106*clhs259 + clhs251*clhs97 + clhs252*clhs97 - clhs254*clhs97 + clhs266*clhs9 + clhs267*clhs9 + clhs268*clhs30 + clhs269*clhs9 - clhs270*clhs30;
        lhs(3,3)=clhs120*clhs251 + clhs120*clhs252 - clhs120*clhs254 - clhs129*clhs253 + clhs129*clhs259 + clhs271*clhs9 + clhs272*clhs9 - clhs273*clhs30 - clhs274*clhs9 + clhs275*clhs30;
        lhs(3,4)=clhs139*clhs251 + clhs139*clhs252 - clhs139*clhs254 - clhs148*clhs253 + clhs148*clhs259 + clhs276*clhs9 + clhs277*clhs9 - clhs278*clhs30 - clhs279*clhs9 + clhs280*clhs30;
        lhs(3,5)=clhs158*clhs251 + clhs158*clhs252 - clhs158*clhs254 - clhs167*clhs253 + clhs167*clhs259 + clhs281*clhs9 + clhs282*clhs9 - clhs283*clhs30 - clhs284*clhs9 + clhs285*clhs30;
        lhs(3,6)=clhs177*clhs251 + clhs177*clhs252 - clhs177*clhs254 - clhs186*clhs253 + clhs186*clhs259 + clhs286*clhs9 + clhs287*clhs9 - clhs288*clhs30 - clhs289*clhs9 + clhs290*clhs30;
        lhs(3,7)=clhs196*clhs251 + clhs196*clhs252 - clhs196*clhs254 - clhs205*clhs253 + clhs205*clhs259 + clhs291*clhs9 + clhs292*clhs9 - clhs293*clhs30 - clhs294*clhs9 + clhs295*clhs30;
        lhs(3,8)=clhs298*clhs30;
        lhs(3,9)=clhs30*clhs302;
        lhs(3,10)=-clhs30*clhs303 + clhs308;
        lhs(3,11)=-clhs30*clhs307 + clhs304*clhs9 + clhs305*clhs9 + clhs306*clhs9;
        lhs(4,0)=-clhs17*clhs42 - clhs20*clhs42 + clhs25*clhs313 - clhs25*clhs317 - clhs309*clhs51 - clhs311*clhs42 + clhs315*clhs4 + clhs316*clhs51 - clhs4*clhs48 - clhs4*clhs50;
        lhs(4,1)=-clhs17*clhs76 - clhs20*clhs76 + clhs25*clhs89 - clhs25*clhs92 - clhs309*clhs85 - clhs311*clhs76 + clhs316*clhs85 - clhs4*clhs82 - clhs4*clhs84 + clhs4*clhs91;
        lhs(4,2)=-clhs101*clhs4 - clhs103*clhs4 - clhs104*clhs309 + clhs104*clhs316 - clhs17*clhs95 - clhs20*clhs95 + clhs25*clhs319 - clhs25*clhs322 - clhs311*clhs95 + clhs321*clhs4;
        lhs(4,3)=-clhs118*clhs17 - clhs118*clhs20 - clhs118*clhs311 - clhs124*clhs4 - clhs126*clhs4 - clhs127*clhs309 + clhs127*clhs316 + clhs131*clhs25 + clhs133*clhs4 - clhs134*clhs25;
        lhs(4,4)=-clhs137*clhs17 - clhs137*clhs20 - clhs137*clhs311 - clhs143*clhs4 - clhs145*clhs4 - clhs146*clhs309 + clhs146*clhs316 + clhs150*clhs25 + clhs152*clhs4 - clhs153*clhs25;
        lhs(4,5)=-clhs156*clhs17 - clhs156*clhs20 - clhs156*clhs311 - clhs162*clhs4 - clhs164*clhs4 - clhs165*clhs309 + clhs165*clhs316 + clhs169*clhs25 + clhs171*clhs4 - clhs172*clhs25;
        lhs(4,6)=-clhs17*clhs175 - clhs175*clhs20 - clhs175*clhs311 - clhs181*clhs4 - clhs183*clhs4 - clhs184*clhs309 + clhs184*clhs316 + clhs188*clhs25 + clhs190*clhs4 - clhs191*clhs25;
        lhs(4,7)=-clhs17*clhs194 - clhs194*clhs20 - clhs194*clhs311 - clhs200*clhs4 - clhs202*clhs4 - clhs203*clhs309 + clhs203*clhs316 + clhs207*clhs25 + clhs209*clhs4 - clhs210*clhs25;
        lhs(4,8)=clhs25*clhs325;
        lhs(4,9)=clhs25*clhs329;
        lhs(4,10)=-clhs234*clhs4 - clhs236*clhs4 - clhs238*clhs4 - clhs25*clhs330;
        lhs(4,11)=-clhs25*clhs332 - clhs331;
        lhs(5,0)=clhs25*clhs335 - clhs25*clhs338 - clhs251*clhs42 - clhs252*clhs42 - clhs255*clhs4 - clhs256*clhs4 - clhs333*clhs51 - clhs334*clhs42 + clhs336*clhs4 + clhs337*clhs51;
        lhs(5,1)=clhs25*clhs263 - clhs25*clhs265 - clhs251*clhs76 - clhs252*clhs76 - clhs261*clhs4 - clhs262*clhs4 + clhs264*clhs4 - clhs333*clhs85 - clhs334*clhs76 + clhs337*clhs85;
        lhs(5,2)=-clhs104*clhs333 + clhs104*clhs337 + clhs25*clhs339 - clhs25*clhs341 - clhs251*clhs95 - clhs252*clhs95 - clhs266*clhs4 - clhs267*clhs4 - clhs334*clhs95 + clhs340*clhs4;
        lhs(5,3)=-clhs118*clhs251 - clhs118*clhs252 - clhs118*clhs334 - clhs127*clhs333 + clhs127*clhs337 + clhs25*clhs273 - clhs25*clhs275 - clhs271*clhs4 - clhs272*clhs4 + clhs274*clhs4;
        lhs(5,4)=-clhs137*clhs251 - clhs137*clhs252 - clhs137*clhs334 - clhs146*clhs333 + clhs146*clhs337 + clhs25*clhs278 - clhs25*clhs280 - clhs276*clhs4 - clhs277*clhs4 + clhs279*clhs4;
        lhs(5,5)=-clhs156*clhs251 - clhs156*clhs252 - clhs156*clhs334 - clhs165*clhs333 + clhs165*clhs337 + clhs25*clhs283 - clhs25*clhs285 - clhs281*clhs4 - clhs282*clhs4 + clhs284*clhs4;
        lhs(5,6)=-clhs175*clhs251 - clhs175*clhs252 - clhs175*clhs334 - clhs184*clhs333 + clhs184*clhs337 + clhs25*clhs288 - clhs25*clhs290 - clhs286*clhs4 - clhs287*clhs4 + clhs289*clhs4;
        lhs(5,7)=-clhs194*clhs251 - clhs194*clhs252 - clhs194*clhs334 - clhs203*clhs333 + clhs203*clhs337 + clhs25*clhs293 - clhs25*clhs295 - clhs291*clhs4 - clhs292*clhs4 + clhs294*clhs4;
        lhs(5,8)=clhs25*clhs344;
        lhs(5,9)=clhs25*clhs346;
        lhs(5,10)=-clhs25*clhs347 - clhs331;
        lhs(5,11)=-clhs25*clhs348 - clhs304*clhs4 - clhs305*clhs4 - clhs306*clhs4;
        lhs(6,0)=-clhs17*clhs43 - clhs20*clhs43 + clhs27*clhs313 - clhs27*clhs317 - clhs309*clhs52 - clhs311*clhs43 + clhs315*clhs6 + clhs316*clhs52 - clhs48*clhs6 - clhs50*clhs6;
        lhs(6,1)=-clhs17*clhs77 - clhs20*clhs77 + clhs27*clhs89 - clhs27*clhs92 - clhs309*clhs86 - clhs311*clhs77 + clhs316*clhs86 - clhs6*clhs82 - clhs6*clhs84 + clhs6*clhs91;
        lhs(6,2)=-clhs101*clhs6 - clhs103*clhs6 - clhs105*clhs309 + clhs105*clhs316 - clhs17*clhs96 - clhs20*clhs96 + clhs27*clhs319 - clhs27*clhs322 - clhs311*clhs96 + clhs321*clhs6;
        lhs(6,3)=-clhs119*clhs17 - clhs119*clhs20 - clhs119*clhs311 - clhs124*clhs6 - clhs126*clhs6 - clhs128*clhs309 + clhs128*clhs316 + clhs131*clhs27 + clhs133*clhs6 - clhs134*clhs27;
        lhs(6,4)=-clhs138*clhs17 - clhs138*clhs20 - clhs138*clhs311 - clhs143*clhs6 - clhs145*clhs6 - clhs147*clhs309 + clhs147*clhs316 + clhs150*clhs27 + clhs152*clhs6 - clhs153*clhs27;
        lhs(6,5)=-clhs157*clhs17 - clhs157*clhs20 - clhs157*clhs311 - clhs162*clhs6 - clhs164*clhs6 - clhs166*clhs309 + clhs166*clhs316 + clhs169*clhs27 + clhs171*clhs6 - clhs172*clhs27;
        lhs(6,6)=-clhs17*clhs176 - clhs176*clhs20 - clhs176*clhs311 - clhs181*clhs6 - clhs183*clhs6 - clhs185*clhs309 + clhs185*clhs316 + clhs188*clhs27 + clhs190*clhs6 - clhs191*clhs27;
        lhs(6,7)=-clhs17*clhs195 - clhs195*clhs20 - clhs195*clhs311 - clhs200*clhs6 - clhs202*clhs6 - clhs204*clhs309 + clhs204*clhs316 + clhs207*clhs27 + clhs209*clhs6 - clhs210*clhs27;
        lhs(6,8)=clhs27*clhs325;
        lhs(6,9)=clhs27*clhs329;
        lhs(6,10)=-clhs234*clhs6 - clhs236*clhs6 - clhs238*clhs6 - clhs27*clhs330;
        lhs(6,11)=-clhs27*clhs332 - clhs349;
        lhs(7,0)=-clhs251*clhs43 - clhs252*clhs43 - clhs255*clhs6 - clhs256*clhs6 + clhs27*clhs335 - clhs27*clhs338 - clhs333*clhs52 - clhs334*clhs43 + clhs336*clhs6 + clhs337*clhs52;
        lhs(7,1)=-clhs251*clhs77 - clhs252*clhs77 - clhs261*clhs6 - clhs262*clhs6 + clhs263*clhs27 + clhs264*clhs6 - clhs265*clhs27 - clhs333*clhs86 - clhs334*clhs77 + clhs337*clhs86;
        lhs(7,2)=-clhs105*clhs333 + clhs105*clhs337 - clhs251*clhs96 - clhs252*clhs96 - clhs266*clhs6 - clhs267*clhs6 + clhs27*clhs339 - clhs27*clhs341 - clhs334*clhs96 + clhs340*clhs6;
        lhs(7,3)=-clhs119*clhs251 - clhs119*clhs252 - clhs119*clhs334 - clhs128*clhs333 + clhs128*clhs337 + clhs27*clhs273 - clhs27*clhs275 - clhs271*clhs6 - clhs272*clhs6 + clhs274*clhs6;
        lhs(7,4)=-clhs138*clhs251 - clhs138*clhs252 - clhs138*clhs334 - clhs147*clhs333 + clhs147*clhs337 + clhs27*clhs278 - clhs27*clhs280 - clhs276*clhs6 - clhs277*clhs6 + clhs279*clhs6;
        lhs(7,5)=-clhs157*clhs251 - clhs157*clhs252 - clhs157*clhs334 - clhs166*clhs333 + clhs166*clhs337 + clhs27*clhs283 - clhs27*clhs285 - clhs281*clhs6 - clhs282*clhs6 + clhs284*clhs6;
        lhs(7,6)=-clhs176*clhs251 - clhs176*clhs252 - clhs176*clhs334 - clhs185*clhs333 + clhs185*clhs337 + clhs27*clhs288 - clhs27*clhs290 - clhs286*clhs6 - clhs287*clhs6 + clhs289*clhs6;
        lhs(7,7)=-clhs195*clhs251 - clhs195*clhs252 - clhs195*clhs334 - clhs204*clhs333 + clhs204*clhs337 + clhs27*clhs293 - clhs27*clhs295 - clhs291*clhs6 - clhs292*clhs6 + clhs294*clhs6;
        lhs(7,8)=clhs27*clhs344;
        lhs(7,9)=clhs27*clhs346;
        lhs(7,10)=-clhs27*clhs347 - clhs349;
        lhs(7,11)=-clhs27*clhs348 - clhs304*clhs6 - clhs305*clhs6 - clhs306*clhs6;
        lhs(8,0)=clhs350*clhs352;
        lhs(8,1)=clhs352*clhs353;
        lhs(8,2)=clhs352*clhs354;
        lhs(8,3)=clhs352*clhs355;
        lhs(8,4)=clhs352*clhs356;
        lhs(8,5)=clhs352*clhs357;
        lhs(8,6)=clhs352*clhs358;
        lhs(8,7)=clhs352*clhs359;
        lhs(8,8)=clhs361*(clhs214*clhs362 + clhs218*clhs364);
        lhs(8,9)=clhs361*(clhs214*clhs365 + clhs218*clhs366);
        lhs(8,10)=-clhs241*clhs367;
        lhs(8,11)=-clhs249*clhs367;
        lhs(9,0)=clhs350*clhs368;
        lhs(9,1)=clhs353*clhs368;
        lhs(9,2)=clhs354*clhs368;
        lhs(9,3)=clhs355*clhs368;
        lhs(9,4)=clhs356*clhs368;
        lhs(9,5)=clhs357*clhs368;
        lhs(9,6)=clhs358*clhs368;
        lhs(9,7)=clhs359*clhs368;
        lhs(9,8)=clhs361*(clhs218*clhs362 + clhs229*clhs364);
        lhs(9,9)=clhs361*(clhs218*clhs365 + clhs229*clhs366);
        lhs(9,10)=-clhs241*clhs369;
        lhs(9,11)=-clhs249*clhs369;
        lhs(10,0)=scale_factor*(clhs314*normalslave(1,0) - clhs47*tangentetaslave(1,0) - clhs49*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs81*tangentetaslave(1,0) - clhs83*tangentxislave(1,0) + clhs90*normalslave(1,0));
        lhs(10,2)=scale_factor*(-clhs100*tangentetaslave(1,0) - clhs102*tangentxislave(1,0) + clhs320*normalslave(1,0));
        lhs(10,3)=scale_factor*(-clhs123*tangentetaslave(1,0) - clhs125*tangentxislave(1,0) + clhs132*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs142*tangentetaslave(1,0) - clhs144*tangentxislave(1,0) + clhs151*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs161*tangentetaslave(1,0) - clhs163*tangentxislave(1,0) + clhs170*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs180*tangentetaslave(1,0) - clhs182*tangentxislave(1,0) + clhs189*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs199*tangentetaslave(1,0) - clhs201*tangentxislave(1,0) + clhs208*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs314*normalslave(1,1) - clhs47*tangentetaslave(1,1) - clhs49*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs81*tangentetaslave(1,1) - clhs83*tangentxislave(1,1) + clhs90*normalslave(1,1));
        lhs(11,2)=scale_factor*(-clhs100*tangentetaslave(1,1) - clhs102*tangentxislave(1,1) + clhs320*normalslave(1,1));
        lhs(11,3)=scale_factor*(-clhs123*tangentetaslave(1,1) - clhs125*tangentxislave(1,1) + clhs132*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs142*tangentetaslave(1,1) - clhs144*tangentxislave(1,1) + clhs151*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs161*tangentetaslave(1,1) - clhs163*tangentxislave(1,1) + clhs170*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs180*tangentetaslave(1,1) - clhs182*tangentxislave(1,1) + clhs189*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs199*tangentetaslave(1,1) - clhs201*tangentxislave(1,1) + clhs208*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }
    else if (rActiveInactive == 8 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(0,1) + clhs9*tangentetaslave(0,0)) + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double clhs16 =     clhs15*tangentetaslave(0,0);
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs18 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs21 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs22 =     -clhs17*clhs6 + clhs19*clhs2 + clhs20*clhs4 - clhs21*clhs7;
        const double clhs23 =     clhs10*clhs19 + clhs11*clhs20 - clhs12*clhs17 - clhs13*clhs21;
        const double clhs24 =     penalty_parameter*(clhs22*tangentetaslave(1,0) + clhs23*tangentetaslave(1,1)) + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double clhs25 =     clhs24*tangentetaslave(1,0);
        const double clhs26 =     penalty_parameter*(clhs14*tangentxislave(0,1) + clhs9*tangentxislave(0,0)) + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double clhs27 =     clhs26*tangentxislave(0,0);
        const double clhs28 =     penalty_parameter*(clhs22*tangentxislave(1,0) + clhs23*tangentxislave(1,1)) + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double clhs29 =     clhs28*tangentxislave(1,0);
        const double clhs30 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs31 =     X1(0,0) + u1(0,0);
        const double clhs32 =     X1(1,0) + u1(1,0);
        const double clhs33 =     X2(0,0) + u2(0,0);
        const double clhs34 =     X2(1,0) + u2(1,0);
        const double clhs35 =     X1(0,1) + u1(0,1);
        const double clhs36 =     X1(1,1) + u1(1,1);
        const double clhs37 =     X2(0,1) + u2(0,1);
        const double clhs38 =     X2(1,1) + u2(1,1);
        const double clhs39 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs33 + clhs3*clhs31 + clhs32*clhs5 - clhs34*clhs8) + normalslave(0,1)*(-clhs0*clhs37 + clhs3*clhs35 + clhs36*clhs5 - clhs38*clhs8));
        const double clhs40 =     -clhs30 + clhs39;
        const double clhs41 =     clhs40*normalslave(0,0);
        const double clhs42 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs43 =     penalty_parameter*(normalslave(1,0)*(-clhs17*clhs33 + clhs19*clhs31 + clhs20*clhs32 - clhs21*clhs34) + normalslave(1,1)*(-clhs17*clhs37 + clhs19*clhs35 + clhs20*clhs36 - clhs21*clhs38));
        const double clhs44 =     -clhs42 + clhs43;
        const double clhs45 =     clhs44*normalslave(1,0);
        const double clhs46 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs48 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs49 =     -clhs1*clhs6 + clhs2*clhs46 + clhs4*clhs47 - clhs48*clhs7;
        const double clhs50 =     -clhs1*clhs12 + clhs10*clhs46 + clhs11*clhs47 - clhs13*clhs48;
        const double clhs51 =     clhs49*tangentetaslave(0,0) + clhs50*tangentetaslave(0,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentetaslave(0,0);
        const double clhs53 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs54 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs55 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs56 =     -clhs18*clhs6 + clhs2*clhs53 + clhs4*clhs54 - clhs55*clhs7;
        const double clhs57 =     clhs10*clhs53 + clhs11*clhs54 - clhs12*clhs18 - clhs13*clhs55;
        const double clhs58 =     clhs56*tangentetaslave(1,0) + clhs57*tangentetaslave(1,1);
        const double clhs59 =     clhs58*penalty_parameter*tangentetaslave(1,0);
        const double clhs60 =     clhs49*tangentxislave(0,0) + clhs50*tangentxislave(0,1);
        const double clhs61 =     clhs60*penalty_parameter*tangentxislave(0,0);
        const double clhs62 =     clhs56*tangentxislave(1,0) + clhs57*tangentxislave(1,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentxislave(1,0);
        const double clhs64 =     normalslave(0,1)*(-clhs1*clhs37 + clhs35*clhs46 + clhs36*clhs47 - clhs38*clhs48);
        const double clhs65 =     normalslave(0,0)*(clhs0 + clhs1*clhs33 - clhs31*clhs46 - clhs32*clhs47 + clhs34*clhs48);
        const double clhs66 =     -clhs64 + clhs65;
        const double clhs67 =     clhs66*normalslave(0,0)*penalty_parameter;
        const double clhs68 =     normalslave(1,1)*(-clhs18*clhs37 + clhs35*clhs53 + clhs36*clhs54 - clhs38*clhs55);
        const double clhs69 =     normalslave(1,0)*(clhs17 + clhs18*clhs33 - clhs31*clhs53 - clhs32*clhs54 + clhs34*clhs55);
        const double clhs70 =     -clhs68 + clhs69;
        const double clhs71 =     clhs70*normalslave(1,0)*penalty_parameter;
        const double clhs72 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs73 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs74 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs75 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs76 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs77 =     clhs2*clhs74 + clhs4*clhs75 - clhs6*clhs72 - clhs7*clhs76;
        const double clhs78 =     clhs10*clhs74 + clhs11*clhs75 - clhs12*clhs72 - clhs13*clhs76;
        const double clhs79 =     clhs77*tangentetaslave(0,0) + clhs78*tangentetaslave(0,1);
        const double clhs80 =     clhs79*penalty_parameter*tangentetaslave(0,0);
        const double clhs81 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs82 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     clhs2*clhs81 + clhs4*clhs82 - clhs6*clhs73 - clhs7*clhs83;
        const double clhs85 =     clhs10*clhs81 + clhs11*clhs82 - clhs12*clhs73 - clhs13*clhs83;
        const double clhs86 =     clhs84*tangentetaslave(1,0) + clhs85*tangentetaslave(1,1);
        const double clhs87 =     clhs86*penalty_parameter*tangentetaslave(1,0);
        const double clhs88 =     clhs77*tangentxislave(0,0) + clhs78*tangentxislave(0,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentxislave(0,0);
        const double clhs90 =     clhs84*tangentxislave(1,0) + clhs85*tangentxislave(1,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(1,0);
        const double clhs92 =     normalslave(0,0)*(clhs31*clhs74 + clhs32*clhs75 - clhs33*clhs72 - clhs34*clhs76) - normalslave(0,1)*(clhs0 - clhs35*clhs74 - clhs36*clhs75 + clhs37*clhs72 + clhs38*clhs76);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     normalslave(1,0)*(clhs31*clhs81 + clhs32*clhs82 - clhs33*clhs73 - clhs34*clhs83) - normalslave(1,1)*(clhs17 - clhs35*clhs81 - clhs36*clhs82 + clhs37*clhs73 + clhs38*clhs83);
        const double clhs95 =     clhs94*normalslave(1,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs97 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs98 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs99 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs100 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs101 =     -clhs100*clhs7 + clhs2*clhs98 + clhs4*clhs99 - clhs6*clhs96;
        const double clhs102 =     clhs10*clhs98 - clhs100*clhs13 + clhs11*clhs99 - clhs12*clhs96;
        const double clhs103 =     clhs101*tangentetaslave(0,0) + clhs102*tangentetaslave(0,1);
        const double clhs104 =     clhs103*penalty_parameter*tangentetaslave(0,0);
        const double clhs105 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs106 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs107 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs108 =     clhs105*clhs2 + clhs106*clhs4 - clhs107*clhs7 - clhs6*clhs97;
        const double clhs109 =     clhs10*clhs105 + clhs106*clhs11 - clhs107*clhs13 - clhs12*clhs97;
        const double clhs110 =     clhs108*tangentetaslave(1,0) + clhs109*tangentetaslave(1,1);
        const double clhs111 =     clhs110*penalty_parameter*tangentetaslave(1,0);
        const double clhs112 =     clhs101*tangentxislave(0,0) + clhs102*tangentxislave(0,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentxislave(0,0);
        const double clhs114 =     clhs108*tangentxislave(1,0) + clhs109*tangentxislave(1,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(1,0);
        const double clhs116 =     normalslave(0,1)*(-clhs100*clhs38 + clhs35*clhs98 + clhs36*clhs99 - clhs37*clhs96);
        const double clhs117 =     normalslave(0,0)*(clhs100*clhs34 - clhs31*clhs98 - clhs32*clhs99 + clhs33*clhs96 + clhs8);
        const double clhs118 =     -clhs116 + clhs117;
        const double clhs119 =     clhs118*normalslave(0,0)*penalty_parameter;
        const double clhs120 =     normalslave(1,1)*(clhs105*clhs35 + clhs106*clhs36 - clhs107*clhs38 - clhs37*clhs97);
        const double clhs121 =     normalslave(1,0)*(-clhs105*clhs31 - clhs106*clhs32 + clhs107*clhs34 + clhs21 + clhs33*clhs97);
        const double clhs122 =     -clhs120 + clhs121;
        const double clhs123 =     clhs122*normalslave(1,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs125 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs126 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs128 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs129 =     -clhs124*clhs6 + clhs126*clhs2 + clhs127*clhs4 - clhs128*clhs7;
        const double clhs130 =     clhs10*clhs126 + clhs11*clhs127 - clhs12*clhs124 - clhs128*clhs13;
        const double clhs131 =     clhs129*tangentetaslave(0,0) + clhs130*tangentetaslave(0,1);
        const double clhs132 =     clhs131*penalty_parameter*tangentetaslave(0,0);
        const double clhs133 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs134 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs135 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs136 =     -clhs125*clhs6 + clhs133*clhs2 + clhs134*clhs4 - clhs135*clhs7;
        const double clhs137 =     clhs10*clhs133 + clhs11*clhs134 - clhs12*clhs125 - clhs13*clhs135;
        const double clhs138 =     clhs136*tangentetaslave(1,0) + clhs137*tangentetaslave(1,1);
        const double clhs139 =     clhs138*penalty_parameter*tangentetaslave(1,0);
        const double clhs140 =     clhs129*tangentxislave(0,0) + clhs130*tangentxislave(0,1);
        const double clhs141 =     clhs140*penalty_parameter*tangentxislave(0,0);
        const double clhs142 =     clhs136*tangentxislave(1,0) + clhs137*tangentxislave(1,1);
        const double clhs143 =     clhs142*penalty_parameter*tangentxislave(1,0);
        const double clhs144 =     normalslave(0,0)*(-clhs124*clhs33 + clhs126*clhs31 + clhs127*clhs32 - clhs128*clhs34) - normalslave(0,1)*(clhs124*clhs37 - clhs126*clhs35 - clhs127*clhs36 + clhs128*clhs38 + clhs8);
        const double clhs145 =     clhs144*normalslave(0,0)*penalty_parameter;
        const double clhs146 =     normalslave(1,0)*(-clhs125*clhs33 + clhs133*clhs31 + clhs134*clhs32 - clhs135*clhs34) - normalslave(1,1)*(clhs125*clhs37 - clhs133*clhs35 - clhs134*clhs36 + clhs135*clhs38 + clhs21);
        const double clhs147 =     clhs146*normalslave(1,0)*penalty_parameter;
        const double clhs148 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs150 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs151 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs152 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs153 =     -clhs148*clhs6 + clhs150*clhs2 + clhs151*clhs4 - clhs152*clhs7;
        const double clhs154 =     clhs10*clhs150 + clhs11*clhs151 - clhs12*clhs148 - clhs13*clhs152;
        const double clhs155 =     clhs153*tangentetaslave(0,0) + clhs154*tangentetaslave(0,1);
        const double clhs156 =     clhs155*penalty_parameter*tangentetaslave(0,0);
        const double clhs157 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs158 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs159 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs160 =     -clhs149*clhs6 + clhs157*clhs2 + clhs158*clhs4 - clhs159*clhs7;
        const double clhs161 =     clhs10*clhs157 + clhs11*clhs158 - clhs12*clhs149 - clhs13*clhs159;
        const double clhs162 =     clhs160*tangentetaslave(1,0) + clhs161*tangentetaslave(1,1);
        const double clhs163 =     clhs162*penalty_parameter*tangentetaslave(1,0);
        const double clhs164 =     clhs153*tangentxislave(0,0) + clhs154*tangentxislave(0,1);
        const double clhs165 =     clhs164*penalty_parameter*tangentxislave(0,0);
        const double clhs166 =     clhs160*tangentxislave(1,0) + clhs161*tangentxislave(1,1);
        const double clhs167 =     clhs166*penalty_parameter*tangentxislave(1,0);
        const double clhs168 =     normalslave(0,0)*(-clhs148*clhs33 + clhs150*clhs31 + clhs151*clhs32 - clhs152*clhs34 + clhs3) + normalslave(0,1)*(-clhs148*clhs37 + clhs150*clhs35 + clhs151*clhs36 - clhs152*clhs38);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     normalslave(1,0)*(-clhs149*clhs33 + clhs157*clhs31 + clhs158*clhs32 - clhs159*clhs34 + clhs19) + normalslave(1,1)*(-clhs149*clhs37 + clhs157*clhs35 + clhs158*clhs36 - clhs159*clhs38);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs173 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs174 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs175 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs176 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs177 =     -clhs172*clhs6 + clhs174*clhs2 + clhs175*clhs4 - clhs176*clhs7;
        const double clhs178 =     clhs10*clhs174 + clhs11*clhs175 - clhs12*clhs172 - clhs13*clhs176;
        const double clhs179 =     clhs177*tangentetaslave(0,0) + clhs178*tangentetaslave(0,1);
        const double clhs180 =     clhs179*penalty_parameter*tangentetaslave(0,0);
        const double clhs181 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs182 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs183 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs184 =     -clhs173*clhs6 + clhs181*clhs2 + clhs182*clhs4 - clhs183*clhs7;
        const double clhs185 =     clhs10*clhs181 + clhs11*clhs182 - clhs12*clhs173 - clhs13*clhs183;
        const double clhs186 =     clhs184*tangentetaslave(1,0) + clhs185*tangentetaslave(1,1);
        const double clhs187 =     clhs186*penalty_parameter*tangentetaslave(1,0);
        const double clhs188 =     clhs177*tangentxislave(0,0) + clhs178*tangentxislave(0,1);
        const double clhs189 =     clhs188*penalty_parameter*tangentxislave(0,0);
        const double clhs190 =     clhs184*tangentxislave(1,0) + clhs185*tangentxislave(1,1);
        const double clhs191 =     clhs190*penalty_parameter*tangentxislave(1,0);
        const double clhs192 =     normalslave(0,0)*(-clhs172*clhs33 + clhs174*clhs31 + clhs175*clhs32 - clhs176*clhs34) + normalslave(0,1)*(-clhs172*clhs37 + clhs174*clhs35 + clhs175*clhs36 - clhs176*clhs38 + clhs3);
        const double clhs193 =     clhs192*normalslave(0,0)*penalty_parameter;
        const double clhs194 =     normalslave(1,0)*(-clhs173*clhs33 + clhs181*clhs31 + clhs182*clhs32 - clhs183*clhs34) + normalslave(1,1)*(-clhs173*clhs37 + clhs181*clhs35 + clhs182*clhs36 - clhs183*clhs38 + clhs19);
        const double clhs195 =     clhs194*normalslave(1,0)*penalty_parameter;
        const double clhs196 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs197 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs198 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs199 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs200 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs201 =     -clhs196*clhs6 + clhs198*clhs2 + clhs199*clhs4 - clhs200*clhs7;
        const double clhs202 =     clhs10*clhs198 + clhs11*clhs199 - clhs12*clhs196 - clhs13*clhs200;
        const double clhs203 =     clhs201*tangentetaslave(0,0) + clhs202*tangentetaslave(0,1);
        const double clhs204 =     clhs203*penalty_parameter*tangentetaslave(0,0);
        const double clhs205 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs206 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs207 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs208 =     -clhs197*clhs6 + clhs2*clhs205 + clhs206*clhs4 - clhs207*clhs7;
        const double clhs209 =     clhs10*clhs205 + clhs11*clhs206 - clhs12*clhs197 - clhs13*clhs207;
        const double clhs210 =     clhs208*tangentetaslave(1,0) + clhs209*tangentetaslave(1,1);
        const double clhs211 =     clhs210*penalty_parameter*tangentetaslave(1,0);
        const double clhs212 =     clhs201*tangentxislave(0,0) + clhs202*tangentxislave(0,1);
        const double clhs213 =     clhs212*penalty_parameter*tangentxislave(0,0);
        const double clhs214 =     clhs208*tangentxislave(1,0) + clhs209*tangentxislave(1,1);
        const double clhs215 =     clhs214*penalty_parameter*tangentxislave(1,0);
        const double clhs216 =     normalslave(0,0)*(-clhs196*clhs33 + clhs198*clhs31 + clhs199*clhs32 - clhs200*clhs34 + clhs5) + normalslave(0,1)*(-clhs196*clhs37 + clhs198*clhs35 + clhs199*clhs36 - clhs200*clhs38);
        const double clhs217 =     clhs216*normalslave(0,0)*penalty_parameter;
        const double clhs218 =     normalslave(1,0)*(-clhs197*clhs33 + clhs20 + clhs205*clhs31 + clhs206*clhs32 - clhs207*clhs34) + normalslave(1,1)*(-clhs197*clhs37 + clhs205*clhs35 + clhs206*clhs36 - clhs207*clhs38);
        const double clhs219 =     clhs218*normalslave(1,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs221 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs222 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs223 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs224 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs225 =     clhs2*clhs222 - clhs220*clhs6 + clhs223*clhs4 - clhs224*clhs7;
        const double clhs226 =     clhs10*clhs222 + clhs11*clhs223 - clhs12*clhs220 - clhs13*clhs224;
        const double clhs227 =     clhs225*tangentetaslave(0,0) + clhs226*tangentetaslave(0,1);
        const double clhs228 =     clhs227*penalty_parameter*tangentetaslave(0,0);
        const double clhs229 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs230 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs231 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs232 =     clhs2*clhs229 - clhs221*clhs6 + clhs230*clhs4 - clhs231*clhs7;
        const double clhs233 =     clhs10*clhs229 + clhs11*clhs230 - clhs12*clhs221 - clhs13*clhs231;
        const double clhs234 =     clhs232*tangentetaslave(1,0) + clhs233*tangentetaslave(1,1);
        const double clhs235 =     clhs234*penalty_parameter*tangentetaslave(1,0);
        const double clhs236 =     clhs225*tangentxislave(0,0) + clhs226*tangentxislave(0,1);
        const double clhs237 =     clhs236*penalty_parameter*tangentxislave(0,0);
        const double clhs238 =     clhs232*tangentxislave(1,0) + clhs233*tangentxislave(1,1);
        const double clhs239 =     clhs238*penalty_parameter*tangentxislave(1,0);
        const double clhs240 =     normalslave(0,0)*(-clhs220*clhs33 + clhs222*clhs31 + clhs223*clhs32 - clhs224*clhs34) + normalslave(0,1)*(-clhs220*clhs37 + clhs222*clhs35 + clhs223*clhs36 - clhs224*clhs38 + clhs5);
        const double clhs241 =     clhs240*normalslave(0,0)*penalty_parameter;
        const double clhs242 =     normalslave(1,0)*(-clhs221*clhs33 + clhs229*clhs31 + clhs230*clhs32 - clhs231*clhs34) + normalslave(1,1)*(clhs20 - clhs221*clhs37 + clhs229*clhs35 + clhs230*clhs36 - clhs231*clhs38);
        const double clhs243 =     clhs242*normalslave(1,0)*penalty_parameter;
        const double clhs244 =     scale_factor*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        const double clhs245 =     scale_factor*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs246 =     clhs0*clhs245;
        const double clhs247 =     scale_factor*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        const double clhs248 =     scale_factor*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
        const double clhs249 =     clhs17*clhs248;
        const double clhs250 =     clhs15*tangentetaslave(0,1);
        const double clhs251 =     clhs24*tangentetaslave(1,1);
        const double clhs252 =     clhs26*tangentxislave(0,1);
        const double clhs253 =     clhs28*tangentxislave(1,1);
        const double clhs254 =     clhs40*normalslave(0,1);
        const double clhs255 =     clhs44*normalslave(1,1);
        const double clhs256 =     clhs51*penalty_parameter*tangentetaslave(0,1);
        const double clhs257 =     clhs58*penalty_parameter*tangentetaslave(1,1);
        const double clhs258 =     clhs60*penalty_parameter*tangentxislave(0,1);
        const double clhs259 =     clhs62*penalty_parameter*tangentxislave(1,1);
        const double clhs260 =     clhs66*normalslave(0,1)*penalty_parameter;
        const double clhs261 =     clhs70*normalslave(1,1)*penalty_parameter;
        const double clhs262 =     clhs79*penalty_parameter*tangentetaslave(0,1);
        const double clhs263 =     clhs86*penalty_parameter*tangentetaslave(1,1);
        const double clhs264 =     clhs88*penalty_parameter*tangentxislave(0,1);
        const double clhs265 =     clhs90*penalty_parameter*tangentxislave(1,1);
        const double clhs266 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs267 =     clhs94*normalslave(1,1)*penalty_parameter;
        const double clhs268 =     clhs103*penalty_parameter*tangentetaslave(0,1);
        const double clhs269 =     clhs110*penalty_parameter*tangentetaslave(1,1);
        const double clhs270 =     clhs112*penalty_parameter*tangentxislave(0,1);
        const double clhs271 =     clhs114*penalty_parameter*tangentxislave(1,1);
        const double clhs272 =     clhs118*normalslave(0,1)*penalty_parameter;
        const double clhs273 =     clhs122*normalslave(1,1)*penalty_parameter;
        const double clhs274 =     clhs131*penalty_parameter*tangentetaslave(0,1);
        const double clhs275 =     clhs138*penalty_parameter*tangentetaslave(1,1);
        const double clhs276 =     clhs140*penalty_parameter*tangentxislave(0,1);
        const double clhs277 =     clhs142*penalty_parameter*tangentxislave(1,1);
        const double clhs278 =     clhs144*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs146*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs155*penalty_parameter*tangentetaslave(0,1);
        const double clhs281 =     clhs162*penalty_parameter*tangentetaslave(1,1);
        const double clhs282 =     clhs164*penalty_parameter*tangentxislave(0,1);
        const double clhs283 =     clhs166*penalty_parameter*tangentxislave(1,1);
        const double clhs284 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs285 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs286 =     clhs179*penalty_parameter*tangentetaslave(0,1);
        const double clhs287 =     clhs186*penalty_parameter*tangentetaslave(1,1);
        const double clhs288 =     clhs188*penalty_parameter*tangentxislave(0,1);
        const double clhs289 =     clhs190*penalty_parameter*tangentxislave(1,1);
        const double clhs290 =     clhs192*normalslave(0,1)*penalty_parameter;
        const double clhs291 =     clhs194*normalslave(1,1)*penalty_parameter;
        const double clhs292 =     clhs203*penalty_parameter*tangentetaslave(0,1);
        const double clhs293 =     clhs210*penalty_parameter*tangentetaslave(1,1);
        const double clhs294 =     clhs212*penalty_parameter*tangentxislave(0,1);
        const double clhs295 =     clhs214*penalty_parameter*tangentxislave(1,1);
        const double clhs296 =     clhs216*normalslave(0,1)*penalty_parameter;
        const double clhs297 =     clhs218*normalslave(1,1)*penalty_parameter;
        const double clhs298 =     clhs227*penalty_parameter*tangentetaslave(0,1);
        const double clhs299 =     clhs234*penalty_parameter*tangentetaslave(1,1);
        const double clhs300 =     clhs236*penalty_parameter*tangentxislave(0,1);
        const double clhs301 =     clhs238*penalty_parameter*tangentxislave(1,1);
        const double clhs302 =     clhs240*normalslave(0,1)*penalty_parameter;
        const double clhs303 =     clhs242*normalslave(1,1)*penalty_parameter;
        const double clhs304 =     scale_factor*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        const double clhs305 =     scale_factor*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
        const double clhs306 =     clhs245*clhs8;
        const double clhs307 =     clhs21*clhs248;
        const double clhs308 =     clhs30 - clhs39;
        const double clhs309 =     clhs308*normalslave(0,0);
        const double clhs310 =     clhs42 - clhs43;
        const double clhs311 =     clhs310*normalslave(1,0);
        const double clhs312 =     clhs64 - clhs65;
        const double clhs313 =     clhs312*normalslave(0,0)*penalty_parameter;
        const double clhs314 =     clhs68 - clhs69;
        const double clhs315 =     clhs314*normalslave(1,0)*penalty_parameter;
        const double clhs316 =     clhs116 - clhs117;
        const double clhs317 =     clhs316*normalslave(0,0)*penalty_parameter;
        const double clhs318 =     clhs120 - clhs121;
        const double clhs319 =     clhs318*normalslave(1,0)*penalty_parameter;
        const double clhs320 =     -clhs245*clhs3;
        const double clhs321 =     -clhs19*clhs248;
        const double clhs322 =     clhs308*normalslave(0,1);
        const double clhs323 =     clhs310*normalslave(1,1);
        const double clhs324 =     clhs312*normalslave(0,1)*penalty_parameter;
        const double clhs325 =     clhs314*normalslave(1,1)*penalty_parameter;
        const double clhs326 =     clhs316*normalslave(0,1)*penalty_parameter;
        const double clhs327 =     clhs318*normalslave(1,1)*penalty_parameter;
        const double clhs328 =     -clhs245*clhs5;
        const double clhs329 =     -clhs20*clhs248;
    
        lhs(0,0)=clhs0*clhs52 + clhs0*clhs61 + clhs0*clhs67 + clhs1*clhs16 + clhs1*clhs27 - clhs1*clhs41 + clhs17*clhs59 + clhs17*clhs63 + clhs17*clhs71 + clhs18*clhs25 + clhs18*clhs29 - clhs18*clhs45;
        lhs(0,1)=clhs0*clhs80 + clhs0*clhs89 - clhs0*clhs93 + clhs16*clhs72 + clhs17*clhs87 + clhs17*clhs91 - clhs17*clhs95 + clhs25*clhs73 + clhs27*clhs72 + clhs29*clhs73 - clhs41*clhs72 - clhs45*clhs73;
        lhs(0,2)=clhs0*clhs104 + clhs0*clhs113 + clhs0*clhs119 + clhs111*clhs17 + clhs115*clhs17 + clhs123*clhs17 + clhs16*clhs96 + clhs25*clhs97 + clhs27*clhs96 + clhs29*clhs97 - clhs41*clhs96 - clhs45*clhs97;
        lhs(0,3)=clhs0*clhs132 + clhs0*clhs141 - clhs0*clhs145 + clhs124*clhs16 + clhs124*clhs27 - clhs124*clhs41 + clhs125*clhs25 + clhs125*clhs29 - clhs125*clhs45 + clhs139*clhs17 + clhs143*clhs17 - clhs147*clhs17;
        lhs(0,4)=clhs0*clhs156 + clhs0*clhs165 - clhs0*clhs169 + clhs148*clhs16 + clhs148*clhs27 - clhs148*clhs41 + clhs149*clhs25 + clhs149*clhs29 - clhs149*clhs45 + clhs163*clhs17 + clhs167*clhs17 - clhs17*clhs171;
        lhs(0,5)=clhs0*clhs180 + clhs0*clhs189 - clhs0*clhs193 + clhs16*clhs172 + clhs17*clhs187 + clhs17*clhs191 - clhs17*clhs195 + clhs172*clhs27 - clhs172*clhs41 + clhs173*clhs25 + clhs173*clhs29 - clhs173*clhs45;
        lhs(0,6)=clhs0*clhs204 + clhs0*clhs213 - clhs0*clhs217 + clhs16*clhs196 + clhs17*clhs211 + clhs17*clhs215 - clhs17*clhs219 + clhs196*clhs27 - clhs196*clhs41 + clhs197*clhs25 + clhs197*clhs29 - clhs197*clhs45;
        lhs(0,7)=clhs0*clhs228 + clhs0*clhs237 - clhs0*clhs241 + clhs16*clhs220 + clhs17*clhs235 + clhs17*clhs239 - clhs17*clhs243 + clhs220*clhs27 - clhs220*clhs41 + clhs221*clhs25 + clhs221*clhs29 - clhs221*clhs45;
        lhs(0,8)=clhs0*clhs244;
        lhs(0,9)=clhs246;
        lhs(0,10)=clhs17*clhs247;
        lhs(0,11)=clhs249;
        lhs(1,0)=clhs0*clhs256 + clhs0*clhs258 + clhs0*clhs260 + clhs1*clhs250 + clhs1*clhs252 - clhs1*clhs254 + clhs17*clhs257 + clhs17*clhs259 + clhs17*clhs261 + clhs18*clhs251 + clhs18*clhs253 - clhs18*clhs255;
        lhs(1,1)=clhs0*clhs262 + clhs0*clhs264 - clhs0*clhs266 + clhs17*clhs263 + clhs17*clhs265 - clhs17*clhs267 + clhs250*clhs72 + clhs251*clhs73 + clhs252*clhs72 + clhs253*clhs73 - clhs254*clhs72 - clhs255*clhs73;
        lhs(1,2)=clhs0*clhs268 + clhs0*clhs270 + clhs0*clhs272 + clhs17*clhs269 + clhs17*clhs271 + clhs17*clhs273 + clhs250*clhs96 + clhs251*clhs97 + clhs252*clhs96 + clhs253*clhs97 - clhs254*clhs96 - clhs255*clhs97;
        lhs(1,3)=clhs0*clhs274 + clhs0*clhs276 - clhs0*clhs278 + clhs124*clhs250 + clhs124*clhs252 - clhs124*clhs254 + clhs125*clhs251 + clhs125*clhs253 - clhs125*clhs255 + clhs17*clhs275 + clhs17*clhs277 - clhs17*clhs279;
        lhs(1,4)=clhs0*clhs280 + clhs0*clhs282 - clhs0*clhs284 + clhs148*clhs250 + clhs148*clhs252 - clhs148*clhs254 + clhs149*clhs251 + clhs149*clhs253 - clhs149*clhs255 + clhs17*clhs281 + clhs17*clhs283 - clhs17*clhs285;
        lhs(1,5)=clhs0*clhs286 + clhs0*clhs288 - clhs0*clhs290 + clhs17*clhs287 + clhs17*clhs289 - clhs17*clhs291 + clhs172*clhs250 + clhs172*clhs252 - clhs172*clhs254 + clhs173*clhs251 + clhs173*clhs253 - clhs173*clhs255;
        lhs(1,6)=clhs0*clhs292 + clhs0*clhs294 - clhs0*clhs296 + clhs17*clhs293 + clhs17*clhs295 - clhs17*clhs297 + clhs196*clhs250 + clhs196*clhs252 - clhs196*clhs254 + clhs197*clhs251 + clhs197*clhs253 - clhs197*clhs255;
        lhs(1,7)=clhs0*clhs298 + clhs0*clhs300 - clhs0*clhs302 + clhs17*clhs299 + clhs17*clhs301 - clhs17*clhs303 + clhs220*clhs250 + clhs220*clhs252 - clhs220*clhs254 + clhs221*clhs251 + clhs221*clhs253 - clhs221*clhs255;
        lhs(1,8)=clhs246;
        lhs(1,9)=clhs0*clhs304;
        lhs(1,10)=clhs249;
        lhs(1,11)=clhs17*clhs305;
        lhs(2,0)=clhs16*clhs48 + clhs21*clhs59 + clhs21*clhs63 + clhs21*clhs71 + clhs25*clhs55 + clhs27*clhs48 + clhs29*clhs55 - clhs41*clhs48 - clhs45*clhs55 + clhs52*clhs8 + clhs61*clhs8 + clhs67*clhs8;
        lhs(2,1)=clhs16*clhs76 + clhs21*clhs87 + clhs21*clhs91 - clhs21*clhs95 + clhs25*clhs83 + clhs27*clhs76 + clhs29*clhs83 - clhs41*clhs76 - clhs45*clhs83 + clhs8*clhs80 + clhs8*clhs89 - clhs8*clhs93;
        lhs(2,2)=clhs100*clhs16 + clhs100*clhs27 - clhs100*clhs41 + clhs104*clhs8 + clhs107*clhs25 + clhs107*clhs29 - clhs107*clhs45 + clhs111*clhs21 + clhs113*clhs8 + clhs115*clhs21 + clhs119*clhs8 + clhs123*clhs21;
        lhs(2,3)=clhs128*clhs16 + clhs128*clhs27 - clhs128*clhs41 + clhs132*clhs8 + clhs135*clhs25 + clhs135*clhs29 - clhs135*clhs45 + clhs139*clhs21 + clhs141*clhs8 + clhs143*clhs21 - clhs145*clhs8 - clhs147*clhs21;
        lhs(2,4)=clhs152*clhs16 + clhs152*clhs27 - clhs152*clhs41 + clhs156*clhs8 + clhs159*clhs25 + clhs159*clhs29 - clhs159*clhs45 + clhs163*clhs21 + clhs165*clhs8 + clhs167*clhs21 - clhs169*clhs8 - clhs171*clhs21;
        lhs(2,5)=clhs16*clhs176 + clhs176*clhs27 - clhs176*clhs41 + clhs180*clhs8 + clhs183*clhs25 + clhs183*clhs29 - clhs183*clhs45 + clhs187*clhs21 + clhs189*clhs8 + clhs191*clhs21 - clhs193*clhs8 - clhs195*clhs21;
        lhs(2,6)=clhs16*clhs200 + clhs200*clhs27 - clhs200*clhs41 + clhs204*clhs8 + clhs207*clhs25 + clhs207*clhs29 - clhs207*clhs45 + clhs21*clhs211 + clhs21*clhs215 - clhs21*clhs219 + clhs213*clhs8 - clhs217*clhs8;
        lhs(2,7)=clhs16*clhs224 + clhs21*clhs235 + clhs21*clhs239 - clhs21*clhs243 + clhs224*clhs27 - clhs224*clhs41 + clhs228*clhs8 + clhs231*clhs25 + clhs231*clhs29 - clhs231*clhs45 + clhs237*clhs8 - clhs241*clhs8;
        lhs(2,8)=clhs244*clhs8;
        lhs(2,9)=clhs306;
        lhs(2,10)=clhs21*clhs247;
        lhs(2,11)=clhs307;
        lhs(3,0)=clhs21*clhs257 + clhs21*clhs259 + clhs21*clhs261 + clhs250*clhs48 + clhs251*clhs55 + clhs252*clhs48 + clhs253*clhs55 - clhs254*clhs48 - clhs255*clhs55 + clhs256*clhs8 + clhs258*clhs8 + clhs260*clhs8;
        lhs(3,1)=clhs21*clhs263 + clhs21*clhs265 - clhs21*clhs267 + clhs250*clhs76 + clhs251*clhs83 + clhs252*clhs76 + clhs253*clhs83 - clhs254*clhs76 - clhs255*clhs83 + clhs262*clhs8 + clhs264*clhs8 - clhs266*clhs8;
        lhs(3,2)=clhs100*clhs250 + clhs100*clhs252 - clhs100*clhs254 + clhs107*clhs251 + clhs107*clhs253 - clhs107*clhs255 + clhs21*clhs269 + clhs21*clhs271 + clhs21*clhs273 + clhs268*clhs8 + clhs270*clhs8 + clhs272*clhs8;
        lhs(3,3)=clhs128*clhs250 + clhs128*clhs252 - clhs128*clhs254 + clhs135*clhs251 + clhs135*clhs253 - clhs135*clhs255 + clhs21*clhs275 + clhs21*clhs277 - clhs21*clhs279 + clhs274*clhs8 + clhs276*clhs8 - clhs278*clhs8;
        lhs(3,4)=clhs152*clhs250 + clhs152*clhs252 - clhs152*clhs254 + clhs159*clhs251 + clhs159*clhs253 - clhs159*clhs255 + clhs21*clhs281 + clhs21*clhs283 - clhs21*clhs285 + clhs280*clhs8 + clhs282*clhs8 - clhs284*clhs8;
        lhs(3,5)=clhs176*clhs250 + clhs176*clhs252 - clhs176*clhs254 + clhs183*clhs251 + clhs183*clhs253 - clhs183*clhs255 + clhs21*clhs287 + clhs21*clhs289 - clhs21*clhs291 + clhs286*clhs8 + clhs288*clhs8 - clhs290*clhs8;
        lhs(3,6)=clhs200*clhs250 + clhs200*clhs252 - clhs200*clhs254 + clhs207*clhs251 + clhs207*clhs253 - clhs207*clhs255 + clhs21*clhs293 + clhs21*clhs295 - clhs21*clhs297 + clhs292*clhs8 + clhs294*clhs8 - clhs296*clhs8;
        lhs(3,7)=clhs21*clhs299 + clhs21*clhs301 - clhs21*clhs303 + clhs224*clhs250 + clhs224*clhs252 - clhs224*clhs254 + clhs231*clhs251 + clhs231*clhs253 - clhs231*clhs255 + clhs298*clhs8 + clhs300*clhs8 - clhs302*clhs8;
        lhs(3,8)=clhs306;
        lhs(3,9)=clhs304*clhs8;
        lhs(3,10)=clhs307;
        lhs(3,11)=clhs21*clhs305;
        lhs(4,0)=-clhs16*clhs46 + clhs19*clhs315 - clhs19*clhs59 - clhs19*clhs63 - clhs25*clhs53 - clhs27*clhs46 - clhs29*clhs53 + clhs3*clhs313 - clhs3*clhs52 - clhs3*clhs61 - clhs309*clhs46 - clhs311*clhs53;
        lhs(4,1)=-clhs16*clhs74 - clhs19*clhs87 - clhs19*clhs91 + clhs19*clhs95 - clhs25*clhs81 - clhs27*clhs74 - clhs29*clhs81 - clhs3*clhs80 - clhs3*clhs89 + clhs3*clhs93 - clhs309*clhs74 - clhs311*clhs81;
        lhs(4,2)=-clhs104*clhs3 - clhs105*clhs25 - clhs105*clhs29 - clhs105*clhs311 - clhs111*clhs19 - clhs113*clhs3 - clhs115*clhs19 - clhs16*clhs98 + clhs19*clhs319 - clhs27*clhs98 + clhs3*clhs317 - clhs309*clhs98;
        lhs(4,3)=-clhs126*clhs16 - clhs126*clhs27 - clhs126*clhs309 - clhs132*clhs3 - clhs133*clhs25 - clhs133*clhs29 - clhs133*clhs311 - clhs139*clhs19 - clhs141*clhs3 - clhs143*clhs19 + clhs145*clhs3 + clhs147*clhs19;
        lhs(4,4)=-clhs150*clhs16 - clhs150*clhs27 - clhs150*clhs309 - clhs156*clhs3 - clhs157*clhs25 - clhs157*clhs29 - clhs157*clhs311 - clhs163*clhs19 - clhs165*clhs3 - clhs167*clhs19 + clhs169*clhs3 + clhs171*clhs19;
        lhs(4,5)=-clhs16*clhs174 - clhs174*clhs27 - clhs174*clhs309 - clhs180*clhs3 - clhs181*clhs25 - clhs181*clhs29 - clhs181*clhs311 - clhs187*clhs19 - clhs189*clhs3 - clhs19*clhs191 + clhs19*clhs195 + clhs193*clhs3;
        lhs(4,6)=-clhs16*clhs198 - clhs19*clhs211 - clhs19*clhs215 + clhs19*clhs219 - clhs198*clhs27 - clhs198*clhs309 - clhs204*clhs3 - clhs205*clhs25 - clhs205*clhs29 - clhs205*clhs311 - clhs213*clhs3 + clhs217*clhs3;
        lhs(4,7)=-clhs16*clhs222 - clhs19*clhs235 - clhs19*clhs239 + clhs19*clhs243 - clhs222*clhs27 - clhs222*clhs309 - clhs228*clhs3 - clhs229*clhs25 - clhs229*clhs29 - clhs229*clhs311 - clhs237*clhs3 + clhs241*clhs3;
        lhs(4,8)=-clhs244*clhs3;
        lhs(4,9)=clhs320;
        lhs(4,10)=-clhs19*clhs247;
        lhs(4,11)=clhs321;
        lhs(5,0)=-clhs19*clhs257 - clhs19*clhs259 + clhs19*clhs325 - clhs250*clhs46 - clhs251*clhs53 - clhs252*clhs46 - clhs253*clhs53 - clhs256*clhs3 - clhs258*clhs3 + clhs3*clhs324 - clhs322*clhs46 - clhs323*clhs53;
        lhs(5,1)=-clhs19*clhs263 - clhs19*clhs265 + clhs19*clhs267 - clhs250*clhs74 - clhs251*clhs81 - clhs252*clhs74 - clhs253*clhs81 - clhs262*clhs3 - clhs264*clhs3 + clhs266*clhs3 - clhs322*clhs74 - clhs323*clhs81;
        lhs(5,2)=-clhs105*clhs251 - clhs105*clhs253 - clhs105*clhs323 - clhs19*clhs269 - clhs19*clhs271 + clhs19*clhs327 - clhs250*clhs98 - clhs252*clhs98 - clhs268*clhs3 - clhs270*clhs3 + clhs3*clhs326 - clhs322*clhs98;
        lhs(5,3)=-clhs126*clhs250 - clhs126*clhs252 - clhs126*clhs322 - clhs133*clhs251 - clhs133*clhs253 - clhs133*clhs323 - clhs19*clhs275 - clhs19*clhs277 + clhs19*clhs279 - clhs274*clhs3 - clhs276*clhs3 + clhs278*clhs3;
        lhs(5,4)=-clhs150*clhs250 - clhs150*clhs252 - clhs150*clhs322 - clhs157*clhs251 - clhs157*clhs253 - clhs157*clhs323 - clhs19*clhs281 - clhs19*clhs283 + clhs19*clhs285 - clhs280*clhs3 - clhs282*clhs3 + clhs284*clhs3;
        lhs(5,5)=-clhs174*clhs250 - clhs174*clhs252 - clhs174*clhs322 - clhs181*clhs251 - clhs181*clhs253 - clhs181*clhs323 - clhs19*clhs287 - clhs19*clhs289 + clhs19*clhs291 - clhs286*clhs3 - clhs288*clhs3 + clhs290*clhs3;
        lhs(5,6)=-clhs19*clhs293 - clhs19*clhs295 + clhs19*clhs297 - clhs198*clhs250 - clhs198*clhs252 - clhs198*clhs322 - clhs205*clhs251 - clhs205*clhs253 - clhs205*clhs323 - clhs292*clhs3 - clhs294*clhs3 + clhs296*clhs3;
        lhs(5,7)=-clhs19*clhs299 - clhs19*clhs301 + clhs19*clhs303 - clhs222*clhs250 - clhs222*clhs252 - clhs222*clhs322 - clhs229*clhs251 - clhs229*clhs253 - clhs229*clhs323 - clhs298*clhs3 - clhs3*clhs300 + clhs3*clhs302;
        lhs(5,8)=clhs320;
        lhs(5,9)=-clhs3*clhs304;
        lhs(5,10)=clhs321;
        lhs(5,11)=-clhs19*clhs305;
        lhs(6,0)=-clhs16*clhs47 + clhs20*clhs315 - clhs20*clhs59 - clhs20*clhs63 - clhs25*clhs54 - clhs27*clhs47 - clhs29*clhs54 - clhs309*clhs47 - clhs311*clhs54 + clhs313*clhs5 - clhs5*clhs52 - clhs5*clhs61;
        lhs(6,1)=-clhs16*clhs75 - clhs20*clhs87 - clhs20*clhs91 + clhs20*clhs95 - clhs25*clhs82 - clhs27*clhs75 - clhs29*clhs82 - clhs309*clhs75 - clhs311*clhs82 - clhs5*clhs80 - clhs5*clhs89 + clhs5*clhs93;
        lhs(6,2)=-clhs104*clhs5 - clhs106*clhs25 - clhs106*clhs29 - clhs106*clhs311 - clhs111*clhs20 - clhs113*clhs5 - clhs115*clhs20 - clhs16*clhs99 + clhs20*clhs319 - clhs27*clhs99 - clhs309*clhs99 + clhs317*clhs5;
        lhs(6,3)=-clhs127*clhs16 - clhs127*clhs27 - clhs127*clhs309 - clhs132*clhs5 - clhs134*clhs25 - clhs134*clhs29 - clhs134*clhs311 - clhs139*clhs20 - clhs141*clhs5 - clhs143*clhs20 + clhs145*clhs5 + clhs147*clhs20;
        lhs(6,4)=-clhs151*clhs16 - clhs151*clhs27 - clhs151*clhs309 - clhs156*clhs5 - clhs158*clhs25 - clhs158*clhs29 - clhs158*clhs311 - clhs163*clhs20 - clhs165*clhs5 - clhs167*clhs20 + clhs169*clhs5 + clhs171*clhs20;
        lhs(6,5)=-clhs16*clhs175 - clhs175*clhs27 - clhs175*clhs309 - clhs180*clhs5 - clhs182*clhs25 - clhs182*clhs29 - clhs182*clhs311 - clhs187*clhs20 - clhs189*clhs5 - clhs191*clhs20 + clhs193*clhs5 + clhs195*clhs20;
        lhs(6,6)=-clhs16*clhs199 - clhs199*clhs27 - clhs199*clhs309 - clhs20*clhs211 - clhs20*clhs215 + clhs20*clhs219 - clhs204*clhs5 - clhs206*clhs25 - clhs206*clhs29 - clhs206*clhs311 - clhs213*clhs5 + clhs217*clhs5;
        lhs(6,7)=-clhs16*clhs223 - clhs20*clhs235 - clhs20*clhs239 + clhs20*clhs243 - clhs223*clhs27 - clhs223*clhs309 - clhs228*clhs5 - clhs230*clhs25 - clhs230*clhs29 - clhs230*clhs311 - clhs237*clhs5 + clhs241*clhs5;
        lhs(6,8)=-clhs244*clhs5;
        lhs(6,9)=clhs328;
        lhs(6,10)=-clhs20*clhs247;
        lhs(6,11)=clhs329;
        lhs(7,0)=-clhs20*clhs257 - clhs20*clhs259 + clhs20*clhs325 - clhs250*clhs47 - clhs251*clhs54 - clhs252*clhs47 - clhs253*clhs54 - clhs256*clhs5 - clhs258*clhs5 - clhs322*clhs47 - clhs323*clhs54 + clhs324*clhs5;
        lhs(7,1)=-clhs20*clhs263 - clhs20*clhs265 + clhs20*clhs267 - clhs250*clhs75 - clhs251*clhs82 - clhs252*clhs75 - clhs253*clhs82 - clhs262*clhs5 - clhs264*clhs5 + clhs266*clhs5 - clhs322*clhs75 - clhs323*clhs82;
        lhs(7,2)=-clhs106*clhs251 - clhs106*clhs253 - clhs106*clhs323 - clhs20*clhs269 - clhs20*clhs271 + clhs20*clhs327 - clhs250*clhs99 - clhs252*clhs99 - clhs268*clhs5 - clhs270*clhs5 - clhs322*clhs99 + clhs326*clhs5;
        lhs(7,3)=-clhs127*clhs250 - clhs127*clhs252 - clhs127*clhs322 - clhs134*clhs251 - clhs134*clhs253 - clhs134*clhs323 - clhs20*clhs275 - clhs20*clhs277 + clhs20*clhs279 - clhs274*clhs5 - clhs276*clhs5 + clhs278*clhs5;
        lhs(7,4)=-clhs151*clhs250 - clhs151*clhs252 - clhs151*clhs322 - clhs158*clhs251 - clhs158*clhs253 - clhs158*clhs323 - clhs20*clhs281 - clhs20*clhs283 + clhs20*clhs285 - clhs280*clhs5 - clhs282*clhs5 + clhs284*clhs5;
        lhs(7,5)=-clhs175*clhs250 - clhs175*clhs252 - clhs175*clhs322 - clhs182*clhs251 - clhs182*clhs253 - clhs182*clhs323 - clhs20*clhs287 - clhs20*clhs289 + clhs20*clhs291 - clhs286*clhs5 - clhs288*clhs5 + clhs290*clhs5;
        lhs(7,6)=-clhs199*clhs250 - clhs199*clhs252 - clhs199*clhs322 - clhs20*clhs293 - clhs20*clhs295 + clhs20*clhs297 - clhs206*clhs251 - clhs206*clhs253 - clhs206*clhs323 - clhs292*clhs5 - clhs294*clhs5 + clhs296*clhs5;
        lhs(7,7)=-clhs20*clhs299 - clhs20*clhs301 + clhs20*clhs303 - clhs223*clhs250 - clhs223*clhs252 - clhs223*clhs322 - clhs230*clhs251 - clhs230*clhs253 - clhs230*clhs323 - clhs298*clhs5 - clhs300*clhs5 + clhs302*clhs5;
        lhs(7,8)=clhs328;
        lhs(7,9)=-clhs304*clhs5;
        lhs(7,10)=clhs329;
        lhs(7,11)=-clhs20*clhs305;
        lhs(8,0)=scale_factor*(clhs312*normalslave(0,0) - clhs51*tangentetaslave(0,0) - clhs60*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs79*tangentetaslave(0,0) - clhs88*tangentxislave(0,0) + clhs92*normalslave(0,0));
        lhs(8,2)=scale_factor*(-clhs103*tangentetaslave(0,0) - clhs112*tangentxislave(0,0) + clhs316*normalslave(0,0));
        lhs(8,3)=scale_factor*(-clhs131*tangentetaslave(0,0) - clhs140*tangentxislave(0,0) + clhs144*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs155*tangentetaslave(0,0) - clhs164*tangentxislave(0,0) + clhs168*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs179*tangentetaslave(0,0) - clhs188*tangentxislave(0,0) + clhs192*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs203*tangentetaslave(0,0) - clhs212*tangentxislave(0,0) + clhs216*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs227*tangentetaslave(0,0) - clhs236*tangentxislave(0,0) + clhs240*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs312*normalslave(0,1) - clhs51*tangentetaslave(0,1) - clhs60*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs79*tangentetaslave(0,1) - clhs88*tangentxislave(0,1) + clhs92*normalslave(0,1));
        lhs(9,2)=scale_factor*(-clhs103*tangentetaslave(0,1) - clhs112*tangentxislave(0,1) + clhs316*normalslave(0,1));
        lhs(9,3)=scale_factor*(-clhs131*tangentetaslave(0,1) - clhs140*tangentxislave(0,1) + clhs144*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs155*tangentetaslave(0,1) - clhs164*tangentxislave(0,1) + clhs168*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs179*tangentetaslave(0,1) - clhs188*tangentxislave(0,1) + clhs192*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs203*tangentetaslave(0,1) - clhs212*tangentxislave(0,1) + clhs216*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs227*tangentetaslave(0,1) - clhs236*tangentxislave(0,1) + clhs240*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=scale_factor*(clhs314*normalslave(1,0) - clhs58*tangentetaslave(1,0) - clhs62*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs86*tangentetaslave(1,0) - clhs90*tangentxislave(1,0) + clhs94*normalslave(1,0));
        lhs(10,2)=scale_factor*(-clhs110*tangentetaslave(1,0) - clhs114*tangentxislave(1,0) + clhs318*normalslave(1,0));
        lhs(10,3)=scale_factor*(-clhs138*tangentetaslave(1,0) - clhs142*tangentxislave(1,0) + clhs146*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs162*tangentetaslave(1,0) - clhs166*tangentxislave(1,0) + clhs170*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs186*tangentetaslave(1,0) - clhs190*tangentxislave(1,0) + clhs194*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs210*tangentetaslave(1,0) - clhs214*tangentxislave(1,0) + clhs218*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs234*tangentetaslave(1,0) - clhs238*tangentxislave(1,0) + clhs242*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs314*normalslave(1,1) - clhs58*tangentetaslave(1,1) - clhs62*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs86*tangentetaslave(1,1) - clhs90*tangentxislave(1,1) + clhs94*normalslave(1,1));
        lhs(11,2)=scale_factor*(-clhs110*tangentetaslave(1,1) - clhs114*tangentxislave(1,1) + clhs318*normalslave(1,1));
        lhs(11,3)=scale_factor*(-clhs138*tangentetaslave(1,1) - clhs142*tangentxislave(1,1) + clhs146*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs162*tangentetaslave(1,1) - clhs166*tangentxislave(1,1) + clhs170*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs186*tangentetaslave(1,1) - clhs190*tangentxislave(1,1) + clhs194*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs210*tangentetaslave(1,1) - clhs214*tangentxislave(1,1) + clhs218*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs234*tangentetaslave(1,1) - clhs238*tangentxislave(1,1) + clhs242*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }


    return lhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
array_1d<double, 12> AugmentedLagrangianMethodFrictionalMortarContactCondition<2,2>::CalculateLocalRHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,12> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u1old = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2old = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const bounded_matrix<double, 2, 2> lm = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), VECTOR_LAGRANGE_MULTIPLIER, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL);
    const bounded_matrix<double, 2, 2> tangentxislave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_XI);
    const bounded_matrix<double, 2, 2> tangentetaslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_ETA);
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    // We get the friction coefficient

    const array_1d<double, 2> mu = GetFrictionCoefficient();

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs1 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs2 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs3 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs4 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
        const double crhs5 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs6 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=-crhs0*(crhs1*normalslave(0,0) + crhs2*tangentetaslave(0,0) + crhs3*tangentxislave(0,0));
        rhs[9]=-crhs0*(crhs1*normalslave(0,1) + crhs2*tangentetaslave(0,1) + crhs3*tangentxislave(0,1));
        rhs[10]=-crhs0*(crhs4*normalslave(1,0) + crhs5*tangentetaslave(1,0) + crhs6*tangentxislave(1,0));
        rhs[11]=-crhs0*(crhs4*normalslave(1,1) + crhs5*tangentetaslave(1,1) + crhs6*tangentxislave(1,1));
    }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs2 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs3 =     crhs1*tangentetaslave(0,0) + crhs2*tangentxislave(0,0);
        const double crhs4 =     crhs1*tangentetaslave(0,1) + crhs2*tangentxislave(0,1);
        const double crhs5 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs6 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs7 =     crhs5*tangentetaslave(1,0) + crhs6*tangentxislave(1,0);
        const double crhs8 =     crhs5*tangentetaslave(1,1) + crhs6*tangentxislave(1,1);
        const double crhs9 =     mu[0]/(std::sqrt(std::pow(crhs3, 2) + std::pow(crhs4, 2))*std::sqrt(std::pow(crhs7, 2) + std::pow(crhs8, 2)));
        const double crhs10 =     -crhs3*crhs9 + normalslave(0,0);
        const double crhs11 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs12 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs13 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs14 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs15 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs12*(X1(0,0) + u1(0,0)) + crhs13*(X1(1,0) + u1(1,0)) - crhs14*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs12*(X1(0,1) + u1(0,1)) + crhs13*(X1(1,1) + u1(1,1)) - crhs14*(X2(1,1) + u2(1,1)));
        const double crhs16 =     crhs15*penalty_parameter;
        const double crhs17 =     -crhs11 + crhs16;
        const double crhs18 =     crhs10*crhs17;
        const double crhs19 =     -crhs4*crhs9 + normalslave(0,1);
        const double crhs20 =     crhs17*crhs19;
        const double crhs21 =     crhs11 - crhs16;
        const double crhs22 =     crhs10*crhs21;
        const double crhs23 =     crhs19*crhs21;
        const double crhs24 =     1.0/penalty_parameter;
        const double crhs25 =     crhs21*crhs9 + scale_factor;
        const double crhs26 =     0.5*crhs24*crhs25*crhs3;
        const double crhs27 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs28 =     0.5*crhs24*crhs25*crhs4;
        const double crhs29 =     0.5*crhs24*std::pow(scale_factor, 2.0);
        const double crhs30 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
    
        rhs[0]=crhs0*crhs18;
        rhs[1]=crhs0*crhs20;
        rhs[2]=crhs14*crhs18;
        rhs[3]=crhs14*crhs20;
        rhs[4]=crhs12*crhs22;
        rhs[5]=crhs12*crhs23;
        rhs[6]=crhs13*crhs22;
        rhs[7]=crhs13*crhs23;
        rhs[8]=-scale_factor*(crhs15*normalslave(0,0) + crhs26*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs27*crhs28);
        rhs[9]=-scale_factor*(crhs15*normalslave(0,1) + crhs26*crhs27 + crhs28*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=-crhs29*(crhs30*normalslave(1,0) + crhs7);
        rhs[11]=-crhs29*(crhs30*normalslave(1,1) + crhs8);
    }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     crhs1 - crhs6;
        const double crhs8 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs9 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs10 =     crhs8*tangentetaslave(0,0) + crhs9*tangentetaslave(0,1);
        const double crhs11 =     crhs10*penalty_parameter + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double crhs12 =     crhs8*tangentxislave(0,0) + crhs9*tangentxislave(0,1);
        const double crhs13 =     crhs12*penalty_parameter + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double crhs14 =     crhs11*tangentetaslave(0,0) + crhs13*tangentxislave(0,0);
        const double crhs15 =     crhs14 + crhs7*normalslave(0,0);
        const double crhs16 =     crhs11*tangentetaslave(0,1) + crhs13*tangentxislave(0,1);
        const double crhs17 =     crhs16 + crhs7*normalslave(0,1);
        const double crhs18 =     -crhs1 + crhs6;
        const double crhs19 =     crhs14 - crhs18*normalslave(0,0);
        const double crhs20 =     crhs16 - crhs18*normalslave(0,1);
        const double crhs21 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs22 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
        const double crhs23 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs24 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
    
        rhs[0]=-crhs0*crhs15;
        rhs[1]=-crhs0*crhs17;
        rhs[2]=-crhs15*crhs4;
        rhs[3]=-crhs17*crhs4;
        rhs[4]=crhs19*crhs2;
        rhs[5]=crhs2*crhs20;
        rhs[6]=crhs19*crhs3;
        rhs[7]=crhs20*crhs3;
        rhs[8]=scale_factor*(crhs10*tangentetaslave(0,0) + crhs12*tangentxislave(0,0) - crhs5*normalslave(0,0));
        rhs[9]=scale_factor*(crhs10*tangentetaslave(0,1) + crhs12*tangentxislave(0,1) - crhs5*normalslave(0,1));
        rhs[10]=-crhs21*(crhs22*normalslave(1,0) + crhs23*tangentetaslave(1,0) + crhs24*tangentxislave(1,0));
        rhs[11]=-crhs21*(crhs22*normalslave(1,1) + crhs23*tangentetaslave(1,1) + crhs24*tangentxislave(1,1));
    }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs2 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs3 =     crhs1*tangentetaslave(1,0) + crhs2*tangentxislave(1,0);
        const double crhs4 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs5 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs6 =     crhs4*tangentetaslave(0,0) + crhs5*tangentxislave(0,0);
        const double crhs7 =     crhs4*tangentetaslave(0,1) + crhs5*tangentxislave(0,1);
        const double crhs8 =     crhs1*tangentetaslave(1,1) + crhs2*tangentxislave(1,1);
        const double crhs9 =     mu[1]/(std::sqrt(std::pow(crhs3, 2) + std::pow(crhs8, 2))*std::sqrt(std::pow(crhs6, 2) + std::pow(crhs7, 2)));
        const double crhs10 =     -crhs3*crhs9 + normalslave(1,0);
        const double crhs11 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs12 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs13 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs14 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs15 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs12*(X1(0,0) + u1(0,0)) + crhs13*(X1(1,0) + u1(1,0)) - crhs14*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs12*(X1(0,1) + u1(0,1)) + crhs13*(X1(1,1) + u1(1,1)) - crhs14*(X2(1,1) + u2(1,1)));
        const double crhs16 =     crhs15*penalty_parameter;
        const double crhs17 =     -crhs11 + crhs16;
        const double crhs18 =     crhs10*crhs17;
        const double crhs19 =     -crhs8*crhs9 + normalslave(1,1);
        const double crhs20 =     crhs17*crhs19;
        const double crhs21 =     crhs11 - crhs16;
        const double crhs22 =     crhs10*crhs21;
        const double crhs23 =     crhs19*crhs21;
        const double crhs24 =     1.0/penalty_parameter;
        const double crhs25 =     0.5*crhs24*std::pow(scale_factor, 2.0);
        const double crhs26 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs27 =     crhs21*crhs9 + scale_factor;
        const double crhs28 =     0.5*crhs24*crhs27*crhs3;
        const double crhs29 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs30 =     0.5*crhs24*crhs27*crhs8;
    
        rhs[0]=crhs0*crhs18;
        rhs[1]=crhs0*crhs20;
        rhs[2]=crhs14*crhs18;
        rhs[3]=crhs14*crhs20;
        rhs[4]=crhs12*crhs22;
        rhs[5]=crhs12*crhs23;
        rhs[6]=crhs13*crhs22;
        rhs[7]=crhs13*crhs23;
        rhs[8]=-crhs25*(crhs26*normalslave(0,0) + crhs6);
        rhs[9]=-crhs25*(crhs26*normalslave(0,1) + crhs7);
        rhs[10]=-scale_factor*(crhs15*normalslave(1,0) + crhs28*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs29*crhs30);
        rhs[11]=-scale_factor*(crhs15*normalslave(1,1) + crhs28*crhs29 + crhs30*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     X1(0,0) + u1(0,0);
        const double crhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     X1(1,0) + u1(1,0);
        const double crhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs6 =     X2(0,0) + u2(0,0);
        const double crhs7 =     X2(1,0) + u2(1,0);
        const double crhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs9 =     X1(0,1) + u1(0,1);
        const double crhs10 =     X1(1,1) + u1(1,1);
        const double crhs11 =     X2(0,1) + u2(0,1);
        const double crhs12 =     X2(1,1) + u2(1,1);
        const double crhs13 =     normalslave(0,0)*(-crhs0*crhs6 + crhs2*crhs3 + crhs4*crhs5 - crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs11 + crhs10*crhs5 - crhs12*crhs8 + crhs3*crhs9);
        const double crhs14 =     crhs13*penalty_parameter;
        const double crhs15 =     -crhs1 + crhs14;
        const double crhs16 =     crhs15*normalslave(0,0);
        const double crhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs19 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs21 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs22 =     normalslave(1,0)*(-crhs17*crhs6 + crhs19*crhs2 + crhs20*crhs4 - crhs21*crhs7) + normalslave(1,1)*(crhs10*crhs20 - crhs11*crhs17 - crhs12*crhs21 + crhs19*crhs9);
        const double crhs23 =     crhs22*penalty_parameter;
        const double crhs24 =     -crhs18 + crhs23;
        const double crhs25 =     crhs24*normalslave(1,0);
        const double crhs26 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs27 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs28 =     crhs26*tangentetaslave(0,0) + crhs27*tangentxislave(0,0);
        const double crhs29 =     crhs26*tangentetaslave(0,1) + crhs27*tangentxislave(0,1);
        const double crhs30 =     std::pow(std::pow(crhs28, 2) + std::pow(crhs29, 2), -1.0L/2.0L);
        const double crhs31 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs32 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs33 =     crhs31*tangentetaslave(1,0) + crhs32*tangentxislave(1,0);
        const double crhs34 =     crhs31*tangentetaslave(1,1) + crhs32*tangentxislave(1,1);
        const double crhs35 =     std::pow(std::pow(crhs33, 2) + std::pow(crhs34, 2), -1.0L/2.0L);
        const double crhs36 =     crhs15*crhs28*crhs30*crhs35*mu[0];
        const double crhs37 =     crhs24*crhs30*crhs33*crhs35*mu[1];
        const double crhs38 =     crhs15*normalslave(0,1);
        const double crhs39 =     crhs24*normalslave(1,1);
        const double crhs40 =     crhs15*crhs29*crhs30*crhs35*mu[0];
        const double crhs41 =     crhs24*crhs30*crhs34*crhs35*mu[1];
        const double crhs42 =     crhs1 - crhs14;
        const double crhs43 =     crhs42*normalslave(0,0);
        const double crhs44 =     crhs18 - crhs23;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     crhs28*crhs30*crhs35*crhs42*mu[0];
        const double crhs47 =     crhs30*crhs33*crhs35*crhs44*mu[1];
        const double crhs48 =     crhs42*normalslave(0,1);
        const double crhs49 =     crhs44*normalslave(1,1);
        const double crhs50 =     crhs29*crhs30*crhs35*crhs42*mu[0];
        const double crhs51 =     crhs30*crhs34*crhs35*crhs44*mu[1];
        const double crhs52 =     1.0/penalty_parameter;
        const double crhs53 =     crhs30*crhs35;
        const double crhs54 =     crhs42*crhs53*mu[0] + scale_factor;
        const double crhs55 =     0.5*crhs28*crhs52*crhs54;
        const double crhs56 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs57 =     0.5*crhs29*crhs52*crhs54;
        const double crhs58 =     crhs44*crhs53*mu[1] + scale_factor;
        const double crhs59 =     0.5*crhs33*crhs52*crhs58;
        const double crhs60 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs61 =     0.5*crhs34*crhs52*crhs58;
    
        rhs[0]=crhs0*crhs16 - crhs0*crhs36 + crhs17*crhs25 - crhs17*crhs37;
        rhs[1]=crhs0*crhs38 - crhs0*crhs40 + crhs17*crhs39 - crhs17*crhs41;
        rhs[2]=crhs16*crhs8 + crhs21*crhs25 - crhs21*crhs37 - crhs36*crhs8;
        rhs[3]=crhs21*crhs39 - crhs21*crhs41 + crhs38*crhs8 - crhs40*crhs8;
        rhs[4]=crhs19*crhs45 - crhs19*crhs47 + crhs3*crhs43 - crhs3*crhs46;
        rhs[5]=crhs19*crhs49 - crhs19*crhs51 + crhs3*crhs48 - crhs3*crhs50;
        rhs[6]=crhs20*crhs45 - crhs20*crhs47 + crhs43*crhs5 - crhs46*crhs5;
        rhs[7]=crhs20*crhs49 - crhs20*crhs51 + crhs48*crhs5 - crhs5*crhs50;
        rhs[8]=-scale_factor*(crhs13*normalslave(0,0) + crhs55*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs56*crhs57);
        rhs[9]=-scale_factor*(crhs13*normalslave(0,1) + crhs55*crhs56 + crhs57*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=-scale_factor*(crhs22*normalslave(1,0) + crhs59*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs60*crhs61);
        rhs[11]=-scale_factor*(crhs22*normalslave(1,1) + crhs59*crhs60 + crhs61*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs6 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs7 =     crhs5*tangentetaslave(0,0) + crhs6*tangentetaslave(0,1);
        const double crhs8 =     crhs1*scale_factor + crhs7*penalty_parameter;
        const double crhs9 =     crhs8*tangentetaslave(0,0);
        const double crhs10 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs11 =     crhs5*tangentxislave(0,0) + crhs6*tangentxislave(0,1);
        const double crhs12 =     crhs10*scale_factor + crhs11*penalty_parameter;
        const double crhs13 =     crhs12*tangentxislave(0,0);
        const double crhs14 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs15 =     X1(0,0) + u1(0,0);
        const double crhs16 =     X1(1,0) + u1(1,0);
        const double crhs17 =     X2(0,0) + u2(0,0);
        const double crhs18 =     X2(1,0) + u2(1,0);
        const double crhs19 =     X1(0,1) + u1(0,1);
        const double crhs20 =     X1(1,1) + u1(1,1);
        const double crhs21 =     X2(0,1) + u2(0,1);
        const double crhs22 =     X2(1,1) + u2(1,1);
        const double crhs23 =     normalslave(0,0)*(-crhs0*crhs17 + crhs15*crhs2 + crhs16*crhs3 - crhs18*crhs4) + normalslave(0,1)*(-crhs0*crhs21 + crhs19*crhs2 + crhs20*crhs3 - crhs22*crhs4);
        const double crhs24 =     crhs23*penalty_parameter;
        const double crhs25 =     crhs14 - crhs24;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs28 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs29 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs30 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs32 =     normalslave(1,0)*(crhs15*crhs29 + crhs16*crhs30 - crhs17*crhs27 - crhs18*crhs31) + normalslave(1,1)*(crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31);
        const double crhs33 =     crhs32*penalty_parameter;
        const double crhs34 =     crhs28 - crhs33;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs37 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs38 =     crhs36*tangentetaslave(1,0) + crhs37*tangentxislave(1,0);
        const double crhs39 =     std::pow(std::pow(crhs1*tangentetaslave(0,0) + crhs10*tangentxislave(0,0), 2) + std::pow(crhs1*tangentetaslave(0,1) + crhs10*tangentxislave(0,1), 2), -1.0L/2.0L);
        const double crhs40 =     crhs36*tangentetaslave(1,1) + crhs37*tangentxislave(1,1);
        const double crhs41 =     std::pow(std::pow(crhs38, 2) + std::pow(crhs40, 2), -1.0L/2.0L);
        const double crhs42 =     crhs34*crhs38*crhs39*crhs41*mu[1];
        const double crhs43 =     crhs8*tangentetaslave(0,1);
        const double crhs44 =     crhs12*tangentxislave(0,1);
        const double crhs45 =     crhs25*normalslave(0,1);
        const double crhs46 =     crhs34*normalslave(1,1);
        const double crhs47 =     crhs34*crhs39*crhs40*crhs41*mu[1];
        const double crhs48 =     -crhs14 + crhs24;
        const double crhs49 =     crhs48*normalslave(0,0);
        const double crhs50 =     -crhs28 + crhs33;
        const double crhs51 =     crhs50*normalslave(1,0);
        const double crhs52 =     crhs38*crhs39*crhs41*crhs50*mu[1];
        const double crhs53 =     crhs48*normalslave(0,1);
        const double crhs54 =     crhs50*normalslave(1,1);
        const double crhs55 =     crhs39*crhs40*crhs41*crhs50*mu[1];
        const double crhs56 =     1.0/penalty_parameter;
        const double crhs57 =     crhs34*crhs39*crhs41*mu[1] + scale_factor;
        const double crhs58 =     0.5*crhs38*crhs56*crhs57;
        const double crhs59 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs60 =     0.5*crhs40*crhs56*crhs57;
    
        rhs[0]=-crhs0*crhs13 - crhs0*crhs26 - crhs0*crhs9 - crhs27*crhs35 + crhs27*crhs42;
        rhs[1]=-crhs0*crhs43 - crhs0*crhs44 - crhs0*crhs45 - crhs27*crhs46 + crhs27*crhs47;
        rhs[2]=-crhs13*crhs4 - crhs26*crhs4 - crhs31*crhs35 + crhs31*crhs42 - crhs4*crhs9;
        rhs[3]=-crhs31*crhs46 + crhs31*crhs47 - crhs4*crhs43 - crhs4*crhs44 - crhs4*crhs45;
        rhs[4]=crhs13*crhs2 - crhs2*crhs49 + crhs2*crhs9 - crhs29*crhs51 + crhs29*crhs52;
        rhs[5]=crhs2*crhs43 + crhs2*crhs44 - crhs2*crhs53 - crhs29*crhs54 + crhs29*crhs55;
        rhs[6]=crhs13*crhs3 - crhs3*crhs49 + crhs3*crhs9 - crhs30*crhs51 + crhs30*crhs52;
        rhs[7]=crhs3*crhs43 + crhs3*crhs44 - crhs3*crhs53 - crhs30*crhs54 + crhs30*crhs55;
        rhs[8]=scale_factor*(crhs11*tangentxislave(0,0) - crhs23*normalslave(0,0) + crhs7*tangentetaslave(0,0));
        rhs[9]=scale_factor*(crhs11*tangentxislave(0,1) - crhs23*normalslave(0,1) + crhs7*tangentetaslave(0,1));
        rhs[10]=-scale_factor*(crhs32*normalslave(1,0) + crhs58*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs59*crhs60);
        rhs[11]=-scale_factor*(crhs32*normalslave(1,1) + crhs58*crhs59 + crhs60*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     crhs1 - crhs6;
        const double crhs8 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs9 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs10 =     crhs8*tangentetaslave(1,0) + crhs9*tangentetaslave(1,1);
        const double crhs11 =     crhs10*penalty_parameter + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double crhs12 =     crhs8*tangentxislave(1,0) + crhs9*tangentxislave(1,1);
        const double crhs13 =     crhs12*penalty_parameter + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double crhs14 =     crhs11*tangentetaslave(1,0) + crhs13*tangentxislave(1,0);
        const double crhs15 =     crhs14 + crhs7*normalslave(1,0);
        const double crhs16 =     crhs11*tangentetaslave(1,1) + crhs13*tangentxislave(1,1);
        const double crhs17 =     crhs16 + crhs7*normalslave(1,1);
        const double crhs18 =     -crhs1 + crhs6;
        const double crhs19 =     crhs14 - crhs18*normalslave(1,0);
        const double crhs20 =     crhs16 - crhs18*normalslave(1,1);
        const double crhs21 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs22 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs23 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs24 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
    
        rhs[0]=-crhs0*crhs15;
        rhs[1]=-crhs0*crhs17;
        rhs[2]=-crhs15*crhs4;
        rhs[3]=-crhs17*crhs4;
        rhs[4]=crhs19*crhs2;
        rhs[5]=crhs2*crhs20;
        rhs[6]=crhs19*crhs3;
        rhs[7]=crhs20*crhs3;
        rhs[8]=-crhs21*(crhs22*normalslave(0,0) + crhs23*tangentetaslave(0,0) + crhs24*tangentxislave(0,0));
        rhs[9]=-crhs21*(crhs22*normalslave(0,1) + crhs23*tangentetaslave(0,1) + crhs24*tangentxislave(0,1));
        rhs[10]=scale_factor*(crhs10*tangentetaslave(1,0) + crhs12*tangentxislave(1,0) - crhs5*normalslave(1,0));
        rhs[11]=scale_factor*(crhs10*tangentetaslave(1,1) + crhs12*tangentxislave(1,1) - crhs5*normalslave(1,1));
    }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs6 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs7 =     crhs5*tangentetaslave(1,0) + crhs6*tangentetaslave(1,1);
        const double crhs8 =     crhs1*scale_factor + crhs7*penalty_parameter;
        const double crhs9 =     crhs8*tangentetaslave(1,0);
        const double crhs10 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs11 =     crhs5*tangentxislave(1,0) + crhs6*tangentxislave(1,1);
        const double crhs12 =     crhs10*scale_factor + crhs11*penalty_parameter;
        const double crhs13 =     crhs12*tangentxislave(1,0);
        const double crhs14 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs15 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs16 =     X1(0,0) + u1(0,0);
        const double crhs17 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     X1(1,0) + u1(1,0);
        const double crhs19 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     X2(0,0) + u2(0,0);
        const double crhs21 =     X2(1,0) + u2(1,0);
        const double crhs22 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs23 =     X1(0,1) + u1(0,1);
        const double crhs24 =     X1(1,1) + u1(1,1);
        const double crhs25 =     X2(0,1) + u2(0,1);
        const double crhs26 =     X2(1,1) + u2(1,1);
        const double crhs27 =     normalslave(0,0)*(-crhs14*crhs20 + crhs16*crhs17 + crhs18*crhs19 - crhs21*crhs22) + normalslave(0,1)*(-crhs14*crhs25 + crhs17*crhs23 + crhs19*crhs24 - crhs22*crhs26);
        const double crhs28 =     crhs27*penalty_parameter;
        const double crhs29 =     crhs15 - crhs28;
        const double crhs30 =     crhs29*normalslave(0,0);
        const double crhs31 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs20 + crhs16*crhs2 + crhs18*crhs3 - crhs21*crhs4) + normalslave(1,1)*(-crhs0*crhs25 + crhs2*crhs23 + crhs24*crhs3 - crhs26*crhs4);
        const double crhs33 =     crhs32*penalty_parameter;
        const double crhs34 =     crhs31 - crhs33;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs37 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs38 =     crhs36*tangentetaslave(0,0) + crhs37*tangentxislave(0,0);
        const double crhs39 =     crhs36*tangentetaslave(0,1) + crhs37*tangentxislave(0,1);
        const double crhs40 =     std::pow(std::pow(crhs38, 2) + std::pow(crhs39, 2), -1.0L/2.0L);
        const double crhs41 =     std::pow(std::pow(crhs1*tangentetaslave(1,0) + crhs10*tangentxislave(1,0), 2) + std::pow(crhs1*tangentetaslave(1,1) + crhs10*tangentxislave(1,1), 2), -1.0L/2.0L);
        const double crhs42 =     crhs29*crhs38*crhs40*crhs41*mu[0];
        const double crhs43 =     crhs8*tangentetaslave(1,1);
        const double crhs44 =     crhs12*tangentxislave(1,1);
        const double crhs45 =     crhs29*normalslave(0,1);
        const double crhs46 =     crhs34*normalslave(1,1);
        const double crhs47 =     crhs29*crhs39*crhs40*crhs41*mu[0];
        const double crhs48 =     -crhs15 + crhs28;
        const double crhs49 =     crhs48*normalslave(0,0);
        const double crhs50 =     -crhs31 + crhs33;
        const double crhs51 =     crhs50*normalslave(1,0);
        const double crhs52 =     crhs38*crhs40*crhs41*crhs48*mu[0];
        const double crhs53 =     crhs48*normalslave(0,1);
        const double crhs54 =     crhs50*normalslave(1,1);
        const double crhs55 =     crhs39*crhs40*crhs41*crhs48*mu[0];
        const double crhs56 =     1.0/penalty_parameter;
        const double crhs57 =     crhs29*crhs40*crhs41*mu[0] + scale_factor;
        const double crhs58 =     0.5*crhs38*crhs56*crhs57;
        const double crhs59 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs60 =     0.5*crhs39*crhs56*crhs57;
    
        rhs[0]=-crhs0*crhs13 - crhs0*crhs35 - crhs0*crhs9 - crhs14*crhs30 + crhs14*crhs42;
        rhs[1]=-crhs0*crhs43 - crhs0*crhs44 - crhs0*crhs46 - crhs14*crhs45 + crhs14*crhs47;
        rhs[2]=-crhs13*crhs4 - crhs22*crhs30 + crhs22*crhs42 - crhs35*crhs4 - crhs4*crhs9;
        rhs[3]=-crhs22*crhs45 + crhs22*crhs47 - crhs4*crhs43 - crhs4*crhs44 - crhs4*crhs46;
        rhs[4]=crhs13*crhs2 - crhs17*crhs49 + crhs17*crhs52 - crhs2*crhs51 + crhs2*crhs9;
        rhs[5]=-crhs17*crhs53 + crhs17*crhs55 + crhs2*crhs43 + crhs2*crhs44 - crhs2*crhs54;
        rhs[6]=crhs13*crhs3 - crhs19*crhs49 + crhs19*crhs52 - crhs3*crhs51 + crhs3*crhs9;
        rhs[7]=-crhs19*crhs53 + crhs19*crhs55 + crhs3*crhs43 + crhs3*crhs44 - crhs3*crhs54;
        rhs[8]=-scale_factor*(crhs27*normalslave(0,0) + crhs58*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs59*crhs60);
        rhs[9]=-scale_factor*(crhs27*normalslave(0,1) + crhs58*crhs59 + crhs60*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=scale_factor*(crhs11*tangentxislave(1,0) - crhs32*normalslave(1,0) + crhs7*tangentetaslave(1,0));
        rhs[11]=scale_factor*(crhs11*tangentxislave(1,1) - crhs32*normalslave(1,1) + crhs7*tangentetaslave(1,1));
    }
    else if (rActiveInactive == 8 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     X1(0,0) + u1old(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     X1(1,0) + u1old(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     X2(0,0) + u2old(0,0);
        const double crhs6 =     X2(1,0) + u2old(1,0);
        const double crhs7 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs8 =     -crhs0*crhs5 + crhs1*crhs2 + crhs3*crhs4 - crhs6*crhs7;
        const double crhs9 =     X1(0,1) + u1old(0,1);
        const double crhs10 =     X1(1,1) + u1old(1,1);
        const double crhs11 =     X2(0,1) + u2old(0,1);
        const double crhs12 =     X2(1,1) + u2old(1,1);
        const double crhs13 =     -crhs0*crhs11 + crhs10*crhs4 - crhs12*crhs7 + crhs2*crhs9;
        const double crhs14 =     crhs13*tangentetaslave(0,1) + crhs8*tangentetaslave(0,0);
        const double crhs15 =     crhs14*penalty_parameter + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double crhs16 =     crhs15*tangentetaslave(0,0);
        const double crhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs19 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs21 =     crhs1*crhs18 - crhs17*crhs5 + crhs19*crhs3 - crhs20*crhs6;
        const double crhs22 =     crhs10*crhs19 - crhs11*crhs17 - crhs12*crhs20 + crhs18*crhs9;
        const double crhs23 =     crhs21*tangentetaslave(1,0) + crhs22*tangentetaslave(1,1);
        const double crhs24 =     crhs23*penalty_parameter + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double crhs25 =     crhs24*tangentetaslave(1,0);
        const double crhs26 =     crhs13*tangentxislave(0,1) + crhs8*tangentxislave(0,0);
        const double crhs27 =     crhs26*penalty_parameter + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double crhs28 =     crhs27*tangentxislave(0,0);
        const double crhs29 =     crhs21*tangentxislave(1,0) + crhs22*tangentxislave(1,1);
        const double crhs30 =     crhs29*penalty_parameter + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double crhs31 =     crhs30*tangentxislave(1,0);
        const double crhs32 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs33 =     X1(0,0) + u1(0,0);
        const double crhs34 =     X1(1,0) + u1(1,0);
        const double crhs35 =     X2(0,0) + u2(0,0);
        const double crhs36 =     X2(1,0) + u2(1,0);
        const double crhs37 =     X1(0,1) + u1(0,1);
        const double crhs38 =     X1(1,1) + u1(1,1);
        const double crhs39 =     X2(0,1) + u2(0,1);
        const double crhs40 =     X2(1,1) + u2(1,1);
        const double crhs41 =     normalslave(0,0)*(-crhs0*crhs35 + crhs2*crhs33 + crhs34*crhs4 - crhs36*crhs7) + normalslave(0,1)*(-crhs0*crhs39 + crhs2*crhs37 + crhs38*crhs4 - crhs40*crhs7);
        const double crhs42 =     crhs41*penalty_parameter;
        const double crhs43 =     crhs32 - crhs42;
        const double crhs44 =     crhs43*normalslave(0,0);
        const double crhs45 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs46 =     normalslave(1,0)*(-crhs17*crhs35 + crhs18*crhs33 + crhs19*crhs34 - crhs20*crhs36) + normalslave(1,1)*(-crhs17*crhs39 + crhs18*crhs37 + crhs19*crhs38 - crhs20*crhs40);
        const double crhs47 =     crhs46*penalty_parameter;
        const double crhs48 =     crhs45 - crhs47;
        const double crhs49 =     crhs48*normalslave(1,0);
        const double crhs50 =     crhs15*tangentetaslave(0,1);
        const double crhs51 =     crhs24*tangentetaslave(1,1);
        const double crhs52 =     crhs27*tangentxislave(0,1);
        const double crhs53 =     crhs30*tangentxislave(1,1);
        const double crhs54 =     crhs43*normalslave(0,1);
        const double crhs55 =     crhs48*normalslave(1,1);
        const double crhs56 =     -crhs32 + crhs42;
        const double crhs57 =     crhs56*normalslave(0,0);
        const double crhs58 =     -crhs45 + crhs47;
        const double crhs59 =     crhs58*normalslave(1,0);
        const double crhs60 =     crhs56*normalslave(0,1);
        const double crhs61 =     crhs58*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs16 - crhs0*crhs28 - crhs0*crhs44 - crhs17*crhs25 - crhs17*crhs31 - crhs17*crhs49;
        rhs[1]=-crhs0*crhs50 - crhs0*crhs52 - crhs0*crhs54 - crhs17*crhs51 - crhs17*crhs53 - crhs17*crhs55;
        rhs[2]=-crhs16*crhs7 - crhs20*crhs25 - crhs20*crhs31 - crhs20*crhs49 - crhs28*crhs7 - crhs44*crhs7;
        rhs[3]=-crhs20*crhs51 - crhs20*crhs53 - crhs20*crhs55 - crhs50*crhs7 - crhs52*crhs7 - crhs54*crhs7;
        rhs[4]=crhs16*crhs2 + crhs18*crhs25 + crhs18*crhs31 - crhs18*crhs59 + crhs2*crhs28 - crhs2*crhs57;
        rhs[5]=crhs18*crhs51 + crhs18*crhs53 - crhs18*crhs61 + crhs2*crhs50 + crhs2*crhs52 - crhs2*crhs60;
        rhs[6]=crhs16*crhs4 + crhs19*crhs25 + crhs19*crhs31 - crhs19*crhs59 + crhs28*crhs4 - crhs4*crhs57;
        rhs[7]=crhs19*crhs51 + crhs19*crhs53 - crhs19*crhs61 + crhs4*crhs50 + crhs4*crhs52 - crhs4*crhs60;
        rhs[8]=scale_factor*(crhs14*tangentetaslave(0,0) + crhs26*tangentxislave(0,0) - crhs41*normalslave(0,0));
        rhs[9]=scale_factor*(crhs14*tangentetaslave(0,1) + crhs26*tangentxislave(0,1) - crhs41*normalslave(0,1));
        rhs[10]=scale_factor*(crhs23*tangentetaslave(1,0) + crhs29*tangentxislave(1,0) - crhs46*normalslave(1,0));
        rhs[11]=scale_factor*(crhs23*tangentetaslave(1,1) + crhs29*tangentxislave(1,1) - crhs46*normalslave(1,1));
    }


    return rhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::EquationIdVector(
    EquationIdVectorType& rResult,
    ProcessInfo& CurrentProcessInfo 
    )
{
    KRATOS_TRY;   
    
    boost::shared_ptr<ConditionMap>& AllConditionSets = this->GetValue( CONTACT_SETS );
    
    // Calculates the size of the system
    const unsigned int ConditionSize = (TDim * ( TNumNodes + TNumNodes + TNumNodes) ) * AllConditionSets->size(); 
    
    if (rResult.size() != ConditionSize)
    {
        rResult.resize( ConditionSize, false );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for (auto ipair = AllConditionSets->begin(); ipair != AllConditionSets->end(); ++ipair )
    {
        GeometryType& current_master = (ipair->first)->GetGeometry( );
        
        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rResult[index++] = master_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = master_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = master_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes  Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_Z ).EquationId( );
            }
        }
        
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim, TNumNodes>::GetDofList(
    DofsVectorType& rConditionalDofList,
    ProcessInfo& rCurrentProcessInfo 
)
{
    KRATOS_TRY;
    
    boost::shared_ptr<ConditionMap>& AllConditionSets = this->GetValue( CONTACT_SETS );
    
    // Calculates the size of the system
    const unsigned int ConditionSize = (TDim * ( TNumNodes + TNumNodes + TNumNodes) ) * AllConditionSets->size(); 
    
    if (rConditionalDofList.size() != ConditionSize)
    {
        rConditionalDofList.resize( ConditionSize );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for (auto ipair = AllConditionSets->begin(); ipair != AllConditionSets->end(); ++ipair )
    {
        GeometryType& current_master = (ipair->first)->GetGeometry( );

        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_X );
            rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_Z );
            }
        }
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template class AugmentedLagrangianMethodFrictionalMortarContactCondition<2, 2>;
// template class AugmentedLagrangianMethodFrictionalMortarContactCondition<3, 3>;
// template class AugmentedLagrangianMethodFrictionalMortarContactCondition<3, 4>;

} // Namespace Kratos
