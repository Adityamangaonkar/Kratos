// KRATOS  ___|  |       |       |
//       \___ \  __|  __| |   |  __| __| |   |  __| _` | |
//           | |   |    |   | (    |   |   | |   (   | |
//       _____/ \__|_|   \__,_|\___|\__|\__,_|_|  \__,_|_| MECHANICS
//
//  License: BSD License
//   license: structural_mechanics_application/license.txt
//
//  Main authors:  Vicente Mataix Ferr√°ndiz
//

// System includes

// External includes

// Project includes
/* Mortar includes */
#include "custom_conditions/ALM_frictionless_mortar_contact_condition.h"

/* Additional includes */
#include <algorithm>

/* Utilities */
#include "custom_utilities/contact_utilities.h"
#include "utilities/math_utils.h"
#include "custom_utilities/structural_mechanics_math_utilities.hpp" // NOTE: Change for a more performant solver
// #include "../FSIapplication/custom_utilities/qr_utility.h" // QR decomposition utility used in matrix inversion.

/* Logging format include */
#include "custom_utilities/logging_settings.hpp"

namespace Kratos 
{
/**
 * Flags related to the condition computation 
 */
// Avoiding using the macro since this has a template parameter. If there was no template plase use the KRATOS_CREATE_LOCAL_FLAG macro
template< unsigned int TDim, unsigned int TNumNodes>
const Kratos::Flags AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR(Kratos::Flags::Create(0));
template< unsigned int TDim, unsigned int TNumNodes>
const Kratos::Flags AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX(Kratos::Flags::Create(1));
template< unsigned int TDim, unsigned int TNumNodes>
const Kratos::Flags AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR_WITH_COMPONENTS(Kratos::Flags::Create(2));
template< unsigned int TDim, unsigned int TNumNodes>
const Kratos::Flags AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX_WITH_COMPONENTS(Kratos::Flags::Create(3));

/************************************* OPERATIONS **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::Create( 
    IndexType NewId,
    NodesArrayType const& rThisNodes,
    PropertiesType::Pointer pProperties ) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes> >( NewId, this->GetGeometry().Create( rThisNodes ), pProperties );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::Create(
    IndexType NewId,
    GeometryType::Pointer pGeom,
    PropertiesType::Pointer pProperties) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes> >( NewId, pGeom, pProperties );
}

/************************************* DESTRUCTOR **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::~AugmentedLagrangianMethodFrictionlessMortarContactCondition( )
{
}

//************************** STARTING - ENDING  METHODS ***************************//
/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::Initialize( ) 
{
    KRATOS_TRY;
    
    InitializeIntegrationMethod();
    
    // First populate of the vector of master elements
    const std::vector<contact_container> * all_containers = this->GetValue( CONTACT_CONTAINERS );
    mPairSize = all_containers->size();

    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::InitializeSolutionStep( ProcessInfo& rCurrentProcessInfo )
{
    KRATOS_TRY;

    // First populate of the vector of master elements
    const std::vector<contact_container> * all_containers = this->GetValue( CONTACT_CONTAINERS );
    mPairSize = all_containers->size();
    mThisMasterElements.resize( mPairSize );
    
    for ( unsigned int i_cond = 0; i_cond < mPairSize; ++i_cond )
    {
        mThisMasterElements[i_cond] = (*all_containers)[i_cond].condition;
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::InitializeNonLinearIteration( ProcessInfo& rCurrentProcessInfo )
{
    KRATOS_TRY;

    // NOTE: Add things if necessary
        
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::FinalizeSolutionStep( ProcessInfo& rCurrentProcessInfo )
{
    KRATOS_TRY;
    
    // NOTE: Add things if necessary
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::FinalizeNonLinearIteration( ProcessInfo& rCurrentProcessInfo )
{
    KRATOS_TRY;
    
    // Create and initialize condition variables:
    GeneralVariables rVariables;
    
    // Initialize the current contact data
    DerivativeData rDerivativeData;
    
    // Reading integration points
//     const GeometryType::IntegrationPointsArrayType& integration_points = mUseManualColocationIntegration ?
//                                                                          mColocationIntegration.IntegrationPoints( ) :
//                                                                          GetGeometry( ).IntegrationPoints( mThisIntegrationMethod );
    this->InitializeDerivativeData(rDerivativeData, rCurrentProcessInfo);
    
    this->CalculateAeAndDeltaAe(rDerivativeData, rVariables, rCurrentProcessInfo);
    
//     std::vector<contact_container> *& all_containers = this->GetValue(CONTACT_CONTAINERS);
    
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
IntegrationMethod AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::GetIntegrationMethod()
{   
    return mThisIntegrationMethod;
}

template< unsigned int TDim, unsigned int TNumNodes>
IntegrationMethod AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::GetIntegrationMethod(
    const unsigned int integration_order, 
    const bool collocation
    )
{
    if (collocation == false)
    {
        if (integration_order == 1)
        {
            return GeometryData::GI_GAUSS_1;
        }
        else if (integration_order == 2)
        {
            return GeometryData::GI_GAUSS_2;
        }
        else if (integration_order == 3)
        {
            return GeometryData::GI_GAUSS_3;
        }
        else if (integration_order == 4)
        {
            return GeometryData::GI_GAUSS_4;
        }
        else if (integration_order == 5)
        {
            return GeometryData::GI_GAUSS_5;
        }
        else
        {
            return GeometryData::GI_GAUSS_5; // NOTE: Maximium by default
//             return GetGeometry().GetDefaultIntegrationMethod();
        }
    }
    else
    {
        if (integration_order == 1)
        {
            return GeometryData::GI_EXTENDED_GAUSS_1;
        }
        else if (integration_order == 2)
        {
            return GeometryData::GI_EXTENDED_GAUSS_2;
        }
        else if (integration_order == 3)
        {
            return GeometryData::GI_EXTENDED_GAUSS_3;
        }
        else if (integration_order == 4)
        {
            return GeometryData::GI_EXTENDED_GAUSS_4;
        }
        else if (integration_order == 5)
        {
            return GeometryData::GI_EXTENDED_GAUSS_5;
        }
        else
        {
            return this->GetIntegrationMethod();
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateLocalSystem( 
    std::vector<MatrixType>& rLeftHandSideMatrices,
    const std::vector<Variable<MatrixType> >& rLHSVariables,
    std::vector<VectorType>& rRightHandSideVectors,
    const std::vector<Variable<VectorType> >& rRHSVariables,
    ProcessInfo& rCurrentProcessInfo 
    )
{    
    // Calculates the size of the system
    constexpr unsigned int TMatrixSize = TDim * (TNumNodes + TNumNodes) + TNumNodes;
    
    // Create local system components
    LocalSystemComponents LocalSystem;

    // Calculation flags
    LocalSystem.CalculationFlags.Set(AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX_WITH_COMPONENTS, true);
    LocalSystem.CalculationFlags.Set(AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR_WITH_COMPONENTS, true);

    //Initialize sizes for the system components
    if ( rLHSVariables.size( ) != rLeftHandSideMatrices.size( ) )
    {
        rLeftHandSideMatrices.resize( rLHSVariables.size( ) );
    }

    if ( rRHSVariables.size( ) != rRightHandSideVectors.size( ) )
    {
        rRightHandSideVectors.resize( rRHSVariables.size( ) );
    }

    LocalSystem.CalculationFlags.Set(AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX, true);
    for ( unsigned int i = 0; i < rLeftHandSideMatrices.size( ); i++ )
    {
        // Note: rRightHandSideVectors.size() > 0
        this->InitializeSystemMatrices<TMatrixSize>( rLeftHandSideMatrices[i], rRightHandSideVectors[0],LocalSystem.CalculationFlags );
    }

    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR, true );
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX, false ); // Temporarily only
    for ( unsigned int i = 0; i < rRightHandSideVectors.size( ); i++ )
    {
        // Note: rLeftHandSideMatrices.size() > 0
        this->InitializeSystemMatrices<TMatrixSize>( rLeftHandSideMatrices[0], rRightHandSideVectors[i], LocalSystem.CalculationFlags  );
    }
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX, true ); // Reactivated again

    // Set Variables to Local system components
    LocalSystem.SetLeftHandSideMatrices( rLeftHandSideMatrices );
    LocalSystem.SetRightHandSideVectors( rRightHandSideVectors );

    LocalSystem.SetLeftHandSideVariables( rLHSVariables );
    LocalSystem.SetRightHandSideVariables( rRHSVariables );

    // Calculate condition system
    this->CalculateConditionSystem<TMatrixSize>( LocalSystem, rCurrentProcessInfo );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateLocalSystem(
    MatrixType& rLeftHandSideMatrix,
    VectorType& rRightHandSideVector,
    ProcessInfo& rCurrentProcessInfo 
    )
{
    KRATOS_TRY;
    
    // Calculates the size of the system
    constexpr unsigned int TMatrixSize = TDim * (TNumNodes + TNumNodes) + TNumNodes;
    
    // Create local system components
    LocalSystemComponents LocalSystem;

    // Calculation flags
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX, true );
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR, true );

    // Initialize sizes for the system components:
    this->InitializeSystemMatrices<TMatrixSize>( rLeftHandSideMatrix, rRightHandSideVector, LocalSystem.CalculationFlags );
    
    // Set Variables to Local system components
    LocalSystem.SetLeftHandSideMatrix( rLeftHandSideMatrix );
    LocalSystem.SetRightHandSideVector( rRightHandSideVector );

    // Calculate condition system
    this->CalculateConditionSystem<TMatrixSize>( LocalSystem, rCurrentProcessInfo );

    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateLeftHandSide( 
    MatrixType& rLeftHandSideMatrix,
    ProcessInfo& rCurrentProcessInfo 
    )
{
    // Calculates the size of the system
    constexpr unsigned int TMatrixSize = TDim * (TNumNodes + TNumNodes) + TNumNodes;
    
    // Create local system components
    LocalSystemComponents LocalSystem;

    // Calculation flags
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX, true );

    VectorType RightHandSideVector = Vector( );

    // Initialize sizes for the system components:
    this->InitializeSystemMatrices<TMatrixSize>( rLeftHandSideMatrix, RightHandSideVector, LocalSystem.CalculationFlags );

    // Set Variables to Local system components
    LocalSystem.SetLeftHandSideMatrix( rLeftHandSideMatrix );
    LocalSystem.SetRightHandSideVector( RightHandSideVector );

    // Calculate condition system
    this->CalculateConditionSystem<TMatrixSize>( LocalSystem, rCurrentProcessInfo );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateLeftHandSide( 
    std::vector< MatrixType >& rLeftHandSideMatrices,
    const std::vector< Variable< MatrixType > >& rLHSVariables,
    ProcessInfo& rCurrentProcessInfo 
    )
{
    // Calculates the size of the system
    constexpr unsigned int TMatrixSize = TDim * (TNumNodes + TNumNodes) + TNumNodes;
    
    // Create local system components
    LocalSystemComponents LocalSystem;

    // Calculation flags
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX, true );
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX_WITH_COMPONENTS, true );

    VectorType RightHandSideVector = Vector( );

    // Initialize size for the system components
    for( unsigned int i = 0; i < rLeftHandSideMatrices.size( ); i++ )
    {
        this->InitializeSystemMatrices<TMatrixSize>( rLeftHandSideMatrices[i], RightHandSideVector, LocalSystem.CalculationFlags );
    }

    LocalSystem.SetLeftHandSideMatrices( rLeftHandSideMatrices );
    LocalSystem.SetRightHandSideVector( RightHandSideVector );

    // Calculate condition system
    this->CalculateConditionSystem<TMatrixSize>( LocalSystem, rCurrentProcessInfo );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateRightHandSide( 
    VectorType& rRightHandSideVector,
    ProcessInfo& rCurrentProcessInfo 
    )
{
    // Calculates the size of the system
    constexpr unsigned int TMatrixSize = TDim * (TNumNodes + TNumNodes) + TNumNodes;
    
    // Create local system components
    LocalSystemComponents LocalSystem;

    // Calculation flags
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR, true);

    MatrixType LeftHandSideMatrix = Matrix( );

    // Initialize size for the system components
    this->InitializeSystemMatrices<TMatrixSize>( LeftHandSideMatrix, rRightHandSideVector,LocalSystem.CalculationFlags);

    //Set Variables to Local system components
    LocalSystem.SetLeftHandSideMatrix( LeftHandSideMatrix );
    LocalSystem.SetRightHandSideVector( rRightHandSideVector );

    // Calculate condition system
    this->CalculateConditionSystem<TMatrixSize>( LocalSystem, rCurrentProcessInfo );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateRightHandSide( 
    std::vector< VectorType >& rRightHandSideVectors,
    const std::vector< Variable< VectorType > >& rRHSVariables,
    ProcessInfo& rCurrentProcessInfo )
{
    // Calculates the size of the system
    constexpr unsigned int TMatrixSize = TDim * (TNumNodes + TNumNodes) + TNumNodes;
        
    // Create local system components
    LocalSystemComponents LocalSystem;

    // Calculation flags
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR, true );
    LocalSystem.CalculationFlags.Set( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR_WITH_COMPONENTS, true );

    MatrixType LeftHandSideMatrix = Matrix( );

    // Initialize size for the system components
    for( unsigned int i = 0; i < rRightHandSideVectors.size(); i++ )
    {
        this->InitializeSystemMatrices<TMatrixSize>( LeftHandSideMatrix, rRightHandSideVectors[i], LocalSystem.CalculationFlags );
    }

    // Set Variables to Local system components
    LocalSystem.SetLeftHandSideMatrix( LeftHandSideMatrix );
    LocalSystem.SetRightHandSideVectors( rRightHandSideVectors );

    // Calculate condition system
    this->CalculateConditionSystem<TMatrixSize>( LocalSystem, rCurrentProcessInfo );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::InitializeSystemMatrices( 
    MatrixType& rLeftHandSideMatrix,
    VectorType& rRightHandSideVector,
    Flags& rCalculationFlags 
    )
{
    const unsigned int condition_size = this->CalculateConditionSize<TMatrixSize>( );
    
    // Resizing as needed the LHS
    if ( rCalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX ) ) // Calculation of the matrix is required
    {
        if ( rLeftHandSideMatrix.size1() != condition_size )
        {
            rLeftHandSideMatrix.resize( condition_size, condition_size, false );
        }
        noalias( rLeftHandSideMatrix ) = ZeroMatrix( condition_size, condition_size ); // Resetting LHS
    }

    // Resizing as needed the RHS
    if ( rCalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR ) ) // Calculation of the matrix is required
    {
        if ( rRightHandSideVector.size() != condition_size )
        {
            rRightHandSideVector.resize( condition_size, false );
        }
        rRightHandSideVector = ZeroVector( condition_size ); // Resetting RHS
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateMassMatrix( 
    MatrixType& rMassMatrix, 
    ProcessInfo& rCurrentProcessInfo
    )
{
    KRATOS_TRY;
    
    rMassMatrix.resize(0, 0, false);

    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDampingMatrix( 
    MatrixType& rDampingMatrix,
    ProcessInfo& rCurrentProcessInfo
    )
{
    KRATOS_TRY;

    rDampingMatrix.resize(0, 0, false);

    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize >
const unsigned int AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateConditionSize( )
{
    const unsigned int condition_size = mPairSize * TMatrixSize;
    
    return condition_size;
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim, TNumNodes>::CalculateConditionSystem( 
    LocalSystemComponents& rLocalSystem,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    KRATOS_TRY;
    
    // Create and initialize condition variables:#pragma omp critical
    GeneralVariables rVariables;
    
    // Create the current contact data
    DerivativeData rDerivativeData;
    
    // Create the mortar operators
    MortarConditionMatrices rThisMortarConditionMatrices;

//     // Reading integration points 
//     const GeometryType::IntegrationPointsArrayType& integration_points = mUseManualColocationIntegration ?
//                                                                          mColocationIntegration.IntegrationPoints( ) :
//                                                                          GetGeometry( ).IntegrationPoints( mThisIntegrationMethod );
                                                                                  
    this->InitializeDerivativeData(rDerivativeData, rCurrentProcessInfo);
    
    // Compute Ae and its derivative
    this->CalculateAeAndDeltaAe(rDerivativeData, rVariables, rCurrentProcessInfo); 
    
    // Iterate over the master segments
    for (unsigned int PairIndex = 0; PairIndex < mPairSize; ++PairIndex)
    {   
        // Reading integration points
        this->ComputeSelectiveIntegrationMethod(PairIndex);
        const GeometryType::IntegrationPointsArrayType& integration_points = mUseManualColocationIntegration ?
                                                                         mColocationIntegration.IntegrationPoints( ) :
                                                                         GetGeometry( ).IntegrationPoints( mThisIntegrationMethod );
                                                                         
        // Initialize general variables for the current master element
        this->InitializeGeneralVariables( rVariables, rCurrentProcessInfo, PairIndex );
        
        // Update the contact data
        this->UpdateDerivativeData(rDerivativeData, PairIndex);
        
        // Initialize the mortar operators
        rThisMortarConditionMatrices.Initialize();
         
        // Compute the normal derivatives of the master
        this->CalculateDeltaNormalMaster(rDerivativeData);
        
        // Initialize the integration weight
        double total_weight = 0.0;
        
        // Integrating the mortar operators
        for ( unsigned int PointNumber = 0; PointNumber < integration_points.size(); PointNumber++ )
        {
            // Calculate the kinematic variables
            bool inside = this->CalculateKinematics( rVariables, rDerivativeData, PointNumber, integration_points );
            
            if (inside == true)
            {   
                /* Update the derivatives */
                // Update the derivative of DetJ
                this->CalculateDeltaDetJSlave(rVariables, rDerivativeData);
                // Update the derivatives of the shape functions and the gap
                this->CalculateDeltaN(rVariables, rDerivativeData); // FIXME: This is the old version!!!!
                // The derivatives of the dual shape function
                this->CalculateDeltaPhi(rVariables, rDerivativeData);
                
                const double IntegrationWeight = integration_points[PointNumber].Weight();
                total_weight += IntegrationWeight;
                
                this->CalculateMortarOperators(rThisMortarConditionMatrices, rVariables, rDerivativeData, IntegrationWeight);
            }
        }
        
        // We can consider the pair if at least one of the collocation point is inside 
        if (total_weight > 0.0)
        {
            // Calculates the active/inactive combination pair
            const unsigned int ActiveInactive = GetActiveInactiveValue(this->GetGeometry());
            
            // Assemble of the matrix is required
            if ( rLocalSystem.CalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX ) ||
                    rLocalSystem.CalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX_WITH_COMPONENTS ) )
            {
                // Calculate the local contribution
                bounded_matrix<double, TMatrixSize, TMatrixSize> LHS_contact_pair = this->CalculateLocalLHS<TMatrixSize>( rThisMortarConditionMatrices, PairIndex, ActiveInactive);
                
                // Contributions to stiffness matrix calculated on the reference config
                this->CalculateAndAddLHS<TMatrixSize>( rLocalSystem, LHS_contact_pair, PairIndex );
            }

            // Assemble of the vector is required
            if ( rLocalSystem.CalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR ) ||
                    rLocalSystem.CalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR_WITH_COMPONENTS ) )
            {
                // Calculate the local contribution
                const array_1d<double, TMatrixSize> RHS_contact_pair = this->CalculateLocalRHS<TMatrixSize>( rThisMortarConditionMatrices, PairIndex, ActiveInactive);
                
                // Contribution to previous step contact force and residuals vector
                this->CalculateAndAddRHS<TMatrixSize>( rLocalSystem, RHS_contact_pair, PairIndex );
            }
            
            // Setting the weighted gap
            // Mortar condition matrices - DOperator and MOperator
            const bounded_matrix<double, TNumNodes, TNumNodes>& DOperator = rThisMortarConditionMatrices.DOperator;
            const bounded_matrix<double, TNumNodes, TNumNodes>& MOperator = rThisMortarConditionMatrices.MOperator;
            
            // Current coordinates 
            const bounded_matrix<double, TNumNodes, TDim> x1 = GetCoordinates(this->GetGeometry());
            const bounded_matrix<double, TNumNodes, TDim> x2 = GetCoordinates(mThisMasterElements[PairIndex]->GetGeometry());
    
            const bounded_matrix<double, TNumNodes, TDim> Dx1Mx2 = prod(DOperator, x1) - prod(MOperator, x2); 
            
            for (unsigned int iNode = 0; iNode < TNumNodes; iNode++)
            {
                const array_1d<double, TDim> normal = GetGeometry()[iNode].GetValue(NORMAL);
                const array_1d<double, TDim> aux_array = row(Dx1Mx2, iNode);
                
                #pragma omp atomic 
                GetGeometry()[iNode].GetValue(WEIGHTED_GAP) += inner_prod(aux_array, normal); 
            }
            
//             std::cout << "--------------------------------------------------" << std::endl;
//             KRATOS_WATCH(this->Id());
//             KRATOS_WATCH(PairIndex);
// //             KRATOS_WATCH(rDerivativeData.u1);
// //             KRATOS_WATCH(rDerivativeData.LagrangeMultipliers);
// // //             KRATOS_WATCH(rDerivativeData.DoubleLagrangeMultipliers);
// //             KRATOS_WATCH(LHS_contact_pair);
//             LOG_MATRIX_PRETTY( LHS_contact_pair );
// //             KRATOS_WATCH(RHS_contact_pair);
//             LOG_VECTOR_PRETTY( RHS_contact_pair );
        }
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::InitializeGeneralVariables(
    GeneralVariables& rVariables,
    const ProcessInfo& rCurrentProcessInfo,
    const unsigned int& rMasterElementIndex
    )
{
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();
    
    // Slave element info
    rVariables.Initialize();

    rVariables.SetMasterElement( CurrentMasterElement );
    rVariables.SetMasterElementIndex( rMasterElementIndex );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateAeAndDeltaAe(
    DerivativeData& rDerivativeData,
    GeneralVariables& rVariables,
//     const GeometryType::IntegrationPointsArrayType& integration_points,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    double total_weight = 0.0; // NOTE: The integral is supposed to be in the domain partially integrated, I don't know if consider any additional thing for the partial integration
    
    rDerivativeData.InitializeDeltaAeComponents();
    for (unsigned int PairIndex = 0; PairIndex < mPairSize; ++PairIndex)
    {   
        // Reading integration points
        this->ComputeSelectiveIntegrationMethod(PairIndex);
        const GeometryType::IntegrationPointsArrayType& integration_points = mUseManualColocationIntegration ?
                                                                         mColocationIntegration.IntegrationPoints( ) :
                                                                         GetGeometry( ).IntegrationPoints( mThisIntegrationMethod );

        // Initialize general variables for the current master element
        this->InitializeGeneralVariables( rVariables, rCurrentProcessInfo, PairIndex );
        
        // Update the contact data
        this->UpdateDerivativeData(rDerivativeData, PairIndex);
            
        // Calculating the proportion between the integrated area and segment area
        for ( unsigned int PointNumber = 0; PointNumber < integration_points.size(); PointNumber++ )
        {
            // Calculate the kinematic variables
            bool inside = this->CalculateKinematics( rVariables, rDerivativeData, PointNumber, integration_points );
            
            if (inside == true)
            {   
                const double IntegrationWeight = integration_points[PointNumber].Weight();
                total_weight += IntegrationWeight;
                this->CalculateDeltaAeComponents(rVariables, rDerivativeData, IntegrationWeight);
            }
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::InitializeDerivativeData(
    DerivativeData& rDerivativeData,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    // Slave element info
    rDerivativeData.Initialize(GetGeometry());
    
    /* LM */
    rDerivativeData.LagrangeMultipliers = GetVariableVector(GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    /* NORMALS */
    rDerivativeData.Normal_s = GetVariableMatrix(GetGeometry(),  NORMAL); 
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::UpdateDerivativeData(
    DerivativeData& rDerivativeData,
    const unsigned int& rMasterElementIndex
    )
{    
    // Slave element info
    rDerivativeData.UpdateMasterPair(mThisMasterElements[rMasterElementIndex] );
    
    /* NORMALS */
    for (unsigned int iNode = 0; iNode < TNumNodes; iNode++)
    {
//         array_1d<double,3> normal = this->GetValue(NORMAL);
        array_1d<double,3> normal = GetGeometry()[iNode].GetValue(NORMAL);
    }
}

/*********************************COMPUTE KINEMATICS*********************************/
/************************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
bool AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateKinematics( 
    GeneralVariables& rVariables,
    const DerivativeData rDerivativeData,
    const double& rPointNumber,
    const GeometryType::IntegrationPointsArrayType& integration_points
    )
{
    /* DEFINITIONS */
    GeometryType& slave_nodes  = GetGeometry( );

    /* LOCAL COORDINATES */
    const PointType& local_point = integration_points[rPointNumber].Coordinates();
    
    /*  POPULATE MATRICES AND VECTORS */
    
    /// SLAVE CONDITION ///
    
    // SHAPE FUNCTIONS 
    slave_nodes.ShapeFunctionsValues( rVariables.N_Slave, local_point.Coordinates() );
    rVariables.Phi_LagrangeMultipliers = prod(rDerivativeData.Ae, rVariables.N_Slave);
//     rVariables.Phi_LagrangeMultipliers = rVariables.N_Slave; // TODO: This could be needed in the future to be different than the standart shape functions 
    
    // SHAPE FUNCTION DERIVATIVES
    slave_nodes.ShapeFunctionsLocalGradients( rVariables.DN_De_Slave, local_point );
//     slave_nodes.ShapeFunctionsLocalGradients( rVariables.DN_De_Slave , local_point );// TODO: This could be needed in the future to be different than the standart shape functions
    
    // MASTER CONDITION
    const bool inside = this->MasterShapeFunctionValue( rVariables, local_point);
    
    /* CALCULATE JACOBIAN AND JACOBIAN DETERMINANT */
    slave_nodes.Jacobian( rVariables.j_Slave, local_point.Coordinates() );
    rVariables.DetJSlave = ContactUtilities::ContactElementDetJacobian( rVariables.j_Slave );
    
    return inside;
}
 
/***********************************************************************************/
/*************** METHODS TO CALCULATE THE CONTACT CONDITION MATRICES ***************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
bool AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::MasterShapeFunctionValue(
    GeneralVariables& rVariables,
    const PointType& local_point 
    )
{    
    GeometryType& master_seg = rVariables.GetMasterElement( );

    PointType projected_gp_global;
//     const array_1d<double,3> normal = this->GetValue(NORMAL);
    const array_1d<double,3> normal = ContactUtilities::GaussPointNormal(rVariables.N_Slave, GetGeometry());
    
    GeometryType::CoordinatesArrayType slave_gp_global;
    double aux_dist = 0.0;
    this->GetGeometry( ).GlobalCoordinates( slave_gp_global, local_point );
    ContactUtilities::ProjectDirection( master_seg, slave_gp_global, projected_gp_global, aux_dist, -normal ); // The opposite direction
    
    GeometryType::CoordinatesArrayType projected_gp_local;
    
    const bool inside = master_seg.IsInside( projected_gp_global.Coordinates( ), projected_gp_local ) ;
    
    if( inside == true )
    {
        // SHAPE FUNCTIONS 
        master_seg.ShapeFunctionsValues(         rVariables.N_Master,     projected_gp_local );         
        master_seg.ShapeFunctionsLocalGradients( rVariables.DN_De_Master, projected_gp_local );
    }
    
    return inside;
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateMortarOperators(
    MortarConditionMatrices& rThisMortarConditionMatrices,
    GeneralVariables& rVariables,
    DerivativeData& rDerivativeData,
    const double& rIntegrationWeight
    )
{
    /* DEFINITIONS */
    const double J_s = rVariables.DetJSlave; 
    const VectorType Phi = rVariables.Phi_LagrangeMultipliers;
    const VectorType N1  = rVariables.N_Slave;
    const VectorType N2  = rVariables.N_Master;
    
    // Derivatives
    static const unsigned int Size1 = (TNumNodes * TDim);
    static const unsigned int Size2 = 2 * (TNumNodes * TDim);

    const array_1d<double, Size1> DeltaJ_s  = rDerivativeData.DeltaJ_s;
    const array_1d<array_1d<double, TNumNodes >, Size1> DeltaPhi = rDerivativeData.DeltaPhi;
    const array_1d<array_1d<double, TNumNodes >, Size2> DeltaN1  = rDerivativeData.DeltaN1;
    const array_1d<array_1d<double, TNumNodes >, Size2> DeltaN2  = rDerivativeData.DeltaN2;
    
    // Mortar condition matrices - DOperator and MOperator
    bounded_matrix<double, TNumNodes, TNumNodes>& DOperator = rThisMortarConditionMatrices.DOperator;
    bounded_matrix<double, TNumNodes, TNumNodes>& MOperator = rThisMortarConditionMatrices.MOperator;
    
    // D and M directional derivatives
    array_1d<bounded_matrix<double, TNumNodes, TNumNodes>, Size2>& DeltaDOperator = rThisMortarConditionMatrices.DeltaDOperator;
    array_1d<bounded_matrix<double, TNumNodes, TNumNodes>, Size2>& DeltaMOperator = rThisMortarConditionMatrices.DeltaMOperator;
    
    for (unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++)
    {
        for (unsigned int j_slave = 0; j_slave < TNumNodes; j_slave++)
        {
            DOperator(i_slave, j_slave) = J_s * rIntegrationWeight * Phi[j_slave] * N1[i_slave];
            MOperator(i_slave, j_slave) = J_s * rIntegrationWeight * Phi[j_slave] * N2[i_slave];
            
            for (unsigned int i = 0; i < TDim * TNumNodes; i++)
            {
                DeltaDOperator[i](i_slave, j_slave) = J_s * rIntegrationWeight * Phi[j_slave] * N1[i_slave]   \
                                                                    + DeltaJ_s[i] * rIntegrationWeight * Phi[j_slave] * N1[i_slave]     \
                                                                    + J_s * rIntegrationWeight * DeltaPhi[i][j_slave] * N1[i_slave]     \
                                                                    + J_s * rIntegrationWeight * Phi[j_slave] * DeltaN1[i][i_slave];
                                                                            
                DeltaMOperator[i](i_slave, j_slave) = J_s * rIntegrationWeight * Phi[j_slave] * N2[i_slave]   \
                                                                    + DeltaJ_s[i] * rIntegrationWeight * Phi[j_slave] * N2[i_slave]     \
                                                                    + J_s * rIntegrationWeight * DeltaPhi[i][j_slave] * N2[i_slave]     \
                                                                    + J_s * rIntegrationWeight * Phi[j_slave] * DeltaN2[i][i_slave];
            }
            for (unsigned int i = TDim * TNumNodes; i < 2 * TDim * TNumNodes; i++)
            {
                DeltaDOperator[i](i_slave, j_slave) = J_s * rIntegrationWeight * Phi[j_slave] * DeltaN1[i][i_slave];
                                                                            
                DeltaMOperator[i](i_slave, j_slave) = J_s * rIntegrationWeight * Phi[j_slave] * DeltaN2[i][i_slave];
            }
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaAeComponents(
    GeneralVariables& rVariables,
    DerivativeData& rDerivativeData,
    const double& rIntegrationWeight
    )
{
    /* DEFINITIONS */
    const VectorType N1 = rVariables.N_Slave;
    const double detJ = rVariables.DetJSlave; 
     
    rDerivativeData.De += rIntegrationWeight * this->ComputeDe( N1, detJ);
    rDerivativeData.Me += rIntegrationWeight * this->ComputeMe( N1, detJ);
    
    for (unsigned int i = 0; i < TDim * TNumNodes; i++)
    {
        const double DeltaDetJ = rDerivativeData.DeltaJ_s[i];
        
        bounded_matrix<double, TNumNodes, TNumNodes> DeltaDe;
        const bounded_matrix<double, TNumNodes, TNumNodes> DeltaMe  = DeltaDetJ * outer_prod(N1, N1);
        
        for (unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++)
        {
            for (unsigned int j_slave = 0; j_slave < TNumNodes; j_slave++)
            {
                if (i_slave == j_slave)
                {
                    DeltaDe(i_slave, i_slave) = DeltaDetJ * N1[i_slave];
                }
                else
                {
                    DeltaDe(i_slave, j_slave) = 0.0;
                }
            }
        }
        
        rDerivativeData.DeltaDe[i] += rIntegrationWeight * DeltaDe;
        rDerivativeData.DeltaMe[i] += rIntegrationWeight * DeltaMe;
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
bounded_matrix<double, TNumNodes, TNumNodes> AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::ComputeDe(
        const array_1d<double, TNumNodes> N1, 
        const double detJ 
        )
{
    bounded_matrix<double, TNumNodes, TNumNodes> De;
    
    for (unsigned int i = 0; i < TNumNodes; i++)
    {
        for (unsigned int j = 0; j < TNumNodes; j++)
        {
            if (i == j)
            {
                De(i,i) = detJ * N1[i];
            }
        }
    }
    
    return De;
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
bounded_matrix<double, TNumNodes, TNumNodes> AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::ComputeMe(
        const array_1d<double, TNumNodes> N1, 
        const double detJ 
        )
{
    bounded_matrix<double, TNumNodes, TNumNodes>  Me;
    
    for (unsigned int i = 0; i < TNumNodes; i++)
    {
        for (unsigned int j = 0; j < TNumNodes; j++)
        {
            Me(i,j) = detJ * N1[i] * N1[j];
        }
    }
    
    return Me;
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaAe(DerivativeData& rDerivativeData)
{        
    Matrix InvMe = ZeroMatrix(TNumNodes, TNumNodes);
    // NOTE: Legacy inversion. In case Me is almost singular or singular (few GP integrated), will be considered as ZeroMatrix 
    if (TNumNodes == 2)
    {
        StructuralMechanicsMathUtilities::InvMat2x2(rDerivativeData.Me, InvMe); // TODO: Change this for something more performant
    }
    else if (TNumNodes == 3)
    {
        StructuralMechanicsMathUtilities::InvMat3x3(rDerivativeData.Me, InvMe);
    }   
    else
    {
        StructuralMechanicsMathUtilities::InvertMatrix(rDerivativeData.Me, InvMe);
    }   
    
//     // Inversion using the QR decompisition // NOTE: Giving problems in the cases of almost singular matrix
//     QR<double, row_major> QR_decomposition;     
//     QR_decomposition.compute(TNumNodes, TNumNodes, &rDerivativeData.Me(0, 0));
//     
//     Matrix aux_I = identity_matrix<double>( TNumNodes ); // NOTE: Simplify this code¬ø?
//     for (unsigned int col = 0; col < TNumNodes; col++)
//     {   Vector aux_I_col = column(aux_I, col);
//         Vector aux_InvMe_col = ZeroVector(TNumNodes);
//         QR_decomposition.solve(&aux_I_col[0], &aux_InvMe_col[0]);
//         column(InvMe, col) = aux_InvMe_col;
//     }
    
    noalias(rDerivativeData.Ae) = prod(rDerivativeData.De, InvMe);
    
    static const unsigned int Size1 = (TNumNodes * TDim);
    array_1d<bounded_matrix<double, TNumNodes, TNumNodes> , Size1>& DeltaAe = rDerivativeData.DeltaAe;
    
    for (unsigned int i = 0; i < TDim * TNumNodes; i++)
    {
        DeltaAe[i] = rDerivativeData.DeltaDe[i] - prod(rDerivativeData.Ae, rDerivativeData.DeltaMe[i]);
        DeltaAe[i] = prod(rDerivativeData.DeltaAe[i], InvMe);
//         DeltaAe[i] = ZeroMatrix(TNumNodes, TNumNodes); // NOTE: Test with zero derivative
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateAndAddLHS(
    LocalSystemComponents& rLocalSystem,
    const bounded_matrix<double, TMatrixSize, TMatrixSize>& LHS_contact_pair, 
    const unsigned int rPairIndex
    )
{
    /* DEFINITIONS */

    if ( rLocalSystem.CalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_LHS_MATRIX_WITH_COMPONENTS ) )
    {
        /* COMPONENT-WISE LHS MATRIX */
        const std::vector<Variable<MatrixType> >& rLeftHandSideVariables = rLocalSystem.GetLeftHandSideVariables( );
        bool calculated;

        for ( unsigned int i = 0; i < rLeftHandSideVariables.size( ); i++ )
        {
            calculated = false;

            if ( rLeftHandSideVariables[i] == MORTAR_CONTACT_OPERATOR )
            {
                MatrixType& rLeftHandSideMatrix = rLocalSystem.GetLeftHandSideMatrices( )[i];
                
                // Assemble in the correct position
                this->AssembleContactPairLHSToConditionSystem<TMatrixSize>(LHS_contact_pair, rLeftHandSideMatrix, rPairIndex);
                calculated = true;
            }

            if ( calculated == false )
            {
                KRATOS_THROW_ERROR( std::logic_error,  " CONDITION can not supply the required local system variable: ", rLeftHandSideVariables[i] );
            }
        }
    }
    else 
    {   
        /* SINGLE LHS MATRIX */
        MatrixType& rLeftHandSideMatrix = rLocalSystem.GetLeftHandSideMatrix( );      
        
        // Assemble in the correct position
        this->AssembleContactPairLHSToConditionSystem<TMatrixSize>(LHS_contact_pair, rLeftHandSideMatrix, rPairIndex);
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::AssembleContactPairLHSToConditionSystem(
    const bounded_matrix<double, TMatrixSize, TMatrixSize>& rPairLHS,
    MatrixType& rConditionLHS,
    const unsigned int rPairIndex
    )
{
    // Find location of the pair's master DOFs in ConditionRHS
    const unsigned int index_begin = rPairIndex * TMatrixSize;
    const unsigned int index_end  = index_begin + TMatrixSize;
    
    subrange( rConditionLHS, index_begin, index_end, index_begin, index_end) += rPairLHS;
}

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
template<>
bounded_matrix<double, 10, 10> AugmentedLagrangianMethodFrictionlessMortarContactCondition<2,2>::CalculateLocalLHS<10>(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    bounded_matrix<double,10,10> lhs;
    
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = GetVariableMatrix(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2 = GetVariableMatrix(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> X1 = GetCoordinates(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = GetCoordinates(CurrentMasterElement, false);
    
    const array_1d<double, 2> lmnormal = GetVariableVector(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = GetVariableMatrix(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    // Mortar operators derivatives
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaMOperator = rMortarConditionMatrices.DeltaMOperator;
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaDOperator = rMortarConditionMatrices.DeltaDOperator;

    if (rActiveInactive == 0 )
    {
        const double clhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=0;
        lhs(0,1)=0;
        lhs(0,2)=0;
        lhs(0,3)=0;
        lhs(0,4)=0;
        lhs(0,5)=0;
        lhs(0,6)=0;
        lhs(0,7)=0;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(1,0)=0;
        lhs(1,1)=0;
        lhs(1,2)=0;
        lhs(1,3)=0;
        lhs(1,4)=0;
        lhs(1,5)=0;
        lhs(1,6)=0;
        lhs(1,7)=0;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(2,0)=0;
        lhs(2,1)=0;
        lhs(2,2)=0;
        lhs(2,3)=0;
        lhs(2,4)=0;
        lhs(2,5)=0;
        lhs(2,6)=0;
        lhs(2,7)=0;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(3,0)=0;
        lhs(3,1)=0;
        lhs(3,2)=0;
        lhs(3,3)=0;
        lhs(3,4)=0;
        lhs(3,5)=0;
        lhs(3,6)=0;
        lhs(3,7)=0;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(4,0)=0;
        lhs(4,1)=0;
        lhs(4,2)=0;
        lhs(4,3)=0;
        lhs(4,4)=0;
        lhs(4,5)=0;
        lhs(4,6)=0;
        lhs(4,7)=0;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(5,0)=0;
        lhs(5,1)=0;
        lhs(5,2)=0;
        lhs(5,3)=0;
        lhs(5,4)=0;
        lhs(5,5)=0;
        lhs(5,6)=0;
        lhs(5,7)=0;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(6,0)=0;
        lhs(6,1)=0;
        lhs(6,2)=0;
        lhs(6,3)=0;
        lhs(6,4)=0;
        lhs(6,5)=0;
        lhs(6,6)=0;
        lhs(6,7)=0;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(7,0)=0;
        lhs(7,1)=0;
        lhs(7,2)=0;
        lhs(7,3)=0;
        lhs(7,4)=0;
        lhs(7,5)=0;
        lhs(7,6)=0;
        lhs(7,7)=0;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs0;
        lhs(8,9)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=0;
        lhs(9,9)=clhs0;
    }
    else if (rActiveInactive == 2 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs6 =     X2(0,0) + u2(0,0);
        const double clhs7 =     X2(1,0) + u2(1,0);
        const double clhs8 =     normalslave(1,0)*(clhs0 + clhs2*clhs6 + clhs5*clhs7) + normalslave(1,1)*(clhs1*clhs2 + clhs3*clhs5);
        const double clhs9 =     clhs8*penalty_parameter;
        const double clhs10 =     X1(0,0) + u1(0,0);
        const double clhs11 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs12 =     X1(1,0) + u1(1,0);
        const double clhs13 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs14 =     X1(0,1) + u1(0,1);
        const double clhs15 =     X1(1,1) + u1(1,1);
        const double clhs16 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs6 + clhs10*clhs11 + clhs12*clhs13 - clhs4*clhs7) + normalslave(1,1)*(-clhs0*clhs1 + clhs11*clhs14 + clhs13*clhs15 - clhs3*clhs4));
        const double clhs17 =     -clhs0*clhs9 + clhs16*clhs2;
        const double clhs18 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs19 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs20 =     normalslave(1,0)*(clhs18*clhs6 + clhs19*clhs7) + normalslave(1,1)*(clhs0 + clhs1*clhs18 + clhs19*clhs3);
        const double clhs21 =     clhs20*penalty_parameter;
        const double clhs22 =     -clhs0*clhs21 + clhs16*clhs18;
        const double clhs23 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs24 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs25 =     normalslave(1,0)*(clhs23*clhs6 + clhs24*clhs7 + clhs4) + normalslave(1,1)*(clhs1*clhs23 + clhs24*clhs3);
        const double clhs26 =     clhs25*penalty_parameter;
        const double clhs27 =     -clhs0*clhs26 + clhs16*clhs23;
        const double clhs28 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs29 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs30 =     normalslave(1,0)*(clhs28*clhs6 + clhs29*clhs7) + normalslave(1,1)*(clhs1*clhs28 + clhs29*clhs3 + clhs4);
        const double clhs31 =     clhs30*penalty_parameter;
        const double clhs32 =     -clhs0*clhs31 + clhs16*clhs28;
        const double clhs33 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs34 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs35 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs36 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs37 =     normalslave(1,0)*(clhs10*clhs34 + clhs11 + clhs12*clhs35 - clhs33*clhs6 - clhs36*clhs7) + normalslave(1,1)*(-clhs1*clhs33 + clhs14*clhs34 + clhs15*clhs35 - clhs3*clhs36);
        const double clhs38 =     clhs37*penalty_parameter;
        const double clhs39 =     clhs0*clhs38 + clhs16*clhs33;
        const double clhs40 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs41 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs42 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs43 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs44 =     normalslave(1,0)*(clhs10*clhs41 + clhs12*clhs42 - clhs40*clhs6 - clhs43*clhs7) + normalslave(1,1)*(-clhs1*clhs40 + clhs11 + clhs14*clhs41 + clhs15*clhs42 - clhs3*clhs43);
        const double clhs45 =     clhs44*penalty_parameter;
        const double clhs46 =     clhs0*clhs45 + clhs16*clhs40;
        const double clhs47 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs48 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs49 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs50 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs51 =     normalslave(1,0)*(clhs10*clhs48 + clhs12*clhs49 + clhs13 - clhs47*clhs6 - clhs50*clhs7) + normalslave(1,1)*(-clhs1*clhs47 + clhs14*clhs48 + clhs15*clhs49 - clhs3*clhs50);
        const double clhs52 =     clhs51*penalty_parameter;
        const double clhs53 =     clhs0*clhs52 + clhs16*clhs47;
        const double clhs54 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs55 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs56 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs57 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs58 =     normalslave(1,0)*(clhs10*clhs55 + clhs12*clhs56 - clhs54*clhs6 - clhs57*clhs7) + normalslave(1,1)*(-clhs1*clhs54 + clhs13 + clhs14*clhs55 + clhs15*clhs56 - clhs3*clhs57);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     clhs0*clhs59 + clhs16*clhs54;
        const double clhs61 =     normalslave(1,0)*scale_factor;
        const double clhs62 =     normalslave(1,1)*scale_factor;
        const double clhs63 =     clhs16*clhs5 - clhs4*clhs9;
        const double clhs64 =     clhs16*clhs19 - clhs21*clhs4;
        const double clhs65 =     clhs16*clhs24 - clhs26*clhs4;
        const double clhs66 =     clhs16*clhs29 - clhs31*clhs4;
        const double clhs67 =     clhs16*clhs36 + clhs38*clhs4;
        const double clhs68 =     clhs16*clhs43 + clhs4*clhs45;
        const double clhs69 =     clhs16*clhs50 + clhs4*clhs52;
        const double clhs70 =     clhs16*clhs57 + clhs4*clhs59;
        const double clhs71 =     clhs8*normalslave(1,0)*penalty_parameter;
        const double clhs72 =     clhs20*normalslave(1,0)*penalty_parameter;
        const double clhs73 =     clhs25*normalslave(1,0)*penalty_parameter;
        const double clhs74 =     clhs30*normalslave(1,0)*penalty_parameter;
        const double clhs75 =     clhs11*clhs38 + clhs16*clhs34;
        const double clhs76 =     clhs11*clhs45 + clhs16*clhs41;
        const double clhs77 =     clhs11*clhs52 + clhs16*clhs48;
        const double clhs78 =     clhs11*clhs59 + clhs16*clhs55;
        const double clhs79 =     clhs8*normalslave(1,1)*penalty_parameter;
        const double clhs80 =     clhs20*normalslave(1,1)*penalty_parameter;
        const double clhs81 =     clhs25*normalslave(1,1)*penalty_parameter;
        const double clhs82 =     clhs30*normalslave(1,1)*penalty_parameter;
        const double clhs83 =     clhs13*clhs38 + clhs16*clhs35;
        const double clhs84 =     clhs13*clhs45 + clhs16*clhs42;
        const double clhs85 =     clhs13*clhs52 + clhs16*clhs49;
        const double clhs86 =     clhs13*clhs59 + clhs16*clhs56;
    
        lhs(0,0)=clhs17*normalslave(1,0);
        lhs(0,1)=clhs22*normalslave(1,0);
        lhs(0,2)=clhs27*normalslave(1,0);
        lhs(0,3)=clhs32*normalslave(1,0);
        lhs(0,4)=clhs39*normalslave(1,0);
        lhs(0,5)=clhs46*normalslave(1,0);
        lhs(0,6)=clhs53*normalslave(1,0);
        lhs(0,7)=clhs60*normalslave(1,0);
        lhs(0,8)=0;
        lhs(0,9)=clhs0*clhs61;
        lhs(1,0)=clhs17*normalslave(1,1);
        lhs(1,1)=clhs22*normalslave(1,1);
        lhs(1,2)=clhs27*normalslave(1,1);
        lhs(1,3)=clhs32*normalslave(1,1);
        lhs(1,4)=clhs39*normalslave(1,1);
        lhs(1,5)=clhs46*normalslave(1,1);
        lhs(1,6)=clhs53*normalslave(1,1);
        lhs(1,7)=clhs60*normalslave(1,1);
        lhs(1,8)=0;
        lhs(1,9)=clhs0*clhs62;
        lhs(2,0)=clhs63*normalslave(1,0);
        lhs(2,1)=clhs64*normalslave(1,0);
        lhs(2,2)=clhs65*normalslave(1,0);
        lhs(2,3)=clhs66*normalslave(1,0);
        lhs(2,4)=clhs67*normalslave(1,0);
        lhs(2,5)=clhs68*normalslave(1,0);
        lhs(2,6)=clhs69*normalslave(1,0);
        lhs(2,7)=clhs70*normalslave(1,0);
        lhs(2,8)=0;
        lhs(2,9)=clhs4*clhs61;
        lhs(3,0)=clhs63*normalslave(1,1);
        lhs(3,1)=clhs64*normalslave(1,1);
        lhs(3,2)=clhs65*normalslave(1,1);
        lhs(3,3)=clhs66*normalslave(1,1);
        lhs(3,4)=clhs67*normalslave(1,1);
        lhs(3,5)=clhs68*normalslave(1,1);
        lhs(3,6)=clhs69*normalslave(1,1);
        lhs(3,7)=clhs70*normalslave(1,1);
        lhs(3,8)=0;
        lhs(3,9)=clhs4*clhs62;
        lhs(4,0)=clhs11*clhs71;
        lhs(4,1)=clhs11*clhs72;
        lhs(4,2)=clhs11*clhs73;
        lhs(4,3)=clhs11*clhs74;
        lhs(4,4)=-clhs75*normalslave(1,0);
        lhs(4,5)=-clhs76*normalslave(1,0);
        lhs(4,6)=-clhs77*normalslave(1,0);
        lhs(4,7)=-clhs78*normalslave(1,0);
        lhs(4,8)=0;
        lhs(4,9)=-clhs11*clhs61;
        lhs(5,0)=clhs11*clhs79;
        lhs(5,1)=clhs11*clhs80;
        lhs(5,2)=clhs11*clhs81;
        lhs(5,3)=clhs11*clhs82;
        lhs(5,4)=-clhs75*normalslave(1,1);
        lhs(5,5)=-clhs76*normalslave(1,1);
        lhs(5,6)=-clhs77*normalslave(1,1);
        lhs(5,7)=-clhs78*normalslave(1,1);
        lhs(5,8)=0;
        lhs(5,9)=-clhs11*clhs62;
        lhs(6,0)=clhs13*clhs71;
        lhs(6,1)=clhs13*clhs72;
        lhs(6,2)=clhs13*clhs73;
        lhs(6,3)=clhs13*clhs74;
        lhs(6,4)=-clhs83*normalslave(1,0);
        lhs(6,5)=-clhs84*normalslave(1,0);
        lhs(6,6)=-clhs85*normalslave(1,0);
        lhs(6,7)=-clhs86*normalslave(1,0);
        lhs(6,8)=0;
        lhs(6,9)=-clhs13*clhs61;
        lhs(7,0)=clhs13*clhs79;
        lhs(7,1)=clhs13*clhs80;
        lhs(7,2)=clhs13*clhs81;
        lhs(7,3)=clhs13*clhs82;
        lhs(7,4)=-clhs83*normalslave(1,1);
        lhs(7,5)=-clhs84*normalslave(1,1);
        lhs(7,6)=-clhs85*normalslave(1,1);
        lhs(7,7)=-clhs86*normalslave(1,1);
        lhs(7,8)=0;
        lhs(7,9)=-clhs13*clhs62;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        lhs(8,9)=0;
        lhs(9,0)=clhs8*scale_factor;
        lhs(9,1)=clhs20*scale_factor;
        lhs(9,2)=clhs25*scale_factor;
        lhs(9,3)=clhs30*scale_factor;
        lhs(9,4)=-clhs37*scale_factor;
        lhs(9,5)=-clhs44*scale_factor;
        lhs(9,6)=-clhs51*scale_factor;
        lhs(9,7)=-clhs58*scale_factor;
        lhs(9,8)=0;
        lhs(9,9)=0;
    }
    else if (rActiveInactive == 1 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs6 =     X2(0,0) + u2(0,0);
        const double clhs7 =     X2(1,0) + u2(1,0);
        const double clhs8 =     normalslave(0,0)*(clhs0 + clhs2*clhs6 + clhs5*clhs7) + normalslave(0,1)*(clhs1*clhs2 + clhs3*clhs5);
        const double clhs9 =     clhs8*penalty_parameter;
        const double clhs10 =     X1(0,0) + u1(0,0);
        const double clhs11 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs12 =     X1(1,0) + u1(1,0);
        const double clhs13 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs14 =     X1(0,1) + u1(0,1);
        const double clhs15 =     X1(1,1) + u1(1,1);
        const double clhs16 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs6 + clhs10*clhs11 + clhs12*clhs13 - clhs4*clhs7) + normalslave(0,1)*(-clhs0*clhs1 + clhs11*clhs14 + clhs13*clhs15 - clhs3*clhs4));
        const double clhs17 =     -clhs0*clhs9 + clhs16*clhs2;
        const double clhs18 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs19 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs20 =     normalslave(0,0)*(clhs18*clhs6 + clhs19*clhs7) + normalslave(0,1)*(clhs0 + clhs1*clhs18 + clhs19*clhs3);
        const double clhs21 =     clhs20*penalty_parameter;
        const double clhs22 =     -clhs0*clhs21 + clhs16*clhs18;
        const double clhs23 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs24 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs25 =     normalslave(0,0)*(clhs23*clhs6 + clhs24*clhs7 + clhs4) + normalslave(0,1)*(clhs1*clhs23 + clhs24*clhs3);
        const double clhs26 =     clhs25*penalty_parameter;
        const double clhs27 =     -clhs0*clhs26 + clhs16*clhs23;
        const double clhs28 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs29 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs30 =     normalslave(0,0)*(clhs28*clhs6 + clhs29*clhs7) + normalslave(0,1)*(clhs1*clhs28 + clhs29*clhs3 + clhs4);
        const double clhs31 =     clhs30*penalty_parameter;
        const double clhs32 =     -clhs0*clhs31 + clhs16*clhs28;
        const double clhs33 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs34 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs35 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs36 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs37 =     normalslave(0,0)*(clhs10*clhs34 + clhs11 + clhs12*clhs35 - clhs33*clhs6 - clhs36*clhs7) + normalslave(0,1)*(-clhs1*clhs33 + clhs14*clhs34 + clhs15*clhs35 - clhs3*clhs36);
        const double clhs38 =     clhs37*penalty_parameter;
        const double clhs39 =     clhs0*clhs38 + clhs16*clhs33;
        const double clhs40 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs41 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs42 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs43 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs44 =     normalslave(0,0)*(clhs10*clhs41 + clhs12*clhs42 - clhs40*clhs6 - clhs43*clhs7) + normalslave(0,1)*(-clhs1*clhs40 + clhs11 + clhs14*clhs41 + clhs15*clhs42 - clhs3*clhs43);
        const double clhs45 =     clhs44*penalty_parameter;
        const double clhs46 =     clhs0*clhs45 + clhs16*clhs40;
        const double clhs47 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs48 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs49 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs50 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs51 =     normalslave(0,0)*(clhs10*clhs48 + clhs12*clhs49 + clhs13 - clhs47*clhs6 - clhs50*clhs7) + normalslave(0,1)*(-clhs1*clhs47 + clhs14*clhs48 + clhs15*clhs49 - clhs3*clhs50);
        const double clhs52 =     clhs51*penalty_parameter;
        const double clhs53 =     clhs0*clhs52 + clhs16*clhs47;
        const double clhs54 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs55 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs56 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs57 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs58 =     normalslave(0,0)*(clhs10*clhs55 + clhs12*clhs56 - clhs54*clhs6 - clhs57*clhs7) + normalslave(0,1)*(-clhs1*clhs54 + clhs13 + clhs14*clhs55 + clhs15*clhs56 - clhs3*clhs57);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     clhs0*clhs59 + clhs16*clhs54;
        const double clhs61 =     normalslave(0,0)*scale_factor;
        const double clhs62 =     normalslave(0,1)*scale_factor;
        const double clhs63 =     clhs16*clhs5 - clhs4*clhs9;
        const double clhs64 =     clhs16*clhs19 - clhs21*clhs4;
        const double clhs65 =     clhs16*clhs24 - clhs26*clhs4;
        const double clhs66 =     clhs16*clhs29 - clhs31*clhs4;
        const double clhs67 =     clhs16*clhs36 + clhs38*clhs4;
        const double clhs68 =     clhs16*clhs43 + clhs4*clhs45;
        const double clhs69 =     clhs16*clhs50 + clhs4*clhs52;
        const double clhs70 =     clhs16*clhs57 + clhs4*clhs59;
        const double clhs71 =     clhs8*normalslave(0,0)*penalty_parameter;
        const double clhs72 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs73 =     clhs25*normalslave(0,0)*penalty_parameter;
        const double clhs74 =     clhs30*normalslave(0,0)*penalty_parameter;
        const double clhs75 =     clhs11*clhs38 + clhs16*clhs34;
        const double clhs76 =     clhs11*clhs45 + clhs16*clhs41;
        const double clhs77 =     clhs11*clhs52 + clhs16*clhs48;
        const double clhs78 =     clhs11*clhs59 + clhs16*clhs55;
        const double clhs79 =     clhs8*normalslave(0,1)*penalty_parameter;
        const double clhs80 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs81 =     clhs25*normalslave(0,1)*penalty_parameter;
        const double clhs82 =     clhs30*normalslave(0,1)*penalty_parameter;
        const double clhs83 =     clhs13*clhs38 + clhs16*clhs35;
        const double clhs84 =     clhs13*clhs45 + clhs16*clhs42;
        const double clhs85 =     clhs13*clhs52 + clhs16*clhs49;
        const double clhs86 =     clhs13*clhs59 + clhs16*clhs56;
    
        lhs(0,0)=clhs17*normalslave(0,0);
        lhs(0,1)=clhs22*normalslave(0,0);
        lhs(0,2)=clhs27*normalslave(0,0);
        lhs(0,3)=clhs32*normalslave(0,0);
        lhs(0,4)=clhs39*normalslave(0,0);
        lhs(0,5)=clhs46*normalslave(0,0);
        lhs(0,6)=clhs53*normalslave(0,0);
        lhs(0,7)=clhs60*normalslave(0,0);
        lhs(0,8)=clhs0*clhs61;
        lhs(0,9)=0;
        lhs(1,0)=clhs17*normalslave(0,1);
        lhs(1,1)=clhs22*normalslave(0,1);
        lhs(1,2)=clhs27*normalslave(0,1);
        lhs(1,3)=clhs32*normalslave(0,1);
        lhs(1,4)=clhs39*normalslave(0,1);
        lhs(1,5)=clhs46*normalslave(0,1);
        lhs(1,6)=clhs53*normalslave(0,1);
        lhs(1,7)=clhs60*normalslave(0,1);
        lhs(1,8)=clhs0*clhs62;
        lhs(1,9)=0;
        lhs(2,0)=clhs63*normalslave(0,0);
        lhs(2,1)=clhs64*normalslave(0,0);
        lhs(2,2)=clhs65*normalslave(0,0);
        lhs(2,3)=clhs66*normalslave(0,0);
        lhs(2,4)=clhs67*normalslave(0,0);
        lhs(2,5)=clhs68*normalslave(0,0);
        lhs(2,6)=clhs69*normalslave(0,0);
        lhs(2,7)=clhs70*normalslave(0,0);
        lhs(2,8)=clhs4*clhs61;
        lhs(2,9)=0;
        lhs(3,0)=clhs63*normalslave(0,1);
        lhs(3,1)=clhs64*normalslave(0,1);
        lhs(3,2)=clhs65*normalslave(0,1);
        lhs(3,3)=clhs66*normalslave(0,1);
        lhs(3,4)=clhs67*normalslave(0,1);
        lhs(3,5)=clhs68*normalslave(0,1);
        lhs(3,6)=clhs69*normalslave(0,1);
        lhs(3,7)=clhs70*normalslave(0,1);
        lhs(3,8)=clhs4*clhs62;
        lhs(3,9)=0;
        lhs(4,0)=clhs11*clhs71;
        lhs(4,1)=clhs11*clhs72;
        lhs(4,2)=clhs11*clhs73;
        lhs(4,3)=clhs11*clhs74;
        lhs(4,4)=-clhs75*normalslave(0,0);
        lhs(4,5)=-clhs76*normalslave(0,0);
        lhs(4,6)=-clhs77*normalslave(0,0);
        lhs(4,7)=-clhs78*normalslave(0,0);
        lhs(4,8)=-clhs11*clhs61;
        lhs(4,9)=0;
        lhs(5,0)=clhs11*clhs79;
        lhs(5,1)=clhs11*clhs80;
        lhs(5,2)=clhs11*clhs81;
        lhs(5,3)=clhs11*clhs82;
        lhs(5,4)=-clhs75*normalslave(0,1);
        lhs(5,5)=-clhs76*normalslave(0,1);
        lhs(5,6)=-clhs77*normalslave(0,1);
        lhs(5,7)=-clhs78*normalslave(0,1);
        lhs(5,8)=-clhs11*clhs62;
        lhs(5,9)=0;
        lhs(6,0)=clhs13*clhs71;
        lhs(6,1)=clhs13*clhs72;
        lhs(6,2)=clhs13*clhs73;
        lhs(6,3)=clhs13*clhs74;
        lhs(6,4)=-clhs83*normalslave(0,0);
        lhs(6,5)=-clhs84*normalslave(0,0);
        lhs(6,6)=-clhs85*normalslave(0,0);
        lhs(6,7)=-clhs86*normalslave(0,0);
        lhs(6,8)=-clhs13*clhs61;
        lhs(6,9)=0;
        lhs(7,0)=clhs13*clhs79;
        lhs(7,1)=clhs13*clhs80;
        lhs(7,2)=clhs13*clhs81;
        lhs(7,3)=clhs13*clhs82;
        lhs(7,4)=-clhs83*normalslave(0,1);
        lhs(7,5)=-clhs84*normalslave(0,1);
        lhs(7,6)=-clhs85*normalslave(0,1);
        lhs(7,7)=-clhs86*normalslave(0,1);
        lhs(7,8)=-clhs13*clhs62;
        lhs(7,9)=0;
        lhs(8,0)=clhs8*scale_factor;
        lhs(8,1)=clhs20*scale_factor;
        lhs(8,2)=clhs25*scale_factor;
        lhs(8,3)=clhs30*scale_factor;
        lhs(8,4)=-clhs37*scale_factor;
        lhs(8,5)=-clhs44*scale_factor;
        lhs(8,6)=-clhs51*scale_factor;
        lhs(8,7)=-clhs58*scale_factor;
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=0;
        lhs(9,9)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    }
    else if (rActiveInactive == 3 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs6 =     X2(0,0) + u2(0,0);
        const double clhs7 =     X2(1,0) + u2(1,0);
        const double clhs8 =     normalslave(0,0)*(clhs0 + clhs2*clhs6 + clhs5*clhs7) + normalslave(0,1)*(clhs1*clhs2 + clhs3*clhs5);
        const double clhs9 =     clhs8*normalslave(0,0)*penalty_parameter;
        const double clhs10 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs11 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs12 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs13 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs14 =     normalslave(1,0)*(clhs10 + clhs11*clhs6 + clhs13*clhs7) + normalslave(1,1)*(clhs1*clhs11 + clhs13*clhs3);
        const double clhs15 =     clhs14*normalslave(1,0)*penalty_parameter;
        const double clhs16 =     X1(0,0) + u1(0,0);
        const double clhs17 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs18 =     X1(1,0) + u1(1,0);
        const double clhs19 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs20 =     X1(0,1) + u1(0,1);
        const double clhs21 =     X1(1,1) + u1(1,1);
        const double clhs22 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs6 + clhs16*clhs17 + clhs18*clhs19 - clhs4*clhs7) + normalslave(0,1)*(-clhs0*clhs1 + clhs17*clhs20 + clhs19*clhs21 - clhs3*clhs4));
        const double clhs23 =     clhs22*normalslave(0,0);
        const double clhs24 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs25 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double clhs26 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs10*clhs6 - clhs12*clhs7 + clhs16*clhs24 + clhs18*clhs25) + normalslave(1,1)*(-clhs1*clhs10 - clhs12*clhs3 + clhs20*clhs24 + clhs21*clhs25));
        const double clhs27 =     clhs26*normalslave(1,0);
        const double clhs28 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs29 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs30 =     normalslave(0,0)*(clhs28*clhs6 + clhs29*clhs7) + normalslave(0,1)*(clhs0 + clhs1*clhs28 + clhs29*clhs3);
        const double clhs31 =     clhs30*normalslave(0,0)*penalty_parameter;
        const double clhs32 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs33 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs34 =     normalslave(1,0)*(clhs32*clhs6 + clhs33*clhs7) + normalslave(1,1)*(clhs1*clhs32 + clhs10 + clhs3*clhs33);
        const double clhs35 =     clhs34*normalslave(1,0)*penalty_parameter;
        const double clhs36 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs37 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs38 =     normalslave(0,0)*(clhs36*clhs6 + clhs37*clhs7 + clhs4) + normalslave(0,1)*(clhs1*clhs36 + clhs3*clhs37);
        const double clhs39 =     clhs38*normalslave(0,0)*penalty_parameter;
        const double clhs40 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs41 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs42 =     normalslave(1,0)*(clhs12 + clhs40*clhs6 + clhs41*clhs7) + normalslave(1,1)*(clhs1*clhs40 + clhs3*clhs41);
        const double clhs43 =     clhs42*normalslave(1,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs45 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs46 =     normalslave(0,0)*(clhs44*clhs6 + clhs45*clhs7) + normalslave(0,1)*(clhs1*clhs44 + clhs3*clhs45 + clhs4);
        const double clhs47 =     clhs46*normalslave(0,0)*penalty_parameter;
        const double clhs48 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs49 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs50 =     normalslave(1,0)*(clhs48*clhs6 + clhs49*clhs7) + normalslave(1,1)*(clhs1*clhs48 + clhs12 + clhs3*clhs49);
        const double clhs51 =     clhs50*normalslave(1,0)*penalty_parameter;
        const double clhs52 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs53 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs54 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs55 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs56 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs57 =     normalslave(0,0)*(clhs16*clhs54 + clhs17 + clhs18*clhs55 - clhs52*clhs6 - clhs56*clhs7) + normalslave(0,1)*(-clhs1*clhs52 + clhs20*clhs54 + clhs21*clhs55 - clhs3*clhs56);
        const double clhs58 =     clhs57*normalslave(0,0)*penalty_parameter;
        const double clhs59 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs60 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,0))
        const double clhs61 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs62 =     normalslave(1,0)*(clhs16*clhs59 + clhs18*clhs60 + clhs24 - clhs53*clhs6 - clhs61*clhs7) + normalslave(1,1)*(-clhs1*clhs53 + clhs20*clhs59 + clhs21*clhs60 - clhs3*clhs61);
        const double clhs63 =     clhs62*normalslave(1,0)*penalty_parameter;
        const double clhs64 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs65 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs66 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs67 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs68 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs69 =     normalslave(0,0)*(clhs16*clhs66 + clhs18*clhs67 - clhs6*clhs64 - clhs68*clhs7) + normalslave(0,1)*(-clhs1*clhs64 + clhs17 + clhs20*clhs66 + clhs21*clhs67 - clhs3*clhs68);
        const double clhs70 =     clhs69*normalslave(0,0)*penalty_parameter;
        const double clhs71 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs72 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(0,1))
        const double clhs73 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs74 =     normalslave(1,0)*(clhs16*clhs71 + clhs18*clhs72 - clhs6*clhs65 - clhs7*clhs73) + normalslave(1,1)*(-clhs1*clhs65 + clhs20*clhs71 + clhs21*clhs72 + clhs24 - clhs3*clhs73);
        const double clhs75 =     clhs74*normalslave(1,0)*penalty_parameter;
        const double clhs76 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs77 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs78 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs79 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs80 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs81 =     normalslave(0,0)*(clhs16*clhs78 + clhs18*clhs79 + clhs19 - clhs6*clhs76 - clhs7*clhs80) + normalslave(0,1)*(-clhs1*clhs76 + clhs20*clhs78 + clhs21*clhs79 - clhs3*clhs80);
        const double clhs82 =     clhs81*normalslave(0,0)*penalty_parameter;
        const double clhs83 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs84 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,0))
        const double clhs85 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs86 =     normalslave(1,0)*(clhs16*clhs83 + clhs18*clhs84 + clhs25 - clhs6*clhs77 - clhs7*clhs85) + normalslave(1,1)*(-clhs1*clhs77 + clhs20*clhs83 + clhs21*clhs84 - clhs3*clhs85);
        const double clhs87 =     clhs86*normalslave(1,0)*penalty_parameter;
        const double clhs88 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs89 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs90 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs91 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs92 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs93 =     normalslave(0,0)*(clhs16*clhs90 + clhs18*clhs91 - clhs6*clhs88 - clhs7*clhs92) + normalslave(0,1)*(-clhs1*clhs88 + clhs19 + clhs20*clhs90 + clhs21*clhs91 - clhs3*clhs92);
        const double clhs94 =     clhs93*normalslave(0,0)*penalty_parameter;
        const double clhs95 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs96 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1)), U1(1,1))
        const double clhs97 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs98 =     normalslave(1,0)*(clhs16*clhs95 + clhs18*clhs96 - clhs6*clhs89 - clhs7*clhs97) + normalslave(1,1)*(-clhs1*clhs89 + clhs20*clhs95 + clhs21*clhs96 + clhs25 - clhs3*clhs97);
        const double clhs99 =     clhs98*normalslave(1,0)*penalty_parameter;
        const double clhs100 =     normalslave(0,0)*scale_factor;
        const double clhs101 =     normalslave(1,0)*scale_factor;
        const double clhs102 =     clhs8*normalslave(0,1)*penalty_parameter;
        const double clhs103 =     clhs14*normalslave(1,1)*penalty_parameter;
        const double clhs104 =     clhs22*normalslave(0,1);
        const double clhs105 =     clhs26*normalslave(1,1);
        const double clhs106 =     clhs30*normalslave(0,1)*penalty_parameter;
        const double clhs107 =     clhs34*normalslave(1,1)*penalty_parameter;
        const double clhs108 =     clhs38*normalslave(0,1)*penalty_parameter;
        const double clhs109 =     clhs42*normalslave(1,1)*penalty_parameter;
        const double clhs110 =     clhs46*normalslave(0,1)*penalty_parameter;
        const double clhs111 =     clhs50*normalslave(1,1)*penalty_parameter;
        const double clhs112 =     clhs57*normalslave(0,1)*penalty_parameter;
        const double clhs113 =     clhs62*normalslave(1,1)*penalty_parameter;
        const double clhs114 =     clhs69*normalslave(0,1)*penalty_parameter;
        const double clhs115 =     clhs74*normalslave(1,1)*penalty_parameter;
        const double clhs116 =     clhs81*normalslave(0,1)*penalty_parameter;
        const double clhs117 =     clhs86*normalslave(1,1)*penalty_parameter;
        const double clhs118 =     clhs93*normalslave(0,1)*penalty_parameter;
        const double clhs119 =     clhs98*normalslave(1,1)*penalty_parameter;
        const double clhs120 =     normalslave(0,1)*scale_factor;
        const double clhs121 =     normalslave(1,1)*scale_factor;
        const double clhs122 =     clhs8*normalslave(0,0);
        const double clhs123 =     clhs14*normalslave(1,0);
        const double clhs124 =     clhs30*normalslave(0,0);
        const double clhs125 =     clhs34*normalslave(1,0);
        const double clhs126 =     clhs38*normalslave(0,0);
        const double clhs127 =     clhs42*normalslave(1,0);
        const double clhs128 =     clhs46*normalslave(0,0);
        const double clhs129 =     clhs50*normalslave(1,0);
        const double clhs130 =     clhs8*normalslave(0,1);
        const double clhs131 =     clhs14*normalslave(1,1);
        const double clhs132 =     clhs30*normalslave(0,1);
        const double clhs133 =     clhs34*normalslave(1,1);
        const double clhs134 =     clhs38*normalslave(0,1);
        const double clhs135 =     clhs42*normalslave(1,1);
        const double clhs136 =     clhs46*normalslave(0,1);
        const double clhs137 =     clhs50*normalslave(1,1);
    
        lhs(0,0)=-clhs0*clhs9 - clhs10*clhs15 + clhs11*clhs27 + clhs2*clhs23;
        lhs(0,1)=-clhs0*clhs31 - clhs10*clhs35 + clhs23*clhs28 + clhs27*clhs32;
        lhs(0,2)=-clhs0*clhs39 - clhs10*clhs43 + clhs23*clhs36 + clhs27*clhs40;
        lhs(0,3)=-clhs0*clhs47 - clhs10*clhs51 + clhs23*clhs44 + clhs27*clhs48;
        lhs(0,4)=clhs0*clhs58 + clhs10*clhs63 + clhs23*clhs52 + clhs27*clhs53;
        lhs(0,5)=clhs0*clhs70 + clhs10*clhs75 + clhs23*clhs64 + clhs27*clhs65;
        lhs(0,6)=clhs0*clhs82 + clhs10*clhs87 + clhs23*clhs76 + clhs27*clhs77;
        lhs(0,7)=clhs0*clhs94 + clhs10*clhs99 + clhs23*clhs88 + clhs27*clhs89;
        lhs(0,8)=clhs0*clhs100;
        lhs(0,9)=clhs10*clhs101;
        lhs(1,0)=-clhs0*clhs102 - clhs10*clhs103 + clhs104*clhs2 + clhs105*clhs11;
        lhs(1,1)=-clhs0*clhs106 - clhs10*clhs107 + clhs104*clhs28 + clhs105*clhs32;
        lhs(1,2)=-clhs0*clhs108 - clhs10*clhs109 + clhs104*clhs36 + clhs105*clhs40;
        lhs(1,3)=-clhs0*clhs110 - clhs10*clhs111 + clhs104*clhs44 + clhs105*clhs48;
        lhs(1,4)=clhs0*clhs112 + clhs10*clhs113 + clhs104*clhs52 + clhs105*clhs53;
        lhs(1,5)=clhs0*clhs114 + clhs10*clhs115 + clhs104*clhs64 + clhs105*clhs65;
        lhs(1,6)=clhs0*clhs116 + clhs10*clhs117 + clhs104*clhs76 + clhs105*clhs77;
        lhs(1,7)=clhs0*clhs118 + clhs10*clhs119 + clhs104*clhs88 + clhs105*clhs89;
        lhs(1,8)=clhs0*clhs120;
        lhs(1,9)=clhs10*clhs121;
        lhs(2,0)=-clhs12*clhs15 + clhs13*clhs27 + clhs23*clhs5 - clhs4*clhs9;
        lhs(2,1)=-clhs12*clhs35 + clhs23*clhs29 + clhs27*clhs33 - clhs31*clhs4;
        lhs(2,2)=-clhs12*clhs43 + clhs23*clhs37 + clhs27*clhs41 - clhs39*clhs4;
        lhs(2,3)=-clhs12*clhs51 + clhs23*clhs45 + clhs27*clhs49 - clhs4*clhs47;
        lhs(2,4)=clhs12*clhs63 + clhs23*clhs56 + clhs27*clhs61 + clhs4*clhs58;
        lhs(2,5)=clhs12*clhs75 + clhs23*clhs68 + clhs27*clhs73 + clhs4*clhs70;
        lhs(2,6)=clhs12*clhs87 + clhs23*clhs80 + clhs27*clhs85 + clhs4*clhs82;
        lhs(2,7)=clhs12*clhs99 + clhs23*clhs92 + clhs27*clhs97 + clhs4*clhs94;
        lhs(2,8)=clhs100*clhs4;
        lhs(2,9)=clhs101*clhs12;
        lhs(3,0)=-clhs102*clhs4 - clhs103*clhs12 + clhs104*clhs5 + clhs105*clhs13;
        lhs(3,1)=clhs104*clhs29 + clhs105*clhs33 - clhs106*clhs4 - clhs107*clhs12;
        lhs(3,2)=clhs104*clhs37 + clhs105*clhs41 - clhs108*clhs4 - clhs109*clhs12;
        lhs(3,3)=clhs104*clhs45 + clhs105*clhs49 - clhs110*clhs4 - clhs111*clhs12;
        lhs(3,4)=clhs104*clhs56 + clhs105*clhs61 + clhs112*clhs4 + clhs113*clhs12;
        lhs(3,5)=clhs104*clhs68 + clhs105*clhs73 + clhs114*clhs4 + clhs115*clhs12;
        lhs(3,6)=clhs104*clhs80 + clhs105*clhs85 + clhs116*clhs4 + clhs117*clhs12;
        lhs(3,7)=clhs104*clhs92 + clhs105*clhs97 + clhs118*clhs4 + clhs119*clhs12;
        lhs(3,8)=clhs120*clhs4;
        lhs(3,9)=clhs12*clhs121;
        lhs(4,0)=penalty_parameter*(clhs122*clhs17 + clhs123*clhs24);
        lhs(4,1)=penalty_parameter*(clhs124*clhs17 + clhs125*clhs24);
        lhs(4,2)=penalty_parameter*(clhs126*clhs17 + clhs127*clhs24);
        lhs(4,3)=penalty_parameter*(clhs128*clhs17 + clhs129*clhs24);
        lhs(4,4)=-clhs17*clhs58 - clhs23*clhs54 - clhs24*clhs63 - clhs27*clhs59;
        lhs(4,5)=-clhs17*clhs70 - clhs23*clhs66 - clhs24*clhs75 - clhs27*clhs71;
        lhs(4,6)=-clhs17*clhs82 - clhs23*clhs78 - clhs24*clhs87 - clhs27*clhs83;
        lhs(4,7)=-clhs17*clhs94 - clhs23*clhs90 - clhs24*clhs99 - clhs27*clhs95;
        lhs(4,8)=-clhs100*clhs17;
        lhs(4,9)=-clhs101*clhs24;
        lhs(5,0)=penalty_parameter*(clhs130*clhs17 + clhs131*clhs24);
        lhs(5,1)=penalty_parameter*(clhs132*clhs17 + clhs133*clhs24);
        lhs(5,2)=penalty_parameter*(clhs134*clhs17 + clhs135*clhs24);
        lhs(5,3)=penalty_parameter*(clhs136*clhs17 + clhs137*clhs24);
        lhs(5,4)=-clhs104*clhs54 - clhs105*clhs59 - clhs112*clhs17 - clhs113*clhs24;
        lhs(5,5)=-clhs104*clhs66 - clhs105*clhs71 - clhs114*clhs17 - clhs115*clhs24;
        lhs(5,6)=-clhs104*clhs78 - clhs105*clhs83 - clhs116*clhs17 - clhs117*clhs24;
        lhs(5,7)=-clhs104*clhs90 - clhs105*clhs95 - clhs118*clhs17 - clhs119*clhs24;
        lhs(5,8)=-clhs120*clhs17;
        lhs(5,9)=-clhs121*clhs24;
        lhs(6,0)=penalty_parameter*(clhs122*clhs19 + clhs123*clhs25);
        lhs(6,1)=penalty_parameter*(clhs124*clhs19 + clhs125*clhs25);
        lhs(6,2)=penalty_parameter*(clhs126*clhs19 + clhs127*clhs25);
        lhs(6,3)=penalty_parameter*(clhs128*clhs19 + clhs129*clhs25);
        lhs(6,4)=-clhs19*clhs58 - clhs23*clhs55 - clhs25*clhs63 - clhs27*clhs60;
        lhs(6,5)=-clhs19*clhs70 - clhs23*clhs67 - clhs25*clhs75 - clhs27*clhs72;
        lhs(6,6)=-clhs19*clhs82 - clhs23*clhs79 - clhs25*clhs87 - clhs27*clhs84;
        lhs(6,7)=-clhs19*clhs94 - clhs23*clhs91 - clhs25*clhs99 - clhs27*clhs96;
        lhs(6,8)=-clhs100*clhs19;
        lhs(6,9)=-clhs101*clhs25;
        lhs(7,0)=penalty_parameter*(clhs130*clhs19 + clhs131*clhs25);
        lhs(7,1)=penalty_parameter*(clhs132*clhs19 + clhs133*clhs25);
        lhs(7,2)=penalty_parameter*(clhs134*clhs19 + clhs135*clhs25);
        lhs(7,3)=penalty_parameter*(clhs136*clhs19 + clhs137*clhs25);
        lhs(7,4)=-clhs104*clhs55 - clhs105*clhs60 - clhs112*clhs19 - clhs113*clhs25;
        lhs(7,5)=-clhs104*clhs67 - clhs105*clhs72 - clhs114*clhs19 - clhs115*clhs25;
        lhs(7,6)=-clhs104*clhs79 - clhs105*clhs84 - clhs116*clhs19 - clhs117*clhs25;
        lhs(7,7)=-clhs104*clhs91 - clhs105*clhs96 - clhs118*clhs19 - clhs119*clhs25;
        lhs(7,8)=-clhs120*clhs19;
        lhs(7,9)=-clhs121*clhs25;
        lhs(8,0)=clhs8*scale_factor;
        lhs(8,1)=clhs30*scale_factor;
        lhs(8,2)=clhs38*scale_factor;
        lhs(8,3)=clhs46*scale_factor;
        lhs(8,4)=-clhs57*scale_factor;
        lhs(8,5)=-clhs69*scale_factor;
        lhs(8,6)=-clhs81*scale_factor;
        lhs(8,7)=-clhs93*scale_factor;
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(9,0)=clhs14*scale_factor;
        lhs(9,1)=clhs34*scale_factor;
        lhs(9,2)=clhs42*scale_factor;
        lhs(9,3)=clhs50*scale_factor;
        lhs(9,4)=-clhs62*scale_factor;
        lhs(9,5)=-clhs74*scale_factor;
        lhs(9,6)=-clhs86*scale_factor;
        lhs(9,7)=-clhs98*scale_factor;
        lhs(9,8)=0;
        lhs(9,9)=0;
    }


    return lhs;
}

/***********************************************************************************/
/***********************************************************************************/

template<>
template<>
bounded_matrix<double, 21, 21> AugmentedLagrangianMethodFrictionlessMortarContactCondition<3,3>::CalculateLocalLHS<21>(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    bounded_matrix<double,21,21> lhs;
    
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 3, 3> u1 = GetVariableMatrix(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 3, 3> u2 = GetVariableMatrix(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 3, 3> X1 = GetCoordinates(this->GetGeometry(), false);
    const bounded_matrix<double, 3, 3> X2 = GetCoordinates(CurrentMasterElement, false);
    
    const array_1d<double, 3> lmnormal = GetVariableVector(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 3, 3> normalslave = GetVariableMatrix(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 3, 3> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 3, 3> DOperator = rMortarConditionMatrices.DOperator;
    // Mortar operators derivatives
    const array_1d<bounded_matrix<double, 3, 3>, 18> DeltaMOperator = rMortarConditionMatrices.DeltaMOperator;
    const array_1d<bounded_matrix<double, 3, 3>, 18> DeltaDOperator = rMortarConditionMatrices.DeltaDOperator;

    if (rActiveInactive == 0 )
    {
        const double clhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=0;
        lhs(0,1)=0;
        lhs(0,2)=0;
        lhs(0,3)=0;
        lhs(0,4)=0;
        lhs(0,5)=0;
        lhs(0,6)=0;
        lhs(0,7)=0;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(0,12)=0;
        lhs(0,13)=0;
        lhs(0,14)=0;
        lhs(0,15)=0;
        lhs(0,16)=0;
        lhs(0,17)=0;
        lhs(0,18)=0;
        lhs(0,19)=0;
        lhs(0,20)=0;
        lhs(1,0)=0;
        lhs(1,1)=0;
        lhs(1,2)=0;
        lhs(1,3)=0;
        lhs(1,4)=0;
        lhs(1,5)=0;
        lhs(1,6)=0;
        lhs(1,7)=0;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(1,12)=0;
        lhs(1,13)=0;
        lhs(1,14)=0;
        lhs(1,15)=0;
        lhs(1,16)=0;
        lhs(1,17)=0;
        lhs(1,18)=0;
        lhs(1,19)=0;
        lhs(1,20)=0;
        lhs(2,0)=0;
        lhs(2,1)=0;
        lhs(2,2)=0;
        lhs(2,3)=0;
        lhs(2,4)=0;
        lhs(2,5)=0;
        lhs(2,6)=0;
        lhs(2,7)=0;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(2,12)=0;
        lhs(2,13)=0;
        lhs(2,14)=0;
        lhs(2,15)=0;
        lhs(2,16)=0;
        lhs(2,17)=0;
        lhs(2,18)=0;
        lhs(2,19)=0;
        lhs(2,20)=0;
        lhs(3,0)=0;
        lhs(3,1)=0;
        lhs(3,2)=0;
        lhs(3,3)=0;
        lhs(3,4)=0;
        lhs(3,5)=0;
        lhs(3,6)=0;
        lhs(3,7)=0;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(3,12)=0;
        lhs(3,13)=0;
        lhs(3,14)=0;
        lhs(3,15)=0;
        lhs(3,16)=0;
        lhs(3,17)=0;
        lhs(3,18)=0;
        lhs(3,19)=0;
        lhs(3,20)=0;
        lhs(4,0)=0;
        lhs(4,1)=0;
        lhs(4,2)=0;
        lhs(4,3)=0;
        lhs(4,4)=0;
        lhs(4,5)=0;
        lhs(4,6)=0;
        lhs(4,7)=0;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(4,12)=0;
        lhs(4,13)=0;
        lhs(4,14)=0;
        lhs(4,15)=0;
        lhs(4,16)=0;
        lhs(4,17)=0;
        lhs(4,18)=0;
        lhs(4,19)=0;
        lhs(4,20)=0;
        lhs(5,0)=0;
        lhs(5,1)=0;
        lhs(5,2)=0;
        lhs(5,3)=0;
        lhs(5,4)=0;
        lhs(5,5)=0;
        lhs(5,6)=0;
        lhs(5,7)=0;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(5,12)=0;
        lhs(5,13)=0;
        lhs(5,14)=0;
        lhs(5,15)=0;
        lhs(5,16)=0;
        lhs(5,17)=0;
        lhs(5,18)=0;
        lhs(5,19)=0;
        lhs(5,20)=0;
        lhs(6,0)=0;
        lhs(6,1)=0;
        lhs(6,2)=0;
        lhs(6,3)=0;
        lhs(6,4)=0;
        lhs(6,5)=0;
        lhs(6,6)=0;
        lhs(6,7)=0;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(6,12)=0;
        lhs(6,13)=0;
        lhs(6,14)=0;
        lhs(6,15)=0;
        lhs(6,16)=0;
        lhs(6,17)=0;
        lhs(6,18)=0;
        lhs(6,19)=0;
        lhs(6,20)=0;
        lhs(7,0)=0;
        lhs(7,1)=0;
        lhs(7,2)=0;
        lhs(7,3)=0;
        lhs(7,4)=0;
        lhs(7,5)=0;
        lhs(7,6)=0;
        lhs(7,7)=0;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(7,12)=0;
        lhs(7,13)=0;
        lhs(7,14)=0;
        lhs(7,15)=0;
        lhs(7,16)=0;
        lhs(7,17)=0;
        lhs(7,18)=0;
        lhs(7,19)=0;
        lhs(7,20)=0;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(8,12)=0;
        lhs(8,13)=0;
        lhs(8,14)=0;
        lhs(8,15)=0;
        lhs(8,16)=0;
        lhs(8,17)=0;
        lhs(8,18)=0;
        lhs(8,19)=0;
        lhs(8,20)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(9,12)=0;
        lhs(9,13)=0;
        lhs(9,14)=0;
        lhs(9,15)=0;
        lhs(9,16)=0;
        lhs(9,17)=0;
        lhs(9,18)=0;
        lhs(9,19)=0;
        lhs(9,20)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(10,12)=0;
        lhs(10,13)=0;
        lhs(10,14)=0;
        lhs(10,15)=0;
        lhs(10,16)=0;
        lhs(10,17)=0;
        lhs(10,18)=0;
        lhs(10,19)=0;
        lhs(10,20)=0;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
        lhs(11,12)=0;
        lhs(11,13)=0;
        lhs(11,14)=0;
        lhs(11,15)=0;
        lhs(11,16)=0;
        lhs(11,17)=0;
        lhs(11,18)=0;
        lhs(11,19)=0;
        lhs(11,20)=0;
        lhs(12,0)=0;
        lhs(12,1)=0;
        lhs(12,2)=0;
        lhs(12,3)=0;
        lhs(12,4)=0;
        lhs(12,5)=0;
        lhs(12,6)=0;
        lhs(12,7)=0;
        lhs(12,8)=0;
        lhs(12,9)=0;
        lhs(12,10)=0;
        lhs(12,11)=0;
        lhs(12,12)=0;
        lhs(12,13)=0;
        lhs(12,14)=0;
        lhs(12,15)=0;
        lhs(12,16)=0;
        lhs(12,17)=0;
        lhs(12,18)=0;
        lhs(12,19)=0;
        lhs(12,20)=0;
        lhs(13,0)=0;
        lhs(13,1)=0;
        lhs(13,2)=0;
        lhs(13,3)=0;
        lhs(13,4)=0;
        lhs(13,5)=0;
        lhs(13,6)=0;
        lhs(13,7)=0;
        lhs(13,8)=0;
        lhs(13,9)=0;
        lhs(13,10)=0;
        lhs(13,11)=0;
        lhs(13,12)=0;
        lhs(13,13)=0;
        lhs(13,14)=0;
        lhs(13,15)=0;
        lhs(13,16)=0;
        lhs(13,17)=0;
        lhs(13,18)=0;
        lhs(13,19)=0;
        lhs(13,20)=0;
        lhs(14,0)=0;
        lhs(14,1)=0;
        lhs(14,2)=0;
        lhs(14,3)=0;
        lhs(14,4)=0;
        lhs(14,5)=0;
        lhs(14,6)=0;
        lhs(14,7)=0;
        lhs(14,8)=0;
        lhs(14,9)=0;
        lhs(14,10)=0;
        lhs(14,11)=0;
        lhs(14,12)=0;
        lhs(14,13)=0;
        lhs(14,14)=0;
        lhs(14,15)=0;
        lhs(14,16)=0;
        lhs(14,17)=0;
        lhs(14,18)=0;
        lhs(14,19)=0;
        lhs(14,20)=0;
        lhs(15,0)=0;
        lhs(15,1)=0;
        lhs(15,2)=0;
        lhs(15,3)=0;
        lhs(15,4)=0;
        lhs(15,5)=0;
        lhs(15,6)=0;
        lhs(15,7)=0;
        lhs(15,8)=0;
        lhs(15,9)=0;
        lhs(15,10)=0;
        lhs(15,11)=0;
        lhs(15,12)=0;
        lhs(15,13)=0;
        lhs(15,14)=0;
        lhs(15,15)=0;
        lhs(15,16)=0;
        lhs(15,17)=0;
        lhs(15,18)=0;
        lhs(15,19)=0;
        lhs(15,20)=0;
        lhs(16,0)=0;
        lhs(16,1)=0;
        lhs(16,2)=0;
        lhs(16,3)=0;
        lhs(16,4)=0;
        lhs(16,5)=0;
        lhs(16,6)=0;
        lhs(16,7)=0;
        lhs(16,8)=0;
        lhs(16,9)=0;
        lhs(16,10)=0;
        lhs(16,11)=0;
        lhs(16,12)=0;
        lhs(16,13)=0;
        lhs(16,14)=0;
        lhs(16,15)=0;
        lhs(16,16)=0;
        lhs(16,17)=0;
        lhs(16,18)=0;
        lhs(16,19)=0;
        lhs(16,20)=0;
        lhs(17,0)=0;
        lhs(17,1)=0;
        lhs(17,2)=0;
        lhs(17,3)=0;
        lhs(17,4)=0;
        lhs(17,5)=0;
        lhs(17,6)=0;
        lhs(17,7)=0;
        lhs(17,8)=0;
        lhs(17,9)=0;
        lhs(17,10)=0;
        lhs(17,11)=0;
        lhs(17,12)=0;
        lhs(17,13)=0;
        lhs(17,14)=0;
        lhs(17,15)=0;
        lhs(17,16)=0;
        lhs(17,17)=0;
        lhs(17,18)=0;
        lhs(17,19)=0;
        lhs(17,20)=0;
        lhs(18,0)=0;
        lhs(18,1)=0;
        lhs(18,2)=0;
        lhs(18,3)=0;
        lhs(18,4)=0;
        lhs(18,5)=0;
        lhs(18,6)=0;
        lhs(18,7)=0;
        lhs(18,8)=0;
        lhs(18,9)=0;
        lhs(18,10)=0;
        lhs(18,11)=0;
        lhs(18,12)=0;
        lhs(18,13)=0;
        lhs(18,14)=0;
        lhs(18,15)=0;
        lhs(18,16)=0;
        lhs(18,17)=0;
        lhs(18,18)=clhs0;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=0;
        lhs(19,1)=0;
        lhs(19,2)=0;
        lhs(19,3)=0;
        lhs(19,4)=0;
        lhs(19,5)=0;
        lhs(19,6)=0;
        lhs(19,7)=0;
        lhs(19,8)=0;
        lhs(19,9)=0;
        lhs(19,10)=0;
        lhs(19,11)=0;
        lhs(19,12)=0;
        lhs(19,13)=0;
        lhs(19,14)=0;
        lhs(19,15)=0;
        lhs(19,16)=0;
        lhs(19,17)=0;
        lhs(19,18)=0;
        lhs(19,19)=clhs0;
        lhs(19,20)=0;
        lhs(20,0)=0;
        lhs(20,1)=0;
        lhs(20,2)=0;
        lhs(20,3)=0;
        lhs(20,4)=0;
        lhs(20,5)=0;
        lhs(20,6)=0;
        lhs(20,7)=0;
        lhs(20,8)=0;
        lhs(20,9)=0;
        lhs(20,10)=0;
        lhs(20,11)=0;
        lhs(20,12)=0;
        lhs(20,13)=0;
        lhs(20,14)=0;
        lhs(20,15)=0;
        lhs(20,16)=0;
        lhs(20,17)=0;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=clhs0;
    }
    else if (rActiveInactive == 4 )
    {
        const double clhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(2,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(2,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(2,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*penalty_parameter;
        const double clhs17 =     X1(0,0) + u1(0,0);
        const double clhs18 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs19 =     X1(1,0) + u1(1,0);
        const double clhs20 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs21 =     X1(2,0) + u1(2,0);
        const double clhs22 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs23 =     X1(0,1) + u1(0,1);
        const double clhs24 =     X1(1,1) + u1(1,1);
        const double clhs25 =     X1(2,1) + u1(2,1);
        const double clhs26 =     X1(0,2) + u1(0,2);
        const double clhs27 =     X1(1,2) + u1(1,2);
        const double clhs28 =     X1(2,2) + u1(2,2);
        const double clhs29 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs17*clhs18 + clhs19*clhs20 + clhs21*clhs22) + normalslave(2,1)*(-clhs0*clhs1 + clhs18*clhs23 + clhs20*clhs24 + clhs22*clhs25 - clhs3*clhs4 - clhs6*clhs7) + normalslave(2,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs18*clhs26 + clhs20*clhs27 + clhs22*clhs28));
        const double clhs30 =     -clhs0*clhs16 + clhs2*clhs29;
        const double clhs31 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs32 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs33 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs34 =     normalslave(2,0)*(clhs12*clhs31 + clhs13*clhs32 + clhs14*clhs33) + normalslave(2,1)*(clhs0 + clhs1*clhs31 + clhs3*clhs32 + clhs33*clhs6) + normalslave(2,2)*(clhs10*clhs32 + clhs11*clhs33 + clhs31*clhs9);
        const double clhs35 =     clhs34*penalty_parameter;
        const double clhs36 =     -clhs0*clhs35 + clhs29*clhs31;
        const double clhs37 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs38 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs39 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs40 =     normalslave(2,0)*(clhs12*clhs37 + clhs13*clhs38 + clhs14*clhs39) + normalslave(2,1)*(clhs1*clhs37 + clhs3*clhs38 + clhs39*clhs6) + normalslave(2,2)*(clhs0 + clhs10*clhs38 + clhs11*clhs39 + clhs37*clhs9);
        const double clhs41 =     clhs40*penalty_parameter;
        const double clhs42 =     -clhs0*clhs41 + clhs29*clhs37;
        const double clhs43 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs44 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs45 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs46 =     normalslave(2,0)*(clhs12*clhs43 + clhs13*clhs44 + clhs14*clhs45 + clhs4) + normalslave(2,1)*(clhs1*clhs43 + clhs3*clhs44 + clhs45*clhs6) + normalslave(2,2)*(clhs10*clhs44 + clhs11*clhs45 + clhs43*clhs9);
        const double clhs47 =     clhs46*penalty_parameter;
        const double clhs48 =     -clhs0*clhs47 + clhs29*clhs43;
        const double clhs49 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs50 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs51 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs52 =     normalslave(2,0)*(clhs12*clhs49 + clhs13*clhs50 + clhs14*clhs51) + normalslave(2,1)*(clhs1*clhs49 + clhs3*clhs50 + clhs4 + clhs51*clhs6) + normalslave(2,2)*(clhs10*clhs50 + clhs11*clhs51 + clhs49*clhs9);
        const double clhs53 =     clhs52*penalty_parameter;
        const double clhs54 =     -clhs0*clhs53 + clhs29*clhs49;
        const double clhs55 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs56 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs57 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs58 =     normalslave(2,0)*(clhs12*clhs55 + clhs13*clhs56 + clhs14*clhs57) + normalslave(2,1)*(clhs1*clhs55 + clhs3*clhs56 + clhs57*clhs6) + normalslave(2,2)*(clhs10*clhs56 + clhs11*clhs57 + clhs4 + clhs55*clhs9);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs29*clhs55;
        const double clhs61 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs62 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs63 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs64 =     normalslave(2,0)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs7) + normalslave(2,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs6*clhs63) + normalslave(2,2)*(clhs10*clhs62 + clhs11*clhs63 + clhs61*clhs9);
        const double clhs65 =     clhs64*penalty_parameter;
        const double clhs66 =     -clhs0*clhs65 + clhs29*clhs61;
        const double clhs67 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs68 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs69 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs70 =     normalslave(2,0)*(clhs12*clhs67 + clhs13*clhs68 + clhs14*clhs69) + normalslave(2,1)*(clhs1*clhs67 + clhs3*clhs68 + clhs6*clhs69 + clhs7) + normalslave(2,2)*(clhs10*clhs68 + clhs11*clhs69 + clhs67*clhs9);
        const double clhs71 =     clhs70*penalty_parameter;
        const double clhs72 =     -clhs0*clhs71 + clhs29*clhs67;
        const double clhs73 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs74 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs75 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs76 =     normalslave(2,0)*(clhs12*clhs73 + clhs13*clhs74 + clhs14*clhs75) + normalslave(2,1)*(clhs1*clhs73 + clhs3*clhs74 + clhs6*clhs75) + normalslave(2,2)*(clhs10*clhs74 + clhs11*clhs75 + clhs7 + clhs73*clhs9);
        const double clhs77 =     clhs76*penalty_parameter;
        const double clhs78 =     -clhs0*clhs77 + clhs29*clhs73;
        const double clhs79 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs80 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs81 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs82 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs83 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs84 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs85 =     normalslave(2,0)*(-clhs12*clhs79 - clhs13*clhs83 - clhs14*clhs84 + clhs17*clhs80 + clhs18 + clhs19*clhs81 + clhs21*clhs82) + normalslave(2,1)*(-clhs1*clhs79 + clhs23*clhs80 + clhs24*clhs81 + clhs25*clhs82 - clhs3*clhs83 - clhs6*clhs84) + normalslave(2,2)*(-clhs10*clhs83 - clhs11*clhs84 + clhs26*clhs80 + clhs27*clhs81 + clhs28*clhs82 - clhs79*clhs9);
        const double clhs86 =     clhs85*penalty_parameter;
        const double clhs87 =     clhs0*clhs86 + clhs29*clhs79;
        const double clhs88 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs89 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs90 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs91 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs92 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs93 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs94 =     normalslave(2,0)*(-clhs12*clhs88 - clhs13*clhs92 - clhs14*clhs93 + clhs17*clhs89 + clhs19*clhs90 + clhs21*clhs91) + normalslave(2,1)*(-clhs1*clhs88 + clhs18 + clhs23*clhs89 + clhs24*clhs90 + clhs25*clhs91 - clhs3*clhs92 - clhs6*clhs93) + normalslave(2,2)*(-clhs10*clhs92 - clhs11*clhs93 + clhs26*clhs89 + clhs27*clhs90 + clhs28*clhs91 - clhs88*clhs9);
        const double clhs95 =     clhs94*penalty_parameter;
        const double clhs96 =     clhs0*clhs95 + clhs29*clhs88;
        const double clhs97 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs98 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs99 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs100 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs101 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs102 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs103 =     normalslave(2,0)*(clhs100*clhs21 - clhs101*clhs13 - clhs102*clhs14 - clhs12*clhs97 + clhs17*clhs98 + clhs19*clhs99) + normalslave(2,1)*(-clhs1*clhs97 + clhs100*clhs25 - clhs101*clhs3 - clhs102*clhs6 + clhs23*clhs98 + clhs24*clhs99) + normalslave(2,2)*(-clhs10*clhs101 + clhs100*clhs28 - clhs102*clhs11 + clhs18 + clhs26*clhs98 + clhs27*clhs99 - clhs9*clhs97);
        const double clhs104 =     clhs103*penalty_parameter;
        const double clhs105 =     clhs0*clhs104 + clhs29*clhs97;
        const double clhs106 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs107 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs108 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs109 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs110 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs111 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs112 =     normalslave(2,0)*(-clhs106*clhs12 + clhs107*clhs17 + clhs108*clhs19 + clhs109*clhs21 - clhs110*clhs13 - clhs111*clhs14 + clhs20) + normalslave(2,1)*(-clhs1*clhs106 + clhs107*clhs23 + clhs108*clhs24 + clhs109*clhs25 - clhs110*clhs3 - clhs111*clhs6) + normalslave(2,2)*(-clhs10*clhs110 - clhs106*clhs9 + clhs107*clhs26 + clhs108*clhs27 + clhs109*clhs28 - clhs11*clhs111);
        const double clhs113 =     clhs112*penalty_parameter;
        const double clhs114 =     clhs0*clhs113 + clhs106*clhs29;
        const double clhs115 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs116 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs117 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs118 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs119 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs120 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs121 =     normalslave(2,0)*(-clhs115*clhs12 + clhs116*clhs17 + clhs117*clhs19 + clhs118*clhs21 - clhs119*clhs13 - clhs120*clhs14) + normalslave(2,1)*(-clhs1*clhs115 + clhs116*clhs23 + clhs117*clhs24 + clhs118*clhs25 - clhs119*clhs3 - clhs120*clhs6 + clhs20) + normalslave(2,2)*(-clhs10*clhs119 - clhs11*clhs120 - clhs115*clhs9 + clhs116*clhs26 + clhs117*clhs27 + clhs118*clhs28);
        const double clhs122 =     clhs121*penalty_parameter;
        const double clhs123 =     clhs0*clhs122 + clhs115*clhs29;
        const double clhs124 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs125 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs126 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs127 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs128 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs129 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs130 =     normalslave(2,0)*(-clhs12*clhs124 + clhs125*clhs17 + clhs126*clhs19 + clhs127*clhs21 - clhs128*clhs13 - clhs129*clhs14) + normalslave(2,1)*(-clhs1*clhs124 + clhs125*clhs23 + clhs126*clhs24 + clhs127*clhs25 - clhs128*clhs3 - clhs129*clhs6) + normalslave(2,2)*(-clhs10*clhs128 - clhs11*clhs129 - clhs124*clhs9 + clhs125*clhs26 + clhs126*clhs27 + clhs127*clhs28 + clhs20);
        const double clhs131 =     clhs130*penalty_parameter;
        const double clhs132 =     clhs0*clhs131 + clhs124*clhs29;
        const double clhs133 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs134 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs135 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs136 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs137 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs138 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs139 =     normalslave(2,0)*(-clhs12*clhs133 - clhs13*clhs137 + clhs134*clhs17 + clhs135*clhs19 + clhs136*clhs21 - clhs138*clhs14 + clhs22) + normalslave(2,1)*(-clhs1*clhs133 + clhs134*clhs23 + clhs135*clhs24 + clhs136*clhs25 - clhs137*clhs3 - clhs138*clhs6) + normalslave(2,2)*(-clhs10*clhs137 - clhs11*clhs138 - clhs133*clhs9 + clhs134*clhs26 + clhs135*clhs27 + clhs136*clhs28);
        const double clhs140 =     clhs139*penalty_parameter;
        const double clhs141 =     clhs0*clhs140 + clhs133*clhs29;
        const double clhs142 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs143 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs144 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs145 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs146 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs147 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs148 =     normalslave(2,0)*(-clhs12*clhs142 - clhs13*clhs146 - clhs14*clhs147 + clhs143*clhs17 + clhs144*clhs19 + clhs145*clhs21) + normalslave(2,1)*(-clhs1*clhs142 + clhs143*clhs23 + clhs144*clhs24 + clhs145*clhs25 - clhs146*clhs3 - clhs147*clhs6 + clhs22) + normalslave(2,2)*(-clhs10*clhs146 - clhs11*clhs147 - clhs142*clhs9 + clhs143*clhs26 + clhs144*clhs27 + clhs145*clhs28);
        const double clhs149 =     clhs148*penalty_parameter;
        const double clhs150 =     clhs0*clhs149 + clhs142*clhs29;
        const double clhs151 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs152 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs153 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs154 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs155 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs156 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs157 =     normalslave(2,0)*(-clhs12*clhs151 - clhs13*clhs155 - clhs14*clhs156 + clhs152*clhs17 + clhs153*clhs19 + clhs154*clhs21) + normalslave(2,1)*(-clhs1*clhs151 + clhs152*clhs23 + clhs153*clhs24 + clhs154*clhs25 - clhs155*clhs3 - clhs156*clhs6) + normalslave(2,2)*(-clhs10*clhs155 - clhs11*clhs156 - clhs151*clhs9 + clhs152*clhs26 + clhs153*clhs27 + clhs154*clhs28 + clhs22);
        const double clhs158 =     clhs157*penalty_parameter;
        const double clhs159 =     clhs0*clhs158 + clhs151*clhs29;
        const double clhs160 =     normalslave(2,0)*scale_factor;
        const double clhs161 =     normalslave(2,1)*scale_factor;
        const double clhs162 =     normalslave(2,2)*scale_factor;
        const double clhs163 =     -clhs16*clhs4 + clhs29*clhs5;
        const double clhs164 =     clhs29*clhs32 - clhs35*clhs4;
        const double clhs165 =     clhs29*clhs38 - clhs4*clhs41;
        const double clhs166 =     clhs29*clhs44 - clhs4*clhs47;
        const double clhs167 =     clhs29*clhs50 - clhs4*clhs53;
        const double clhs168 =     clhs29*clhs56 - clhs4*clhs59;
        const double clhs169 =     clhs29*clhs62 - clhs4*clhs65;
        const double clhs170 =     clhs29*clhs68 - clhs4*clhs71;
        const double clhs171 =     clhs29*clhs74 - clhs4*clhs77;
        const double clhs172 =     clhs29*clhs83 + clhs4*clhs86;
        const double clhs173 =     clhs29*clhs92 + clhs4*clhs95;
        const double clhs174 =     clhs101*clhs29 + clhs104*clhs4;
        const double clhs175 =     clhs110*clhs29 + clhs113*clhs4;
        const double clhs176 =     clhs119*clhs29 + clhs122*clhs4;
        const double clhs177 =     clhs128*clhs29 + clhs131*clhs4;
        const double clhs178 =     clhs137*clhs29 + clhs140*clhs4;
        const double clhs179 =     clhs146*clhs29 + clhs149*clhs4;
        const double clhs180 =     clhs155*clhs29 + clhs158*clhs4;
        const double clhs181 =     -clhs16*clhs7 + clhs29*clhs8;
        const double clhs182 =     clhs29*clhs33 - clhs35*clhs7;
        const double clhs183 =     clhs29*clhs39 - clhs41*clhs7;
        const double clhs184 =     clhs29*clhs45 - clhs47*clhs7;
        const double clhs185 =     clhs29*clhs51 - clhs53*clhs7;
        const double clhs186 =     clhs29*clhs57 - clhs59*clhs7;
        const double clhs187 =     clhs29*clhs63 - clhs65*clhs7;
        const double clhs188 =     clhs29*clhs69 - clhs7*clhs71;
        const double clhs189 =     clhs29*clhs75 - clhs7*clhs77;
        const double clhs190 =     clhs29*clhs84 + clhs7*clhs86;
        const double clhs191 =     clhs29*clhs93 + clhs7*clhs95;
        const double clhs192 =     clhs102*clhs29 + clhs104*clhs7;
        const double clhs193 =     clhs111*clhs29 + clhs113*clhs7;
        const double clhs194 =     clhs120*clhs29 + clhs122*clhs7;
        const double clhs195 =     clhs129*clhs29 + clhs131*clhs7;
        const double clhs196 =     clhs138*clhs29 + clhs140*clhs7;
        const double clhs197 =     clhs147*clhs29 + clhs149*clhs7;
        const double clhs198 =     clhs156*clhs29 + clhs158*clhs7;
        const double clhs199 =     clhs15*normalslave(2,0)*penalty_parameter;
        const double clhs200 =     clhs34*normalslave(2,0)*penalty_parameter;
        const double clhs201 =     clhs40*normalslave(2,0)*penalty_parameter;
        const double clhs202 =     clhs46*normalslave(2,0)*penalty_parameter;
        const double clhs203 =     clhs52*normalslave(2,0)*penalty_parameter;
        const double clhs204 =     clhs58*normalslave(2,0)*penalty_parameter;
        const double clhs205 =     clhs64*normalslave(2,0)*penalty_parameter;
        const double clhs206 =     clhs70*normalslave(2,0)*penalty_parameter;
        const double clhs207 =     clhs76*normalslave(2,0)*penalty_parameter;
        const double clhs208 =     clhs18*clhs86 + clhs29*clhs80;
        const double clhs209 =     clhs18*clhs95 + clhs29*clhs89;
        const double clhs210 =     clhs104*clhs18 + clhs29*clhs98;
        const double clhs211 =     clhs107*clhs29 + clhs113*clhs18;
        const double clhs212 =     clhs116*clhs29 + clhs122*clhs18;
        const double clhs213 =     clhs125*clhs29 + clhs131*clhs18;
        const double clhs214 =     clhs134*clhs29 + clhs140*clhs18;
        const double clhs215 =     clhs143*clhs29 + clhs149*clhs18;
        const double clhs216 =     clhs152*clhs29 + clhs158*clhs18;
        const double clhs217 =     clhs15*normalslave(2,1)*penalty_parameter;
        const double clhs218 =     clhs34*normalslave(2,1)*penalty_parameter;
        const double clhs219 =     clhs40*normalslave(2,1)*penalty_parameter;
        const double clhs220 =     clhs46*normalslave(2,1)*penalty_parameter;
        const double clhs221 =     clhs52*normalslave(2,1)*penalty_parameter;
        const double clhs222 =     clhs58*normalslave(2,1)*penalty_parameter;
        const double clhs223 =     clhs64*normalslave(2,1)*penalty_parameter;
        const double clhs224 =     clhs70*normalslave(2,1)*penalty_parameter;
        const double clhs225 =     clhs76*normalslave(2,1)*penalty_parameter;
        const double clhs226 =     clhs15*normalslave(2,2)*penalty_parameter;
        const double clhs227 =     clhs34*normalslave(2,2)*penalty_parameter;
        const double clhs228 =     clhs40*normalslave(2,2)*penalty_parameter;
        const double clhs229 =     clhs46*normalslave(2,2)*penalty_parameter;
        const double clhs230 =     clhs52*normalslave(2,2)*penalty_parameter;
        const double clhs231 =     clhs58*normalslave(2,2)*penalty_parameter;
        const double clhs232 =     clhs64*normalslave(2,2)*penalty_parameter;
        const double clhs233 =     clhs70*normalslave(2,2)*penalty_parameter;
        const double clhs234 =     clhs76*normalslave(2,2)*penalty_parameter;
        const double clhs235 =     clhs20*clhs86 + clhs29*clhs81;
        const double clhs236 =     clhs20*clhs95 + clhs29*clhs90;
        const double clhs237 =     clhs104*clhs20 + clhs29*clhs99;
        const double clhs238 =     clhs108*clhs29 + clhs113*clhs20;
        const double clhs239 =     clhs117*clhs29 + clhs122*clhs20;
        const double clhs240 =     clhs126*clhs29 + clhs131*clhs20;
        const double clhs241 =     clhs135*clhs29 + clhs140*clhs20;
        const double clhs242 =     clhs144*clhs29 + clhs149*clhs20;
        const double clhs243 =     clhs153*clhs29 + clhs158*clhs20;
        const double clhs244 =     clhs22*clhs86 + clhs29*clhs82;
        const double clhs245 =     clhs22*clhs95 + clhs29*clhs91;
        const double clhs246 =     clhs100*clhs29 + clhs104*clhs22;
        const double clhs247 =     clhs109*clhs29 + clhs113*clhs22;
        const double clhs248 =     clhs118*clhs29 + clhs122*clhs22;
        const double clhs249 =     clhs127*clhs29 + clhs131*clhs22;
        const double clhs250 =     clhs136*clhs29 + clhs140*clhs22;
        const double clhs251 =     clhs145*clhs29 + clhs149*clhs22;
        const double clhs252 =     clhs154*clhs29 + clhs158*clhs22;
        const double clhs253 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs30*normalslave(2,0);
        lhs(0,1)=clhs36*normalslave(2,0);
        lhs(0,2)=clhs42*normalslave(2,0);
        lhs(0,3)=clhs48*normalslave(2,0);
        lhs(0,4)=clhs54*normalslave(2,0);
        lhs(0,5)=clhs60*normalslave(2,0);
        lhs(0,6)=clhs66*normalslave(2,0);
        lhs(0,7)=clhs72*normalslave(2,0);
        lhs(0,8)=clhs78*normalslave(2,0);
        lhs(0,9)=clhs87*normalslave(2,0);
        lhs(0,10)=clhs96*normalslave(2,0);
        lhs(0,11)=clhs105*normalslave(2,0);
        lhs(0,12)=clhs114*normalslave(2,0);
        lhs(0,13)=clhs123*normalslave(2,0);
        lhs(0,14)=clhs132*normalslave(2,0);
        lhs(0,15)=clhs141*normalslave(2,0);
        lhs(0,16)=clhs150*normalslave(2,0);
        lhs(0,17)=clhs159*normalslave(2,0);
        lhs(0,18)=0;
        lhs(0,19)=0;
        lhs(0,20)=clhs0*clhs160;
        lhs(1,0)=clhs30*normalslave(2,1);
        lhs(1,1)=clhs36*normalslave(2,1);
        lhs(1,2)=clhs42*normalslave(2,1);
        lhs(1,3)=clhs48*normalslave(2,1);
        lhs(1,4)=clhs54*normalslave(2,1);
        lhs(1,5)=clhs60*normalslave(2,1);
        lhs(1,6)=clhs66*normalslave(2,1);
        lhs(1,7)=clhs72*normalslave(2,1);
        lhs(1,8)=clhs78*normalslave(2,1);
        lhs(1,9)=clhs87*normalslave(2,1);
        lhs(1,10)=clhs96*normalslave(2,1);
        lhs(1,11)=clhs105*normalslave(2,1);
        lhs(1,12)=clhs114*normalslave(2,1);
        lhs(1,13)=clhs123*normalslave(2,1);
        lhs(1,14)=clhs132*normalslave(2,1);
        lhs(1,15)=clhs141*normalslave(2,1);
        lhs(1,16)=clhs150*normalslave(2,1);
        lhs(1,17)=clhs159*normalslave(2,1);
        lhs(1,18)=0;
        lhs(1,19)=0;
        lhs(1,20)=clhs0*clhs161;
        lhs(2,0)=clhs30*normalslave(2,2);
        lhs(2,1)=clhs36*normalslave(2,2);
        lhs(2,2)=clhs42*normalslave(2,2);
        lhs(2,3)=clhs48*normalslave(2,2);
        lhs(2,4)=clhs54*normalslave(2,2);
        lhs(2,5)=clhs60*normalslave(2,2);
        lhs(2,6)=clhs66*normalslave(2,2);
        lhs(2,7)=clhs72*normalslave(2,2);
        lhs(2,8)=clhs78*normalslave(2,2);
        lhs(2,9)=clhs87*normalslave(2,2);
        lhs(2,10)=clhs96*normalslave(2,2);
        lhs(2,11)=clhs105*normalslave(2,2);
        lhs(2,12)=clhs114*normalslave(2,2);
        lhs(2,13)=clhs123*normalslave(2,2);
        lhs(2,14)=clhs132*normalslave(2,2);
        lhs(2,15)=clhs141*normalslave(2,2);
        lhs(2,16)=clhs150*normalslave(2,2);
        lhs(2,17)=clhs159*normalslave(2,2);
        lhs(2,18)=0;
        lhs(2,19)=0;
        lhs(2,20)=clhs0*clhs162;
        lhs(3,0)=clhs163*normalslave(2,0);
        lhs(3,1)=clhs164*normalslave(2,0);
        lhs(3,2)=clhs165*normalslave(2,0);
        lhs(3,3)=clhs166*normalslave(2,0);
        lhs(3,4)=clhs167*normalslave(2,0);
        lhs(3,5)=clhs168*normalslave(2,0);
        lhs(3,6)=clhs169*normalslave(2,0);
        lhs(3,7)=clhs170*normalslave(2,0);
        lhs(3,8)=clhs171*normalslave(2,0);
        lhs(3,9)=clhs172*normalslave(2,0);
        lhs(3,10)=clhs173*normalslave(2,0);
        lhs(3,11)=clhs174*normalslave(2,0);
        lhs(3,12)=clhs175*normalslave(2,0);
        lhs(3,13)=clhs176*normalslave(2,0);
        lhs(3,14)=clhs177*normalslave(2,0);
        lhs(3,15)=clhs178*normalslave(2,0);
        lhs(3,16)=clhs179*normalslave(2,0);
        lhs(3,17)=clhs180*normalslave(2,0);
        lhs(3,18)=0;
        lhs(3,19)=0;
        lhs(3,20)=clhs160*clhs4;
        lhs(4,0)=clhs163*normalslave(2,1);
        lhs(4,1)=clhs164*normalslave(2,1);
        lhs(4,2)=clhs165*normalslave(2,1);
        lhs(4,3)=clhs166*normalslave(2,1);
        lhs(4,4)=clhs167*normalslave(2,1);
        lhs(4,5)=clhs168*normalslave(2,1);
        lhs(4,6)=clhs169*normalslave(2,1);
        lhs(4,7)=clhs170*normalslave(2,1);
        lhs(4,8)=clhs171*normalslave(2,1);
        lhs(4,9)=clhs172*normalslave(2,1);
        lhs(4,10)=clhs173*normalslave(2,1);
        lhs(4,11)=clhs174*normalslave(2,1);
        lhs(4,12)=clhs175*normalslave(2,1);
        lhs(4,13)=clhs176*normalslave(2,1);
        lhs(4,14)=clhs177*normalslave(2,1);
        lhs(4,15)=clhs178*normalslave(2,1);
        lhs(4,16)=clhs179*normalslave(2,1);
        lhs(4,17)=clhs180*normalslave(2,1);
        lhs(4,18)=0;
        lhs(4,19)=0;
        lhs(4,20)=clhs161*clhs4;
        lhs(5,0)=clhs163*normalslave(2,2);
        lhs(5,1)=clhs164*normalslave(2,2);
        lhs(5,2)=clhs165*normalslave(2,2);
        lhs(5,3)=clhs166*normalslave(2,2);
        lhs(5,4)=clhs167*normalslave(2,2);
        lhs(5,5)=clhs168*normalslave(2,2);
        lhs(5,6)=clhs169*normalslave(2,2);
        lhs(5,7)=clhs170*normalslave(2,2);
        lhs(5,8)=clhs171*normalslave(2,2);
        lhs(5,9)=clhs172*normalslave(2,2);
        lhs(5,10)=clhs173*normalslave(2,2);
        lhs(5,11)=clhs174*normalslave(2,2);
        lhs(5,12)=clhs175*normalslave(2,2);
        lhs(5,13)=clhs176*normalslave(2,2);
        lhs(5,14)=clhs177*normalslave(2,2);
        lhs(5,15)=clhs178*normalslave(2,2);
        lhs(5,16)=clhs179*normalslave(2,2);
        lhs(5,17)=clhs180*normalslave(2,2);
        lhs(5,18)=0;
        lhs(5,19)=0;
        lhs(5,20)=clhs162*clhs4;
        lhs(6,0)=clhs181*normalslave(2,0);
        lhs(6,1)=clhs182*normalslave(2,0);
        lhs(6,2)=clhs183*normalslave(2,0);
        lhs(6,3)=clhs184*normalslave(2,0);
        lhs(6,4)=clhs185*normalslave(2,0);
        lhs(6,5)=clhs186*normalslave(2,0);
        lhs(6,6)=clhs187*normalslave(2,0);
        lhs(6,7)=clhs188*normalslave(2,0);
        lhs(6,8)=clhs189*normalslave(2,0);
        lhs(6,9)=clhs190*normalslave(2,0);
        lhs(6,10)=clhs191*normalslave(2,0);
        lhs(6,11)=clhs192*normalslave(2,0);
        lhs(6,12)=clhs193*normalslave(2,0);
        lhs(6,13)=clhs194*normalslave(2,0);
        lhs(6,14)=clhs195*normalslave(2,0);
        lhs(6,15)=clhs196*normalslave(2,0);
        lhs(6,16)=clhs197*normalslave(2,0);
        lhs(6,17)=clhs198*normalslave(2,0);
        lhs(6,18)=0;
        lhs(6,19)=0;
        lhs(6,20)=clhs160*clhs7;
        lhs(7,0)=clhs181*normalslave(2,1);
        lhs(7,1)=clhs182*normalslave(2,1);
        lhs(7,2)=clhs183*normalslave(2,1);
        lhs(7,3)=clhs184*normalslave(2,1);
        lhs(7,4)=clhs185*normalslave(2,1);
        lhs(7,5)=clhs186*normalslave(2,1);
        lhs(7,6)=clhs187*normalslave(2,1);
        lhs(7,7)=clhs188*normalslave(2,1);
        lhs(7,8)=clhs189*normalslave(2,1);
        lhs(7,9)=clhs190*normalslave(2,1);
        lhs(7,10)=clhs191*normalslave(2,1);
        lhs(7,11)=clhs192*normalslave(2,1);
        lhs(7,12)=clhs193*normalslave(2,1);
        lhs(7,13)=clhs194*normalslave(2,1);
        lhs(7,14)=clhs195*normalslave(2,1);
        lhs(7,15)=clhs196*normalslave(2,1);
        lhs(7,16)=clhs197*normalslave(2,1);
        lhs(7,17)=clhs198*normalslave(2,1);
        lhs(7,18)=0;
        lhs(7,19)=0;
        lhs(7,20)=clhs161*clhs7;
        lhs(8,0)=clhs181*normalslave(2,2);
        lhs(8,1)=clhs182*normalslave(2,2);
        lhs(8,2)=clhs183*normalslave(2,2);
        lhs(8,3)=clhs184*normalslave(2,2);
        lhs(8,4)=clhs185*normalslave(2,2);
        lhs(8,5)=clhs186*normalslave(2,2);
        lhs(8,6)=clhs187*normalslave(2,2);
        lhs(8,7)=clhs188*normalslave(2,2);
        lhs(8,8)=clhs189*normalslave(2,2);
        lhs(8,9)=clhs190*normalslave(2,2);
        lhs(8,10)=clhs191*normalslave(2,2);
        lhs(8,11)=clhs192*normalslave(2,2);
        lhs(8,12)=clhs193*normalslave(2,2);
        lhs(8,13)=clhs194*normalslave(2,2);
        lhs(8,14)=clhs195*normalslave(2,2);
        lhs(8,15)=clhs196*normalslave(2,2);
        lhs(8,16)=clhs197*normalslave(2,2);
        lhs(8,17)=clhs198*normalslave(2,2);
        lhs(8,18)=0;
        lhs(8,19)=0;
        lhs(8,20)=clhs162*clhs7;
        lhs(9,0)=clhs18*clhs199;
        lhs(9,1)=clhs18*clhs200;
        lhs(9,2)=clhs18*clhs201;
        lhs(9,3)=clhs18*clhs202;
        lhs(9,4)=clhs18*clhs203;
        lhs(9,5)=clhs18*clhs204;
        lhs(9,6)=clhs18*clhs205;
        lhs(9,7)=clhs18*clhs206;
        lhs(9,8)=clhs18*clhs207;
        lhs(9,9)=-clhs208*normalslave(2,0);
        lhs(9,10)=-clhs209*normalslave(2,0);
        lhs(9,11)=-clhs210*normalslave(2,0);
        lhs(9,12)=-clhs211*normalslave(2,0);
        lhs(9,13)=-clhs212*normalslave(2,0);
        lhs(9,14)=-clhs213*normalslave(2,0);
        lhs(9,15)=-clhs214*normalslave(2,0);
        lhs(9,16)=-clhs215*normalslave(2,0);
        lhs(9,17)=-clhs216*normalslave(2,0);
        lhs(9,18)=0;
        lhs(9,19)=0;
        lhs(9,20)=-clhs160*clhs18;
        lhs(10,0)=clhs18*clhs217;
        lhs(10,1)=clhs18*clhs218;
        lhs(10,2)=clhs18*clhs219;
        lhs(10,3)=clhs18*clhs220;
        lhs(10,4)=clhs18*clhs221;
        lhs(10,5)=clhs18*clhs222;
        lhs(10,6)=clhs18*clhs223;
        lhs(10,7)=clhs18*clhs224;
        lhs(10,8)=clhs18*clhs225;
        lhs(10,9)=-clhs208*normalslave(2,1);
        lhs(10,10)=-clhs209*normalslave(2,1);
        lhs(10,11)=-clhs210*normalslave(2,1);
        lhs(10,12)=-clhs211*normalslave(2,1);
        lhs(10,13)=-clhs212*normalslave(2,1);
        lhs(10,14)=-clhs213*normalslave(2,1);
        lhs(10,15)=-clhs214*normalslave(2,1);
        lhs(10,16)=-clhs215*normalslave(2,1);
        lhs(10,17)=-clhs216*normalslave(2,1);
        lhs(10,18)=0;
        lhs(10,19)=0;
        lhs(10,20)=-clhs161*clhs18;
        lhs(11,0)=clhs18*clhs226;
        lhs(11,1)=clhs18*clhs227;
        lhs(11,2)=clhs18*clhs228;
        lhs(11,3)=clhs18*clhs229;
        lhs(11,4)=clhs18*clhs230;
        lhs(11,5)=clhs18*clhs231;
        lhs(11,6)=clhs18*clhs232;
        lhs(11,7)=clhs18*clhs233;
        lhs(11,8)=clhs18*clhs234;
        lhs(11,9)=-clhs208*normalslave(2,2);
        lhs(11,10)=-clhs209*normalslave(2,2);
        lhs(11,11)=-clhs210*normalslave(2,2);
        lhs(11,12)=-clhs211*normalslave(2,2);
        lhs(11,13)=-clhs212*normalslave(2,2);
        lhs(11,14)=-clhs213*normalslave(2,2);
        lhs(11,15)=-clhs214*normalslave(2,2);
        lhs(11,16)=-clhs215*normalslave(2,2);
        lhs(11,17)=-clhs216*normalslave(2,2);
        lhs(11,18)=0;
        lhs(11,19)=0;
        lhs(11,20)=-clhs162*clhs18;
        lhs(12,0)=clhs199*clhs20;
        lhs(12,1)=clhs20*clhs200;
        lhs(12,2)=clhs20*clhs201;
        lhs(12,3)=clhs20*clhs202;
        lhs(12,4)=clhs20*clhs203;
        lhs(12,5)=clhs20*clhs204;
        lhs(12,6)=clhs20*clhs205;
        lhs(12,7)=clhs20*clhs206;
        lhs(12,8)=clhs20*clhs207;
        lhs(12,9)=-clhs235*normalslave(2,0);
        lhs(12,10)=-clhs236*normalslave(2,0);
        lhs(12,11)=-clhs237*normalslave(2,0);
        lhs(12,12)=-clhs238*normalslave(2,0);
        lhs(12,13)=-clhs239*normalslave(2,0);
        lhs(12,14)=-clhs240*normalslave(2,0);
        lhs(12,15)=-clhs241*normalslave(2,0);
        lhs(12,16)=-clhs242*normalslave(2,0);
        lhs(12,17)=-clhs243*normalslave(2,0);
        lhs(12,18)=0;
        lhs(12,19)=0;
        lhs(12,20)=-clhs160*clhs20;
        lhs(13,0)=clhs20*clhs217;
        lhs(13,1)=clhs20*clhs218;
        lhs(13,2)=clhs20*clhs219;
        lhs(13,3)=clhs20*clhs220;
        lhs(13,4)=clhs20*clhs221;
        lhs(13,5)=clhs20*clhs222;
        lhs(13,6)=clhs20*clhs223;
        lhs(13,7)=clhs20*clhs224;
        lhs(13,8)=clhs20*clhs225;
        lhs(13,9)=-clhs235*normalslave(2,1);
        lhs(13,10)=-clhs236*normalslave(2,1);
        lhs(13,11)=-clhs237*normalslave(2,1);
        lhs(13,12)=-clhs238*normalslave(2,1);
        lhs(13,13)=-clhs239*normalslave(2,1);
        lhs(13,14)=-clhs240*normalslave(2,1);
        lhs(13,15)=-clhs241*normalslave(2,1);
        lhs(13,16)=-clhs242*normalslave(2,1);
        lhs(13,17)=-clhs243*normalslave(2,1);
        lhs(13,18)=0;
        lhs(13,19)=0;
        lhs(13,20)=-clhs161*clhs20;
        lhs(14,0)=clhs20*clhs226;
        lhs(14,1)=clhs20*clhs227;
        lhs(14,2)=clhs20*clhs228;
        lhs(14,3)=clhs20*clhs229;
        lhs(14,4)=clhs20*clhs230;
        lhs(14,5)=clhs20*clhs231;
        lhs(14,6)=clhs20*clhs232;
        lhs(14,7)=clhs20*clhs233;
        lhs(14,8)=clhs20*clhs234;
        lhs(14,9)=-clhs235*normalslave(2,2);
        lhs(14,10)=-clhs236*normalslave(2,2);
        lhs(14,11)=-clhs237*normalslave(2,2);
        lhs(14,12)=-clhs238*normalslave(2,2);
        lhs(14,13)=-clhs239*normalslave(2,2);
        lhs(14,14)=-clhs240*normalslave(2,2);
        lhs(14,15)=-clhs241*normalslave(2,2);
        lhs(14,16)=-clhs242*normalslave(2,2);
        lhs(14,17)=-clhs243*normalslave(2,2);
        lhs(14,18)=0;
        lhs(14,19)=0;
        lhs(14,20)=-clhs162*clhs20;
        lhs(15,0)=clhs199*clhs22;
        lhs(15,1)=clhs200*clhs22;
        lhs(15,2)=clhs201*clhs22;
        lhs(15,3)=clhs202*clhs22;
        lhs(15,4)=clhs203*clhs22;
        lhs(15,5)=clhs204*clhs22;
        lhs(15,6)=clhs205*clhs22;
        lhs(15,7)=clhs206*clhs22;
        lhs(15,8)=clhs207*clhs22;
        lhs(15,9)=-clhs244*normalslave(2,0);
        lhs(15,10)=-clhs245*normalslave(2,0);
        lhs(15,11)=-clhs246*normalslave(2,0);
        lhs(15,12)=-clhs247*normalslave(2,0);
        lhs(15,13)=-clhs248*normalslave(2,0);
        lhs(15,14)=-clhs249*normalslave(2,0);
        lhs(15,15)=-clhs250*normalslave(2,0);
        lhs(15,16)=-clhs251*normalslave(2,0);
        lhs(15,17)=-clhs252*normalslave(2,0);
        lhs(15,18)=0;
        lhs(15,19)=0;
        lhs(15,20)=-clhs160*clhs22;
        lhs(16,0)=clhs217*clhs22;
        lhs(16,1)=clhs218*clhs22;
        lhs(16,2)=clhs219*clhs22;
        lhs(16,3)=clhs22*clhs220;
        lhs(16,4)=clhs22*clhs221;
        lhs(16,5)=clhs22*clhs222;
        lhs(16,6)=clhs22*clhs223;
        lhs(16,7)=clhs22*clhs224;
        lhs(16,8)=clhs22*clhs225;
        lhs(16,9)=-clhs244*normalslave(2,1);
        lhs(16,10)=-clhs245*normalslave(2,1);
        lhs(16,11)=-clhs246*normalslave(2,1);
        lhs(16,12)=-clhs247*normalslave(2,1);
        lhs(16,13)=-clhs248*normalslave(2,1);
        lhs(16,14)=-clhs249*normalslave(2,1);
        lhs(16,15)=-clhs250*normalslave(2,1);
        lhs(16,16)=-clhs251*normalslave(2,1);
        lhs(16,17)=-clhs252*normalslave(2,1);
        lhs(16,18)=0;
        lhs(16,19)=0;
        lhs(16,20)=-clhs161*clhs22;
        lhs(17,0)=clhs22*clhs226;
        lhs(17,1)=clhs22*clhs227;
        lhs(17,2)=clhs22*clhs228;
        lhs(17,3)=clhs22*clhs229;
        lhs(17,4)=clhs22*clhs230;
        lhs(17,5)=clhs22*clhs231;
        lhs(17,6)=clhs22*clhs232;
        lhs(17,7)=clhs22*clhs233;
        lhs(17,8)=clhs22*clhs234;
        lhs(17,9)=-clhs244*normalslave(2,2);
        lhs(17,10)=-clhs245*normalslave(2,2);
        lhs(17,11)=-clhs246*normalslave(2,2);
        lhs(17,12)=-clhs247*normalslave(2,2);
        lhs(17,13)=-clhs248*normalslave(2,2);
        lhs(17,14)=-clhs249*normalslave(2,2);
        lhs(17,15)=-clhs250*normalslave(2,2);
        lhs(17,16)=-clhs251*normalslave(2,2);
        lhs(17,17)=-clhs252*normalslave(2,2);
        lhs(17,18)=0;
        lhs(17,19)=0;
        lhs(17,20)=-clhs162*clhs22;
        lhs(18,0)=0;
        lhs(18,1)=0;
        lhs(18,2)=0;
        lhs(18,3)=0;
        lhs(18,4)=0;
        lhs(18,5)=0;
        lhs(18,6)=0;
        lhs(18,7)=0;
        lhs(18,8)=0;
        lhs(18,9)=0;
        lhs(18,10)=0;
        lhs(18,11)=0;
        lhs(18,12)=0;
        lhs(18,13)=0;
        lhs(18,14)=0;
        lhs(18,15)=0;
        lhs(18,16)=0;
        lhs(18,17)=0;
        lhs(18,18)=clhs253;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=0;
        lhs(19,1)=0;
        lhs(19,2)=0;
        lhs(19,3)=0;
        lhs(19,4)=0;
        lhs(19,5)=0;
        lhs(19,6)=0;
        lhs(19,7)=0;
        lhs(19,8)=0;
        lhs(19,9)=0;
        lhs(19,10)=0;
        lhs(19,11)=0;
        lhs(19,12)=0;
        lhs(19,13)=0;
        lhs(19,14)=0;
        lhs(19,15)=0;
        lhs(19,16)=0;
        lhs(19,17)=0;
        lhs(19,18)=0;
        lhs(19,19)=clhs253;
        lhs(19,20)=0;
        lhs(20,0)=clhs15*scale_factor;
        lhs(20,1)=clhs34*scale_factor;
        lhs(20,2)=clhs40*scale_factor;
        lhs(20,3)=clhs46*scale_factor;
        lhs(20,4)=clhs52*scale_factor;
        lhs(20,5)=clhs58*scale_factor;
        lhs(20,6)=clhs64*scale_factor;
        lhs(20,7)=clhs70*scale_factor;
        lhs(20,8)=clhs76*scale_factor;
        lhs(20,9)=-clhs85*scale_factor;
        lhs(20,10)=-clhs94*scale_factor;
        lhs(20,11)=-clhs103*scale_factor;
        lhs(20,12)=-clhs112*scale_factor;
        lhs(20,13)=-clhs121*scale_factor;
        lhs(20,14)=-clhs130*scale_factor;
        lhs(20,15)=-clhs139*scale_factor;
        lhs(20,16)=-clhs148*scale_factor;
        lhs(20,17)=-clhs157*scale_factor;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=0;
    }
    else if (rActiveInactive == 2 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(1,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(1,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(1,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*penalty_parameter;
        const double clhs17 =     X1(0,0) + u1(0,0);
        const double clhs18 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs19 =     X1(1,0) + u1(1,0);
        const double clhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs21 =     X1(2,0) + u1(2,0);
        const double clhs22 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs23 =     X1(0,1) + u1(0,1);
        const double clhs24 =     X1(1,1) + u1(1,1);
        const double clhs25 =     X1(2,1) + u1(2,1);
        const double clhs26 =     X1(0,2) + u1(0,2);
        const double clhs27 =     X1(1,2) + u1(1,2);
        const double clhs28 =     X1(2,2) + u1(2,2);
        const double clhs29 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs17*clhs18 + clhs19*clhs20 + clhs21*clhs22) + normalslave(1,1)*(-clhs0*clhs1 + clhs18*clhs23 + clhs20*clhs24 + clhs22*clhs25 - clhs3*clhs4 - clhs6*clhs7) + normalslave(1,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs18*clhs26 + clhs20*clhs27 + clhs22*clhs28));
        const double clhs30 =     -clhs0*clhs16 + clhs2*clhs29;
        const double clhs31 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs32 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs33 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs34 =     normalslave(1,0)*(clhs12*clhs31 + clhs13*clhs32 + clhs14*clhs33) + normalslave(1,1)*(clhs0 + clhs1*clhs31 + clhs3*clhs32 + clhs33*clhs6) + normalslave(1,2)*(clhs10*clhs32 + clhs11*clhs33 + clhs31*clhs9);
        const double clhs35 =     clhs34*penalty_parameter;
        const double clhs36 =     -clhs0*clhs35 + clhs29*clhs31;
        const double clhs37 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs38 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs39 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs40 =     normalslave(1,0)*(clhs12*clhs37 + clhs13*clhs38 + clhs14*clhs39) + normalslave(1,1)*(clhs1*clhs37 + clhs3*clhs38 + clhs39*clhs6) + normalslave(1,2)*(clhs0 + clhs10*clhs38 + clhs11*clhs39 + clhs37*clhs9);
        const double clhs41 =     clhs40*penalty_parameter;
        const double clhs42 =     -clhs0*clhs41 + clhs29*clhs37;
        const double clhs43 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs44 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs45 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs46 =     normalslave(1,0)*(clhs12*clhs43 + clhs13*clhs44 + clhs14*clhs45 + clhs4) + normalslave(1,1)*(clhs1*clhs43 + clhs3*clhs44 + clhs45*clhs6) + normalslave(1,2)*(clhs10*clhs44 + clhs11*clhs45 + clhs43*clhs9);
        const double clhs47 =     clhs46*penalty_parameter;
        const double clhs48 =     -clhs0*clhs47 + clhs29*clhs43;
        const double clhs49 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs50 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs51 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs52 =     normalslave(1,0)*(clhs12*clhs49 + clhs13*clhs50 + clhs14*clhs51) + normalslave(1,1)*(clhs1*clhs49 + clhs3*clhs50 + clhs4 + clhs51*clhs6) + normalslave(1,2)*(clhs10*clhs50 + clhs11*clhs51 + clhs49*clhs9);
        const double clhs53 =     clhs52*penalty_parameter;
        const double clhs54 =     -clhs0*clhs53 + clhs29*clhs49;
        const double clhs55 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs56 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs57 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs58 =     normalslave(1,0)*(clhs12*clhs55 + clhs13*clhs56 + clhs14*clhs57) + normalslave(1,1)*(clhs1*clhs55 + clhs3*clhs56 + clhs57*clhs6) + normalslave(1,2)*(clhs10*clhs56 + clhs11*clhs57 + clhs4 + clhs55*clhs9);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs29*clhs55;
        const double clhs61 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs62 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs63 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs64 =     normalslave(1,0)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs7) + normalslave(1,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs6*clhs63) + normalslave(1,2)*(clhs10*clhs62 + clhs11*clhs63 + clhs61*clhs9);
        const double clhs65 =     clhs64*penalty_parameter;
        const double clhs66 =     -clhs0*clhs65 + clhs29*clhs61;
        const double clhs67 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs68 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs69 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs70 =     normalslave(1,0)*(clhs12*clhs67 + clhs13*clhs68 + clhs14*clhs69) + normalslave(1,1)*(clhs1*clhs67 + clhs3*clhs68 + clhs6*clhs69 + clhs7) + normalslave(1,2)*(clhs10*clhs68 + clhs11*clhs69 + clhs67*clhs9);
        const double clhs71 =     clhs70*penalty_parameter;
        const double clhs72 =     -clhs0*clhs71 + clhs29*clhs67;
        const double clhs73 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs74 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs75 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs76 =     normalslave(1,0)*(clhs12*clhs73 + clhs13*clhs74 + clhs14*clhs75) + normalslave(1,1)*(clhs1*clhs73 + clhs3*clhs74 + clhs6*clhs75) + normalslave(1,2)*(clhs10*clhs74 + clhs11*clhs75 + clhs7 + clhs73*clhs9);
        const double clhs77 =     clhs76*penalty_parameter;
        const double clhs78 =     -clhs0*clhs77 + clhs29*clhs73;
        const double clhs79 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs80 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs81 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs82 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs83 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs84 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs85 =     normalslave(1,0)*(-clhs12*clhs79 - clhs13*clhs83 - clhs14*clhs84 + clhs17*clhs80 + clhs18 + clhs19*clhs81 + clhs21*clhs82) + normalslave(1,1)*(-clhs1*clhs79 + clhs23*clhs80 + clhs24*clhs81 + clhs25*clhs82 - clhs3*clhs83 - clhs6*clhs84) + normalslave(1,2)*(-clhs10*clhs83 - clhs11*clhs84 + clhs26*clhs80 + clhs27*clhs81 + clhs28*clhs82 - clhs79*clhs9);
        const double clhs86 =     clhs85*penalty_parameter;
        const double clhs87 =     clhs0*clhs86 + clhs29*clhs79;
        const double clhs88 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs89 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs90 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs91 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs92 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs93 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs94 =     normalslave(1,0)*(-clhs12*clhs88 - clhs13*clhs92 - clhs14*clhs93 + clhs17*clhs89 + clhs19*clhs90 + clhs21*clhs91) + normalslave(1,1)*(-clhs1*clhs88 + clhs18 + clhs23*clhs89 + clhs24*clhs90 + clhs25*clhs91 - clhs3*clhs92 - clhs6*clhs93) + normalslave(1,2)*(-clhs10*clhs92 - clhs11*clhs93 + clhs26*clhs89 + clhs27*clhs90 + clhs28*clhs91 - clhs88*clhs9);
        const double clhs95 =     clhs94*penalty_parameter;
        const double clhs96 =     clhs0*clhs95 + clhs29*clhs88;
        const double clhs97 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs98 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs99 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs100 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs101 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs102 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs103 =     normalslave(1,0)*(clhs100*clhs21 - clhs101*clhs13 - clhs102*clhs14 - clhs12*clhs97 + clhs17*clhs98 + clhs19*clhs99) + normalslave(1,1)*(-clhs1*clhs97 + clhs100*clhs25 - clhs101*clhs3 - clhs102*clhs6 + clhs23*clhs98 + clhs24*clhs99) + normalslave(1,2)*(-clhs10*clhs101 + clhs100*clhs28 - clhs102*clhs11 + clhs18 + clhs26*clhs98 + clhs27*clhs99 - clhs9*clhs97);
        const double clhs104 =     clhs103*penalty_parameter;
        const double clhs105 =     clhs0*clhs104 + clhs29*clhs97;
        const double clhs106 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs107 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs108 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs109 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs110 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs111 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs112 =     normalslave(1,0)*(-clhs106*clhs12 + clhs107*clhs17 + clhs108*clhs19 + clhs109*clhs21 - clhs110*clhs13 - clhs111*clhs14 + clhs20) + normalslave(1,1)*(-clhs1*clhs106 + clhs107*clhs23 + clhs108*clhs24 + clhs109*clhs25 - clhs110*clhs3 - clhs111*clhs6) + normalslave(1,2)*(-clhs10*clhs110 - clhs106*clhs9 + clhs107*clhs26 + clhs108*clhs27 + clhs109*clhs28 - clhs11*clhs111);
        const double clhs113 =     clhs112*penalty_parameter;
        const double clhs114 =     clhs0*clhs113 + clhs106*clhs29;
        const double clhs115 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs116 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs117 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs118 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs119 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs120 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs121 =     normalslave(1,0)*(-clhs115*clhs12 + clhs116*clhs17 + clhs117*clhs19 + clhs118*clhs21 - clhs119*clhs13 - clhs120*clhs14) + normalslave(1,1)*(-clhs1*clhs115 + clhs116*clhs23 + clhs117*clhs24 + clhs118*clhs25 - clhs119*clhs3 - clhs120*clhs6 + clhs20) + normalslave(1,2)*(-clhs10*clhs119 - clhs11*clhs120 - clhs115*clhs9 + clhs116*clhs26 + clhs117*clhs27 + clhs118*clhs28);
        const double clhs122 =     clhs121*penalty_parameter;
        const double clhs123 =     clhs0*clhs122 + clhs115*clhs29;
        const double clhs124 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs125 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs126 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs127 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs128 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs129 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs130 =     normalslave(1,0)*(-clhs12*clhs124 + clhs125*clhs17 + clhs126*clhs19 + clhs127*clhs21 - clhs128*clhs13 - clhs129*clhs14) + normalslave(1,1)*(-clhs1*clhs124 + clhs125*clhs23 + clhs126*clhs24 + clhs127*clhs25 - clhs128*clhs3 - clhs129*clhs6) + normalslave(1,2)*(-clhs10*clhs128 - clhs11*clhs129 - clhs124*clhs9 + clhs125*clhs26 + clhs126*clhs27 + clhs127*clhs28 + clhs20);
        const double clhs131 =     clhs130*penalty_parameter;
        const double clhs132 =     clhs0*clhs131 + clhs124*clhs29;
        const double clhs133 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs134 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs135 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs136 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs137 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs138 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs139 =     normalslave(1,0)*(-clhs12*clhs133 - clhs13*clhs137 + clhs134*clhs17 + clhs135*clhs19 + clhs136*clhs21 - clhs138*clhs14 + clhs22) + normalslave(1,1)*(-clhs1*clhs133 + clhs134*clhs23 + clhs135*clhs24 + clhs136*clhs25 - clhs137*clhs3 - clhs138*clhs6) + normalslave(1,2)*(-clhs10*clhs137 - clhs11*clhs138 - clhs133*clhs9 + clhs134*clhs26 + clhs135*clhs27 + clhs136*clhs28);
        const double clhs140 =     clhs139*penalty_parameter;
        const double clhs141 =     clhs0*clhs140 + clhs133*clhs29;
        const double clhs142 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs143 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs144 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs145 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs146 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs147 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs148 =     normalslave(1,0)*(-clhs12*clhs142 - clhs13*clhs146 - clhs14*clhs147 + clhs143*clhs17 + clhs144*clhs19 + clhs145*clhs21) + normalslave(1,1)*(-clhs1*clhs142 + clhs143*clhs23 + clhs144*clhs24 + clhs145*clhs25 - clhs146*clhs3 - clhs147*clhs6 + clhs22) + normalslave(1,2)*(-clhs10*clhs146 - clhs11*clhs147 - clhs142*clhs9 + clhs143*clhs26 + clhs144*clhs27 + clhs145*clhs28);
        const double clhs149 =     clhs148*penalty_parameter;
        const double clhs150 =     clhs0*clhs149 + clhs142*clhs29;
        const double clhs151 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs152 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs153 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs154 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs155 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs156 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs157 =     normalslave(1,0)*(-clhs12*clhs151 - clhs13*clhs155 - clhs14*clhs156 + clhs152*clhs17 + clhs153*clhs19 + clhs154*clhs21) + normalslave(1,1)*(-clhs1*clhs151 + clhs152*clhs23 + clhs153*clhs24 + clhs154*clhs25 - clhs155*clhs3 - clhs156*clhs6) + normalslave(1,2)*(-clhs10*clhs155 - clhs11*clhs156 - clhs151*clhs9 + clhs152*clhs26 + clhs153*clhs27 + clhs154*clhs28 + clhs22);
        const double clhs158 =     clhs157*penalty_parameter;
        const double clhs159 =     clhs0*clhs158 + clhs151*clhs29;
        const double clhs160 =     normalslave(1,0)*scale_factor;
        const double clhs161 =     normalslave(1,1)*scale_factor;
        const double clhs162 =     normalslave(1,2)*scale_factor;
        const double clhs163 =     -clhs16*clhs4 + clhs29*clhs5;
        const double clhs164 =     clhs29*clhs32 - clhs35*clhs4;
        const double clhs165 =     clhs29*clhs38 - clhs4*clhs41;
        const double clhs166 =     clhs29*clhs44 - clhs4*clhs47;
        const double clhs167 =     clhs29*clhs50 - clhs4*clhs53;
        const double clhs168 =     clhs29*clhs56 - clhs4*clhs59;
        const double clhs169 =     clhs29*clhs62 - clhs4*clhs65;
        const double clhs170 =     clhs29*clhs68 - clhs4*clhs71;
        const double clhs171 =     clhs29*clhs74 - clhs4*clhs77;
        const double clhs172 =     clhs29*clhs83 + clhs4*clhs86;
        const double clhs173 =     clhs29*clhs92 + clhs4*clhs95;
        const double clhs174 =     clhs101*clhs29 + clhs104*clhs4;
        const double clhs175 =     clhs110*clhs29 + clhs113*clhs4;
        const double clhs176 =     clhs119*clhs29 + clhs122*clhs4;
        const double clhs177 =     clhs128*clhs29 + clhs131*clhs4;
        const double clhs178 =     clhs137*clhs29 + clhs140*clhs4;
        const double clhs179 =     clhs146*clhs29 + clhs149*clhs4;
        const double clhs180 =     clhs155*clhs29 + clhs158*clhs4;
        const double clhs181 =     -clhs16*clhs7 + clhs29*clhs8;
        const double clhs182 =     clhs29*clhs33 - clhs35*clhs7;
        const double clhs183 =     clhs29*clhs39 - clhs41*clhs7;
        const double clhs184 =     clhs29*clhs45 - clhs47*clhs7;
        const double clhs185 =     clhs29*clhs51 - clhs53*clhs7;
        const double clhs186 =     clhs29*clhs57 - clhs59*clhs7;
        const double clhs187 =     clhs29*clhs63 - clhs65*clhs7;
        const double clhs188 =     clhs29*clhs69 - clhs7*clhs71;
        const double clhs189 =     clhs29*clhs75 - clhs7*clhs77;
        const double clhs190 =     clhs29*clhs84 + clhs7*clhs86;
        const double clhs191 =     clhs29*clhs93 + clhs7*clhs95;
        const double clhs192 =     clhs102*clhs29 + clhs104*clhs7;
        const double clhs193 =     clhs111*clhs29 + clhs113*clhs7;
        const double clhs194 =     clhs120*clhs29 + clhs122*clhs7;
        const double clhs195 =     clhs129*clhs29 + clhs131*clhs7;
        const double clhs196 =     clhs138*clhs29 + clhs140*clhs7;
        const double clhs197 =     clhs147*clhs29 + clhs149*clhs7;
        const double clhs198 =     clhs156*clhs29 + clhs158*clhs7;
        const double clhs199 =     clhs15*normalslave(1,0)*penalty_parameter;
        const double clhs200 =     clhs34*normalslave(1,0)*penalty_parameter;
        const double clhs201 =     clhs40*normalslave(1,0)*penalty_parameter;
        const double clhs202 =     clhs46*normalslave(1,0)*penalty_parameter;
        const double clhs203 =     clhs52*normalslave(1,0)*penalty_parameter;
        const double clhs204 =     clhs58*normalslave(1,0)*penalty_parameter;
        const double clhs205 =     clhs64*normalslave(1,0)*penalty_parameter;
        const double clhs206 =     clhs70*normalslave(1,0)*penalty_parameter;
        const double clhs207 =     clhs76*normalslave(1,0)*penalty_parameter;
        const double clhs208 =     clhs18*clhs86 + clhs29*clhs80;
        const double clhs209 =     clhs18*clhs95 + clhs29*clhs89;
        const double clhs210 =     clhs104*clhs18 + clhs29*clhs98;
        const double clhs211 =     clhs107*clhs29 + clhs113*clhs18;
        const double clhs212 =     clhs116*clhs29 + clhs122*clhs18;
        const double clhs213 =     clhs125*clhs29 + clhs131*clhs18;
        const double clhs214 =     clhs134*clhs29 + clhs140*clhs18;
        const double clhs215 =     clhs143*clhs29 + clhs149*clhs18;
        const double clhs216 =     clhs152*clhs29 + clhs158*clhs18;
        const double clhs217 =     clhs15*normalslave(1,1)*penalty_parameter;
        const double clhs218 =     clhs34*normalslave(1,1)*penalty_parameter;
        const double clhs219 =     clhs40*normalslave(1,1)*penalty_parameter;
        const double clhs220 =     clhs46*normalslave(1,1)*penalty_parameter;
        const double clhs221 =     clhs52*normalslave(1,1)*penalty_parameter;
        const double clhs222 =     clhs58*normalslave(1,1)*penalty_parameter;
        const double clhs223 =     clhs64*normalslave(1,1)*penalty_parameter;
        const double clhs224 =     clhs70*normalslave(1,1)*penalty_parameter;
        const double clhs225 =     clhs76*normalslave(1,1)*penalty_parameter;
        const double clhs226 =     clhs15*normalslave(1,2)*penalty_parameter;
        const double clhs227 =     clhs34*normalslave(1,2)*penalty_parameter;
        const double clhs228 =     clhs40*normalslave(1,2)*penalty_parameter;
        const double clhs229 =     clhs46*normalslave(1,2)*penalty_parameter;
        const double clhs230 =     clhs52*normalslave(1,2)*penalty_parameter;
        const double clhs231 =     clhs58*normalslave(1,2)*penalty_parameter;
        const double clhs232 =     clhs64*normalslave(1,2)*penalty_parameter;
        const double clhs233 =     clhs70*normalslave(1,2)*penalty_parameter;
        const double clhs234 =     clhs76*normalslave(1,2)*penalty_parameter;
        const double clhs235 =     clhs20*clhs86 + clhs29*clhs81;
        const double clhs236 =     clhs20*clhs95 + clhs29*clhs90;
        const double clhs237 =     clhs104*clhs20 + clhs29*clhs99;
        const double clhs238 =     clhs108*clhs29 + clhs113*clhs20;
        const double clhs239 =     clhs117*clhs29 + clhs122*clhs20;
        const double clhs240 =     clhs126*clhs29 + clhs131*clhs20;
        const double clhs241 =     clhs135*clhs29 + clhs140*clhs20;
        const double clhs242 =     clhs144*clhs29 + clhs149*clhs20;
        const double clhs243 =     clhs153*clhs29 + clhs158*clhs20;
        const double clhs244 =     clhs22*clhs86 + clhs29*clhs82;
        const double clhs245 =     clhs22*clhs95 + clhs29*clhs91;
        const double clhs246 =     clhs100*clhs29 + clhs104*clhs22;
        const double clhs247 =     clhs109*clhs29 + clhs113*clhs22;
        const double clhs248 =     clhs118*clhs29 + clhs122*clhs22;
        const double clhs249 =     clhs127*clhs29 + clhs131*clhs22;
        const double clhs250 =     clhs136*clhs29 + clhs140*clhs22;
        const double clhs251 =     clhs145*clhs29 + clhs149*clhs22;
        const double clhs252 =     clhs154*clhs29 + clhs158*clhs22;
        const double clhs253 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs30*normalslave(1,0);
        lhs(0,1)=clhs36*normalslave(1,0);
        lhs(0,2)=clhs42*normalslave(1,0);
        lhs(0,3)=clhs48*normalslave(1,0);
        lhs(0,4)=clhs54*normalslave(1,0);
        lhs(0,5)=clhs60*normalslave(1,0);
        lhs(0,6)=clhs66*normalslave(1,0);
        lhs(0,7)=clhs72*normalslave(1,0);
        lhs(0,8)=clhs78*normalslave(1,0);
        lhs(0,9)=clhs87*normalslave(1,0);
        lhs(0,10)=clhs96*normalslave(1,0);
        lhs(0,11)=clhs105*normalslave(1,0);
        lhs(0,12)=clhs114*normalslave(1,0);
        lhs(0,13)=clhs123*normalslave(1,0);
        lhs(0,14)=clhs132*normalslave(1,0);
        lhs(0,15)=clhs141*normalslave(1,0);
        lhs(0,16)=clhs150*normalslave(1,0);
        lhs(0,17)=clhs159*normalslave(1,0);
        lhs(0,18)=0;
        lhs(0,19)=clhs0*clhs160;
        lhs(0,20)=0;
        lhs(1,0)=clhs30*normalslave(1,1);
        lhs(1,1)=clhs36*normalslave(1,1);
        lhs(1,2)=clhs42*normalslave(1,1);
        lhs(1,3)=clhs48*normalslave(1,1);
        lhs(1,4)=clhs54*normalslave(1,1);
        lhs(1,5)=clhs60*normalslave(1,1);
        lhs(1,6)=clhs66*normalslave(1,1);
        lhs(1,7)=clhs72*normalslave(1,1);
        lhs(1,8)=clhs78*normalslave(1,1);
        lhs(1,9)=clhs87*normalslave(1,1);
        lhs(1,10)=clhs96*normalslave(1,1);
        lhs(1,11)=clhs105*normalslave(1,1);
        lhs(1,12)=clhs114*normalslave(1,1);
        lhs(1,13)=clhs123*normalslave(1,1);
        lhs(1,14)=clhs132*normalslave(1,1);
        lhs(1,15)=clhs141*normalslave(1,1);
        lhs(1,16)=clhs150*normalslave(1,1);
        lhs(1,17)=clhs159*normalslave(1,1);
        lhs(1,18)=0;
        lhs(1,19)=clhs0*clhs161;
        lhs(1,20)=0;
        lhs(2,0)=clhs30*normalslave(1,2);
        lhs(2,1)=clhs36*normalslave(1,2);
        lhs(2,2)=clhs42*normalslave(1,2);
        lhs(2,3)=clhs48*normalslave(1,2);
        lhs(2,4)=clhs54*normalslave(1,2);
        lhs(2,5)=clhs60*normalslave(1,2);
        lhs(2,6)=clhs66*normalslave(1,2);
        lhs(2,7)=clhs72*normalslave(1,2);
        lhs(2,8)=clhs78*normalslave(1,2);
        lhs(2,9)=clhs87*normalslave(1,2);
        lhs(2,10)=clhs96*normalslave(1,2);
        lhs(2,11)=clhs105*normalslave(1,2);
        lhs(2,12)=clhs114*normalslave(1,2);
        lhs(2,13)=clhs123*normalslave(1,2);
        lhs(2,14)=clhs132*normalslave(1,2);
        lhs(2,15)=clhs141*normalslave(1,2);
        lhs(2,16)=clhs150*normalslave(1,2);
        lhs(2,17)=clhs159*normalslave(1,2);
        lhs(2,18)=0;
        lhs(2,19)=clhs0*clhs162;
        lhs(2,20)=0;
        lhs(3,0)=clhs163*normalslave(1,0);
        lhs(3,1)=clhs164*normalslave(1,0);
        lhs(3,2)=clhs165*normalslave(1,0);
        lhs(3,3)=clhs166*normalslave(1,0);
        lhs(3,4)=clhs167*normalslave(1,0);
        lhs(3,5)=clhs168*normalslave(1,0);
        lhs(3,6)=clhs169*normalslave(1,0);
        lhs(3,7)=clhs170*normalslave(1,0);
        lhs(3,8)=clhs171*normalslave(1,0);
        lhs(3,9)=clhs172*normalslave(1,0);
        lhs(3,10)=clhs173*normalslave(1,0);
        lhs(3,11)=clhs174*normalslave(1,0);
        lhs(3,12)=clhs175*normalslave(1,0);
        lhs(3,13)=clhs176*normalslave(1,0);
        lhs(3,14)=clhs177*normalslave(1,0);
        lhs(3,15)=clhs178*normalslave(1,0);
        lhs(3,16)=clhs179*normalslave(1,0);
        lhs(3,17)=clhs180*normalslave(1,0);
        lhs(3,18)=0;
        lhs(3,19)=clhs160*clhs4;
        lhs(3,20)=0;
        lhs(4,0)=clhs163*normalslave(1,1);
        lhs(4,1)=clhs164*normalslave(1,1);
        lhs(4,2)=clhs165*normalslave(1,1);
        lhs(4,3)=clhs166*normalslave(1,1);
        lhs(4,4)=clhs167*normalslave(1,1);
        lhs(4,5)=clhs168*normalslave(1,1);
        lhs(4,6)=clhs169*normalslave(1,1);
        lhs(4,7)=clhs170*normalslave(1,1);
        lhs(4,8)=clhs171*normalslave(1,1);
        lhs(4,9)=clhs172*normalslave(1,1);
        lhs(4,10)=clhs173*normalslave(1,1);
        lhs(4,11)=clhs174*normalslave(1,1);
        lhs(4,12)=clhs175*normalslave(1,1);
        lhs(4,13)=clhs176*normalslave(1,1);
        lhs(4,14)=clhs177*normalslave(1,1);
        lhs(4,15)=clhs178*normalslave(1,1);
        lhs(4,16)=clhs179*normalslave(1,1);
        lhs(4,17)=clhs180*normalslave(1,1);
        lhs(4,18)=0;
        lhs(4,19)=clhs161*clhs4;
        lhs(4,20)=0;
        lhs(5,0)=clhs163*normalslave(1,2);
        lhs(5,1)=clhs164*normalslave(1,2);
        lhs(5,2)=clhs165*normalslave(1,2);
        lhs(5,3)=clhs166*normalslave(1,2);
        lhs(5,4)=clhs167*normalslave(1,2);
        lhs(5,5)=clhs168*normalslave(1,2);
        lhs(5,6)=clhs169*normalslave(1,2);
        lhs(5,7)=clhs170*normalslave(1,2);
        lhs(5,8)=clhs171*normalslave(1,2);
        lhs(5,9)=clhs172*normalslave(1,2);
        lhs(5,10)=clhs173*normalslave(1,2);
        lhs(5,11)=clhs174*normalslave(1,2);
        lhs(5,12)=clhs175*normalslave(1,2);
        lhs(5,13)=clhs176*normalslave(1,2);
        lhs(5,14)=clhs177*normalslave(1,2);
        lhs(5,15)=clhs178*normalslave(1,2);
        lhs(5,16)=clhs179*normalslave(1,2);
        lhs(5,17)=clhs180*normalslave(1,2);
        lhs(5,18)=0;
        lhs(5,19)=clhs162*clhs4;
        lhs(5,20)=0;
        lhs(6,0)=clhs181*normalslave(1,0);
        lhs(6,1)=clhs182*normalslave(1,0);
        lhs(6,2)=clhs183*normalslave(1,0);
        lhs(6,3)=clhs184*normalslave(1,0);
        lhs(6,4)=clhs185*normalslave(1,0);
        lhs(6,5)=clhs186*normalslave(1,0);
        lhs(6,6)=clhs187*normalslave(1,0);
        lhs(6,7)=clhs188*normalslave(1,0);
        lhs(6,8)=clhs189*normalslave(1,0);
        lhs(6,9)=clhs190*normalslave(1,0);
        lhs(6,10)=clhs191*normalslave(1,0);
        lhs(6,11)=clhs192*normalslave(1,0);
        lhs(6,12)=clhs193*normalslave(1,0);
        lhs(6,13)=clhs194*normalslave(1,0);
        lhs(6,14)=clhs195*normalslave(1,0);
        lhs(6,15)=clhs196*normalslave(1,0);
        lhs(6,16)=clhs197*normalslave(1,0);
        lhs(6,17)=clhs198*normalslave(1,0);
        lhs(6,18)=0;
        lhs(6,19)=clhs160*clhs7;
        lhs(6,20)=0;
        lhs(7,0)=clhs181*normalslave(1,1);
        lhs(7,1)=clhs182*normalslave(1,1);
        lhs(7,2)=clhs183*normalslave(1,1);
        lhs(7,3)=clhs184*normalslave(1,1);
        lhs(7,4)=clhs185*normalslave(1,1);
        lhs(7,5)=clhs186*normalslave(1,1);
        lhs(7,6)=clhs187*normalslave(1,1);
        lhs(7,7)=clhs188*normalslave(1,1);
        lhs(7,8)=clhs189*normalslave(1,1);
        lhs(7,9)=clhs190*normalslave(1,1);
        lhs(7,10)=clhs191*normalslave(1,1);
        lhs(7,11)=clhs192*normalslave(1,1);
        lhs(7,12)=clhs193*normalslave(1,1);
        lhs(7,13)=clhs194*normalslave(1,1);
        lhs(7,14)=clhs195*normalslave(1,1);
        lhs(7,15)=clhs196*normalslave(1,1);
        lhs(7,16)=clhs197*normalslave(1,1);
        lhs(7,17)=clhs198*normalslave(1,1);
        lhs(7,18)=0;
        lhs(7,19)=clhs161*clhs7;
        lhs(7,20)=0;
        lhs(8,0)=clhs181*normalslave(1,2);
        lhs(8,1)=clhs182*normalslave(1,2);
        lhs(8,2)=clhs183*normalslave(1,2);
        lhs(8,3)=clhs184*normalslave(1,2);
        lhs(8,4)=clhs185*normalslave(1,2);
        lhs(8,5)=clhs186*normalslave(1,2);
        lhs(8,6)=clhs187*normalslave(1,2);
        lhs(8,7)=clhs188*normalslave(1,2);
        lhs(8,8)=clhs189*normalslave(1,2);
        lhs(8,9)=clhs190*normalslave(1,2);
        lhs(8,10)=clhs191*normalslave(1,2);
        lhs(8,11)=clhs192*normalslave(1,2);
        lhs(8,12)=clhs193*normalslave(1,2);
        lhs(8,13)=clhs194*normalslave(1,2);
        lhs(8,14)=clhs195*normalslave(1,2);
        lhs(8,15)=clhs196*normalslave(1,2);
        lhs(8,16)=clhs197*normalslave(1,2);
        lhs(8,17)=clhs198*normalslave(1,2);
        lhs(8,18)=0;
        lhs(8,19)=clhs162*clhs7;
        lhs(8,20)=0;
        lhs(9,0)=clhs18*clhs199;
        lhs(9,1)=clhs18*clhs200;
        lhs(9,2)=clhs18*clhs201;
        lhs(9,3)=clhs18*clhs202;
        lhs(9,4)=clhs18*clhs203;
        lhs(9,5)=clhs18*clhs204;
        lhs(9,6)=clhs18*clhs205;
        lhs(9,7)=clhs18*clhs206;
        lhs(9,8)=clhs18*clhs207;
        lhs(9,9)=-clhs208*normalslave(1,0);
        lhs(9,10)=-clhs209*normalslave(1,0);
        lhs(9,11)=-clhs210*normalslave(1,0);
        lhs(9,12)=-clhs211*normalslave(1,0);
        lhs(9,13)=-clhs212*normalslave(1,0);
        lhs(9,14)=-clhs213*normalslave(1,0);
        lhs(9,15)=-clhs214*normalslave(1,0);
        lhs(9,16)=-clhs215*normalslave(1,0);
        lhs(9,17)=-clhs216*normalslave(1,0);
        lhs(9,18)=0;
        lhs(9,19)=-clhs160*clhs18;
        lhs(9,20)=0;
        lhs(10,0)=clhs18*clhs217;
        lhs(10,1)=clhs18*clhs218;
        lhs(10,2)=clhs18*clhs219;
        lhs(10,3)=clhs18*clhs220;
        lhs(10,4)=clhs18*clhs221;
        lhs(10,5)=clhs18*clhs222;
        lhs(10,6)=clhs18*clhs223;
        lhs(10,7)=clhs18*clhs224;
        lhs(10,8)=clhs18*clhs225;
        lhs(10,9)=-clhs208*normalslave(1,1);
        lhs(10,10)=-clhs209*normalslave(1,1);
        lhs(10,11)=-clhs210*normalslave(1,1);
        lhs(10,12)=-clhs211*normalslave(1,1);
        lhs(10,13)=-clhs212*normalslave(1,1);
        lhs(10,14)=-clhs213*normalslave(1,1);
        lhs(10,15)=-clhs214*normalslave(1,1);
        lhs(10,16)=-clhs215*normalslave(1,1);
        lhs(10,17)=-clhs216*normalslave(1,1);
        lhs(10,18)=0;
        lhs(10,19)=-clhs161*clhs18;
        lhs(10,20)=0;
        lhs(11,0)=clhs18*clhs226;
        lhs(11,1)=clhs18*clhs227;
        lhs(11,2)=clhs18*clhs228;
        lhs(11,3)=clhs18*clhs229;
        lhs(11,4)=clhs18*clhs230;
        lhs(11,5)=clhs18*clhs231;
        lhs(11,6)=clhs18*clhs232;
        lhs(11,7)=clhs18*clhs233;
        lhs(11,8)=clhs18*clhs234;
        lhs(11,9)=-clhs208*normalslave(1,2);
        lhs(11,10)=-clhs209*normalslave(1,2);
        lhs(11,11)=-clhs210*normalslave(1,2);
        lhs(11,12)=-clhs211*normalslave(1,2);
        lhs(11,13)=-clhs212*normalslave(1,2);
        lhs(11,14)=-clhs213*normalslave(1,2);
        lhs(11,15)=-clhs214*normalslave(1,2);
        lhs(11,16)=-clhs215*normalslave(1,2);
        lhs(11,17)=-clhs216*normalslave(1,2);
        lhs(11,18)=0;
        lhs(11,19)=-clhs162*clhs18;
        lhs(11,20)=0;
        lhs(12,0)=clhs199*clhs20;
        lhs(12,1)=clhs20*clhs200;
        lhs(12,2)=clhs20*clhs201;
        lhs(12,3)=clhs20*clhs202;
        lhs(12,4)=clhs20*clhs203;
        lhs(12,5)=clhs20*clhs204;
        lhs(12,6)=clhs20*clhs205;
        lhs(12,7)=clhs20*clhs206;
        lhs(12,8)=clhs20*clhs207;
        lhs(12,9)=-clhs235*normalslave(1,0);
        lhs(12,10)=-clhs236*normalslave(1,0);
        lhs(12,11)=-clhs237*normalslave(1,0);
        lhs(12,12)=-clhs238*normalslave(1,0);
        lhs(12,13)=-clhs239*normalslave(1,0);
        lhs(12,14)=-clhs240*normalslave(1,0);
        lhs(12,15)=-clhs241*normalslave(1,0);
        lhs(12,16)=-clhs242*normalslave(1,0);
        lhs(12,17)=-clhs243*normalslave(1,0);
        lhs(12,18)=0;
        lhs(12,19)=-clhs160*clhs20;
        lhs(12,20)=0;
        lhs(13,0)=clhs20*clhs217;
        lhs(13,1)=clhs20*clhs218;
        lhs(13,2)=clhs20*clhs219;
        lhs(13,3)=clhs20*clhs220;
        lhs(13,4)=clhs20*clhs221;
        lhs(13,5)=clhs20*clhs222;
        lhs(13,6)=clhs20*clhs223;
        lhs(13,7)=clhs20*clhs224;
        lhs(13,8)=clhs20*clhs225;
        lhs(13,9)=-clhs235*normalslave(1,1);
        lhs(13,10)=-clhs236*normalslave(1,1);
        lhs(13,11)=-clhs237*normalslave(1,1);
        lhs(13,12)=-clhs238*normalslave(1,1);
        lhs(13,13)=-clhs239*normalslave(1,1);
        lhs(13,14)=-clhs240*normalslave(1,1);
        lhs(13,15)=-clhs241*normalslave(1,1);
        lhs(13,16)=-clhs242*normalslave(1,1);
        lhs(13,17)=-clhs243*normalslave(1,1);
        lhs(13,18)=0;
        lhs(13,19)=-clhs161*clhs20;
        lhs(13,20)=0;
        lhs(14,0)=clhs20*clhs226;
        lhs(14,1)=clhs20*clhs227;
        lhs(14,2)=clhs20*clhs228;
        lhs(14,3)=clhs20*clhs229;
        lhs(14,4)=clhs20*clhs230;
        lhs(14,5)=clhs20*clhs231;
        lhs(14,6)=clhs20*clhs232;
        lhs(14,7)=clhs20*clhs233;
        lhs(14,8)=clhs20*clhs234;
        lhs(14,9)=-clhs235*normalslave(1,2);
        lhs(14,10)=-clhs236*normalslave(1,2);
        lhs(14,11)=-clhs237*normalslave(1,2);
        lhs(14,12)=-clhs238*normalslave(1,2);
        lhs(14,13)=-clhs239*normalslave(1,2);
        lhs(14,14)=-clhs240*normalslave(1,2);
        lhs(14,15)=-clhs241*normalslave(1,2);
        lhs(14,16)=-clhs242*normalslave(1,2);
        lhs(14,17)=-clhs243*normalslave(1,2);
        lhs(14,18)=0;
        lhs(14,19)=-clhs162*clhs20;
        lhs(14,20)=0;
        lhs(15,0)=clhs199*clhs22;
        lhs(15,1)=clhs200*clhs22;
        lhs(15,2)=clhs201*clhs22;
        lhs(15,3)=clhs202*clhs22;
        lhs(15,4)=clhs203*clhs22;
        lhs(15,5)=clhs204*clhs22;
        lhs(15,6)=clhs205*clhs22;
        lhs(15,7)=clhs206*clhs22;
        lhs(15,8)=clhs207*clhs22;
        lhs(15,9)=-clhs244*normalslave(1,0);
        lhs(15,10)=-clhs245*normalslave(1,0);
        lhs(15,11)=-clhs246*normalslave(1,0);
        lhs(15,12)=-clhs247*normalslave(1,0);
        lhs(15,13)=-clhs248*normalslave(1,0);
        lhs(15,14)=-clhs249*normalslave(1,0);
        lhs(15,15)=-clhs250*normalslave(1,0);
        lhs(15,16)=-clhs251*normalslave(1,0);
        lhs(15,17)=-clhs252*normalslave(1,0);
        lhs(15,18)=0;
        lhs(15,19)=-clhs160*clhs22;
        lhs(15,20)=0;
        lhs(16,0)=clhs217*clhs22;
        lhs(16,1)=clhs218*clhs22;
        lhs(16,2)=clhs219*clhs22;
        lhs(16,3)=clhs22*clhs220;
        lhs(16,4)=clhs22*clhs221;
        lhs(16,5)=clhs22*clhs222;
        lhs(16,6)=clhs22*clhs223;
        lhs(16,7)=clhs22*clhs224;
        lhs(16,8)=clhs22*clhs225;
        lhs(16,9)=-clhs244*normalslave(1,1);
        lhs(16,10)=-clhs245*normalslave(1,1);
        lhs(16,11)=-clhs246*normalslave(1,1);
        lhs(16,12)=-clhs247*normalslave(1,1);
        lhs(16,13)=-clhs248*normalslave(1,1);
        lhs(16,14)=-clhs249*normalslave(1,1);
        lhs(16,15)=-clhs250*normalslave(1,1);
        lhs(16,16)=-clhs251*normalslave(1,1);
        lhs(16,17)=-clhs252*normalslave(1,1);
        lhs(16,18)=0;
        lhs(16,19)=-clhs161*clhs22;
        lhs(16,20)=0;
        lhs(17,0)=clhs22*clhs226;
        lhs(17,1)=clhs22*clhs227;
        lhs(17,2)=clhs22*clhs228;
        lhs(17,3)=clhs22*clhs229;
        lhs(17,4)=clhs22*clhs230;
        lhs(17,5)=clhs22*clhs231;
        lhs(17,6)=clhs22*clhs232;
        lhs(17,7)=clhs22*clhs233;
        lhs(17,8)=clhs22*clhs234;
        lhs(17,9)=-clhs244*normalslave(1,2);
        lhs(17,10)=-clhs245*normalslave(1,2);
        lhs(17,11)=-clhs246*normalslave(1,2);
        lhs(17,12)=-clhs247*normalslave(1,2);
        lhs(17,13)=-clhs248*normalslave(1,2);
        lhs(17,14)=-clhs249*normalslave(1,2);
        lhs(17,15)=-clhs250*normalslave(1,2);
        lhs(17,16)=-clhs251*normalslave(1,2);
        lhs(17,17)=-clhs252*normalslave(1,2);
        lhs(17,18)=0;
        lhs(17,19)=-clhs162*clhs22;
        lhs(17,20)=0;
        lhs(18,0)=0;
        lhs(18,1)=0;
        lhs(18,2)=0;
        lhs(18,3)=0;
        lhs(18,4)=0;
        lhs(18,5)=0;
        lhs(18,6)=0;
        lhs(18,7)=0;
        lhs(18,8)=0;
        lhs(18,9)=0;
        lhs(18,10)=0;
        lhs(18,11)=0;
        lhs(18,12)=0;
        lhs(18,13)=0;
        lhs(18,14)=0;
        lhs(18,15)=0;
        lhs(18,16)=0;
        lhs(18,17)=0;
        lhs(18,18)=clhs253;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=clhs15*scale_factor;
        lhs(19,1)=clhs34*scale_factor;
        lhs(19,2)=clhs40*scale_factor;
        lhs(19,3)=clhs46*scale_factor;
        lhs(19,4)=clhs52*scale_factor;
        lhs(19,5)=clhs58*scale_factor;
        lhs(19,6)=clhs64*scale_factor;
        lhs(19,7)=clhs70*scale_factor;
        lhs(19,8)=clhs76*scale_factor;
        lhs(19,9)=-clhs85*scale_factor;
        lhs(19,10)=-clhs94*scale_factor;
        lhs(19,11)=-clhs103*scale_factor;
        lhs(19,12)=-clhs112*scale_factor;
        lhs(19,13)=-clhs121*scale_factor;
        lhs(19,14)=-clhs130*scale_factor;
        lhs(19,15)=-clhs139*scale_factor;
        lhs(19,16)=-clhs148*scale_factor;
        lhs(19,17)=-clhs157*scale_factor;
        lhs(19,18)=0;
        lhs(19,19)=0;
        lhs(19,20)=0;
        lhs(20,0)=0;
        lhs(20,1)=0;
        lhs(20,2)=0;
        lhs(20,3)=0;
        lhs(20,4)=0;
        lhs(20,5)=0;
        lhs(20,6)=0;
        lhs(20,7)=0;
        lhs(20,8)=0;
        lhs(20,9)=0;
        lhs(20,10)=0;
        lhs(20,11)=0;
        lhs(20,12)=0;
        lhs(20,13)=0;
        lhs(20,14)=0;
        lhs(20,15)=0;
        lhs(20,16)=0;
        lhs(20,17)=0;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=clhs253;
    }
    else if (rActiveInactive == 6 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(1,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(1,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(1,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*normalslave(1,0)*penalty_parameter;
        const double clhs17 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs18 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs19 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs20 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs21 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs22 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs23 =     normalslave(2,0)*(clhs12*clhs18 + clhs13*clhs20 + clhs14*clhs22 + clhs17) + normalslave(2,1)*(clhs1*clhs18 + clhs20*clhs3 + clhs22*clhs6) + normalslave(2,2)*(clhs10*clhs20 + clhs11*clhs22 + clhs18*clhs9);
        const double clhs24 =     clhs23*normalslave(2,0)*penalty_parameter;
        const double clhs25 =     X1(0,0) + u1(0,0);
        const double clhs26 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs27 =     X1(1,0) + u1(1,0);
        const double clhs28 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs29 =     X1(2,0) + u1(2,0);
        const double clhs30 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs31 =     X1(0,1) + u1(0,1);
        const double clhs32 =     X1(1,1) + u1(1,1);
        const double clhs33 =     X1(2,1) + u1(2,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs25*clhs26 + clhs27*clhs28 + clhs29*clhs30) + normalslave(1,1)*(-clhs0*clhs1 + clhs26*clhs31 + clhs28*clhs32 - clhs3*clhs4 + clhs30*clhs33 - clhs6*clhs7) + normalslave(1,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs26*clhs34 + clhs28*clhs35 + clhs30*clhs36));
        const double clhs38 =     clhs37*normalslave(1,0);
        const double clhs39 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs40 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs41 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs42 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs12*clhs17 - clhs13*clhs19 - clhs14*clhs21 + clhs25*clhs39 + clhs27*clhs40 + clhs29*clhs41) + normalslave(2,1)*(-clhs1*clhs17 - clhs19*clhs3 - clhs21*clhs6 + clhs31*clhs39 + clhs32*clhs40 + clhs33*clhs41) + normalslave(2,2)*(-clhs10*clhs19 - clhs11*clhs21 - clhs17*clhs9 + clhs34*clhs39 + clhs35*clhs40 + clhs36*clhs41));
        const double clhs43 =     clhs42*normalslave(2,0);
        const double clhs44 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs45 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs46 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs47 =     normalslave(1,0)*(clhs12*clhs44 + clhs13*clhs45 + clhs14*clhs46) + normalslave(1,1)*(clhs0 + clhs1*clhs44 + clhs3*clhs45 + clhs46*clhs6) + normalslave(1,2)*(clhs10*clhs45 + clhs11*clhs46 + clhs44*clhs9);
        const double clhs48 =     clhs47*normalslave(1,0)*penalty_parameter;
        const double clhs49 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs50 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs51 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs52 =     normalslave(2,0)*(clhs12*clhs49 + clhs13*clhs50 + clhs14*clhs51) + normalslave(2,1)*(clhs1*clhs49 + clhs17 + clhs3*clhs50 + clhs51*clhs6) + normalslave(2,2)*(clhs10*clhs50 + clhs11*clhs51 + clhs49*clhs9);
        const double clhs53 =     clhs52*normalslave(2,0)*penalty_parameter;
        const double clhs54 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs55 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs56 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs57 =     normalslave(1,0)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56) + normalslave(1,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6) + normalslave(1,2)*(clhs0 + clhs10*clhs55 + clhs11*clhs56 + clhs54*clhs9);
        const double clhs58 =     clhs57*normalslave(1,0)*penalty_parameter;
        const double clhs59 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs60 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs61 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs62 =     normalslave(2,0)*(clhs12*clhs59 + clhs13*clhs60 + clhs14*clhs61) + normalslave(2,1)*(clhs1*clhs59 + clhs3*clhs60 + clhs6*clhs61) + normalslave(2,2)*(clhs10*clhs60 + clhs11*clhs61 + clhs17 + clhs59*clhs9);
        const double clhs63 =     clhs62*normalslave(2,0)*penalty_parameter;
        const double clhs64 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs65 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs66 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs67 =     normalslave(1,0)*(clhs12*clhs64 + clhs13*clhs65 + clhs14*clhs66 + clhs4) + normalslave(1,1)*(clhs1*clhs64 + clhs3*clhs65 + clhs6*clhs66) + normalslave(1,2)*(clhs10*clhs65 + clhs11*clhs66 + clhs64*clhs9);
        const double clhs68 =     clhs67*normalslave(1,0)*penalty_parameter;
        const double clhs69 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs70 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs71 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs72 =     normalslave(2,0)*(clhs12*clhs69 + clhs13*clhs70 + clhs14*clhs71 + clhs19) + normalslave(2,1)*(clhs1*clhs69 + clhs3*clhs70 + clhs6*clhs71) + normalslave(2,2)*(clhs10*clhs70 + clhs11*clhs71 + clhs69*clhs9);
        const double clhs73 =     clhs72*normalslave(2,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs75 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs76 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs77 =     normalslave(1,0)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76) + normalslave(1,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs4 + clhs6*clhs76) + normalslave(1,2)*(clhs10*clhs75 + clhs11*clhs76 + clhs74*clhs9);
        const double clhs78 =     clhs77*normalslave(1,0)*penalty_parameter;
        const double clhs79 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs80 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs81 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs82 =     normalslave(2,0)*(clhs12*clhs79 + clhs13*clhs80 + clhs14*clhs81) + normalslave(2,1)*(clhs1*clhs79 + clhs19 + clhs3*clhs80 + clhs6*clhs81) + normalslave(2,2)*(clhs10*clhs80 + clhs11*clhs81 + clhs79*clhs9);
        const double clhs83 =     clhs82*normalslave(2,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs85 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs86 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs87 =     normalslave(1,0)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86) + normalslave(1,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs6*clhs86) + normalslave(1,2)*(clhs10*clhs85 + clhs11*clhs86 + clhs4 + clhs84*clhs9);
        const double clhs88 =     clhs87*normalslave(1,0)*penalty_parameter;
        const double clhs89 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs90 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs91 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs92 =     normalslave(2,0)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91) + normalslave(2,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91) + normalslave(2,2)*(clhs10*clhs90 + clhs11*clhs91 + clhs19 + clhs89*clhs9);
        const double clhs93 =     clhs92*normalslave(2,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs95 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs96 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs97 =     normalslave(1,0)*(clhs12*clhs94 + clhs13*clhs95 + clhs14*clhs96 + clhs7) + normalslave(1,1)*(clhs1*clhs94 + clhs3*clhs95 + clhs6*clhs96) + normalslave(1,2)*(clhs10*clhs95 + clhs11*clhs96 + clhs9*clhs94);
        const double clhs98 =     clhs97*normalslave(1,0)*penalty_parameter;
        const double clhs99 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs100 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs101 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs102 =     normalslave(2,0)*(clhs100*clhs13 + clhs101*clhs14 + clhs12*clhs99 + clhs21) + normalslave(2,1)*(clhs1*clhs99 + clhs100*clhs3 + clhs101*clhs6) + normalslave(2,2)*(clhs10*clhs100 + clhs101*clhs11 + clhs9*clhs99);
        const double clhs103 =     clhs102*normalslave(2,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs105 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs106 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs107 =     normalslave(1,0)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14) + normalslave(1,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs7) + normalslave(1,2)*(clhs10*clhs105 + clhs104*clhs9 + clhs106*clhs11);
        const double clhs108 =     clhs107*normalslave(1,0)*penalty_parameter;
        const double clhs109 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs110 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs111 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs112 =     normalslave(2,0)*(clhs109*clhs12 + clhs110*clhs13 + clhs111*clhs14) + normalslave(2,1)*(clhs1*clhs109 + clhs110*clhs3 + clhs111*clhs6 + clhs21) + normalslave(2,2)*(clhs10*clhs110 + clhs109*clhs9 + clhs11*clhs111);
        const double clhs113 =     clhs112*normalslave(2,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs115 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs116 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs117 =     normalslave(1,0)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14) + normalslave(1,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6) + normalslave(1,2)*(clhs10*clhs115 + clhs11*clhs116 + clhs114*clhs9 + clhs7);
        const double clhs118 =     clhs117*normalslave(1,0)*penalty_parameter;
        const double clhs119 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs120 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs121 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs122 =     normalslave(2,0)*(clhs119*clhs12 + clhs120*clhs13 + clhs121*clhs14) + normalslave(2,1)*(clhs1*clhs119 + clhs120*clhs3 + clhs121*clhs6) + normalslave(2,2)*(clhs10*clhs120 + clhs11*clhs121 + clhs119*clhs9 + clhs21);
        const double clhs123 =     clhs122*normalslave(2,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs125 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs126 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs127 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs128 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs129 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs130 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs131 =     normalslave(1,0)*(-clhs12*clhs124 + clhs126*clhs25 + clhs127*clhs27 + clhs128*clhs29 - clhs129*clhs13 - clhs130*clhs14 + clhs26) + normalslave(1,1)*(-clhs1*clhs124 + clhs126*clhs31 + clhs127*clhs32 + clhs128*clhs33 - clhs129*clhs3 - clhs130*clhs6) + normalslave(1,2)*(-clhs10*clhs129 - clhs11*clhs130 - clhs124*clhs9 + clhs126*clhs34 + clhs127*clhs35 + clhs128*clhs36);
        const double clhs132 =     clhs131*normalslave(1,0)*penalty_parameter;
        const double clhs133 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs134 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs135 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs136 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs137 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs138 =     normalslave(2,0)*(-clhs12*clhs125 - clhs13*clhs136 + clhs133*clhs25 + clhs134*clhs27 + clhs135*clhs29 - clhs137*clhs14 + clhs39) + normalslave(2,1)*(-clhs1*clhs125 + clhs133*clhs31 + clhs134*clhs32 + clhs135*clhs33 - clhs136*clhs3 - clhs137*clhs6) + normalslave(2,2)*(-clhs10*clhs136 - clhs11*clhs137 - clhs125*clhs9 + clhs133*clhs34 + clhs134*clhs35 + clhs135*clhs36);
        const double clhs139 =     clhs138*normalslave(2,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs141 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs142 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs143 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs144 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs145 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs146 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs147 =     normalslave(1,0)*(-clhs12*clhs140 - clhs13*clhs145 - clhs14*clhs146 + clhs142*clhs25 + clhs143*clhs27 + clhs144*clhs29) + normalslave(1,1)*(-clhs1*clhs140 + clhs142*clhs31 + clhs143*clhs32 + clhs144*clhs33 - clhs145*clhs3 - clhs146*clhs6 + clhs26) + normalslave(1,2)*(-clhs10*clhs145 - clhs11*clhs146 - clhs140*clhs9 + clhs142*clhs34 + clhs143*clhs35 + clhs144*clhs36);
        const double clhs148 =     clhs147*normalslave(1,0)*penalty_parameter;
        const double clhs149 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs150 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs151 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs152 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs153 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs154 =     normalslave(2,0)*(-clhs12*clhs141 - clhs13*clhs152 - clhs14*clhs153 + clhs149*clhs25 + clhs150*clhs27 + clhs151*clhs29) + normalslave(2,1)*(-clhs1*clhs141 + clhs149*clhs31 + clhs150*clhs32 + clhs151*clhs33 - clhs152*clhs3 - clhs153*clhs6 + clhs39) + normalslave(2,2)*(-clhs10*clhs152 - clhs11*clhs153 - clhs141*clhs9 + clhs149*clhs34 + clhs150*clhs35 + clhs151*clhs36);
        const double clhs155 =     clhs154*normalslave(2,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs157 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs158 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs159 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs160 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs161 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs162 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs163 =     normalslave(1,0)*(-clhs12*clhs156 - clhs13*clhs161 - clhs14*clhs162 + clhs158*clhs25 + clhs159*clhs27 + clhs160*clhs29) + normalslave(1,1)*(-clhs1*clhs156 + clhs158*clhs31 + clhs159*clhs32 + clhs160*clhs33 - clhs161*clhs3 - clhs162*clhs6) + normalslave(1,2)*(-clhs10*clhs161 - clhs11*clhs162 - clhs156*clhs9 + clhs158*clhs34 + clhs159*clhs35 + clhs160*clhs36 + clhs26);
        const double clhs164 =     clhs163*normalslave(1,0)*penalty_parameter;
        const double clhs165 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs166 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs167 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs168 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs169 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs170 =     normalslave(2,0)*(-clhs12*clhs157 - clhs13*clhs168 - clhs14*clhs169 + clhs165*clhs25 + clhs166*clhs27 + clhs167*clhs29) + normalslave(2,1)*(-clhs1*clhs157 + clhs165*clhs31 + clhs166*clhs32 + clhs167*clhs33 - clhs168*clhs3 - clhs169*clhs6) + normalslave(2,2)*(-clhs10*clhs168 - clhs11*clhs169 - clhs157*clhs9 + clhs165*clhs34 + clhs166*clhs35 + clhs167*clhs36 + clhs39);
        const double clhs171 =     clhs170*normalslave(2,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs173 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs174 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs175 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs176 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs177 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs178 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs179 =     normalslave(1,0)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 + clhs174*clhs25 + clhs175*clhs27 + clhs176*clhs29 + clhs28) + normalslave(1,1)*(-clhs1*clhs172 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6) + normalslave(1,2)*(-clhs10*clhs177 - clhs11*clhs178 - clhs172*clhs9 + clhs174*clhs34 + clhs175*clhs35 + clhs176*clhs36);
        const double clhs180 =     clhs179*normalslave(1,0)*penalty_parameter;
        const double clhs181 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs182 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs183 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs184 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs185 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs186 =     normalslave(2,0)*(-clhs12*clhs173 - clhs13*clhs184 - clhs14*clhs185 + clhs181*clhs25 + clhs182*clhs27 + clhs183*clhs29 + clhs40) + normalslave(2,1)*(-clhs1*clhs173 + clhs181*clhs31 + clhs182*clhs32 + clhs183*clhs33 - clhs184*clhs3 - clhs185*clhs6) + normalslave(2,2)*(-clhs10*clhs184 - clhs11*clhs185 - clhs173*clhs9 + clhs181*clhs34 + clhs182*clhs35 + clhs183*clhs36);
        const double clhs187 =     clhs186*normalslave(2,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs189 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs190 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs191 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs192 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs193 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs194 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs195 =     normalslave(1,0)*(-clhs12*clhs188 - clhs13*clhs193 - clhs14*clhs194 + clhs190*clhs25 + clhs191*clhs27 + clhs192*clhs29) + normalslave(1,1)*(-clhs1*clhs188 + clhs190*clhs31 + clhs191*clhs32 + clhs192*clhs33 - clhs193*clhs3 - clhs194*clhs6 + clhs28) + normalslave(1,2)*(-clhs10*clhs193 - clhs11*clhs194 - clhs188*clhs9 + clhs190*clhs34 + clhs191*clhs35 + clhs192*clhs36);
        const double clhs196 =     clhs195*normalslave(1,0)*penalty_parameter;
        const double clhs197 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs198 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs199 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs200 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs201 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs202 =     normalslave(2,0)*(-clhs12*clhs189 - clhs13*clhs200 - clhs14*clhs201 + clhs197*clhs25 + clhs198*clhs27 + clhs199*clhs29) + normalslave(2,1)*(-clhs1*clhs189 + clhs197*clhs31 + clhs198*clhs32 + clhs199*clhs33 - clhs200*clhs3 - clhs201*clhs6 + clhs40) + normalslave(2,2)*(-clhs10*clhs200 - clhs11*clhs201 - clhs189*clhs9 + clhs197*clhs34 + clhs198*clhs35 + clhs199*clhs36);
        const double clhs203 =     clhs202*normalslave(2,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs205 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs206 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs207 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs208 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs209 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs210 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs211 =     normalslave(1,0)*(-clhs12*clhs204 - clhs13*clhs209 - clhs14*clhs210 + clhs206*clhs25 + clhs207*clhs27 + clhs208*clhs29) + normalslave(1,1)*(-clhs1*clhs204 + clhs206*clhs31 + clhs207*clhs32 + clhs208*clhs33 - clhs209*clhs3 - clhs210*clhs6) + normalslave(1,2)*(-clhs10*clhs209 - clhs11*clhs210 - clhs204*clhs9 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs28);
        const double clhs212 =     clhs211*normalslave(1,0)*penalty_parameter;
        const double clhs213 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs214 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs215 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs216 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs217 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs218 =     normalslave(2,0)*(-clhs12*clhs205 - clhs13*clhs216 - clhs14*clhs217 + clhs213*clhs25 + clhs214*clhs27 + clhs215*clhs29) + normalslave(2,1)*(-clhs1*clhs205 + clhs213*clhs31 + clhs214*clhs32 + clhs215*clhs33 - clhs216*clhs3 - clhs217*clhs6) + normalslave(2,2)*(-clhs10*clhs216 - clhs11*clhs217 - clhs205*clhs9 + clhs213*clhs34 + clhs214*clhs35 + clhs215*clhs36 + clhs40);
        const double clhs219 =     clhs218*normalslave(2,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs221 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs222 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs223 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs224 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs225 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs226 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs227 =     normalslave(1,0)*(-clhs12*clhs220 - clhs13*clhs225 - clhs14*clhs226 + clhs222*clhs25 + clhs223*clhs27 + clhs224*clhs29 + clhs30) + normalslave(1,1)*(-clhs1*clhs220 + clhs222*clhs31 + clhs223*clhs32 + clhs224*clhs33 - clhs225*clhs3 - clhs226*clhs6) + normalslave(1,2)*(-clhs10*clhs225 - clhs11*clhs226 - clhs220*clhs9 + clhs222*clhs34 + clhs223*clhs35 + clhs224*clhs36);
        const double clhs228 =     clhs227*normalslave(1,0)*penalty_parameter;
        const double clhs229 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs230 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs231 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs232 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs233 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs234 =     normalslave(2,0)*(-clhs12*clhs221 - clhs13*clhs232 - clhs14*clhs233 + clhs229*clhs25 + clhs230*clhs27 + clhs231*clhs29 + clhs41) + normalslave(2,1)*(-clhs1*clhs221 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6) + normalslave(2,2)*(-clhs10*clhs232 - clhs11*clhs233 - clhs221*clhs9 + clhs229*clhs34 + clhs230*clhs35 + clhs231*clhs36);
        const double clhs235 =     clhs234*normalslave(2,0)*penalty_parameter;
        const double clhs236 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs237 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs238 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs239 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs240 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs241 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs242 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs243 =     normalslave(1,0)*(-clhs12*clhs236 - clhs13*clhs241 - clhs14*clhs242 + clhs238*clhs25 + clhs239*clhs27 + clhs240*clhs29) + normalslave(1,1)*(-clhs1*clhs236 + clhs238*clhs31 + clhs239*clhs32 + clhs240*clhs33 - clhs241*clhs3 - clhs242*clhs6 + clhs30) + normalslave(1,2)*(-clhs10*clhs241 - clhs11*clhs242 - clhs236*clhs9 + clhs238*clhs34 + clhs239*clhs35 + clhs240*clhs36);
        const double clhs244 =     clhs243*normalslave(1,0)*penalty_parameter;
        const double clhs245 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs246 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs247 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs248 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs249 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs250 =     normalslave(2,0)*(-clhs12*clhs237 - clhs13*clhs248 - clhs14*clhs249 + clhs245*clhs25 + clhs246*clhs27 + clhs247*clhs29) + normalslave(2,1)*(-clhs1*clhs237 + clhs245*clhs31 + clhs246*clhs32 + clhs247*clhs33 - clhs248*clhs3 - clhs249*clhs6 + clhs41) + normalslave(2,2)*(-clhs10*clhs248 - clhs11*clhs249 - clhs237*clhs9 + clhs245*clhs34 + clhs246*clhs35 + clhs247*clhs36);
        const double clhs251 =     clhs250*normalslave(2,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs253 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs254 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs255 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs256 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs257 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs258 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs259 =     normalslave(1,0)*(-clhs12*clhs252 - clhs13*clhs257 - clhs14*clhs258 + clhs25*clhs254 + clhs255*clhs27 + clhs256*clhs29) + normalslave(1,1)*(-clhs1*clhs252 + clhs254*clhs31 + clhs255*clhs32 + clhs256*clhs33 - clhs257*clhs3 - clhs258*clhs6) + normalslave(1,2)*(-clhs10*clhs257 - clhs11*clhs258 - clhs252*clhs9 + clhs254*clhs34 + clhs255*clhs35 + clhs256*clhs36 + clhs30);
        const double clhs260 =     clhs259*normalslave(1,0)*penalty_parameter;
        const double clhs261 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs262 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs263 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs264 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs265 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs266 =     normalslave(2,0)*(-clhs12*clhs253 - clhs13*clhs264 - clhs14*clhs265 + clhs25*clhs261 + clhs262*clhs27 + clhs263*clhs29) + normalslave(2,1)*(-clhs1*clhs253 + clhs261*clhs31 + clhs262*clhs32 + clhs263*clhs33 - clhs264*clhs3 - clhs265*clhs6) + normalslave(2,2)*(-clhs10*clhs264 - clhs11*clhs265 - clhs253*clhs9 + clhs261*clhs34 + clhs262*clhs35 + clhs263*clhs36 + clhs41);
        const double clhs267 =     clhs266*normalslave(2,0)*penalty_parameter;
        const double clhs268 =     normalslave(1,0)*scale_factor;
        const double clhs269 =     normalslave(2,0)*scale_factor;
        const double clhs270 =     clhs15*normalslave(1,1)*penalty_parameter;
        const double clhs271 =     clhs23*normalslave(2,1)*penalty_parameter;
        const double clhs272 =     clhs37*normalslave(1,1);
        const double clhs273 =     clhs42*normalslave(2,1);
        const double clhs274 =     clhs47*normalslave(1,1)*penalty_parameter;
        const double clhs275 =     clhs52*normalslave(2,1)*penalty_parameter;
        const double clhs276 =     clhs57*normalslave(1,1)*penalty_parameter;
        const double clhs277 =     clhs62*normalslave(2,1)*penalty_parameter;
        const double clhs278 =     clhs67*normalslave(1,1)*penalty_parameter;
        const double clhs279 =     clhs72*normalslave(2,1)*penalty_parameter;
        const double clhs280 =     clhs77*normalslave(1,1)*penalty_parameter;
        const double clhs281 =     clhs82*normalslave(2,1)*penalty_parameter;
        const double clhs282 =     clhs87*normalslave(1,1)*penalty_parameter;
        const double clhs283 =     clhs92*normalslave(2,1)*penalty_parameter;
        const double clhs284 =     clhs97*normalslave(1,1)*penalty_parameter;
        const double clhs285 =     clhs102*normalslave(2,1)*penalty_parameter;
        const double clhs286 =     clhs107*normalslave(1,1)*penalty_parameter;
        const double clhs287 =     clhs112*normalslave(2,1)*penalty_parameter;
        const double clhs288 =     clhs117*normalslave(1,1)*penalty_parameter;
        const double clhs289 =     clhs122*normalslave(2,1)*penalty_parameter;
        const double clhs290 =     clhs131*normalslave(1,1)*penalty_parameter;
        const double clhs291 =     clhs138*normalslave(2,1)*penalty_parameter;
        const double clhs292 =     clhs147*normalslave(1,1)*penalty_parameter;
        const double clhs293 =     clhs154*normalslave(2,1)*penalty_parameter;
        const double clhs294 =     clhs163*normalslave(1,1)*penalty_parameter;
        const double clhs295 =     clhs170*normalslave(2,1)*penalty_parameter;
        const double clhs296 =     clhs179*normalslave(1,1)*penalty_parameter;
        const double clhs297 =     clhs186*normalslave(2,1)*penalty_parameter;
        const double clhs298 =     clhs195*normalslave(1,1)*penalty_parameter;
        const double clhs299 =     clhs202*normalslave(2,1)*penalty_parameter;
        const double clhs300 =     clhs211*normalslave(1,1)*penalty_parameter;
        const double clhs301 =     clhs218*normalslave(2,1)*penalty_parameter;
        const double clhs302 =     clhs227*normalslave(1,1)*penalty_parameter;
        const double clhs303 =     clhs234*normalslave(2,1)*penalty_parameter;
        const double clhs304 =     clhs243*normalslave(1,1)*penalty_parameter;
        const double clhs305 =     clhs250*normalslave(2,1)*penalty_parameter;
        const double clhs306 =     clhs259*normalslave(1,1)*penalty_parameter;
        const double clhs307 =     clhs266*normalslave(2,1)*penalty_parameter;
        const double clhs308 =     normalslave(1,1)*scale_factor;
        const double clhs309 =     normalslave(2,1)*scale_factor;
        const double clhs310 =     clhs15*normalslave(1,2)*penalty_parameter;
        const double clhs311 =     clhs23*normalslave(2,2)*penalty_parameter;
        const double clhs312 =     clhs37*normalslave(1,2);
        const double clhs313 =     clhs42*normalslave(2,2);
        const double clhs314 =     clhs47*normalslave(1,2)*penalty_parameter;
        const double clhs315 =     clhs52*normalslave(2,2)*penalty_parameter;
        const double clhs316 =     clhs57*normalslave(1,2)*penalty_parameter;
        const double clhs317 =     clhs62*normalslave(2,2)*penalty_parameter;
        const double clhs318 =     clhs67*normalslave(1,2)*penalty_parameter;
        const double clhs319 =     clhs72*normalslave(2,2)*penalty_parameter;
        const double clhs320 =     clhs77*normalslave(1,2)*penalty_parameter;
        const double clhs321 =     clhs82*normalslave(2,2)*penalty_parameter;
        const double clhs322 =     clhs87*normalslave(1,2)*penalty_parameter;
        const double clhs323 =     clhs92*normalslave(2,2)*penalty_parameter;
        const double clhs324 =     clhs97*normalslave(1,2)*penalty_parameter;
        const double clhs325 =     clhs102*normalslave(2,2)*penalty_parameter;
        const double clhs326 =     clhs107*normalslave(1,2)*penalty_parameter;
        const double clhs327 =     clhs112*normalslave(2,2)*penalty_parameter;
        const double clhs328 =     clhs117*normalslave(1,2)*penalty_parameter;
        const double clhs329 =     clhs122*normalslave(2,2)*penalty_parameter;
        const double clhs330 =     clhs131*normalslave(1,2)*penalty_parameter;
        const double clhs331 =     clhs138*normalslave(2,2)*penalty_parameter;
        const double clhs332 =     clhs147*normalslave(1,2)*penalty_parameter;
        const double clhs333 =     clhs154*normalslave(2,2)*penalty_parameter;
        const double clhs334 =     clhs163*normalslave(1,2)*penalty_parameter;
        const double clhs335 =     clhs170*normalslave(2,2)*penalty_parameter;
        const double clhs336 =     clhs179*normalslave(1,2)*penalty_parameter;
        const double clhs337 =     clhs186*normalslave(2,2)*penalty_parameter;
        const double clhs338 =     clhs195*normalslave(1,2)*penalty_parameter;
        const double clhs339 =     clhs202*normalslave(2,2)*penalty_parameter;
        const double clhs340 =     clhs211*normalslave(1,2)*penalty_parameter;
        const double clhs341 =     clhs218*normalslave(2,2)*penalty_parameter;
        const double clhs342 =     clhs227*normalslave(1,2)*penalty_parameter;
        const double clhs343 =     clhs234*normalslave(2,2)*penalty_parameter;
        const double clhs344 =     clhs243*normalslave(1,2)*penalty_parameter;
        const double clhs345 =     clhs250*normalslave(2,2)*penalty_parameter;
        const double clhs346 =     clhs259*normalslave(1,2)*penalty_parameter;
        const double clhs347 =     clhs266*normalslave(2,2)*penalty_parameter;
        const double clhs348 =     normalslave(1,2)*scale_factor;
        const double clhs349 =     normalslave(2,2)*scale_factor;
        const double clhs350 =     clhs15*normalslave(1,0);
        const double clhs351 =     clhs23*normalslave(2,0);
        const double clhs352 =     clhs47*normalslave(1,0);
        const double clhs353 =     clhs52*normalslave(2,0);
        const double clhs354 =     clhs57*normalslave(1,0);
        const double clhs355 =     clhs62*normalslave(2,0);
        const double clhs356 =     clhs67*normalslave(1,0);
        const double clhs357 =     clhs72*normalslave(2,0);
        const double clhs358 =     clhs77*normalslave(1,0);
        const double clhs359 =     clhs82*normalslave(2,0);
        const double clhs360 =     clhs87*normalslave(1,0);
        const double clhs361 =     clhs92*normalslave(2,0);
        const double clhs362 =     clhs97*normalslave(1,0);
        const double clhs363 =     clhs102*normalslave(2,0);
        const double clhs364 =     clhs107*normalslave(1,0);
        const double clhs365 =     clhs112*normalslave(2,0);
        const double clhs366 =     clhs117*normalslave(1,0);
        const double clhs367 =     clhs122*normalslave(2,0);
        const double clhs368 =     clhs15*normalslave(1,1);
        const double clhs369 =     clhs23*normalslave(2,1);
        const double clhs370 =     clhs47*normalslave(1,1);
        const double clhs371 =     clhs52*normalslave(2,1);
        const double clhs372 =     clhs57*normalslave(1,1);
        const double clhs373 =     clhs62*normalslave(2,1);
        const double clhs374 =     clhs67*normalslave(1,1);
        const double clhs375 =     clhs72*normalslave(2,1);
        const double clhs376 =     clhs77*normalslave(1,1);
        const double clhs377 =     clhs82*normalslave(2,1);
        const double clhs378 =     clhs87*normalslave(1,1);
        const double clhs379 =     clhs92*normalslave(2,1);
        const double clhs380 =     clhs97*normalslave(1,1);
        const double clhs381 =     clhs102*normalslave(2,1);
        const double clhs382 =     clhs107*normalslave(1,1);
        const double clhs383 =     clhs112*normalslave(2,1);
        const double clhs384 =     clhs117*normalslave(1,1);
        const double clhs385 =     clhs122*normalslave(2,1);
        const double clhs386 =     clhs15*normalslave(1,2);
        const double clhs387 =     clhs23*normalslave(2,2);
        const double clhs388 =     clhs47*normalslave(1,2);
        const double clhs389 =     clhs52*normalslave(2,2);
        const double clhs390 =     clhs57*normalslave(1,2);
        const double clhs391 =     clhs62*normalslave(2,2);
        const double clhs392 =     clhs67*normalslave(1,2);
        const double clhs393 =     clhs72*normalslave(2,2);
        const double clhs394 =     clhs77*normalslave(1,2);
        const double clhs395 =     clhs82*normalslave(2,2);
        const double clhs396 =     clhs87*normalslave(1,2);
        const double clhs397 =     clhs92*normalslave(2,2);
        const double clhs398 =     clhs97*normalslave(1,2);
        const double clhs399 =     clhs102*normalslave(2,2);
        const double clhs400 =     clhs107*normalslave(1,2);
        const double clhs401 =     clhs112*normalslave(2,2);
        const double clhs402 =     clhs117*normalslave(1,2);
        const double clhs403 =     clhs122*normalslave(2,2);
    
        lhs(0,0)=-clhs0*clhs16 - clhs17*clhs24 + clhs18*clhs43 + clhs2*clhs38;
        lhs(0,1)=-clhs0*clhs48 - clhs17*clhs53 + clhs38*clhs44 + clhs43*clhs49;
        lhs(0,2)=-clhs0*clhs58 - clhs17*clhs63 + clhs38*clhs54 + clhs43*clhs59;
        lhs(0,3)=-clhs0*clhs68 - clhs17*clhs73 + clhs38*clhs64 + clhs43*clhs69;
        lhs(0,4)=-clhs0*clhs78 - clhs17*clhs83 + clhs38*clhs74 + clhs43*clhs79;
        lhs(0,5)=-clhs0*clhs88 - clhs17*clhs93 + clhs38*clhs84 + clhs43*clhs89;
        lhs(0,6)=-clhs0*clhs98 - clhs103*clhs17 + clhs38*clhs94 + clhs43*clhs99;
        lhs(0,7)=-clhs0*clhs108 + clhs104*clhs38 + clhs109*clhs43 - clhs113*clhs17;
        lhs(0,8)=-clhs0*clhs118 + clhs114*clhs38 + clhs119*clhs43 - clhs123*clhs17;
        lhs(0,9)=clhs0*clhs132 + clhs124*clhs38 + clhs125*clhs43 + clhs139*clhs17;
        lhs(0,10)=clhs0*clhs148 + clhs140*clhs38 + clhs141*clhs43 + clhs155*clhs17;
        lhs(0,11)=clhs0*clhs164 + clhs156*clhs38 + clhs157*clhs43 + clhs17*clhs171;
        lhs(0,12)=clhs0*clhs180 + clhs17*clhs187 + clhs172*clhs38 + clhs173*clhs43;
        lhs(0,13)=clhs0*clhs196 + clhs17*clhs203 + clhs188*clhs38 + clhs189*clhs43;
        lhs(0,14)=clhs0*clhs212 + clhs17*clhs219 + clhs204*clhs38 + clhs205*clhs43;
        lhs(0,15)=clhs0*clhs228 + clhs17*clhs235 + clhs220*clhs38 + clhs221*clhs43;
        lhs(0,16)=clhs0*clhs244 + clhs17*clhs251 + clhs236*clhs38 + clhs237*clhs43;
        lhs(0,17)=clhs0*clhs260 + clhs17*clhs267 + clhs252*clhs38 + clhs253*clhs43;
        lhs(0,18)=0;
        lhs(0,19)=clhs0*clhs268;
        lhs(0,20)=clhs17*clhs269;
        lhs(1,0)=-clhs0*clhs270 - clhs17*clhs271 + clhs18*clhs273 + clhs2*clhs272;
        lhs(1,1)=-clhs0*clhs274 - clhs17*clhs275 + clhs272*clhs44 + clhs273*clhs49;
        lhs(1,2)=-clhs0*clhs276 - clhs17*clhs277 + clhs272*clhs54 + clhs273*clhs59;
        lhs(1,3)=-clhs0*clhs278 - clhs17*clhs279 + clhs272*clhs64 + clhs273*clhs69;
        lhs(1,4)=-clhs0*clhs280 - clhs17*clhs281 + clhs272*clhs74 + clhs273*clhs79;
        lhs(1,5)=-clhs0*clhs282 - clhs17*clhs283 + clhs272*clhs84 + clhs273*clhs89;
        lhs(1,6)=-clhs0*clhs284 - clhs17*clhs285 + clhs272*clhs94 + clhs273*clhs99;
        lhs(1,7)=-clhs0*clhs286 + clhs104*clhs272 + clhs109*clhs273 - clhs17*clhs287;
        lhs(1,8)=-clhs0*clhs288 + clhs114*clhs272 + clhs119*clhs273 - clhs17*clhs289;
        lhs(1,9)=clhs0*clhs290 + clhs124*clhs272 + clhs125*clhs273 + clhs17*clhs291;
        lhs(1,10)=clhs0*clhs292 + clhs140*clhs272 + clhs141*clhs273 + clhs17*clhs293;
        lhs(1,11)=clhs0*clhs294 + clhs156*clhs272 + clhs157*clhs273 + clhs17*clhs295;
        lhs(1,12)=clhs0*clhs296 + clhs17*clhs297 + clhs172*clhs272 + clhs173*clhs273;
        lhs(1,13)=clhs0*clhs298 + clhs17*clhs299 + clhs188*clhs272 + clhs189*clhs273;
        lhs(1,14)=clhs0*clhs300 + clhs17*clhs301 + clhs204*clhs272 + clhs205*clhs273;
        lhs(1,15)=clhs0*clhs302 + clhs17*clhs303 + clhs220*clhs272 + clhs221*clhs273;
        lhs(1,16)=clhs0*clhs304 + clhs17*clhs305 + clhs236*clhs272 + clhs237*clhs273;
        lhs(1,17)=clhs0*clhs306 + clhs17*clhs307 + clhs252*clhs272 + clhs253*clhs273;
        lhs(1,18)=0;
        lhs(1,19)=clhs0*clhs308;
        lhs(1,20)=clhs17*clhs309;
        lhs(2,0)=-clhs0*clhs310 - clhs17*clhs311 + clhs18*clhs313 + clhs2*clhs312;
        lhs(2,1)=-clhs0*clhs314 - clhs17*clhs315 + clhs312*clhs44 + clhs313*clhs49;
        lhs(2,2)=-clhs0*clhs316 - clhs17*clhs317 + clhs312*clhs54 + clhs313*clhs59;
        lhs(2,3)=-clhs0*clhs318 - clhs17*clhs319 + clhs312*clhs64 + clhs313*clhs69;
        lhs(2,4)=-clhs0*clhs320 - clhs17*clhs321 + clhs312*clhs74 + clhs313*clhs79;
        lhs(2,5)=-clhs0*clhs322 - clhs17*clhs323 + clhs312*clhs84 + clhs313*clhs89;
        lhs(2,6)=-clhs0*clhs324 - clhs17*clhs325 + clhs312*clhs94 + clhs313*clhs99;
        lhs(2,7)=-clhs0*clhs326 + clhs104*clhs312 + clhs109*clhs313 - clhs17*clhs327;
        lhs(2,8)=-clhs0*clhs328 + clhs114*clhs312 + clhs119*clhs313 - clhs17*clhs329;
        lhs(2,9)=clhs0*clhs330 + clhs124*clhs312 + clhs125*clhs313 + clhs17*clhs331;
        lhs(2,10)=clhs0*clhs332 + clhs140*clhs312 + clhs141*clhs313 + clhs17*clhs333;
        lhs(2,11)=clhs0*clhs334 + clhs156*clhs312 + clhs157*clhs313 + clhs17*clhs335;
        lhs(2,12)=clhs0*clhs336 + clhs17*clhs337 + clhs172*clhs312 + clhs173*clhs313;
        lhs(2,13)=clhs0*clhs338 + clhs17*clhs339 + clhs188*clhs312 + clhs189*clhs313;
        lhs(2,14)=clhs0*clhs340 + clhs17*clhs341 + clhs204*clhs312 + clhs205*clhs313;
        lhs(2,15)=clhs0*clhs342 + clhs17*clhs343 + clhs220*clhs312 + clhs221*clhs313;
        lhs(2,16)=clhs0*clhs344 + clhs17*clhs345 + clhs236*clhs312 + clhs237*clhs313;
        lhs(2,17)=clhs0*clhs346 + clhs17*clhs347 + clhs252*clhs312 + clhs253*clhs313;
        lhs(2,18)=0;
        lhs(2,19)=clhs0*clhs348;
        lhs(2,20)=clhs17*clhs349;
        lhs(3,0)=-clhs16*clhs4 - clhs19*clhs24 + clhs20*clhs43 + clhs38*clhs5;
        lhs(3,1)=-clhs19*clhs53 + clhs38*clhs45 - clhs4*clhs48 + clhs43*clhs50;
        lhs(3,2)=-clhs19*clhs63 + clhs38*clhs55 - clhs4*clhs58 + clhs43*clhs60;
        lhs(3,3)=-clhs19*clhs73 + clhs38*clhs65 - clhs4*clhs68 + clhs43*clhs70;
        lhs(3,4)=-clhs19*clhs83 + clhs38*clhs75 - clhs4*clhs78 + clhs43*clhs80;
        lhs(3,5)=-clhs19*clhs93 + clhs38*clhs85 - clhs4*clhs88 + clhs43*clhs90;
        lhs(3,6)=clhs100*clhs43 - clhs103*clhs19 + clhs38*clhs95 - clhs4*clhs98;
        lhs(3,7)=clhs105*clhs38 - clhs108*clhs4 + clhs110*clhs43 - clhs113*clhs19;
        lhs(3,8)=clhs115*clhs38 - clhs118*clhs4 + clhs120*clhs43 - clhs123*clhs19;
        lhs(3,9)=clhs129*clhs38 + clhs132*clhs4 + clhs136*clhs43 + clhs139*clhs19;
        lhs(3,10)=clhs145*clhs38 + clhs148*clhs4 + clhs152*clhs43 + clhs155*clhs19;
        lhs(3,11)=clhs161*clhs38 + clhs164*clhs4 + clhs168*clhs43 + clhs171*clhs19;
        lhs(3,12)=clhs177*clhs38 + clhs180*clhs4 + clhs184*clhs43 + clhs187*clhs19;
        lhs(3,13)=clhs19*clhs203 + clhs193*clhs38 + clhs196*clhs4 + clhs200*clhs43;
        lhs(3,14)=clhs19*clhs219 + clhs209*clhs38 + clhs212*clhs4 + clhs216*clhs43;
        lhs(3,15)=clhs19*clhs235 + clhs225*clhs38 + clhs228*clhs4 + clhs232*clhs43;
        lhs(3,16)=clhs19*clhs251 + clhs241*clhs38 + clhs244*clhs4 + clhs248*clhs43;
        lhs(3,17)=clhs19*clhs267 + clhs257*clhs38 + clhs260*clhs4 + clhs264*clhs43;
        lhs(3,18)=0;
        lhs(3,19)=clhs268*clhs4;
        lhs(3,20)=clhs19*clhs269;
        lhs(4,0)=-clhs19*clhs271 + clhs20*clhs273 - clhs270*clhs4 + clhs272*clhs5;
        lhs(4,1)=-clhs19*clhs275 + clhs272*clhs45 + clhs273*clhs50 - clhs274*clhs4;
        lhs(4,2)=-clhs19*clhs277 + clhs272*clhs55 + clhs273*clhs60 - clhs276*clhs4;
        lhs(4,3)=-clhs19*clhs279 + clhs272*clhs65 + clhs273*clhs70 - clhs278*clhs4;
        lhs(4,4)=-clhs19*clhs281 + clhs272*clhs75 + clhs273*clhs80 - clhs280*clhs4;
        lhs(4,5)=-clhs19*clhs283 + clhs272*clhs85 + clhs273*clhs90 - clhs282*clhs4;
        lhs(4,6)=clhs100*clhs273 - clhs19*clhs285 + clhs272*clhs95 - clhs284*clhs4;
        lhs(4,7)=clhs105*clhs272 + clhs110*clhs273 - clhs19*clhs287 - clhs286*clhs4;
        lhs(4,8)=clhs115*clhs272 + clhs120*clhs273 - clhs19*clhs289 - clhs288*clhs4;
        lhs(4,9)=clhs129*clhs272 + clhs136*clhs273 + clhs19*clhs291 + clhs290*clhs4;
        lhs(4,10)=clhs145*clhs272 + clhs152*clhs273 + clhs19*clhs293 + clhs292*clhs4;
        lhs(4,11)=clhs161*clhs272 + clhs168*clhs273 + clhs19*clhs295 + clhs294*clhs4;
        lhs(4,12)=clhs177*clhs272 + clhs184*clhs273 + clhs19*clhs297 + clhs296*clhs4;
        lhs(4,13)=clhs19*clhs299 + clhs193*clhs272 + clhs200*clhs273 + clhs298*clhs4;
        lhs(4,14)=clhs19*clhs301 + clhs209*clhs272 + clhs216*clhs273 + clhs300*clhs4;
        lhs(4,15)=clhs19*clhs303 + clhs225*clhs272 + clhs232*clhs273 + clhs302*clhs4;
        lhs(4,16)=clhs19*clhs305 + clhs241*clhs272 + clhs248*clhs273 + clhs304*clhs4;
        lhs(4,17)=clhs19*clhs307 + clhs257*clhs272 + clhs264*clhs273 + clhs306*clhs4;
        lhs(4,18)=0;
        lhs(4,19)=clhs308*clhs4;
        lhs(4,20)=clhs19*clhs309;
        lhs(5,0)=-clhs19*clhs311 + clhs20*clhs313 - clhs310*clhs4 + clhs312*clhs5;
        lhs(5,1)=-clhs19*clhs315 + clhs312*clhs45 + clhs313*clhs50 - clhs314*clhs4;
        lhs(5,2)=-clhs19*clhs317 + clhs312*clhs55 + clhs313*clhs60 - clhs316*clhs4;
        lhs(5,3)=-clhs19*clhs319 + clhs312*clhs65 + clhs313*clhs70 - clhs318*clhs4;
        lhs(5,4)=-clhs19*clhs321 + clhs312*clhs75 + clhs313*clhs80 - clhs320*clhs4;
        lhs(5,5)=-clhs19*clhs323 + clhs312*clhs85 + clhs313*clhs90 - clhs322*clhs4;
        lhs(5,6)=clhs100*clhs313 - clhs19*clhs325 + clhs312*clhs95 - clhs324*clhs4;
        lhs(5,7)=clhs105*clhs312 + clhs110*clhs313 - clhs19*clhs327 - clhs326*clhs4;
        lhs(5,8)=clhs115*clhs312 + clhs120*clhs313 - clhs19*clhs329 - clhs328*clhs4;
        lhs(5,9)=clhs129*clhs312 + clhs136*clhs313 + clhs19*clhs331 + clhs330*clhs4;
        lhs(5,10)=clhs145*clhs312 + clhs152*clhs313 + clhs19*clhs333 + clhs332*clhs4;
        lhs(5,11)=clhs161*clhs312 + clhs168*clhs313 + clhs19*clhs335 + clhs334*clhs4;
        lhs(5,12)=clhs177*clhs312 + clhs184*clhs313 + clhs19*clhs337 + clhs336*clhs4;
        lhs(5,13)=clhs19*clhs339 + clhs193*clhs312 + clhs200*clhs313 + clhs338*clhs4;
        lhs(5,14)=clhs19*clhs341 + clhs209*clhs312 + clhs216*clhs313 + clhs340*clhs4;
        lhs(5,15)=clhs19*clhs343 + clhs225*clhs312 + clhs232*clhs313 + clhs342*clhs4;
        lhs(5,16)=clhs19*clhs345 + clhs241*clhs312 + clhs248*clhs313 + clhs344*clhs4;
        lhs(5,17)=clhs19*clhs347 + clhs257*clhs312 + clhs264*clhs313 + clhs346*clhs4;
        lhs(5,18)=0;
        lhs(5,19)=clhs348*clhs4;
        lhs(5,20)=clhs19*clhs349;
        lhs(6,0)=-clhs16*clhs7 - clhs21*clhs24 + clhs22*clhs43 + clhs38*clhs8;
        lhs(6,1)=-clhs21*clhs53 + clhs38*clhs46 + clhs43*clhs51 - clhs48*clhs7;
        lhs(6,2)=-clhs21*clhs63 + clhs38*clhs56 + clhs43*clhs61 - clhs58*clhs7;
        lhs(6,3)=-clhs21*clhs73 + clhs38*clhs66 + clhs43*clhs71 - clhs68*clhs7;
        lhs(6,4)=-clhs21*clhs83 + clhs38*clhs76 + clhs43*clhs81 - clhs7*clhs78;
        lhs(6,5)=-clhs21*clhs93 + clhs38*clhs86 + clhs43*clhs91 - clhs7*clhs88;
        lhs(6,6)=clhs101*clhs43 - clhs103*clhs21 + clhs38*clhs96 - clhs7*clhs98;
        lhs(6,7)=clhs106*clhs38 - clhs108*clhs7 + clhs111*clhs43 - clhs113*clhs21;
        lhs(6,8)=clhs116*clhs38 - clhs118*clhs7 + clhs121*clhs43 - clhs123*clhs21;
        lhs(6,9)=clhs130*clhs38 + clhs132*clhs7 + clhs137*clhs43 + clhs139*clhs21;
        lhs(6,10)=clhs146*clhs38 + clhs148*clhs7 + clhs153*clhs43 + clhs155*clhs21;
        lhs(6,11)=clhs162*clhs38 + clhs164*clhs7 + clhs169*clhs43 + clhs171*clhs21;
        lhs(6,12)=clhs178*clhs38 + clhs180*clhs7 + clhs185*clhs43 + clhs187*clhs21;
        lhs(6,13)=clhs194*clhs38 + clhs196*clhs7 + clhs201*clhs43 + clhs203*clhs21;
        lhs(6,14)=clhs21*clhs219 + clhs210*clhs38 + clhs212*clhs7 + clhs217*clhs43;
        lhs(6,15)=clhs21*clhs235 + clhs226*clhs38 + clhs228*clhs7 + clhs233*clhs43;
        lhs(6,16)=clhs21*clhs251 + clhs242*clhs38 + clhs244*clhs7 + clhs249*clhs43;
        lhs(6,17)=clhs21*clhs267 + clhs258*clhs38 + clhs260*clhs7 + clhs265*clhs43;
        lhs(6,18)=0;
        lhs(6,19)=clhs268*clhs7;
        lhs(6,20)=clhs21*clhs269;
        lhs(7,0)=-clhs21*clhs271 + clhs22*clhs273 - clhs270*clhs7 + clhs272*clhs8;
        lhs(7,1)=-clhs21*clhs275 + clhs272*clhs46 + clhs273*clhs51 - clhs274*clhs7;
        lhs(7,2)=-clhs21*clhs277 + clhs272*clhs56 + clhs273*clhs61 - clhs276*clhs7;
        lhs(7,3)=-clhs21*clhs279 + clhs272*clhs66 + clhs273*clhs71 - clhs278*clhs7;
        lhs(7,4)=-clhs21*clhs281 + clhs272*clhs76 + clhs273*clhs81 - clhs280*clhs7;
        lhs(7,5)=-clhs21*clhs283 + clhs272*clhs86 + clhs273*clhs91 - clhs282*clhs7;
        lhs(7,6)=clhs101*clhs273 - clhs21*clhs285 + clhs272*clhs96 - clhs284*clhs7;
        lhs(7,7)=clhs106*clhs272 + clhs111*clhs273 - clhs21*clhs287 - clhs286*clhs7;
        lhs(7,8)=clhs116*clhs272 + clhs121*clhs273 - clhs21*clhs289 - clhs288*clhs7;
        lhs(7,9)=clhs130*clhs272 + clhs137*clhs273 + clhs21*clhs291 + clhs290*clhs7;
        lhs(7,10)=clhs146*clhs272 + clhs153*clhs273 + clhs21*clhs293 + clhs292*clhs7;
        lhs(7,11)=clhs162*clhs272 + clhs169*clhs273 + clhs21*clhs295 + clhs294*clhs7;
        lhs(7,12)=clhs178*clhs272 + clhs185*clhs273 + clhs21*clhs297 + clhs296*clhs7;
        lhs(7,13)=clhs194*clhs272 + clhs201*clhs273 + clhs21*clhs299 + clhs298*clhs7;
        lhs(7,14)=clhs21*clhs301 + clhs210*clhs272 + clhs217*clhs273 + clhs300*clhs7;
        lhs(7,15)=clhs21*clhs303 + clhs226*clhs272 + clhs233*clhs273 + clhs302*clhs7;
        lhs(7,16)=clhs21*clhs305 + clhs242*clhs272 + clhs249*clhs273 + clhs304*clhs7;
        lhs(7,17)=clhs21*clhs307 + clhs258*clhs272 + clhs265*clhs273 + clhs306*clhs7;
        lhs(7,18)=0;
        lhs(7,19)=clhs308*clhs7;
        lhs(7,20)=clhs21*clhs309;
        lhs(8,0)=-clhs21*clhs311 + clhs22*clhs313 - clhs310*clhs7 + clhs312*clhs8;
        lhs(8,1)=-clhs21*clhs315 + clhs312*clhs46 + clhs313*clhs51 - clhs314*clhs7;
        lhs(8,2)=-clhs21*clhs317 + clhs312*clhs56 + clhs313*clhs61 - clhs316*clhs7;
        lhs(8,3)=-clhs21*clhs319 + clhs312*clhs66 + clhs313*clhs71 - clhs318*clhs7;
        lhs(8,4)=-clhs21*clhs321 + clhs312*clhs76 + clhs313*clhs81 - clhs320*clhs7;
        lhs(8,5)=-clhs21*clhs323 + clhs312*clhs86 + clhs313*clhs91 - clhs322*clhs7;
        lhs(8,6)=clhs101*clhs313 - clhs21*clhs325 + clhs312*clhs96 - clhs324*clhs7;
        lhs(8,7)=clhs106*clhs312 + clhs111*clhs313 - clhs21*clhs327 - clhs326*clhs7;
        lhs(8,8)=clhs116*clhs312 + clhs121*clhs313 - clhs21*clhs329 - clhs328*clhs7;
        lhs(8,9)=clhs130*clhs312 + clhs137*clhs313 + clhs21*clhs331 + clhs330*clhs7;
        lhs(8,10)=clhs146*clhs312 + clhs153*clhs313 + clhs21*clhs333 + clhs332*clhs7;
        lhs(8,11)=clhs162*clhs312 + clhs169*clhs313 + clhs21*clhs335 + clhs334*clhs7;
        lhs(8,12)=clhs178*clhs312 + clhs185*clhs313 + clhs21*clhs337 + clhs336*clhs7;
        lhs(8,13)=clhs194*clhs312 + clhs201*clhs313 + clhs21*clhs339 + clhs338*clhs7;
        lhs(8,14)=clhs21*clhs341 + clhs210*clhs312 + clhs217*clhs313 + clhs340*clhs7;
        lhs(8,15)=clhs21*clhs343 + clhs226*clhs312 + clhs233*clhs313 + clhs342*clhs7;
        lhs(8,16)=clhs21*clhs345 + clhs242*clhs312 + clhs249*clhs313 + clhs344*clhs7;
        lhs(8,17)=clhs21*clhs347 + clhs258*clhs312 + clhs265*clhs313 + clhs346*clhs7;
        lhs(8,18)=0;
        lhs(8,19)=clhs348*clhs7;
        lhs(8,20)=clhs21*clhs349;
        lhs(9,0)=penalty_parameter*(clhs26*clhs350 + clhs351*clhs39);
        lhs(9,1)=penalty_parameter*(clhs26*clhs352 + clhs353*clhs39);
        lhs(9,2)=penalty_parameter*(clhs26*clhs354 + clhs355*clhs39);
        lhs(9,3)=penalty_parameter*(clhs26*clhs356 + clhs357*clhs39);
        lhs(9,4)=penalty_parameter*(clhs26*clhs358 + clhs359*clhs39);
        lhs(9,5)=penalty_parameter*(clhs26*clhs360 + clhs361*clhs39);
        lhs(9,6)=penalty_parameter*(clhs26*clhs362 + clhs363*clhs39);
        lhs(9,7)=penalty_parameter*(clhs26*clhs364 + clhs365*clhs39);
        lhs(9,8)=penalty_parameter*(clhs26*clhs366 + clhs367*clhs39);
        lhs(9,9)=-clhs126*clhs38 - clhs132*clhs26 - clhs133*clhs43 - clhs139*clhs39;
        lhs(9,10)=-clhs142*clhs38 - clhs148*clhs26 - clhs149*clhs43 - clhs155*clhs39;
        lhs(9,11)=-clhs158*clhs38 - clhs164*clhs26 - clhs165*clhs43 - clhs171*clhs39;
        lhs(9,12)=-clhs174*clhs38 - clhs180*clhs26 - clhs181*clhs43 - clhs187*clhs39;
        lhs(9,13)=-clhs190*clhs38 - clhs196*clhs26 - clhs197*clhs43 - clhs203*clhs39;
        lhs(9,14)=-clhs206*clhs38 - clhs212*clhs26 - clhs213*clhs43 - clhs219*clhs39;
        lhs(9,15)=-clhs222*clhs38 - clhs228*clhs26 - clhs229*clhs43 - clhs235*clhs39;
        lhs(9,16)=-clhs238*clhs38 - clhs244*clhs26 - clhs245*clhs43 - clhs251*clhs39;
        lhs(9,17)=-clhs254*clhs38 - clhs26*clhs260 - clhs261*clhs43 - clhs267*clhs39;
        lhs(9,18)=0;
        lhs(9,19)=-clhs26*clhs268;
        lhs(9,20)=-clhs269*clhs39;
        lhs(10,0)=penalty_parameter*(clhs26*clhs368 + clhs369*clhs39);
        lhs(10,1)=penalty_parameter*(clhs26*clhs370 + clhs371*clhs39);
        lhs(10,2)=penalty_parameter*(clhs26*clhs372 + clhs373*clhs39);
        lhs(10,3)=penalty_parameter*(clhs26*clhs374 + clhs375*clhs39);
        lhs(10,4)=penalty_parameter*(clhs26*clhs376 + clhs377*clhs39);
        lhs(10,5)=penalty_parameter*(clhs26*clhs378 + clhs379*clhs39);
        lhs(10,6)=penalty_parameter*(clhs26*clhs380 + clhs381*clhs39);
        lhs(10,7)=penalty_parameter*(clhs26*clhs382 + clhs383*clhs39);
        lhs(10,8)=penalty_parameter*(clhs26*clhs384 + clhs385*clhs39);
        lhs(10,9)=-clhs126*clhs272 - clhs133*clhs273 - clhs26*clhs290 - clhs291*clhs39;
        lhs(10,10)=-clhs142*clhs272 - clhs149*clhs273 - clhs26*clhs292 - clhs293*clhs39;
        lhs(10,11)=-clhs158*clhs272 - clhs165*clhs273 - clhs26*clhs294 - clhs295*clhs39;
        lhs(10,12)=-clhs174*clhs272 - clhs181*clhs273 - clhs26*clhs296 - clhs297*clhs39;
        lhs(10,13)=-clhs190*clhs272 - clhs197*clhs273 - clhs26*clhs298 - clhs299*clhs39;
        lhs(10,14)=-clhs206*clhs272 - clhs213*clhs273 - clhs26*clhs300 - clhs301*clhs39;
        lhs(10,15)=-clhs222*clhs272 - clhs229*clhs273 - clhs26*clhs302 - clhs303*clhs39;
        lhs(10,16)=-clhs238*clhs272 - clhs245*clhs273 - clhs26*clhs304 - clhs305*clhs39;
        lhs(10,17)=-clhs254*clhs272 - clhs26*clhs306 - clhs261*clhs273 - clhs307*clhs39;
        lhs(10,18)=0;
        lhs(10,19)=-clhs26*clhs308;
        lhs(10,20)=-clhs309*clhs39;
        lhs(11,0)=penalty_parameter*(clhs26*clhs386 + clhs387*clhs39);
        lhs(11,1)=penalty_parameter*(clhs26*clhs388 + clhs389*clhs39);
        lhs(11,2)=penalty_parameter*(clhs26*clhs390 + clhs39*clhs391);
        lhs(11,3)=penalty_parameter*(clhs26*clhs392 + clhs39*clhs393);
        lhs(11,4)=penalty_parameter*(clhs26*clhs394 + clhs39*clhs395);
        lhs(11,5)=penalty_parameter*(clhs26*clhs396 + clhs39*clhs397);
        lhs(11,6)=penalty_parameter*(clhs26*clhs398 + clhs39*clhs399);
        lhs(11,7)=penalty_parameter*(clhs26*clhs400 + clhs39*clhs401);
        lhs(11,8)=penalty_parameter*(clhs26*clhs402 + clhs39*clhs403);
        lhs(11,9)=-clhs126*clhs312 - clhs133*clhs313 - clhs26*clhs330 - clhs331*clhs39;
        lhs(11,10)=-clhs142*clhs312 - clhs149*clhs313 - clhs26*clhs332 - clhs333*clhs39;
        lhs(11,11)=-clhs158*clhs312 - clhs165*clhs313 - clhs26*clhs334 - clhs335*clhs39;
        lhs(11,12)=-clhs174*clhs312 - clhs181*clhs313 - clhs26*clhs336 - clhs337*clhs39;
        lhs(11,13)=-clhs190*clhs312 - clhs197*clhs313 - clhs26*clhs338 - clhs339*clhs39;
        lhs(11,14)=-clhs206*clhs312 - clhs213*clhs313 - clhs26*clhs340 - clhs341*clhs39;
        lhs(11,15)=-clhs222*clhs312 - clhs229*clhs313 - clhs26*clhs342 - clhs343*clhs39;
        lhs(11,16)=-clhs238*clhs312 - clhs245*clhs313 - clhs26*clhs344 - clhs345*clhs39;
        lhs(11,17)=-clhs254*clhs312 - clhs26*clhs346 - clhs261*clhs313 - clhs347*clhs39;
        lhs(11,18)=0;
        lhs(11,19)=-clhs26*clhs348;
        lhs(11,20)=-clhs349*clhs39;
        lhs(12,0)=penalty_parameter*(clhs28*clhs350 + clhs351*clhs40);
        lhs(12,1)=penalty_parameter*(clhs28*clhs352 + clhs353*clhs40);
        lhs(12,2)=penalty_parameter*(clhs28*clhs354 + clhs355*clhs40);
        lhs(12,3)=penalty_parameter*(clhs28*clhs356 + clhs357*clhs40);
        lhs(12,4)=penalty_parameter*(clhs28*clhs358 + clhs359*clhs40);
        lhs(12,5)=penalty_parameter*(clhs28*clhs360 + clhs361*clhs40);
        lhs(12,6)=penalty_parameter*(clhs28*clhs362 + clhs363*clhs40);
        lhs(12,7)=penalty_parameter*(clhs28*clhs364 + clhs365*clhs40);
        lhs(12,8)=penalty_parameter*(clhs28*clhs366 + clhs367*clhs40);
        lhs(12,9)=-clhs127*clhs38 - clhs132*clhs28 - clhs134*clhs43 - clhs139*clhs40;
        lhs(12,10)=-clhs143*clhs38 - clhs148*clhs28 - clhs150*clhs43 - clhs155*clhs40;
        lhs(12,11)=-clhs159*clhs38 - clhs164*clhs28 - clhs166*clhs43 - clhs171*clhs40;
        lhs(12,12)=-clhs175*clhs38 - clhs180*clhs28 - clhs182*clhs43 - clhs187*clhs40;
        lhs(12,13)=-clhs191*clhs38 - clhs196*clhs28 - clhs198*clhs43 - clhs203*clhs40;
        lhs(12,14)=-clhs207*clhs38 - clhs212*clhs28 - clhs214*clhs43 - clhs219*clhs40;
        lhs(12,15)=-clhs223*clhs38 - clhs228*clhs28 - clhs230*clhs43 - clhs235*clhs40;
        lhs(12,16)=-clhs239*clhs38 - clhs244*clhs28 - clhs246*clhs43 - clhs251*clhs40;
        lhs(12,17)=-clhs255*clhs38 - clhs260*clhs28 - clhs262*clhs43 - clhs267*clhs40;
        lhs(12,18)=0;
        lhs(12,19)=-clhs268*clhs28;
        lhs(12,20)=-clhs269*clhs40;
        lhs(13,0)=penalty_parameter*(clhs28*clhs368 + clhs369*clhs40);
        lhs(13,1)=penalty_parameter*(clhs28*clhs370 + clhs371*clhs40);
        lhs(13,2)=penalty_parameter*(clhs28*clhs372 + clhs373*clhs40);
        lhs(13,3)=penalty_parameter*(clhs28*clhs374 + clhs375*clhs40);
        lhs(13,4)=penalty_parameter*(clhs28*clhs376 + clhs377*clhs40);
        lhs(13,5)=penalty_parameter*(clhs28*clhs378 + clhs379*clhs40);
        lhs(13,6)=penalty_parameter*(clhs28*clhs380 + clhs381*clhs40);
        lhs(13,7)=penalty_parameter*(clhs28*clhs382 + clhs383*clhs40);
        lhs(13,8)=penalty_parameter*(clhs28*clhs384 + clhs385*clhs40);
        lhs(13,9)=-clhs127*clhs272 - clhs134*clhs273 - clhs28*clhs290 - clhs291*clhs40;
        lhs(13,10)=-clhs143*clhs272 - clhs150*clhs273 - clhs28*clhs292 - clhs293*clhs40;
        lhs(13,11)=-clhs159*clhs272 - clhs166*clhs273 - clhs28*clhs294 - clhs295*clhs40;
        lhs(13,12)=-clhs175*clhs272 - clhs182*clhs273 - clhs28*clhs296 - clhs297*clhs40;
        lhs(13,13)=-clhs191*clhs272 - clhs198*clhs273 - clhs28*clhs298 - clhs299*clhs40;
        lhs(13,14)=-clhs207*clhs272 - clhs214*clhs273 - clhs28*clhs300 - clhs301*clhs40;
        lhs(13,15)=-clhs223*clhs272 - clhs230*clhs273 - clhs28*clhs302 - clhs303*clhs40;
        lhs(13,16)=-clhs239*clhs272 - clhs246*clhs273 - clhs28*clhs304 - clhs305*clhs40;
        lhs(13,17)=-clhs255*clhs272 - clhs262*clhs273 - clhs28*clhs306 - clhs307*clhs40;
        lhs(13,18)=0;
        lhs(13,19)=-clhs28*clhs308;
        lhs(13,20)=-clhs309*clhs40;
        lhs(14,0)=penalty_parameter*(clhs28*clhs386 + clhs387*clhs40);
        lhs(14,1)=penalty_parameter*(clhs28*clhs388 + clhs389*clhs40);
        lhs(14,2)=penalty_parameter*(clhs28*clhs390 + clhs391*clhs40);
        lhs(14,3)=penalty_parameter*(clhs28*clhs392 + clhs393*clhs40);
        lhs(14,4)=penalty_parameter*(clhs28*clhs394 + clhs395*clhs40);
        lhs(14,5)=penalty_parameter*(clhs28*clhs396 + clhs397*clhs40);
        lhs(14,6)=penalty_parameter*(clhs28*clhs398 + clhs399*clhs40);
        lhs(14,7)=penalty_parameter*(clhs28*clhs400 + clhs40*clhs401);
        lhs(14,8)=penalty_parameter*(clhs28*clhs402 + clhs40*clhs403);
        lhs(14,9)=-clhs127*clhs312 - clhs134*clhs313 - clhs28*clhs330 - clhs331*clhs40;
        lhs(14,10)=-clhs143*clhs312 - clhs150*clhs313 - clhs28*clhs332 - clhs333*clhs40;
        lhs(14,11)=-clhs159*clhs312 - clhs166*clhs313 - clhs28*clhs334 - clhs335*clhs40;
        lhs(14,12)=-clhs175*clhs312 - clhs182*clhs313 - clhs28*clhs336 - clhs337*clhs40;
        lhs(14,13)=-clhs191*clhs312 - clhs198*clhs313 - clhs28*clhs338 - clhs339*clhs40;
        lhs(14,14)=-clhs207*clhs312 - clhs214*clhs313 - clhs28*clhs340 - clhs341*clhs40;
        lhs(14,15)=-clhs223*clhs312 - clhs230*clhs313 - clhs28*clhs342 - clhs343*clhs40;
        lhs(14,16)=-clhs239*clhs312 - clhs246*clhs313 - clhs28*clhs344 - clhs345*clhs40;
        lhs(14,17)=-clhs255*clhs312 - clhs262*clhs313 - clhs28*clhs346 - clhs347*clhs40;
        lhs(14,18)=0;
        lhs(14,19)=-clhs28*clhs348;
        lhs(14,20)=-clhs349*clhs40;
        lhs(15,0)=penalty_parameter*(clhs30*clhs350 + clhs351*clhs41);
        lhs(15,1)=penalty_parameter*(clhs30*clhs352 + clhs353*clhs41);
        lhs(15,2)=penalty_parameter*(clhs30*clhs354 + clhs355*clhs41);
        lhs(15,3)=penalty_parameter*(clhs30*clhs356 + clhs357*clhs41);
        lhs(15,4)=penalty_parameter*(clhs30*clhs358 + clhs359*clhs41);
        lhs(15,5)=penalty_parameter*(clhs30*clhs360 + clhs361*clhs41);
        lhs(15,6)=penalty_parameter*(clhs30*clhs362 + clhs363*clhs41);
        lhs(15,7)=penalty_parameter*(clhs30*clhs364 + clhs365*clhs41);
        lhs(15,8)=penalty_parameter*(clhs30*clhs366 + clhs367*clhs41);
        lhs(15,9)=-clhs128*clhs38 - clhs132*clhs30 - clhs135*clhs43 - clhs139*clhs41;
        lhs(15,10)=-clhs144*clhs38 - clhs148*clhs30 - clhs151*clhs43 - clhs155*clhs41;
        lhs(15,11)=-clhs160*clhs38 - clhs164*clhs30 - clhs167*clhs43 - clhs171*clhs41;
        lhs(15,12)=-clhs176*clhs38 - clhs180*clhs30 - clhs183*clhs43 - clhs187*clhs41;
        lhs(15,13)=-clhs192*clhs38 - clhs196*clhs30 - clhs199*clhs43 - clhs203*clhs41;
        lhs(15,14)=-clhs208*clhs38 - clhs212*clhs30 - clhs215*clhs43 - clhs219*clhs41;
        lhs(15,15)=-clhs224*clhs38 - clhs228*clhs30 - clhs231*clhs43 - clhs235*clhs41;
        lhs(15,16)=-clhs240*clhs38 - clhs244*clhs30 - clhs247*clhs43 - clhs251*clhs41;
        lhs(15,17)=-clhs256*clhs38 - clhs260*clhs30 - clhs263*clhs43 - clhs267*clhs41;
        lhs(15,18)=0;
        lhs(15,19)=-clhs268*clhs30;
        lhs(15,20)=-clhs269*clhs41;
        lhs(16,0)=penalty_parameter*(clhs30*clhs368 + clhs369*clhs41);
        lhs(16,1)=penalty_parameter*(clhs30*clhs370 + clhs371*clhs41);
        lhs(16,2)=penalty_parameter*(clhs30*clhs372 + clhs373*clhs41);
        lhs(16,3)=penalty_parameter*(clhs30*clhs374 + clhs375*clhs41);
        lhs(16,4)=penalty_parameter*(clhs30*clhs376 + clhs377*clhs41);
        lhs(16,5)=penalty_parameter*(clhs30*clhs378 + clhs379*clhs41);
        lhs(16,6)=penalty_parameter*(clhs30*clhs380 + clhs381*clhs41);
        lhs(16,7)=penalty_parameter*(clhs30*clhs382 + clhs383*clhs41);
        lhs(16,8)=penalty_parameter*(clhs30*clhs384 + clhs385*clhs41);
        lhs(16,9)=-clhs128*clhs272 - clhs135*clhs273 - clhs290*clhs30 - clhs291*clhs41;
        lhs(16,10)=-clhs144*clhs272 - clhs151*clhs273 - clhs292*clhs30 - clhs293*clhs41;
        lhs(16,11)=-clhs160*clhs272 - clhs167*clhs273 - clhs294*clhs30 - clhs295*clhs41;
        lhs(16,12)=-clhs176*clhs272 - clhs183*clhs273 - clhs296*clhs30 - clhs297*clhs41;
        lhs(16,13)=-clhs192*clhs272 - clhs199*clhs273 - clhs298*clhs30 - clhs299*clhs41;
        lhs(16,14)=-clhs208*clhs272 - clhs215*clhs273 - clhs30*clhs300 - clhs301*clhs41;
        lhs(16,15)=-clhs224*clhs272 - clhs231*clhs273 - clhs30*clhs302 - clhs303*clhs41;
        lhs(16,16)=-clhs240*clhs272 - clhs247*clhs273 - clhs30*clhs304 - clhs305*clhs41;
        lhs(16,17)=-clhs256*clhs272 - clhs263*clhs273 - clhs30*clhs306 - clhs307*clhs41;
        lhs(16,18)=0;
        lhs(16,19)=-clhs30*clhs308;
        lhs(16,20)=-clhs309*clhs41;
        lhs(17,0)=penalty_parameter*(clhs30*clhs386 + clhs387*clhs41);
        lhs(17,1)=penalty_parameter*(clhs30*clhs388 + clhs389*clhs41);
        lhs(17,2)=penalty_parameter*(clhs30*clhs390 + clhs391*clhs41);
        lhs(17,3)=penalty_parameter*(clhs30*clhs392 + clhs393*clhs41);
        lhs(17,4)=penalty_parameter*(clhs30*clhs394 + clhs395*clhs41);
        lhs(17,5)=penalty_parameter*(clhs30*clhs396 + clhs397*clhs41);
        lhs(17,6)=penalty_parameter*(clhs30*clhs398 + clhs399*clhs41);
        lhs(17,7)=penalty_parameter*(clhs30*clhs400 + clhs401*clhs41);
        lhs(17,8)=penalty_parameter*(clhs30*clhs402 + clhs403*clhs41);
        lhs(17,9)=-clhs128*clhs312 - clhs135*clhs313 - clhs30*clhs330 - clhs331*clhs41;
        lhs(17,10)=-clhs144*clhs312 - clhs151*clhs313 - clhs30*clhs332 - clhs333*clhs41;
        lhs(17,11)=-clhs160*clhs312 - clhs167*clhs313 - clhs30*clhs334 - clhs335*clhs41;
        lhs(17,12)=-clhs176*clhs312 - clhs183*clhs313 - clhs30*clhs336 - clhs337*clhs41;
        lhs(17,13)=-clhs192*clhs312 - clhs199*clhs313 - clhs30*clhs338 - clhs339*clhs41;
        lhs(17,14)=-clhs208*clhs312 - clhs215*clhs313 - clhs30*clhs340 - clhs341*clhs41;
        lhs(17,15)=-clhs224*clhs312 - clhs231*clhs313 - clhs30*clhs342 - clhs343*clhs41;
        lhs(17,16)=-clhs240*clhs312 - clhs247*clhs313 - clhs30*clhs344 - clhs345*clhs41;
        lhs(17,17)=-clhs256*clhs312 - clhs263*clhs313 - clhs30*clhs346 - clhs347*clhs41;
        lhs(17,18)=0;
        lhs(17,19)=-clhs30*clhs348;
        lhs(17,20)=-clhs349*clhs41;
        lhs(18,0)=0;
        lhs(18,1)=0;
        lhs(18,2)=0;
        lhs(18,3)=0;
        lhs(18,4)=0;
        lhs(18,5)=0;
        lhs(18,6)=0;
        lhs(18,7)=0;
        lhs(18,8)=0;
        lhs(18,9)=0;
        lhs(18,10)=0;
        lhs(18,11)=0;
        lhs(18,12)=0;
        lhs(18,13)=0;
        lhs(18,14)=0;
        lhs(18,15)=0;
        lhs(18,16)=0;
        lhs(18,17)=0;
        lhs(18,18)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=clhs15*scale_factor;
        lhs(19,1)=clhs47*scale_factor;
        lhs(19,2)=clhs57*scale_factor;
        lhs(19,3)=clhs67*scale_factor;
        lhs(19,4)=clhs77*scale_factor;
        lhs(19,5)=clhs87*scale_factor;
        lhs(19,6)=clhs97*scale_factor;
        lhs(19,7)=clhs107*scale_factor;
        lhs(19,8)=clhs117*scale_factor;
        lhs(19,9)=-clhs131*scale_factor;
        lhs(19,10)=-clhs147*scale_factor;
        lhs(19,11)=-clhs163*scale_factor;
        lhs(19,12)=-clhs179*scale_factor;
        lhs(19,13)=-clhs195*scale_factor;
        lhs(19,14)=-clhs211*scale_factor;
        lhs(19,15)=-clhs227*scale_factor;
        lhs(19,16)=-clhs243*scale_factor;
        lhs(19,17)=-clhs259*scale_factor;
        lhs(19,18)=0;
        lhs(19,19)=0;
        lhs(19,20)=0;
        lhs(20,0)=clhs23*scale_factor;
        lhs(20,1)=clhs52*scale_factor;
        lhs(20,2)=clhs62*scale_factor;
        lhs(20,3)=clhs72*scale_factor;
        lhs(20,4)=clhs82*scale_factor;
        lhs(20,5)=clhs92*scale_factor;
        lhs(20,6)=clhs102*scale_factor;
        lhs(20,7)=clhs112*scale_factor;
        lhs(20,8)=clhs122*scale_factor;
        lhs(20,9)=-clhs138*scale_factor;
        lhs(20,10)=-clhs154*scale_factor;
        lhs(20,11)=-clhs170*scale_factor;
        lhs(20,12)=-clhs186*scale_factor;
        lhs(20,13)=-clhs202*scale_factor;
        lhs(20,14)=-clhs218*scale_factor;
        lhs(20,15)=-clhs234*scale_factor;
        lhs(20,16)=-clhs250*scale_factor;
        lhs(20,17)=-clhs266*scale_factor;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=0;
    }
    else if (rActiveInactive == 1 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(0,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*penalty_parameter;
        const double clhs17 =     X1(0,0) + u1(0,0);
        const double clhs18 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs19 =     X1(1,0) + u1(1,0);
        const double clhs20 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs21 =     X1(2,0) + u1(2,0);
        const double clhs22 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs23 =     X1(0,1) + u1(0,1);
        const double clhs24 =     X1(1,1) + u1(1,1);
        const double clhs25 =     X1(2,1) + u1(2,1);
        const double clhs26 =     X1(0,2) + u1(0,2);
        const double clhs27 =     X1(1,2) + u1(1,2);
        const double clhs28 =     X1(2,2) + u1(2,2);
        const double clhs29 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs17*clhs18 + clhs19*clhs20 + clhs21*clhs22) + normalslave(0,1)*(-clhs0*clhs1 + clhs18*clhs23 + clhs20*clhs24 + clhs22*clhs25 - clhs3*clhs4 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs18*clhs26 + clhs20*clhs27 + clhs22*clhs28));
        const double clhs30 =     -clhs0*clhs16 + clhs2*clhs29;
        const double clhs31 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs32 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs33 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs34 =     normalslave(0,0)*(clhs12*clhs31 + clhs13*clhs32 + clhs14*clhs33) + normalslave(0,1)*(clhs0 + clhs1*clhs31 + clhs3*clhs32 + clhs33*clhs6) + normalslave(0,2)*(clhs10*clhs32 + clhs11*clhs33 + clhs31*clhs9);
        const double clhs35 =     clhs34*penalty_parameter;
        const double clhs36 =     -clhs0*clhs35 + clhs29*clhs31;
        const double clhs37 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs38 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs39 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs40 =     normalslave(0,0)*(clhs12*clhs37 + clhs13*clhs38 + clhs14*clhs39) + normalslave(0,1)*(clhs1*clhs37 + clhs3*clhs38 + clhs39*clhs6) + normalslave(0,2)*(clhs0 + clhs10*clhs38 + clhs11*clhs39 + clhs37*clhs9);
        const double clhs41 =     clhs40*penalty_parameter;
        const double clhs42 =     -clhs0*clhs41 + clhs29*clhs37;
        const double clhs43 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs44 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs45 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs46 =     normalslave(0,0)*(clhs12*clhs43 + clhs13*clhs44 + clhs14*clhs45 + clhs4) + normalslave(0,1)*(clhs1*clhs43 + clhs3*clhs44 + clhs45*clhs6) + normalslave(0,2)*(clhs10*clhs44 + clhs11*clhs45 + clhs43*clhs9);
        const double clhs47 =     clhs46*penalty_parameter;
        const double clhs48 =     -clhs0*clhs47 + clhs29*clhs43;
        const double clhs49 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs50 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs51 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs52 =     normalslave(0,0)*(clhs12*clhs49 + clhs13*clhs50 + clhs14*clhs51) + normalslave(0,1)*(clhs1*clhs49 + clhs3*clhs50 + clhs4 + clhs51*clhs6) + normalslave(0,2)*(clhs10*clhs50 + clhs11*clhs51 + clhs49*clhs9);
        const double clhs53 =     clhs52*penalty_parameter;
        const double clhs54 =     -clhs0*clhs53 + clhs29*clhs49;
        const double clhs55 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs56 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs57 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs58 =     normalslave(0,0)*(clhs12*clhs55 + clhs13*clhs56 + clhs14*clhs57) + normalslave(0,1)*(clhs1*clhs55 + clhs3*clhs56 + clhs57*clhs6) + normalslave(0,2)*(clhs10*clhs56 + clhs11*clhs57 + clhs4 + clhs55*clhs9);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs29*clhs55;
        const double clhs61 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs62 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs63 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs64 =     normalslave(0,0)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs7) + normalslave(0,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs6*clhs63) + normalslave(0,2)*(clhs10*clhs62 + clhs11*clhs63 + clhs61*clhs9);
        const double clhs65 =     clhs64*penalty_parameter;
        const double clhs66 =     -clhs0*clhs65 + clhs29*clhs61;
        const double clhs67 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs68 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs69 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs70 =     normalslave(0,0)*(clhs12*clhs67 + clhs13*clhs68 + clhs14*clhs69) + normalslave(0,1)*(clhs1*clhs67 + clhs3*clhs68 + clhs6*clhs69 + clhs7) + normalslave(0,2)*(clhs10*clhs68 + clhs11*clhs69 + clhs67*clhs9);
        const double clhs71 =     clhs70*penalty_parameter;
        const double clhs72 =     -clhs0*clhs71 + clhs29*clhs67;
        const double clhs73 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs74 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs75 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs76 =     normalslave(0,0)*(clhs12*clhs73 + clhs13*clhs74 + clhs14*clhs75) + normalslave(0,1)*(clhs1*clhs73 + clhs3*clhs74 + clhs6*clhs75) + normalslave(0,2)*(clhs10*clhs74 + clhs11*clhs75 + clhs7 + clhs73*clhs9);
        const double clhs77 =     clhs76*penalty_parameter;
        const double clhs78 =     -clhs0*clhs77 + clhs29*clhs73;
        const double clhs79 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs80 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs81 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs82 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs83 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs84 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs85 =     normalslave(0,0)*(-clhs12*clhs79 - clhs13*clhs83 - clhs14*clhs84 + clhs17*clhs80 + clhs18 + clhs19*clhs81 + clhs21*clhs82) + normalslave(0,1)*(-clhs1*clhs79 + clhs23*clhs80 + clhs24*clhs81 + clhs25*clhs82 - clhs3*clhs83 - clhs6*clhs84) + normalslave(0,2)*(-clhs10*clhs83 - clhs11*clhs84 + clhs26*clhs80 + clhs27*clhs81 + clhs28*clhs82 - clhs79*clhs9);
        const double clhs86 =     clhs85*penalty_parameter;
        const double clhs87 =     clhs0*clhs86 + clhs29*clhs79;
        const double clhs88 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs89 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs90 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs91 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs92 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs93 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs94 =     normalslave(0,0)*(-clhs12*clhs88 - clhs13*clhs92 - clhs14*clhs93 + clhs17*clhs89 + clhs19*clhs90 + clhs21*clhs91) + normalslave(0,1)*(-clhs1*clhs88 + clhs18 + clhs23*clhs89 + clhs24*clhs90 + clhs25*clhs91 - clhs3*clhs92 - clhs6*clhs93) + normalslave(0,2)*(-clhs10*clhs92 - clhs11*clhs93 + clhs26*clhs89 + clhs27*clhs90 + clhs28*clhs91 - clhs88*clhs9);
        const double clhs95 =     clhs94*penalty_parameter;
        const double clhs96 =     clhs0*clhs95 + clhs29*clhs88;
        const double clhs97 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs98 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs99 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs100 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs101 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs102 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs103 =     normalslave(0,0)*(clhs100*clhs21 - clhs101*clhs13 - clhs102*clhs14 - clhs12*clhs97 + clhs17*clhs98 + clhs19*clhs99) + normalslave(0,1)*(-clhs1*clhs97 + clhs100*clhs25 - clhs101*clhs3 - clhs102*clhs6 + clhs23*clhs98 + clhs24*clhs99) + normalslave(0,2)*(-clhs10*clhs101 + clhs100*clhs28 - clhs102*clhs11 + clhs18 + clhs26*clhs98 + clhs27*clhs99 - clhs9*clhs97);
        const double clhs104 =     clhs103*penalty_parameter;
        const double clhs105 =     clhs0*clhs104 + clhs29*clhs97;
        const double clhs106 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs107 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs108 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs109 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs110 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs111 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs112 =     normalslave(0,0)*(-clhs106*clhs12 + clhs107*clhs17 + clhs108*clhs19 + clhs109*clhs21 - clhs110*clhs13 - clhs111*clhs14 + clhs20) + normalslave(0,1)*(-clhs1*clhs106 + clhs107*clhs23 + clhs108*clhs24 + clhs109*clhs25 - clhs110*clhs3 - clhs111*clhs6) + normalslave(0,2)*(-clhs10*clhs110 - clhs106*clhs9 + clhs107*clhs26 + clhs108*clhs27 + clhs109*clhs28 - clhs11*clhs111);
        const double clhs113 =     clhs112*penalty_parameter;
        const double clhs114 =     clhs0*clhs113 + clhs106*clhs29;
        const double clhs115 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs116 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs117 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs118 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs119 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs120 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs121 =     normalslave(0,0)*(-clhs115*clhs12 + clhs116*clhs17 + clhs117*clhs19 + clhs118*clhs21 - clhs119*clhs13 - clhs120*clhs14) + normalslave(0,1)*(-clhs1*clhs115 + clhs116*clhs23 + clhs117*clhs24 + clhs118*clhs25 - clhs119*clhs3 - clhs120*clhs6 + clhs20) + normalslave(0,2)*(-clhs10*clhs119 - clhs11*clhs120 - clhs115*clhs9 + clhs116*clhs26 + clhs117*clhs27 + clhs118*clhs28);
        const double clhs122 =     clhs121*penalty_parameter;
        const double clhs123 =     clhs0*clhs122 + clhs115*clhs29;
        const double clhs124 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs125 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs126 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs127 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs128 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs129 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs130 =     normalslave(0,0)*(-clhs12*clhs124 + clhs125*clhs17 + clhs126*clhs19 + clhs127*clhs21 - clhs128*clhs13 - clhs129*clhs14) + normalslave(0,1)*(-clhs1*clhs124 + clhs125*clhs23 + clhs126*clhs24 + clhs127*clhs25 - clhs128*clhs3 - clhs129*clhs6) + normalslave(0,2)*(-clhs10*clhs128 - clhs11*clhs129 - clhs124*clhs9 + clhs125*clhs26 + clhs126*clhs27 + clhs127*clhs28 + clhs20);
        const double clhs131 =     clhs130*penalty_parameter;
        const double clhs132 =     clhs0*clhs131 + clhs124*clhs29;
        const double clhs133 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs134 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs135 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs136 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs137 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs138 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs139 =     normalslave(0,0)*(-clhs12*clhs133 - clhs13*clhs137 + clhs134*clhs17 + clhs135*clhs19 + clhs136*clhs21 - clhs138*clhs14 + clhs22) + normalslave(0,1)*(-clhs1*clhs133 + clhs134*clhs23 + clhs135*clhs24 + clhs136*clhs25 - clhs137*clhs3 - clhs138*clhs6) + normalslave(0,2)*(-clhs10*clhs137 - clhs11*clhs138 - clhs133*clhs9 + clhs134*clhs26 + clhs135*clhs27 + clhs136*clhs28);
        const double clhs140 =     clhs139*penalty_parameter;
        const double clhs141 =     clhs0*clhs140 + clhs133*clhs29;
        const double clhs142 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs143 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs144 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs145 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs146 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs147 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs148 =     normalslave(0,0)*(-clhs12*clhs142 - clhs13*clhs146 - clhs14*clhs147 + clhs143*clhs17 + clhs144*clhs19 + clhs145*clhs21) + normalslave(0,1)*(-clhs1*clhs142 + clhs143*clhs23 + clhs144*clhs24 + clhs145*clhs25 - clhs146*clhs3 - clhs147*clhs6 + clhs22) + normalslave(0,2)*(-clhs10*clhs146 - clhs11*clhs147 - clhs142*clhs9 + clhs143*clhs26 + clhs144*clhs27 + clhs145*clhs28);
        const double clhs149 =     clhs148*penalty_parameter;
        const double clhs150 =     clhs0*clhs149 + clhs142*clhs29;
        const double clhs151 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs152 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs153 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs154 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs155 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs156 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs157 =     normalslave(0,0)*(-clhs12*clhs151 - clhs13*clhs155 - clhs14*clhs156 + clhs152*clhs17 + clhs153*clhs19 + clhs154*clhs21) + normalslave(0,1)*(-clhs1*clhs151 + clhs152*clhs23 + clhs153*clhs24 + clhs154*clhs25 - clhs155*clhs3 - clhs156*clhs6) + normalslave(0,2)*(-clhs10*clhs155 - clhs11*clhs156 - clhs151*clhs9 + clhs152*clhs26 + clhs153*clhs27 + clhs154*clhs28 + clhs22);
        const double clhs158 =     clhs157*penalty_parameter;
        const double clhs159 =     clhs0*clhs158 + clhs151*clhs29;
        const double clhs160 =     normalslave(0,0)*scale_factor;
        const double clhs161 =     normalslave(0,1)*scale_factor;
        const double clhs162 =     normalslave(0,2)*scale_factor;
        const double clhs163 =     -clhs16*clhs4 + clhs29*clhs5;
        const double clhs164 =     clhs29*clhs32 - clhs35*clhs4;
        const double clhs165 =     clhs29*clhs38 - clhs4*clhs41;
        const double clhs166 =     clhs29*clhs44 - clhs4*clhs47;
        const double clhs167 =     clhs29*clhs50 - clhs4*clhs53;
        const double clhs168 =     clhs29*clhs56 - clhs4*clhs59;
        const double clhs169 =     clhs29*clhs62 - clhs4*clhs65;
        const double clhs170 =     clhs29*clhs68 - clhs4*clhs71;
        const double clhs171 =     clhs29*clhs74 - clhs4*clhs77;
        const double clhs172 =     clhs29*clhs83 + clhs4*clhs86;
        const double clhs173 =     clhs29*clhs92 + clhs4*clhs95;
        const double clhs174 =     clhs101*clhs29 + clhs104*clhs4;
        const double clhs175 =     clhs110*clhs29 + clhs113*clhs4;
        const double clhs176 =     clhs119*clhs29 + clhs122*clhs4;
        const double clhs177 =     clhs128*clhs29 + clhs131*clhs4;
        const double clhs178 =     clhs137*clhs29 + clhs140*clhs4;
        const double clhs179 =     clhs146*clhs29 + clhs149*clhs4;
        const double clhs180 =     clhs155*clhs29 + clhs158*clhs4;
        const double clhs181 =     -clhs16*clhs7 + clhs29*clhs8;
        const double clhs182 =     clhs29*clhs33 - clhs35*clhs7;
        const double clhs183 =     clhs29*clhs39 - clhs41*clhs7;
        const double clhs184 =     clhs29*clhs45 - clhs47*clhs7;
        const double clhs185 =     clhs29*clhs51 - clhs53*clhs7;
        const double clhs186 =     clhs29*clhs57 - clhs59*clhs7;
        const double clhs187 =     clhs29*clhs63 - clhs65*clhs7;
        const double clhs188 =     clhs29*clhs69 - clhs7*clhs71;
        const double clhs189 =     clhs29*clhs75 - clhs7*clhs77;
        const double clhs190 =     clhs29*clhs84 + clhs7*clhs86;
        const double clhs191 =     clhs29*clhs93 + clhs7*clhs95;
        const double clhs192 =     clhs102*clhs29 + clhs104*clhs7;
        const double clhs193 =     clhs111*clhs29 + clhs113*clhs7;
        const double clhs194 =     clhs120*clhs29 + clhs122*clhs7;
        const double clhs195 =     clhs129*clhs29 + clhs131*clhs7;
        const double clhs196 =     clhs138*clhs29 + clhs140*clhs7;
        const double clhs197 =     clhs147*clhs29 + clhs149*clhs7;
        const double clhs198 =     clhs156*clhs29 + clhs158*clhs7;
        const double clhs199 =     clhs15*normalslave(0,0)*penalty_parameter;
        const double clhs200 =     clhs34*normalslave(0,0)*penalty_parameter;
        const double clhs201 =     clhs40*normalslave(0,0)*penalty_parameter;
        const double clhs202 =     clhs46*normalslave(0,0)*penalty_parameter;
        const double clhs203 =     clhs52*normalslave(0,0)*penalty_parameter;
        const double clhs204 =     clhs58*normalslave(0,0)*penalty_parameter;
        const double clhs205 =     clhs64*normalslave(0,0)*penalty_parameter;
        const double clhs206 =     clhs70*normalslave(0,0)*penalty_parameter;
        const double clhs207 =     clhs76*normalslave(0,0)*penalty_parameter;
        const double clhs208 =     clhs18*clhs86 + clhs29*clhs80;
        const double clhs209 =     clhs18*clhs95 + clhs29*clhs89;
        const double clhs210 =     clhs104*clhs18 + clhs29*clhs98;
        const double clhs211 =     clhs107*clhs29 + clhs113*clhs18;
        const double clhs212 =     clhs116*clhs29 + clhs122*clhs18;
        const double clhs213 =     clhs125*clhs29 + clhs131*clhs18;
        const double clhs214 =     clhs134*clhs29 + clhs140*clhs18;
        const double clhs215 =     clhs143*clhs29 + clhs149*clhs18;
        const double clhs216 =     clhs152*clhs29 + clhs158*clhs18;
        const double clhs217 =     clhs15*normalslave(0,1)*penalty_parameter;
        const double clhs218 =     clhs34*normalslave(0,1)*penalty_parameter;
        const double clhs219 =     clhs40*normalslave(0,1)*penalty_parameter;
        const double clhs220 =     clhs46*normalslave(0,1)*penalty_parameter;
        const double clhs221 =     clhs52*normalslave(0,1)*penalty_parameter;
        const double clhs222 =     clhs58*normalslave(0,1)*penalty_parameter;
        const double clhs223 =     clhs64*normalslave(0,1)*penalty_parameter;
        const double clhs224 =     clhs70*normalslave(0,1)*penalty_parameter;
        const double clhs225 =     clhs76*normalslave(0,1)*penalty_parameter;
        const double clhs226 =     clhs15*normalslave(0,2)*penalty_parameter;
        const double clhs227 =     clhs34*normalslave(0,2)*penalty_parameter;
        const double clhs228 =     clhs40*normalslave(0,2)*penalty_parameter;
        const double clhs229 =     clhs46*normalslave(0,2)*penalty_parameter;
        const double clhs230 =     clhs52*normalslave(0,2)*penalty_parameter;
        const double clhs231 =     clhs58*normalslave(0,2)*penalty_parameter;
        const double clhs232 =     clhs64*normalslave(0,2)*penalty_parameter;
        const double clhs233 =     clhs70*normalslave(0,2)*penalty_parameter;
        const double clhs234 =     clhs76*normalslave(0,2)*penalty_parameter;
        const double clhs235 =     clhs20*clhs86 + clhs29*clhs81;
        const double clhs236 =     clhs20*clhs95 + clhs29*clhs90;
        const double clhs237 =     clhs104*clhs20 + clhs29*clhs99;
        const double clhs238 =     clhs108*clhs29 + clhs113*clhs20;
        const double clhs239 =     clhs117*clhs29 + clhs122*clhs20;
        const double clhs240 =     clhs126*clhs29 + clhs131*clhs20;
        const double clhs241 =     clhs135*clhs29 + clhs140*clhs20;
        const double clhs242 =     clhs144*clhs29 + clhs149*clhs20;
        const double clhs243 =     clhs153*clhs29 + clhs158*clhs20;
        const double clhs244 =     clhs22*clhs86 + clhs29*clhs82;
        const double clhs245 =     clhs22*clhs95 + clhs29*clhs91;
        const double clhs246 =     clhs100*clhs29 + clhs104*clhs22;
        const double clhs247 =     clhs109*clhs29 + clhs113*clhs22;
        const double clhs248 =     clhs118*clhs29 + clhs122*clhs22;
        const double clhs249 =     clhs127*clhs29 + clhs131*clhs22;
        const double clhs250 =     clhs136*clhs29 + clhs140*clhs22;
        const double clhs251 =     clhs145*clhs29 + clhs149*clhs22;
        const double clhs252 =     clhs154*clhs29 + clhs158*clhs22;
        const double clhs253 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs30*normalslave(0,0);
        lhs(0,1)=clhs36*normalslave(0,0);
        lhs(0,2)=clhs42*normalslave(0,0);
        lhs(0,3)=clhs48*normalslave(0,0);
        lhs(0,4)=clhs54*normalslave(0,0);
        lhs(0,5)=clhs60*normalslave(0,0);
        lhs(0,6)=clhs66*normalslave(0,0);
        lhs(0,7)=clhs72*normalslave(0,0);
        lhs(0,8)=clhs78*normalslave(0,0);
        lhs(0,9)=clhs87*normalslave(0,0);
        lhs(0,10)=clhs96*normalslave(0,0);
        lhs(0,11)=clhs105*normalslave(0,0);
        lhs(0,12)=clhs114*normalslave(0,0);
        lhs(0,13)=clhs123*normalslave(0,0);
        lhs(0,14)=clhs132*normalslave(0,0);
        lhs(0,15)=clhs141*normalslave(0,0);
        lhs(0,16)=clhs150*normalslave(0,0);
        lhs(0,17)=clhs159*normalslave(0,0);
        lhs(0,18)=clhs0*clhs160;
        lhs(0,19)=0;
        lhs(0,20)=0;
        lhs(1,0)=clhs30*normalslave(0,1);
        lhs(1,1)=clhs36*normalslave(0,1);
        lhs(1,2)=clhs42*normalslave(0,1);
        lhs(1,3)=clhs48*normalslave(0,1);
        lhs(1,4)=clhs54*normalslave(0,1);
        lhs(1,5)=clhs60*normalslave(0,1);
        lhs(1,6)=clhs66*normalslave(0,1);
        lhs(1,7)=clhs72*normalslave(0,1);
        lhs(1,8)=clhs78*normalslave(0,1);
        lhs(1,9)=clhs87*normalslave(0,1);
        lhs(1,10)=clhs96*normalslave(0,1);
        lhs(1,11)=clhs105*normalslave(0,1);
        lhs(1,12)=clhs114*normalslave(0,1);
        lhs(1,13)=clhs123*normalslave(0,1);
        lhs(1,14)=clhs132*normalslave(0,1);
        lhs(1,15)=clhs141*normalslave(0,1);
        lhs(1,16)=clhs150*normalslave(0,1);
        lhs(1,17)=clhs159*normalslave(0,1);
        lhs(1,18)=clhs0*clhs161;
        lhs(1,19)=0;
        lhs(1,20)=0;
        lhs(2,0)=clhs30*normalslave(0,2);
        lhs(2,1)=clhs36*normalslave(0,2);
        lhs(2,2)=clhs42*normalslave(0,2);
        lhs(2,3)=clhs48*normalslave(0,2);
        lhs(2,4)=clhs54*normalslave(0,2);
        lhs(2,5)=clhs60*normalslave(0,2);
        lhs(2,6)=clhs66*normalslave(0,2);
        lhs(2,7)=clhs72*normalslave(0,2);
        lhs(2,8)=clhs78*normalslave(0,2);
        lhs(2,9)=clhs87*normalslave(0,2);
        lhs(2,10)=clhs96*normalslave(0,2);
        lhs(2,11)=clhs105*normalslave(0,2);
        lhs(2,12)=clhs114*normalslave(0,2);
        lhs(2,13)=clhs123*normalslave(0,2);
        lhs(2,14)=clhs132*normalslave(0,2);
        lhs(2,15)=clhs141*normalslave(0,2);
        lhs(2,16)=clhs150*normalslave(0,2);
        lhs(2,17)=clhs159*normalslave(0,2);
        lhs(2,18)=clhs0*clhs162;
        lhs(2,19)=0;
        lhs(2,20)=0;
        lhs(3,0)=clhs163*normalslave(0,0);
        lhs(3,1)=clhs164*normalslave(0,0);
        lhs(3,2)=clhs165*normalslave(0,0);
        lhs(3,3)=clhs166*normalslave(0,0);
        lhs(3,4)=clhs167*normalslave(0,0);
        lhs(3,5)=clhs168*normalslave(0,0);
        lhs(3,6)=clhs169*normalslave(0,0);
        lhs(3,7)=clhs170*normalslave(0,0);
        lhs(3,8)=clhs171*normalslave(0,0);
        lhs(3,9)=clhs172*normalslave(0,0);
        lhs(3,10)=clhs173*normalslave(0,0);
        lhs(3,11)=clhs174*normalslave(0,0);
        lhs(3,12)=clhs175*normalslave(0,0);
        lhs(3,13)=clhs176*normalslave(0,0);
        lhs(3,14)=clhs177*normalslave(0,0);
        lhs(3,15)=clhs178*normalslave(0,0);
        lhs(3,16)=clhs179*normalslave(0,0);
        lhs(3,17)=clhs180*normalslave(0,0);
        lhs(3,18)=clhs160*clhs4;
        lhs(3,19)=0;
        lhs(3,20)=0;
        lhs(4,0)=clhs163*normalslave(0,1);
        lhs(4,1)=clhs164*normalslave(0,1);
        lhs(4,2)=clhs165*normalslave(0,1);
        lhs(4,3)=clhs166*normalslave(0,1);
        lhs(4,4)=clhs167*normalslave(0,1);
        lhs(4,5)=clhs168*normalslave(0,1);
        lhs(4,6)=clhs169*normalslave(0,1);
        lhs(4,7)=clhs170*normalslave(0,1);
        lhs(4,8)=clhs171*normalslave(0,1);
        lhs(4,9)=clhs172*normalslave(0,1);
        lhs(4,10)=clhs173*normalslave(0,1);
        lhs(4,11)=clhs174*normalslave(0,1);
        lhs(4,12)=clhs175*normalslave(0,1);
        lhs(4,13)=clhs176*normalslave(0,1);
        lhs(4,14)=clhs177*normalslave(0,1);
        lhs(4,15)=clhs178*normalslave(0,1);
        lhs(4,16)=clhs179*normalslave(0,1);
        lhs(4,17)=clhs180*normalslave(0,1);
        lhs(4,18)=clhs161*clhs4;
        lhs(4,19)=0;
        lhs(4,20)=0;
        lhs(5,0)=clhs163*normalslave(0,2);
        lhs(5,1)=clhs164*normalslave(0,2);
        lhs(5,2)=clhs165*normalslave(0,2);
        lhs(5,3)=clhs166*normalslave(0,2);
        lhs(5,4)=clhs167*normalslave(0,2);
        lhs(5,5)=clhs168*normalslave(0,2);
        lhs(5,6)=clhs169*normalslave(0,2);
        lhs(5,7)=clhs170*normalslave(0,2);
        lhs(5,8)=clhs171*normalslave(0,2);
        lhs(5,9)=clhs172*normalslave(0,2);
        lhs(5,10)=clhs173*normalslave(0,2);
        lhs(5,11)=clhs174*normalslave(0,2);
        lhs(5,12)=clhs175*normalslave(0,2);
        lhs(5,13)=clhs176*normalslave(0,2);
        lhs(5,14)=clhs177*normalslave(0,2);
        lhs(5,15)=clhs178*normalslave(0,2);
        lhs(5,16)=clhs179*normalslave(0,2);
        lhs(5,17)=clhs180*normalslave(0,2);
        lhs(5,18)=clhs162*clhs4;
        lhs(5,19)=0;
        lhs(5,20)=0;
        lhs(6,0)=clhs181*normalslave(0,0);
        lhs(6,1)=clhs182*normalslave(0,0);
        lhs(6,2)=clhs183*normalslave(0,0);
        lhs(6,3)=clhs184*normalslave(0,0);
        lhs(6,4)=clhs185*normalslave(0,0);
        lhs(6,5)=clhs186*normalslave(0,0);
        lhs(6,6)=clhs187*normalslave(0,0);
        lhs(6,7)=clhs188*normalslave(0,0);
        lhs(6,8)=clhs189*normalslave(0,0);
        lhs(6,9)=clhs190*normalslave(0,0);
        lhs(6,10)=clhs191*normalslave(0,0);
        lhs(6,11)=clhs192*normalslave(0,0);
        lhs(6,12)=clhs193*normalslave(0,0);
        lhs(6,13)=clhs194*normalslave(0,0);
        lhs(6,14)=clhs195*normalslave(0,0);
        lhs(6,15)=clhs196*normalslave(0,0);
        lhs(6,16)=clhs197*normalslave(0,0);
        lhs(6,17)=clhs198*normalslave(0,0);
        lhs(6,18)=clhs160*clhs7;
        lhs(6,19)=0;
        lhs(6,20)=0;
        lhs(7,0)=clhs181*normalslave(0,1);
        lhs(7,1)=clhs182*normalslave(0,1);
        lhs(7,2)=clhs183*normalslave(0,1);
        lhs(7,3)=clhs184*normalslave(0,1);
        lhs(7,4)=clhs185*normalslave(0,1);
        lhs(7,5)=clhs186*normalslave(0,1);
        lhs(7,6)=clhs187*normalslave(0,1);
        lhs(7,7)=clhs188*normalslave(0,1);
        lhs(7,8)=clhs189*normalslave(0,1);
        lhs(7,9)=clhs190*normalslave(0,1);
        lhs(7,10)=clhs191*normalslave(0,1);
        lhs(7,11)=clhs192*normalslave(0,1);
        lhs(7,12)=clhs193*normalslave(0,1);
        lhs(7,13)=clhs194*normalslave(0,1);
        lhs(7,14)=clhs195*normalslave(0,1);
        lhs(7,15)=clhs196*normalslave(0,1);
        lhs(7,16)=clhs197*normalslave(0,1);
        lhs(7,17)=clhs198*normalslave(0,1);
        lhs(7,18)=clhs161*clhs7;
        lhs(7,19)=0;
        lhs(7,20)=0;
        lhs(8,0)=clhs181*normalslave(0,2);
        lhs(8,1)=clhs182*normalslave(0,2);
        lhs(8,2)=clhs183*normalslave(0,2);
        lhs(8,3)=clhs184*normalslave(0,2);
        lhs(8,4)=clhs185*normalslave(0,2);
        lhs(8,5)=clhs186*normalslave(0,2);
        lhs(8,6)=clhs187*normalslave(0,2);
        lhs(8,7)=clhs188*normalslave(0,2);
        lhs(8,8)=clhs189*normalslave(0,2);
        lhs(8,9)=clhs190*normalslave(0,2);
        lhs(8,10)=clhs191*normalslave(0,2);
        lhs(8,11)=clhs192*normalslave(0,2);
        lhs(8,12)=clhs193*normalslave(0,2);
        lhs(8,13)=clhs194*normalslave(0,2);
        lhs(8,14)=clhs195*normalslave(0,2);
        lhs(8,15)=clhs196*normalslave(0,2);
        lhs(8,16)=clhs197*normalslave(0,2);
        lhs(8,17)=clhs198*normalslave(0,2);
        lhs(8,18)=clhs162*clhs7;
        lhs(8,19)=0;
        lhs(8,20)=0;
        lhs(9,0)=clhs18*clhs199;
        lhs(9,1)=clhs18*clhs200;
        lhs(9,2)=clhs18*clhs201;
        lhs(9,3)=clhs18*clhs202;
        lhs(9,4)=clhs18*clhs203;
        lhs(9,5)=clhs18*clhs204;
        lhs(9,6)=clhs18*clhs205;
        lhs(9,7)=clhs18*clhs206;
        lhs(9,8)=clhs18*clhs207;
        lhs(9,9)=-clhs208*normalslave(0,0);
        lhs(9,10)=-clhs209*normalslave(0,0);
        lhs(9,11)=-clhs210*normalslave(0,0);
        lhs(9,12)=-clhs211*normalslave(0,0);
        lhs(9,13)=-clhs212*normalslave(0,0);
        lhs(9,14)=-clhs213*normalslave(0,0);
        lhs(9,15)=-clhs214*normalslave(0,0);
        lhs(9,16)=-clhs215*normalslave(0,0);
        lhs(9,17)=-clhs216*normalslave(0,0);
        lhs(9,18)=-clhs160*clhs18;
        lhs(9,19)=0;
        lhs(9,20)=0;
        lhs(10,0)=clhs18*clhs217;
        lhs(10,1)=clhs18*clhs218;
        lhs(10,2)=clhs18*clhs219;
        lhs(10,3)=clhs18*clhs220;
        lhs(10,4)=clhs18*clhs221;
        lhs(10,5)=clhs18*clhs222;
        lhs(10,6)=clhs18*clhs223;
        lhs(10,7)=clhs18*clhs224;
        lhs(10,8)=clhs18*clhs225;
        lhs(10,9)=-clhs208*normalslave(0,1);
        lhs(10,10)=-clhs209*normalslave(0,1);
        lhs(10,11)=-clhs210*normalslave(0,1);
        lhs(10,12)=-clhs211*normalslave(0,1);
        lhs(10,13)=-clhs212*normalslave(0,1);
        lhs(10,14)=-clhs213*normalslave(0,1);
        lhs(10,15)=-clhs214*normalslave(0,1);
        lhs(10,16)=-clhs215*normalslave(0,1);
        lhs(10,17)=-clhs216*normalslave(0,1);
        lhs(10,18)=-clhs161*clhs18;
        lhs(10,19)=0;
        lhs(10,20)=0;
        lhs(11,0)=clhs18*clhs226;
        lhs(11,1)=clhs18*clhs227;
        lhs(11,2)=clhs18*clhs228;
        lhs(11,3)=clhs18*clhs229;
        lhs(11,4)=clhs18*clhs230;
        lhs(11,5)=clhs18*clhs231;
        lhs(11,6)=clhs18*clhs232;
        lhs(11,7)=clhs18*clhs233;
        lhs(11,8)=clhs18*clhs234;
        lhs(11,9)=-clhs208*normalslave(0,2);
        lhs(11,10)=-clhs209*normalslave(0,2);
        lhs(11,11)=-clhs210*normalslave(0,2);
        lhs(11,12)=-clhs211*normalslave(0,2);
        lhs(11,13)=-clhs212*normalslave(0,2);
        lhs(11,14)=-clhs213*normalslave(0,2);
        lhs(11,15)=-clhs214*normalslave(0,2);
        lhs(11,16)=-clhs215*normalslave(0,2);
        lhs(11,17)=-clhs216*normalslave(0,2);
        lhs(11,18)=-clhs162*clhs18;
        lhs(11,19)=0;
        lhs(11,20)=0;
        lhs(12,0)=clhs199*clhs20;
        lhs(12,1)=clhs20*clhs200;
        lhs(12,2)=clhs20*clhs201;
        lhs(12,3)=clhs20*clhs202;
        lhs(12,4)=clhs20*clhs203;
        lhs(12,5)=clhs20*clhs204;
        lhs(12,6)=clhs20*clhs205;
        lhs(12,7)=clhs20*clhs206;
        lhs(12,8)=clhs20*clhs207;
        lhs(12,9)=-clhs235*normalslave(0,0);
        lhs(12,10)=-clhs236*normalslave(0,0);
        lhs(12,11)=-clhs237*normalslave(0,0);
        lhs(12,12)=-clhs238*normalslave(0,0);
        lhs(12,13)=-clhs239*normalslave(0,0);
        lhs(12,14)=-clhs240*normalslave(0,0);
        lhs(12,15)=-clhs241*normalslave(0,0);
        lhs(12,16)=-clhs242*normalslave(0,0);
        lhs(12,17)=-clhs243*normalslave(0,0);
        lhs(12,18)=-clhs160*clhs20;
        lhs(12,19)=0;
        lhs(12,20)=0;
        lhs(13,0)=clhs20*clhs217;
        lhs(13,1)=clhs20*clhs218;
        lhs(13,2)=clhs20*clhs219;
        lhs(13,3)=clhs20*clhs220;
        lhs(13,4)=clhs20*clhs221;
        lhs(13,5)=clhs20*clhs222;
        lhs(13,6)=clhs20*clhs223;
        lhs(13,7)=clhs20*clhs224;
        lhs(13,8)=clhs20*clhs225;
        lhs(13,9)=-clhs235*normalslave(0,1);
        lhs(13,10)=-clhs236*normalslave(0,1);
        lhs(13,11)=-clhs237*normalslave(0,1);
        lhs(13,12)=-clhs238*normalslave(0,1);
        lhs(13,13)=-clhs239*normalslave(0,1);
        lhs(13,14)=-clhs240*normalslave(0,1);
        lhs(13,15)=-clhs241*normalslave(0,1);
        lhs(13,16)=-clhs242*normalslave(0,1);
        lhs(13,17)=-clhs243*normalslave(0,1);
        lhs(13,18)=-clhs161*clhs20;
        lhs(13,19)=0;
        lhs(13,20)=0;
        lhs(14,0)=clhs20*clhs226;
        lhs(14,1)=clhs20*clhs227;
        lhs(14,2)=clhs20*clhs228;
        lhs(14,3)=clhs20*clhs229;
        lhs(14,4)=clhs20*clhs230;
        lhs(14,5)=clhs20*clhs231;
        lhs(14,6)=clhs20*clhs232;
        lhs(14,7)=clhs20*clhs233;
        lhs(14,8)=clhs20*clhs234;
        lhs(14,9)=-clhs235*normalslave(0,2);
        lhs(14,10)=-clhs236*normalslave(0,2);
        lhs(14,11)=-clhs237*normalslave(0,2);
        lhs(14,12)=-clhs238*normalslave(0,2);
        lhs(14,13)=-clhs239*normalslave(0,2);
        lhs(14,14)=-clhs240*normalslave(0,2);
        lhs(14,15)=-clhs241*normalslave(0,2);
        lhs(14,16)=-clhs242*normalslave(0,2);
        lhs(14,17)=-clhs243*normalslave(0,2);
        lhs(14,18)=-clhs162*clhs20;
        lhs(14,19)=0;
        lhs(14,20)=0;
        lhs(15,0)=clhs199*clhs22;
        lhs(15,1)=clhs200*clhs22;
        lhs(15,2)=clhs201*clhs22;
        lhs(15,3)=clhs202*clhs22;
        lhs(15,4)=clhs203*clhs22;
        lhs(15,5)=clhs204*clhs22;
        lhs(15,6)=clhs205*clhs22;
        lhs(15,7)=clhs206*clhs22;
        lhs(15,8)=clhs207*clhs22;
        lhs(15,9)=-clhs244*normalslave(0,0);
        lhs(15,10)=-clhs245*normalslave(0,0);
        lhs(15,11)=-clhs246*normalslave(0,0);
        lhs(15,12)=-clhs247*normalslave(0,0);
        lhs(15,13)=-clhs248*normalslave(0,0);
        lhs(15,14)=-clhs249*normalslave(0,0);
        lhs(15,15)=-clhs250*normalslave(0,0);
        lhs(15,16)=-clhs251*normalslave(0,0);
        lhs(15,17)=-clhs252*normalslave(0,0);
        lhs(15,18)=-clhs160*clhs22;
        lhs(15,19)=0;
        lhs(15,20)=0;
        lhs(16,0)=clhs217*clhs22;
        lhs(16,1)=clhs218*clhs22;
        lhs(16,2)=clhs219*clhs22;
        lhs(16,3)=clhs22*clhs220;
        lhs(16,4)=clhs22*clhs221;
        lhs(16,5)=clhs22*clhs222;
        lhs(16,6)=clhs22*clhs223;
        lhs(16,7)=clhs22*clhs224;
        lhs(16,8)=clhs22*clhs225;
        lhs(16,9)=-clhs244*normalslave(0,1);
        lhs(16,10)=-clhs245*normalslave(0,1);
        lhs(16,11)=-clhs246*normalslave(0,1);
        lhs(16,12)=-clhs247*normalslave(0,1);
        lhs(16,13)=-clhs248*normalslave(0,1);
        lhs(16,14)=-clhs249*normalslave(0,1);
        lhs(16,15)=-clhs250*normalslave(0,1);
        lhs(16,16)=-clhs251*normalslave(0,1);
        lhs(16,17)=-clhs252*normalslave(0,1);
        lhs(16,18)=-clhs161*clhs22;
        lhs(16,19)=0;
        lhs(16,20)=0;
        lhs(17,0)=clhs22*clhs226;
        lhs(17,1)=clhs22*clhs227;
        lhs(17,2)=clhs22*clhs228;
        lhs(17,3)=clhs22*clhs229;
        lhs(17,4)=clhs22*clhs230;
        lhs(17,5)=clhs22*clhs231;
        lhs(17,6)=clhs22*clhs232;
        lhs(17,7)=clhs22*clhs233;
        lhs(17,8)=clhs22*clhs234;
        lhs(17,9)=-clhs244*normalslave(0,2);
        lhs(17,10)=-clhs245*normalslave(0,2);
        lhs(17,11)=-clhs246*normalslave(0,2);
        lhs(17,12)=-clhs247*normalslave(0,2);
        lhs(17,13)=-clhs248*normalslave(0,2);
        lhs(17,14)=-clhs249*normalslave(0,2);
        lhs(17,15)=-clhs250*normalslave(0,2);
        lhs(17,16)=-clhs251*normalslave(0,2);
        lhs(17,17)=-clhs252*normalslave(0,2);
        lhs(17,18)=-clhs162*clhs22;
        lhs(17,19)=0;
        lhs(17,20)=0;
        lhs(18,0)=clhs15*scale_factor;
        lhs(18,1)=clhs34*scale_factor;
        lhs(18,2)=clhs40*scale_factor;
        lhs(18,3)=clhs46*scale_factor;
        lhs(18,4)=clhs52*scale_factor;
        lhs(18,5)=clhs58*scale_factor;
        lhs(18,6)=clhs64*scale_factor;
        lhs(18,7)=clhs70*scale_factor;
        lhs(18,8)=clhs76*scale_factor;
        lhs(18,9)=-clhs85*scale_factor;
        lhs(18,10)=-clhs94*scale_factor;
        lhs(18,11)=-clhs103*scale_factor;
        lhs(18,12)=-clhs112*scale_factor;
        lhs(18,13)=-clhs121*scale_factor;
        lhs(18,14)=-clhs130*scale_factor;
        lhs(18,15)=-clhs139*scale_factor;
        lhs(18,16)=-clhs148*scale_factor;
        lhs(18,17)=-clhs157*scale_factor;
        lhs(18,18)=0;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=0;
        lhs(19,1)=0;
        lhs(19,2)=0;
        lhs(19,3)=0;
        lhs(19,4)=0;
        lhs(19,5)=0;
        lhs(19,6)=0;
        lhs(19,7)=0;
        lhs(19,8)=0;
        lhs(19,9)=0;
        lhs(19,10)=0;
        lhs(19,11)=0;
        lhs(19,12)=0;
        lhs(19,13)=0;
        lhs(19,14)=0;
        lhs(19,15)=0;
        lhs(19,16)=0;
        lhs(19,17)=0;
        lhs(19,18)=0;
        lhs(19,19)=clhs253;
        lhs(19,20)=0;
        lhs(20,0)=0;
        lhs(20,1)=0;
        lhs(20,2)=0;
        lhs(20,3)=0;
        lhs(20,4)=0;
        lhs(20,5)=0;
        lhs(20,6)=0;
        lhs(20,7)=0;
        lhs(20,8)=0;
        lhs(20,9)=0;
        lhs(20,10)=0;
        lhs(20,11)=0;
        lhs(20,12)=0;
        lhs(20,13)=0;
        lhs(20,14)=0;
        lhs(20,15)=0;
        lhs(20,16)=0;
        lhs(20,17)=0;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=clhs253;
    }
    else if (rActiveInactive == 5 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(0,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*normalslave(0,0)*penalty_parameter;
        const double clhs17 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs18 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs19 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs20 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs21 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs22 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs23 =     normalslave(2,0)*(clhs12*clhs18 + clhs13*clhs20 + clhs14*clhs22 + clhs17) + normalslave(2,1)*(clhs1*clhs18 + clhs20*clhs3 + clhs22*clhs6) + normalslave(2,2)*(clhs10*clhs20 + clhs11*clhs22 + clhs18*clhs9);
        const double clhs24 =     clhs23*normalslave(2,0)*penalty_parameter;
        const double clhs25 =     X1(0,0) + u1(0,0);
        const double clhs26 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs27 =     X1(1,0) + u1(1,0);
        const double clhs28 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs29 =     X1(2,0) + u1(2,0);
        const double clhs30 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs31 =     X1(0,1) + u1(0,1);
        const double clhs32 =     X1(1,1) + u1(1,1);
        const double clhs33 =     X1(2,1) + u1(2,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs25*clhs26 + clhs27*clhs28 + clhs29*clhs30) + normalslave(0,1)*(-clhs0*clhs1 + clhs26*clhs31 + clhs28*clhs32 - clhs3*clhs4 + clhs30*clhs33 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs26*clhs34 + clhs28*clhs35 + clhs30*clhs36));
        const double clhs38 =     clhs37*normalslave(0,0);
        const double clhs39 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs40 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs41 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs42 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs12*clhs17 - clhs13*clhs19 - clhs14*clhs21 + clhs25*clhs39 + clhs27*clhs40 + clhs29*clhs41) + normalslave(2,1)*(-clhs1*clhs17 - clhs19*clhs3 - clhs21*clhs6 + clhs31*clhs39 + clhs32*clhs40 + clhs33*clhs41) + normalslave(2,2)*(-clhs10*clhs19 - clhs11*clhs21 - clhs17*clhs9 + clhs34*clhs39 + clhs35*clhs40 + clhs36*clhs41));
        const double clhs43 =     clhs42*normalslave(2,0);
        const double clhs44 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs45 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs46 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs47 =     normalslave(0,0)*(clhs12*clhs44 + clhs13*clhs45 + clhs14*clhs46) + normalslave(0,1)*(clhs0 + clhs1*clhs44 + clhs3*clhs45 + clhs46*clhs6) + normalslave(0,2)*(clhs10*clhs45 + clhs11*clhs46 + clhs44*clhs9);
        const double clhs48 =     clhs47*normalslave(0,0)*penalty_parameter;
        const double clhs49 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs50 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs51 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs52 =     normalslave(2,0)*(clhs12*clhs49 + clhs13*clhs50 + clhs14*clhs51) + normalslave(2,1)*(clhs1*clhs49 + clhs17 + clhs3*clhs50 + clhs51*clhs6) + normalslave(2,2)*(clhs10*clhs50 + clhs11*clhs51 + clhs49*clhs9);
        const double clhs53 =     clhs52*normalslave(2,0)*penalty_parameter;
        const double clhs54 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs55 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs56 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs57 =     normalslave(0,0)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56) + normalslave(0,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6) + normalslave(0,2)*(clhs0 + clhs10*clhs55 + clhs11*clhs56 + clhs54*clhs9);
        const double clhs58 =     clhs57*normalslave(0,0)*penalty_parameter;
        const double clhs59 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs60 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs61 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs62 =     normalslave(2,0)*(clhs12*clhs59 + clhs13*clhs60 + clhs14*clhs61) + normalslave(2,1)*(clhs1*clhs59 + clhs3*clhs60 + clhs6*clhs61) + normalslave(2,2)*(clhs10*clhs60 + clhs11*clhs61 + clhs17 + clhs59*clhs9);
        const double clhs63 =     clhs62*normalslave(2,0)*penalty_parameter;
        const double clhs64 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs65 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs66 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs67 =     normalslave(0,0)*(clhs12*clhs64 + clhs13*clhs65 + clhs14*clhs66 + clhs4) + normalslave(0,1)*(clhs1*clhs64 + clhs3*clhs65 + clhs6*clhs66) + normalslave(0,2)*(clhs10*clhs65 + clhs11*clhs66 + clhs64*clhs9);
        const double clhs68 =     clhs67*normalslave(0,0)*penalty_parameter;
        const double clhs69 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs70 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs71 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs72 =     normalslave(2,0)*(clhs12*clhs69 + clhs13*clhs70 + clhs14*clhs71 + clhs19) + normalslave(2,1)*(clhs1*clhs69 + clhs3*clhs70 + clhs6*clhs71) + normalslave(2,2)*(clhs10*clhs70 + clhs11*clhs71 + clhs69*clhs9);
        const double clhs73 =     clhs72*normalslave(2,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs75 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs76 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs77 =     normalslave(0,0)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76) + normalslave(0,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs4 + clhs6*clhs76) + normalslave(0,2)*(clhs10*clhs75 + clhs11*clhs76 + clhs74*clhs9);
        const double clhs78 =     clhs77*normalslave(0,0)*penalty_parameter;
        const double clhs79 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs80 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs81 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs82 =     normalslave(2,0)*(clhs12*clhs79 + clhs13*clhs80 + clhs14*clhs81) + normalslave(2,1)*(clhs1*clhs79 + clhs19 + clhs3*clhs80 + clhs6*clhs81) + normalslave(2,2)*(clhs10*clhs80 + clhs11*clhs81 + clhs79*clhs9);
        const double clhs83 =     clhs82*normalslave(2,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs85 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs86 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs87 =     normalslave(0,0)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86) + normalslave(0,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs6*clhs86) + normalslave(0,2)*(clhs10*clhs85 + clhs11*clhs86 + clhs4 + clhs84*clhs9);
        const double clhs88 =     clhs87*normalslave(0,0)*penalty_parameter;
        const double clhs89 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs90 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs91 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs92 =     normalslave(2,0)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91) + normalslave(2,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91) + normalslave(2,2)*(clhs10*clhs90 + clhs11*clhs91 + clhs19 + clhs89*clhs9);
        const double clhs93 =     clhs92*normalslave(2,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs95 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs96 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs97 =     normalslave(0,0)*(clhs12*clhs94 + clhs13*clhs95 + clhs14*clhs96 + clhs7) + normalslave(0,1)*(clhs1*clhs94 + clhs3*clhs95 + clhs6*clhs96) + normalslave(0,2)*(clhs10*clhs95 + clhs11*clhs96 + clhs9*clhs94);
        const double clhs98 =     clhs97*normalslave(0,0)*penalty_parameter;
        const double clhs99 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs100 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs101 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs102 =     normalslave(2,0)*(clhs100*clhs13 + clhs101*clhs14 + clhs12*clhs99 + clhs21) + normalslave(2,1)*(clhs1*clhs99 + clhs100*clhs3 + clhs101*clhs6) + normalslave(2,2)*(clhs10*clhs100 + clhs101*clhs11 + clhs9*clhs99);
        const double clhs103 =     clhs102*normalslave(2,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs105 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs106 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs107 =     normalslave(0,0)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14) + normalslave(0,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs7) + normalslave(0,2)*(clhs10*clhs105 + clhs104*clhs9 + clhs106*clhs11);
        const double clhs108 =     clhs107*normalslave(0,0)*penalty_parameter;
        const double clhs109 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs110 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs111 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs112 =     normalslave(2,0)*(clhs109*clhs12 + clhs110*clhs13 + clhs111*clhs14) + normalslave(2,1)*(clhs1*clhs109 + clhs110*clhs3 + clhs111*clhs6 + clhs21) + normalslave(2,2)*(clhs10*clhs110 + clhs109*clhs9 + clhs11*clhs111);
        const double clhs113 =     clhs112*normalslave(2,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs115 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs116 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs117 =     normalslave(0,0)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14) + normalslave(0,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6) + normalslave(0,2)*(clhs10*clhs115 + clhs11*clhs116 + clhs114*clhs9 + clhs7);
        const double clhs118 =     clhs117*normalslave(0,0)*penalty_parameter;
        const double clhs119 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs120 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs121 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs122 =     normalslave(2,0)*(clhs119*clhs12 + clhs120*clhs13 + clhs121*clhs14) + normalslave(2,1)*(clhs1*clhs119 + clhs120*clhs3 + clhs121*clhs6) + normalslave(2,2)*(clhs10*clhs120 + clhs11*clhs121 + clhs119*clhs9 + clhs21);
        const double clhs123 =     clhs122*normalslave(2,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs125 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs126 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs127 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs128 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs129 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs130 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs131 =     normalslave(0,0)*(-clhs12*clhs124 + clhs126*clhs25 + clhs127*clhs27 + clhs128*clhs29 - clhs129*clhs13 - clhs130*clhs14 + clhs26) + normalslave(0,1)*(-clhs1*clhs124 + clhs126*clhs31 + clhs127*clhs32 + clhs128*clhs33 - clhs129*clhs3 - clhs130*clhs6) + normalslave(0,2)*(-clhs10*clhs129 - clhs11*clhs130 - clhs124*clhs9 + clhs126*clhs34 + clhs127*clhs35 + clhs128*clhs36);
        const double clhs132 =     clhs131*normalslave(0,0)*penalty_parameter;
        const double clhs133 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs134 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs135 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs136 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs137 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs138 =     normalslave(2,0)*(-clhs12*clhs125 - clhs13*clhs136 + clhs133*clhs25 + clhs134*clhs27 + clhs135*clhs29 - clhs137*clhs14 + clhs39) + normalslave(2,1)*(-clhs1*clhs125 + clhs133*clhs31 + clhs134*clhs32 + clhs135*clhs33 - clhs136*clhs3 - clhs137*clhs6) + normalslave(2,2)*(-clhs10*clhs136 - clhs11*clhs137 - clhs125*clhs9 + clhs133*clhs34 + clhs134*clhs35 + clhs135*clhs36);
        const double clhs139 =     clhs138*normalslave(2,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs141 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs142 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs143 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs144 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs145 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs146 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs147 =     normalslave(0,0)*(-clhs12*clhs140 - clhs13*clhs145 - clhs14*clhs146 + clhs142*clhs25 + clhs143*clhs27 + clhs144*clhs29) + normalslave(0,1)*(-clhs1*clhs140 + clhs142*clhs31 + clhs143*clhs32 + clhs144*clhs33 - clhs145*clhs3 - clhs146*clhs6 + clhs26) + normalslave(0,2)*(-clhs10*clhs145 - clhs11*clhs146 - clhs140*clhs9 + clhs142*clhs34 + clhs143*clhs35 + clhs144*clhs36);
        const double clhs148 =     clhs147*normalslave(0,0)*penalty_parameter;
        const double clhs149 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs150 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs151 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs152 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs153 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs154 =     normalslave(2,0)*(-clhs12*clhs141 - clhs13*clhs152 - clhs14*clhs153 + clhs149*clhs25 + clhs150*clhs27 + clhs151*clhs29) + normalslave(2,1)*(-clhs1*clhs141 + clhs149*clhs31 + clhs150*clhs32 + clhs151*clhs33 - clhs152*clhs3 - clhs153*clhs6 + clhs39) + normalslave(2,2)*(-clhs10*clhs152 - clhs11*clhs153 - clhs141*clhs9 + clhs149*clhs34 + clhs150*clhs35 + clhs151*clhs36);
        const double clhs155 =     clhs154*normalslave(2,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs157 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs158 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs159 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs160 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs161 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs162 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs163 =     normalslave(0,0)*(-clhs12*clhs156 - clhs13*clhs161 - clhs14*clhs162 + clhs158*clhs25 + clhs159*clhs27 + clhs160*clhs29) + normalslave(0,1)*(-clhs1*clhs156 + clhs158*clhs31 + clhs159*clhs32 + clhs160*clhs33 - clhs161*clhs3 - clhs162*clhs6) + normalslave(0,2)*(-clhs10*clhs161 - clhs11*clhs162 - clhs156*clhs9 + clhs158*clhs34 + clhs159*clhs35 + clhs160*clhs36 + clhs26);
        const double clhs164 =     clhs163*normalslave(0,0)*penalty_parameter;
        const double clhs165 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs166 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs167 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs168 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs169 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs170 =     normalslave(2,0)*(-clhs12*clhs157 - clhs13*clhs168 - clhs14*clhs169 + clhs165*clhs25 + clhs166*clhs27 + clhs167*clhs29) + normalslave(2,1)*(-clhs1*clhs157 + clhs165*clhs31 + clhs166*clhs32 + clhs167*clhs33 - clhs168*clhs3 - clhs169*clhs6) + normalslave(2,2)*(-clhs10*clhs168 - clhs11*clhs169 - clhs157*clhs9 + clhs165*clhs34 + clhs166*clhs35 + clhs167*clhs36 + clhs39);
        const double clhs171 =     clhs170*normalslave(2,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs173 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs174 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs175 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs176 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs177 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs178 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs179 =     normalslave(0,0)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 + clhs174*clhs25 + clhs175*clhs27 + clhs176*clhs29 + clhs28) + normalslave(0,1)*(-clhs1*clhs172 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6) + normalslave(0,2)*(-clhs10*clhs177 - clhs11*clhs178 - clhs172*clhs9 + clhs174*clhs34 + clhs175*clhs35 + clhs176*clhs36);
        const double clhs180 =     clhs179*normalslave(0,0)*penalty_parameter;
        const double clhs181 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs182 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs183 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs184 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs185 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs186 =     normalslave(2,0)*(-clhs12*clhs173 - clhs13*clhs184 - clhs14*clhs185 + clhs181*clhs25 + clhs182*clhs27 + clhs183*clhs29 + clhs40) + normalslave(2,1)*(-clhs1*clhs173 + clhs181*clhs31 + clhs182*clhs32 + clhs183*clhs33 - clhs184*clhs3 - clhs185*clhs6) + normalslave(2,2)*(-clhs10*clhs184 - clhs11*clhs185 - clhs173*clhs9 + clhs181*clhs34 + clhs182*clhs35 + clhs183*clhs36);
        const double clhs187 =     clhs186*normalslave(2,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs189 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs190 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs191 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs192 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs193 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs194 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs195 =     normalslave(0,0)*(-clhs12*clhs188 - clhs13*clhs193 - clhs14*clhs194 + clhs190*clhs25 + clhs191*clhs27 + clhs192*clhs29) + normalslave(0,1)*(-clhs1*clhs188 + clhs190*clhs31 + clhs191*clhs32 + clhs192*clhs33 - clhs193*clhs3 - clhs194*clhs6 + clhs28) + normalslave(0,2)*(-clhs10*clhs193 - clhs11*clhs194 - clhs188*clhs9 + clhs190*clhs34 + clhs191*clhs35 + clhs192*clhs36);
        const double clhs196 =     clhs195*normalslave(0,0)*penalty_parameter;
        const double clhs197 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs198 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs199 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs200 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs201 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs202 =     normalslave(2,0)*(-clhs12*clhs189 - clhs13*clhs200 - clhs14*clhs201 + clhs197*clhs25 + clhs198*clhs27 + clhs199*clhs29) + normalslave(2,1)*(-clhs1*clhs189 + clhs197*clhs31 + clhs198*clhs32 + clhs199*clhs33 - clhs200*clhs3 - clhs201*clhs6 + clhs40) + normalslave(2,2)*(-clhs10*clhs200 - clhs11*clhs201 - clhs189*clhs9 + clhs197*clhs34 + clhs198*clhs35 + clhs199*clhs36);
        const double clhs203 =     clhs202*normalslave(2,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs205 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs206 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs207 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs208 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs209 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs210 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs211 =     normalslave(0,0)*(-clhs12*clhs204 - clhs13*clhs209 - clhs14*clhs210 + clhs206*clhs25 + clhs207*clhs27 + clhs208*clhs29) + normalslave(0,1)*(-clhs1*clhs204 + clhs206*clhs31 + clhs207*clhs32 + clhs208*clhs33 - clhs209*clhs3 - clhs210*clhs6) + normalslave(0,2)*(-clhs10*clhs209 - clhs11*clhs210 - clhs204*clhs9 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs28);
        const double clhs212 =     clhs211*normalslave(0,0)*penalty_parameter;
        const double clhs213 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs214 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs215 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs216 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs217 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs218 =     normalslave(2,0)*(-clhs12*clhs205 - clhs13*clhs216 - clhs14*clhs217 + clhs213*clhs25 + clhs214*clhs27 + clhs215*clhs29) + normalslave(2,1)*(-clhs1*clhs205 + clhs213*clhs31 + clhs214*clhs32 + clhs215*clhs33 - clhs216*clhs3 - clhs217*clhs6) + normalslave(2,2)*(-clhs10*clhs216 - clhs11*clhs217 - clhs205*clhs9 + clhs213*clhs34 + clhs214*clhs35 + clhs215*clhs36 + clhs40);
        const double clhs219 =     clhs218*normalslave(2,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs221 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs222 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs223 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs224 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs225 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs226 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs227 =     normalslave(0,0)*(-clhs12*clhs220 - clhs13*clhs225 - clhs14*clhs226 + clhs222*clhs25 + clhs223*clhs27 + clhs224*clhs29 + clhs30) + normalslave(0,1)*(-clhs1*clhs220 + clhs222*clhs31 + clhs223*clhs32 + clhs224*clhs33 - clhs225*clhs3 - clhs226*clhs6) + normalslave(0,2)*(-clhs10*clhs225 - clhs11*clhs226 - clhs220*clhs9 + clhs222*clhs34 + clhs223*clhs35 + clhs224*clhs36);
        const double clhs228 =     clhs227*normalslave(0,0)*penalty_parameter;
        const double clhs229 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs230 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs231 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs232 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs233 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs234 =     normalslave(2,0)*(-clhs12*clhs221 - clhs13*clhs232 - clhs14*clhs233 + clhs229*clhs25 + clhs230*clhs27 + clhs231*clhs29 + clhs41) + normalslave(2,1)*(-clhs1*clhs221 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6) + normalslave(2,2)*(-clhs10*clhs232 - clhs11*clhs233 - clhs221*clhs9 + clhs229*clhs34 + clhs230*clhs35 + clhs231*clhs36);
        const double clhs235 =     clhs234*normalslave(2,0)*penalty_parameter;
        const double clhs236 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs237 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs238 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs239 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs240 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs241 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs242 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs243 =     normalslave(0,0)*(-clhs12*clhs236 - clhs13*clhs241 - clhs14*clhs242 + clhs238*clhs25 + clhs239*clhs27 + clhs240*clhs29) + normalslave(0,1)*(-clhs1*clhs236 + clhs238*clhs31 + clhs239*clhs32 + clhs240*clhs33 - clhs241*clhs3 - clhs242*clhs6 + clhs30) + normalslave(0,2)*(-clhs10*clhs241 - clhs11*clhs242 - clhs236*clhs9 + clhs238*clhs34 + clhs239*clhs35 + clhs240*clhs36);
        const double clhs244 =     clhs243*normalslave(0,0)*penalty_parameter;
        const double clhs245 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs246 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs247 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs248 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs249 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs250 =     normalslave(2,0)*(-clhs12*clhs237 - clhs13*clhs248 - clhs14*clhs249 + clhs245*clhs25 + clhs246*clhs27 + clhs247*clhs29) + normalslave(2,1)*(-clhs1*clhs237 + clhs245*clhs31 + clhs246*clhs32 + clhs247*clhs33 - clhs248*clhs3 - clhs249*clhs6 + clhs41) + normalslave(2,2)*(-clhs10*clhs248 - clhs11*clhs249 - clhs237*clhs9 + clhs245*clhs34 + clhs246*clhs35 + clhs247*clhs36);
        const double clhs251 =     clhs250*normalslave(2,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs253 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs254 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs255 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs256 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs257 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs258 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs259 =     normalslave(0,0)*(-clhs12*clhs252 - clhs13*clhs257 - clhs14*clhs258 + clhs25*clhs254 + clhs255*clhs27 + clhs256*clhs29) + normalslave(0,1)*(-clhs1*clhs252 + clhs254*clhs31 + clhs255*clhs32 + clhs256*clhs33 - clhs257*clhs3 - clhs258*clhs6) + normalslave(0,2)*(-clhs10*clhs257 - clhs11*clhs258 - clhs252*clhs9 + clhs254*clhs34 + clhs255*clhs35 + clhs256*clhs36 + clhs30);
        const double clhs260 =     clhs259*normalslave(0,0)*penalty_parameter;
        const double clhs261 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs262 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs263 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs264 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs265 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs266 =     normalslave(2,0)*(-clhs12*clhs253 - clhs13*clhs264 - clhs14*clhs265 + clhs25*clhs261 + clhs262*clhs27 + clhs263*clhs29) + normalslave(2,1)*(-clhs1*clhs253 + clhs261*clhs31 + clhs262*clhs32 + clhs263*clhs33 - clhs264*clhs3 - clhs265*clhs6) + normalslave(2,2)*(-clhs10*clhs264 - clhs11*clhs265 - clhs253*clhs9 + clhs261*clhs34 + clhs262*clhs35 + clhs263*clhs36 + clhs41);
        const double clhs267 =     clhs266*normalslave(2,0)*penalty_parameter;
        const double clhs268 =     normalslave(0,0)*scale_factor;
        const double clhs269 =     normalslave(2,0)*scale_factor;
        const double clhs270 =     clhs15*normalslave(0,1)*penalty_parameter;
        const double clhs271 =     clhs23*normalslave(2,1)*penalty_parameter;
        const double clhs272 =     clhs37*normalslave(0,1);
        const double clhs273 =     clhs42*normalslave(2,1);
        const double clhs274 =     clhs47*normalslave(0,1)*penalty_parameter;
        const double clhs275 =     clhs52*normalslave(2,1)*penalty_parameter;
        const double clhs276 =     clhs57*normalslave(0,1)*penalty_parameter;
        const double clhs277 =     clhs62*normalslave(2,1)*penalty_parameter;
        const double clhs278 =     clhs67*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs72*normalslave(2,1)*penalty_parameter;
        const double clhs280 =     clhs77*normalslave(0,1)*penalty_parameter;
        const double clhs281 =     clhs82*normalslave(2,1)*penalty_parameter;
        const double clhs282 =     clhs87*normalslave(0,1)*penalty_parameter;
        const double clhs283 =     clhs92*normalslave(2,1)*penalty_parameter;
        const double clhs284 =     clhs97*normalslave(0,1)*penalty_parameter;
        const double clhs285 =     clhs102*normalslave(2,1)*penalty_parameter;
        const double clhs286 =     clhs107*normalslave(0,1)*penalty_parameter;
        const double clhs287 =     clhs112*normalslave(2,1)*penalty_parameter;
        const double clhs288 =     clhs117*normalslave(0,1)*penalty_parameter;
        const double clhs289 =     clhs122*normalslave(2,1)*penalty_parameter;
        const double clhs290 =     clhs131*normalslave(0,1)*penalty_parameter;
        const double clhs291 =     clhs138*normalslave(2,1)*penalty_parameter;
        const double clhs292 =     clhs147*normalslave(0,1)*penalty_parameter;
        const double clhs293 =     clhs154*normalslave(2,1)*penalty_parameter;
        const double clhs294 =     clhs163*normalslave(0,1)*penalty_parameter;
        const double clhs295 =     clhs170*normalslave(2,1)*penalty_parameter;
        const double clhs296 =     clhs179*normalslave(0,1)*penalty_parameter;
        const double clhs297 =     clhs186*normalslave(2,1)*penalty_parameter;
        const double clhs298 =     clhs195*normalslave(0,1)*penalty_parameter;
        const double clhs299 =     clhs202*normalslave(2,1)*penalty_parameter;
        const double clhs300 =     clhs211*normalslave(0,1)*penalty_parameter;
        const double clhs301 =     clhs218*normalslave(2,1)*penalty_parameter;
        const double clhs302 =     clhs227*normalslave(0,1)*penalty_parameter;
        const double clhs303 =     clhs234*normalslave(2,1)*penalty_parameter;
        const double clhs304 =     clhs243*normalslave(0,1)*penalty_parameter;
        const double clhs305 =     clhs250*normalslave(2,1)*penalty_parameter;
        const double clhs306 =     clhs259*normalslave(0,1)*penalty_parameter;
        const double clhs307 =     clhs266*normalslave(2,1)*penalty_parameter;
        const double clhs308 =     normalslave(0,1)*scale_factor;
        const double clhs309 =     normalslave(2,1)*scale_factor;
        const double clhs310 =     clhs15*normalslave(0,2)*penalty_parameter;
        const double clhs311 =     clhs23*normalslave(2,2)*penalty_parameter;
        const double clhs312 =     clhs37*normalslave(0,2);
        const double clhs313 =     clhs42*normalslave(2,2);
        const double clhs314 =     clhs47*normalslave(0,2)*penalty_parameter;
        const double clhs315 =     clhs52*normalslave(2,2)*penalty_parameter;
        const double clhs316 =     clhs57*normalslave(0,2)*penalty_parameter;
        const double clhs317 =     clhs62*normalslave(2,2)*penalty_parameter;
        const double clhs318 =     clhs67*normalslave(0,2)*penalty_parameter;
        const double clhs319 =     clhs72*normalslave(2,2)*penalty_parameter;
        const double clhs320 =     clhs77*normalslave(0,2)*penalty_parameter;
        const double clhs321 =     clhs82*normalslave(2,2)*penalty_parameter;
        const double clhs322 =     clhs87*normalslave(0,2)*penalty_parameter;
        const double clhs323 =     clhs92*normalslave(2,2)*penalty_parameter;
        const double clhs324 =     clhs97*normalslave(0,2)*penalty_parameter;
        const double clhs325 =     clhs102*normalslave(2,2)*penalty_parameter;
        const double clhs326 =     clhs107*normalslave(0,2)*penalty_parameter;
        const double clhs327 =     clhs112*normalslave(2,2)*penalty_parameter;
        const double clhs328 =     clhs117*normalslave(0,2)*penalty_parameter;
        const double clhs329 =     clhs122*normalslave(2,2)*penalty_parameter;
        const double clhs330 =     clhs131*normalslave(0,2)*penalty_parameter;
        const double clhs331 =     clhs138*normalslave(2,2)*penalty_parameter;
        const double clhs332 =     clhs147*normalslave(0,2)*penalty_parameter;
        const double clhs333 =     clhs154*normalslave(2,2)*penalty_parameter;
        const double clhs334 =     clhs163*normalslave(0,2)*penalty_parameter;
        const double clhs335 =     clhs170*normalslave(2,2)*penalty_parameter;
        const double clhs336 =     clhs179*normalslave(0,2)*penalty_parameter;
        const double clhs337 =     clhs186*normalslave(2,2)*penalty_parameter;
        const double clhs338 =     clhs195*normalslave(0,2)*penalty_parameter;
        const double clhs339 =     clhs202*normalslave(2,2)*penalty_parameter;
        const double clhs340 =     clhs211*normalslave(0,2)*penalty_parameter;
        const double clhs341 =     clhs218*normalslave(2,2)*penalty_parameter;
        const double clhs342 =     clhs227*normalslave(0,2)*penalty_parameter;
        const double clhs343 =     clhs234*normalslave(2,2)*penalty_parameter;
        const double clhs344 =     clhs243*normalslave(0,2)*penalty_parameter;
        const double clhs345 =     clhs250*normalslave(2,2)*penalty_parameter;
        const double clhs346 =     clhs259*normalslave(0,2)*penalty_parameter;
        const double clhs347 =     clhs266*normalslave(2,2)*penalty_parameter;
        const double clhs348 =     normalslave(0,2)*scale_factor;
        const double clhs349 =     normalslave(2,2)*scale_factor;
        const double clhs350 =     clhs15*normalslave(0,0);
        const double clhs351 =     clhs23*normalslave(2,0);
        const double clhs352 =     clhs47*normalslave(0,0);
        const double clhs353 =     clhs52*normalslave(2,0);
        const double clhs354 =     clhs57*normalslave(0,0);
        const double clhs355 =     clhs62*normalslave(2,0);
        const double clhs356 =     clhs67*normalslave(0,0);
        const double clhs357 =     clhs72*normalslave(2,0);
        const double clhs358 =     clhs77*normalslave(0,0);
        const double clhs359 =     clhs82*normalslave(2,0);
        const double clhs360 =     clhs87*normalslave(0,0);
        const double clhs361 =     clhs92*normalslave(2,0);
        const double clhs362 =     clhs97*normalslave(0,0);
        const double clhs363 =     clhs102*normalslave(2,0);
        const double clhs364 =     clhs107*normalslave(0,0);
        const double clhs365 =     clhs112*normalslave(2,0);
        const double clhs366 =     clhs117*normalslave(0,0);
        const double clhs367 =     clhs122*normalslave(2,0);
        const double clhs368 =     clhs15*normalslave(0,1);
        const double clhs369 =     clhs23*normalslave(2,1);
        const double clhs370 =     clhs47*normalslave(0,1);
        const double clhs371 =     clhs52*normalslave(2,1);
        const double clhs372 =     clhs57*normalslave(0,1);
        const double clhs373 =     clhs62*normalslave(2,1);
        const double clhs374 =     clhs67*normalslave(0,1);
        const double clhs375 =     clhs72*normalslave(2,1);
        const double clhs376 =     clhs77*normalslave(0,1);
        const double clhs377 =     clhs82*normalslave(2,1);
        const double clhs378 =     clhs87*normalslave(0,1);
        const double clhs379 =     clhs92*normalslave(2,1);
        const double clhs380 =     clhs97*normalslave(0,1);
        const double clhs381 =     clhs102*normalslave(2,1);
        const double clhs382 =     clhs107*normalslave(0,1);
        const double clhs383 =     clhs112*normalslave(2,1);
        const double clhs384 =     clhs117*normalslave(0,1);
        const double clhs385 =     clhs122*normalslave(2,1);
        const double clhs386 =     clhs15*normalslave(0,2);
        const double clhs387 =     clhs23*normalslave(2,2);
        const double clhs388 =     clhs47*normalslave(0,2);
        const double clhs389 =     clhs52*normalslave(2,2);
        const double clhs390 =     clhs57*normalslave(0,2);
        const double clhs391 =     clhs62*normalslave(2,2);
        const double clhs392 =     clhs67*normalslave(0,2);
        const double clhs393 =     clhs72*normalslave(2,2);
        const double clhs394 =     clhs77*normalslave(0,2);
        const double clhs395 =     clhs82*normalslave(2,2);
        const double clhs396 =     clhs87*normalslave(0,2);
        const double clhs397 =     clhs92*normalslave(2,2);
        const double clhs398 =     clhs97*normalslave(0,2);
        const double clhs399 =     clhs102*normalslave(2,2);
        const double clhs400 =     clhs107*normalslave(0,2);
        const double clhs401 =     clhs112*normalslave(2,2);
        const double clhs402 =     clhs117*normalslave(0,2);
        const double clhs403 =     clhs122*normalslave(2,2);
    
        lhs(0,0)=-clhs0*clhs16 - clhs17*clhs24 + clhs18*clhs43 + clhs2*clhs38;
        lhs(0,1)=-clhs0*clhs48 - clhs17*clhs53 + clhs38*clhs44 + clhs43*clhs49;
        lhs(0,2)=-clhs0*clhs58 - clhs17*clhs63 + clhs38*clhs54 + clhs43*clhs59;
        lhs(0,3)=-clhs0*clhs68 - clhs17*clhs73 + clhs38*clhs64 + clhs43*clhs69;
        lhs(0,4)=-clhs0*clhs78 - clhs17*clhs83 + clhs38*clhs74 + clhs43*clhs79;
        lhs(0,5)=-clhs0*clhs88 - clhs17*clhs93 + clhs38*clhs84 + clhs43*clhs89;
        lhs(0,6)=-clhs0*clhs98 - clhs103*clhs17 + clhs38*clhs94 + clhs43*clhs99;
        lhs(0,7)=-clhs0*clhs108 + clhs104*clhs38 + clhs109*clhs43 - clhs113*clhs17;
        lhs(0,8)=-clhs0*clhs118 + clhs114*clhs38 + clhs119*clhs43 - clhs123*clhs17;
        lhs(0,9)=clhs0*clhs132 + clhs124*clhs38 + clhs125*clhs43 + clhs139*clhs17;
        lhs(0,10)=clhs0*clhs148 + clhs140*clhs38 + clhs141*clhs43 + clhs155*clhs17;
        lhs(0,11)=clhs0*clhs164 + clhs156*clhs38 + clhs157*clhs43 + clhs17*clhs171;
        lhs(0,12)=clhs0*clhs180 + clhs17*clhs187 + clhs172*clhs38 + clhs173*clhs43;
        lhs(0,13)=clhs0*clhs196 + clhs17*clhs203 + clhs188*clhs38 + clhs189*clhs43;
        lhs(0,14)=clhs0*clhs212 + clhs17*clhs219 + clhs204*clhs38 + clhs205*clhs43;
        lhs(0,15)=clhs0*clhs228 + clhs17*clhs235 + clhs220*clhs38 + clhs221*clhs43;
        lhs(0,16)=clhs0*clhs244 + clhs17*clhs251 + clhs236*clhs38 + clhs237*clhs43;
        lhs(0,17)=clhs0*clhs260 + clhs17*clhs267 + clhs252*clhs38 + clhs253*clhs43;
        lhs(0,18)=clhs0*clhs268;
        lhs(0,19)=0;
        lhs(0,20)=clhs17*clhs269;
        lhs(1,0)=-clhs0*clhs270 - clhs17*clhs271 + clhs18*clhs273 + clhs2*clhs272;
        lhs(1,1)=-clhs0*clhs274 - clhs17*clhs275 + clhs272*clhs44 + clhs273*clhs49;
        lhs(1,2)=-clhs0*clhs276 - clhs17*clhs277 + clhs272*clhs54 + clhs273*clhs59;
        lhs(1,3)=-clhs0*clhs278 - clhs17*clhs279 + clhs272*clhs64 + clhs273*clhs69;
        lhs(1,4)=-clhs0*clhs280 - clhs17*clhs281 + clhs272*clhs74 + clhs273*clhs79;
        lhs(1,5)=-clhs0*clhs282 - clhs17*clhs283 + clhs272*clhs84 + clhs273*clhs89;
        lhs(1,6)=-clhs0*clhs284 - clhs17*clhs285 + clhs272*clhs94 + clhs273*clhs99;
        lhs(1,7)=-clhs0*clhs286 + clhs104*clhs272 + clhs109*clhs273 - clhs17*clhs287;
        lhs(1,8)=-clhs0*clhs288 + clhs114*clhs272 + clhs119*clhs273 - clhs17*clhs289;
        lhs(1,9)=clhs0*clhs290 + clhs124*clhs272 + clhs125*clhs273 + clhs17*clhs291;
        lhs(1,10)=clhs0*clhs292 + clhs140*clhs272 + clhs141*clhs273 + clhs17*clhs293;
        lhs(1,11)=clhs0*clhs294 + clhs156*clhs272 + clhs157*clhs273 + clhs17*clhs295;
        lhs(1,12)=clhs0*clhs296 + clhs17*clhs297 + clhs172*clhs272 + clhs173*clhs273;
        lhs(1,13)=clhs0*clhs298 + clhs17*clhs299 + clhs188*clhs272 + clhs189*clhs273;
        lhs(1,14)=clhs0*clhs300 + clhs17*clhs301 + clhs204*clhs272 + clhs205*clhs273;
        lhs(1,15)=clhs0*clhs302 + clhs17*clhs303 + clhs220*clhs272 + clhs221*clhs273;
        lhs(1,16)=clhs0*clhs304 + clhs17*clhs305 + clhs236*clhs272 + clhs237*clhs273;
        lhs(1,17)=clhs0*clhs306 + clhs17*clhs307 + clhs252*clhs272 + clhs253*clhs273;
        lhs(1,18)=clhs0*clhs308;
        lhs(1,19)=0;
        lhs(1,20)=clhs17*clhs309;
        lhs(2,0)=-clhs0*clhs310 - clhs17*clhs311 + clhs18*clhs313 + clhs2*clhs312;
        lhs(2,1)=-clhs0*clhs314 - clhs17*clhs315 + clhs312*clhs44 + clhs313*clhs49;
        lhs(2,2)=-clhs0*clhs316 - clhs17*clhs317 + clhs312*clhs54 + clhs313*clhs59;
        lhs(2,3)=-clhs0*clhs318 - clhs17*clhs319 + clhs312*clhs64 + clhs313*clhs69;
        lhs(2,4)=-clhs0*clhs320 - clhs17*clhs321 + clhs312*clhs74 + clhs313*clhs79;
        lhs(2,5)=-clhs0*clhs322 - clhs17*clhs323 + clhs312*clhs84 + clhs313*clhs89;
        lhs(2,6)=-clhs0*clhs324 - clhs17*clhs325 + clhs312*clhs94 + clhs313*clhs99;
        lhs(2,7)=-clhs0*clhs326 + clhs104*clhs312 + clhs109*clhs313 - clhs17*clhs327;
        lhs(2,8)=-clhs0*clhs328 + clhs114*clhs312 + clhs119*clhs313 - clhs17*clhs329;
        lhs(2,9)=clhs0*clhs330 + clhs124*clhs312 + clhs125*clhs313 + clhs17*clhs331;
        lhs(2,10)=clhs0*clhs332 + clhs140*clhs312 + clhs141*clhs313 + clhs17*clhs333;
        lhs(2,11)=clhs0*clhs334 + clhs156*clhs312 + clhs157*clhs313 + clhs17*clhs335;
        lhs(2,12)=clhs0*clhs336 + clhs17*clhs337 + clhs172*clhs312 + clhs173*clhs313;
        lhs(2,13)=clhs0*clhs338 + clhs17*clhs339 + clhs188*clhs312 + clhs189*clhs313;
        lhs(2,14)=clhs0*clhs340 + clhs17*clhs341 + clhs204*clhs312 + clhs205*clhs313;
        lhs(2,15)=clhs0*clhs342 + clhs17*clhs343 + clhs220*clhs312 + clhs221*clhs313;
        lhs(2,16)=clhs0*clhs344 + clhs17*clhs345 + clhs236*clhs312 + clhs237*clhs313;
        lhs(2,17)=clhs0*clhs346 + clhs17*clhs347 + clhs252*clhs312 + clhs253*clhs313;
        lhs(2,18)=clhs0*clhs348;
        lhs(2,19)=0;
        lhs(2,20)=clhs17*clhs349;
        lhs(3,0)=-clhs16*clhs4 - clhs19*clhs24 + clhs20*clhs43 + clhs38*clhs5;
        lhs(3,1)=-clhs19*clhs53 + clhs38*clhs45 - clhs4*clhs48 + clhs43*clhs50;
        lhs(3,2)=-clhs19*clhs63 + clhs38*clhs55 - clhs4*clhs58 + clhs43*clhs60;
        lhs(3,3)=-clhs19*clhs73 + clhs38*clhs65 - clhs4*clhs68 + clhs43*clhs70;
        lhs(3,4)=-clhs19*clhs83 + clhs38*clhs75 - clhs4*clhs78 + clhs43*clhs80;
        lhs(3,5)=-clhs19*clhs93 + clhs38*clhs85 - clhs4*clhs88 + clhs43*clhs90;
        lhs(3,6)=clhs100*clhs43 - clhs103*clhs19 + clhs38*clhs95 - clhs4*clhs98;
        lhs(3,7)=clhs105*clhs38 - clhs108*clhs4 + clhs110*clhs43 - clhs113*clhs19;
        lhs(3,8)=clhs115*clhs38 - clhs118*clhs4 + clhs120*clhs43 - clhs123*clhs19;
        lhs(3,9)=clhs129*clhs38 + clhs132*clhs4 + clhs136*clhs43 + clhs139*clhs19;
        lhs(3,10)=clhs145*clhs38 + clhs148*clhs4 + clhs152*clhs43 + clhs155*clhs19;
        lhs(3,11)=clhs161*clhs38 + clhs164*clhs4 + clhs168*clhs43 + clhs171*clhs19;
        lhs(3,12)=clhs177*clhs38 + clhs180*clhs4 + clhs184*clhs43 + clhs187*clhs19;
        lhs(3,13)=clhs19*clhs203 + clhs193*clhs38 + clhs196*clhs4 + clhs200*clhs43;
        lhs(3,14)=clhs19*clhs219 + clhs209*clhs38 + clhs212*clhs4 + clhs216*clhs43;
        lhs(3,15)=clhs19*clhs235 + clhs225*clhs38 + clhs228*clhs4 + clhs232*clhs43;
        lhs(3,16)=clhs19*clhs251 + clhs241*clhs38 + clhs244*clhs4 + clhs248*clhs43;
        lhs(3,17)=clhs19*clhs267 + clhs257*clhs38 + clhs260*clhs4 + clhs264*clhs43;
        lhs(3,18)=clhs268*clhs4;
        lhs(3,19)=0;
        lhs(3,20)=clhs19*clhs269;
        lhs(4,0)=-clhs19*clhs271 + clhs20*clhs273 - clhs270*clhs4 + clhs272*clhs5;
        lhs(4,1)=-clhs19*clhs275 + clhs272*clhs45 + clhs273*clhs50 - clhs274*clhs4;
        lhs(4,2)=-clhs19*clhs277 + clhs272*clhs55 + clhs273*clhs60 - clhs276*clhs4;
        lhs(4,3)=-clhs19*clhs279 + clhs272*clhs65 + clhs273*clhs70 - clhs278*clhs4;
        lhs(4,4)=-clhs19*clhs281 + clhs272*clhs75 + clhs273*clhs80 - clhs280*clhs4;
        lhs(4,5)=-clhs19*clhs283 + clhs272*clhs85 + clhs273*clhs90 - clhs282*clhs4;
        lhs(4,6)=clhs100*clhs273 - clhs19*clhs285 + clhs272*clhs95 - clhs284*clhs4;
        lhs(4,7)=clhs105*clhs272 + clhs110*clhs273 - clhs19*clhs287 - clhs286*clhs4;
        lhs(4,8)=clhs115*clhs272 + clhs120*clhs273 - clhs19*clhs289 - clhs288*clhs4;
        lhs(4,9)=clhs129*clhs272 + clhs136*clhs273 + clhs19*clhs291 + clhs290*clhs4;
        lhs(4,10)=clhs145*clhs272 + clhs152*clhs273 + clhs19*clhs293 + clhs292*clhs4;
        lhs(4,11)=clhs161*clhs272 + clhs168*clhs273 + clhs19*clhs295 + clhs294*clhs4;
        lhs(4,12)=clhs177*clhs272 + clhs184*clhs273 + clhs19*clhs297 + clhs296*clhs4;
        lhs(4,13)=clhs19*clhs299 + clhs193*clhs272 + clhs200*clhs273 + clhs298*clhs4;
        lhs(4,14)=clhs19*clhs301 + clhs209*clhs272 + clhs216*clhs273 + clhs300*clhs4;
        lhs(4,15)=clhs19*clhs303 + clhs225*clhs272 + clhs232*clhs273 + clhs302*clhs4;
        lhs(4,16)=clhs19*clhs305 + clhs241*clhs272 + clhs248*clhs273 + clhs304*clhs4;
        lhs(4,17)=clhs19*clhs307 + clhs257*clhs272 + clhs264*clhs273 + clhs306*clhs4;
        lhs(4,18)=clhs308*clhs4;
        lhs(4,19)=0;
        lhs(4,20)=clhs19*clhs309;
        lhs(5,0)=-clhs19*clhs311 + clhs20*clhs313 - clhs310*clhs4 + clhs312*clhs5;
        lhs(5,1)=-clhs19*clhs315 + clhs312*clhs45 + clhs313*clhs50 - clhs314*clhs4;
        lhs(5,2)=-clhs19*clhs317 + clhs312*clhs55 + clhs313*clhs60 - clhs316*clhs4;
        lhs(5,3)=-clhs19*clhs319 + clhs312*clhs65 + clhs313*clhs70 - clhs318*clhs4;
        lhs(5,4)=-clhs19*clhs321 + clhs312*clhs75 + clhs313*clhs80 - clhs320*clhs4;
        lhs(5,5)=-clhs19*clhs323 + clhs312*clhs85 + clhs313*clhs90 - clhs322*clhs4;
        lhs(5,6)=clhs100*clhs313 - clhs19*clhs325 + clhs312*clhs95 - clhs324*clhs4;
        lhs(5,7)=clhs105*clhs312 + clhs110*clhs313 - clhs19*clhs327 - clhs326*clhs4;
        lhs(5,8)=clhs115*clhs312 + clhs120*clhs313 - clhs19*clhs329 - clhs328*clhs4;
        lhs(5,9)=clhs129*clhs312 + clhs136*clhs313 + clhs19*clhs331 + clhs330*clhs4;
        lhs(5,10)=clhs145*clhs312 + clhs152*clhs313 + clhs19*clhs333 + clhs332*clhs4;
        lhs(5,11)=clhs161*clhs312 + clhs168*clhs313 + clhs19*clhs335 + clhs334*clhs4;
        lhs(5,12)=clhs177*clhs312 + clhs184*clhs313 + clhs19*clhs337 + clhs336*clhs4;
        lhs(5,13)=clhs19*clhs339 + clhs193*clhs312 + clhs200*clhs313 + clhs338*clhs4;
        lhs(5,14)=clhs19*clhs341 + clhs209*clhs312 + clhs216*clhs313 + clhs340*clhs4;
        lhs(5,15)=clhs19*clhs343 + clhs225*clhs312 + clhs232*clhs313 + clhs342*clhs4;
        lhs(5,16)=clhs19*clhs345 + clhs241*clhs312 + clhs248*clhs313 + clhs344*clhs4;
        lhs(5,17)=clhs19*clhs347 + clhs257*clhs312 + clhs264*clhs313 + clhs346*clhs4;
        lhs(5,18)=clhs348*clhs4;
        lhs(5,19)=0;
        lhs(5,20)=clhs19*clhs349;
        lhs(6,0)=-clhs16*clhs7 - clhs21*clhs24 + clhs22*clhs43 + clhs38*clhs8;
        lhs(6,1)=-clhs21*clhs53 + clhs38*clhs46 + clhs43*clhs51 - clhs48*clhs7;
        lhs(6,2)=-clhs21*clhs63 + clhs38*clhs56 + clhs43*clhs61 - clhs58*clhs7;
        lhs(6,3)=-clhs21*clhs73 + clhs38*clhs66 + clhs43*clhs71 - clhs68*clhs7;
        lhs(6,4)=-clhs21*clhs83 + clhs38*clhs76 + clhs43*clhs81 - clhs7*clhs78;
        lhs(6,5)=-clhs21*clhs93 + clhs38*clhs86 + clhs43*clhs91 - clhs7*clhs88;
        lhs(6,6)=clhs101*clhs43 - clhs103*clhs21 + clhs38*clhs96 - clhs7*clhs98;
        lhs(6,7)=clhs106*clhs38 - clhs108*clhs7 + clhs111*clhs43 - clhs113*clhs21;
        lhs(6,8)=clhs116*clhs38 - clhs118*clhs7 + clhs121*clhs43 - clhs123*clhs21;
        lhs(6,9)=clhs130*clhs38 + clhs132*clhs7 + clhs137*clhs43 + clhs139*clhs21;
        lhs(6,10)=clhs146*clhs38 + clhs148*clhs7 + clhs153*clhs43 + clhs155*clhs21;
        lhs(6,11)=clhs162*clhs38 + clhs164*clhs7 + clhs169*clhs43 + clhs171*clhs21;
        lhs(6,12)=clhs178*clhs38 + clhs180*clhs7 + clhs185*clhs43 + clhs187*clhs21;
        lhs(6,13)=clhs194*clhs38 + clhs196*clhs7 + clhs201*clhs43 + clhs203*clhs21;
        lhs(6,14)=clhs21*clhs219 + clhs210*clhs38 + clhs212*clhs7 + clhs217*clhs43;
        lhs(6,15)=clhs21*clhs235 + clhs226*clhs38 + clhs228*clhs7 + clhs233*clhs43;
        lhs(6,16)=clhs21*clhs251 + clhs242*clhs38 + clhs244*clhs7 + clhs249*clhs43;
        lhs(6,17)=clhs21*clhs267 + clhs258*clhs38 + clhs260*clhs7 + clhs265*clhs43;
        lhs(6,18)=clhs268*clhs7;
        lhs(6,19)=0;
        lhs(6,20)=clhs21*clhs269;
        lhs(7,0)=-clhs21*clhs271 + clhs22*clhs273 - clhs270*clhs7 + clhs272*clhs8;
        lhs(7,1)=-clhs21*clhs275 + clhs272*clhs46 + clhs273*clhs51 - clhs274*clhs7;
        lhs(7,2)=-clhs21*clhs277 + clhs272*clhs56 + clhs273*clhs61 - clhs276*clhs7;
        lhs(7,3)=-clhs21*clhs279 + clhs272*clhs66 + clhs273*clhs71 - clhs278*clhs7;
        lhs(7,4)=-clhs21*clhs281 + clhs272*clhs76 + clhs273*clhs81 - clhs280*clhs7;
        lhs(7,5)=-clhs21*clhs283 + clhs272*clhs86 + clhs273*clhs91 - clhs282*clhs7;
        lhs(7,6)=clhs101*clhs273 - clhs21*clhs285 + clhs272*clhs96 - clhs284*clhs7;
        lhs(7,7)=clhs106*clhs272 + clhs111*clhs273 - clhs21*clhs287 - clhs286*clhs7;
        lhs(7,8)=clhs116*clhs272 + clhs121*clhs273 - clhs21*clhs289 - clhs288*clhs7;
        lhs(7,9)=clhs130*clhs272 + clhs137*clhs273 + clhs21*clhs291 + clhs290*clhs7;
        lhs(7,10)=clhs146*clhs272 + clhs153*clhs273 + clhs21*clhs293 + clhs292*clhs7;
        lhs(7,11)=clhs162*clhs272 + clhs169*clhs273 + clhs21*clhs295 + clhs294*clhs7;
        lhs(7,12)=clhs178*clhs272 + clhs185*clhs273 + clhs21*clhs297 + clhs296*clhs7;
        lhs(7,13)=clhs194*clhs272 + clhs201*clhs273 + clhs21*clhs299 + clhs298*clhs7;
        lhs(7,14)=clhs21*clhs301 + clhs210*clhs272 + clhs217*clhs273 + clhs300*clhs7;
        lhs(7,15)=clhs21*clhs303 + clhs226*clhs272 + clhs233*clhs273 + clhs302*clhs7;
        lhs(7,16)=clhs21*clhs305 + clhs242*clhs272 + clhs249*clhs273 + clhs304*clhs7;
        lhs(7,17)=clhs21*clhs307 + clhs258*clhs272 + clhs265*clhs273 + clhs306*clhs7;
        lhs(7,18)=clhs308*clhs7;
        lhs(7,19)=0;
        lhs(7,20)=clhs21*clhs309;
        lhs(8,0)=-clhs21*clhs311 + clhs22*clhs313 - clhs310*clhs7 + clhs312*clhs8;
        lhs(8,1)=-clhs21*clhs315 + clhs312*clhs46 + clhs313*clhs51 - clhs314*clhs7;
        lhs(8,2)=-clhs21*clhs317 + clhs312*clhs56 + clhs313*clhs61 - clhs316*clhs7;
        lhs(8,3)=-clhs21*clhs319 + clhs312*clhs66 + clhs313*clhs71 - clhs318*clhs7;
        lhs(8,4)=-clhs21*clhs321 + clhs312*clhs76 + clhs313*clhs81 - clhs320*clhs7;
        lhs(8,5)=-clhs21*clhs323 + clhs312*clhs86 + clhs313*clhs91 - clhs322*clhs7;
        lhs(8,6)=clhs101*clhs313 - clhs21*clhs325 + clhs312*clhs96 - clhs324*clhs7;
        lhs(8,7)=clhs106*clhs312 + clhs111*clhs313 - clhs21*clhs327 - clhs326*clhs7;
        lhs(8,8)=clhs116*clhs312 + clhs121*clhs313 - clhs21*clhs329 - clhs328*clhs7;
        lhs(8,9)=clhs130*clhs312 + clhs137*clhs313 + clhs21*clhs331 + clhs330*clhs7;
        lhs(8,10)=clhs146*clhs312 + clhs153*clhs313 + clhs21*clhs333 + clhs332*clhs7;
        lhs(8,11)=clhs162*clhs312 + clhs169*clhs313 + clhs21*clhs335 + clhs334*clhs7;
        lhs(8,12)=clhs178*clhs312 + clhs185*clhs313 + clhs21*clhs337 + clhs336*clhs7;
        lhs(8,13)=clhs194*clhs312 + clhs201*clhs313 + clhs21*clhs339 + clhs338*clhs7;
        lhs(8,14)=clhs21*clhs341 + clhs210*clhs312 + clhs217*clhs313 + clhs340*clhs7;
        lhs(8,15)=clhs21*clhs343 + clhs226*clhs312 + clhs233*clhs313 + clhs342*clhs7;
        lhs(8,16)=clhs21*clhs345 + clhs242*clhs312 + clhs249*clhs313 + clhs344*clhs7;
        lhs(8,17)=clhs21*clhs347 + clhs258*clhs312 + clhs265*clhs313 + clhs346*clhs7;
        lhs(8,18)=clhs348*clhs7;
        lhs(8,19)=0;
        lhs(8,20)=clhs21*clhs349;
        lhs(9,0)=penalty_parameter*(clhs26*clhs350 + clhs351*clhs39);
        lhs(9,1)=penalty_parameter*(clhs26*clhs352 + clhs353*clhs39);
        lhs(9,2)=penalty_parameter*(clhs26*clhs354 + clhs355*clhs39);
        lhs(9,3)=penalty_parameter*(clhs26*clhs356 + clhs357*clhs39);
        lhs(9,4)=penalty_parameter*(clhs26*clhs358 + clhs359*clhs39);
        lhs(9,5)=penalty_parameter*(clhs26*clhs360 + clhs361*clhs39);
        lhs(9,6)=penalty_parameter*(clhs26*clhs362 + clhs363*clhs39);
        lhs(9,7)=penalty_parameter*(clhs26*clhs364 + clhs365*clhs39);
        lhs(9,8)=penalty_parameter*(clhs26*clhs366 + clhs367*clhs39);
        lhs(9,9)=-clhs126*clhs38 - clhs132*clhs26 - clhs133*clhs43 - clhs139*clhs39;
        lhs(9,10)=-clhs142*clhs38 - clhs148*clhs26 - clhs149*clhs43 - clhs155*clhs39;
        lhs(9,11)=-clhs158*clhs38 - clhs164*clhs26 - clhs165*clhs43 - clhs171*clhs39;
        lhs(9,12)=-clhs174*clhs38 - clhs180*clhs26 - clhs181*clhs43 - clhs187*clhs39;
        lhs(9,13)=-clhs190*clhs38 - clhs196*clhs26 - clhs197*clhs43 - clhs203*clhs39;
        lhs(9,14)=-clhs206*clhs38 - clhs212*clhs26 - clhs213*clhs43 - clhs219*clhs39;
        lhs(9,15)=-clhs222*clhs38 - clhs228*clhs26 - clhs229*clhs43 - clhs235*clhs39;
        lhs(9,16)=-clhs238*clhs38 - clhs244*clhs26 - clhs245*clhs43 - clhs251*clhs39;
        lhs(9,17)=-clhs254*clhs38 - clhs26*clhs260 - clhs261*clhs43 - clhs267*clhs39;
        lhs(9,18)=-clhs26*clhs268;
        lhs(9,19)=0;
        lhs(9,20)=-clhs269*clhs39;
        lhs(10,0)=penalty_parameter*(clhs26*clhs368 + clhs369*clhs39);
        lhs(10,1)=penalty_parameter*(clhs26*clhs370 + clhs371*clhs39);
        lhs(10,2)=penalty_parameter*(clhs26*clhs372 + clhs373*clhs39);
        lhs(10,3)=penalty_parameter*(clhs26*clhs374 + clhs375*clhs39);
        lhs(10,4)=penalty_parameter*(clhs26*clhs376 + clhs377*clhs39);
        lhs(10,5)=penalty_parameter*(clhs26*clhs378 + clhs379*clhs39);
        lhs(10,6)=penalty_parameter*(clhs26*clhs380 + clhs381*clhs39);
        lhs(10,7)=penalty_parameter*(clhs26*clhs382 + clhs383*clhs39);
        lhs(10,8)=penalty_parameter*(clhs26*clhs384 + clhs385*clhs39);
        lhs(10,9)=-clhs126*clhs272 - clhs133*clhs273 - clhs26*clhs290 - clhs291*clhs39;
        lhs(10,10)=-clhs142*clhs272 - clhs149*clhs273 - clhs26*clhs292 - clhs293*clhs39;
        lhs(10,11)=-clhs158*clhs272 - clhs165*clhs273 - clhs26*clhs294 - clhs295*clhs39;
        lhs(10,12)=-clhs174*clhs272 - clhs181*clhs273 - clhs26*clhs296 - clhs297*clhs39;
        lhs(10,13)=-clhs190*clhs272 - clhs197*clhs273 - clhs26*clhs298 - clhs299*clhs39;
        lhs(10,14)=-clhs206*clhs272 - clhs213*clhs273 - clhs26*clhs300 - clhs301*clhs39;
        lhs(10,15)=-clhs222*clhs272 - clhs229*clhs273 - clhs26*clhs302 - clhs303*clhs39;
        lhs(10,16)=-clhs238*clhs272 - clhs245*clhs273 - clhs26*clhs304 - clhs305*clhs39;
        lhs(10,17)=-clhs254*clhs272 - clhs26*clhs306 - clhs261*clhs273 - clhs307*clhs39;
        lhs(10,18)=-clhs26*clhs308;
        lhs(10,19)=0;
        lhs(10,20)=-clhs309*clhs39;
        lhs(11,0)=penalty_parameter*(clhs26*clhs386 + clhs387*clhs39);
        lhs(11,1)=penalty_parameter*(clhs26*clhs388 + clhs389*clhs39);
        lhs(11,2)=penalty_parameter*(clhs26*clhs390 + clhs39*clhs391);
        lhs(11,3)=penalty_parameter*(clhs26*clhs392 + clhs39*clhs393);
        lhs(11,4)=penalty_parameter*(clhs26*clhs394 + clhs39*clhs395);
        lhs(11,5)=penalty_parameter*(clhs26*clhs396 + clhs39*clhs397);
        lhs(11,6)=penalty_parameter*(clhs26*clhs398 + clhs39*clhs399);
        lhs(11,7)=penalty_parameter*(clhs26*clhs400 + clhs39*clhs401);
        lhs(11,8)=penalty_parameter*(clhs26*clhs402 + clhs39*clhs403);
        lhs(11,9)=-clhs126*clhs312 - clhs133*clhs313 - clhs26*clhs330 - clhs331*clhs39;
        lhs(11,10)=-clhs142*clhs312 - clhs149*clhs313 - clhs26*clhs332 - clhs333*clhs39;
        lhs(11,11)=-clhs158*clhs312 - clhs165*clhs313 - clhs26*clhs334 - clhs335*clhs39;
        lhs(11,12)=-clhs174*clhs312 - clhs181*clhs313 - clhs26*clhs336 - clhs337*clhs39;
        lhs(11,13)=-clhs190*clhs312 - clhs197*clhs313 - clhs26*clhs338 - clhs339*clhs39;
        lhs(11,14)=-clhs206*clhs312 - clhs213*clhs313 - clhs26*clhs340 - clhs341*clhs39;
        lhs(11,15)=-clhs222*clhs312 - clhs229*clhs313 - clhs26*clhs342 - clhs343*clhs39;
        lhs(11,16)=-clhs238*clhs312 - clhs245*clhs313 - clhs26*clhs344 - clhs345*clhs39;
        lhs(11,17)=-clhs254*clhs312 - clhs26*clhs346 - clhs261*clhs313 - clhs347*clhs39;
        lhs(11,18)=-clhs26*clhs348;
        lhs(11,19)=0;
        lhs(11,20)=-clhs349*clhs39;
        lhs(12,0)=penalty_parameter*(clhs28*clhs350 + clhs351*clhs40);
        lhs(12,1)=penalty_parameter*(clhs28*clhs352 + clhs353*clhs40);
        lhs(12,2)=penalty_parameter*(clhs28*clhs354 + clhs355*clhs40);
        lhs(12,3)=penalty_parameter*(clhs28*clhs356 + clhs357*clhs40);
        lhs(12,4)=penalty_parameter*(clhs28*clhs358 + clhs359*clhs40);
        lhs(12,5)=penalty_parameter*(clhs28*clhs360 + clhs361*clhs40);
        lhs(12,6)=penalty_parameter*(clhs28*clhs362 + clhs363*clhs40);
        lhs(12,7)=penalty_parameter*(clhs28*clhs364 + clhs365*clhs40);
        lhs(12,8)=penalty_parameter*(clhs28*clhs366 + clhs367*clhs40);
        lhs(12,9)=-clhs127*clhs38 - clhs132*clhs28 - clhs134*clhs43 - clhs139*clhs40;
        lhs(12,10)=-clhs143*clhs38 - clhs148*clhs28 - clhs150*clhs43 - clhs155*clhs40;
        lhs(12,11)=-clhs159*clhs38 - clhs164*clhs28 - clhs166*clhs43 - clhs171*clhs40;
        lhs(12,12)=-clhs175*clhs38 - clhs180*clhs28 - clhs182*clhs43 - clhs187*clhs40;
        lhs(12,13)=-clhs191*clhs38 - clhs196*clhs28 - clhs198*clhs43 - clhs203*clhs40;
        lhs(12,14)=-clhs207*clhs38 - clhs212*clhs28 - clhs214*clhs43 - clhs219*clhs40;
        lhs(12,15)=-clhs223*clhs38 - clhs228*clhs28 - clhs230*clhs43 - clhs235*clhs40;
        lhs(12,16)=-clhs239*clhs38 - clhs244*clhs28 - clhs246*clhs43 - clhs251*clhs40;
        lhs(12,17)=-clhs255*clhs38 - clhs260*clhs28 - clhs262*clhs43 - clhs267*clhs40;
        lhs(12,18)=-clhs268*clhs28;
        lhs(12,19)=0;
        lhs(12,20)=-clhs269*clhs40;
        lhs(13,0)=penalty_parameter*(clhs28*clhs368 + clhs369*clhs40);
        lhs(13,1)=penalty_parameter*(clhs28*clhs370 + clhs371*clhs40);
        lhs(13,2)=penalty_parameter*(clhs28*clhs372 + clhs373*clhs40);
        lhs(13,3)=penalty_parameter*(clhs28*clhs374 + clhs375*clhs40);
        lhs(13,4)=penalty_parameter*(clhs28*clhs376 + clhs377*clhs40);
        lhs(13,5)=penalty_parameter*(clhs28*clhs378 + clhs379*clhs40);
        lhs(13,6)=penalty_parameter*(clhs28*clhs380 + clhs381*clhs40);
        lhs(13,7)=penalty_parameter*(clhs28*clhs382 + clhs383*clhs40);
        lhs(13,8)=penalty_parameter*(clhs28*clhs384 + clhs385*clhs40);
        lhs(13,9)=-clhs127*clhs272 - clhs134*clhs273 - clhs28*clhs290 - clhs291*clhs40;
        lhs(13,10)=-clhs143*clhs272 - clhs150*clhs273 - clhs28*clhs292 - clhs293*clhs40;
        lhs(13,11)=-clhs159*clhs272 - clhs166*clhs273 - clhs28*clhs294 - clhs295*clhs40;
        lhs(13,12)=-clhs175*clhs272 - clhs182*clhs273 - clhs28*clhs296 - clhs297*clhs40;
        lhs(13,13)=-clhs191*clhs272 - clhs198*clhs273 - clhs28*clhs298 - clhs299*clhs40;
        lhs(13,14)=-clhs207*clhs272 - clhs214*clhs273 - clhs28*clhs300 - clhs301*clhs40;
        lhs(13,15)=-clhs223*clhs272 - clhs230*clhs273 - clhs28*clhs302 - clhs303*clhs40;
        lhs(13,16)=-clhs239*clhs272 - clhs246*clhs273 - clhs28*clhs304 - clhs305*clhs40;
        lhs(13,17)=-clhs255*clhs272 - clhs262*clhs273 - clhs28*clhs306 - clhs307*clhs40;
        lhs(13,18)=-clhs28*clhs308;
        lhs(13,19)=0;
        lhs(13,20)=-clhs309*clhs40;
        lhs(14,0)=penalty_parameter*(clhs28*clhs386 + clhs387*clhs40);
        lhs(14,1)=penalty_parameter*(clhs28*clhs388 + clhs389*clhs40);
        lhs(14,2)=penalty_parameter*(clhs28*clhs390 + clhs391*clhs40);
        lhs(14,3)=penalty_parameter*(clhs28*clhs392 + clhs393*clhs40);
        lhs(14,4)=penalty_parameter*(clhs28*clhs394 + clhs395*clhs40);
        lhs(14,5)=penalty_parameter*(clhs28*clhs396 + clhs397*clhs40);
        lhs(14,6)=penalty_parameter*(clhs28*clhs398 + clhs399*clhs40);
        lhs(14,7)=penalty_parameter*(clhs28*clhs400 + clhs40*clhs401);
        lhs(14,8)=penalty_parameter*(clhs28*clhs402 + clhs40*clhs403);
        lhs(14,9)=-clhs127*clhs312 - clhs134*clhs313 - clhs28*clhs330 - clhs331*clhs40;
        lhs(14,10)=-clhs143*clhs312 - clhs150*clhs313 - clhs28*clhs332 - clhs333*clhs40;
        lhs(14,11)=-clhs159*clhs312 - clhs166*clhs313 - clhs28*clhs334 - clhs335*clhs40;
        lhs(14,12)=-clhs175*clhs312 - clhs182*clhs313 - clhs28*clhs336 - clhs337*clhs40;
        lhs(14,13)=-clhs191*clhs312 - clhs198*clhs313 - clhs28*clhs338 - clhs339*clhs40;
        lhs(14,14)=-clhs207*clhs312 - clhs214*clhs313 - clhs28*clhs340 - clhs341*clhs40;
        lhs(14,15)=-clhs223*clhs312 - clhs230*clhs313 - clhs28*clhs342 - clhs343*clhs40;
        lhs(14,16)=-clhs239*clhs312 - clhs246*clhs313 - clhs28*clhs344 - clhs345*clhs40;
        lhs(14,17)=-clhs255*clhs312 - clhs262*clhs313 - clhs28*clhs346 - clhs347*clhs40;
        lhs(14,18)=-clhs28*clhs348;
        lhs(14,19)=0;
        lhs(14,20)=-clhs349*clhs40;
        lhs(15,0)=penalty_parameter*(clhs30*clhs350 + clhs351*clhs41);
        lhs(15,1)=penalty_parameter*(clhs30*clhs352 + clhs353*clhs41);
        lhs(15,2)=penalty_parameter*(clhs30*clhs354 + clhs355*clhs41);
        lhs(15,3)=penalty_parameter*(clhs30*clhs356 + clhs357*clhs41);
        lhs(15,4)=penalty_parameter*(clhs30*clhs358 + clhs359*clhs41);
        lhs(15,5)=penalty_parameter*(clhs30*clhs360 + clhs361*clhs41);
        lhs(15,6)=penalty_parameter*(clhs30*clhs362 + clhs363*clhs41);
        lhs(15,7)=penalty_parameter*(clhs30*clhs364 + clhs365*clhs41);
        lhs(15,8)=penalty_parameter*(clhs30*clhs366 + clhs367*clhs41);
        lhs(15,9)=-clhs128*clhs38 - clhs132*clhs30 - clhs135*clhs43 - clhs139*clhs41;
        lhs(15,10)=-clhs144*clhs38 - clhs148*clhs30 - clhs151*clhs43 - clhs155*clhs41;
        lhs(15,11)=-clhs160*clhs38 - clhs164*clhs30 - clhs167*clhs43 - clhs171*clhs41;
        lhs(15,12)=-clhs176*clhs38 - clhs180*clhs30 - clhs183*clhs43 - clhs187*clhs41;
        lhs(15,13)=-clhs192*clhs38 - clhs196*clhs30 - clhs199*clhs43 - clhs203*clhs41;
        lhs(15,14)=-clhs208*clhs38 - clhs212*clhs30 - clhs215*clhs43 - clhs219*clhs41;
        lhs(15,15)=-clhs224*clhs38 - clhs228*clhs30 - clhs231*clhs43 - clhs235*clhs41;
        lhs(15,16)=-clhs240*clhs38 - clhs244*clhs30 - clhs247*clhs43 - clhs251*clhs41;
        lhs(15,17)=-clhs256*clhs38 - clhs260*clhs30 - clhs263*clhs43 - clhs267*clhs41;
        lhs(15,18)=-clhs268*clhs30;
        lhs(15,19)=0;
        lhs(15,20)=-clhs269*clhs41;
        lhs(16,0)=penalty_parameter*(clhs30*clhs368 + clhs369*clhs41);
        lhs(16,1)=penalty_parameter*(clhs30*clhs370 + clhs371*clhs41);
        lhs(16,2)=penalty_parameter*(clhs30*clhs372 + clhs373*clhs41);
        lhs(16,3)=penalty_parameter*(clhs30*clhs374 + clhs375*clhs41);
        lhs(16,4)=penalty_parameter*(clhs30*clhs376 + clhs377*clhs41);
        lhs(16,5)=penalty_parameter*(clhs30*clhs378 + clhs379*clhs41);
        lhs(16,6)=penalty_parameter*(clhs30*clhs380 + clhs381*clhs41);
        lhs(16,7)=penalty_parameter*(clhs30*clhs382 + clhs383*clhs41);
        lhs(16,8)=penalty_parameter*(clhs30*clhs384 + clhs385*clhs41);
        lhs(16,9)=-clhs128*clhs272 - clhs135*clhs273 - clhs290*clhs30 - clhs291*clhs41;
        lhs(16,10)=-clhs144*clhs272 - clhs151*clhs273 - clhs292*clhs30 - clhs293*clhs41;
        lhs(16,11)=-clhs160*clhs272 - clhs167*clhs273 - clhs294*clhs30 - clhs295*clhs41;
        lhs(16,12)=-clhs176*clhs272 - clhs183*clhs273 - clhs296*clhs30 - clhs297*clhs41;
        lhs(16,13)=-clhs192*clhs272 - clhs199*clhs273 - clhs298*clhs30 - clhs299*clhs41;
        lhs(16,14)=-clhs208*clhs272 - clhs215*clhs273 - clhs30*clhs300 - clhs301*clhs41;
        lhs(16,15)=-clhs224*clhs272 - clhs231*clhs273 - clhs30*clhs302 - clhs303*clhs41;
        lhs(16,16)=-clhs240*clhs272 - clhs247*clhs273 - clhs30*clhs304 - clhs305*clhs41;
        lhs(16,17)=-clhs256*clhs272 - clhs263*clhs273 - clhs30*clhs306 - clhs307*clhs41;
        lhs(16,18)=-clhs30*clhs308;
        lhs(16,19)=0;
        lhs(16,20)=-clhs309*clhs41;
        lhs(17,0)=penalty_parameter*(clhs30*clhs386 + clhs387*clhs41);
        lhs(17,1)=penalty_parameter*(clhs30*clhs388 + clhs389*clhs41);
        lhs(17,2)=penalty_parameter*(clhs30*clhs390 + clhs391*clhs41);
        lhs(17,3)=penalty_parameter*(clhs30*clhs392 + clhs393*clhs41);
        lhs(17,4)=penalty_parameter*(clhs30*clhs394 + clhs395*clhs41);
        lhs(17,5)=penalty_parameter*(clhs30*clhs396 + clhs397*clhs41);
        lhs(17,6)=penalty_parameter*(clhs30*clhs398 + clhs399*clhs41);
        lhs(17,7)=penalty_parameter*(clhs30*clhs400 + clhs401*clhs41);
        lhs(17,8)=penalty_parameter*(clhs30*clhs402 + clhs403*clhs41);
        lhs(17,9)=-clhs128*clhs312 - clhs135*clhs313 - clhs30*clhs330 - clhs331*clhs41;
        lhs(17,10)=-clhs144*clhs312 - clhs151*clhs313 - clhs30*clhs332 - clhs333*clhs41;
        lhs(17,11)=-clhs160*clhs312 - clhs167*clhs313 - clhs30*clhs334 - clhs335*clhs41;
        lhs(17,12)=-clhs176*clhs312 - clhs183*clhs313 - clhs30*clhs336 - clhs337*clhs41;
        lhs(17,13)=-clhs192*clhs312 - clhs199*clhs313 - clhs30*clhs338 - clhs339*clhs41;
        lhs(17,14)=-clhs208*clhs312 - clhs215*clhs313 - clhs30*clhs340 - clhs341*clhs41;
        lhs(17,15)=-clhs224*clhs312 - clhs231*clhs313 - clhs30*clhs342 - clhs343*clhs41;
        lhs(17,16)=-clhs240*clhs312 - clhs247*clhs313 - clhs30*clhs344 - clhs345*clhs41;
        lhs(17,17)=-clhs256*clhs312 - clhs263*clhs313 - clhs30*clhs346 - clhs347*clhs41;
        lhs(17,18)=-clhs30*clhs348;
        lhs(17,19)=0;
        lhs(17,20)=-clhs349*clhs41;
        lhs(18,0)=clhs15*scale_factor;
        lhs(18,1)=clhs47*scale_factor;
        lhs(18,2)=clhs57*scale_factor;
        lhs(18,3)=clhs67*scale_factor;
        lhs(18,4)=clhs77*scale_factor;
        lhs(18,5)=clhs87*scale_factor;
        lhs(18,6)=clhs97*scale_factor;
        lhs(18,7)=clhs107*scale_factor;
        lhs(18,8)=clhs117*scale_factor;
        lhs(18,9)=-clhs131*scale_factor;
        lhs(18,10)=-clhs147*scale_factor;
        lhs(18,11)=-clhs163*scale_factor;
        lhs(18,12)=-clhs179*scale_factor;
        lhs(18,13)=-clhs195*scale_factor;
        lhs(18,14)=-clhs211*scale_factor;
        lhs(18,15)=-clhs227*scale_factor;
        lhs(18,16)=-clhs243*scale_factor;
        lhs(18,17)=-clhs259*scale_factor;
        lhs(18,18)=0;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=0;
        lhs(19,1)=0;
        lhs(19,2)=0;
        lhs(19,3)=0;
        lhs(19,4)=0;
        lhs(19,5)=0;
        lhs(19,6)=0;
        lhs(19,7)=0;
        lhs(19,8)=0;
        lhs(19,9)=0;
        lhs(19,10)=0;
        lhs(19,11)=0;
        lhs(19,12)=0;
        lhs(19,13)=0;
        lhs(19,14)=0;
        lhs(19,15)=0;
        lhs(19,16)=0;
        lhs(19,17)=0;
        lhs(19,18)=0;
        lhs(19,19)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        lhs(19,20)=0;
        lhs(20,0)=clhs23*scale_factor;
        lhs(20,1)=clhs52*scale_factor;
        lhs(20,2)=clhs62*scale_factor;
        lhs(20,3)=clhs72*scale_factor;
        lhs(20,4)=clhs82*scale_factor;
        lhs(20,5)=clhs92*scale_factor;
        lhs(20,6)=clhs102*scale_factor;
        lhs(20,7)=clhs112*scale_factor;
        lhs(20,8)=clhs122*scale_factor;
        lhs(20,9)=-clhs138*scale_factor;
        lhs(20,10)=-clhs154*scale_factor;
        lhs(20,11)=-clhs170*scale_factor;
        lhs(20,12)=-clhs186*scale_factor;
        lhs(20,13)=-clhs202*scale_factor;
        lhs(20,14)=-clhs218*scale_factor;
        lhs(20,15)=-clhs234*scale_factor;
        lhs(20,16)=-clhs250*scale_factor;
        lhs(20,17)=-clhs266*scale_factor;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=0;
    }
    else if (rActiveInactive == 3 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(0,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*normalslave(0,0)*penalty_parameter;
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs18 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs19 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs20 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs21 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs22 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs23 =     normalslave(1,0)*(clhs12*clhs18 + clhs13*clhs20 + clhs14*clhs22 + clhs17) + normalslave(1,1)*(clhs1*clhs18 + clhs20*clhs3 + clhs22*clhs6) + normalslave(1,2)*(clhs10*clhs20 + clhs11*clhs22 + clhs18*clhs9);
        const double clhs24 =     clhs23*normalslave(1,0)*penalty_parameter;
        const double clhs25 =     X1(0,0) + u1(0,0);
        const double clhs26 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs27 =     X1(1,0) + u1(1,0);
        const double clhs28 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs29 =     X1(2,0) + u1(2,0);
        const double clhs30 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs31 =     X1(0,1) + u1(0,1);
        const double clhs32 =     X1(1,1) + u1(1,1);
        const double clhs33 =     X1(2,1) + u1(2,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs25*clhs26 + clhs27*clhs28 + clhs29*clhs30) + normalslave(0,1)*(-clhs0*clhs1 + clhs26*clhs31 + clhs28*clhs32 - clhs3*clhs4 + clhs30*clhs33 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs26*clhs34 + clhs28*clhs35 + clhs30*clhs36));
        const double clhs38 =     clhs37*normalslave(0,0);
        const double clhs39 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs40 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs41 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs42 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs12*clhs17 - clhs13*clhs19 - clhs14*clhs21 + clhs25*clhs39 + clhs27*clhs40 + clhs29*clhs41) + normalslave(1,1)*(-clhs1*clhs17 - clhs19*clhs3 - clhs21*clhs6 + clhs31*clhs39 + clhs32*clhs40 + clhs33*clhs41) + normalslave(1,2)*(-clhs10*clhs19 - clhs11*clhs21 - clhs17*clhs9 + clhs34*clhs39 + clhs35*clhs40 + clhs36*clhs41));
        const double clhs43 =     clhs42*normalslave(1,0);
        const double clhs44 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs45 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs46 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs47 =     normalslave(0,0)*(clhs12*clhs44 + clhs13*clhs45 + clhs14*clhs46) + normalslave(0,1)*(clhs0 + clhs1*clhs44 + clhs3*clhs45 + clhs46*clhs6) + normalslave(0,2)*(clhs10*clhs45 + clhs11*clhs46 + clhs44*clhs9);
        const double clhs48 =     clhs47*normalslave(0,0)*penalty_parameter;
        const double clhs49 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs50 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs51 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs52 =     normalslave(1,0)*(clhs12*clhs49 + clhs13*clhs50 + clhs14*clhs51) + normalslave(1,1)*(clhs1*clhs49 + clhs17 + clhs3*clhs50 + clhs51*clhs6) + normalslave(1,2)*(clhs10*clhs50 + clhs11*clhs51 + clhs49*clhs9);
        const double clhs53 =     clhs52*normalslave(1,0)*penalty_parameter;
        const double clhs54 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs55 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs56 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs57 =     normalslave(0,0)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56) + normalslave(0,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6) + normalslave(0,2)*(clhs0 + clhs10*clhs55 + clhs11*clhs56 + clhs54*clhs9);
        const double clhs58 =     clhs57*normalslave(0,0)*penalty_parameter;
        const double clhs59 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs60 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs61 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs62 =     normalslave(1,0)*(clhs12*clhs59 + clhs13*clhs60 + clhs14*clhs61) + normalslave(1,1)*(clhs1*clhs59 + clhs3*clhs60 + clhs6*clhs61) + normalslave(1,2)*(clhs10*clhs60 + clhs11*clhs61 + clhs17 + clhs59*clhs9);
        const double clhs63 =     clhs62*normalslave(1,0)*penalty_parameter;
        const double clhs64 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs65 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs66 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs67 =     normalslave(0,0)*(clhs12*clhs64 + clhs13*clhs65 + clhs14*clhs66 + clhs4) + normalslave(0,1)*(clhs1*clhs64 + clhs3*clhs65 + clhs6*clhs66) + normalslave(0,2)*(clhs10*clhs65 + clhs11*clhs66 + clhs64*clhs9);
        const double clhs68 =     clhs67*normalslave(0,0)*penalty_parameter;
        const double clhs69 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs70 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs71 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs72 =     normalslave(1,0)*(clhs12*clhs69 + clhs13*clhs70 + clhs14*clhs71 + clhs19) + normalslave(1,1)*(clhs1*clhs69 + clhs3*clhs70 + clhs6*clhs71) + normalslave(1,2)*(clhs10*clhs70 + clhs11*clhs71 + clhs69*clhs9);
        const double clhs73 =     clhs72*normalslave(1,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs75 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs76 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs77 =     normalslave(0,0)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76) + normalslave(0,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs4 + clhs6*clhs76) + normalslave(0,2)*(clhs10*clhs75 + clhs11*clhs76 + clhs74*clhs9);
        const double clhs78 =     clhs77*normalslave(0,0)*penalty_parameter;
        const double clhs79 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs80 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs81 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs82 =     normalslave(1,0)*(clhs12*clhs79 + clhs13*clhs80 + clhs14*clhs81) + normalslave(1,1)*(clhs1*clhs79 + clhs19 + clhs3*clhs80 + clhs6*clhs81) + normalslave(1,2)*(clhs10*clhs80 + clhs11*clhs81 + clhs79*clhs9);
        const double clhs83 =     clhs82*normalslave(1,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs85 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs86 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs87 =     normalslave(0,0)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86) + normalslave(0,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs6*clhs86) + normalslave(0,2)*(clhs10*clhs85 + clhs11*clhs86 + clhs4 + clhs84*clhs9);
        const double clhs88 =     clhs87*normalslave(0,0)*penalty_parameter;
        const double clhs89 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs90 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs91 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs92 =     normalslave(1,0)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91) + normalslave(1,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91) + normalslave(1,2)*(clhs10*clhs90 + clhs11*clhs91 + clhs19 + clhs89*clhs9);
        const double clhs93 =     clhs92*normalslave(1,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs95 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs96 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs97 =     normalslave(0,0)*(clhs12*clhs94 + clhs13*clhs95 + clhs14*clhs96 + clhs7) + normalslave(0,1)*(clhs1*clhs94 + clhs3*clhs95 + clhs6*clhs96) + normalslave(0,2)*(clhs10*clhs95 + clhs11*clhs96 + clhs9*clhs94);
        const double clhs98 =     clhs97*normalslave(0,0)*penalty_parameter;
        const double clhs99 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs100 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs101 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs102 =     normalslave(1,0)*(clhs100*clhs13 + clhs101*clhs14 + clhs12*clhs99 + clhs21) + normalslave(1,1)*(clhs1*clhs99 + clhs100*clhs3 + clhs101*clhs6) + normalslave(1,2)*(clhs10*clhs100 + clhs101*clhs11 + clhs9*clhs99);
        const double clhs103 =     clhs102*normalslave(1,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs105 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs106 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs107 =     normalslave(0,0)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14) + normalslave(0,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs7) + normalslave(0,2)*(clhs10*clhs105 + clhs104*clhs9 + clhs106*clhs11);
        const double clhs108 =     clhs107*normalslave(0,0)*penalty_parameter;
        const double clhs109 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs110 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs111 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs112 =     normalslave(1,0)*(clhs109*clhs12 + clhs110*clhs13 + clhs111*clhs14) + normalslave(1,1)*(clhs1*clhs109 + clhs110*clhs3 + clhs111*clhs6 + clhs21) + normalslave(1,2)*(clhs10*clhs110 + clhs109*clhs9 + clhs11*clhs111);
        const double clhs113 =     clhs112*normalslave(1,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs115 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs116 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs117 =     normalslave(0,0)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14) + normalslave(0,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6) + normalslave(0,2)*(clhs10*clhs115 + clhs11*clhs116 + clhs114*clhs9 + clhs7);
        const double clhs118 =     clhs117*normalslave(0,0)*penalty_parameter;
        const double clhs119 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs120 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs121 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs122 =     normalslave(1,0)*(clhs119*clhs12 + clhs120*clhs13 + clhs121*clhs14) + normalslave(1,1)*(clhs1*clhs119 + clhs120*clhs3 + clhs121*clhs6) + normalslave(1,2)*(clhs10*clhs120 + clhs11*clhs121 + clhs119*clhs9 + clhs21);
        const double clhs123 =     clhs122*normalslave(1,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs125 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs126 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs127 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs128 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs129 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs130 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs131 =     normalslave(0,0)*(-clhs12*clhs124 + clhs126*clhs25 + clhs127*clhs27 + clhs128*clhs29 - clhs129*clhs13 - clhs130*clhs14 + clhs26) + normalslave(0,1)*(-clhs1*clhs124 + clhs126*clhs31 + clhs127*clhs32 + clhs128*clhs33 - clhs129*clhs3 - clhs130*clhs6) + normalslave(0,2)*(-clhs10*clhs129 - clhs11*clhs130 - clhs124*clhs9 + clhs126*clhs34 + clhs127*clhs35 + clhs128*clhs36);
        const double clhs132 =     clhs131*normalslave(0,0)*penalty_parameter;
        const double clhs133 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs134 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs135 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs136 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs137 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs138 =     normalslave(1,0)*(-clhs12*clhs125 - clhs13*clhs136 + clhs133*clhs25 + clhs134*clhs27 + clhs135*clhs29 - clhs137*clhs14 + clhs39) + normalslave(1,1)*(-clhs1*clhs125 + clhs133*clhs31 + clhs134*clhs32 + clhs135*clhs33 - clhs136*clhs3 - clhs137*clhs6) + normalslave(1,2)*(-clhs10*clhs136 - clhs11*clhs137 - clhs125*clhs9 + clhs133*clhs34 + clhs134*clhs35 + clhs135*clhs36);
        const double clhs139 =     clhs138*normalslave(1,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs141 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs142 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs143 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs144 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs145 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs146 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs147 =     normalslave(0,0)*(-clhs12*clhs140 - clhs13*clhs145 - clhs14*clhs146 + clhs142*clhs25 + clhs143*clhs27 + clhs144*clhs29) + normalslave(0,1)*(-clhs1*clhs140 + clhs142*clhs31 + clhs143*clhs32 + clhs144*clhs33 - clhs145*clhs3 - clhs146*clhs6 + clhs26) + normalslave(0,2)*(-clhs10*clhs145 - clhs11*clhs146 - clhs140*clhs9 + clhs142*clhs34 + clhs143*clhs35 + clhs144*clhs36);
        const double clhs148 =     clhs147*normalslave(0,0)*penalty_parameter;
        const double clhs149 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs150 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs151 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs152 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs153 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs154 =     normalslave(1,0)*(-clhs12*clhs141 - clhs13*clhs152 - clhs14*clhs153 + clhs149*clhs25 + clhs150*clhs27 + clhs151*clhs29) + normalslave(1,1)*(-clhs1*clhs141 + clhs149*clhs31 + clhs150*clhs32 + clhs151*clhs33 - clhs152*clhs3 - clhs153*clhs6 + clhs39) + normalslave(1,2)*(-clhs10*clhs152 - clhs11*clhs153 - clhs141*clhs9 + clhs149*clhs34 + clhs150*clhs35 + clhs151*clhs36);
        const double clhs155 =     clhs154*normalslave(1,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs157 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs158 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs159 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs160 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs161 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs162 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs163 =     normalslave(0,0)*(-clhs12*clhs156 - clhs13*clhs161 - clhs14*clhs162 + clhs158*clhs25 + clhs159*clhs27 + clhs160*clhs29) + normalslave(0,1)*(-clhs1*clhs156 + clhs158*clhs31 + clhs159*clhs32 + clhs160*clhs33 - clhs161*clhs3 - clhs162*clhs6) + normalslave(0,2)*(-clhs10*clhs161 - clhs11*clhs162 - clhs156*clhs9 + clhs158*clhs34 + clhs159*clhs35 + clhs160*clhs36 + clhs26);
        const double clhs164 =     clhs163*normalslave(0,0)*penalty_parameter;
        const double clhs165 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs166 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs167 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs168 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs169 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs170 =     normalslave(1,0)*(-clhs12*clhs157 - clhs13*clhs168 - clhs14*clhs169 + clhs165*clhs25 + clhs166*clhs27 + clhs167*clhs29) + normalslave(1,1)*(-clhs1*clhs157 + clhs165*clhs31 + clhs166*clhs32 + clhs167*clhs33 - clhs168*clhs3 - clhs169*clhs6) + normalslave(1,2)*(-clhs10*clhs168 - clhs11*clhs169 - clhs157*clhs9 + clhs165*clhs34 + clhs166*clhs35 + clhs167*clhs36 + clhs39);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs173 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs174 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs175 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs176 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs177 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs178 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs179 =     normalslave(0,0)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 + clhs174*clhs25 + clhs175*clhs27 + clhs176*clhs29 + clhs28) + normalslave(0,1)*(-clhs1*clhs172 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6) + normalslave(0,2)*(-clhs10*clhs177 - clhs11*clhs178 - clhs172*clhs9 + clhs174*clhs34 + clhs175*clhs35 + clhs176*clhs36);
        const double clhs180 =     clhs179*normalslave(0,0)*penalty_parameter;
        const double clhs181 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs182 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs183 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs184 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs185 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs186 =     normalslave(1,0)*(-clhs12*clhs173 - clhs13*clhs184 - clhs14*clhs185 + clhs181*clhs25 + clhs182*clhs27 + clhs183*clhs29 + clhs40) + normalslave(1,1)*(-clhs1*clhs173 + clhs181*clhs31 + clhs182*clhs32 + clhs183*clhs33 - clhs184*clhs3 - clhs185*clhs6) + normalslave(1,2)*(-clhs10*clhs184 - clhs11*clhs185 - clhs173*clhs9 + clhs181*clhs34 + clhs182*clhs35 + clhs183*clhs36);
        const double clhs187 =     clhs186*normalslave(1,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs189 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs190 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs191 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs192 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs193 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs194 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs195 =     normalslave(0,0)*(-clhs12*clhs188 - clhs13*clhs193 - clhs14*clhs194 + clhs190*clhs25 + clhs191*clhs27 + clhs192*clhs29) + normalslave(0,1)*(-clhs1*clhs188 + clhs190*clhs31 + clhs191*clhs32 + clhs192*clhs33 - clhs193*clhs3 - clhs194*clhs6 + clhs28) + normalslave(0,2)*(-clhs10*clhs193 - clhs11*clhs194 - clhs188*clhs9 + clhs190*clhs34 + clhs191*clhs35 + clhs192*clhs36);
        const double clhs196 =     clhs195*normalslave(0,0)*penalty_parameter;
        const double clhs197 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs198 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs199 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs200 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs201 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs202 =     normalslave(1,0)*(-clhs12*clhs189 - clhs13*clhs200 - clhs14*clhs201 + clhs197*clhs25 + clhs198*clhs27 + clhs199*clhs29) + normalslave(1,1)*(-clhs1*clhs189 + clhs197*clhs31 + clhs198*clhs32 + clhs199*clhs33 - clhs200*clhs3 - clhs201*clhs6 + clhs40) + normalslave(1,2)*(-clhs10*clhs200 - clhs11*clhs201 - clhs189*clhs9 + clhs197*clhs34 + clhs198*clhs35 + clhs199*clhs36);
        const double clhs203 =     clhs202*normalslave(1,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs205 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs206 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs207 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs208 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs209 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs210 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs211 =     normalslave(0,0)*(-clhs12*clhs204 - clhs13*clhs209 - clhs14*clhs210 + clhs206*clhs25 + clhs207*clhs27 + clhs208*clhs29) + normalslave(0,1)*(-clhs1*clhs204 + clhs206*clhs31 + clhs207*clhs32 + clhs208*clhs33 - clhs209*clhs3 - clhs210*clhs6) + normalslave(0,2)*(-clhs10*clhs209 - clhs11*clhs210 - clhs204*clhs9 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs28);
        const double clhs212 =     clhs211*normalslave(0,0)*penalty_parameter;
        const double clhs213 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs214 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs215 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs216 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs217 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs218 =     normalslave(1,0)*(-clhs12*clhs205 - clhs13*clhs216 - clhs14*clhs217 + clhs213*clhs25 + clhs214*clhs27 + clhs215*clhs29) + normalslave(1,1)*(-clhs1*clhs205 + clhs213*clhs31 + clhs214*clhs32 + clhs215*clhs33 - clhs216*clhs3 - clhs217*clhs6) + normalslave(1,2)*(-clhs10*clhs216 - clhs11*clhs217 - clhs205*clhs9 + clhs213*clhs34 + clhs214*clhs35 + clhs215*clhs36 + clhs40);
        const double clhs219 =     clhs218*normalslave(1,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs221 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs222 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs223 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs224 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs225 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs226 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs227 =     normalslave(0,0)*(-clhs12*clhs220 - clhs13*clhs225 - clhs14*clhs226 + clhs222*clhs25 + clhs223*clhs27 + clhs224*clhs29 + clhs30) + normalslave(0,1)*(-clhs1*clhs220 + clhs222*clhs31 + clhs223*clhs32 + clhs224*clhs33 - clhs225*clhs3 - clhs226*clhs6) + normalslave(0,2)*(-clhs10*clhs225 - clhs11*clhs226 - clhs220*clhs9 + clhs222*clhs34 + clhs223*clhs35 + clhs224*clhs36);
        const double clhs228 =     clhs227*normalslave(0,0)*penalty_parameter;
        const double clhs229 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs230 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs231 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs232 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs233 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs234 =     normalslave(1,0)*(-clhs12*clhs221 - clhs13*clhs232 - clhs14*clhs233 + clhs229*clhs25 + clhs230*clhs27 + clhs231*clhs29 + clhs41) + normalslave(1,1)*(-clhs1*clhs221 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6) + normalslave(1,2)*(-clhs10*clhs232 - clhs11*clhs233 - clhs221*clhs9 + clhs229*clhs34 + clhs230*clhs35 + clhs231*clhs36);
        const double clhs235 =     clhs234*normalslave(1,0)*penalty_parameter;
        const double clhs236 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs237 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs238 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs239 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs240 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs241 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs242 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs243 =     normalslave(0,0)*(-clhs12*clhs236 - clhs13*clhs241 - clhs14*clhs242 + clhs238*clhs25 + clhs239*clhs27 + clhs240*clhs29) + normalslave(0,1)*(-clhs1*clhs236 + clhs238*clhs31 + clhs239*clhs32 + clhs240*clhs33 - clhs241*clhs3 - clhs242*clhs6 + clhs30) + normalslave(0,2)*(-clhs10*clhs241 - clhs11*clhs242 - clhs236*clhs9 + clhs238*clhs34 + clhs239*clhs35 + clhs240*clhs36);
        const double clhs244 =     clhs243*normalslave(0,0)*penalty_parameter;
        const double clhs245 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs246 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs247 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs248 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs249 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs250 =     normalslave(1,0)*(-clhs12*clhs237 - clhs13*clhs248 - clhs14*clhs249 + clhs245*clhs25 + clhs246*clhs27 + clhs247*clhs29) + normalslave(1,1)*(-clhs1*clhs237 + clhs245*clhs31 + clhs246*clhs32 + clhs247*clhs33 - clhs248*clhs3 - clhs249*clhs6 + clhs41) + normalslave(1,2)*(-clhs10*clhs248 - clhs11*clhs249 - clhs237*clhs9 + clhs245*clhs34 + clhs246*clhs35 + clhs247*clhs36);
        const double clhs251 =     clhs250*normalslave(1,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs253 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs254 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs255 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs256 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs257 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs258 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs259 =     normalslave(0,0)*(-clhs12*clhs252 - clhs13*clhs257 - clhs14*clhs258 + clhs25*clhs254 + clhs255*clhs27 + clhs256*clhs29) + normalslave(0,1)*(-clhs1*clhs252 + clhs254*clhs31 + clhs255*clhs32 + clhs256*clhs33 - clhs257*clhs3 - clhs258*clhs6) + normalslave(0,2)*(-clhs10*clhs257 - clhs11*clhs258 - clhs252*clhs9 + clhs254*clhs34 + clhs255*clhs35 + clhs256*clhs36 + clhs30);
        const double clhs260 =     clhs259*normalslave(0,0)*penalty_parameter;
        const double clhs261 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs262 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs263 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs264 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs265 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs266 =     normalslave(1,0)*(-clhs12*clhs253 - clhs13*clhs264 - clhs14*clhs265 + clhs25*clhs261 + clhs262*clhs27 + clhs263*clhs29) + normalslave(1,1)*(-clhs1*clhs253 + clhs261*clhs31 + clhs262*clhs32 + clhs263*clhs33 - clhs264*clhs3 - clhs265*clhs6) + normalslave(1,2)*(-clhs10*clhs264 - clhs11*clhs265 - clhs253*clhs9 + clhs261*clhs34 + clhs262*clhs35 + clhs263*clhs36 + clhs41);
        const double clhs267 =     clhs266*normalslave(1,0)*penalty_parameter;
        const double clhs268 =     normalslave(0,0)*scale_factor;
        const double clhs269 =     normalslave(1,0)*scale_factor;
        const double clhs270 =     clhs15*normalslave(0,1)*penalty_parameter;
        const double clhs271 =     clhs23*normalslave(1,1)*penalty_parameter;
        const double clhs272 =     clhs37*normalslave(0,1);
        const double clhs273 =     clhs42*normalslave(1,1);
        const double clhs274 =     clhs47*normalslave(0,1)*penalty_parameter;
        const double clhs275 =     clhs52*normalslave(1,1)*penalty_parameter;
        const double clhs276 =     clhs57*normalslave(0,1)*penalty_parameter;
        const double clhs277 =     clhs62*normalslave(1,1)*penalty_parameter;
        const double clhs278 =     clhs67*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs72*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs77*normalslave(0,1)*penalty_parameter;
        const double clhs281 =     clhs82*normalslave(1,1)*penalty_parameter;
        const double clhs282 =     clhs87*normalslave(0,1)*penalty_parameter;
        const double clhs283 =     clhs92*normalslave(1,1)*penalty_parameter;
        const double clhs284 =     clhs97*normalslave(0,1)*penalty_parameter;
        const double clhs285 =     clhs102*normalslave(1,1)*penalty_parameter;
        const double clhs286 =     clhs107*normalslave(0,1)*penalty_parameter;
        const double clhs287 =     clhs112*normalslave(1,1)*penalty_parameter;
        const double clhs288 =     clhs117*normalslave(0,1)*penalty_parameter;
        const double clhs289 =     clhs122*normalslave(1,1)*penalty_parameter;
        const double clhs290 =     clhs131*normalslave(0,1)*penalty_parameter;
        const double clhs291 =     clhs138*normalslave(1,1)*penalty_parameter;
        const double clhs292 =     clhs147*normalslave(0,1)*penalty_parameter;
        const double clhs293 =     clhs154*normalslave(1,1)*penalty_parameter;
        const double clhs294 =     clhs163*normalslave(0,1)*penalty_parameter;
        const double clhs295 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs296 =     clhs179*normalslave(0,1)*penalty_parameter;
        const double clhs297 =     clhs186*normalslave(1,1)*penalty_parameter;
        const double clhs298 =     clhs195*normalslave(0,1)*penalty_parameter;
        const double clhs299 =     clhs202*normalslave(1,1)*penalty_parameter;
        const double clhs300 =     clhs211*normalslave(0,1)*penalty_parameter;
        const double clhs301 =     clhs218*normalslave(1,1)*penalty_parameter;
        const double clhs302 =     clhs227*normalslave(0,1)*penalty_parameter;
        const double clhs303 =     clhs234*normalslave(1,1)*penalty_parameter;
        const double clhs304 =     clhs243*normalslave(0,1)*penalty_parameter;
        const double clhs305 =     clhs250*normalslave(1,1)*penalty_parameter;
        const double clhs306 =     clhs259*normalslave(0,1)*penalty_parameter;
        const double clhs307 =     clhs266*normalslave(1,1)*penalty_parameter;
        const double clhs308 =     normalslave(0,1)*scale_factor;
        const double clhs309 =     normalslave(1,1)*scale_factor;
        const double clhs310 =     clhs15*normalslave(0,2)*penalty_parameter;
        const double clhs311 =     clhs23*normalslave(1,2)*penalty_parameter;
        const double clhs312 =     clhs37*normalslave(0,2);
        const double clhs313 =     clhs42*normalslave(1,2);
        const double clhs314 =     clhs47*normalslave(0,2)*penalty_parameter;
        const double clhs315 =     clhs52*normalslave(1,2)*penalty_parameter;
        const double clhs316 =     clhs57*normalslave(0,2)*penalty_parameter;
        const double clhs317 =     clhs62*normalslave(1,2)*penalty_parameter;
        const double clhs318 =     clhs67*normalslave(0,2)*penalty_parameter;
        const double clhs319 =     clhs72*normalslave(1,2)*penalty_parameter;
        const double clhs320 =     clhs77*normalslave(0,2)*penalty_parameter;
        const double clhs321 =     clhs82*normalslave(1,2)*penalty_parameter;
        const double clhs322 =     clhs87*normalslave(0,2)*penalty_parameter;
        const double clhs323 =     clhs92*normalslave(1,2)*penalty_parameter;
        const double clhs324 =     clhs97*normalslave(0,2)*penalty_parameter;
        const double clhs325 =     clhs102*normalslave(1,2)*penalty_parameter;
        const double clhs326 =     clhs107*normalslave(0,2)*penalty_parameter;
        const double clhs327 =     clhs112*normalslave(1,2)*penalty_parameter;
        const double clhs328 =     clhs117*normalslave(0,2)*penalty_parameter;
        const double clhs329 =     clhs122*normalslave(1,2)*penalty_parameter;
        const double clhs330 =     clhs131*normalslave(0,2)*penalty_parameter;
        const double clhs331 =     clhs138*normalslave(1,2)*penalty_parameter;
        const double clhs332 =     clhs147*normalslave(0,2)*penalty_parameter;
        const double clhs333 =     clhs154*normalslave(1,2)*penalty_parameter;
        const double clhs334 =     clhs163*normalslave(0,2)*penalty_parameter;
        const double clhs335 =     clhs170*normalslave(1,2)*penalty_parameter;
        const double clhs336 =     clhs179*normalslave(0,2)*penalty_parameter;
        const double clhs337 =     clhs186*normalslave(1,2)*penalty_parameter;
        const double clhs338 =     clhs195*normalslave(0,2)*penalty_parameter;
        const double clhs339 =     clhs202*normalslave(1,2)*penalty_parameter;
        const double clhs340 =     clhs211*normalslave(0,2)*penalty_parameter;
        const double clhs341 =     clhs218*normalslave(1,2)*penalty_parameter;
        const double clhs342 =     clhs227*normalslave(0,2)*penalty_parameter;
        const double clhs343 =     clhs234*normalslave(1,2)*penalty_parameter;
        const double clhs344 =     clhs243*normalslave(0,2)*penalty_parameter;
        const double clhs345 =     clhs250*normalslave(1,2)*penalty_parameter;
        const double clhs346 =     clhs259*normalslave(0,2)*penalty_parameter;
        const double clhs347 =     clhs266*normalslave(1,2)*penalty_parameter;
        const double clhs348 =     normalslave(0,2)*scale_factor;
        const double clhs349 =     normalslave(1,2)*scale_factor;
        const double clhs350 =     clhs15*normalslave(0,0);
        const double clhs351 =     clhs23*normalslave(1,0);
        const double clhs352 =     clhs47*normalslave(0,0);
        const double clhs353 =     clhs52*normalslave(1,0);
        const double clhs354 =     clhs57*normalslave(0,0);
        const double clhs355 =     clhs62*normalslave(1,0);
        const double clhs356 =     clhs67*normalslave(0,0);
        const double clhs357 =     clhs72*normalslave(1,0);
        const double clhs358 =     clhs77*normalslave(0,0);
        const double clhs359 =     clhs82*normalslave(1,0);
        const double clhs360 =     clhs87*normalslave(0,0);
        const double clhs361 =     clhs92*normalslave(1,0);
        const double clhs362 =     clhs97*normalslave(0,0);
        const double clhs363 =     clhs102*normalslave(1,0);
        const double clhs364 =     clhs107*normalslave(0,0);
        const double clhs365 =     clhs112*normalslave(1,0);
        const double clhs366 =     clhs117*normalslave(0,0);
        const double clhs367 =     clhs122*normalslave(1,0);
        const double clhs368 =     clhs15*normalslave(0,1);
        const double clhs369 =     clhs23*normalslave(1,1);
        const double clhs370 =     clhs47*normalslave(0,1);
        const double clhs371 =     clhs52*normalslave(1,1);
        const double clhs372 =     clhs57*normalslave(0,1);
        const double clhs373 =     clhs62*normalslave(1,1);
        const double clhs374 =     clhs67*normalslave(0,1);
        const double clhs375 =     clhs72*normalslave(1,1);
        const double clhs376 =     clhs77*normalslave(0,1);
        const double clhs377 =     clhs82*normalslave(1,1);
        const double clhs378 =     clhs87*normalslave(0,1);
        const double clhs379 =     clhs92*normalslave(1,1);
        const double clhs380 =     clhs97*normalslave(0,1);
        const double clhs381 =     clhs102*normalslave(1,1);
        const double clhs382 =     clhs107*normalslave(0,1);
        const double clhs383 =     clhs112*normalslave(1,1);
        const double clhs384 =     clhs117*normalslave(0,1);
        const double clhs385 =     clhs122*normalslave(1,1);
        const double clhs386 =     clhs15*normalslave(0,2);
        const double clhs387 =     clhs23*normalslave(1,2);
        const double clhs388 =     clhs47*normalslave(0,2);
        const double clhs389 =     clhs52*normalslave(1,2);
        const double clhs390 =     clhs57*normalslave(0,2);
        const double clhs391 =     clhs62*normalslave(1,2);
        const double clhs392 =     clhs67*normalslave(0,2);
        const double clhs393 =     clhs72*normalslave(1,2);
        const double clhs394 =     clhs77*normalslave(0,2);
        const double clhs395 =     clhs82*normalslave(1,2);
        const double clhs396 =     clhs87*normalslave(0,2);
        const double clhs397 =     clhs92*normalslave(1,2);
        const double clhs398 =     clhs97*normalslave(0,2);
        const double clhs399 =     clhs102*normalslave(1,2);
        const double clhs400 =     clhs107*normalslave(0,2);
        const double clhs401 =     clhs112*normalslave(1,2);
        const double clhs402 =     clhs117*normalslave(0,2);
        const double clhs403 =     clhs122*normalslave(1,2);
    
        lhs(0,0)=-clhs0*clhs16 - clhs17*clhs24 + clhs18*clhs43 + clhs2*clhs38;
        lhs(0,1)=-clhs0*clhs48 - clhs17*clhs53 + clhs38*clhs44 + clhs43*clhs49;
        lhs(0,2)=-clhs0*clhs58 - clhs17*clhs63 + clhs38*clhs54 + clhs43*clhs59;
        lhs(0,3)=-clhs0*clhs68 - clhs17*clhs73 + clhs38*clhs64 + clhs43*clhs69;
        lhs(0,4)=-clhs0*clhs78 - clhs17*clhs83 + clhs38*clhs74 + clhs43*clhs79;
        lhs(0,5)=-clhs0*clhs88 - clhs17*clhs93 + clhs38*clhs84 + clhs43*clhs89;
        lhs(0,6)=-clhs0*clhs98 - clhs103*clhs17 + clhs38*clhs94 + clhs43*clhs99;
        lhs(0,7)=-clhs0*clhs108 + clhs104*clhs38 + clhs109*clhs43 - clhs113*clhs17;
        lhs(0,8)=-clhs0*clhs118 + clhs114*clhs38 + clhs119*clhs43 - clhs123*clhs17;
        lhs(0,9)=clhs0*clhs132 + clhs124*clhs38 + clhs125*clhs43 + clhs139*clhs17;
        lhs(0,10)=clhs0*clhs148 + clhs140*clhs38 + clhs141*clhs43 + clhs155*clhs17;
        lhs(0,11)=clhs0*clhs164 + clhs156*clhs38 + clhs157*clhs43 + clhs17*clhs171;
        lhs(0,12)=clhs0*clhs180 + clhs17*clhs187 + clhs172*clhs38 + clhs173*clhs43;
        lhs(0,13)=clhs0*clhs196 + clhs17*clhs203 + clhs188*clhs38 + clhs189*clhs43;
        lhs(0,14)=clhs0*clhs212 + clhs17*clhs219 + clhs204*clhs38 + clhs205*clhs43;
        lhs(0,15)=clhs0*clhs228 + clhs17*clhs235 + clhs220*clhs38 + clhs221*clhs43;
        lhs(0,16)=clhs0*clhs244 + clhs17*clhs251 + clhs236*clhs38 + clhs237*clhs43;
        lhs(0,17)=clhs0*clhs260 + clhs17*clhs267 + clhs252*clhs38 + clhs253*clhs43;
        lhs(0,18)=clhs0*clhs268;
        lhs(0,19)=clhs17*clhs269;
        lhs(0,20)=0;
        lhs(1,0)=-clhs0*clhs270 - clhs17*clhs271 + clhs18*clhs273 + clhs2*clhs272;
        lhs(1,1)=-clhs0*clhs274 - clhs17*clhs275 + clhs272*clhs44 + clhs273*clhs49;
        lhs(1,2)=-clhs0*clhs276 - clhs17*clhs277 + clhs272*clhs54 + clhs273*clhs59;
        lhs(1,3)=-clhs0*clhs278 - clhs17*clhs279 + clhs272*clhs64 + clhs273*clhs69;
        lhs(1,4)=-clhs0*clhs280 - clhs17*clhs281 + clhs272*clhs74 + clhs273*clhs79;
        lhs(1,5)=-clhs0*clhs282 - clhs17*clhs283 + clhs272*clhs84 + clhs273*clhs89;
        lhs(1,6)=-clhs0*clhs284 - clhs17*clhs285 + clhs272*clhs94 + clhs273*clhs99;
        lhs(1,7)=-clhs0*clhs286 + clhs104*clhs272 + clhs109*clhs273 - clhs17*clhs287;
        lhs(1,8)=-clhs0*clhs288 + clhs114*clhs272 + clhs119*clhs273 - clhs17*clhs289;
        lhs(1,9)=clhs0*clhs290 + clhs124*clhs272 + clhs125*clhs273 + clhs17*clhs291;
        lhs(1,10)=clhs0*clhs292 + clhs140*clhs272 + clhs141*clhs273 + clhs17*clhs293;
        lhs(1,11)=clhs0*clhs294 + clhs156*clhs272 + clhs157*clhs273 + clhs17*clhs295;
        lhs(1,12)=clhs0*clhs296 + clhs17*clhs297 + clhs172*clhs272 + clhs173*clhs273;
        lhs(1,13)=clhs0*clhs298 + clhs17*clhs299 + clhs188*clhs272 + clhs189*clhs273;
        lhs(1,14)=clhs0*clhs300 + clhs17*clhs301 + clhs204*clhs272 + clhs205*clhs273;
        lhs(1,15)=clhs0*clhs302 + clhs17*clhs303 + clhs220*clhs272 + clhs221*clhs273;
        lhs(1,16)=clhs0*clhs304 + clhs17*clhs305 + clhs236*clhs272 + clhs237*clhs273;
        lhs(1,17)=clhs0*clhs306 + clhs17*clhs307 + clhs252*clhs272 + clhs253*clhs273;
        lhs(1,18)=clhs0*clhs308;
        lhs(1,19)=clhs17*clhs309;
        lhs(1,20)=0;
        lhs(2,0)=-clhs0*clhs310 - clhs17*clhs311 + clhs18*clhs313 + clhs2*clhs312;
        lhs(2,1)=-clhs0*clhs314 - clhs17*clhs315 + clhs312*clhs44 + clhs313*clhs49;
        lhs(2,2)=-clhs0*clhs316 - clhs17*clhs317 + clhs312*clhs54 + clhs313*clhs59;
        lhs(2,3)=-clhs0*clhs318 - clhs17*clhs319 + clhs312*clhs64 + clhs313*clhs69;
        lhs(2,4)=-clhs0*clhs320 - clhs17*clhs321 + clhs312*clhs74 + clhs313*clhs79;
        lhs(2,5)=-clhs0*clhs322 - clhs17*clhs323 + clhs312*clhs84 + clhs313*clhs89;
        lhs(2,6)=-clhs0*clhs324 - clhs17*clhs325 + clhs312*clhs94 + clhs313*clhs99;
        lhs(2,7)=-clhs0*clhs326 + clhs104*clhs312 + clhs109*clhs313 - clhs17*clhs327;
        lhs(2,8)=-clhs0*clhs328 + clhs114*clhs312 + clhs119*clhs313 - clhs17*clhs329;
        lhs(2,9)=clhs0*clhs330 + clhs124*clhs312 + clhs125*clhs313 + clhs17*clhs331;
        lhs(2,10)=clhs0*clhs332 + clhs140*clhs312 + clhs141*clhs313 + clhs17*clhs333;
        lhs(2,11)=clhs0*clhs334 + clhs156*clhs312 + clhs157*clhs313 + clhs17*clhs335;
        lhs(2,12)=clhs0*clhs336 + clhs17*clhs337 + clhs172*clhs312 + clhs173*clhs313;
        lhs(2,13)=clhs0*clhs338 + clhs17*clhs339 + clhs188*clhs312 + clhs189*clhs313;
        lhs(2,14)=clhs0*clhs340 + clhs17*clhs341 + clhs204*clhs312 + clhs205*clhs313;
        lhs(2,15)=clhs0*clhs342 + clhs17*clhs343 + clhs220*clhs312 + clhs221*clhs313;
        lhs(2,16)=clhs0*clhs344 + clhs17*clhs345 + clhs236*clhs312 + clhs237*clhs313;
        lhs(2,17)=clhs0*clhs346 + clhs17*clhs347 + clhs252*clhs312 + clhs253*clhs313;
        lhs(2,18)=clhs0*clhs348;
        lhs(2,19)=clhs17*clhs349;
        lhs(2,20)=0;
        lhs(3,0)=-clhs16*clhs4 - clhs19*clhs24 + clhs20*clhs43 + clhs38*clhs5;
        lhs(3,1)=-clhs19*clhs53 + clhs38*clhs45 - clhs4*clhs48 + clhs43*clhs50;
        lhs(3,2)=-clhs19*clhs63 + clhs38*clhs55 - clhs4*clhs58 + clhs43*clhs60;
        lhs(3,3)=-clhs19*clhs73 + clhs38*clhs65 - clhs4*clhs68 + clhs43*clhs70;
        lhs(3,4)=-clhs19*clhs83 + clhs38*clhs75 - clhs4*clhs78 + clhs43*clhs80;
        lhs(3,5)=-clhs19*clhs93 + clhs38*clhs85 - clhs4*clhs88 + clhs43*clhs90;
        lhs(3,6)=clhs100*clhs43 - clhs103*clhs19 + clhs38*clhs95 - clhs4*clhs98;
        lhs(3,7)=clhs105*clhs38 - clhs108*clhs4 + clhs110*clhs43 - clhs113*clhs19;
        lhs(3,8)=clhs115*clhs38 - clhs118*clhs4 + clhs120*clhs43 - clhs123*clhs19;
        lhs(3,9)=clhs129*clhs38 + clhs132*clhs4 + clhs136*clhs43 + clhs139*clhs19;
        lhs(3,10)=clhs145*clhs38 + clhs148*clhs4 + clhs152*clhs43 + clhs155*clhs19;
        lhs(3,11)=clhs161*clhs38 + clhs164*clhs4 + clhs168*clhs43 + clhs171*clhs19;
        lhs(3,12)=clhs177*clhs38 + clhs180*clhs4 + clhs184*clhs43 + clhs187*clhs19;
        lhs(3,13)=clhs19*clhs203 + clhs193*clhs38 + clhs196*clhs4 + clhs200*clhs43;
        lhs(3,14)=clhs19*clhs219 + clhs209*clhs38 + clhs212*clhs4 + clhs216*clhs43;
        lhs(3,15)=clhs19*clhs235 + clhs225*clhs38 + clhs228*clhs4 + clhs232*clhs43;
        lhs(3,16)=clhs19*clhs251 + clhs241*clhs38 + clhs244*clhs4 + clhs248*clhs43;
        lhs(3,17)=clhs19*clhs267 + clhs257*clhs38 + clhs260*clhs4 + clhs264*clhs43;
        lhs(3,18)=clhs268*clhs4;
        lhs(3,19)=clhs19*clhs269;
        lhs(3,20)=0;
        lhs(4,0)=-clhs19*clhs271 + clhs20*clhs273 - clhs270*clhs4 + clhs272*clhs5;
        lhs(4,1)=-clhs19*clhs275 + clhs272*clhs45 + clhs273*clhs50 - clhs274*clhs4;
        lhs(4,2)=-clhs19*clhs277 + clhs272*clhs55 + clhs273*clhs60 - clhs276*clhs4;
        lhs(4,3)=-clhs19*clhs279 + clhs272*clhs65 + clhs273*clhs70 - clhs278*clhs4;
        lhs(4,4)=-clhs19*clhs281 + clhs272*clhs75 + clhs273*clhs80 - clhs280*clhs4;
        lhs(4,5)=-clhs19*clhs283 + clhs272*clhs85 + clhs273*clhs90 - clhs282*clhs4;
        lhs(4,6)=clhs100*clhs273 - clhs19*clhs285 + clhs272*clhs95 - clhs284*clhs4;
        lhs(4,7)=clhs105*clhs272 + clhs110*clhs273 - clhs19*clhs287 - clhs286*clhs4;
        lhs(4,8)=clhs115*clhs272 + clhs120*clhs273 - clhs19*clhs289 - clhs288*clhs4;
        lhs(4,9)=clhs129*clhs272 + clhs136*clhs273 + clhs19*clhs291 + clhs290*clhs4;
        lhs(4,10)=clhs145*clhs272 + clhs152*clhs273 + clhs19*clhs293 + clhs292*clhs4;
        lhs(4,11)=clhs161*clhs272 + clhs168*clhs273 + clhs19*clhs295 + clhs294*clhs4;
        lhs(4,12)=clhs177*clhs272 + clhs184*clhs273 + clhs19*clhs297 + clhs296*clhs4;
        lhs(4,13)=clhs19*clhs299 + clhs193*clhs272 + clhs200*clhs273 + clhs298*clhs4;
        lhs(4,14)=clhs19*clhs301 + clhs209*clhs272 + clhs216*clhs273 + clhs300*clhs4;
        lhs(4,15)=clhs19*clhs303 + clhs225*clhs272 + clhs232*clhs273 + clhs302*clhs4;
        lhs(4,16)=clhs19*clhs305 + clhs241*clhs272 + clhs248*clhs273 + clhs304*clhs4;
        lhs(4,17)=clhs19*clhs307 + clhs257*clhs272 + clhs264*clhs273 + clhs306*clhs4;
        lhs(4,18)=clhs308*clhs4;
        lhs(4,19)=clhs19*clhs309;
        lhs(4,20)=0;
        lhs(5,0)=-clhs19*clhs311 + clhs20*clhs313 - clhs310*clhs4 + clhs312*clhs5;
        lhs(5,1)=-clhs19*clhs315 + clhs312*clhs45 + clhs313*clhs50 - clhs314*clhs4;
        lhs(5,2)=-clhs19*clhs317 + clhs312*clhs55 + clhs313*clhs60 - clhs316*clhs4;
        lhs(5,3)=-clhs19*clhs319 + clhs312*clhs65 + clhs313*clhs70 - clhs318*clhs4;
        lhs(5,4)=-clhs19*clhs321 + clhs312*clhs75 + clhs313*clhs80 - clhs320*clhs4;
        lhs(5,5)=-clhs19*clhs323 + clhs312*clhs85 + clhs313*clhs90 - clhs322*clhs4;
        lhs(5,6)=clhs100*clhs313 - clhs19*clhs325 + clhs312*clhs95 - clhs324*clhs4;
        lhs(5,7)=clhs105*clhs312 + clhs110*clhs313 - clhs19*clhs327 - clhs326*clhs4;
        lhs(5,8)=clhs115*clhs312 + clhs120*clhs313 - clhs19*clhs329 - clhs328*clhs4;
        lhs(5,9)=clhs129*clhs312 + clhs136*clhs313 + clhs19*clhs331 + clhs330*clhs4;
        lhs(5,10)=clhs145*clhs312 + clhs152*clhs313 + clhs19*clhs333 + clhs332*clhs4;
        lhs(5,11)=clhs161*clhs312 + clhs168*clhs313 + clhs19*clhs335 + clhs334*clhs4;
        lhs(5,12)=clhs177*clhs312 + clhs184*clhs313 + clhs19*clhs337 + clhs336*clhs4;
        lhs(5,13)=clhs19*clhs339 + clhs193*clhs312 + clhs200*clhs313 + clhs338*clhs4;
        lhs(5,14)=clhs19*clhs341 + clhs209*clhs312 + clhs216*clhs313 + clhs340*clhs4;
        lhs(5,15)=clhs19*clhs343 + clhs225*clhs312 + clhs232*clhs313 + clhs342*clhs4;
        lhs(5,16)=clhs19*clhs345 + clhs241*clhs312 + clhs248*clhs313 + clhs344*clhs4;
        lhs(5,17)=clhs19*clhs347 + clhs257*clhs312 + clhs264*clhs313 + clhs346*clhs4;
        lhs(5,18)=clhs348*clhs4;
        lhs(5,19)=clhs19*clhs349;
        lhs(5,20)=0;
        lhs(6,0)=-clhs16*clhs7 - clhs21*clhs24 + clhs22*clhs43 + clhs38*clhs8;
        lhs(6,1)=-clhs21*clhs53 + clhs38*clhs46 + clhs43*clhs51 - clhs48*clhs7;
        lhs(6,2)=-clhs21*clhs63 + clhs38*clhs56 + clhs43*clhs61 - clhs58*clhs7;
        lhs(6,3)=-clhs21*clhs73 + clhs38*clhs66 + clhs43*clhs71 - clhs68*clhs7;
        lhs(6,4)=-clhs21*clhs83 + clhs38*clhs76 + clhs43*clhs81 - clhs7*clhs78;
        lhs(6,5)=-clhs21*clhs93 + clhs38*clhs86 + clhs43*clhs91 - clhs7*clhs88;
        lhs(6,6)=clhs101*clhs43 - clhs103*clhs21 + clhs38*clhs96 - clhs7*clhs98;
        lhs(6,7)=clhs106*clhs38 - clhs108*clhs7 + clhs111*clhs43 - clhs113*clhs21;
        lhs(6,8)=clhs116*clhs38 - clhs118*clhs7 + clhs121*clhs43 - clhs123*clhs21;
        lhs(6,9)=clhs130*clhs38 + clhs132*clhs7 + clhs137*clhs43 + clhs139*clhs21;
        lhs(6,10)=clhs146*clhs38 + clhs148*clhs7 + clhs153*clhs43 + clhs155*clhs21;
        lhs(6,11)=clhs162*clhs38 + clhs164*clhs7 + clhs169*clhs43 + clhs171*clhs21;
        lhs(6,12)=clhs178*clhs38 + clhs180*clhs7 + clhs185*clhs43 + clhs187*clhs21;
        lhs(6,13)=clhs194*clhs38 + clhs196*clhs7 + clhs201*clhs43 + clhs203*clhs21;
        lhs(6,14)=clhs21*clhs219 + clhs210*clhs38 + clhs212*clhs7 + clhs217*clhs43;
        lhs(6,15)=clhs21*clhs235 + clhs226*clhs38 + clhs228*clhs7 + clhs233*clhs43;
        lhs(6,16)=clhs21*clhs251 + clhs242*clhs38 + clhs244*clhs7 + clhs249*clhs43;
        lhs(6,17)=clhs21*clhs267 + clhs258*clhs38 + clhs260*clhs7 + clhs265*clhs43;
        lhs(6,18)=clhs268*clhs7;
        lhs(6,19)=clhs21*clhs269;
        lhs(6,20)=0;
        lhs(7,0)=-clhs21*clhs271 + clhs22*clhs273 - clhs270*clhs7 + clhs272*clhs8;
        lhs(7,1)=-clhs21*clhs275 + clhs272*clhs46 + clhs273*clhs51 - clhs274*clhs7;
        lhs(7,2)=-clhs21*clhs277 + clhs272*clhs56 + clhs273*clhs61 - clhs276*clhs7;
        lhs(7,3)=-clhs21*clhs279 + clhs272*clhs66 + clhs273*clhs71 - clhs278*clhs7;
        lhs(7,4)=-clhs21*clhs281 + clhs272*clhs76 + clhs273*clhs81 - clhs280*clhs7;
        lhs(7,5)=-clhs21*clhs283 + clhs272*clhs86 + clhs273*clhs91 - clhs282*clhs7;
        lhs(7,6)=clhs101*clhs273 - clhs21*clhs285 + clhs272*clhs96 - clhs284*clhs7;
        lhs(7,7)=clhs106*clhs272 + clhs111*clhs273 - clhs21*clhs287 - clhs286*clhs7;
        lhs(7,8)=clhs116*clhs272 + clhs121*clhs273 - clhs21*clhs289 - clhs288*clhs7;
        lhs(7,9)=clhs130*clhs272 + clhs137*clhs273 + clhs21*clhs291 + clhs290*clhs7;
        lhs(7,10)=clhs146*clhs272 + clhs153*clhs273 + clhs21*clhs293 + clhs292*clhs7;
        lhs(7,11)=clhs162*clhs272 + clhs169*clhs273 + clhs21*clhs295 + clhs294*clhs7;
        lhs(7,12)=clhs178*clhs272 + clhs185*clhs273 + clhs21*clhs297 + clhs296*clhs7;
        lhs(7,13)=clhs194*clhs272 + clhs201*clhs273 + clhs21*clhs299 + clhs298*clhs7;
        lhs(7,14)=clhs21*clhs301 + clhs210*clhs272 + clhs217*clhs273 + clhs300*clhs7;
        lhs(7,15)=clhs21*clhs303 + clhs226*clhs272 + clhs233*clhs273 + clhs302*clhs7;
        lhs(7,16)=clhs21*clhs305 + clhs242*clhs272 + clhs249*clhs273 + clhs304*clhs7;
        lhs(7,17)=clhs21*clhs307 + clhs258*clhs272 + clhs265*clhs273 + clhs306*clhs7;
        lhs(7,18)=clhs308*clhs7;
        lhs(7,19)=clhs21*clhs309;
        lhs(7,20)=0;
        lhs(8,0)=-clhs21*clhs311 + clhs22*clhs313 - clhs310*clhs7 + clhs312*clhs8;
        lhs(8,1)=-clhs21*clhs315 + clhs312*clhs46 + clhs313*clhs51 - clhs314*clhs7;
        lhs(8,2)=-clhs21*clhs317 + clhs312*clhs56 + clhs313*clhs61 - clhs316*clhs7;
        lhs(8,3)=-clhs21*clhs319 + clhs312*clhs66 + clhs313*clhs71 - clhs318*clhs7;
        lhs(8,4)=-clhs21*clhs321 + clhs312*clhs76 + clhs313*clhs81 - clhs320*clhs7;
        lhs(8,5)=-clhs21*clhs323 + clhs312*clhs86 + clhs313*clhs91 - clhs322*clhs7;
        lhs(8,6)=clhs101*clhs313 - clhs21*clhs325 + clhs312*clhs96 - clhs324*clhs7;
        lhs(8,7)=clhs106*clhs312 + clhs111*clhs313 - clhs21*clhs327 - clhs326*clhs7;
        lhs(8,8)=clhs116*clhs312 + clhs121*clhs313 - clhs21*clhs329 - clhs328*clhs7;
        lhs(8,9)=clhs130*clhs312 + clhs137*clhs313 + clhs21*clhs331 + clhs330*clhs7;
        lhs(8,10)=clhs146*clhs312 + clhs153*clhs313 + clhs21*clhs333 + clhs332*clhs7;
        lhs(8,11)=clhs162*clhs312 + clhs169*clhs313 + clhs21*clhs335 + clhs334*clhs7;
        lhs(8,12)=clhs178*clhs312 + clhs185*clhs313 + clhs21*clhs337 + clhs336*clhs7;
        lhs(8,13)=clhs194*clhs312 + clhs201*clhs313 + clhs21*clhs339 + clhs338*clhs7;
        lhs(8,14)=clhs21*clhs341 + clhs210*clhs312 + clhs217*clhs313 + clhs340*clhs7;
        lhs(8,15)=clhs21*clhs343 + clhs226*clhs312 + clhs233*clhs313 + clhs342*clhs7;
        lhs(8,16)=clhs21*clhs345 + clhs242*clhs312 + clhs249*clhs313 + clhs344*clhs7;
        lhs(8,17)=clhs21*clhs347 + clhs258*clhs312 + clhs265*clhs313 + clhs346*clhs7;
        lhs(8,18)=clhs348*clhs7;
        lhs(8,19)=clhs21*clhs349;
        lhs(8,20)=0;
        lhs(9,0)=penalty_parameter*(clhs26*clhs350 + clhs351*clhs39);
        lhs(9,1)=penalty_parameter*(clhs26*clhs352 + clhs353*clhs39);
        lhs(9,2)=penalty_parameter*(clhs26*clhs354 + clhs355*clhs39);
        lhs(9,3)=penalty_parameter*(clhs26*clhs356 + clhs357*clhs39);
        lhs(9,4)=penalty_parameter*(clhs26*clhs358 + clhs359*clhs39);
        lhs(9,5)=penalty_parameter*(clhs26*clhs360 + clhs361*clhs39);
        lhs(9,6)=penalty_parameter*(clhs26*clhs362 + clhs363*clhs39);
        lhs(9,7)=penalty_parameter*(clhs26*clhs364 + clhs365*clhs39);
        lhs(9,8)=penalty_parameter*(clhs26*clhs366 + clhs367*clhs39);
        lhs(9,9)=-clhs126*clhs38 - clhs132*clhs26 - clhs133*clhs43 - clhs139*clhs39;
        lhs(9,10)=-clhs142*clhs38 - clhs148*clhs26 - clhs149*clhs43 - clhs155*clhs39;
        lhs(9,11)=-clhs158*clhs38 - clhs164*clhs26 - clhs165*clhs43 - clhs171*clhs39;
        lhs(9,12)=-clhs174*clhs38 - clhs180*clhs26 - clhs181*clhs43 - clhs187*clhs39;
        lhs(9,13)=-clhs190*clhs38 - clhs196*clhs26 - clhs197*clhs43 - clhs203*clhs39;
        lhs(9,14)=-clhs206*clhs38 - clhs212*clhs26 - clhs213*clhs43 - clhs219*clhs39;
        lhs(9,15)=-clhs222*clhs38 - clhs228*clhs26 - clhs229*clhs43 - clhs235*clhs39;
        lhs(9,16)=-clhs238*clhs38 - clhs244*clhs26 - clhs245*clhs43 - clhs251*clhs39;
        lhs(9,17)=-clhs254*clhs38 - clhs26*clhs260 - clhs261*clhs43 - clhs267*clhs39;
        lhs(9,18)=-clhs26*clhs268;
        lhs(9,19)=-clhs269*clhs39;
        lhs(9,20)=0;
        lhs(10,0)=penalty_parameter*(clhs26*clhs368 + clhs369*clhs39);
        lhs(10,1)=penalty_parameter*(clhs26*clhs370 + clhs371*clhs39);
        lhs(10,2)=penalty_parameter*(clhs26*clhs372 + clhs373*clhs39);
        lhs(10,3)=penalty_parameter*(clhs26*clhs374 + clhs375*clhs39);
        lhs(10,4)=penalty_parameter*(clhs26*clhs376 + clhs377*clhs39);
        lhs(10,5)=penalty_parameter*(clhs26*clhs378 + clhs379*clhs39);
        lhs(10,6)=penalty_parameter*(clhs26*clhs380 + clhs381*clhs39);
        lhs(10,7)=penalty_parameter*(clhs26*clhs382 + clhs383*clhs39);
        lhs(10,8)=penalty_parameter*(clhs26*clhs384 + clhs385*clhs39);
        lhs(10,9)=-clhs126*clhs272 - clhs133*clhs273 - clhs26*clhs290 - clhs291*clhs39;
        lhs(10,10)=-clhs142*clhs272 - clhs149*clhs273 - clhs26*clhs292 - clhs293*clhs39;
        lhs(10,11)=-clhs158*clhs272 - clhs165*clhs273 - clhs26*clhs294 - clhs295*clhs39;
        lhs(10,12)=-clhs174*clhs272 - clhs181*clhs273 - clhs26*clhs296 - clhs297*clhs39;
        lhs(10,13)=-clhs190*clhs272 - clhs197*clhs273 - clhs26*clhs298 - clhs299*clhs39;
        lhs(10,14)=-clhs206*clhs272 - clhs213*clhs273 - clhs26*clhs300 - clhs301*clhs39;
        lhs(10,15)=-clhs222*clhs272 - clhs229*clhs273 - clhs26*clhs302 - clhs303*clhs39;
        lhs(10,16)=-clhs238*clhs272 - clhs245*clhs273 - clhs26*clhs304 - clhs305*clhs39;
        lhs(10,17)=-clhs254*clhs272 - clhs26*clhs306 - clhs261*clhs273 - clhs307*clhs39;
        lhs(10,18)=-clhs26*clhs308;
        lhs(10,19)=-clhs309*clhs39;
        lhs(10,20)=0;
        lhs(11,0)=penalty_parameter*(clhs26*clhs386 + clhs387*clhs39);
        lhs(11,1)=penalty_parameter*(clhs26*clhs388 + clhs389*clhs39);
        lhs(11,2)=penalty_parameter*(clhs26*clhs390 + clhs39*clhs391);
        lhs(11,3)=penalty_parameter*(clhs26*clhs392 + clhs39*clhs393);
        lhs(11,4)=penalty_parameter*(clhs26*clhs394 + clhs39*clhs395);
        lhs(11,5)=penalty_parameter*(clhs26*clhs396 + clhs39*clhs397);
        lhs(11,6)=penalty_parameter*(clhs26*clhs398 + clhs39*clhs399);
        lhs(11,7)=penalty_parameter*(clhs26*clhs400 + clhs39*clhs401);
        lhs(11,8)=penalty_parameter*(clhs26*clhs402 + clhs39*clhs403);
        lhs(11,9)=-clhs126*clhs312 - clhs133*clhs313 - clhs26*clhs330 - clhs331*clhs39;
        lhs(11,10)=-clhs142*clhs312 - clhs149*clhs313 - clhs26*clhs332 - clhs333*clhs39;
        lhs(11,11)=-clhs158*clhs312 - clhs165*clhs313 - clhs26*clhs334 - clhs335*clhs39;
        lhs(11,12)=-clhs174*clhs312 - clhs181*clhs313 - clhs26*clhs336 - clhs337*clhs39;
        lhs(11,13)=-clhs190*clhs312 - clhs197*clhs313 - clhs26*clhs338 - clhs339*clhs39;
        lhs(11,14)=-clhs206*clhs312 - clhs213*clhs313 - clhs26*clhs340 - clhs341*clhs39;
        lhs(11,15)=-clhs222*clhs312 - clhs229*clhs313 - clhs26*clhs342 - clhs343*clhs39;
        lhs(11,16)=-clhs238*clhs312 - clhs245*clhs313 - clhs26*clhs344 - clhs345*clhs39;
        lhs(11,17)=-clhs254*clhs312 - clhs26*clhs346 - clhs261*clhs313 - clhs347*clhs39;
        lhs(11,18)=-clhs26*clhs348;
        lhs(11,19)=-clhs349*clhs39;
        lhs(11,20)=0;
        lhs(12,0)=penalty_parameter*(clhs28*clhs350 + clhs351*clhs40);
        lhs(12,1)=penalty_parameter*(clhs28*clhs352 + clhs353*clhs40);
        lhs(12,2)=penalty_parameter*(clhs28*clhs354 + clhs355*clhs40);
        lhs(12,3)=penalty_parameter*(clhs28*clhs356 + clhs357*clhs40);
        lhs(12,4)=penalty_parameter*(clhs28*clhs358 + clhs359*clhs40);
        lhs(12,5)=penalty_parameter*(clhs28*clhs360 + clhs361*clhs40);
        lhs(12,6)=penalty_parameter*(clhs28*clhs362 + clhs363*clhs40);
        lhs(12,7)=penalty_parameter*(clhs28*clhs364 + clhs365*clhs40);
        lhs(12,8)=penalty_parameter*(clhs28*clhs366 + clhs367*clhs40);
        lhs(12,9)=-clhs127*clhs38 - clhs132*clhs28 - clhs134*clhs43 - clhs139*clhs40;
        lhs(12,10)=-clhs143*clhs38 - clhs148*clhs28 - clhs150*clhs43 - clhs155*clhs40;
        lhs(12,11)=-clhs159*clhs38 - clhs164*clhs28 - clhs166*clhs43 - clhs171*clhs40;
        lhs(12,12)=-clhs175*clhs38 - clhs180*clhs28 - clhs182*clhs43 - clhs187*clhs40;
        lhs(12,13)=-clhs191*clhs38 - clhs196*clhs28 - clhs198*clhs43 - clhs203*clhs40;
        lhs(12,14)=-clhs207*clhs38 - clhs212*clhs28 - clhs214*clhs43 - clhs219*clhs40;
        lhs(12,15)=-clhs223*clhs38 - clhs228*clhs28 - clhs230*clhs43 - clhs235*clhs40;
        lhs(12,16)=-clhs239*clhs38 - clhs244*clhs28 - clhs246*clhs43 - clhs251*clhs40;
        lhs(12,17)=-clhs255*clhs38 - clhs260*clhs28 - clhs262*clhs43 - clhs267*clhs40;
        lhs(12,18)=-clhs268*clhs28;
        lhs(12,19)=-clhs269*clhs40;
        lhs(12,20)=0;
        lhs(13,0)=penalty_parameter*(clhs28*clhs368 + clhs369*clhs40);
        lhs(13,1)=penalty_parameter*(clhs28*clhs370 + clhs371*clhs40);
        lhs(13,2)=penalty_parameter*(clhs28*clhs372 + clhs373*clhs40);
        lhs(13,3)=penalty_parameter*(clhs28*clhs374 + clhs375*clhs40);
        lhs(13,4)=penalty_parameter*(clhs28*clhs376 + clhs377*clhs40);
        lhs(13,5)=penalty_parameter*(clhs28*clhs378 + clhs379*clhs40);
        lhs(13,6)=penalty_parameter*(clhs28*clhs380 + clhs381*clhs40);
        lhs(13,7)=penalty_parameter*(clhs28*clhs382 + clhs383*clhs40);
        lhs(13,8)=penalty_parameter*(clhs28*clhs384 + clhs385*clhs40);
        lhs(13,9)=-clhs127*clhs272 - clhs134*clhs273 - clhs28*clhs290 - clhs291*clhs40;
        lhs(13,10)=-clhs143*clhs272 - clhs150*clhs273 - clhs28*clhs292 - clhs293*clhs40;
        lhs(13,11)=-clhs159*clhs272 - clhs166*clhs273 - clhs28*clhs294 - clhs295*clhs40;
        lhs(13,12)=-clhs175*clhs272 - clhs182*clhs273 - clhs28*clhs296 - clhs297*clhs40;
        lhs(13,13)=-clhs191*clhs272 - clhs198*clhs273 - clhs28*clhs298 - clhs299*clhs40;
        lhs(13,14)=-clhs207*clhs272 - clhs214*clhs273 - clhs28*clhs300 - clhs301*clhs40;
        lhs(13,15)=-clhs223*clhs272 - clhs230*clhs273 - clhs28*clhs302 - clhs303*clhs40;
        lhs(13,16)=-clhs239*clhs272 - clhs246*clhs273 - clhs28*clhs304 - clhs305*clhs40;
        lhs(13,17)=-clhs255*clhs272 - clhs262*clhs273 - clhs28*clhs306 - clhs307*clhs40;
        lhs(13,18)=-clhs28*clhs308;
        lhs(13,19)=-clhs309*clhs40;
        lhs(13,20)=0;
        lhs(14,0)=penalty_parameter*(clhs28*clhs386 + clhs387*clhs40);
        lhs(14,1)=penalty_parameter*(clhs28*clhs388 + clhs389*clhs40);
        lhs(14,2)=penalty_parameter*(clhs28*clhs390 + clhs391*clhs40);
        lhs(14,3)=penalty_parameter*(clhs28*clhs392 + clhs393*clhs40);
        lhs(14,4)=penalty_parameter*(clhs28*clhs394 + clhs395*clhs40);
        lhs(14,5)=penalty_parameter*(clhs28*clhs396 + clhs397*clhs40);
        lhs(14,6)=penalty_parameter*(clhs28*clhs398 + clhs399*clhs40);
        lhs(14,7)=penalty_parameter*(clhs28*clhs400 + clhs40*clhs401);
        lhs(14,8)=penalty_parameter*(clhs28*clhs402 + clhs40*clhs403);
        lhs(14,9)=-clhs127*clhs312 - clhs134*clhs313 - clhs28*clhs330 - clhs331*clhs40;
        lhs(14,10)=-clhs143*clhs312 - clhs150*clhs313 - clhs28*clhs332 - clhs333*clhs40;
        lhs(14,11)=-clhs159*clhs312 - clhs166*clhs313 - clhs28*clhs334 - clhs335*clhs40;
        lhs(14,12)=-clhs175*clhs312 - clhs182*clhs313 - clhs28*clhs336 - clhs337*clhs40;
        lhs(14,13)=-clhs191*clhs312 - clhs198*clhs313 - clhs28*clhs338 - clhs339*clhs40;
        lhs(14,14)=-clhs207*clhs312 - clhs214*clhs313 - clhs28*clhs340 - clhs341*clhs40;
        lhs(14,15)=-clhs223*clhs312 - clhs230*clhs313 - clhs28*clhs342 - clhs343*clhs40;
        lhs(14,16)=-clhs239*clhs312 - clhs246*clhs313 - clhs28*clhs344 - clhs345*clhs40;
        lhs(14,17)=-clhs255*clhs312 - clhs262*clhs313 - clhs28*clhs346 - clhs347*clhs40;
        lhs(14,18)=-clhs28*clhs348;
        lhs(14,19)=-clhs349*clhs40;
        lhs(14,20)=0;
        lhs(15,0)=penalty_parameter*(clhs30*clhs350 + clhs351*clhs41);
        lhs(15,1)=penalty_parameter*(clhs30*clhs352 + clhs353*clhs41);
        lhs(15,2)=penalty_parameter*(clhs30*clhs354 + clhs355*clhs41);
        lhs(15,3)=penalty_parameter*(clhs30*clhs356 + clhs357*clhs41);
        lhs(15,4)=penalty_parameter*(clhs30*clhs358 + clhs359*clhs41);
        lhs(15,5)=penalty_parameter*(clhs30*clhs360 + clhs361*clhs41);
        lhs(15,6)=penalty_parameter*(clhs30*clhs362 + clhs363*clhs41);
        lhs(15,7)=penalty_parameter*(clhs30*clhs364 + clhs365*clhs41);
        lhs(15,8)=penalty_parameter*(clhs30*clhs366 + clhs367*clhs41);
        lhs(15,9)=-clhs128*clhs38 - clhs132*clhs30 - clhs135*clhs43 - clhs139*clhs41;
        lhs(15,10)=-clhs144*clhs38 - clhs148*clhs30 - clhs151*clhs43 - clhs155*clhs41;
        lhs(15,11)=-clhs160*clhs38 - clhs164*clhs30 - clhs167*clhs43 - clhs171*clhs41;
        lhs(15,12)=-clhs176*clhs38 - clhs180*clhs30 - clhs183*clhs43 - clhs187*clhs41;
        lhs(15,13)=-clhs192*clhs38 - clhs196*clhs30 - clhs199*clhs43 - clhs203*clhs41;
        lhs(15,14)=-clhs208*clhs38 - clhs212*clhs30 - clhs215*clhs43 - clhs219*clhs41;
        lhs(15,15)=-clhs224*clhs38 - clhs228*clhs30 - clhs231*clhs43 - clhs235*clhs41;
        lhs(15,16)=-clhs240*clhs38 - clhs244*clhs30 - clhs247*clhs43 - clhs251*clhs41;
        lhs(15,17)=-clhs256*clhs38 - clhs260*clhs30 - clhs263*clhs43 - clhs267*clhs41;
        lhs(15,18)=-clhs268*clhs30;
        lhs(15,19)=-clhs269*clhs41;
        lhs(15,20)=0;
        lhs(16,0)=penalty_parameter*(clhs30*clhs368 + clhs369*clhs41);
        lhs(16,1)=penalty_parameter*(clhs30*clhs370 + clhs371*clhs41);
        lhs(16,2)=penalty_parameter*(clhs30*clhs372 + clhs373*clhs41);
        lhs(16,3)=penalty_parameter*(clhs30*clhs374 + clhs375*clhs41);
        lhs(16,4)=penalty_parameter*(clhs30*clhs376 + clhs377*clhs41);
        lhs(16,5)=penalty_parameter*(clhs30*clhs378 + clhs379*clhs41);
        lhs(16,6)=penalty_parameter*(clhs30*clhs380 + clhs381*clhs41);
        lhs(16,7)=penalty_parameter*(clhs30*clhs382 + clhs383*clhs41);
        lhs(16,8)=penalty_parameter*(clhs30*clhs384 + clhs385*clhs41);
        lhs(16,9)=-clhs128*clhs272 - clhs135*clhs273 - clhs290*clhs30 - clhs291*clhs41;
        lhs(16,10)=-clhs144*clhs272 - clhs151*clhs273 - clhs292*clhs30 - clhs293*clhs41;
        lhs(16,11)=-clhs160*clhs272 - clhs167*clhs273 - clhs294*clhs30 - clhs295*clhs41;
        lhs(16,12)=-clhs176*clhs272 - clhs183*clhs273 - clhs296*clhs30 - clhs297*clhs41;
        lhs(16,13)=-clhs192*clhs272 - clhs199*clhs273 - clhs298*clhs30 - clhs299*clhs41;
        lhs(16,14)=-clhs208*clhs272 - clhs215*clhs273 - clhs30*clhs300 - clhs301*clhs41;
        lhs(16,15)=-clhs224*clhs272 - clhs231*clhs273 - clhs30*clhs302 - clhs303*clhs41;
        lhs(16,16)=-clhs240*clhs272 - clhs247*clhs273 - clhs30*clhs304 - clhs305*clhs41;
        lhs(16,17)=-clhs256*clhs272 - clhs263*clhs273 - clhs30*clhs306 - clhs307*clhs41;
        lhs(16,18)=-clhs30*clhs308;
        lhs(16,19)=-clhs309*clhs41;
        lhs(16,20)=0;
        lhs(17,0)=penalty_parameter*(clhs30*clhs386 + clhs387*clhs41);
        lhs(17,1)=penalty_parameter*(clhs30*clhs388 + clhs389*clhs41);
        lhs(17,2)=penalty_parameter*(clhs30*clhs390 + clhs391*clhs41);
        lhs(17,3)=penalty_parameter*(clhs30*clhs392 + clhs393*clhs41);
        lhs(17,4)=penalty_parameter*(clhs30*clhs394 + clhs395*clhs41);
        lhs(17,5)=penalty_parameter*(clhs30*clhs396 + clhs397*clhs41);
        lhs(17,6)=penalty_parameter*(clhs30*clhs398 + clhs399*clhs41);
        lhs(17,7)=penalty_parameter*(clhs30*clhs400 + clhs401*clhs41);
        lhs(17,8)=penalty_parameter*(clhs30*clhs402 + clhs403*clhs41);
        lhs(17,9)=-clhs128*clhs312 - clhs135*clhs313 - clhs30*clhs330 - clhs331*clhs41;
        lhs(17,10)=-clhs144*clhs312 - clhs151*clhs313 - clhs30*clhs332 - clhs333*clhs41;
        lhs(17,11)=-clhs160*clhs312 - clhs167*clhs313 - clhs30*clhs334 - clhs335*clhs41;
        lhs(17,12)=-clhs176*clhs312 - clhs183*clhs313 - clhs30*clhs336 - clhs337*clhs41;
        lhs(17,13)=-clhs192*clhs312 - clhs199*clhs313 - clhs30*clhs338 - clhs339*clhs41;
        lhs(17,14)=-clhs208*clhs312 - clhs215*clhs313 - clhs30*clhs340 - clhs341*clhs41;
        lhs(17,15)=-clhs224*clhs312 - clhs231*clhs313 - clhs30*clhs342 - clhs343*clhs41;
        lhs(17,16)=-clhs240*clhs312 - clhs247*clhs313 - clhs30*clhs344 - clhs345*clhs41;
        lhs(17,17)=-clhs256*clhs312 - clhs263*clhs313 - clhs30*clhs346 - clhs347*clhs41;
        lhs(17,18)=-clhs30*clhs348;
        lhs(17,19)=-clhs349*clhs41;
        lhs(17,20)=0;
        lhs(18,0)=clhs15*scale_factor;
        lhs(18,1)=clhs47*scale_factor;
        lhs(18,2)=clhs57*scale_factor;
        lhs(18,3)=clhs67*scale_factor;
        lhs(18,4)=clhs77*scale_factor;
        lhs(18,5)=clhs87*scale_factor;
        lhs(18,6)=clhs97*scale_factor;
        lhs(18,7)=clhs107*scale_factor;
        lhs(18,8)=clhs117*scale_factor;
        lhs(18,9)=-clhs131*scale_factor;
        lhs(18,10)=-clhs147*scale_factor;
        lhs(18,11)=-clhs163*scale_factor;
        lhs(18,12)=-clhs179*scale_factor;
        lhs(18,13)=-clhs195*scale_factor;
        lhs(18,14)=-clhs211*scale_factor;
        lhs(18,15)=-clhs227*scale_factor;
        lhs(18,16)=-clhs243*scale_factor;
        lhs(18,17)=-clhs259*scale_factor;
        lhs(18,18)=0;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=clhs23*scale_factor;
        lhs(19,1)=clhs52*scale_factor;
        lhs(19,2)=clhs62*scale_factor;
        lhs(19,3)=clhs72*scale_factor;
        lhs(19,4)=clhs82*scale_factor;
        lhs(19,5)=clhs92*scale_factor;
        lhs(19,6)=clhs102*scale_factor;
        lhs(19,7)=clhs112*scale_factor;
        lhs(19,8)=clhs122*scale_factor;
        lhs(19,9)=-clhs138*scale_factor;
        lhs(19,10)=-clhs154*scale_factor;
        lhs(19,11)=-clhs170*scale_factor;
        lhs(19,12)=-clhs186*scale_factor;
        lhs(19,13)=-clhs202*scale_factor;
        lhs(19,14)=-clhs218*scale_factor;
        lhs(19,15)=-clhs234*scale_factor;
        lhs(19,16)=-clhs250*scale_factor;
        lhs(19,17)=-clhs266*scale_factor;
        lhs(19,18)=0;
        lhs(19,19)=0;
        lhs(19,20)=0;
        lhs(20,0)=0;
        lhs(20,1)=0;
        lhs(20,2)=0;
        lhs(20,3)=0;
        lhs(20,4)=0;
        lhs(20,5)=0;
        lhs(20,6)=0;
        lhs(20,7)=0;
        lhs(20,8)=0;
        lhs(20,9)=0;
        lhs(20,10)=0;
        lhs(20,11)=0;
        lhs(20,12)=0;
        lhs(20,13)=0;
        lhs(20,14)=0;
        lhs(20,15)=0;
        lhs(20,16)=0;
        lhs(20,17)=0;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    }
    else if (rActiveInactive == 7 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs5 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs8 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs9 =     X2(0,2) + u2(0,2);
        const double clhs10 =     X2(1,2) + u2(1,2);
        const double clhs11 =     X2(2,2) + u2(2,2);
        const double clhs12 =     X2(0,0) + u2(0,0);
        const double clhs13 =     X2(1,0) + u2(1,0);
        const double clhs14 =     X2(2,0) + u2(2,0);
        const double clhs15 =     normalslave(0,0)*(clhs0 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs10*clhs5 + clhs11*clhs8 + clhs2*clhs9);
        const double clhs16 =     clhs15*normalslave(0,0)*penalty_parameter;
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs18 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs19 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs20 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs21 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs22 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs23 =     normalslave(1,0)*(clhs12*clhs18 + clhs13*clhs20 + clhs14*clhs22 + clhs17) + normalslave(1,1)*(clhs1*clhs18 + clhs20*clhs3 + clhs22*clhs6) + normalslave(1,2)*(clhs10*clhs20 + clhs11*clhs22 + clhs18*clhs9);
        const double clhs24 =     clhs23*normalslave(1,0)*penalty_parameter;
        const double clhs25 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs26 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs27 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs28 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs29 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double clhs30 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,0))
        const double clhs31 =     normalslave(2,0)*(clhs12*clhs26 + clhs13*clhs28 + clhs14*clhs30 + clhs25) + normalslave(2,1)*(clhs1*clhs26 + clhs28*clhs3 + clhs30*clhs6) + normalslave(2,2)*(clhs10*clhs28 + clhs11*clhs30 + clhs26*clhs9);
        const double clhs32 =     clhs31*normalslave(2,0)*penalty_parameter;
        const double clhs33 =     X1(0,0) + u1(0,0);
        const double clhs34 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs35 =     X1(1,0) + u1(1,0);
        const double clhs36 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs37 =     X1(2,0) + u1(2,0);
        const double clhs38 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs39 =     X1(0,1) + u1(0,1);
        const double clhs40 =     X1(1,1) + u1(1,1);
        const double clhs41 =     X1(2,1) + u1(2,1);
        const double clhs42 =     X1(0,2) + u1(0,2);
        const double clhs43 =     X1(1,2) + u1(1,2);
        const double clhs44 =     X1(2,2) + u1(2,2);
        const double clhs45 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs12 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs34 + clhs35*clhs36 + clhs37*clhs38) + normalslave(0,1)*(-clhs0*clhs1 - clhs3*clhs4 + clhs34*clhs39 + clhs36*clhs40 + clhs38*clhs41 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs9 - clhs10*clhs4 - clhs11*clhs7 + clhs34*clhs42 + clhs36*clhs43 + clhs38*clhs44));
        const double clhs46 =     clhs45*normalslave(0,0);
        const double clhs47 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs48 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs49 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs50 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs12*clhs17 - clhs13*clhs19 - clhs14*clhs21 + clhs33*clhs47 + clhs35*clhs48 + clhs37*clhs49) + normalslave(1,1)*(-clhs1*clhs17 - clhs19*clhs3 - clhs21*clhs6 + clhs39*clhs47 + clhs40*clhs48 + clhs41*clhs49) + normalslave(1,2)*(-clhs10*clhs19 - clhs11*clhs21 - clhs17*clhs9 + clhs42*clhs47 + clhs43*clhs48 + clhs44*clhs49));
        const double clhs51 =     clhs50*normalslave(1,0);
        const double clhs52 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs53 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs54 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double clhs55 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs12*clhs25 - clhs13*clhs27 - clhs14*clhs29 + clhs33*clhs52 + clhs35*clhs53 + clhs37*clhs54) + normalslave(2,1)*(-clhs1*clhs25 - clhs27*clhs3 - clhs29*clhs6 + clhs39*clhs52 + clhs40*clhs53 + clhs41*clhs54) + normalslave(2,2)*(-clhs10*clhs27 - clhs11*clhs29 - clhs25*clhs9 + clhs42*clhs52 + clhs43*clhs53 + clhs44*clhs54));
        const double clhs56 =     clhs55*normalslave(2,0);
        const double clhs57 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs60 =     normalslave(0,0)*(clhs12*clhs57 + clhs13*clhs58 + clhs14*clhs59) + normalslave(0,1)*(clhs0 + clhs1*clhs57 + clhs3*clhs58 + clhs59*clhs6) + normalslave(0,2)*(clhs10*clhs58 + clhs11*clhs59 + clhs57*clhs9);
        const double clhs61 =     clhs60*normalslave(0,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs65 =     normalslave(1,0)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64) + normalslave(1,1)*(clhs1*clhs62 + clhs17 + clhs3*clhs63 + clhs6*clhs64) + normalslave(1,2)*(clhs10*clhs63 + clhs11*clhs64 + clhs62*clhs9);
        const double clhs66 =     clhs65*normalslave(1,0)*penalty_parameter;
        const double clhs67 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs68 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs69 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,1))
        const double clhs70 =     normalslave(2,0)*(clhs12*clhs67 + clhs13*clhs68 + clhs14*clhs69) + normalslave(2,1)*(clhs1*clhs67 + clhs25 + clhs3*clhs68 + clhs6*clhs69) + normalslave(2,2)*(clhs10*clhs68 + clhs11*clhs69 + clhs67*clhs9);
        const double clhs71 =     clhs70*normalslave(2,0)*penalty_parameter;
        const double clhs72 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs73 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs74 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs75 =     normalslave(0,0)*(clhs12*clhs72 + clhs13*clhs73 + clhs14*clhs74) + normalslave(0,1)*(clhs1*clhs72 + clhs3*clhs73 + clhs6*clhs74) + normalslave(0,2)*(clhs0 + clhs10*clhs73 + clhs11*clhs74 + clhs72*clhs9);
        const double clhs76 =     clhs75*normalslave(0,0)*penalty_parameter;
        const double clhs77 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs78 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs79 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs80 =     normalslave(1,0)*(clhs12*clhs77 + clhs13*clhs78 + clhs14*clhs79) + normalslave(1,1)*(clhs1*clhs77 + clhs3*clhs78 + clhs6*clhs79) + normalslave(1,2)*(clhs10*clhs78 + clhs11*clhs79 + clhs17 + clhs77*clhs9);
        const double clhs81 =     clhs80*normalslave(1,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs83 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs84 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(0,2))
        const double clhs85 =     normalslave(2,0)*(clhs12*clhs82 + clhs13*clhs83 + clhs14*clhs84) + normalslave(2,1)*(clhs1*clhs82 + clhs3*clhs83 + clhs6*clhs84) + normalslave(2,2)*(clhs10*clhs83 + clhs11*clhs84 + clhs25 + clhs82*clhs9);
        const double clhs86 =     clhs85*normalslave(2,0)*penalty_parameter;
        const double clhs87 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs90 =     normalslave(0,0)*(clhs12*clhs87 + clhs13*clhs88 + clhs14*clhs89 + clhs4) + normalslave(0,1)*(clhs1*clhs87 + clhs3*clhs88 + clhs6*clhs89) + normalslave(0,2)*(clhs10*clhs88 + clhs11*clhs89 + clhs87*clhs9);
        const double clhs91 =     clhs90*normalslave(0,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs93 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs94 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs95 =     normalslave(1,0)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs19) + normalslave(1,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs6*clhs94) + normalslave(1,2)*(clhs10*clhs93 + clhs11*clhs94 + clhs9*clhs92);
        const double clhs96 =     clhs95*normalslave(1,0)*penalty_parameter;
        const double clhs97 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs98 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs99 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,0))
        const double clhs100 =     normalslave(2,0)*(clhs12*clhs97 + clhs13*clhs98 + clhs14*clhs99 + clhs27) + normalslave(2,1)*(clhs1*clhs97 + clhs3*clhs98 + clhs6*clhs99) + normalslave(2,2)*(clhs10*clhs98 + clhs11*clhs99 + clhs9*clhs97);
        const double clhs101 =     clhs100*normalslave(2,0)*penalty_parameter;
        const double clhs102 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs103 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs104 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs105 =     normalslave(0,0)*(clhs102*clhs12 + clhs103*clhs13 + clhs104*clhs14) + normalslave(0,1)*(clhs1*clhs102 + clhs103*clhs3 + clhs104*clhs6 + clhs4) + normalslave(0,2)*(clhs10*clhs103 + clhs102*clhs9 + clhs104*clhs11);
        const double clhs106 =     clhs105*normalslave(0,0)*penalty_parameter;
        const double clhs107 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs108 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs109 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs110 =     normalslave(1,0)*(clhs107*clhs12 + clhs108*clhs13 + clhs109*clhs14) + normalslave(1,1)*(clhs1*clhs107 + clhs108*clhs3 + clhs109*clhs6 + clhs19) + normalslave(1,2)*(clhs10*clhs108 + clhs107*clhs9 + clhs109*clhs11);
        const double clhs111 =     clhs110*normalslave(1,0)*penalty_parameter;
        const double clhs112 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs113 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs114 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,1))
        const double clhs115 =     normalslave(2,0)*(clhs112*clhs12 + clhs113*clhs13 + clhs114*clhs14) + normalslave(2,1)*(clhs1*clhs112 + clhs113*clhs3 + clhs114*clhs6 + clhs27) + normalslave(2,2)*(clhs10*clhs113 + clhs11*clhs114 + clhs112*clhs9);
        const double clhs116 =     clhs115*normalslave(2,0)*penalty_parameter;
        const double clhs117 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs118 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs119 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs120 =     normalslave(0,0)*(clhs117*clhs12 + clhs118*clhs13 + clhs119*clhs14) + normalslave(0,1)*(clhs1*clhs117 + clhs118*clhs3 + clhs119*clhs6) + normalslave(0,2)*(clhs10*clhs118 + clhs11*clhs119 + clhs117*clhs9 + clhs4);
        const double clhs121 =     clhs120*normalslave(0,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs123 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs124 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs125 =     normalslave(1,0)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14) + normalslave(1,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6) + normalslave(1,2)*(clhs10*clhs123 + clhs11*clhs124 + clhs122*clhs9 + clhs19);
        const double clhs126 =     clhs125*normalslave(1,0)*penalty_parameter;
        const double clhs127 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs128 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs129 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(1,2))
        const double clhs130 =     normalslave(2,0)*(clhs12*clhs127 + clhs128*clhs13 + clhs129*clhs14) + normalslave(2,1)*(clhs1*clhs127 + clhs128*clhs3 + clhs129*clhs6) + normalslave(2,2)*(clhs10*clhs128 + clhs11*clhs129 + clhs127*clhs9 + clhs27);
        const double clhs131 =     clhs130*normalslave(2,0)*penalty_parameter;
        const double clhs132 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs133 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs134 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs135 =     normalslave(0,0)*(clhs12*clhs132 + clhs13*clhs133 + clhs134*clhs14 + clhs7) + normalslave(0,1)*(clhs1*clhs132 + clhs133*clhs3 + clhs134*clhs6) + normalslave(0,2)*(clhs10*clhs133 + clhs11*clhs134 + clhs132*clhs9);
        const double clhs136 =     clhs135*normalslave(0,0)*penalty_parameter;
        const double clhs137 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs138 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs139 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs140 =     normalslave(1,0)*(clhs12*clhs137 + clhs13*clhs138 + clhs139*clhs14 + clhs21) + normalslave(1,1)*(clhs1*clhs137 + clhs138*clhs3 + clhs139*clhs6) + normalslave(1,2)*(clhs10*clhs138 + clhs11*clhs139 + clhs137*clhs9);
        const double clhs141 =     clhs140*normalslave(1,0)*penalty_parameter;
        const double clhs142 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs143 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs144 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,0))
        const double clhs145 =     normalslave(2,0)*(clhs12*clhs142 + clhs13*clhs143 + clhs14*clhs144 + clhs29) + normalslave(2,1)*(clhs1*clhs142 + clhs143*clhs3 + clhs144*clhs6) + normalslave(2,2)*(clhs10*clhs143 + clhs11*clhs144 + clhs142*clhs9);
        const double clhs146 =     clhs145*normalslave(2,0)*penalty_parameter;
        const double clhs147 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs148 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs149 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs150 =     normalslave(0,0)*(clhs12*clhs147 + clhs13*clhs148 + clhs14*clhs149) + normalslave(0,1)*(clhs1*clhs147 + clhs148*clhs3 + clhs149*clhs6 + clhs7) + normalslave(0,2)*(clhs10*clhs148 + clhs11*clhs149 + clhs147*clhs9);
        const double clhs151 =     clhs150*normalslave(0,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs153 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs154 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs155 =     normalslave(1,0)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154) + normalslave(1,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs21) + normalslave(1,2)*(clhs10*clhs153 + clhs11*clhs154 + clhs152*clhs9);
        const double clhs156 =     clhs155*normalslave(1,0)*penalty_parameter;
        const double clhs157 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs158 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs159 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,1))
        const double clhs160 =     normalslave(2,0)*(clhs12*clhs157 + clhs13*clhs158 + clhs14*clhs159) + normalslave(2,1)*(clhs1*clhs157 + clhs158*clhs3 + clhs159*clhs6 + clhs29) + normalslave(2,2)*(clhs10*clhs158 + clhs11*clhs159 + clhs157*clhs9);
        const double clhs161 =     clhs160*normalslave(2,0)*penalty_parameter;
        const double clhs162 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs163 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs164 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs165 =     normalslave(0,0)*(clhs12*clhs162 + clhs13*clhs163 + clhs14*clhs164) + normalslave(0,1)*(clhs1*clhs162 + clhs163*clhs3 + clhs164*clhs6) + normalslave(0,2)*(clhs10*clhs163 + clhs11*clhs164 + clhs162*clhs9 + clhs7);
        const double clhs166 =     clhs165*normalslave(0,0)*penalty_parameter;
        const double clhs167 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs168 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs169 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs170 =     normalslave(1,0)*(clhs12*clhs167 + clhs13*clhs168 + clhs14*clhs169) + normalslave(1,1)*(clhs1*clhs167 + clhs168*clhs3 + clhs169*clhs6) + normalslave(1,2)*(clhs10*clhs168 + clhs11*clhs169 + clhs167*clhs9 + clhs21);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs173 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs174 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U2(2,2))
        const double clhs175 =     normalslave(2,0)*(clhs12*clhs172 + clhs13*clhs173 + clhs14*clhs174) + normalslave(2,1)*(clhs1*clhs172 + clhs173*clhs3 + clhs174*clhs6) + normalslave(2,2)*(clhs10*clhs173 + clhs11*clhs174 + clhs172*clhs9 + clhs29);
        const double clhs176 =     clhs175*normalslave(2,0)*penalty_parameter;
        const double clhs177 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs178 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs179 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs180 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs181 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs182 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs183 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs184 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs185 =     normalslave(0,0)*(-clhs12*clhs177 - clhs13*clhs183 - clhs14*clhs184 + clhs180*clhs33 + clhs181*clhs35 + clhs182*clhs37 + clhs34) + normalslave(0,1)*(-clhs1*clhs177 + clhs180*clhs39 + clhs181*clhs40 + clhs182*clhs41 - clhs183*clhs3 - clhs184*clhs6) + normalslave(0,2)*(-clhs10*clhs183 - clhs11*clhs184 - clhs177*clhs9 + clhs180*clhs42 + clhs181*clhs43 + clhs182*clhs44);
        const double clhs186 =     clhs185*normalslave(0,0)*penalty_parameter;
        const double clhs187 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs188 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs189 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs190 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs191 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs192 =     normalslave(1,0)*(-clhs12*clhs178 - clhs13*clhs190 - clhs14*clhs191 + clhs187*clhs33 + clhs188*clhs35 + clhs189*clhs37 + clhs47) + normalslave(1,1)*(-clhs1*clhs178 + clhs187*clhs39 + clhs188*clhs40 + clhs189*clhs41 - clhs190*clhs3 - clhs191*clhs6) + normalslave(1,2)*(-clhs10*clhs190 - clhs11*clhs191 - clhs178*clhs9 + clhs187*clhs42 + clhs188*clhs43 + clhs189*clhs44);
        const double clhs193 =     clhs192*normalslave(1,0)*penalty_parameter;
        const double clhs194 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs195 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs196 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,0))
        const double clhs197 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs198 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,0))
        const double clhs199 =     normalslave(2,0)*(-clhs12*clhs179 - clhs13*clhs197 - clhs14*clhs198 + clhs194*clhs33 + clhs195*clhs35 + clhs196*clhs37 + clhs52) + normalslave(2,1)*(-clhs1*clhs179 + clhs194*clhs39 + clhs195*clhs40 + clhs196*clhs41 - clhs197*clhs3 - clhs198*clhs6) + normalslave(2,2)*(-clhs10*clhs197 - clhs11*clhs198 - clhs179*clhs9 + clhs194*clhs42 + clhs195*clhs43 + clhs196*clhs44);
        const double clhs200 =     clhs199*normalslave(2,0)*penalty_parameter;
        const double clhs201 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs202 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs203 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs204 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs205 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs206 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs207 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs208 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs209 =     normalslave(0,0)*(-clhs12*clhs201 - clhs13*clhs207 - clhs14*clhs208 + clhs204*clhs33 + clhs205*clhs35 + clhs206*clhs37) + normalslave(0,1)*(-clhs1*clhs201 + clhs204*clhs39 + clhs205*clhs40 + clhs206*clhs41 - clhs207*clhs3 - clhs208*clhs6 + clhs34) + normalslave(0,2)*(-clhs10*clhs207 - clhs11*clhs208 - clhs201*clhs9 + clhs204*clhs42 + clhs205*clhs43 + clhs206*clhs44);
        const double clhs210 =     clhs209*normalslave(0,0)*penalty_parameter;
        const double clhs211 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs216 =     normalslave(1,0)*(-clhs12*clhs202 - clhs13*clhs214 - clhs14*clhs215 + clhs211*clhs33 + clhs212*clhs35 + clhs213*clhs37) + normalslave(1,1)*(-clhs1*clhs202 + clhs211*clhs39 + clhs212*clhs40 + clhs213*clhs41 - clhs214*clhs3 - clhs215*clhs6 + clhs47) + normalslave(1,2)*(-clhs10*clhs214 - clhs11*clhs215 - clhs202*clhs9 + clhs211*clhs42 + clhs212*clhs43 + clhs213*clhs44);
        const double clhs217 =     clhs216*normalslave(1,0)*penalty_parameter;
        const double clhs218 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs219 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,1))
        const double clhs221 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs222 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,1))
        const double clhs223 =     normalslave(2,0)*(-clhs12*clhs203 - clhs13*clhs221 - clhs14*clhs222 + clhs218*clhs33 + clhs219*clhs35 + clhs220*clhs37) + normalslave(2,1)*(-clhs1*clhs203 + clhs218*clhs39 + clhs219*clhs40 + clhs220*clhs41 - clhs221*clhs3 - clhs222*clhs6 + clhs52) + normalslave(2,2)*(-clhs10*clhs221 - clhs11*clhs222 - clhs203*clhs9 + clhs218*clhs42 + clhs219*clhs43 + clhs220*clhs44);
        const double clhs224 =     clhs223*normalslave(2,0)*penalty_parameter;
        const double clhs225 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs226 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs227 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs228 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs229 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs231 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs232 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs233 =     normalslave(0,0)*(-clhs12*clhs225 - clhs13*clhs231 - clhs14*clhs232 + clhs228*clhs33 + clhs229*clhs35 + clhs230*clhs37) + normalslave(0,1)*(-clhs1*clhs225 + clhs228*clhs39 + clhs229*clhs40 + clhs230*clhs41 - clhs231*clhs3 - clhs232*clhs6) + normalslave(0,2)*(-clhs10*clhs231 - clhs11*clhs232 - clhs225*clhs9 + clhs228*clhs42 + clhs229*clhs43 + clhs230*clhs44 + clhs34);
        const double clhs234 =     clhs233*normalslave(0,0)*penalty_parameter;
        const double clhs235 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs236 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs237 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs238 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs239 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs240 =     normalslave(1,0)*(-clhs12*clhs226 - clhs13*clhs238 - clhs14*clhs239 + clhs235*clhs33 + clhs236*clhs35 + clhs237*clhs37) + normalslave(1,1)*(-clhs1*clhs226 + clhs235*clhs39 + clhs236*clhs40 + clhs237*clhs41 - clhs238*clhs3 - clhs239*clhs6) + normalslave(1,2)*(-clhs10*clhs238 - clhs11*clhs239 - clhs226*clhs9 + clhs235*clhs42 + clhs236*clhs43 + clhs237*clhs44 + clhs47);
        const double clhs241 =     clhs240*normalslave(1,0)*penalty_parameter;
        const double clhs242 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs243 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs244 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs246 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(0,2))
        const double clhs247 =     normalslave(2,0)*(-clhs12*clhs227 - clhs13*clhs245 - clhs14*clhs246 + clhs242*clhs33 + clhs243*clhs35 + clhs244*clhs37) + normalslave(2,1)*(-clhs1*clhs227 + clhs242*clhs39 + clhs243*clhs40 + clhs244*clhs41 - clhs245*clhs3 - clhs246*clhs6) + normalslave(2,2)*(-clhs10*clhs245 - clhs11*clhs246 - clhs227*clhs9 + clhs242*clhs42 + clhs243*clhs43 + clhs244*clhs44 + clhs52);
        const double clhs248 =     clhs247*normalslave(2,0)*penalty_parameter;
        const double clhs249 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs250 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs251 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs254 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs257 =     normalslave(0,0)*(-clhs12*clhs249 - clhs13*clhs255 - clhs14*clhs256 + clhs252*clhs33 + clhs253*clhs35 + clhs254*clhs37 + clhs36) + normalslave(0,1)*(-clhs1*clhs249 + clhs252*clhs39 + clhs253*clhs40 + clhs254*clhs41 - clhs255*clhs3 - clhs256*clhs6) + normalslave(0,2)*(-clhs10*clhs255 - clhs11*clhs256 - clhs249*clhs9 + clhs252*clhs42 + clhs253*clhs43 + clhs254*clhs44);
        const double clhs258 =     clhs257*normalslave(0,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs262 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs264 =     normalslave(1,0)*(-clhs12*clhs250 - clhs13*clhs262 - clhs14*clhs263 + clhs259*clhs33 + clhs260*clhs35 + clhs261*clhs37 + clhs48) + normalslave(1,1)*(-clhs1*clhs250 + clhs259*clhs39 + clhs260*clhs40 + clhs261*clhs41 - clhs262*clhs3 - clhs263*clhs6) + normalslave(1,2)*(-clhs10*clhs262 - clhs11*clhs263 - clhs250*clhs9 + clhs259*clhs42 + clhs260*clhs43 + clhs261*clhs44);
        const double clhs265 =     clhs264*normalslave(1,0)*penalty_parameter;
        const double clhs266 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs267 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs268 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,0))
        const double clhs269 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs270 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,0))
        const double clhs271 =     normalslave(2,0)*(-clhs12*clhs251 - clhs13*clhs269 - clhs14*clhs270 + clhs266*clhs33 + clhs267*clhs35 + clhs268*clhs37 + clhs53) + normalslave(2,1)*(-clhs1*clhs251 + clhs266*clhs39 + clhs267*clhs40 + clhs268*clhs41 - clhs269*clhs3 - clhs270*clhs6) + normalslave(2,2)*(-clhs10*clhs269 - clhs11*clhs270 - clhs251*clhs9 + clhs266*clhs42 + clhs267*clhs43 + clhs268*clhs44);
        const double clhs272 =     clhs271*normalslave(2,0)*penalty_parameter;
        const double clhs273 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs276 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs277 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs278 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs279 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs280 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs281 =     normalslave(0,0)*(-clhs12*clhs273 - clhs13*clhs279 - clhs14*clhs280 + clhs276*clhs33 + clhs277*clhs35 + clhs278*clhs37) + normalslave(0,1)*(-clhs1*clhs273 + clhs276*clhs39 + clhs277*clhs40 + clhs278*clhs41 - clhs279*clhs3 - clhs280*clhs6 + clhs36) + normalslave(0,2)*(-clhs10*clhs279 - clhs11*clhs280 - clhs273*clhs9 + clhs276*clhs42 + clhs277*clhs43 + clhs278*clhs44);
        const double clhs282 =     clhs281*normalslave(0,0)*penalty_parameter;
        const double clhs283 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs284 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs285 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs286 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs287 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs288 =     normalslave(1,0)*(-clhs12*clhs274 - clhs13*clhs286 - clhs14*clhs287 + clhs283*clhs33 + clhs284*clhs35 + clhs285*clhs37) + normalslave(1,1)*(-clhs1*clhs274 + clhs283*clhs39 + clhs284*clhs40 + clhs285*clhs41 - clhs286*clhs3 - clhs287*clhs6 + clhs48) + normalslave(1,2)*(-clhs10*clhs286 - clhs11*clhs287 - clhs274*clhs9 + clhs283*clhs42 + clhs284*clhs43 + clhs285*clhs44);
        const double clhs289 =     clhs288*normalslave(1,0)*penalty_parameter;
        const double clhs290 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs291 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs292 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,1))
        const double clhs293 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs294 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,1))
        const double clhs295 =     normalslave(2,0)*(-clhs12*clhs275 - clhs13*clhs293 - clhs14*clhs294 + clhs290*clhs33 + clhs291*clhs35 + clhs292*clhs37) + normalslave(2,1)*(-clhs1*clhs275 + clhs290*clhs39 + clhs291*clhs40 + clhs292*clhs41 - clhs293*clhs3 - clhs294*clhs6 + clhs53) + normalslave(2,2)*(-clhs10*clhs293 - clhs11*clhs294 - clhs275*clhs9 + clhs290*clhs42 + clhs291*clhs43 + clhs292*clhs44);
        const double clhs296 =     clhs295*normalslave(2,0)*penalty_parameter;
        const double clhs297 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs298 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs299 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs305 =     normalslave(0,0)*(-clhs12*clhs297 - clhs13*clhs303 - clhs14*clhs304 + clhs300*clhs33 + clhs301*clhs35 + clhs302*clhs37) + normalslave(0,1)*(-clhs1*clhs297 - clhs3*clhs303 + clhs300*clhs39 + clhs301*clhs40 + clhs302*clhs41 - clhs304*clhs6) + normalslave(0,2)*(-clhs10*clhs303 - clhs11*clhs304 - clhs297*clhs9 + clhs300*clhs42 + clhs301*clhs43 + clhs302*clhs44 + clhs36);
        const double clhs306 =     clhs305*normalslave(0,0)*penalty_parameter;
        const double clhs307 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs308 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs309 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs310 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs311 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs312 =     normalslave(1,0)*(-clhs12*clhs298 - clhs13*clhs310 - clhs14*clhs311 + clhs307*clhs33 + clhs308*clhs35 + clhs309*clhs37) + normalslave(1,1)*(-clhs1*clhs298 - clhs3*clhs310 + clhs307*clhs39 + clhs308*clhs40 + clhs309*clhs41 - clhs311*clhs6) + normalslave(1,2)*(-clhs10*clhs310 - clhs11*clhs311 - clhs298*clhs9 + clhs307*clhs42 + clhs308*clhs43 + clhs309*clhs44 + clhs48);
        const double clhs313 =     clhs312*normalslave(1,0)*penalty_parameter;
        const double clhs314 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs315 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs316 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(1,2))
        const double clhs317 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs318 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(1,2))
        const double clhs319 =     normalslave(2,0)*(-clhs12*clhs299 - clhs13*clhs317 - clhs14*clhs318 + clhs314*clhs33 + clhs315*clhs35 + clhs316*clhs37) + normalslave(2,1)*(-clhs1*clhs299 - clhs3*clhs317 + clhs314*clhs39 + clhs315*clhs40 + clhs316*clhs41 - clhs318*clhs6) + normalslave(2,2)*(-clhs10*clhs317 - clhs11*clhs318 - clhs299*clhs9 + clhs314*clhs42 + clhs315*clhs43 + clhs316*clhs44 + clhs53);
        const double clhs320 =     clhs319*normalslave(2,0)*penalty_parameter;
        const double clhs321 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs322 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs324 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs325 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs326 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs327 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs328 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs329 =     normalslave(0,0)*(-clhs12*clhs321 - clhs13*clhs327 - clhs14*clhs328 + clhs324*clhs33 + clhs325*clhs35 + clhs326*clhs37 + clhs38) + normalslave(0,1)*(-clhs1*clhs321 - clhs3*clhs327 + clhs324*clhs39 + clhs325*clhs40 + clhs326*clhs41 - clhs328*clhs6) + normalslave(0,2)*(-clhs10*clhs327 - clhs11*clhs328 - clhs321*clhs9 + clhs324*clhs42 + clhs325*clhs43 + clhs326*clhs44);
        const double clhs330 =     clhs329*normalslave(0,0)*penalty_parameter;
        const double clhs331 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs332 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs333 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs334 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs335 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs336 =     normalslave(1,0)*(-clhs12*clhs322 - clhs13*clhs334 - clhs14*clhs335 + clhs33*clhs331 + clhs332*clhs35 + clhs333*clhs37 + clhs49) + normalslave(1,1)*(-clhs1*clhs322 - clhs3*clhs334 + clhs331*clhs39 + clhs332*clhs40 + clhs333*clhs41 - clhs335*clhs6) + normalslave(1,2)*(-clhs10*clhs334 - clhs11*clhs335 - clhs322*clhs9 + clhs331*clhs42 + clhs332*clhs43 + clhs333*clhs44);
        const double clhs337 =     clhs336*normalslave(1,0)*penalty_parameter;
        const double clhs338 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs339 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs340 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,0))
        const double clhs341 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs342 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,0))
        const double clhs343 =     normalslave(2,0)*(-clhs12*clhs323 - clhs13*clhs341 - clhs14*clhs342 + clhs33*clhs338 + clhs339*clhs35 + clhs340*clhs37 + clhs54) + normalslave(2,1)*(-clhs1*clhs323 - clhs3*clhs341 + clhs338*clhs39 + clhs339*clhs40 + clhs340*clhs41 - clhs342*clhs6) + normalslave(2,2)*(-clhs10*clhs341 - clhs11*clhs342 - clhs323*clhs9 + clhs338*clhs42 + clhs339*clhs43 + clhs340*clhs44);
        const double clhs344 =     clhs343*normalslave(2,0)*penalty_parameter;
        const double clhs345 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs346 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs347 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs348 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs349 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs350 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs351 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs352 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs353 =     normalslave(0,0)*(-clhs12*clhs345 - clhs13*clhs351 - clhs14*clhs352 + clhs33*clhs348 + clhs349*clhs35 + clhs350*clhs37) + normalslave(0,1)*(-clhs1*clhs345 - clhs3*clhs351 + clhs348*clhs39 + clhs349*clhs40 + clhs350*clhs41 - clhs352*clhs6 + clhs38) + normalslave(0,2)*(-clhs10*clhs351 - clhs11*clhs352 - clhs345*clhs9 + clhs348*clhs42 + clhs349*clhs43 + clhs350*clhs44);
        const double clhs354 =     clhs353*normalslave(0,0)*penalty_parameter;
        const double clhs355 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs356 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs357 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs358 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs359 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs360 =     normalslave(1,0)*(-clhs12*clhs346 - clhs13*clhs358 - clhs14*clhs359 + clhs33*clhs355 + clhs35*clhs356 + clhs357*clhs37) + normalslave(1,1)*(-clhs1*clhs346 - clhs3*clhs358 + clhs355*clhs39 + clhs356*clhs40 + clhs357*clhs41 - clhs359*clhs6 + clhs49) + normalslave(1,2)*(-clhs10*clhs358 - clhs11*clhs359 - clhs346*clhs9 + clhs355*clhs42 + clhs356*clhs43 + clhs357*clhs44);
        const double clhs361 =     clhs360*normalslave(1,0)*penalty_parameter;
        const double clhs362 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs363 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs364 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,1))
        const double clhs365 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs366 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,1))
        const double clhs367 =     normalslave(2,0)*(-clhs12*clhs347 - clhs13*clhs365 - clhs14*clhs366 + clhs33*clhs362 + clhs35*clhs363 + clhs364*clhs37) + normalslave(2,1)*(-clhs1*clhs347 - clhs3*clhs365 + clhs362*clhs39 + clhs363*clhs40 + clhs364*clhs41 - clhs366*clhs6 + clhs54) + normalslave(2,2)*(-clhs10*clhs365 - clhs11*clhs366 - clhs347*clhs9 + clhs362*clhs42 + clhs363*clhs43 + clhs364*clhs44);
        const double clhs368 =     clhs367*normalslave(2,0)*penalty_parameter;
        const double clhs369 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs370 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs371 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs372 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs373 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs374 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs375 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs376 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs377 =     normalslave(0,0)*(-clhs12*clhs369 - clhs13*clhs375 - clhs14*clhs376 + clhs33*clhs372 + clhs35*clhs373 + clhs37*clhs374) + normalslave(0,1)*(-clhs1*clhs369 - clhs3*clhs375 + clhs372*clhs39 + clhs373*clhs40 + clhs374*clhs41 - clhs376*clhs6) + normalslave(0,2)*(-clhs10*clhs375 - clhs11*clhs376 - clhs369*clhs9 + clhs372*clhs42 + clhs373*clhs43 + clhs374*clhs44 + clhs38);
        const double clhs378 =     clhs377*normalslave(0,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs380 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs381 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs382 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs383 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs384 =     normalslave(1,0)*(-clhs12*clhs370 - clhs13*clhs382 - clhs14*clhs383 + clhs33*clhs379 + clhs35*clhs380 + clhs37*clhs381) + normalslave(1,1)*(-clhs1*clhs370 - clhs3*clhs382 + clhs379*clhs39 + clhs380*clhs40 + clhs381*clhs41 - clhs383*clhs6) + normalslave(1,2)*(-clhs10*clhs382 - clhs11*clhs383 - clhs370*clhs9 + clhs379*clhs42 + clhs380*clhs43 + clhs381*clhs44 + clhs49);
        const double clhs385 =     clhs384*normalslave(1,0)*penalty_parameter;
        const double clhs386 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs387 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs388 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2)), U1(2,2))
        const double clhs389 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs390 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2)), U1(2,2))
        const double clhs391 =     normalslave(2,0)*(-clhs12*clhs371 - clhs13*clhs389 - clhs14*clhs390 + clhs33*clhs386 + clhs35*clhs387 + clhs37*clhs388) + normalslave(2,1)*(-clhs1*clhs371 - clhs3*clhs389 + clhs386*clhs39 + clhs387*clhs40 + clhs388*clhs41 - clhs390*clhs6) + normalslave(2,2)*(-clhs10*clhs389 - clhs11*clhs390 - clhs371*clhs9 + clhs386*clhs42 + clhs387*clhs43 + clhs388*clhs44 + clhs54);
        const double clhs392 =     clhs391*normalslave(2,0)*penalty_parameter;
        const double clhs393 =     normalslave(0,0)*scale_factor;
        const double clhs394 =     normalslave(1,0)*scale_factor;
        const double clhs395 =     normalslave(2,0)*scale_factor;
        const double clhs396 =     clhs15*normalslave(0,1)*penalty_parameter;
        const double clhs397 =     clhs23*normalslave(1,1)*penalty_parameter;
        const double clhs398 =     clhs31*normalslave(2,1)*penalty_parameter;
        const double clhs399 =     clhs45*normalslave(0,1);
        const double clhs400 =     clhs50*normalslave(1,1);
        const double clhs401 =     clhs55*normalslave(2,1);
        const double clhs402 =     clhs60*normalslave(0,1)*penalty_parameter;
        const double clhs403 =     clhs65*normalslave(1,1)*penalty_parameter;
        const double clhs404 =     clhs70*normalslave(2,1)*penalty_parameter;
        const double clhs405 =     clhs75*normalslave(0,1)*penalty_parameter;
        const double clhs406 =     clhs80*normalslave(1,1)*penalty_parameter;
        const double clhs407 =     clhs85*normalslave(2,1)*penalty_parameter;
        const double clhs408 =     clhs90*normalslave(0,1)*penalty_parameter;
        const double clhs409 =     clhs95*normalslave(1,1)*penalty_parameter;
        const double clhs410 =     clhs100*normalslave(2,1)*penalty_parameter;
        const double clhs411 =     clhs105*normalslave(0,1)*penalty_parameter;
        const double clhs412 =     clhs110*normalslave(1,1)*penalty_parameter;
        const double clhs413 =     clhs115*normalslave(2,1)*penalty_parameter;
        const double clhs414 =     clhs120*normalslave(0,1)*penalty_parameter;
        const double clhs415 =     clhs125*normalslave(1,1)*penalty_parameter;
        const double clhs416 =     clhs130*normalslave(2,1)*penalty_parameter;
        const double clhs417 =     clhs135*normalslave(0,1)*penalty_parameter;
        const double clhs418 =     clhs140*normalslave(1,1)*penalty_parameter;
        const double clhs419 =     clhs145*normalslave(2,1)*penalty_parameter;
        const double clhs420 =     clhs150*normalslave(0,1)*penalty_parameter;
        const double clhs421 =     clhs155*normalslave(1,1)*penalty_parameter;
        const double clhs422 =     clhs160*normalslave(2,1)*penalty_parameter;
        const double clhs423 =     clhs165*normalslave(0,1)*penalty_parameter;
        const double clhs424 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs425 =     clhs175*normalslave(2,1)*penalty_parameter;
        const double clhs426 =     clhs185*normalslave(0,1)*penalty_parameter;
        const double clhs427 =     clhs192*normalslave(1,1)*penalty_parameter;
        const double clhs428 =     clhs199*normalslave(2,1)*penalty_parameter;
        const double clhs429 =     clhs209*normalslave(0,1)*penalty_parameter;
        const double clhs430 =     clhs216*normalslave(1,1)*penalty_parameter;
        const double clhs431 =     clhs223*normalslave(2,1)*penalty_parameter;
        const double clhs432 =     clhs233*normalslave(0,1)*penalty_parameter;
        const double clhs433 =     clhs240*normalslave(1,1)*penalty_parameter;
        const double clhs434 =     clhs247*normalslave(2,1)*penalty_parameter;
        const double clhs435 =     clhs257*normalslave(0,1)*penalty_parameter;
        const double clhs436 =     clhs264*normalslave(1,1)*penalty_parameter;
        const double clhs437 =     clhs271*normalslave(2,1)*penalty_parameter;
        const double clhs438 =     clhs281*normalslave(0,1)*penalty_parameter;
        const double clhs439 =     clhs288*normalslave(1,1)*penalty_parameter;
        const double clhs440 =     clhs295*normalslave(2,1)*penalty_parameter;
        const double clhs441 =     clhs305*normalslave(0,1)*penalty_parameter;
        const double clhs442 =     clhs312*normalslave(1,1)*penalty_parameter;
        const double clhs443 =     clhs319*normalslave(2,1)*penalty_parameter;
        const double clhs444 =     clhs329*normalslave(0,1)*penalty_parameter;
        const double clhs445 =     clhs336*normalslave(1,1)*penalty_parameter;
        const double clhs446 =     clhs343*normalslave(2,1)*penalty_parameter;
        const double clhs447 =     clhs353*normalslave(0,1)*penalty_parameter;
        const double clhs448 =     clhs360*normalslave(1,1)*penalty_parameter;
        const double clhs449 =     clhs367*normalslave(2,1)*penalty_parameter;
        const double clhs450 =     clhs377*normalslave(0,1)*penalty_parameter;
        const double clhs451 =     clhs384*normalslave(1,1)*penalty_parameter;
        const double clhs452 =     clhs391*normalslave(2,1)*penalty_parameter;
        const double clhs453 =     normalslave(0,1)*scale_factor;
        const double clhs454 =     normalslave(1,1)*scale_factor;
        const double clhs455 =     normalslave(2,1)*scale_factor;
        const double clhs456 =     clhs15*normalslave(0,2)*penalty_parameter;
        const double clhs457 =     clhs23*normalslave(1,2)*penalty_parameter;
        const double clhs458 =     clhs31*normalslave(2,2)*penalty_parameter;
        const double clhs459 =     clhs45*normalslave(0,2);
        const double clhs460 =     clhs50*normalslave(1,2);
        const double clhs461 =     clhs55*normalslave(2,2);
        const double clhs462 =     clhs60*normalslave(0,2)*penalty_parameter;
        const double clhs463 =     clhs65*normalslave(1,2)*penalty_parameter;
        const double clhs464 =     clhs70*normalslave(2,2)*penalty_parameter;
        const double clhs465 =     clhs75*normalslave(0,2)*penalty_parameter;
        const double clhs466 =     clhs80*normalslave(1,2)*penalty_parameter;
        const double clhs467 =     clhs85*normalslave(2,2)*penalty_parameter;
        const double clhs468 =     clhs90*normalslave(0,2)*penalty_parameter;
        const double clhs469 =     clhs95*normalslave(1,2)*penalty_parameter;
        const double clhs470 =     clhs100*normalslave(2,2)*penalty_parameter;
        const double clhs471 =     clhs105*normalslave(0,2)*penalty_parameter;
        const double clhs472 =     clhs110*normalslave(1,2)*penalty_parameter;
        const double clhs473 =     clhs115*normalslave(2,2)*penalty_parameter;
        const double clhs474 =     clhs120*normalslave(0,2)*penalty_parameter;
        const double clhs475 =     clhs125*normalslave(1,2)*penalty_parameter;
        const double clhs476 =     clhs130*normalslave(2,2)*penalty_parameter;
        const double clhs477 =     clhs135*normalslave(0,2)*penalty_parameter;
        const double clhs478 =     clhs140*normalslave(1,2)*penalty_parameter;
        const double clhs479 =     clhs145*normalslave(2,2)*penalty_parameter;
        const double clhs480 =     clhs150*normalslave(0,2)*penalty_parameter;
        const double clhs481 =     clhs155*normalslave(1,2)*penalty_parameter;
        const double clhs482 =     clhs160*normalslave(2,2)*penalty_parameter;
        const double clhs483 =     clhs165*normalslave(0,2)*penalty_parameter;
        const double clhs484 =     clhs170*normalslave(1,2)*penalty_parameter;
        const double clhs485 =     clhs175*normalslave(2,2)*penalty_parameter;
        const double clhs486 =     clhs185*normalslave(0,2)*penalty_parameter;
        const double clhs487 =     clhs192*normalslave(1,2)*penalty_parameter;
        const double clhs488 =     clhs199*normalslave(2,2)*penalty_parameter;
        const double clhs489 =     clhs209*normalslave(0,2)*penalty_parameter;
        const double clhs490 =     clhs216*normalslave(1,2)*penalty_parameter;
        const double clhs491 =     clhs223*normalslave(2,2)*penalty_parameter;
        const double clhs492 =     clhs233*normalslave(0,2)*penalty_parameter;
        const double clhs493 =     clhs240*normalslave(1,2)*penalty_parameter;
        const double clhs494 =     clhs247*normalslave(2,2)*penalty_parameter;
        const double clhs495 =     clhs257*normalslave(0,2)*penalty_parameter;
        const double clhs496 =     clhs264*normalslave(1,2)*penalty_parameter;
        const double clhs497 =     clhs271*normalslave(2,2)*penalty_parameter;
        const double clhs498 =     clhs281*normalslave(0,2)*penalty_parameter;
        const double clhs499 =     clhs288*normalslave(1,2)*penalty_parameter;
        const double clhs500 =     clhs295*normalslave(2,2)*penalty_parameter;
        const double clhs501 =     clhs305*normalslave(0,2)*penalty_parameter;
        const double clhs502 =     clhs312*normalslave(1,2)*penalty_parameter;
        const double clhs503 =     clhs319*normalslave(2,2)*penalty_parameter;
        const double clhs504 =     clhs329*normalslave(0,2)*penalty_parameter;
        const double clhs505 =     clhs336*normalslave(1,2)*penalty_parameter;
        const double clhs506 =     clhs343*normalslave(2,2)*penalty_parameter;
        const double clhs507 =     clhs353*normalslave(0,2)*penalty_parameter;
        const double clhs508 =     clhs360*normalslave(1,2)*penalty_parameter;
        const double clhs509 =     clhs367*normalslave(2,2)*penalty_parameter;
        const double clhs510 =     clhs377*normalslave(0,2)*penalty_parameter;
        const double clhs511 =     clhs384*normalslave(1,2)*penalty_parameter;
        const double clhs512 =     clhs391*normalslave(2,2)*penalty_parameter;
        const double clhs513 =     normalslave(0,2)*scale_factor;
        const double clhs514 =     normalslave(1,2)*scale_factor;
        const double clhs515 =     normalslave(2,2)*scale_factor;
        const double clhs516 =     clhs15*normalslave(0,0);
        const double clhs517 =     clhs23*normalslave(1,0);
        const double clhs518 =     clhs31*normalslave(2,0);
        const double clhs519 =     clhs60*normalslave(0,0);
        const double clhs520 =     clhs65*normalslave(1,0);
        const double clhs521 =     clhs70*normalslave(2,0);
        const double clhs522 =     clhs75*normalslave(0,0);
        const double clhs523 =     clhs80*normalslave(1,0);
        const double clhs524 =     clhs85*normalslave(2,0);
        const double clhs525 =     clhs90*normalslave(0,0);
        const double clhs526 =     clhs95*normalslave(1,0);
        const double clhs527 =     clhs100*normalslave(2,0);
        const double clhs528 =     clhs105*normalslave(0,0);
        const double clhs529 =     clhs110*normalslave(1,0);
        const double clhs530 =     clhs115*normalslave(2,0);
        const double clhs531 =     clhs120*normalslave(0,0);
        const double clhs532 =     clhs125*normalslave(1,0);
        const double clhs533 =     clhs130*normalslave(2,0);
        const double clhs534 =     clhs135*normalslave(0,0);
        const double clhs535 =     clhs140*normalslave(1,0);
        const double clhs536 =     clhs145*normalslave(2,0);
        const double clhs537 =     clhs150*normalslave(0,0);
        const double clhs538 =     clhs155*normalslave(1,0);
        const double clhs539 =     clhs160*normalslave(2,0);
        const double clhs540 =     clhs165*normalslave(0,0);
        const double clhs541 =     clhs170*normalslave(1,0);
        const double clhs542 =     clhs175*normalslave(2,0);
        const double clhs543 =     clhs15*normalslave(0,1);
        const double clhs544 =     clhs23*normalslave(1,1);
        const double clhs545 =     clhs31*normalslave(2,1);
        const double clhs546 =     clhs60*normalslave(0,1);
        const double clhs547 =     clhs65*normalslave(1,1);
        const double clhs548 =     clhs70*normalslave(2,1);
        const double clhs549 =     clhs75*normalslave(0,1);
        const double clhs550 =     clhs80*normalslave(1,1);
        const double clhs551 =     clhs85*normalslave(2,1);
        const double clhs552 =     clhs90*normalslave(0,1);
        const double clhs553 =     clhs95*normalslave(1,1);
        const double clhs554 =     clhs100*normalslave(2,1);
        const double clhs555 =     clhs105*normalslave(0,1);
        const double clhs556 =     clhs110*normalslave(1,1);
        const double clhs557 =     clhs115*normalslave(2,1);
        const double clhs558 =     clhs120*normalslave(0,1);
        const double clhs559 =     clhs125*normalslave(1,1);
        const double clhs560 =     clhs130*normalslave(2,1);
        const double clhs561 =     clhs135*normalslave(0,1);
        const double clhs562 =     clhs140*normalslave(1,1);
        const double clhs563 =     clhs145*normalslave(2,1);
        const double clhs564 =     clhs150*normalslave(0,1);
        const double clhs565 =     clhs155*normalslave(1,1);
        const double clhs566 =     clhs160*normalslave(2,1);
        const double clhs567 =     clhs165*normalslave(0,1);
        const double clhs568 =     clhs170*normalslave(1,1);
        const double clhs569 =     clhs175*normalslave(2,1);
        const double clhs570 =     clhs15*normalslave(0,2);
        const double clhs571 =     clhs23*normalslave(1,2);
        const double clhs572 =     clhs31*normalslave(2,2);
        const double clhs573 =     clhs60*normalslave(0,2);
        const double clhs574 =     clhs65*normalslave(1,2);
        const double clhs575 =     clhs70*normalslave(2,2);
        const double clhs576 =     clhs75*normalslave(0,2);
        const double clhs577 =     clhs80*normalslave(1,2);
        const double clhs578 =     clhs85*normalslave(2,2);
        const double clhs579 =     clhs90*normalslave(0,2);
        const double clhs580 =     clhs95*normalslave(1,2);
        const double clhs581 =     clhs100*normalslave(2,2);
        const double clhs582 =     clhs105*normalslave(0,2);
        const double clhs583 =     clhs110*normalslave(1,2);
        const double clhs584 =     clhs115*normalslave(2,2);
        const double clhs585 =     clhs120*normalslave(0,2);
        const double clhs586 =     clhs125*normalslave(1,2);
        const double clhs587 =     clhs130*normalslave(2,2);
        const double clhs588 =     clhs135*normalslave(0,2);
        const double clhs589 =     clhs140*normalslave(1,2);
        const double clhs590 =     clhs145*normalslave(2,2);
        const double clhs591 =     clhs150*normalslave(0,2);
        const double clhs592 =     clhs155*normalslave(1,2);
        const double clhs593 =     clhs160*normalslave(2,2);
        const double clhs594 =     clhs165*normalslave(0,2);
        const double clhs595 =     clhs170*normalslave(1,2);
        const double clhs596 =     clhs175*normalslave(2,2);
    
        lhs(0,0)=-clhs0*clhs16 - clhs17*clhs24 + clhs18*clhs51 + clhs2*clhs46 - clhs25*clhs32 + clhs26*clhs56;
        lhs(0,1)=-clhs0*clhs61 - clhs17*clhs66 - clhs25*clhs71 + clhs46*clhs57 + clhs51*clhs62 + clhs56*clhs67;
        lhs(0,2)=-clhs0*clhs76 - clhs17*clhs81 - clhs25*clhs86 + clhs46*clhs72 + clhs51*clhs77 + clhs56*clhs82;
        lhs(0,3)=-clhs0*clhs91 - clhs101*clhs25 - clhs17*clhs96 + clhs46*clhs87 + clhs51*clhs92 + clhs56*clhs97;
        lhs(0,4)=-clhs0*clhs106 + clhs102*clhs46 + clhs107*clhs51 - clhs111*clhs17 + clhs112*clhs56 - clhs116*clhs25;
        lhs(0,5)=-clhs0*clhs121 + clhs117*clhs46 + clhs122*clhs51 - clhs126*clhs17 + clhs127*clhs56 - clhs131*clhs25;
        lhs(0,6)=-clhs0*clhs136 + clhs132*clhs46 + clhs137*clhs51 - clhs141*clhs17 + clhs142*clhs56 - clhs146*clhs25;
        lhs(0,7)=-clhs0*clhs151 + clhs147*clhs46 + clhs152*clhs51 - clhs156*clhs17 + clhs157*clhs56 - clhs161*clhs25;
        lhs(0,8)=-clhs0*clhs166 + clhs162*clhs46 + clhs167*clhs51 - clhs17*clhs171 + clhs172*clhs56 - clhs176*clhs25;
        lhs(0,9)=clhs0*clhs186 + clhs17*clhs193 + clhs177*clhs46 + clhs178*clhs51 + clhs179*clhs56 + clhs200*clhs25;
        lhs(0,10)=clhs0*clhs210 + clhs17*clhs217 + clhs201*clhs46 + clhs202*clhs51 + clhs203*clhs56 + clhs224*clhs25;
        lhs(0,11)=clhs0*clhs234 + clhs17*clhs241 + clhs225*clhs46 + clhs226*clhs51 + clhs227*clhs56 + clhs248*clhs25;
        lhs(0,12)=clhs0*clhs258 + clhs17*clhs265 + clhs249*clhs46 + clhs25*clhs272 + clhs250*clhs51 + clhs251*clhs56;
        lhs(0,13)=clhs0*clhs282 + clhs17*clhs289 + clhs25*clhs296 + clhs273*clhs46 + clhs274*clhs51 + clhs275*clhs56;
        lhs(0,14)=clhs0*clhs306 + clhs17*clhs313 + clhs25*clhs320 + clhs297*clhs46 + clhs298*clhs51 + clhs299*clhs56;
        lhs(0,15)=clhs0*clhs330 + clhs17*clhs337 + clhs25*clhs344 + clhs321*clhs46 + clhs322*clhs51 + clhs323*clhs56;
        lhs(0,16)=clhs0*clhs354 + clhs17*clhs361 + clhs25*clhs368 + clhs345*clhs46 + clhs346*clhs51 + clhs347*clhs56;
        lhs(0,17)=clhs0*clhs378 + clhs17*clhs385 + clhs25*clhs392 + clhs369*clhs46 + clhs370*clhs51 + clhs371*clhs56;
        lhs(0,18)=clhs0*clhs393;
        lhs(0,19)=clhs17*clhs394;
        lhs(0,20)=clhs25*clhs395;
        lhs(1,0)=-clhs0*clhs396 - clhs17*clhs397 + clhs18*clhs400 + clhs2*clhs399 - clhs25*clhs398 + clhs26*clhs401;
        lhs(1,1)=-clhs0*clhs402 - clhs17*clhs403 - clhs25*clhs404 + clhs399*clhs57 + clhs400*clhs62 + clhs401*clhs67;
        lhs(1,2)=-clhs0*clhs405 - clhs17*clhs406 - clhs25*clhs407 + clhs399*clhs72 + clhs400*clhs77 + clhs401*clhs82;
        lhs(1,3)=-clhs0*clhs408 - clhs17*clhs409 - clhs25*clhs410 + clhs399*clhs87 + clhs400*clhs92 + clhs401*clhs97;
        lhs(1,4)=-clhs0*clhs411 + clhs102*clhs399 + clhs107*clhs400 + clhs112*clhs401 - clhs17*clhs412 - clhs25*clhs413;
        lhs(1,5)=-clhs0*clhs414 + clhs117*clhs399 + clhs122*clhs400 + clhs127*clhs401 - clhs17*clhs415 - clhs25*clhs416;
        lhs(1,6)=-clhs0*clhs417 + clhs132*clhs399 + clhs137*clhs400 + clhs142*clhs401 - clhs17*clhs418 - clhs25*clhs419;
        lhs(1,7)=-clhs0*clhs420 + clhs147*clhs399 + clhs152*clhs400 + clhs157*clhs401 - clhs17*clhs421 - clhs25*clhs422;
        lhs(1,8)=-clhs0*clhs423 + clhs162*clhs399 + clhs167*clhs400 - clhs17*clhs424 + clhs172*clhs401 - clhs25*clhs425;
        lhs(1,9)=clhs0*clhs426 + clhs17*clhs427 + clhs177*clhs399 + clhs178*clhs400 + clhs179*clhs401 + clhs25*clhs428;
        lhs(1,10)=clhs0*clhs429 + clhs17*clhs430 + clhs201*clhs399 + clhs202*clhs400 + clhs203*clhs401 + clhs25*clhs431;
        lhs(1,11)=clhs0*clhs432 + clhs17*clhs433 + clhs225*clhs399 + clhs226*clhs400 + clhs227*clhs401 + clhs25*clhs434;
        lhs(1,12)=clhs0*clhs435 + clhs17*clhs436 + clhs249*clhs399 + clhs25*clhs437 + clhs250*clhs400 + clhs251*clhs401;
        lhs(1,13)=clhs0*clhs438 + clhs17*clhs439 + clhs25*clhs440 + clhs273*clhs399 + clhs274*clhs400 + clhs275*clhs401;
        lhs(1,14)=clhs0*clhs441 + clhs17*clhs442 + clhs25*clhs443 + clhs297*clhs399 + clhs298*clhs400 + clhs299*clhs401;
        lhs(1,15)=clhs0*clhs444 + clhs17*clhs445 + clhs25*clhs446 + clhs321*clhs399 + clhs322*clhs400 + clhs323*clhs401;
        lhs(1,16)=clhs0*clhs447 + clhs17*clhs448 + clhs25*clhs449 + clhs345*clhs399 + clhs346*clhs400 + clhs347*clhs401;
        lhs(1,17)=clhs0*clhs450 + clhs17*clhs451 + clhs25*clhs452 + clhs369*clhs399 + clhs370*clhs400 + clhs371*clhs401;
        lhs(1,18)=clhs0*clhs453;
        lhs(1,19)=clhs17*clhs454;
        lhs(1,20)=clhs25*clhs455;
        lhs(2,0)=-clhs0*clhs456 - clhs17*clhs457 + clhs18*clhs460 + clhs2*clhs459 - clhs25*clhs458 + clhs26*clhs461;
        lhs(2,1)=-clhs0*clhs462 - clhs17*clhs463 - clhs25*clhs464 + clhs459*clhs57 + clhs460*clhs62 + clhs461*clhs67;
        lhs(2,2)=-clhs0*clhs465 - clhs17*clhs466 - clhs25*clhs467 + clhs459*clhs72 + clhs460*clhs77 + clhs461*clhs82;
        lhs(2,3)=-clhs0*clhs468 - clhs17*clhs469 - clhs25*clhs470 + clhs459*clhs87 + clhs460*clhs92 + clhs461*clhs97;
        lhs(2,4)=-clhs0*clhs471 + clhs102*clhs459 + clhs107*clhs460 + clhs112*clhs461 - clhs17*clhs472 - clhs25*clhs473;
        lhs(2,5)=-clhs0*clhs474 + clhs117*clhs459 + clhs122*clhs460 + clhs127*clhs461 - clhs17*clhs475 - clhs25*clhs476;
        lhs(2,6)=-clhs0*clhs477 + clhs132*clhs459 + clhs137*clhs460 + clhs142*clhs461 - clhs17*clhs478 - clhs25*clhs479;
        lhs(2,7)=-clhs0*clhs480 + clhs147*clhs459 + clhs152*clhs460 + clhs157*clhs461 - clhs17*clhs481 - clhs25*clhs482;
        lhs(2,8)=-clhs0*clhs483 + clhs162*clhs459 + clhs167*clhs460 - clhs17*clhs484 + clhs172*clhs461 - clhs25*clhs485;
        lhs(2,9)=clhs0*clhs486 + clhs17*clhs487 + clhs177*clhs459 + clhs178*clhs460 + clhs179*clhs461 + clhs25*clhs488;
        lhs(2,10)=clhs0*clhs489 + clhs17*clhs490 + clhs201*clhs459 + clhs202*clhs460 + clhs203*clhs461 + clhs25*clhs491;
        lhs(2,11)=clhs0*clhs492 + clhs17*clhs493 + clhs225*clhs459 + clhs226*clhs460 + clhs227*clhs461 + clhs25*clhs494;
        lhs(2,12)=clhs0*clhs495 + clhs17*clhs496 + clhs249*clhs459 + clhs25*clhs497 + clhs250*clhs460 + clhs251*clhs461;
        lhs(2,13)=clhs0*clhs498 + clhs17*clhs499 + clhs25*clhs500 + clhs273*clhs459 + clhs274*clhs460 + clhs275*clhs461;
        lhs(2,14)=clhs0*clhs501 + clhs17*clhs502 + clhs25*clhs503 + clhs297*clhs459 + clhs298*clhs460 + clhs299*clhs461;
        lhs(2,15)=clhs0*clhs504 + clhs17*clhs505 + clhs25*clhs506 + clhs321*clhs459 + clhs322*clhs460 + clhs323*clhs461;
        lhs(2,16)=clhs0*clhs507 + clhs17*clhs508 + clhs25*clhs509 + clhs345*clhs459 + clhs346*clhs460 + clhs347*clhs461;
        lhs(2,17)=clhs0*clhs510 + clhs17*clhs511 + clhs25*clhs512 + clhs369*clhs459 + clhs370*clhs460 + clhs371*clhs461;
        lhs(2,18)=clhs0*clhs513;
        lhs(2,19)=clhs17*clhs514;
        lhs(2,20)=clhs25*clhs515;
        lhs(3,0)=-clhs16*clhs4 - clhs19*clhs24 + clhs20*clhs51 - clhs27*clhs32 + clhs28*clhs56 + clhs46*clhs5;
        lhs(3,1)=-clhs19*clhs66 - clhs27*clhs71 - clhs4*clhs61 + clhs46*clhs58 + clhs51*clhs63 + clhs56*clhs68;
        lhs(3,2)=-clhs19*clhs81 - clhs27*clhs86 - clhs4*clhs76 + clhs46*clhs73 + clhs51*clhs78 + clhs56*clhs83;
        lhs(3,3)=-clhs101*clhs27 - clhs19*clhs96 - clhs4*clhs91 + clhs46*clhs88 + clhs51*clhs93 + clhs56*clhs98;
        lhs(3,4)=clhs103*clhs46 - clhs106*clhs4 + clhs108*clhs51 - clhs111*clhs19 + clhs113*clhs56 - clhs116*clhs27;
        lhs(3,5)=clhs118*clhs46 - clhs121*clhs4 + clhs123*clhs51 - clhs126*clhs19 + clhs128*clhs56 - clhs131*clhs27;
        lhs(3,6)=clhs133*clhs46 - clhs136*clhs4 + clhs138*clhs51 - clhs141*clhs19 + clhs143*clhs56 - clhs146*clhs27;
        lhs(3,7)=clhs148*clhs46 - clhs151*clhs4 + clhs153*clhs51 - clhs156*clhs19 + clhs158*clhs56 - clhs161*clhs27;
        lhs(3,8)=clhs163*clhs46 - clhs166*clhs4 + clhs168*clhs51 - clhs171*clhs19 + clhs173*clhs56 - clhs176*clhs27;
        lhs(3,9)=clhs183*clhs46 + clhs186*clhs4 + clhs19*clhs193 + clhs190*clhs51 + clhs197*clhs56 + clhs200*clhs27;
        lhs(3,10)=clhs19*clhs217 + clhs207*clhs46 + clhs210*clhs4 + clhs214*clhs51 + clhs221*clhs56 + clhs224*clhs27;
        lhs(3,11)=clhs19*clhs241 + clhs231*clhs46 + clhs234*clhs4 + clhs238*clhs51 + clhs245*clhs56 + clhs248*clhs27;
        lhs(3,12)=clhs19*clhs265 + clhs255*clhs46 + clhs258*clhs4 + clhs262*clhs51 + clhs269*clhs56 + clhs27*clhs272;
        lhs(3,13)=clhs19*clhs289 + clhs27*clhs296 + clhs279*clhs46 + clhs282*clhs4 + clhs286*clhs51 + clhs293*clhs56;
        lhs(3,14)=clhs19*clhs313 + clhs27*clhs320 + clhs303*clhs46 + clhs306*clhs4 + clhs310*clhs51 + clhs317*clhs56;
        lhs(3,15)=clhs19*clhs337 + clhs27*clhs344 + clhs327*clhs46 + clhs330*clhs4 + clhs334*clhs51 + clhs341*clhs56;
        lhs(3,16)=clhs19*clhs361 + clhs27*clhs368 + clhs351*clhs46 + clhs354*clhs4 + clhs358*clhs51 + clhs365*clhs56;
        lhs(3,17)=clhs19*clhs385 + clhs27*clhs392 + clhs375*clhs46 + clhs378*clhs4 + clhs382*clhs51 + clhs389*clhs56;
        lhs(3,18)=clhs393*clhs4;
        lhs(3,19)=clhs19*clhs394;
        lhs(3,20)=clhs27*clhs395;
        lhs(4,0)=-clhs19*clhs397 + clhs20*clhs400 - clhs27*clhs398 + clhs28*clhs401 - clhs396*clhs4 + clhs399*clhs5;
        lhs(4,1)=-clhs19*clhs403 - clhs27*clhs404 + clhs399*clhs58 - clhs4*clhs402 + clhs400*clhs63 + clhs401*clhs68;
        lhs(4,2)=-clhs19*clhs406 - clhs27*clhs407 + clhs399*clhs73 - clhs4*clhs405 + clhs400*clhs78 + clhs401*clhs83;
        lhs(4,3)=-clhs19*clhs409 - clhs27*clhs410 + clhs399*clhs88 - clhs4*clhs408 + clhs400*clhs93 + clhs401*clhs98;
        lhs(4,4)=clhs103*clhs399 + clhs108*clhs400 + clhs113*clhs401 - clhs19*clhs412 - clhs27*clhs413 - clhs4*clhs411;
        lhs(4,5)=clhs118*clhs399 + clhs123*clhs400 + clhs128*clhs401 - clhs19*clhs415 - clhs27*clhs416 - clhs4*clhs414;
        lhs(4,6)=clhs133*clhs399 + clhs138*clhs400 + clhs143*clhs401 - clhs19*clhs418 - clhs27*clhs419 - clhs4*clhs417;
        lhs(4,7)=clhs148*clhs399 + clhs153*clhs400 + clhs158*clhs401 - clhs19*clhs421 - clhs27*clhs422 - clhs4*clhs420;
        lhs(4,8)=clhs163*clhs399 + clhs168*clhs400 + clhs173*clhs401 - clhs19*clhs424 - clhs27*clhs425 - clhs4*clhs423;
        lhs(4,9)=clhs183*clhs399 + clhs19*clhs427 + clhs190*clhs400 + clhs197*clhs401 + clhs27*clhs428 + clhs4*clhs426;
        lhs(4,10)=clhs19*clhs430 + clhs207*clhs399 + clhs214*clhs400 + clhs221*clhs401 + clhs27*clhs431 + clhs4*clhs429;
        lhs(4,11)=clhs19*clhs433 + clhs231*clhs399 + clhs238*clhs400 + clhs245*clhs401 + clhs27*clhs434 + clhs4*clhs432;
        lhs(4,12)=clhs19*clhs436 + clhs255*clhs399 + clhs262*clhs400 + clhs269*clhs401 + clhs27*clhs437 + clhs4*clhs435;
        lhs(4,13)=clhs19*clhs439 + clhs27*clhs440 + clhs279*clhs399 + clhs286*clhs400 + clhs293*clhs401 + clhs4*clhs438;
        lhs(4,14)=clhs19*clhs442 + clhs27*clhs443 + clhs303*clhs399 + clhs310*clhs400 + clhs317*clhs401 + clhs4*clhs441;
        lhs(4,15)=clhs19*clhs445 + clhs27*clhs446 + clhs327*clhs399 + clhs334*clhs400 + clhs341*clhs401 + clhs4*clhs444;
        lhs(4,16)=clhs19*clhs448 + clhs27*clhs449 + clhs351*clhs399 + clhs358*clhs400 + clhs365*clhs401 + clhs4*clhs447;
        lhs(4,17)=clhs19*clhs451 + clhs27*clhs452 + clhs375*clhs399 + clhs382*clhs400 + clhs389*clhs401 + clhs4*clhs450;
        lhs(4,18)=clhs4*clhs453;
        lhs(4,19)=clhs19*clhs454;
        lhs(4,20)=clhs27*clhs455;
        lhs(5,0)=-clhs19*clhs457 + clhs20*clhs460 - clhs27*clhs458 + clhs28*clhs461 - clhs4*clhs456 + clhs459*clhs5;
        lhs(5,1)=-clhs19*clhs463 - clhs27*clhs464 - clhs4*clhs462 + clhs459*clhs58 + clhs460*clhs63 + clhs461*clhs68;
        lhs(5,2)=-clhs19*clhs466 - clhs27*clhs467 - clhs4*clhs465 + clhs459*clhs73 + clhs460*clhs78 + clhs461*clhs83;
        lhs(5,3)=-clhs19*clhs469 - clhs27*clhs470 - clhs4*clhs468 + clhs459*clhs88 + clhs460*clhs93 + clhs461*clhs98;
        lhs(5,4)=clhs103*clhs459 + clhs108*clhs460 + clhs113*clhs461 - clhs19*clhs472 - clhs27*clhs473 - clhs4*clhs471;
        lhs(5,5)=clhs118*clhs459 + clhs123*clhs460 + clhs128*clhs461 - clhs19*clhs475 - clhs27*clhs476 - clhs4*clhs474;
        lhs(5,6)=clhs133*clhs459 + clhs138*clhs460 + clhs143*clhs461 - clhs19*clhs478 - clhs27*clhs479 - clhs4*clhs477;
        lhs(5,7)=clhs148*clhs459 + clhs153*clhs460 + clhs158*clhs461 - clhs19*clhs481 - clhs27*clhs482 - clhs4*clhs480;
        lhs(5,8)=clhs163*clhs459 + clhs168*clhs460 + clhs173*clhs461 - clhs19*clhs484 - clhs27*clhs485 - clhs4*clhs483;
        lhs(5,9)=clhs183*clhs459 + clhs19*clhs487 + clhs190*clhs460 + clhs197*clhs461 + clhs27*clhs488 + clhs4*clhs486;
        lhs(5,10)=clhs19*clhs490 + clhs207*clhs459 + clhs214*clhs460 + clhs221*clhs461 + clhs27*clhs491 + clhs4*clhs489;
        lhs(5,11)=clhs19*clhs493 + clhs231*clhs459 + clhs238*clhs460 + clhs245*clhs461 + clhs27*clhs494 + clhs4*clhs492;
        lhs(5,12)=clhs19*clhs496 + clhs255*clhs459 + clhs262*clhs460 + clhs269*clhs461 + clhs27*clhs497 + clhs4*clhs495;
        lhs(5,13)=clhs19*clhs499 + clhs27*clhs500 + clhs279*clhs459 + clhs286*clhs460 + clhs293*clhs461 + clhs4*clhs498;
        lhs(5,14)=clhs19*clhs502 + clhs27*clhs503 + clhs303*clhs459 + clhs310*clhs460 + clhs317*clhs461 + clhs4*clhs501;
        lhs(5,15)=clhs19*clhs505 + clhs27*clhs506 + clhs327*clhs459 + clhs334*clhs460 + clhs341*clhs461 + clhs4*clhs504;
        lhs(5,16)=clhs19*clhs508 + clhs27*clhs509 + clhs351*clhs459 + clhs358*clhs460 + clhs365*clhs461 + clhs4*clhs507;
        lhs(5,17)=clhs19*clhs511 + clhs27*clhs512 + clhs375*clhs459 + clhs382*clhs460 + clhs389*clhs461 + clhs4*clhs510;
        lhs(5,18)=clhs4*clhs513;
        lhs(5,19)=clhs19*clhs514;
        lhs(5,20)=clhs27*clhs515;
        lhs(6,0)=-clhs16*clhs7 - clhs21*clhs24 + clhs22*clhs51 - clhs29*clhs32 + clhs30*clhs56 + clhs46*clhs8;
        lhs(6,1)=-clhs21*clhs66 - clhs29*clhs71 + clhs46*clhs59 + clhs51*clhs64 + clhs56*clhs69 - clhs61*clhs7;
        lhs(6,2)=-clhs21*clhs81 - clhs29*clhs86 + clhs46*clhs74 + clhs51*clhs79 + clhs56*clhs84 - clhs7*clhs76;
        lhs(6,3)=-clhs101*clhs29 - clhs21*clhs96 + clhs46*clhs89 + clhs51*clhs94 + clhs56*clhs99 - clhs7*clhs91;
        lhs(6,4)=clhs104*clhs46 - clhs106*clhs7 + clhs109*clhs51 - clhs111*clhs21 + clhs114*clhs56 - clhs116*clhs29;
        lhs(6,5)=clhs119*clhs46 - clhs121*clhs7 + clhs124*clhs51 - clhs126*clhs21 + clhs129*clhs56 - clhs131*clhs29;
        lhs(6,6)=clhs134*clhs46 - clhs136*clhs7 + clhs139*clhs51 - clhs141*clhs21 + clhs144*clhs56 - clhs146*clhs29;
        lhs(6,7)=clhs149*clhs46 - clhs151*clhs7 + clhs154*clhs51 - clhs156*clhs21 + clhs159*clhs56 - clhs161*clhs29;
        lhs(6,8)=clhs164*clhs46 - clhs166*clhs7 + clhs169*clhs51 - clhs171*clhs21 + clhs174*clhs56 - clhs176*clhs29;
        lhs(6,9)=clhs184*clhs46 + clhs186*clhs7 + clhs191*clhs51 + clhs193*clhs21 + clhs198*clhs56 + clhs200*clhs29;
        lhs(6,10)=clhs208*clhs46 + clhs21*clhs217 + clhs210*clhs7 + clhs215*clhs51 + clhs222*clhs56 + clhs224*clhs29;
        lhs(6,11)=clhs21*clhs241 + clhs232*clhs46 + clhs234*clhs7 + clhs239*clhs51 + clhs246*clhs56 + clhs248*clhs29;
        lhs(6,12)=clhs21*clhs265 + clhs256*clhs46 + clhs258*clhs7 + clhs263*clhs51 + clhs270*clhs56 + clhs272*clhs29;
        lhs(6,13)=clhs21*clhs289 + clhs280*clhs46 + clhs282*clhs7 + clhs287*clhs51 + clhs29*clhs296 + clhs294*clhs56;
        lhs(6,14)=clhs21*clhs313 + clhs29*clhs320 + clhs304*clhs46 + clhs306*clhs7 + clhs311*clhs51 + clhs318*clhs56;
        lhs(6,15)=clhs21*clhs337 + clhs29*clhs344 + clhs328*clhs46 + clhs330*clhs7 + clhs335*clhs51 + clhs342*clhs56;
        lhs(6,16)=clhs21*clhs361 + clhs29*clhs368 + clhs352*clhs46 + clhs354*clhs7 + clhs359*clhs51 + clhs366*clhs56;
        lhs(6,17)=clhs21*clhs385 + clhs29*clhs392 + clhs376*clhs46 + clhs378*clhs7 + clhs383*clhs51 + clhs390*clhs56;
        lhs(6,18)=clhs393*clhs7;
        lhs(6,19)=clhs21*clhs394;
        lhs(6,20)=clhs29*clhs395;
        lhs(7,0)=-clhs21*clhs397 + clhs22*clhs400 - clhs29*clhs398 + clhs30*clhs401 - clhs396*clhs7 + clhs399*clhs8;
        lhs(7,1)=-clhs21*clhs403 - clhs29*clhs404 + clhs399*clhs59 + clhs400*clhs64 + clhs401*clhs69 - clhs402*clhs7;
        lhs(7,2)=-clhs21*clhs406 - clhs29*clhs407 + clhs399*clhs74 + clhs400*clhs79 + clhs401*clhs84 - clhs405*clhs7;
        lhs(7,3)=-clhs21*clhs409 - clhs29*clhs410 + clhs399*clhs89 + clhs400*clhs94 + clhs401*clhs99 - clhs408*clhs7;
        lhs(7,4)=clhs104*clhs399 + clhs109*clhs400 + clhs114*clhs401 - clhs21*clhs412 - clhs29*clhs413 - clhs411*clhs7;
        lhs(7,5)=clhs119*clhs399 + clhs124*clhs400 + clhs129*clhs401 - clhs21*clhs415 - clhs29*clhs416 - clhs414*clhs7;
        lhs(7,6)=clhs134*clhs399 + clhs139*clhs400 + clhs144*clhs401 - clhs21*clhs418 - clhs29*clhs419 - clhs417*clhs7;
        lhs(7,7)=clhs149*clhs399 + clhs154*clhs400 + clhs159*clhs401 - clhs21*clhs421 - clhs29*clhs422 - clhs420*clhs7;
        lhs(7,8)=clhs164*clhs399 + clhs169*clhs400 + clhs174*clhs401 - clhs21*clhs424 - clhs29*clhs425 - clhs423*clhs7;
        lhs(7,9)=clhs184*clhs399 + clhs191*clhs400 + clhs198*clhs401 + clhs21*clhs427 + clhs29*clhs428 + clhs426*clhs7;
        lhs(7,10)=clhs208*clhs399 + clhs21*clhs430 + clhs215*clhs400 + clhs222*clhs401 + clhs29*clhs431 + clhs429*clhs7;
        lhs(7,11)=clhs21*clhs433 + clhs232*clhs399 + clhs239*clhs400 + clhs246*clhs401 + clhs29*clhs434 + clhs432*clhs7;
        lhs(7,12)=clhs21*clhs436 + clhs256*clhs399 + clhs263*clhs400 + clhs270*clhs401 + clhs29*clhs437 + clhs435*clhs7;
        lhs(7,13)=clhs21*clhs439 + clhs280*clhs399 + clhs287*clhs400 + clhs29*clhs440 + clhs294*clhs401 + clhs438*clhs7;
        lhs(7,14)=clhs21*clhs442 + clhs29*clhs443 + clhs304*clhs399 + clhs311*clhs400 + clhs318*clhs401 + clhs441*clhs7;
        lhs(7,15)=clhs21*clhs445 + clhs29*clhs446 + clhs328*clhs399 + clhs335*clhs400 + clhs342*clhs401 + clhs444*clhs7;
        lhs(7,16)=clhs21*clhs448 + clhs29*clhs449 + clhs352*clhs399 + clhs359*clhs400 + clhs366*clhs401 + clhs447*clhs7;
        lhs(7,17)=clhs21*clhs451 + clhs29*clhs452 + clhs376*clhs399 + clhs383*clhs400 + clhs390*clhs401 + clhs450*clhs7;
        lhs(7,18)=clhs453*clhs7;
        lhs(7,19)=clhs21*clhs454;
        lhs(7,20)=clhs29*clhs455;
        lhs(8,0)=-clhs21*clhs457 + clhs22*clhs460 - clhs29*clhs458 + clhs30*clhs461 - clhs456*clhs7 + clhs459*clhs8;
        lhs(8,1)=-clhs21*clhs463 - clhs29*clhs464 + clhs459*clhs59 + clhs460*clhs64 + clhs461*clhs69 - clhs462*clhs7;
        lhs(8,2)=-clhs21*clhs466 - clhs29*clhs467 + clhs459*clhs74 + clhs460*clhs79 + clhs461*clhs84 - clhs465*clhs7;
        lhs(8,3)=-clhs21*clhs469 - clhs29*clhs470 + clhs459*clhs89 + clhs460*clhs94 + clhs461*clhs99 - clhs468*clhs7;
        lhs(8,4)=clhs104*clhs459 + clhs109*clhs460 + clhs114*clhs461 - clhs21*clhs472 - clhs29*clhs473 - clhs471*clhs7;
        lhs(8,5)=clhs119*clhs459 + clhs124*clhs460 + clhs129*clhs461 - clhs21*clhs475 - clhs29*clhs476 - clhs474*clhs7;
        lhs(8,6)=clhs134*clhs459 + clhs139*clhs460 + clhs144*clhs461 - clhs21*clhs478 - clhs29*clhs479 - clhs477*clhs7;
        lhs(8,7)=clhs149*clhs459 + clhs154*clhs460 + clhs159*clhs461 - clhs21*clhs481 - clhs29*clhs482 - clhs480*clhs7;
        lhs(8,8)=clhs164*clhs459 + clhs169*clhs460 + clhs174*clhs461 - clhs21*clhs484 - clhs29*clhs485 - clhs483*clhs7;
        lhs(8,9)=clhs184*clhs459 + clhs191*clhs460 + clhs198*clhs461 + clhs21*clhs487 + clhs29*clhs488 + clhs486*clhs7;
        lhs(8,10)=clhs208*clhs459 + clhs21*clhs490 + clhs215*clhs460 + clhs222*clhs461 + clhs29*clhs491 + clhs489*clhs7;
        lhs(8,11)=clhs21*clhs493 + clhs232*clhs459 + clhs239*clhs460 + clhs246*clhs461 + clhs29*clhs494 + clhs492*clhs7;
        lhs(8,12)=clhs21*clhs496 + clhs256*clhs459 + clhs263*clhs460 + clhs270*clhs461 + clhs29*clhs497 + clhs495*clhs7;
        lhs(8,13)=clhs21*clhs499 + clhs280*clhs459 + clhs287*clhs460 + clhs29*clhs500 + clhs294*clhs461 + clhs498*clhs7;
        lhs(8,14)=clhs21*clhs502 + clhs29*clhs503 + clhs304*clhs459 + clhs311*clhs460 + clhs318*clhs461 + clhs501*clhs7;
        lhs(8,15)=clhs21*clhs505 + clhs29*clhs506 + clhs328*clhs459 + clhs335*clhs460 + clhs342*clhs461 + clhs504*clhs7;
        lhs(8,16)=clhs21*clhs508 + clhs29*clhs509 + clhs352*clhs459 + clhs359*clhs460 + clhs366*clhs461 + clhs507*clhs7;
        lhs(8,17)=clhs21*clhs511 + clhs29*clhs512 + clhs376*clhs459 + clhs383*clhs460 + clhs390*clhs461 + clhs510*clhs7;
        lhs(8,18)=clhs513*clhs7;
        lhs(8,19)=clhs21*clhs514;
        lhs(8,20)=clhs29*clhs515;
        lhs(9,0)=penalty_parameter*(clhs34*clhs516 + clhs47*clhs517 + clhs518*clhs52);
        lhs(9,1)=penalty_parameter*(clhs34*clhs519 + clhs47*clhs520 + clhs52*clhs521);
        lhs(9,2)=penalty_parameter*(clhs34*clhs522 + clhs47*clhs523 + clhs52*clhs524);
        lhs(9,3)=penalty_parameter*(clhs34*clhs525 + clhs47*clhs526 + clhs52*clhs527);
        lhs(9,4)=penalty_parameter*(clhs34*clhs528 + clhs47*clhs529 + clhs52*clhs530);
        lhs(9,5)=penalty_parameter*(clhs34*clhs531 + clhs47*clhs532 + clhs52*clhs533);
        lhs(9,6)=penalty_parameter*(clhs34*clhs534 + clhs47*clhs535 + clhs52*clhs536);
        lhs(9,7)=penalty_parameter*(clhs34*clhs537 + clhs47*clhs538 + clhs52*clhs539);
        lhs(9,8)=penalty_parameter*(clhs34*clhs540 + clhs47*clhs541 + clhs52*clhs542);
        lhs(9,9)=-clhs180*clhs46 - clhs186*clhs34 - clhs187*clhs51 - clhs193*clhs47 - clhs194*clhs56 - clhs200*clhs52;
        lhs(9,10)=-clhs204*clhs46 - clhs210*clhs34 - clhs211*clhs51 - clhs217*clhs47 - clhs218*clhs56 - clhs224*clhs52;
        lhs(9,11)=-clhs228*clhs46 - clhs234*clhs34 - clhs235*clhs51 - clhs241*clhs47 - clhs242*clhs56 - clhs248*clhs52;
        lhs(9,12)=-clhs252*clhs46 - clhs258*clhs34 - clhs259*clhs51 - clhs265*clhs47 - clhs266*clhs56 - clhs272*clhs52;
        lhs(9,13)=-clhs276*clhs46 - clhs282*clhs34 - clhs283*clhs51 - clhs289*clhs47 - clhs290*clhs56 - clhs296*clhs52;
        lhs(9,14)=-clhs300*clhs46 - clhs306*clhs34 - clhs307*clhs51 - clhs313*clhs47 - clhs314*clhs56 - clhs320*clhs52;
        lhs(9,15)=-clhs324*clhs46 - clhs330*clhs34 - clhs331*clhs51 - clhs337*clhs47 - clhs338*clhs56 - clhs344*clhs52;
        lhs(9,16)=-clhs34*clhs354 - clhs348*clhs46 - clhs355*clhs51 - clhs361*clhs47 - clhs362*clhs56 - clhs368*clhs52;
        lhs(9,17)=-clhs34*clhs378 - clhs372*clhs46 - clhs379*clhs51 - clhs385*clhs47 - clhs386*clhs56 - clhs392*clhs52;
        lhs(9,18)=-clhs34*clhs393;
        lhs(9,19)=-clhs394*clhs47;
        lhs(9,20)=-clhs395*clhs52;
        lhs(10,0)=penalty_parameter*(clhs34*clhs543 + clhs47*clhs544 + clhs52*clhs545);
        lhs(10,1)=penalty_parameter*(clhs34*clhs546 + clhs47*clhs547 + clhs52*clhs548);
        lhs(10,2)=penalty_parameter*(clhs34*clhs549 + clhs47*clhs550 + clhs52*clhs551);
        lhs(10,3)=penalty_parameter*(clhs34*clhs552 + clhs47*clhs553 + clhs52*clhs554);
        lhs(10,4)=penalty_parameter*(clhs34*clhs555 + clhs47*clhs556 + clhs52*clhs557);
        lhs(10,5)=penalty_parameter*(clhs34*clhs558 + clhs47*clhs559 + clhs52*clhs560);
        lhs(10,6)=penalty_parameter*(clhs34*clhs561 + clhs47*clhs562 + clhs52*clhs563);
        lhs(10,7)=penalty_parameter*(clhs34*clhs564 + clhs47*clhs565 + clhs52*clhs566);
        lhs(10,8)=penalty_parameter*(clhs34*clhs567 + clhs47*clhs568 + clhs52*clhs569);
        lhs(10,9)=-clhs180*clhs399 - clhs187*clhs400 - clhs194*clhs401 - clhs34*clhs426 - clhs427*clhs47 - clhs428*clhs52;
        lhs(10,10)=-clhs204*clhs399 - clhs211*clhs400 - clhs218*clhs401 - clhs34*clhs429 - clhs430*clhs47 - clhs431*clhs52;
        lhs(10,11)=-clhs228*clhs399 - clhs235*clhs400 - clhs242*clhs401 - clhs34*clhs432 - clhs433*clhs47 - clhs434*clhs52;
        lhs(10,12)=-clhs252*clhs399 - clhs259*clhs400 - clhs266*clhs401 - clhs34*clhs435 - clhs436*clhs47 - clhs437*clhs52;
        lhs(10,13)=-clhs276*clhs399 - clhs283*clhs400 - clhs290*clhs401 - clhs34*clhs438 - clhs439*clhs47 - clhs440*clhs52;
        lhs(10,14)=-clhs300*clhs399 - clhs307*clhs400 - clhs314*clhs401 - clhs34*clhs441 - clhs442*clhs47 - clhs443*clhs52;
        lhs(10,15)=-clhs324*clhs399 - clhs331*clhs400 - clhs338*clhs401 - clhs34*clhs444 - clhs445*clhs47 - clhs446*clhs52;
        lhs(10,16)=-clhs34*clhs447 - clhs348*clhs399 - clhs355*clhs400 - clhs362*clhs401 - clhs448*clhs47 - clhs449*clhs52;
        lhs(10,17)=-clhs34*clhs450 - clhs372*clhs399 - clhs379*clhs400 - clhs386*clhs401 - clhs451*clhs47 - clhs452*clhs52;
        lhs(10,18)=-clhs34*clhs453;
        lhs(10,19)=-clhs454*clhs47;
        lhs(10,20)=-clhs455*clhs52;
        lhs(11,0)=penalty_parameter*(clhs34*clhs570 + clhs47*clhs571 + clhs52*clhs572);
        lhs(11,1)=penalty_parameter*(clhs34*clhs573 + clhs47*clhs574 + clhs52*clhs575);
        lhs(11,2)=penalty_parameter*(clhs34*clhs576 + clhs47*clhs577 + clhs52*clhs578);
        lhs(11,3)=penalty_parameter*(clhs34*clhs579 + clhs47*clhs580 + clhs52*clhs581);
        lhs(11,4)=penalty_parameter*(clhs34*clhs582 + clhs47*clhs583 + clhs52*clhs584);
        lhs(11,5)=penalty_parameter*(clhs34*clhs585 + clhs47*clhs586 + clhs52*clhs587);
        lhs(11,6)=penalty_parameter*(clhs34*clhs588 + clhs47*clhs589 + clhs52*clhs590);
        lhs(11,7)=penalty_parameter*(clhs34*clhs591 + clhs47*clhs592 + clhs52*clhs593);
        lhs(11,8)=penalty_parameter*(clhs34*clhs594 + clhs47*clhs595 + clhs52*clhs596);
        lhs(11,9)=-clhs180*clhs459 - clhs187*clhs460 - clhs194*clhs461 - clhs34*clhs486 - clhs47*clhs487 - clhs488*clhs52;
        lhs(11,10)=-clhs204*clhs459 - clhs211*clhs460 - clhs218*clhs461 - clhs34*clhs489 - clhs47*clhs490 - clhs491*clhs52;
        lhs(11,11)=-clhs228*clhs459 - clhs235*clhs460 - clhs242*clhs461 - clhs34*clhs492 - clhs47*clhs493 - clhs494*clhs52;
        lhs(11,12)=-clhs252*clhs459 - clhs259*clhs460 - clhs266*clhs461 - clhs34*clhs495 - clhs47*clhs496 - clhs497*clhs52;
        lhs(11,13)=-clhs276*clhs459 - clhs283*clhs460 - clhs290*clhs461 - clhs34*clhs498 - clhs47*clhs499 - clhs500*clhs52;
        lhs(11,14)=-clhs300*clhs459 - clhs307*clhs460 - clhs314*clhs461 - clhs34*clhs501 - clhs47*clhs502 - clhs503*clhs52;
        lhs(11,15)=-clhs324*clhs459 - clhs331*clhs460 - clhs338*clhs461 - clhs34*clhs504 - clhs47*clhs505 - clhs506*clhs52;
        lhs(11,16)=-clhs34*clhs507 - clhs348*clhs459 - clhs355*clhs460 - clhs362*clhs461 - clhs47*clhs508 - clhs509*clhs52;
        lhs(11,17)=-clhs34*clhs510 - clhs372*clhs459 - clhs379*clhs460 - clhs386*clhs461 - clhs47*clhs511 - clhs512*clhs52;
        lhs(11,18)=-clhs34*clhs513;
        lhs(11,19)=-clhs47*clhs514;
        lhs(11,20)=-clhs515*clhs52;
        lhs(12,0)=penalty_parameter*(clhs36*clhs516 + clhs48*clhs517 + clhs518*clhs53);
        lhs(12,1)=penalty_parameter*(clhs36*clhs519 + clhs48*clhs520 + clhs521*clhs53);
        lhs(12,2)=penalty_parameter*(clhs36*clhs522 + clhs48*clhs523 + clhs524*clhs53);
        lhs(12,3)=penalty_parameter*(clhs36*clhs525 + clhs48*clhs526 + clhs527*clhs53);
        lhs(12,4)=penalty_parameter*(clhs36*clhs528 + clhs48*clhs529 + clhs53*clhs530);
        lhs(12,5)=penalty_parameter*(clhs36*clhs531 + clhs48*clhs532 + clhs53*clhs533);
        lhs(12,6)=penalty_parameter*(clhs36*clhs534 + clhs48*clhs535 + clhs53*clhs536);
        lhs(12,7)=penalty_parameter*(clhs36*clhs537 + clhs48*clhs538 + clhs53*clhs539);
        lhs(12,8)=penalty_parameter*(clhs36*clhs540 + clhs48*clhs541 + clhs53*clhs542);
        lhs(12,9)=-clhs181*clhs46 - clhs186*clhs36 - clhs188*clhs51 - clhs193*clhs48 - clhs195*clhs56 - clhs200*clhs53;
        lhs(12,10)=-clhs205*clhs46 - clhs210*clhs36 - clhs212*clhs51 - clhs217*clhs48 - clhs219*clhs56 - clhs224*clhs53;
        lhs(12,11)=-clhs229*clhs46 - clhs234*clhs36 - clhs236*clhs51 - clhs241*clhs48 - clhs243*clhs56 - clhs248*clhs53;
        lhs(12,12)=-clhs253*clhs46 - clhs258*clhs36 - clhs260*clhs51 - clhs265*clhs48 - clhs267*clhs56 - clhs272*clhs53;
        lhs(12,13)=-clhs277*clhs46 - clhs282*clhs36 - clhs284*clhs51 - clhs289*clhs48 - clhs291*clhs56 - clhs296*clhs53;
        lhs(12,14)=-clhs301*clhs46 - clhs306*clhs36 - clhs308*clhs51 - clhs313*clhs48 - clhs315*clhs56 - clhs320*clhs53;
        lhs(12,15)=-clhs325*clhs46 - clhs330*clhs36 - clhs332*clhs51 - clhs337*clhs48 - clhs339*clhs56 - clhs344*clhs53;
        lhs(12,16)=-clhs349*clhs46 - clhs354*clhs36 - clhs356*clhs51 - clhs361*clhs48 - clhs363*clhs56 - clhs368*clhs53;
        lhs(12,17)=-clhs36*clhs378 - clhs373*clhs46 - clhs380*clhs51 - clhs385*clhs48 - clhs387*clhs56 - clhs392*clhs53;
        lhs(12,18)=-clhs36*clhs393;
        lhs(12,19)=-clhs394*clhs48;
        lhs(12,20)=-clhs395*clhs53;
        lhs(13,0)=penalty_parameter*(clhs36*clhs543 + clhs48*clhs544 + clhs53*clhs545);
        lhs(13,1)=penalty_parameter*(clhs36*clhs546 + clhs48*clhs547 + clhs53*clhs548);
        lhs(13,2)=penalty_parameter*(clhs36*clhs549 + clhs48*clhs550 + clhs53*clhs551);
        lhs(13,3)=penalty_parameter*(clhs36*clhs552 + clhs48*clhs553 + clhs53*clhs554);
        lhs(13,4)=penalty_parameter*(clhs36*clhs555 + clhs48*clhs556 + clhs53*clhs557);
        lhs(13,5)=penalty_parameter*(clhs36*clhs558 + clhs48*clhs559 + clhs53*clhs560);
        lhs(13,6)=penalty_parameter*(clhs36*clhs561 + clhs48*clhs562 + clhs53*clhs563);
        lhs(13,7)=penalty_parameter*(clhs36*clhs564 + clhs48*clhs565 + clhs53*clhs566);
        lhs(13,8)=penalty_parameter*(clhs36*clhs567 + clhs48*clhs568 + clhs53*clhs569);
        lhs(13,9)=-clhs181*clhs399 - clhs188*clhs400 - clhs195*clhs401 - clhs36*clhs426 - clhs427*clhs48 - clhs428*clhs53;
        lhs(13,10)=-clhs205*clhs399 - clhs212*clhs400 - clhs219*clhs401 - clhs36*clhs429 - clhs430*clhs48 - clhs431*clhs53;
        lhs(13,11)=-clhs229*clhs399 - clhs236*clhs400 - clhs243*clhs401 - clhs36*clhs432 - clhs433*clhs48 - clhs434*clhs53;
        lhs(13,12)=-clhs253*clhs399 - clhs260*clhs400 - clhs267*clhs401 - clhs36*clhs435 - clhs436*clhs48 - clhs437*clhs53;
        lhs(13,13)=-clhs277*clhs399 - clhs284*clhs400 - clhs291*clhs401 - clhs36*clhs438 - clhs439*clhs48 - clhs440*clhs53;
        lhs(13,14)=-clhs301*clhs399 - clhs308*clhs400 - clhs315*clhs401 - clhs36*clhs441 - clhs442*clhs48 - clhs443*clhs53;
        lhs(13,15)=-clhs325*clhs399 - clhs332*clhs400 - clhs339*clhs401 - clhs36*clhs444 - clhs445*clhs48 - clhs446*clhs53;
        lhs(13,16)=-clhs349*clhs399 - clhs356*clhs400 - clhs36*clhs447 - clhs363*clhs401 - clhs448*clhs48 - clhs449*clhs53;
        lhs(13,17)=-clhs36*clhs450 - clhs373*clhs399 - clhs380*clhs400 - clhs387*clhs401 - clhs451*clhs48 - clhs452*clhs53;
        lhs(13,18)=-clhs36*clhs453;
        lhs(13,19)=-clhs454*clhs48;
        lhs(13,20)=-clhs455*clhs53;
        lhs(14,0)=penalty_parameter*(clhs36*clhs570 + clhs48*clhs571 + clhs53*clhs572);
        lhs(14,1)=penalty_parameter*(clhs36*clhs573 + clhs48*clhs574 + clhs53*clhs575);
        lhs(14,2)=penalty_parameter*(clhs36*clhs576 + clhs48*clhs577 + clhs53*clhs578);
        lhs(14,3)=penalty_parameter*(clhs36*clhs579 + clhs48*clhs580 + clhs53*clhs581);
        lhs(14,4)=penalty_parameter*(clhs36*clhs582 + clhs48*clhs583 + clhs53*clhs584);
        lhs(14,5)=penalty_parameter*(clhs36*clhs585 + clhs48*clhs586 + clhs53*clhs587);
        lhs(14,6)=penalty_parameter*(clhs36*clhs588 + clhs48*clhs589 + clhs53*clhs590);
        lhs(14,7)=penalty_parameter*(clhs36*clhs591 + clhs48*clhs592 + clhs53*clhs593);
        lhs(14,8)=penalty_parameter*(clhs36*clhs594 + clhs48*clhs595 + clhs53*clhs596);
        lhs(14,9)=-clhs181*clhs459 - clhs188*clhs460 - clhs195*clhs461 - clhs36*clhs486 - clhs48*clhs487 - clhs488*clhs53;
        lhs(14,10)=-clhs205*clhs459 - clhs212*clhs460 - clhs219*clhs461 - clhs36*clhs489 - clhs48*clhs490 - clhs491*clhs53;
        lhs(14,11)=-clhs229*clhs459 - clhs236*clhs460 - clhs243*clhs461 - clhs36*clhs492 - clhs48*clhs493 - clhs494*clhs53;
        lhs(14,12)=-clhs253*clhs459 - clhs260*clhs460 - clhs267*clhs461 - clhs36*clhs495 - clhs48*clhs496 - clhs497*clhs53;
        lhs(14,13)=-clhs277*clhs459 - clhs284*clhs460 - clhs291*clhs461 - clhs36*clhs498 - clhs48*clhs499 - clhs500*clhs53;
        lhs(14,14)=-clhs301*clhs459 - clhs308*clhs460 - clhs315*clhs461 - clhs36*clhs501 - clhs48*clhs502 - clhs503*clhs53;
        lhs(14,15)=-clhs325*clhs459 - clhs332*clhs460 - clhs339*clhs461 - clhs36*clhs504 - clhs48*clhs505 - clhs506*clhs53;
        lhs(14,16)=-clhs349*clhs459 - clhs356*clhs460 - clhs36*clhs507 - clhs363*clhs461 - clhs48*clhs508 - clhs509*clhs53;
        lhs(14,17)=-clhs36*clhs510 - clhs373*clhs459 - clhs380*clhs460 - clhs387*clhs461 - clhs48*clhs511 - clhs512*clhs53;
        lhs(14,18)=-clhs36*clhs513;
        lhs(14,19)=-clhs48*clhs514;
        lhs(14,20)=-clhs515*clhs53;
        lhs(15,0)=penalty_parameter*(clhs38*clhs516 + clhs49*clhs517 + clhs518*clhs54);
        lhs(15,1)=penalty_parameter*(clhs38*clhs519 + clhs49*clhs520 + clhs521*clhs54);
        lhs(15,2)=penalty_parameter*(clhs38*clhs522 + clhs49*clhs523 + clhs524*clhs54);
        lhs(15,3)=penalty_parameter*(clhs38*clhs525 + clhs49*clhs526 + clhs527*clhs54);
        lhs(15,4)=penalty_parameter*(clhs38*clhs528 + clhs49*clhs529 + clhs530*clhs54);
        lhs(15,5)=penalty_parameter*(clhs38*clhs531 + clhs49*clhs532 + clhs533*clhs54);
        lhs(15,6)=penalty_parameter*(clhs38*clhs534 + clhs49*clhs535 + clhs536*clhs54);
        lhs(15,7)=penalty_parameter*(clhs38*clhs537 + clhs49*clhs538 + clhs539*clhs54);
        lhs(15,8)=penalty_parameter*(clhs38*clhs540 + clhs49*clhs541 + clhs54*clhs542);
        lhs(15,9)=-clhs182*clhs46 - clhs186*clhs38 - clhs189*clhs51 - clhs193*clhs49 - clhs196*clhs56 - clhs200*clhs54;
        lhs(15,10)=-clhs206*clhs46 - clhs210*clhs38 - clhs213*clhs51 - clhs217*clhs49 - clhs220*clhs56 - clhs224*clhs54;
        lhs(15,11)=-clhs230*clhs46 - clhs234*clhs38 - clhs237*clhs51 - clhs241*clhs49 - clhs244*clhs56 - clhs248*clhs54;
        lhs(15,12)=-clhs254*clhs46 - clhs258*clhs38 - clhs261*clhs51 - clhs265*clhs49 - clhs268*clhs56 - clhs272*clhs54;
        lhs(15,13)=-clhs278*clhs46 - clhs282*clhs38 - clhs285*clhs51 - clhs289*clhs49 - clhs292*clhs56 - clhs296*clhs54;
        lhs(15,14)=-clhs302*clhs46 - clhs306*clhs38 - clhs309*clhs51 - clhs313*clhs49 - clhs316*clhs56 - clhs320*clhs54;
        lhs(15,15)=-clhs326*clhs46 - clhs330*clhs38 - clhs333*clhs51 - clhs337*clhs49 - clhs340*clhs56 - clhs344*clhs54;
        lhs(15,16)=-clhs350*clhs46 - clhs354*clhs38 - clhs357*clhs51 - clhs361*clhs49 - clhs364*clhs56 - clhs368*clhs54;
        lhs(15,17)=-clhs374*clhs46 - clhs378*clhs38 - clhs381*clhs51 - clhs385*clhs49 - clhs388*clhs56 - clhs392*clhs54;
        lhs(15,18)=-clhs38*clhs393;
        lhs(15,19)=-clhs394*clhs49;
        lhs(15,20)=-clhs395*clhs54;
        lhs(16,0)=penalty_parameter*(clhs38*clhs543 + clhs49*clhs544 + clhs54*clhs545);
        lhs(16,1)=penalty_parameter*(clhs38*clhs546 + clhs49*clhs547 + clhs54*clhs548);
        lhs(16,2)=penalty_parameter*(clhs38*clhs549 + clhs49*clhs550 + clhs54*clhs551);
        lhs(16,3)=penalty_parameter*(clhs38*clhs552 + clhs49*clhs553 + clhs54*clhs554);
        lhs(16,4)=penalty_parameter*(clhs38*clhs555 + clhs49*clhs556 + clhs54*clhs557);
        lhs(16,5)=penalty_parameter*(clhs38*clhs558 + clhs49*clhs559 + clhs54*clhs560);
        lhs(16,6)=penalty_parameter*(clhs38*clhs561 + clhs49*clhs562 + clhs54*clhs563);
        lhs(16,7)=penalty_parameter*(clhs38*clhs564 + clhs49*clhs565 + clhs54*clhs566);
        lhs(16,8)=penalty_parameter*(clhs38*clhs567 + clhs49*clhs568 + clhs54*clhs569);
        lhs(16,9)=-clhs182*clhs399 - clhs189*clhs400 - clhs196*clhs401 - clhs38*clhs426 - clhs427*clhs49 - clhs428*clhs54;
        lhs(16,10)=-clhs206*clhs399 - clhs213*clhs400 - clhs220*clhs401 - clhs38*clhs429 - clhs430*clhs49 - clhs431*clhs54;
        lhs(16,11)=-clhs230*clhs399 - clhs237*clhs400 - clhs244*clhs401 - clhs38*clhs432 - clhs433*clhs49 - clhs434*clhs54;
        lhs(16,12)=-clhs254*clhs399 - clhs261*clhs400 - clhs268*clhs401 - clhs38*clhs435 - clhs436*clhs49 - clhs437*clhs54;
        lhs(16,13)=-clhs278*clhs399 - clhs285*clhs400 - clhs292*clhs401 - clhs38*clhs438 - clhs439*clhs49 - clhs440*clhs54;
        lhs(16,14)=-clhs302*clhs399 - clhs309*clhs400 - clhs316*clhs401 - clhs38*clhs441 - clhs442*clhs49 - clhs443*clhs54;
        lhs(16,15)=-clhs326*clhs399 - clhs333*clhs400 - clhs340*clhs401 - clhs38*clhs444 - clhs445*clhs49 - clhs446*clhs54;
        lhs(16,16)=-clhs350*clhs399 - clhs357*clhs400 - clhs364*clhs401 - clhs38*clhs447 - clhs448*clhs49 - clhs449*clhs54;
        lhs(16,17)=-clhs374*clhs399 - clhs38*clhs450 - clhs381*clhs400 - clhs388*clhs401 - clhs451*clhs49 - clhs452*clhs54;
        lhs(16,18)=-clhs38*clhs453;
        lhs(16,19)=-clhs454*clhs49;
        lhs(16,20)=-clhs455*clhs54;
        lhs(17,0)=penalty_parameter*(clhs38*clhs570 + clhs49*clhs571 + clhs54*clhs572);
        lhs(17,1)=penalty_parameter*(clhs38*clhs573 + clhs49*clhs574 + clhs54*clhs575);
        lhs(17,2)=penalty_parameter*(clhs38*clhs576 + clhs49*clhs577 + clhs54*clhs578);
        lhs(17,3)=penalty_parameter*(clhs38*clhs579 + clhs49*clhs580 + clhs54*clhs581);
        lhs(17,4)=penalty_parameter*(clhs38*clhs582 + clhs49*clhs583 + clhs54*clhs584);
        lhs(17,5)=penalty_parameter*(clhs38*clhs585 + clhs49*clhs586 + clhs54*clhs587);
        lhs(17,6)=penalty_parameter*(clhs38*clhs588 + clhs49*clhs589 + clhs54*clhs590);
        lhs(17,7)=penalty_parameter*(clhs38*clhs591 + clhs49*clhs592 + clhs54*clhs593);
        lhs(17,8)=penalty_parameter*(clhs38*clhs594 + clhs49*clhs595 + clhs54*clhs596);
        lhs(17,9)=-clhs182*clhs459 - clhs189*clhs460 - clhs196*clhs461 - clhs38*clhs486 - clhs487*clhs49 - clhs488*clhs54;
        lhs(17,10)=-clhs206*clhs459 - clhs213*clhs460 - clhs220*clhs461 - clhs38*clhs489 - clhs49*clhs490 - clhs491*clhs54;
        lhs(17,11)=-clhs230*clhs459 - clhs237*clhs460 - clhs244*clhs461 - clhs38*clhs492 - clhs49*clhs493 - clhs494*clhs54;
        lhs(17,12)=-clhs254*clhs459 - clhs261*clhs460 - clhs268*clhs461 - clhs38*clhs495 - clhs49*clhs496 - clhs497*clhs54;
        lhs(17,13)=-clhs278*clhs459 - clhs285*clhs460 - clhs292*clhs461 - clhs38*clhs498 - clhs49*clhs499 - clhs500*clhs54;
        lhs(17,14)=-clhs302*clhs459 - clhs309*clhs460 - clhs316*clhs461 - clhs38*clhs501 - clhs49*clhs502 - clhs503*clhs54;
        lhs(17,15)=-clhs326*clhs459 - clhs333*clhs460 - clhs340*clhs461 - clhs38*clhs504 - clhs49*clhs505 - clhs506*clhs54;
        lhs(17,16)=-clhs350*clhs459 - clhs357*clhs460 - clhs364*clhs461 - clhs38*clhs507 - clhs49*clhs508 - clhs509*clhs54;
        lhs(17,17)=-clhs374*clhs459 - clhs38*clhs510 - clhs381*clhs460 - clhs388*clhs461 - clhs49*clhs511 - clhs512*clhs54;
        lhs(17,18)=-clhs38*clhs513;
        lhs(17,19)=-clhs49*clhs514;
        lhs(17,20)=-clhs515*clhs54;
        lhs(18,0)=clhs15*scale_factor;
        lhs(18,1)=clhs60*scale_factor;
        lhs(18,2)=clhs75*scale_factor;
        lhs(18,3)=clhs90*scale_factor;
        lhs(18,4)=clhs105*scale_factor;
        lhs(18,5)=clhs120*scale_factor;
        lhs(18,6)=clhs135*scale_factor;
        lhs(18,7)=clhs150*scale_factor;
        lhs(18,8)=clhs165*scale_factor;
        lhs(18,9)=-clhs185*scale_factor;
        lhs(18,10)=-clhs209*scale_factor;
        lhs(18,11)=-clhs233*scale_factor;
        lhs(18,12)=-clhs257*scale_factor;
        lhs(18,13)=-clhs281*scale_factor;
        lhs(18,14)=-clhs305*scale_factor;
        lhs(18,15)=-clhs329*scale_factor;
        lhs(18,16)=-clhs353*scale_factor;
        lhs(18,17)=-clhs377*scale_factor;
        lhs(18,18)=0;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(19,0)=clhs23*scale_factor;
        lhs(19,1)=clhs65*scale_factor;
        lhs(19,2)=clhs80*scale_factor;
        lhs(19,3)=clhs95*scale_factor;
        lhs(19,4)=clhs110*scale_factor;
        lhs(19,5)=clhs125*scale_factor;
        lhs(19,6)=clhs140*scale_factor;
        lhs(19,7)=clhs155*scale_factor;
        lhs(19,8)=clhs170*scale_factor;
        lhs(19,9)=-clhs192*scale_factor;
        lhs(19,10)=-clhs216*scale_factor;
        lhs(19,11)=-clhs240*scale_factor;
        lhs(19,12)=-clhs264*scale_factor;
        lhs(19,13)=-clhs288*scale_factor;
        lhs(19,14)=-clhs312*scale_factor;
        lhs(19,15)=-clhs336*scale_factor;
        lhs(19,16)=-clhs360*scale_factor;
        lhs(19,17)=-clhs384*scale_factor;
        lhs(19,18)=0;
        lhs(19,19)=0;
        lhs(19,20)=0;
        lhs(20,0)=clhs31*scale_factor;
        lhs(20,1)=clhs70*scale_factor;
        lhs(20,2)=clhs85*scale_factor;
        lhs(20,3)=clhs100*scale_factor;
        lhs(20,4)=clhs115*scale_factor;
        lhs(20,5)=clhs130*scale_factor;
        lhs(20,6)=clhs145*scale_factor;
        lhs(20,7)=clhs160*scale_factor;
        lhs(20,8)=clhs175*scale_factor;
        lhs(20,9)=-clhs199*scale_factor;
        lhs(20,10)=-clhs223*scale_factor;
        lhs(20,11)=-clhs247*scale_factor;
        lhs(20,12)=-clhs271*scale_factor;
        lhs(20,13)=-clhs295*scale_factor;
        lhs(20,14)=-clhs319*scale_factor;
        lhs(20,15)=-clhs343*scale_factor;
        lhs(20,16)=-clhs367*scale_factor;
        lhs(20,17)=-clhs391*scale_factor;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=0;
    }


    return lhs;
}

/***********************************************************************************/
/***********************************************************************************/

template<>
template<>
bounded_matrix<double, 28, 28> AugmentedLagrangianMethodFrictionlessMortarContactCondition<3,4>::CalculateLocalLHS<28>(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    bounded_matrix<double,28,28> lhs;
    
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 4, 3> u1 = GetVariableMatrix(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 4, 3> u2 = GetVariableMatrix(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 4, 3> X1 = GetCoordinates(this->GetGeometry(), false);
    const bounded_matrix<double, 4, 3> X2 = GetCoordinates(CurrentMasterElement, false);
    
    const array_1d<double, 4> lmnormal = GetVariableVector(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 4, 3> normalslave = GetVariableMatrix(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 4, 4> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 4, 4> DOperator = rMortarConditionMatrices.DOperator;
    // Mortar operators derivatives
    const array_1d<bounded_matrix<double, 4, 4>, 24> DeltaMOperator = rMortarConditionMatrices.DeltaMOperator;
    const array_1d<bounded_matrix<double, 4, 4>, 24> DeltaDOperator = rMortarConditionMatrices.DeltaDOperator;

    if (rActiveInactive == 0 )
    {
        const double clhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=0;
        lhs(0,1)=0;
        lhs(0,2)=0;
        lhs(0,3)=0;
        lhs(0,4)=0;
        lhs(0,5)=0;
        lhs(0,6)=0;
        lhs(0,7)=0;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(0,12)=0;
        lhs(0,13)=0;
        lhs(0,14)=0;
        lhs(0,15)=0;
        lhs(0,16)=0;
        lhs(0,17)=0;
        lhs(0,18)=0;
        lhs(0,19)=0;
        lhs(0,20)=0;
        lhs(0,21)=0;
        lhs(0,22)=0;
        lhs(0,23)=0;
        lhs(0,24)=0;
        lhs(0,25)=0;
        lhs(0,26)=0;
        lhs(0,27)=0;
        lhs(1,0)=0;
        lhs(1,1)=0;
        lhs(1,2)=0;
        lhs(1,3)=0;
        lhs(1,4)=0;
        lhs(1,5)=0;
        lhs(1,6)=0;
        lhs(1,7)=0;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(1,12)=0;
        lhs(1,13)=0;
        lhs(1,14)=0;
        lhs(1,15)=0;
        lhs(1,16)=0;
        lhs(1,17)=0;
        lhs(1,18)=0;
        lhs(1,19)=0;
        lhs(1,20)=0;
        lhs(1,21)=0;
        lhs(1,22)=0;
        lhs(1,23)=0;
        lhs(1,24)=0;
        lhs(1,25)=0;
        lhs(1,26)=0;
        lhs(1,27)=0;
        lhs(2,0)=0;
        lhs(2,1)=0;
        lhs(2,2)=0;
        lhs(2,3)=0;
        lhs(2,4)=0;
        lhs(2,5)=0;
        lhs(2,6)=0;
        lhs(2,7)=0;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(2,12)=0;
        lhs(2,13)=0;
        lhs(2,14)=0;
        lhs(2,15)=0;
        lhs(2,16)=0;
        lhs(2,17)=0;
        lhs(2,18)=0;
        lhs(2,19)=0;
        lhs(2,20)=0;
        lhs(2,21)=0;
        lhs(2,22)=0;
        lhs(2,23)=0;
        lhs(2,24)=0;
        lhs(2,25)=0;
        lhs(2,26)=0;
        lhs(2,27)=0;
        lhs(3,0)=0;
        lhs(3,1)=0;
        lhs(3,2)=0;
        lhs(3,3)=0;
        lhs(3,4)=0;
        lhs(3,5)=0;
        lhs(3,6)=0;
        lhs(3,7)=0;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(3,12)=0;
        lhs(3,13)=0;
        lhs(3,14)=0;
        lhs(3,15)=0;
        lhs(3,16)=0;
        lhs(3,17)=0;
        lhs(3,18)=0;
        lhs(3,19)=0;
        lhs(3,20)=0;
        lhs(3,21)=0;
        lhs(3,22)=0;
        lhs(3,23)=0;
        lhs(3,24)=0;
        lhs(3,25)=0;
        lhs(3,26)=0;
        lhs(3,27)=0;
        lhs(4,0)=0;
        lhs(4,1)=0;
        lhs(4,2)=0;
        lhs(4,3)=0;
        lhs(4,4)=0;
        lhs(4,5)=0;
        lhs(4,6)=0;
        lhs(4,7)=0;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(4,12)=0;
        lhs(4,13)=0;
        lhs(4,14)=0;
        lhs(4,15)=0;
        lhs(4,16)=0;
        lhs(4,17)=0;
        lhs(4,18)=0;
        lhs(4,19)=0;
        lhs(4,20)=0;
        lhs(4,21)=0;
        lhs(4,22)=0;
        lhs(4,23)=0;
        lhs(4,24)=0;
        lhs(4,25)=0;
        lhs(4,26)=0;
        lhs(4,27)=0;
        lhs(5,0)=0;
        lhs(5,1)=0;
        lhs(5,2)=0;
        lhs(5,3)=0;
        lhs(5,4)=0;
        lhs(5,5)=0;
        lhs(5,6)=0;
        lhs(5,7)=0;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(5,12)=0;
        lhs(5,13)=0;
        lhs(5,14)=0;
        lhs(5,15)=0;
        lhs(5,16)=0;
        lhs(5,17)=0;
        lhs(5,18)=0;
        lhs(5,19)=0;
        lhs(5,20)=0;
        lhs(5,21)=0;
        lhs(5,22)=0;
        lhs(5,23)=0;
        lhs(5,24)=0;
        lhs(5,25)=0;
        lhs(5,26)=0;
        lhs(5,27)=0;
        lhs(6,0)=0;
        lhs(6,1)=0;
        lhs(6,2)=0;
        lhs(6,3)=0;
        lhs(6,4)=0;
        lhs(6,5)=0;
        lhs(6,6)=0;
        lhs(6,7)=0;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(6,12)=0;
        lhs(6,13)=0;
        lhs(6,14)=0;
        lhs(6,15)=0;
        lhs(6,16)=0;
        lhs(6,17)=0;
        lhs(6,18)=0;
        lhs(6,19)=0;
        lhs(6,20)=0;
        lhs(6,21)=0;
        lhs(6,22)=0;
        lhs(6,23)=0;
        lhs(6,24)=0;
        lhs(6,25)=0;
        lhs(6,26)=0;
        lhs(6,27)=0;
        lhs(7,0)=0;
        lhs(7,1)=0;
        lhs(7,2)=0;
        lhs(7,3)=0;
        lhs(7,4)=0;
        lhs(7,5)=0;
        lhs(7,6)=0;
        lhs(7,7)=0;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(7,12)=0;
        lhs(7,13)=0;
        lhs(7,14)=0;
        lhs(7,15)=0;
        lhs(7,16)=0;
        lhs(7,17)=0;
        lhs(7,18)=0;
        lhs(7,19)=0;
        lhs(7,20)=0;
        lhs(7,21)=0;
        lhs(7,22)=0;
        lhs(7,23)=0;
        lhs(7,24)=0;
        lhs(7,25)=0;
        lhs(7,26)=0;
        lhs(7,27)=0;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(8,12)=0;
        lhs(8,13)=0;
        lhs(8,14)=0;
        lhs(8,15)=0;
        lhs(8,16)=0;
        lhs(8,17)=0;
        lhs(8,18)=0;
        lhs(8,19)=0;
        lhs(8,20)=0;
        lhs(8,21)=0;
        lhs(8,22)=0;
        lhs(8,23)=0;
        lhs(8,24)=0;
        lhs(8,25)=0;
        lhs(8,26)=0;
        lhs(8,27)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(9,12)=0;
        lhs(9,13)=0;
        lhs(9,14)=0;
        lhs(9,15)=0;
        lhs(9,16)=0;
        lhs(9,17)=0;
        lhs(9,18)=0;
        lhs(9,19)=0;
        lhs(9,20)=0;
        lhs(9,21)=0;
        lhs(9,22)=0;
        lhs(9,23)=0;
        lhs(9,24)=0;
        lhs(9,25)=0;
        lhs(9,26)=0;
        lhs(9,27)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(10,12)=0;
        lhs(10,13)=0;
        lhs(10,14)=0;
        lhs(10,15)=0;
        lhs(10,16)=0;
        lhs(10,17)=0;
        lhs(10,18)=0;
        lhs(10,19)=0;
        lhs(10,20)=0;
        lhs(10,21)=0;
        lhs(10,22)=0;
        lhs(10,23)=0;
        lhs(10,24)=0;
        lhs(10,25)=0;
        lhs(10,26)=0;
        lhs(10,27)=0;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
        lhs(11,12)=0;
        lhs(11,13)=0;
        lhs(11,14)=0;
        lhs(11,15)=0;
        lhs(11,16)=0;
        lhs(11,17)=0;
        lhs(11,18)=0;
        lhs(11,19)=0;
        lhs(11,20)=0;
        lhs(11,21)=0;
        lhs(11,22)=0;
        lhs(11,23)=0;
        lhs(11,24)=0;
        lhs(11,25)=0;
        lhs(11,26)=0;
        lhs(11,27)=0;
        lhs(12,0)=0;
        lhs(12,1)=0;
        lhs(12,2)=0;
        lhs(12,3)=0;
        lhs(12,4)=0;
        lhs(12,5)=0;
        lhs(12,6)=0;
        lhs(12,7)=0;
        lhs(12,8)=0;
        lhs(12,9)=0;
        lhs(12,10)=0;
        lhs(12,11)=0;
        lhs(12,12)=0;
        lhs(12,13)=0;
        lhs(12,14)=0;
        lhs(12,15)=0;
        lhs(12,16)=0;
        lhs(12,17)=0;
        lhs(12,18)=0;
        lhs(12,19)=0;
        lhs(12,20)=0;
        lhs(12,21)=0;
        lhs(12,22)=0;
        lhs(12,23)=0;
        lhs(12,24)=0;
        lhs(12,25)=0;
        lhs(12,26)=0;
        lhs(12,27)=0;
        lhs(13,0)=0;
        lhs(13,1)=0;
        lhs(13,2)=0;
        lhs(13,3)=0;
        lhs(13,4)=0;
        lhs(13,5)=0;
        lhs(13,6)=0;
        lhs(13,7)=0;
        lhs(13,8)=0;
        lhs(13,9)=0;
        lhs(13,10)=0;
        lhs(13,11)=0;
        lhs(13,12)=0;
        lhs(13,13)=0;
        lhs(13,14)=0;
        lhs(13,15)=0;
        lhs(13,16)=0;
        lhs(13,17)=0;
        lhs(13,18)=0;
        lhs(13,19)=0;
        lhs(13,20)=0;
        lhs(13,21)=0;
        lhs(13,22)=0;
        lhs(13,23)=0;
        lhs(13,24)=0;
        lhs(13,25)=0;
        lhs(13,26)=0;
        lhs(13,27)=0;
        lhs(14,0)=0;
        lhs(14,1)=0;
        lhs(14,2)=0;
        lhs(14,3)=0;
        lhs(14,4)=0;
        lhs(14,5)=0;
        lhs(14,6)=0;
        lhs(14,7)=0;
        lhs(14,8)=0;
        lhs(14,9)=0;
        lhs(14,10)=0;
        lhs(14,11)=0;
        lhs(14,12)=0;
        lhs(14,13)=0;
        lhs(14,14)=0;
        lhs(14,15)=0;
        lhs(14,16)=0;
        lhs(14,17)=0;
        lhs(14,18)=0;
        lhs(14,19)=0;
        lhs(14,20)=0;
        lhs(14,21)=0;
        lhs(14,22)=0;
        lhs(14,23)=0;
        lhs(14,24)=0;
        lhs(14,25)=0;
        lhs(14,26)=0;
        lhs(14,27)=0;
        lhs(15,0)=0;
        lhs(15,1)=0;
        lhs(15,2)=0;
        lhs(15,3)=0;
        lhs(15,4)=0;
        lhs(15,5)=0;
        lhs(15,6)=0;
        lhs(15,7)=0;
        lhs(15,8)=0;
        lhs(15,9)=0;
        lhs(15,10)=0;
        lhs(15,11)=0;
        lhs(15,12)=0;
        lhs(15,13)=0;
        lhs(15,14)=0;
        lhs(15,15)=0;
        lhs(15,16)=0;
        lhs(15,17)=0;
        lhs(15,18)=0;
        lhs(15,19)=0;
        lhs(15,20)=0;
        lhs(15,21)=0;
        lhs(15,22)=0;
        lhs(15,23)=0;
        lhs(15,24)=0;
        lhs(15,25)=0;
        lhs(15,26)=0;
        lhs(15,27)=0;
        lhs(16,0)=0;
        lhs(16,1)=0;
        lhs(16,2)=0;
        lhs(16,3)=0;
        lhs(16,4)=0;
        lhs(16,5)=0;
        lhs(16,6)=0;
        lhs(16,7)=0;
        lhs(16,8)=0;
        lhs(16,9)=0;
        lhs(16,10)=0;
        lhs(16,11)=0;
        lhs(16,12)=0;
        lhs(16,13)=0;
        lhs(16,14)=0;
        lhs(16,15)=0;
        lhs(16,16)=0;
        lhs(16,17)=0;
        lhs(16,18)=0;
        lhs(16,19)=0;
        lhs(16,20)=0;
        lhs(16,21)=0;
        lhs(16,22)=0;
        lhs(16,23)=0;
        lhs(16,24)=0;
        lhs(16,25)=0;
        lhs(16,26)=0;
        lhs(16,27)=0;
        lhs(17,0)=0;
        lhs(17,1)=0;
        lhs(17,2)=0;
        lhs(17,3)=0;
        lhs(17,4)=0;
        lhs(17,5)=0;
        lhs(17,6)=0;
        lhs(17,7)=0;
        lhs(17,8)=0;
        lhs(17,9)=0;
        lhs(17,10)=0;
        lhs(17,11)=0;
        lhs(17,12)=0;
        lhs(17,13)=0;
        lhs(17,14)=0;
        lhs(17,15)=0;
        lhs(17,16)=0;
        lhs(17,17)=0;
        lhs(17,18)=0;
        lhs(17,19)=0;
        lhs(17,20)=0;
        lhs(17,21)=0;
        lhs(17,22)=0;
        lhs(17,23)=0;
        lhs(17,24)=0;
        lhs(17,25)=0;
        lhs(17,26)=0;
        lhs(17,27)=0;
        lhs(18,0)=0;
        lhs(18,1)=0;
        lhs(18,2)=0;
        lhs(18,3)=0;
        lhs(18,4)=0;
        lhs(18,5)=0;
        lhs(18,6)=0;
        lhs(18,7)=0;
        lhs(18,8)=0;
        lhs(18,9)=0;
        lhs(18,10)=0;
        lhs(18,11)=0;
        lhs(18,12)=0;
        lhs(18,13)=0;
        lhs(18,14)=0;
        lhs(18,15)=0;
        lhs(18,16)=0;
        lhs(18,17)=0;
        lhs(18,18)=0;
        lhs(18,19)=0;
        lhs(18,20)=0;
        lhs(18,21)=0;
        lhs(18,22)=0;
        lhs(18,23)=0;
        lhs(18,24)=0;
        lhs(18,25)=0;
        lhs(18,26)=0;
        lhs(18,27)=0;
        lhs(19,0)=0;
        lhs(19,1)=0;
        lhs(19,2)=0;
        lhs(19,3)=0;
        lhs(19,4)=0;
        lhs(19,5)=0;
        lhs(19,6)=0;
        lhs(19,7)=0;
        lhs(19,8)=0;
        lhs(19,9)=0;
        lhs(19,10)=0;
        lhs(19,11)=0;
        lhs(19,12)=0;
        lhs(19,13)=0;
        lhs(19,14)=0;
        lhs(19,15)=0;
        lhs(19,16)=0;
        lhs(19,17)=0;
        lhs(19,18)=0;
        lhs(19,19)=0;
        lhs(19,20)=0;
        lhs(19,21)=0;
        lhs(19,22)=0;
        lhs(19,23)=0;
        lhs(19,24)=0;
        lhs(19,25)=0;
        lhs(19,26)=0;
        lhs(19,27)=0;
        lhs(20,0)=0;
        lhs(20,1)=0;
        lhs(20,2)=0;
        lhs(20,3)=0;
        lhs(20,4)=0;
        lhs(20,5)=0;
        lhs(20,6)=0;
        lhs(20,7)=0;
        lhs(20,8)=0;
        lhs(20,9)=0;
        lhs(20,10)=0;
        lhs(20,11)=0;
        lhs(20,12)=0;
        lhs(20,13)=0;
        lhs(20,14)=0;
        lhs(20,15)=0;
        lhs(20,16)=0;
        lhs(20,17)=0;
        lhs(20,18)=0;
        lhs(20,19)=0;
        lhs(20,20)=0;
        lhs(20,21)=0;
        lhs(20,22)=0;
        lhs(20,23)=0;
        lhs(20,24)=0;
        lhs(20,25)=0;
        lhs(20,26)=0;
        lhs(20,27)=0;
        lhs(21,0)=0;
        lhs(21,1)=0;
        lhs(21,2)=0;
        lhs(21,3)=0;
        lhs(21,4)=0;
        lhs(21,5)=0;
        lhs(21,6)=0;
        lhs(21,7)=0;
        lhs(21,8)=0;
        lhs(21,9)=0;
        lhs(21,10)=0;
        lhs(21,11)=0;
        lhs(21,12)=0;
        lhs(21,13)=0;
        lhs(21,14)=0;
        lhs(21,15)=0;
        lhs(21,16)=0;
        lhs(21,17)=0;
        lhs(21,18)=0;
        lhs(21,19)=0;
        lhs(21,20)=0;
        lhs(21,21)=0;
        lhs(21,22)=0;
        lhs(21,23)=0;
        lhs(21,24)=0;
        lhs(21,25)=0;
        lhs(21,26)=0;
        lhs(21,27)=0;
        lhs(22,0)=0;
        lhs(22,1)=0;
        lhs(22,2)=0;
        lhs(22,3)=0;
        lhs(22,4)=0;
        lhs(22,5)=0;
        lhs(22,6)=0;
        lhs(22,7)=0;
        lhs(22,8)=0;
        lhs(22,9)=0;
        lhs(22,10)=0;
        lhs(22,11)=0;
        lhs(22,12)=0;
        lhs(22,13)=0;
        lhs(22,14)=0;
        lhs(22,15)=0;
        lhs(22,16)=0;
        lhs(22,17)=0;
        lhs(22,18)=0;
        lhs(22,19)=0;
        lhs(22,20)=0;
        lhs(22,21)=0;
        lhs(22,22)=0;
        lhs(22,23)=0;
        lhs(22,24)=0;
        lhs(22,25)=0;
        lhs(22,26)=0;
        lhs(22,27)=0;
        lhs(23,0)=0;
        lhs(23,1)=0;
        lhs(23,2)=0;
        lhs(23,3)=0;
        lhs(23,4)=0;
        lhs(23,5)=0;
        lhs(23,6)=0;
        lhs(23,7)=0;
        lhs(23,8)=0;
        lhs(23,9)=0;
        lhs(23,10)=0;
        lhs(23,11)=0;
        lhs(23,12)=0;
        lhs(23,13)=0;
        lhs(23,14)=0;
        lhs(23,15)=0;
        lhs(23,16)=0;
        lhs(23,17)=0;
        lhs(23,18)=0;
        lhs(23,19)=0;
        lhs(23,20)=0;
        lhs(23,21)=0;
        lhs(23,22)=0;
        lhs(23,23)=0;
        lhs(23,24)=0;
        lhs(23,25)=0;
        lhs(23,26)=0;
        lhs(23,27)=0;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs0;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs0;
    }
    else if (rActiveInactive == 8 )
    {
        const double clhs0 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(3,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(3,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(3,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*penalty_parameter;
        const double clhs22 =     X1(0,0) + u1(0,0);
        const double clhs23 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs24 =     X1(1,0) + u1(1,0);
        const double clhs25 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs26 =     X1(2,0) + u1(2,0);
        const double clhs27 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs28 =     X1(3,0) + u1(3,0);
        const double clhs29 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs30 =     X1(0,1) + u1(0,1);
        const double clhs31 =     X1(1,1) + u1(1,1);
        const double clhs32 =     X1(2,1) + u1(2,1);
        const double clhs33 =     X1(3,1) + u1(3,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     X1(3,2) + u1(3,2);
        const double clhs38 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs22*clhs23 + clhs24*clhs25 + clhs26*clhs27 + clhs28*clhs29) + normalslave(3,1)*(-clhs0*clhs1 - clhs10*clhs9 + clhs23*clhs30 + clhs25*clhs31 + clhs27*clhs32 + clhs29*clhs33 - clhs3*clhs4 - clhs6*clhs7) + normalslave(3,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs23*clhs34 + clhs25*clhs35 + clhs27*clhs36 + clhs29*clhs37));
        const double clhs39 =     -clhs0*clhs21 + clhs2*clhs38;
        const double clhs40 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs41 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs42 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs43 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs44 =     normalslave(3,0)*(clhs16*clhs40 + clhs17*clhs41 + clhs18*clhs42 + clhs19*clhs43) + normalslave(3,1)*(clhs0 + clhs1*clhs40 + clhs3*clhs41 + clhs42*clhs6 + clhs43*clhs9) + normalslave(3,2)*(clhs12*clhs40 + clhs13*clhs41 + clhs14*clhs42 + clhs15*clhs43);
        const double clhs45 =     clhs44*penalty_parameter;
        const double clhs46 =     -clhs0*clhs45 + clhs38*clhs40;
        const double clhs47 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs48 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs49 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs50 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs51 =     normalslave(3,0)*(clhs16*clhs47 + clhs17*clhs48 + clhs18*clhs49 + clhs19*clhs50) + normalslave(3,1)*(clhs1*clhs47 + clhs3*clhs48 + clhs49*clhs6 + clhs50*clhs9) + normalslave(3,2)*(clhs0 + clhs12*clhs47 + clhs13*clhs48 + clhs14*clhs49 + clhs15*clhs50);
        const double clhs52 =     clhs51*penalty_parameter;
        const double clhs53 =     -clhs0*clhs52 + clhs38*clhs47;
        const double clhs54 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs55 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs56 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs57 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs58 =     normalslave(3,0)*(clhs16*clhs54 + clhs17*clhs55 + clhs18*clhs56 + clhs19*clhs57 + clhs4) + normalslave(3,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6 + clhs57*clhs9) + normalslave(3,2)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56 + clhs15*clhs57);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs38*clhs54;
        const double clhs61 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs62 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs63 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs64 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs65 =     normalslave(3,0)*(clhs16*clhs61 + clhs17*clhs62 + clhs18*clhs63 + clhs19*clhs64) + normalslave(3,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs4 + clhs6*clhs63 + clhs64*clhs9) + normalslave(3,2)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs15*clhs64);
        const double clhs66 =     clhs65*penalty_parameter;
        const double clhs67 =     -clhs0*clhs66 + clhs38*clhs61;
        const double clhs68 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs69 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs70 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs71 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs72 =     normalslave(3,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(3,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(3,2)*(clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71 + clhs4);
        const double clhs73 =     clhs72*penalty_parameter;
        const double clhs74 =     -clhs0*clhs73 + clhs38*clhs68;
        const double clhs75 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs76 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs77 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs78 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs79 =     normalslave(3,0)*(clhs16*clhs75 + clhs17*clhs76 + clhs18*clhs77 + clhs19*clhs78 + clhs7) + normalslave(3,1)*(clhs1*clhs75 + clhs3*clhs76 + clhs6*clhs77 + clhs78*clhs9) + normalslave(3,2)*(clhs12*clhs75 + clhs13*clhs76 + clhs14*clhs77 + clhs15*clhs78);
        const double clhs80 =     clhs79*penalty_parameter;
        const double clhs81 =     -clhs0*clhs80 + clhs38*clhs75;
        const double clhs82 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs83 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs84 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs85 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs86 =     normalslave(3,0)*(clhs16*clhs82 + clhs17*clhs83 + clhs18*clhs84 + clhs19*clhs85) + normalslave(3,1)*(clhs1*clhs82 + clhs3*clhs83 + clhs6*clhs84 + clhs7 + clhs85*clhs9) + normalslave(3,2)*(clhs12*clhs82 + clhs13*clhs83 + clhs14*clhs84 + clhs15*clhs85);
        const double clhs87 =     clhs86*penalty_parameter;
        const double clhs88 =     -clhs0*clhs87 + clhs38*clhs82;
        const double clhs89 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs90 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs91 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs92 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs93 =     normalslave(3,0)*(clhs16*clhs89 + clhs17*clhs90 + clhs18*clhs91 + clhs19*clhs92) + normalslave(3,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91 + clhs9*clhs92) + normalslave(3,2)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91 + clhs15*clhs92 + clhs7);
        const double clhs94 =     clhs93*penalty_parameter;
        const double clhs95 =     -clhs0*clhs94 + clhs38*clhs89;
        const double clhs96 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs97 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs98 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs99 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs100 =     normalslave(3,0)*(clhs10 + clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(3,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(3,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99);
        const double clhs101 =     clhs100*penalty_parameter;
        const double clhs102 =     -clhs0*clhs101 + clhs38*clhs96;
        const double clhs103 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs104 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs105 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs106 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs107 =     normalslave(3,0)*(clhs103*clhs16 + clhs104*clhs17 + clhs105*clhs18 + clhs106*clhs19) + normalslave(3,1)*(clhs1*clhs103 + clhs10 + clhs104*clhs3 + clhs105*clhs6 + clhs106*clhs9) + normalslave(3,2)*(clhs103*clhs12 + clhs104*clhs13 + clhs105*clhs14 + clhs106*clhs15);
        const double clhs108 =     clhs107*penalty_parameter;
        const double clhs109 =     -clhs0*clhs108 + clhs103*clhs38;
        const double clhs110 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs111 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs112 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs113 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs114 =     normalslave(3,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(3,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(3,2)*(clhs10 + clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15);
        const double clhs115 =     clhs114*penalty_parameter;
        const double clhs116 =     -clhs0*clhs115 + clhs110*clhs38;
        const double clhs117 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs118 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs119 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs120 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs121 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs122 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs123 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs124 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs125 =     normalslave(3,0)*(-clhs117*clhs16 + clhs118*clhs22 + clhs119*clhs24 + clhs120*clhs26 + clhs121*clhs28 - clhs122*clhs17 - clhs123*clhs18 - clhs124*clhs19 + clhs23) + normalslave(3,1)*(-clhs1*clhs117 + clhs118*clhs30 + clhs119*clhs31 + clhs120*clhs32 + clhs121*clhs33 - clhs122*clhs3 - clhs123*clhs6 - clhs124*clhs9) + normalslave(3,2)*(-clhs117*clhs12 + clhs118*clhs34 + clhs119*clhs35 + clhs120*clhs36 + clhs121*clhs37 - clhs122*clhs13 - clhs123*clhs14 - clhs124*clhs15);
        const double clhs126 =     clhs125*penalty_parameter;
        const double clhs127 =     clhs0*clhs126 + clhs117*clhs38;
        const double clhs128 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs129 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs130 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs131 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs132 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs133 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs134 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs135 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs136 =     normalslave(3,0)*(-clhs128*clhs16 + clhs129*clhs22 + clhs130*clhs24 + clhs131*clhs26 + clhs132*clhs28 - clhs133*clhs17 - clhs134*clhs18 - clhs135*clhs19) + normalslave(3,1)*(-clhs1*clhs128 + clhs129*clhs30 + clhs130*clhs31 + clhs131*clhs32 + clhs132*clhs33 - clhs133*clhs3 - clhs134*clhs6 - clhs135*clhs9 + clhs23) + normalslave(3,2)*(-clhs12*clhs128 + clhs129*clhs34 - clhs13*clhs133 + clhs130*clhs35 + clhs131*clhs36 + clhs132*clhs37 - clhs134*clhs14 - clhs135*clhs15);
        const double clhs137 =     clhs136*penalty_parameter;
        const double clhs138 =     clhs0*clhs137 + clhs128*clhs38;
        const double clhs139 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs140 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs141 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs142 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs143 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs144 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs145 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs146 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs147 =     normalslave(3,0)*(-clhs139*clhs16 + clhs140*clhs22 + clhs141*clhs24 + clhs142*clhs26 + clhs143*clhs28 - clhs144*clhs17 - clhs145*clhs18 - clhs146*clhs19) + normalslave(3,1)*(-clhs1*clhs139 + clhs140*clhs30 + clhs141*clhs31 + clhs142*clhs32 + clhs143*clhs33 - clhs144*clhs3 - clhs145*clhs6 - clhs146*clhs9) + normalslave(3,2)*(-clhs12*clhs139 - clhs13*clhs144 - clhs14*clhs145 + clhs140*clhs34 + clhs141*clhs35 + clhs142*clhs36 + clhs143*clhs37 - clhs146*clhs15 + clhs23);
        const double clhs148 =     clhs147*penalty_parameter;
        const double clhs149 =     clhs0*clhs148 + clhs139*clhs38;
        const double clhs150 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs151 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs152 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs153 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs154 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs155 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs156 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs157 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs158 =     normalslave(3,0)*(-clhs150*clhs16 + clhs151*clhs22 + clhs152*clhs24 + clhs153*clhs26 + clhs154*clhs28 - clhs155*clhs17 - clhs156*clhs18 - clhs157*clhs19 + clhs25) + normalslave(3,1)*(-clhs1*clhs150 + clhs151*clhs30 + clhs152*clhs31 + clhs153*clhs32 + clhs154*clhs33 - clhs155*clhs3 - clhs156*clhs6 - clhs157*clhs9) + normalslave(3,2)*(-clhs12*clhs150 - clhs13*clhs155 - clhs14*clhs156 - clhs15*clhs157 + clhs151*clhs34 + clhs152*clhs35 + clhs153*clhs36 + clhs154*clhs37);
        const double clhs159 =     clhs158*penalty_parameter;
        const double clhs160 =     clhs0*clhs159 + clhs150*clhs38;
        const double clhs161 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs162 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs163 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs164 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs165 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs166 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs167 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs168 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs169 =     normalslave(3,0)*(-clhs16*clhs161 + clhs162*clhs22 + clhs163*clhs24 + clhs164*clhs26 + clhs165*clhs28 - clhs166*clhs17 - clhs167*clhs18 - clhs168*clhs19) + normalslave(3,1)*(-clhs1*clhs161 + clhs162*clhs30 + clhs163*clhs31 + clhs164*clhs32 + clhs165*clhs33 - clhs166*clhs3 - clhs167*clhs6 - clhs168*clhs9 + clhs25) + normalslave(3,2)*(-clhs12*clhs161 - clhs13*clhs166 - clhs14*clhs167 - clhs15*clhs168 + clhs162*clhs34 + clhs163*clhs35 + clhs164*clhs36 + clhs165*clhs37);
        const double clhs170 =     clhs169*penalty_parameter;
        const double clhs171 =     clhs0*clhs170 + clhs161*clhs38;
        const double clhs172 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs173 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs174 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs175 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs176 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs177 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs178 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs179 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs180 =     normalslave(3,0)*(-clhs16*clhs172 - clhs17*clhs177 + clhs173*clhs22 + clhs174*clhs24 + clhs175*clhs26 + clhs176*clhs28 - clhs178*clhs18 - clhs179*clhs19) + normalslave(3,1)*(-clhs1*clhs172 + clhs173*clhs30 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6 - clhs179*clhs9) + normalslave(3,2)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 - clhs15*clhs179 + clhs173*clhs34 + clhs174*clhs35 + clhs175*clhs36 + clhs176*clhs37 + clhs25);
        const double clhs181 =     clhs180*penalty_parameter;
        const double clhs182 =     clhs0*clhs181 + clhs172*clhs38;
        const double clhs183 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs184 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs185 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs186 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs187 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs188 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs189 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs190 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs191 =     normalslave(3,0)*(-clhs16*clhs183 - clhs17*clhs188 - clhs18*clhs189 + clhs184*clhs22 + clhs185*clhs24 + clhs186*clhs26 + clhs187*clhs28 - clhs19*clhs190 + clhs27) + normalslave(3,1)*(-clhs1*clhs183 + clhs184*clhs30 + clhs185*clhs31 + clhs186*clhs32 + clhs187*clhs33 - clhs188*clhs3 - clhs189*clhs6 - clhs190*clhs9) + normalslave(3,2)*(-clhs12*clhs183 - clhs13*clhs188 - clhs14*clhs189 - clhs15*clhs190 + clhs184*clhs34 + clhs185*clhs35 + clhs186*clhs36 + clhs187*clhs37);
        const double clhs192 =     clhs191*penalty_parameter;
        const double clhs193 =     clhs0*clhs192 + clhs183*clhs38;
        const double clhs194 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs195 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs196 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs197 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs198 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs199 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs200 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs201 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs202 =     normalslave(3,0)*(-clhs16*clhs194 - clhs17*clhs199 - clhs18*clhs200 - clhs19*clhs201 + clhs195*clhs22 + clhs196*clhs24 + clhs197*clhs26 + clhs198*clhs28) + normalslave(3,1)*(-clhs1*clhs194 + clhs195*clhs30 + clhs196*clhs31 + clhs197*clhs32 + clhs198*clhs33 - clhs199*clhs3 - clhs200*clhs6 - clhs201*clhs9 + clhs27) + normalslave(3,2)*(-clhs12*clhs194 - clhs13*clhs199 - clhs14*clhs200 - clhs15*clhs201 + clhs195*clhs34 + clhs196*clhs35 + clhs197*clhs36 + clhs198*clhs37);
        const double clhs203 =     clhs202*penalty_parameter;
        const double clhs204 =     clhs0*clhs203 + clhs194*clhs38;
        const double clhs205 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs206 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs207 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs208 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs209 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs210 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs211 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs212 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs213 =     normalslave(3,0)*(-clhs16*clhs205 - clhs17*clhs210 - clhs18*clhs211 - clhs19*clhs212 + clhs206*clhs22 + clhs207*clhs24 + clhs208*clhs26 + clhs209*clhs28) + normalslave(3,1)*(-clhs1*clhs205 + clhs206*clhs30 + clhs207*clhs31 + clhs208*clhs32 + clhs209*clhs33 - clhs210*clhs3 - clhs211*clhs6 - clhs212*clhs9) + normalslave(3,2)*(-clhs12*clhs205 - clhs13*clhs210 - clhs14*clhs211 - clhs15*clhs212 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs209*clhs37 + clhs27);
        const double clhs214 =     clhs213*penalty_parameter;
        const double clhs215 =     clhs0*clhs214 + clhs205*clhs38;
        const double clhs216 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs217 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs218 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs219 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs220 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs221 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs222 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs223 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs224 =     normalslave(3,0)*(-clhs16*clhs216 - clhs17*clhs221 - clhs18*clhs222 - clhs19*clhs223 + clhs217*clhs22 + clhs218*clhs24 + clhs219*clhs26 + clhs220*clhs28 + clhs29) + normalslave(3,1)*(-clhs1*clhs216 + clhs217*clhs30 + clhs218*clhs31 + clhs219*clhs32 + clhs220*clhs33 - clhs221*clhs3 - clhs222*clhs6 - clhs223*clhs9) + normalslave(3,2)*(-clhs12*clhs216 - clhs13*clhs221 - clhs14*clhs222 - clhs15*clhs223 + clhs217*clhs34 + clhs218*clhs35 + clhs219*clhs36 + clhs220*clhs37);
        const double clhs225 =     clhs224*penalty_parameter;
        const double clhs226 =     clhs0*clhs225 + clhs216*clhs38;
        const double clhs227 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs228 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs229 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs230 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs231 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs232 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs233 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs234 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs235 =     normalslave(3,0)*(-clhs16*clhs227 - clhs17*clhs232 - clhs18*clhs233 - clhs19*clhs234 + clhs22*clhs228 + clhs229*clhs24 + clhs230*clhs26 + clhs231*clhs28) + normalslave(3,1)*(-clhs1*clhs227 + clhs228*clhs30 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6 - clhs234*clhs9 + clhs29) + normalslave(3,2)*(-clhs12*clhs227 - clhs13*clhs232 - clhs14*clhs233 - clhs15*clhs234 + clhs228*clhs34 + clhs229*clhs35 + clhs230*clhs36 + clhs231*clhs37);
        const double clhs236 =     clhs235*penalty_parameter;
        const double clhs237 =     clhs0*clhs236 + clhs227*clhs38;
        const double clhs238 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs239 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs240 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs241 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs242 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs243 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs244 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs245 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs246 =     normalslave(3,0)*(-clhs16*clhs238 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs22*clhs239 + clhs24*clhs240 + clhs241*clhs26 + clhs242*clhs28) + normalslave(3,1)*(-clhs1*clhs238 + clhs239*clhs30 + clhs240*clhs31 + clhs241*clhs32 + clhs242*clhs33 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(3,2)*(-clhs12*clhs238 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs34 + clhs240*clhs35 + clhs241*clhs36 + clhs242*clhs37 + clhs29);
        const double clhs247 =     clhs246*penalty_parameter;
        const double clhs248 =     clhs0*clhs247 + clhs238*clhs38;
        const double clhs249 =     normalslave(3,0)*scale_factor;
        const double clhs250 =     normalslave(3,1)*scale_factor;
        const double clhs251 =     normalslave(3,2)*scale_factor;
        const double clhs252 =     -clhs21*clhs4 + clhs38*clhs5;
        const double clhs253 =     clhs38*clhs41 - clhs4*clhs45;
        const double clhs254 =     clhs38*clhs48 - clhs4*clhs52;
        const double clhs255 =     clhs38*clhs55 - clhs4*clhs59;
        const double clhs256 =     clhs38*clhs62 - clhs4*clhs66;
        const double clhs257 =     clhs38*clhs69 - clhs4*clhs73;
        const double clhs258 =     clhs38*clhs76 - clhs4*clhs80;
        const double clhs259 =     clhs38*clhs83 - clhs4*clhs87;
        const double clhs260 =     clhs38*clhs90 - clhs4*clhs94;
        const double clhs261 =     -clhs101*clhs4 + clhs38*clhs97;
        const double clhs262 =     clhs104*clhs38 - clhs108*clhs4;
        const double clhs263 =     clhs111*clhs38 - clhs115*clhs4;
        const double clhs264 =     clhs122*clhs38 + clhs126*clhs4;
        const double clhs265 =     clhs133*clhs38 + clhs137*clhs4;
        const double clhs266 =     clhs144*clhs38 + clhs148*clhs4;
        const double clhs267 =     clhs155*clhs38 + clhs159*clhs4;
        const double clhs268 =     clhs166*clhs38 + clhs170*clhs4;
        const double clhs269 =     clhs177*clhs38 + clhs181*clhs4;
        const double clhs270 =     clhs188*clhs38 + clhs192*clhs4;
        const double clhs271 =     clhs199*clhs38 + clhs203*clhs4;
        const double clhs272 =     clhs210*clhs38 + clhs214*clhs4;
        const double clhs273 =     clhs221*clhs38 + clhs225*clhs4;
        const double clhs274 =     clhs232*clhs38 + clhs236*clhs4;
        const double clhs275 =     clhs243*clhs38 + clhs247*clhs4;
        const double clhs276 =     -clhs21*clhs7 + clhs38*clhs8;
        const double clhs277 =     clhs38*clhs42 - clhs45*clhs7;
        const double clhs278 =     clhs38*clhs49 - clhs52*clhs7;
        const double clhs279 =     clhs38*clhs56 - clhs59*clhs7;
        const double clhs280 =     clhs38*clhs63 - clhs66*clhs7;
        const double clhs281 =     clhs38*clhs70 - clhs7*clhs73;
        const double clhs282 =     clhs38*clhs77 - clhs7*clhs80;
        const double clhs283 =     clhs38*clhs84 - clhs7*clhs87;
        const double clhs284 =     clhs38*clhs91 - clhs7*clhs94;
        const double clhs285 =     -clhs101*clhs7 + clhs38*clhs98;
        const double clhs286 =     clhs105*clhs38 - clhs108*clhs7;
        const double clhs287 =     clhs112*clhs38 - clhs115*clhs7;
        const double clhs288 =     clhs123*clhs38 + clhs126*clhs7;
        const double clhs289 =     clhs134*clhs38 + clhs137*clhs7;
        const double clhs290 =     clhs145*clhs38 + clhs148*clhs7;
        const double clhs291 =     clhs156*clhs38 + clhs159*clhs7;
        const double clhs292 =     clhs167*clhs38 + clhs170*clhs7;
        const double clhs293 =     clhs178*clhs38 + clhs181*clhs7;
        const double clhs294 =     clhs189*clhs38 + clhs192*clhs7;
        const double clhs295 =     clhs200*clhs38 + clhs203*clhs7;
        const double clhs296 =     clhs211*clhs38 + clhs214*clhs7;
        const double clhs297 =     clhs222*clhs38 + clhs225*clhs7;
        const double clhs298 =     clhs233*clhs38 + clhs236*clhs7;
        const double clhs299 =     clhs244*clhs38 + clhs247*clhs7;
        const double clhs300 =     -clhs10*clhs21 + clhs11*clhs38;
        const double clhs301 =     -clhs10*clhs45 + clhs38*clhs43;
        const double clhs302 =     -clhs10*clhs52 + clhs38*clhs50;
        const double clhs303 =     -clhs10*clhs59 + clhs38*clhs57;
        const double clhs304 =     -clhs10*clhs66 + clhs38*clhs64;
        const double clhs305 =     -clhs10*clhs73 + clhs38*clhs71;
        const double clhs306 =     -clhs10*clhs80 + clhs38*clhs78;
        const double clhs307 =     -clhs10*clhs87 + clhs38*clhs85;
        const double clhs308 =     -clhs10*clhs94 + clhs38*clhs92;
        const double clhs309 =     -clhs10*clhs101 + clhs38*clhs99;
        const double clhs310 =     -clhs10*clhs108 + clhs106*clhs38;
        const double clhs311 =     -clhs10*clhs115 + clhs113*clhs38;
        const double clhs312 =     clhs10*clhs126 + clhs124*clhs38;
        const double clhs313 =     clhs10*clhs137 + clhs135*clhs38;
        const double clhs314 =     clhs10*clhs148 + clhs146*clhs38;
        const double clhs315 =     clhs10*clhs159 + clhs157*clhs38;
        const double clhs316 =     clhs10*clhs170 + clhs168*clhs38;
        const double clhs317 =     clhs10*clhs181 + clhs179*clhs38;
        const double clhs318 =     clhs10*clhs192 + clhs190*clhs38;
        const double clhs319 =     clhs10*clhs203 + clhs201*clhs38;
        const double clhs320 =     clhs10*clhs214 + clhs212*clhs38;
        const double clhs321 =     clhs10*clhs225 + clhs223*clhs38;
        const double clhs322 =     clhs10*clhs236 + clhs234*clhs38;
        const double clhs323 =     clhs10*clhs247 + clhs245*clhs38;
        const double clhs324 =     clhs20*normalslave(3,0)*penalty_parameter;
        const double clhs325 =     clhs44*normalslave(3,0)*penalty_parameter;
        const double clhs326 =     clhs51*normalslave(3,0)*penalty_parameter;
        const double clhs327 =     clhs58*normalslave(3,0)*penalty_parameter;
        const double clhs328 =     clhs65*normalslave(3,0)*penalty_parameter;
        const double clhs329 =     clhs72*normalslave(3,0)*penalty_parameter;
        const double clhs330 =     clhs79*normalslave(3,0)*penalty_parameter;
        const double clhs331 =     clhs86*normalslave(3,0)*penalty_parameter;
        const double clhs332 =     clhs93*normalslave(3,0)*penalty_parameter;
        const double clhs333 =     clhs100*normalslave(3,0)*penalty_parameter;
        const double clhs334 =     clhs107*normalslave(3,0)*penalty_parameter;
        const double clhs335 =     clhs114*normalslave(3,0)*penalty_parameter;
        const double clhs336 =     clhs118*clhs38 + clhs126*clhs23;
        const double clhs337 =     clhs129*clhs38 + clhs137*clhs23;
        const double clhs338 =     clhs140*clhs38 + clhs148*clhs23;
        const double clhs339 =     clhs151*clhs38 + clhs159*clhs23;
        const double clhs340 =     clhs162*clhs38 + clhs170*clhs23;
        const double clhs341 =     clhs173*clhs38 + clhs181*clhs23;
        const double clhs342 =     clhs184*clhs38 + clhs192*clhs23;
        const double clhs343 =     clhs195*clhs38 + clhs203*clhs23;
        const double clhs344 =     clhs206*clhs38 + clhs214*clhs23;
        const double clhs345 =     clhs217*clhs38 + clhs225*clhs23;
        const double clhs346 =     clhs228*clhs38 + clhs23*clhs236;
        const double clhs347 =     clhs23*clhs247 + clhs239*clhs38;
        const double clhs348 =     clhs20*normalslave(3,1)*penalty_parameter;
        const double clhs349 =     clhs44*normalslave(3,1)*penalty_parameter;
        const double clhs350 =     clhs51*normalslave(3,1)*penalty_parameter;
        const double clhs351 =     clhs58*normalslave(3,1)*penalty_parameter;
        const double clhs352 =     clhs65*normalslave(3,1)*penalty_parameter;
        const double clhs353 =     clhs72*normalslave(3,1)*penalty_parameter;
        const double clhs354 =     clhs79*normalslave(3,1)*penalty_parameter;
        const double clhs355 =     clhs86*normalslave(3,1)*penalty_parameter;
        const double clhs356 =     clhs93*normalslave(3,1)*penalty_parameter;
        const double clhs357 =     clhs100*normalslave(3,1)*penalty_parameter;
        const double clhs358 =     clhs107*normalslave(3,1)*penalty_parameter;
        const double clhs359 =     clhs114*normalslave(3,1)*penalty_parameter;
        const double clhs360 =     clhs20*normalslave(3,2)*penalty_parameter;
        const double clhs361 =     clhs44*normalslave(3,2)*penalty_parameter;
        const double clhs362 =     clhs51*normalslave(3,2)*penalty_parameter;
        const double clhs363 =     clhs58*normalslave(3,2)*penalty_parameter;
        const double clhs364 =     clhs65*normalslave(3,2)*penalty_parameter;
        const double clhs365 =     clhs72*normalslave(3,2)*penalty_parameter;
        const double clhs366 =     clhs79*normalslave(3,2)*penalty_parameter;
        const double clhs367 =     clhs86*normalslave(3,2)*penalty_parameter;
        const double clhs368 =     clhs93*normalslave(3,2)*penalty_parameter;
        const double clhs369 =     clhs100*normalslave(3,2)*penalty_parameter;
        const double clhs370 =     clhs107*normalslave(3,2)*penalty_parameter;
        const double clhs371 =     clhs114*normalslave(3,2)*penalty_parameter;
        const double clhs372 =     clhs119*clhs38 + clhs126*clhs25;
        const double clhs373 =     clhs130*clhs38 + clhs137*clhs25;
        const double clhs374 =     clhs141*clhs38 + clhs148*clhs25;
        const double clhs375 =     clhs152*clhs38 + clhs159*clhs25;
        const double clhs376 =     clhs163*clhs38 + clhs170*clhs25;
        const double clhs377 =     clhs174*clhs38 + clhs181*clhs25;
        const double clhs378 =     clhs185*clhs38 + clhs192*clhs25;
        const double clhs379 =     clhs196*clhs38 + clhs203*clhs25;
        const double clhs380 =     clhs207*clhs38 + clhs214*clhs25;
        const double clhs381 =     clhs218*clhs38 + clhs225*clhs25;
        const double clhs382 =     clhs229*clhs38 + clhs236*clhs25;
        const double clhs383 =     clhs240*clhs38 + clhs247*clhs25;
        const double clhs384 =     clhs120*clhs38 + clhs126*clhs27;
        const double clhs385 =     clhs131*clhs38 + clhs137*clhs27;
        const double clhs386 =     clhs142*clhs38 + clhs148*clhs27;
        const double clhs387 =     clhs153*clhs38 + clhs159*clhs27;
        const double clhs388 =     clhs164*clhs38 + clhs170*clhs27;
        const double clhs389 =     clhs175*clhs38 + clhs181*clhs27;
        const double clhs390 =     clhs186*clhs38 + clhs192*clhs27;
        const double clhs391 =     clhs197*clhs38 + clhs203*clhs27;
        const double clhs392 =     clhs208*clhs38 + clhs214*clhs27;
        const double clhs393 =     clhs219*clhs38 + clhs225*clhs27;
        const double clhs394 =     clhs230*clhs38 + clhs236*clhs27;
        const double clhs395 =     clhs241*clhs38 + clhs247*clhs27;
        const double clhs396 =     clhs121*clhs38 + clhs126*clhs29;
        const double clhs397 =     clhs132*clhs38 + clhs137*clhs29;
        const double clhs398 =     clhs143*clhs38 + clhs148*clhs29;
        const double clhs399 =     clhs154*clhs38 + clhs159*clhs29;
        const double clhs400 =     clhs165*clhs38 + clhs170*clhs29;
        const double clhs401 =     clhs176*clhs38 + clhs181*clhs29;
        const double clhs402 =     clhs187*clhs38 + clhs192*clhs29;
        const double clhs403 =     clhs198*clhs38 + clhs203*clhs29;
        const double clhs404 =     clhs209*clhs38 + clhs214*clhs29;
        const double clhs405 =     clhs220*clhs38 + clhs225*clhs29;
        const double clhs406 =     clhs231*clhs38 + clhs236*clhs29;
        const double clhs407 =     clhs242*clhs38 + clhs247*clhs29;
        const double clhs408 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs39*normalslave(3,0);
        lhs(0,1)=clhs46*normalslave(3,0);
        lhs(0,2)=clhs53*normalslave(3,0);
        lhs(0,3)=clhs60*normalslave(3,0);
        lhs(0,4)=clhs67*normalslave(3,0);
        lhs(0,5)=clhs74*normalslave(3,0);
        lhs(0,6)=clhs81*normalslave(3,0);
        lhs(0,7)=clhs88*normalslave(3,0);
        lhs(0,8)=clhs95*normalslave(3,0);
        lhs(0,9)=clhs102*normalslave(3,0);
        lhs(0,10)=clhs109*normalslave(3,0);
        lhs(0,11)=clhs116*normalslave(3,0);
        lhs(0,12)=clhs127*normalslave(3,0);
        lhs(0,13)=clhs138*normalslave(3,0);
        lhs(0,14)=clhs149*normalslave(3,0);
        lhs(0,15)=clhs160*normalslave(3,0);
        lhs(0,16)=clhs171*normalslave(3,0);
        lhs(0,17)=clhs182*normalslave(3,0);
        lhs(0,18)=clhs193*normalslave(3,0);
        lhs(0,19)=clhs204*normalslave(3,0);
        lhs(0,20)=clhs215*normalslave(3,0);
        lhs(0,21)=clhs226*normalslave(3,0);
        lhs(0,22)=clhs237*normalslave(3,0);
        lhs(0,23)=clhs248*normalslave(3,0);
        lhs(0,24)=0;
        lhs(0,25)=0;
        lhs(0,26)=0;
        lhs(0,27)=clhs0*clhs249;
        lhs(1,0)=clhs39*normalslave(3,1);
        lhs(1,1)=clhs46*normalslave(3,1);
        lhs(1,2)=clhs53*normalslave(3,1);
        lhs(1,3)=clhs60*normalslave(3,1);
        lhs(1,4)=clhs67*normalslave(3,1);
        lhs(1,5)=clhs74*normalslave(3,1);
        lhs(1,6)=clhs81*normalslave(3,1);
        lhs(1,7)=clhs88*normalslave(3,1);
        lhs(1,8)=clhs95*normalslave(3,1);
        lhs(1,9)=clhs102*normalslave(3,1);
        lhs(1,10)=clhs109*normalslave(3,1);
        lhs(1,11)=clhs116*normalslave(3,1);
        lhs(1,12)=clhs127*normalslave(3,1);
        lhs(1,13)=clhs138*normalslave(3,1);
        lhs(1,14)=clhs149*normalslave(3,1);
        lhs(1,15)=clhs160*normalslave(3,1);
        lhs(1,16)=clhs171*normalslave(3,1);
        lhs(1,17)=clhs182*normalslave(3,1);
        lhs(1,18)=clhs193*normalslave(3,1);
        lhs(1,19)=clhs204*normalslave(3,1);
        lhs(1,20)=clhs215*normalslave(3,1);
        lhs(1,21)=clhs226*normalslave(3,1);
        lhs(1,22)=clhs237*normalslave(3,1);
        lhs(1,23)=clhs248*normalslave(3,1);
        lhs(1,24)=0;
        lhs(1,25)=0;
        lhs(1,26)=0;
        lhs(1,27)=clhs0*clhs250;
        lhs(2,0)=clhs39*normalslave(3,2);
        lhs(2,1)=clhs46*normalslave(3,2);
        lhs(2,2)=clhs53*normalslave(3,2);
        lhs(2,3)=clhs60*normalslave(3,2);
        lhs(2,4)=clhs67*normalslave(3,2);
        lhs(2,5)=clhs74*normalslave(3,2);
        lhs(2,6)=clhs81*normalslave(3,2);
        lhs(2,7)=clhs88*normalslave(3,2);
        lhs(2,8)=clhs95*normalslave(3,2);
        lhs(2,9)=clhs102*normalslave(3,2);
        lhs(2,10)=clhs109*normalslave(3,2);
        lhs(2,11)=clhs116*normalslave(3,2);
        lhs(2,12)=clhs127*normalslave(3,2);
        lhs(2,13)=clhs138*normalslave(3,2);
        lhs(2,14)=clhs149*normalslave(3,2);
        lhs(2,15)=clhs160*normalslave(3,2);
        lhs(2,16)=clhs171*normalslave(3,2);
        lhs(2,17)=clhs182*normalslave(3,2);
        lhs(2,18)=clhs193*normalslave(3,2);
        lhs(2,19)=clhs204*normalslave(3,2);
        lhs(2,20)=clhs215*normalslave(3,2);
        lhs(2,21)=clhs226*normalslave(3,2);
        lhs(2,22)=clhs237*normalslave(3,2);
        lhs(2,23)=clhs248*normalslave(3,2);
        lhs(2,24)=0;
        lhs(2,25)=0;
        lhs(2,26)=0;
        lhs(2,27)=clhs0*clhs251;
        lhs(3,0)=clhs252*normalslave(3,0);
        lhs(3,1)=clhs253*normalslave(3,0);
        lhs(3,2)=clhs254*normalslave(3,0);
        lhs(3,3)=clhs255*normalslave(3,0);
        lhs(3,4)=clhs256*normalslave(3,0);
        lhs(3,5)=clhs257*normalslave(3,0);
        lhs(3,6)=clhs258*normalslave(3,0);
        lhs(3,7)=clhs259*normalslave(3,0);
        lhs(3,8)=clhs260*normalslave(3,0);
        lhs(3,9)=clhs261*normalslave(3,0);
        lhs(3,10)=clhs262*normalslave(3,0);
        lhs(3,11)=clhs263*normalslave(3,0);
        lhs(3,12)=clhs264*normalslave(3,0);
        lhs(3,13)=clhs265*normalslave(3,0);
        lhs(3,14)=clhs266*normalslave(3,0);
        lhs(3,15)=clhs267*normalslave(3,0);
        lhs(3,16)=clhs268*normalslave(3,0);
        lhs(3,17)=clhs269*normalslave(3,0);
        lhs(3,18)=clhs270*normalslave(3,0);
        lhs(3,19)=clhs271*normalslave(3,0);
        lhs(3,20)=clhs272*normalslave(3,0);
        lhs(3,21)=clhs273*normalslave(3,0);
        lhs(3,22)=clhs274*normalslave(3,0);
        lhs(3,23)=clhs275*normalslave(3,0);
        lhs(3,24)=0;
        lhs(3,25)=0;
        lhs(3,26)=0;
        lhs(3,27)=clhs249*clhs4;
        lhs(4,0)=clhs252*normalslave(3,1);
        lhs(4,1)=clhs253*normalslave(3,1);
        lhs(4,2)=clhs254*normalslave(3,1);
        lhs(4,3)=clhs255*normalslave(3,1);
        lhs(4,4)=clhs256*normalslave(3,1);
        lhs(4,5)=clhs257*normalslave(3,1);
        lhs(4,6)=clhs258*normalslave(3,1);
        lhs(4,7)=clhs259*normalslave(3,1);
        lhs(4,8)=clhs260*normalslave(3,1);
        lhs(4,9)=clhs261*normalslave(3,1);
        lhs(4,10)=clhs262*normalslave(3,1);
        lhs(4,11)=clhs263*normalslave(3,1);
        lhs(4,12)=clhs264*normalslave(3,1);
        lhs(4,13)=clhs265*normalslave(3,1);
        lhs(4,14)=clhs266*normalslave(3,1);
        lhs(4,15)=clhs267*normalslave(3,1);
        lhs(4,16)=clhs268*normalslave(3,1);
        lhs(4,17)=clhs269*normalslave(3,1);
        lhs(4,18)=clhs270*normalslave(3,1);
        lhs(4,19)=clhs271*normalslave(3,1);
        lhs(4,20)=clhs272*normalslave(3,1);
        lhs(4,21)=clhs273*normalslave(3,1);
        lhs(4,22)=clhs274*normalslave(3,1);
        lhs(4,23)=clhs275*normalslave(3,1);
        lhs(4,24)=0;
        lhs(4,25)=0;
        lhs(4,26)=0;
        lhs(4,27)=clhs250*clhs4;
        lhs(5,0)=clhs252*normalslave(3,2);
        lhs(5,1)=clhs253*normalslave(3,2);
        lhs(5,2)=clhs254*normalslave(3,2);
        lhs(5,3)=clhs255*normalslave(3,2);
        lhs(5,4)=clhs256*normalslave(3,2);
        lhs(5,5)=clhs257*normalslave(3,2);
        lhs(5,6)=clhs258*normalslave(3,2);
        lhs(5,7)=clhs259*normalslave(3,2);
        lhs(5,8)=clhs260*normalslave(3,2);
        lhs(5,9)=clhs261*normalslave(3,2);
        lhs(5,10)=clhs262*normalslave(3,2);
        lhs(5,11)=clhs263*normalslave(3,2);
        lhs(5,12)=clhs264*normalslave(3,2);
        lhs(5,13)=clhs265*normalslave(3,2);
        lhs(5,14)=clhs266*normalslave(3,2);
        lhs(5,15)=clhs267*normalslave(3,2);
        lhs(5,16)=clhs268*normalslave(3,2);
        lhs(5,17)=clhs269*normalslave(3,2);
        lhs(5,18)=clhs270*normalslave(3,2);
        lhs(5,19)=clhs271*normalslave(3,2);
        lhs(5,20)=clhs272*normalslave(3,2);
        lhs(5,21)=clhs273*normalslave(3,2);
        lhs(5,22)=clhs274*normalslave(3,2);
        lhs(5,23)=clhs275*normalslave(3,2);
        lhs(5,24)=0;
        lhs(5,25)=0;
        lhs(5,26)=0;
        lhs(5,27)=clhs251*clhs4;
        lhs(6,0)=clhs276*normalslave(3,0);
        lhs(6,1)=clhs277*normalslave(3,0);
        lhs(6,2)=clhs278*normalslave(3,0);
        lhs(6,3)=clhs279*normalslave(3,0);
        lhs(6,4)=clhs280*normalslave(3,0);
        lhs(6,5)=clhs281*normalslave(3,0);
        lhs(6,6)=clhs282*normalslave(3,0);
        lhs(6,7)=clhs283*normalslave(3,0);
        lhs(6,8)=clhs284*normalslave(3,0);
        lhs(6,9)=clhs285*normalslave(3,0);
        lhs(6,10)=clhs286*normalslave(3,0);
        lhs(6,11)=clhs287*normalslave(3,0);
        lhs(6,12)=clhs288*normalslave(3,0);
        lhs(6,13)=clhs289*normalslave(3,0);
        lhs(6,14)=clhs290*normalslave(3,0);
        lhs(6,15)=clhs291*normalslave(3,0);
        lhs(6,16)=clhs292*normalslave(3,0);
        lhs(6,17)=clhs293*normalslave(3,0);
        lhs(6,18)=clhs294*normalslave(3,0);
        lhs(6,19)=clhs295*normalslave(3,0);
        lhs(6,20)=clhs296*normalslave(3,0);
        lhs(6,21)=clhs297*normalslave(3,0);
        lhs(6,22)=clhs298*normalslave(3,0);
        lhs(6,23)=clhs299*normalslave(3,0);
        lhs(6,24)=0;
        lhs(6,25)=0;
        lhs(6,26)=0;
        lhs(6,27)=clhs249*clhs7;
        lhs(7,0)=clhs276*normalslave(3,1);
        lhs(7,1)=clhs277*normalslave(3,1);
        lhs(7,2)=clhs278*normalslave(3,1);
        lhs(7,3)=clhs279*normalslave(3,1);
        lhs(7,4)=clhs280*normalslave(3,1);
        lhs(7,5)=clhs281*normalslave(3,1);
        lhs(7,6)=clhs282*normalslave(3,1);
        lhs(7,7)=clhs283*normalslave(3,1);
        lhs(7,8)=clhs284*normalslave(3,1);
        lhs(7,9)=clhs285*normalslave(3,1);
        lhs(7,10)=clhs286*normalslave(3,1);
        lhs(7,11)=clhs287*normalslave(3,1);
        lhs(7,12)=clhs288*normalslave(3,1);
        lhs(7,13)=clhs289*normalslave(3,1);
        lhs(7,14)=clhs290*normalslave(3,1);
        lhs(7,15)=clhs291*normalslave(3,1);
        lhs(7,16)=clhs292*normalslave(3,1);
        lhs(7,17)=clhs293*normalslave(3,1);
        lhs(7,18)=clhs294*normalslave(3,1);
        lhs(7,19)=clhs295*normalslave(3,1);
        lhs(7,20)=clhs296*normalslave(3,1);
        lhs(7,21)=clhs297*normalslave(3,1);
        lhs(7,22)=clhs298*normalslave(3,1);
        lhs(7,23)=clhs299*normalslave(3,1);
        lhs(7,24)=0;
        lhs(7,25)=0;
        lhs(7,26)=0;
        lhs(7,27)=clhs250*clhs7;
        lhs(8,0)=clhs276*normalslave(3,2);
        lhs(8,1)=clhs277*normalslave(3,2);
        lhs(8,2)=clhs278*normalslave(3,2);
        lhs(8,3)=clhs279*normalslave(3,2);
        lhs(8,4)=clhs280*normalslave(3,2);
        lhs(8,5)=clhs281*normalslave(3,2);
        lhs(8,6)=clhs282*normalslave(3,2);
        lhs(8,7)=clhs283*normalslave(3,2);
        lhs(8,8)=clhs284*normalslave(3,2);
        lhs(8,9)=clhs285*normalslave(3,2);
        lhs(8,10)=clhs286*normalslave(3,2);
        lhs(8,11)=clhs287*normalslave(3,2);
        lhs(8,12)=clhs288*normalslave(3,2);
        lhs(8,13)=clhs289*normalslave(3,2);
        lhs(8,14)=clhs290*normalslave(3,2);
        lhs(8,15)=clhs291*normalslave(3,2);
        lhs(8,16)=clhs292*normalslave(3,2);
        lhs(8,17)=clhs293*normalslave(3,2);
        lhs(8,18)=clhs294*normalslave(3,2);
        lhs(8,19)=clhs295*normalslave(3,2);
        lhs(8,20)=clhs296*normalslave(3,2);
        lhs(8,21)=clhs297*normalslave(3,2);
        lhs(8,22)=clhs298*normalslave(3,2);
        lhs(8,23)=clhs299*normalslave(3,2);
        lhs(8,24)=0;
        lhs(8,25)=0;
        lhs(8,26)=0;
        lhs(8,27)=clhs251*clhs7;
        lhs(9,0)=clhs300*normalslave(3,0);
        lhs(9,1)=clhs301*normalslave(3,0);
        lhs(9,2)=clhs302*normalslave(3,0);
        lhs(9,3)=clhs303*normalslave(3,0);
        lhs(9,4)=clhs304*normalslave(3,0);
        lhs(9,5)=clhs305*normalslave(3,0);
        lhs(9,6)=clhs306*normalslave(3,0);
        lhs(9,7)=clhs307*normalslave(3,0);
        lhs(9,8)=clhs308*normalslave(3,0);
        lhs(9,9)=clhs309*normalslave(3,0);
        lhs(9,10)=clhs310*normalslave(3,0);
        lhs(9,11)=clhs311*normalslave(3,0);
        lhs(9,12)=clhs312*normalslave(3,0);
        lhs(9,13)=clhs313*normalslave(3,0);
        lhs(9,14)=clhs314*normalslave(3,0);
        lhs(9,15)=clhs315*normalslave(3,0);
        lhs(9,16)=clhs316*normalslave(3,0);
        lhs(9,17)=clhs317*normalslave(3,0);
        lhs(9,18)=clhs318*normalslave(3,0);
        lhs(9,19)=clhs319*normalslave(3,0);
        lhs(9,20)=clhs320*normalslave(3,0);
        lhs(9,21)=clhs321*normalslave(3,0);
        lhs(9,22)=clhs322*normalslave(3,0);
        lhs(9,23)=clhs323*normalslave(3,0);
        lhs(9,24)=0;
        lhs(9,25)=0;
        lhs(9,26)=0;
        lhs(9,27)=clhs10*clhs249;
        lhs(10,0)=clhs300*normalslave(3,1);
        lhs(10,1)=clhs301*normalslave(3,1);
        lhs(10,2)=clhs302*normalslave(3,1);
        lhs(10,3)=clhs303*normalslave(3,1);
        lhs(10,4)=clhs304*normalslave(3,1);
        lhs(10,5)=clhs305*normalslave(3,1);
        lhs(10,6)=clhs306*normalslave(3,1);
        lhs(10,7)=clhs307*normalslave(3,1);
        lhs(10,8)=clhs308*normalslave(3,1);
        lhs(10,9)=clhs309*normalslave(3,1);
        lhs(10,10)=clhs310*normalslave(3,1);
        lhs(10,11)=clhs311*normalslave(3,1);
        lhs(10,12)=clhs312*normalslave(3,1);
        lhs(10,13)=clhs313*normalslave(3,1);
        lhs(10,14)=clhs314*normalslave(3,1);
        lhs(10,15)=clhs315*normalslave(3,1);
        lhs(10,16)=clhs316*normalslave(3,1);
        lhs(10,17)=clhs317*normalslave(3,1);
        lhs(10,18)=clhs318*normalslave(3,1);
        lhs(10,19)=clhs319*normalslave(3,1);
        lhs(10,20)=clhs320*normalslave(3,1);
        lhs(10,21)=clhs321*normalslave(3,1);
        lhs(10,22)=clhs322*normalslave(3,1);
        lhs(10,23)=clhs323*normalslave(3,1);
        lhs(10,24)=0;
        lhs(10,25)=0;
        lhs(10,26)=0;
        lhs(10,27)=clhs10*clhs250;
        lhs(11,0)=clhs300*normalslave(3,2);
        lhs(11,1)=clhs301*normalslave(3,2);
        lhs(11,2)=clhs302*normalslave(3,2);
        lhs(11,3)=clhs303*normalslave(3,2);
        lhs(11,4)=clhs304*normalslave(3,2);
        lhs(11,5)=clhs305*normalslave(3,2);
        lhs(11,6)=clhs306*normalslave(3,2);
        lhs(11,7)=clhs307*normalslave(3,2);
        lhs(11,8)=clhs308*normalslave(3,2);
        lhs(11,9)=clhs309*normalslave(3,2);
        lhs(11,10)=clhs310*normalslave(3,2);
        lhs(11,11)=clhs311*normalslave(3,2);
        lhs(11,12)=clhs312*normalslave(3,2);
        lhs(11,13)=clhs313*normalslave(3,2);
        lhs(11,14)=clhs314*normalslave(3,2);
        lhs(11,15)=clhs315*normalslave(3,2);
        lhs(11,16)=clhs316*normalslave(3,2);
        lhs(11,17)=clhs317*normalslave(3,2);
        lhs(11,18)=clhs318*normalslave(3,2);
        lhs(11,19)=clhs319*normalslave(3,2);
        lhs(11,20)=clhs320*normalslave(3,2);
        lhs(11,21)=clhs321*normalslave(3,2);
        lhs(11,22)=clhs322*normalslave(3,2);
        lhs(11,23)=clhs323*normalslave(3,2);
        lhs(11,24)=0;
        lhs(11,25)=0;
        lhs(11,26)=0;
        lhs(11,27)=clhs10*clhs251;
        lhs(12,0)=clhs23*clhs324;
        lhs(12,1)=clhs23*clhs325;
        lhs(12,2)=clhs23*clhs326;
        lhs(12,3)=clhs23*clhs327;
        lhs(12,4)=clhs23*clhs328;
        lhs(12,5)=clhs23*clhs329;
        lhs(12,6)=clhs23*clhs330;
        lhs(12,7)=clhs23*clhs331;
        lhs(12,8)=clhs23*clhs332;
        lhs(12,9)=clhs23*clhs333;
        lhs(12,10)=clhs23*clhs334;
        lhs(12,11)=clhs23*clhs335;
        lhs(12,12)=-clhs336*normalslave(3,0);
        lhs(12,13)=-clhs337*normalslave(3,0);
        lhs(12,14)=-clhs338*normalslave(3,0);
        lhs(12,15)=-clhs339*normalslave(3,0);
        lhs(12,16)=-clhs340*normalslave(3,0);
        lhs(12,17)=-clhs341*normalslave(3,0);
        lhs(12,18)=-clhs342*normalslave(3,0);
        lhs(12,19)=-clhs343*normalslave(3,0);
        lhs(12,20)=-clhs344*normalslave(3,0);
        lhs(12,21)=-clhs345*normalslave(3,0);
        lhs(12,22)=-clhs346*normalslave(3,0);
        lhs(12,23)=-clhs347*normalslave(3,0);
        lhs(12,24)=0;
        lhs(12,25)=0;
        lhs(12,26)=0;
        lhs(12,27)=-clhs23*clhs249;
        lhs(13,0)=clhs23*clhs348;
        lhs(13,1)=clhs23*clhs349;
        lhs(13,2)=clhs23*clhs350;
        lhs(13,3)=clhs23*clhs351;
        lhs(13,4)=clhs23*clhs352;
        lhs(13,5)=clhs23*clhs353;
        lhs(13,6)=clhs23*clhs354;
        lhs(13,7)=clhs23*clhs355;
        lhs(13,8)=clhs23*clhs356;
        lhs(13,9)=clhs23*clhs357;
        lhs(13,10)=clhs23*clhs358;
        lhs(13,11)=clhs23*clhs359;
        lhs(13,12)=-clhs336*normalslave(3,1);
        lhs(13,13)=-clhs337*normalslave(3,1);
        lhs(13,14)=-clhs338*normalslave(3,1);
        lhs(13,15)=-clhs339*normalslave(3,1);
        lhs(13,16)=-clhs340*normalslave(3,1);
        lhs(13,17)=-clhs341*normalslave(3,1);
        lhs(13,18)=-clhs342*normalslave(3,1);
        lhs(13,19)=-clhs343*normalslave(3,1);
        lhs(13,20)=-clhs344*normalslave(3,1);
        lhs(13,21)=-clhs345*normalslave(3,1);
        lhs(13,22)=-clhs346*normalslave(3,1);
        lhs(13,23)=-clhs347*normalslave(3,1);
        lhs(13,24)=0;
        lhs(13,25)=0;
        lhs(13,26)=0;
        lhs(13,27)=-clhs23*clhs250;
        lhs(14,0)=clhs23*clhs360;
        lhs(14,1)=clhs23*clhs361;
        lhs(14,2)=clhs23*clhs362;
        lhs(14,3)=clhs23*clhs363;
        lhs(14,4)=clhs23*clhs364;
        lhs(14,5)=clhs23*clhs365;
        lhs(14,6)=clhs23*clhs366;
        lhs(14,7)=clhs23*clhs367;
        lhs(14,8)=clhs23*clhs368;
        lhs(14,9)=clhs23*clhs369;
        lhs(14,10)=clhs23*clhs370;
        lhs(14,11)=clhs23*clhs371;
        lhs(14,12)=-clhs336*normalslave(3,2);
        lhs(14,13)=-clhs337*normalslave(3,2);
        lhs(14,14)=-clhs338*normalslave(3,2);
        lhs(14,15)=-clhs339*normalslave(3,2);
        lhs(14,16)=-clhs340*normalslave(3,2);
        lhs(14,17)=-clhs341*normalslave(3,2);
        lhs(14,18)=-clhs342*normalslave(3,2);
        lhs(14,19)=-clhs343*normalslave(3,2);
        lhs(14,20)=-clhs344*normalslave(3,2);
        lhs(14,21)=-clhs345*normalslave(3,2);
        lhs(14,22)=-clhs346*normalslave(3,2);
        lhs(14,23)=-clhs347*normalslave(3,2);
        lhs(14,24)=0;
        lhs(14,25)=0;
        lhs(14,26)=0;
        lhs(14,27)=-clhs23*clhs251;
        lhs(15,0)=clhs25*clhs324;
        lhs(15,1)=clhs25*clhs325;
        lhs(15,2)=clhs25*clhs326;
        lhs(15,3)=clhs25*clhs327;
        lhs(15,4)=clhs25*clhs328;
        lhs(15,5)=clhs25*clhs329;
        lhs(15,6)=clhs25*clhs330;
        lhs(15,7)=clhs25*clhs331;
        lhs(15,8)=clhs25*clhs332;
        lhs(15,9)=clhs25*clhs333;
        lhs(15,10)=clhs25*clhs334;
        lhs(15,11)=clhs25*clhs335;
        lhs(15,12)=-clhs372*normalslave(3,0);
        lhs(15,13)=-clhs373*normalslave(3,0);
        lhs(15,14)=-clhs374*normalslave(3,0);
        lhs(15,15)=-clhs375*normalslave(3,0);
        lhs(15,16)=-clhs376*normalslave(3,0);
        lhs(15,17)=-clhs377*normalslave(3,0);
        lhs(15,18)=-clhs378*normalslave(3,0);
        lhs(15,19)=-clhs379*normalslave(3,0);
        lhs(15,20)=-clhs380*normalslave(3,0);
        lhs(15,21)=-clhs381*normalslave(3,0);
        lhs(15,22)=-clhs382*normalslave(3,0);
        lhs(15,23)=-clhs383*normalslave(3,0);
        lhs(15,24)=0;
        lhs(15,25)=0;
        lhs(15,26)=0;
        lhs(15,27)=-clhs249*clhs25;
        lhs(16,0)=clhs25*clhs348;
        lhs(16,1)=clhs25*clhs349;
        lhs(16,2)=clhs25*clhs350;
        lhs(16,3)=clhs25*clhs351;
        lhs(16,4)=clhs25*clhs352;
        lhs(16,5)=clhs25*clhs353;
        lhs(16,6)=clhs25*clhs354;
        lhs(16,7)=clhs25*clhs355;
        lhs(16,8)=clhs25*clhs356;
        lhs(16,9)=clhs25*clhs357;
        lhs(16,10)=clhs25*clhs358;
        lhs(16,11)=clhs25*clhs359;
        lhs(16,12)=-clhs372*normalslave(3,1);
        lhs(16,13)=-clhs373*normalslave(3,1);
        lhs(16,14)=-clhs374*normalslave(3,1);
        lhs(16,15)=-clhs375*normalslave(3,1);
        lhs(16,16)=-clhs376*normalslave(3,1);
        lhs(16,17)=-clhs377*normalslave(3,1);
        lhs(16,18)=-clhs378*normalslave(3,1);
        lhs(16,19)=-clhs379*normalslave(3,1);
        lhs(16,20)=-clhs380*normalslave(3,1);
        lhs(16,21)=-clhs381*normalslave(3,1);
        lhs(16,22)=-clhs382*normalslave(3,1);
        lhs(16,23)=-clhs383*normalslave(3,1);
        lhs(16,24)=0;
        lhs(16,25)=0;
        lhs(16,26)=0;
        lhs(16,27)=-clhs25*clhs250;
        lhs(17,0)=clhs25*clhs360;
        lhs(17,1)=clhs25*clhs361;
        lhs(17,2)=clhs25*clhs362;
        lhs(17,3)=clhs25*clhs363;
        lhs(17,4)=clhs25*clhs364;
        lhs(17,5)=clhs25*clhs365;
        lhs(17,6)=clhs25*clhs366;
        lhs(17,7)=clhs25*clhs367;
        lhs(17,8)=clhs25*clhs368;
        lhs(17,9)=clhs25*clhs369;
        lhs(17,10)=clhs25*clhs370;
        lhs(17,11)=clhs25*clhs371;
        lhs(17,12)=-clhs372*normalslave(3,2);
        lhs(17,13)=-clhs373*normalslave(3,2);
        lhs(17,14)=-clhs374*normalslave(3,2);
        lhs(17,15)=-clhs375*normalslave(3,2);
        lhs(17,16)=-clhs376*normalslave(3,2);
        lhs(17,17)=-clhs377*normalslave(3,2);
        lhs(17,18)=-clhs378*normalslave(3,2);
        lhs(17,19)=-clhs379*normalslave(3,2);
        lhs(17,20)=-clhs380*normalslave(3,2);
        lhs(17,21)=-clhs381*normalslave(3,2);
        lhs(17,22)=-clhs382*normalslave(3,2);
        lhs(17,23)=-clhs383*normalslave(3,2);
        lhs(17,24)=0;
        lhs(17,25)=0;
        lhs(17,26)=0;
        lhs(17,27)=-clhs25*clhs251;
        lhs(18,0)=clhs27*clhs324;
        lhs(18,1)=clhs27*clhs325;
        lhs(18,2)=clhs27*clhs326;
        lhs(18,3)=clhs27*clhs327;
        lhs(18,4)=clhs27*clhs328;
        lhs(18,5)=clhs27*clhs329;
        lhs(18,6)=clhs27*clhs330;
        lhs(18,7)=clhs27*clhs331;
        lhs(18,8)=clhs27*clhs332;
        lhs(18,9)=clhs27*clhs333;
        lhs(18,10)=clhs27*clhs334;
        lhs(18,11)=clhs27*clhs335;
        lhs(18,12)=-clhs384*normalslave(3,0);
        lhs(18,13)=-clhs385*normalslave(3,0);
        lhs(18,14)=-clhs386*normalslave(3,0);
        lhs(18,15)=-clhs387*normalslave(3,0);
        lhs(18,16)=-clhs388*normalslave(3,0);
        lhs(18,17)=-clhs389*normalslave(3,0);
        lhs(18,18)=-clhs390*normalslave(3,0);
        lhs(18,19)=-clhs391*normalslave(3,0);
        lhs(18,20)=-clhs392*normalslave(3,0);
        lhs(18,21)=-clhs393*normalslave(3,0);
        lhs(18,22)=-clhs394*normalslave(3,0);
        lhs(18,23)=-clhs395*normalslave(3,0);
        lhs(18,24)=0;
        lhs(18,25)=0;
        lhs(18,26)=0;
        lhs(18,27)=-clhs249*clhs27;
        lhs(19,0)=clhs27*clhs348;
        lhs(19,1)=clhs27*clhs349;
        lhs(19,2)=clhs27*clhs350;
        lhs(19,3)=clhs27*clhs351;
        lhs(19,4)=clhs27*clhs352;
        lhs(19,5)=clhs27*clhs353;
        lhs(19,6)=clhs27*clhs354;
        lhs(19,7)=clhs27*clhs355;
        lhs(19,8)=clhs27*clhs356;
        lhs(19,9)=clhs27*clhs357;
        lhs(19,10)=clhs27*clhs358;
        lhs(19,11)=clhs27*clhs359;
        lhs(19,12)=-clhs384*normalslave(3,1);
        lhs(19,13)=-clhs385*normalslave(3,1);
        lhs(19,14)=-clhs386*normalslave(3,1);
        lhs(19,15)=-clhs387*normalslave(3,1);
        lhs(19,16)=-clhs388*normalslave(3,1);
        lhs(19,17)=-clhs389*normalslave(3,1);
        lhs(19,18)=-clhs390*normalslave(3,1);
        lhs(19,19)=-clhs391*normalslave(3,1);
        lhs(19,20)=-clhs392*normalslave(3,1);
        lhs(19,21)=-clhs393*normalslave(3,1);
        lhs(19,22)=-clhs394*normalslave(3,1);
        lhs(19,23)=-clhs395*normalslave(3,1);
        lhs(19,24)=0;
        lhs(19,25)=0;
        lhs(19,26)=0;
        lhs(19,27)=-clhs250*clhs27;
        lhs(20,0)=clhs27*clhs360;
        lhs(20,1)=clhs27*clhs361;
        lhs(20,2)=clhs27*clhs362;
        lhs(20,3)=clhs27*clhs363;
        lhs(20,4)=clhs27*clhs364;
        lhs(20,5)=clhs27*clhs365;
        lhs(20,6)=clhs27*clhs366;
        lhs(20,7)=clhs27*clhs367;
        lhs(20,8)=clhs27*clhs368;
        lhs(20,9)=clhs27*clhs369;
        lhs(20,10)=clhs27*clhs370;
        lhs(20,11)=clhs27*clhs371;
        lhs(20,12)=-clhs384*normalslave(3,2);
        lhs(20,13)=-clhs385*normalslave(3,2);
        lhs(20,14)=-clhs386*normalslave(3,2);
        lhs(20,15)=-clhs387*normalslave(3,2);
        lhs(20,16)=-clhs388*normalslave(3,2);
        lhs(20,17)=-clhs389*normalslave(3,2);
        lhs(20,18)=-clhs390*normalslave(3,2);
        lhs(20,19)=-clhs391*normalslave(3,2);
        lhs(20,20)=-clhs392*normalslave(3,2);
        lhs(20,21)=-clhs393*normalslave(3,2);
        lhs(20,22)=-clhs394*normalslave(3,2);
        lhs(20,23)=-clhs395*normalslave(3,2);
        lhs(20,24)=0;
        lhs(20,25)=0;
        lhs(20,26)=0;
        lhs(20,27)=-clhs251*clhs27;
        lhs(21,0)=clhs29*clhs324;
        lhs(21,1)=clhs29*clhs325;
        lhs(21,2)=clhs29*clhs326;
        lhs(21,3)=clhs29*clhs327;
        lhs(21,4)=clhs29*clhs328;
        lhs(21,5)=clhs29*clhs329;
        lhs(21,6)=clhs29*clhs330;
        lhs(21,7)=clhs29*clhs331;
        lhs(21,8)=clhs29*clhs332;
        lhs(21,9)=clhs29*clhs333;
        lhs(21,10)=clhs29*clhs334;
        lhs(21,11)=clhs29*clhs335;
        lhs(21,12)=-clhs396*normalslave(3,0);
        lhs(21,13)=-clhs397*normalslave(3,0);
        lhs(21,14)=-clhs398*normalslave(3,0);
        lhs(21,15)=-clhs399*normalslave(3,0);
        lhs(21,16)=-clhs400*normalslave(3,0);
        lhs(21,17)=-clhs401*normalslave(3,0);
        lhs(21,18)=-clhs402*normalslave(3,0);
        lhs(21,19)=-clhs403*normalslave(3,0);
        lhs(21,20)=-clhs404*normalslave(3,0);
        lhs(21,21)=-clhs405*normalslave(3,0);
        lhs(21,22)=-clhs406*normalslave(3,0);
        lhs(21,23)=-clhs407*normalslave(3,0);
        lhs(21,24)=0;
        lhs(21,25)=0;
        lhs(21,26)=0;
        lhs(21,27)=-clhs249*clhs29;
        lhs(22,0)=clhs29*clhs348;
        lhs(22,1)=clhs29*clhs349;
        lhs(22,2)=clhs29*clhs350;
        lhs(22,3)=clhs29*clhs351;
        lhs(22,4)=clhs29*clhs352;
        lhs(22,5)=clhs29*clhs353;
        lhs(22,6)=clhs29*clhs354;
        lhs(22,7)=clhs29*clhs355;
        lhs(22,8)=clhs29*clhs356;
        lhs(22,9)=clhs29*clhs357;
        lhs(22,10)=clhs29*clhs358;
        lhs(22,11)=clhs29*clhs359;
        lhs(22,12)=-clhs396*normalslave(3,1);
        lhs(22,13)=-clhs397*normalslave(3,1);
        lhs(22,14)=-clhs398*normalslave(3,1);
        lhs(22,15)=-clhs399*normalslave(3,1);
        lhs(22,16)=-clhs400*normalslave(3,1);
        lhs(22,17)=-clhs401*normalslave(3,1);
        lhs(22,18)=-clhs402*normalslave(3,1);
        lhs(22,19)=-clhs403*normalslave(3,1);
        lhs(22,20)=-clhs404*normalslave(3,1);
        lhs(22,21)=-clhs405*normalslave(3,1);
        lhs(22,22)=-clhs406*normalslave(3,1);
        lhs(22,23)=-clhs407*normalslave(3,1);
        lhs(22,24)=0;
        lhs(22,25)=0;
        lhs(22,26)=0;
        lhs(22,27)=-clhs250*clhs29;
        lhs(23,0)=clhs29*clhs360;
        lhs(23,1)=clhs29*clhs361;
        lhs(23,2)=clhs29*clhs362;
        lhs(23,3)=clhs29*clhs363;
        lhs(23,4)=clhs29*clhs364;
        lhs(23,5)=clhs29*clhs365;
        lhs(23,6)=clhs29*clhs366;
        lhs(23,7)=clhs29*clhs367;
        lhs(23,8)=clhs29*clhs368;
        lhs(23,9)=clhs29*clhs369;
        lhs(23,10)=clhs29*clhs370;
        lhs(23,11)=clhs29*clhs371;
        lhs(23,12)=-clhs396*normalslave(3,2);
        lhs(23,13)=-clhs397*normalslave(3,2);
        lhs(23,14)=-clhs398*normalslave(3,2);
        lhs(23,15)=-clhs399*normalslave(3,2);
        lhs(23,16)=-clhs400*normalslave(3,2);
        lhs(23,17)=-clhs401*normalslave(3,2);
        lhs(23,18)=-clhs402*normalslave(3,2);
        lhs(23,19)=-clhs403*normalslave(3,2);
        lhs(23,20)=-clhs404*normalslave(3,2);
        lhs(23,21)=-clhs405*normalslave(3,2);
        lhs(23,22)=-clhs406*normalslave(3,2);
        lhs(23,23)=-clhs407*normalslave(3,2);
        lhs(23,24)=0;
        lhs(23,25)=0;
        lhs(23,26)=0;
        lhs(23,27)=-clhs251*clhs29;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs408;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs408;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs408;
        lhs(26,27)=0;
        lhs(27,0)=clhs20*scale_factor;
        lhs(27,1)=clhs44*scale_factor;
        lhs(27,2)=clhs51*scale_factor;
        lhs(27,3)=clhs58*scale_factor;
        lhs(27,4)=clhs65*scale_factor;
        lhs(27,5)=clhs72*scale_factor;
        lhs(27,6)=clhs79*scale_factor;
        lhs(27,7)=clhs86*scale_factor;
        lhs(27,8)=clhs93*scale_factor;
        lhs(27,9)=clhs100*scale_factor;
        lhs(27,10)=clhs107*scale_factor;
        lhs(27,11)=clhs114*scale_factor;
        lhs(27,12)=-clhs125*scale_factor;
        lhs(27,13)=-clhs136*scale_factor;
        lhs(27,14)=-clhs147*scale_factor;
        lhs(27,15)=-clhs158*scale_factor;
        lhs(27,16)=-clhs169*scale_factor;
        lhs(27,17)=-clhs180*scale_factor;
        lhs(27,18)=-clhs191*scale_factor;
        lhs(27,19)=-clhs202*scale_factor;
        lhs(27,20)=-clhs213*scale_factor;
        lhs(27,21)=-clhs224*scale_factor;
        lhs(27,22)=-clhs235*scale_factor;
        lhs(27,23)=-clhs246*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 4 )
    {
        const double clhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(2,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(2,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(2,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*penalty_parameter;
        const double clhs22 =     X1(0,0) + u1(0,0);
        const double clhs23 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs24 =     X1(1,0) + u1(1,0);
        const double clhs25 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs26 =     X1(2,0) + u1(2,0);
        const double clhs27 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs28 =     X1(3,0) + u1(3,0);
        const double clhs29 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs30 =     X1(0,1) + u1(0,1);
        const double clhs31 =     X1(1,1) + u1(1,1);
        const double clhs32 =     X1(2,1) + u1(2,1);
        const double clhs33 =     X1(3,1) + u1(3,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     X1(3,2) + u1(3,2);
        const double clhs38 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs22*clhs23 + clhs24*clhs25 + clhs26*clhs27 + clhs28*clhs29) + normalslave(2,1)*(-clhs0*clhs1 - clhs10*clhs9 + clhs23*clhs30 + clhs25*clhs31 + clhs27*clhs32 + clhs29*clhs33 - clhs3*clhs4 - clhs6*clhs7) + normalslave(2,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs23*clhs34 + clhs25*clhs35 + clhs27*clhs36 + clhs29*clhs37));
        const double clhs39 =     -clhs0*clhs21 + clhs2*clhs38;
        const double clhs40 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs41 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs42 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs43 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs44 =     normalslave(2,0)*(clhs16*clhs40 + clhs17*clhs41 + clhs18*clhs42 + clhs19*clhs43) + normalslave(2,1)*(clhs0 + clhs1*clhs40 + clhs3*clhs41 + clhs42*clhs6 + clhs43*clhs9) + normalslave(2,2)*(clhs12*clhs40 + clhs13*clhs41 + clhs14*clhs42 + clhs15*clhs43);
        const double clhs45 =     clhs44*penalty_parameter;
        const double clhs46 =     -clhs0*clhs45 + clhs38*clhs40;
        const double clhs47 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs48 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs49 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs50 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs51 =     normalslave(2,0)*(clhs16*clhs47 + clhs17*clhs48 + clhs18*clhs49 + clhs19*clhs50) + normalslave(2,1)*(clhs1*clhs47 + clhs3*clhs48 + clhs49*clhs6 + clhs50*clhs9) + normalslave(2,2)*(clhs0 + clhs12*clhs47 + clhs13*clhs48 + clhs14*clhs49 + clhs15*clhs50);
        const double clhs52 =     clhs51*penalty_parameter;
        const double clhs53 =     -clhs0*clhs52 + clhs38*clhs47;
        const double clhs54 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs55 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs56 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs57 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs58 =     normalslave(2,0)*(clhs16*clhs54 + clhs17*clhs55 + clhs18*clhs56 + clhs19*clhs57 + clhs4) + normalslave(2,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6 + clhs57*clhs9) + normalslave(2,2)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56 + clhs15*clhs57);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs38*clhs54;
        const double clhs61 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs62 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs63 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs64 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs65 =     normalslave(2,0)*(clhs16*clhs61 + clhs17*clhs62 + clhs18*clhs63 + clhs19*clhs64) + normalslave(2,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs4 + clhs6*clhs63 + clhs64*clhs9) + normalslave(2,2)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs15*clhs64);
        const double clhs66 =     clhs65*penalty_parameter;
        const double clhs67 =     -clhs0*clhs66 + clhs38*clhs61;
        const double clhs68 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs69 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs70 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs71 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs72 =     normalslave(2,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(2,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(2,2)*(clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71 + clhs4);
        const double clhs73 =     clhs72*penalty_parameter;
        const double clhs74 =     -clhs0*clhs73 + clhs38*clhs68;
        const double clhs75 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs76 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs77 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs78 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs79 =     normalslave(2,0)*(clhs16*clhs75 + clhs17*clhs76 + clhs18*clhs77 + clhs19*clhs78 + clhs7) + normalslave(2,1)*(clhs1*clhs75 + clhs3*clhs76 + clhs6*clhs77 + clhs78*clhs9) + normalslave(2,2)*(clhs12*clhs75 + clhs13*clhs76 + clhs14*clhs77 + clhs15*clhs78);
        const double clhs80 =     clhs79*penalty_parameter;
        const double clhs81 =     -clhs0*clhs80 + clhs38*clhs75;
        const double clhs82 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs83 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs84 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs85 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs86 =     normalslave(2,0)*(clhs16*clhs82 + clhs17*clhs83 + clhs18*clhs84 + clhs19*clhs85) + normalslave(2,1)*(clhs1*clhs82 + clhs3*clhs83 + clhs6*clhs84 + clhs7 + clhs85*clhs9) + normalslave(2,2)*(clhs12*clhs82 + clhs13*clhs83 + clhs14*clhs84 + clhs15*clhs85);
        const double clhs87 =     clhs86*penalty_parameter;
        const double clhs88 =     -clhs0*clhs87 + clhs38*clhs82;
        const double clhs89 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs90 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs91 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs92 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs93 =     normalslave(2,0)*(clhs16*clhs89 + clhs17*clhs90 + clhs18*clhs91 + clhs19*clhs92) + normalslave(2,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91 + clhs9*clhs92) + normalslave(2,2)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91 + clhs15*clhs92 + clhs7);
        const double clhs94 =     clhs93*penalty_parameter;
        const double clhs95 =     -clhs0*clhs94 + clhs38*clhs89;
        const double clhs96 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs97 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs98 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs99 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs100 =     normalslave(2,0)*(clhs10 + clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(2,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(2,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99);
        const double clhs101 =     clhs100*penalty_parameter;
        const double clhs102 =     -clhs0*clhs101 + clhs38*clhs96;
        const double clhs103 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs104 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs105 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs106 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs107 =     normalslave(2,0)*(clhs103*clhs16 + clhs104*clhs17 + clhs105*clhs18 + clhs106*clhs19) + normalslave(2,1)*(clhs1*clhs103 + clhs10 + clhs104*clhs3 + clhs105*clhs6 + clhs106*clhs9) + normalslave(2,2)*(clhs103*clhs12 + clhs104*clhs13 + clhs105*clhs14 + clhs106*clhs15);
        const double clhs108 =     clhs107*penalty_parameter;
        const double clhs109 =     -clhs0*clhs108 + clhs103*clhs38;
        const double clhs110 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs111 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs112 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs113 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs114 =     normalslave(2,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(2,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(2,2)*(clhs10 + clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15);
        const double clhs115 =     clhs114*penalty_parameter;
        const double clhs116 =     -clhs0*clhs115 + clhs110*clhs38;
        const double clhs117 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs118 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs119 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs120 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs121 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs122 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs123 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs124 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs125 =     normalslave(2,0)*(-clhs117*clhs16 + clhs118*clhs22 + clhs119*clhs24 + clhs120*clhs26 + clhs121*clhs28 - clhs122*clhs17 - clhs123*clhs18 - clhs124*clhs19 + clhs23) + normalslave(2,1)*(-clhs1*clhs117 + clhs118*clhs30 + clhs119*clhs31 + clhs120*clhs32 + clhs121*clhs33 - clhs122*clhs3 - clhs123*clhs6 - clhs124*clhs9) + normalslave(2,2)*(-clhs117*clhs12 + clhs118*clhs34 + clhs119*clhs35 + clhs120*clhs36 + clhs121*clhs37 - clhs122*clhs13 - clhs123*clhs14 - clhs124*clhs15);
        const double clhs126 =     clhs125*penalty_parameter;
        const double clhs127 =     clhs0*clhs126 + clhs117*clhs38;
        const double clhs128 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs129 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs130 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs131 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs132 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs133 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs134 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs135 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs136 =     normalslave(2,0)*(-clhs128*clhs16 + clhs129*clhs22 + clhs130*clhs24 + clhs131*clhs26 + clhs132*clhs28 - clhs133*clhs17 - clhs134*clhs18 - clhs135*clhs19) + normalslave(2,1)*(-clhs1*clhs128 + clhs129*clhs30 + clhs130*clhs31 + clhs131*clhs32 + clhs132*clhs33 - clhs133*clhs3 - clhs134*clhs6 - clhs135*clhs9 + clhs23) + normalslave(2,2)*(-clhs12*clhs128 + clhs129*clhs34 - clhs13*clhs133 + clhs130*clhs35 + clhs131*clhs36 + clhs132*clhs37 - clhs134*clhs14 - clhs135*clhs15);
        const double clhs137 =     clhs136*penalty_parameter;
        const double clhs138 =     clhs0*clhs137 + clhs128*clhs38;
        const double clhs139 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs140 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs141 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs142 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs143 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs144 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs145 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs146 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs147 =     normalslave(2,0)*(-clhs139*clhs16 + clhs140*clhs22 + clhs141*clhs24 + clhs142*clhs26 + clhs143*clhs28 - clhs144*clhs17 - clhs145*clhs18 - clhs146*clhs19) + normalslave(2,1)*(-clhs1*clhs139 + clhs140*clhs30 + clhs141*clhs31 + clhs142*clhs32 + clhs143*clhs33 - clhs144*clhs3 - clhs145*clhs6 - clhs146*clhs9) + normalslave(2,2)*(-clhs12*clhs139 - clhs13*clhs144 - clhs14*clhs145 + clhs140*clhs34 + clhs141*clhs35 + clhs142*clhs36 + clhs143*clhs37 - clhs146*clhs15 + clhs23);
        const double clhs148 =     clhs147*penalty_parameter;
        const double clhs149 =     clhs0*clhs148 + clhs139*clhs38;
        const double clhs150 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs151 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs152 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs153 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs154 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs155 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs156 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs157 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs158 =     normalslave(2,0)*(-clhs150*clhs16 + clhs151*clhs22 + clhs152*clhs24 + clhs153*clhs26 + clhs154*clhs28 - clhs155*clhs17 - clhs156*clhs18 - clhs157*clhs19 + clhs25) + normalslave(2,1)*(-clhs1*clhs150 + clhs151*clhs30 + clhs152*clhs31 + clhs153*clhs32 + clhs154*clhs33 - clhs155*clhs3 - clhs156*clhs6 - clhs157*clhs9) + normalslave(2,2)*(-clhs12*clhs150 - clhs13*clhs155 - clhs14*clhs156 - clhs15*clhs157 + clhs151*clhs34 + clhs152*clhs35 + clhs153*clhs36 + clhs154*clhs37);
        const double clhs159 =     clhs158*penalty_parameter;
        const double clhs160 =     clhs0*clhs159 + clhs150*clhs38;
        const double clhs161 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs162 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs163 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs164 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs165 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs166 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs167 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs168 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs169 =     normalslave(2,0)*(-clhs16*clhs161 + clhs162*clhs22 + clhs163*clhs24 + clhs164*clhs26 + clhs165*clhs28 - clhs166*clhs17 - clhs167*clhs18 - clhs168*clhs19) + normalslave(2,1)*(-clhs1*clhs161 + clhs162*clhs30 + clhs163*clhs31 + clhs164*clhs32 + clhs165*clhs33 - clhs166*clhs3 - clhs167*clhs6 - clhs168*clhs9 + clhs25) + normalslave(2,2)*(-clhs12*clhs161 - clhs13*clhs166 - clhs14*clhs167 - clhs15*clhs168 + clhs162*clhs34 + clhs163*clhs35 + clhs164*clhs36 + clhs165*clhs37);
        const double clhs170 =     clhs169*penalty_parameter;
        const double clhs171 =     clhs0*clhs170 + clhs161*clhs38;
        const double clhs172 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs173 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs174 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs175 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs176 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs177 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs178 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs179 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs180 =     normalslave(2,0)*(-clhs16*clhs172 - clhs17*clhs177 + clhs173*clhs22 + clhs174*clhs24 + clhs175*clhs26 + clhs176*clhs28 - clhs178*clhs18 - clhs179*clhs19) + normalslave(2,1)*(-clhs1*clhs172 + clhs173*clhs30 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6 - clhs179*clhs9) + normalslave(2,2)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 - clhs15*clhs179 + clhs173*clhs34 + clhs174*clhs35 + clhs175*clhs36 + clhs176*clhs37 + clhs25);
        const double clhs181 =     clhs180*penalty_parameter;
        const double clhs182 =     clhs0*clhs181 + clhs172*clhs38;
        const double clhs183 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs184 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs185 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs186 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs187 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs188 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs189 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs190 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs191 =     normalslave(2,0)*(-clhs16*clhs183 - clhs17*clhs188 - clhs18*clhs189 + clhs184*clhs22 + clhs185*clhs24 + clhs186*clhs26 + clhs187*clhs28 - clhs19*clhs190 + clhs27) + normalslave(2,1)*(-clhs1*clhs183 + clhs184*clhs30 + clhs185*clhs31 + clhs186*clhs32 + clhs187*clhs33 - clhs188*clhs3 - clhs189*clhs6 - clhs190*clhs9) + normalslave(2,2)*(-clhs12*clhs183 - clhs13*clhs188 - clhs14*clhs189 - clhs15*clhs190 + clhs184*clhs34 + clhs185*clhs35 + clhs186*clhs36 + clhs187*clhs37);
        const double clhs192 =     clhs191*penalty_parameter;
        const double clhs193 =     clhs0*clhs192 + clhs183*clhs38;
        const double clhs194 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs195 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs196 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs197 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs198 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs199 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs200 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs201 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs202 =     normalslave(2,0)*(-clhs16*clhs194 - clhs17*clhs199 - clhs18*clhs200 - clhs19*clhs201 + clhs195*clhs22 + clhs196*clhs24 + clhs197*clhs26 + clhs198*clhs28) + normalslave(2,1)*(-clhs1*clhs194 + clhs195*clhs30 + clhs196*clhs31 + clhs197*clhs32 + clhs198*clhs33 - clhs199*clhs3 - clhs200*clhs6 - clhs201*clhs9 + clhs27) + normalslave(2,2)*(-clhs12*clhs194 - clhs13*clhs199 - clhs14*clhs200 - clhs15*clhs201 + clhs195*clhs34 + clhs196*clhs35 + clhs197*clhs36 + clhs198*clhs37);
        const double clhs203 =     clhs202*penalty_parameter;
        const double clhs204 =     clhs0*clhs203 + clhs194*clhs38;
        const double clhs205 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs206 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs207 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs208 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs209 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs210 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs211 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs212 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs213 =     normalslave(2,0)*(-clhs16*clhs205 - clhs17*clhs210 - clhs18*clhs211 - clhs19*clhs212 + clhs206*clhs22 + clhs207*clhs24 + clhs208*clhs26 + clhs209*clhs28) + normalslave(2,1)*(-clhs1*clhs205 + clhs206*clhs30 + clhs207*clhs31 + clhs208*clhs32 + clhs209*clhs33 - clhs210*clhs3 - clhs211*clhs6 - clhs212*clhs9) + normalslave(2,2)*(-clhs12*clhs205 - clhs13*clhs210 - clhs14*clhs211 - clhs15*clhs212 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs209*clhs37 + clhs27);
        const double clhs214 =     clhs213*penalty_parameter;
        const double clhs215 =     clhs0*clhs214 + clhs205*clhs38;
        const double clhs216 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs217 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs218 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs219 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs220 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs221 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs222 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs223 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs224 =     normalslave(2,0)*(-clhs16*clhs216 - clhs17*clhs221 - clhs18*clhs222 - clhs19*clhs223 + clhs217*clhs22 + clhs218*clhs24 + clhs219*clhs26 + clhs220*clhs28 + clhs29) + normalslave(2,1)*(-clhs1*clhs216 + clhs217*clhs30 + clhs218*clhs31 + clhs219*clhs32 + clhs220*clhs33 - clhs221*clhs3 - clhs222*clhs6 - clhs223*clhs9) + normalslave(2,2)*(-clhs12*clhs216 - clhs13*clhs221 - clhs14*clhs222 - clhs15*clhs223 + clhs217*clhs34 + clhs218*clhs35 + clhs219*clhs36 + clhs220*clhs37);
        const double clhs225 =     clhs224*penalty_parameter;
        const double clhs226 =     clhs0*clhs225 + clhs216*clhs38;
        const double clhs227 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs228 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs229 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs230 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs231 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs232 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs233 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs234 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs235 =     normalslave(2,0)*(-clhs16*clhs227 - clhs17*clhs232 - clhs18*clhs233 - clhs19*clhs234 + clhs22*clhs228 + clhs229*clhs24 + clhs230*clhs26 + clhs231*clhs28) + normalslave(2,1)*(-clhs1*clhs227 + clhs228*clhs30 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6 - clhs234*clhs9 + clhs29) + normalslave(2,2)*(-clhs12*clhs227 - clhs13*clhs232 - clhs14*clhs233 - clhs15*clhs234 + clhs228*clhs34 + clhs229*clhs35 + clhs230*clhs36 + clhs231*clhs37);
        const double clhs236 =     clhs235*penalty_parameter;
        const double clhs237 =     clhs0*clhs236 + clhs227*clhs38;
        const double clhs238 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs239 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs240 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs241 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs242 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs243 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs244 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs245 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs246 =     normalslave(2,0)*(-clhs16*clhs238 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs22*clhs239 + clhs24*clhs240 + clhs241*clhs26 + clhs242*clhs28) + normalslave(2,1)*(-clhs1*clhs238 + clhs239*clhs30 + clhs240*clhs31 + clhs241*clhs32 + clhs242*clhs33 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(2,2)*(-clhs12*clhs238 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs34 + clhs240*clhs35 + clhs241*clhs36 + clhs242*clhs37 + clhs29);
        const double clhs247 =     clhs246*penalty_parameter;
        const double clhs248 =     clhs0*clhs247 + clhs238*clhs38;
        const double clhs249 =     normalslave(2,0)*scale_factor;
        const double clhs250 =     normalslave(2,1)*scale_factor;
        const double clhs251 =     normalslave(2,2)*scale_factor;
        const double clhs252 =     -clhs21*clhs4 + clhs38*clhs5;
        const double clhs253 =     clhs38*clhs41 - clhs4*clhs45;
        const double clhs254 =     clhs38*clhs48 - clhs4*clhs52;
        const double clhs255 =     clhs38*clhs55 - clhs4*clhs59;
        const double clhs256 =     clhs38*clhs62 - clhs4*clhs66;
        const double clhs257 =     clhs38*clhs69 - clhs4*clhs73;
        const double clhs258 =     clhs38*clhs76 - clhs4*clhs80;
        const double clhs259 =     clhs38*clhs83 - clhs4*clhs87;
        const double clhs260 =     clhs38*clhs90 - clhs4*clhs94;
        const double clhs261 =     -clhs101*clhs4 + clhs38*clhs97;
        const double clhs262 =     clhs104*clhs38 - clhs108*clhs4;
        const double clhs263 =     clhs111*clhs38 - clhs115*clhs4;
        const double clhs264 =     clhs122*clhs38 + clhs126*clhs4;
        const double clhs265 =     clhs133*clhs38 + clhs137*clhs4;
        const double clhs266 =     clhs144*clhs38 + clhs148*clhs4;
        const double clhs267 =     clhs155*clhs38 + clhs159*clhs4;
        const double clhs268 =     clhs166*clhs38 + clhs170*clhs4;
        const double clhs269 =     clhs177*clhs38 + clhs181*clhs4;
        const double clhs270 =     clhs188*clhs38 + clhs192*clhs4;
        const double clhs271 =     clhs199*clhs38 + clhs203*clhs4;
        const double clhs272 =     clhs210*clhs38 + clhs214*clhs4;
        const double clhs273 =     clhs221*clhs38 + clhs225*clhs4;
        const double clhs274 =     clhs232*clhs38 + clhs236*clhs4;
        const double clhs275 =     clhs243*clhs38 + clhs247*clhs4;
        const double clhs276 =     -clhs21*clhs7 + clhs38*clhs8;
        const double clhs277 =     clhs38*clhs42 - clhs45*clhs7;
        const double clhs278 =     clhs38*clhs49 - clhs52*clhs7;
        const double clhs279 =     clhs38*clhs56 - clhs59*clhs7;
        const double clhs280 =     clhs38*clhs63 - clhs66*clhs7;
        const double clhs281 =     clhs38*clhs70 - clhs7*clhs73;
        const double clhs282 =     clhs38*clhs77 - clhs7*clhs80;
        const double clhs283 =     clhs38*clhs84 - clhs7*clhs87;
        const double clhs284 =     clhs38*clhs91 - clhs7*clhs94;
        const double clhs285 =     -clhs101*clhs7 + clhs38*clhs98;
        const double clhs286 =     clhs105*clhs38 - clhs108*clhs7;
        const double clhs287 =     clhs112*clhs38 - clhs115*clhs7;
        const double clhs288 =     clhs123*clhs38 + clhs126*clhs7;
        const double clhs289 =     clhs134*clhs38 + clhs137*clhs7;
        const double clhs290 =     clhs145*clhs38 + clhs148*clhs7;
        const double clhs291 =     clhs156*clhs38 + clhs159*clhs7;
        const double clhs292 =     clhs167*clhs38 + clhs170*clhs7;
        const double clhs293 =     clhs178*clhs38 + clhs181*clhs7;
        const double clhs294 =     clhs189*clhs38 + clhs192*clhs7;
        const double clhs295 =     clhs200*clhs38 + clhs203*clhs7;
        const double clhs296 =     clhs211*clhs38 + clhs214*clhs7;
        const double clhs297 =     clhs222*clhs38 + clhs225*clhs7;
        const double clhs298 =     clhs233*clhs38 + clhs236*clhs7;
        const double clhs299 =     clhs244*clhs38 + clhs247*clhs7;
        const double clhs300 =     -clhs10*clhs21 + clhs11*clhs38;
        const double clhs301 =     -clhs10*clhs45 + clhs38*clhs43;
        const double clhs302 =     -clhs10*clhs52 + clhs38*clhs50;
        const double clhs303 =     -clhs10*clhs59 + clhs38*clhs57;
        const double clhs304 =     -clhs10*clhs66 + clhs38*clhs64;
        const double clhs305 =     -clhs10*clhs73 + clhs38*clhs71;
        const double clhs306 =     -clhs10*clhs80 + clhs38*clhs78;
        const double clhs307 =     -clhs10*clhs87 + clhs38*clhs85;
        const double clhs308 =     -clhs10*clhs94 + clhs38*clhs92;
        const double clhs309 =     -clhs10*clhs101 + clhs38*clhs99;
        const double clhs310 =     -clhs10*clhs108 + clhs106*clhs38;
        const double clhs311 =     -clhs10*clhs115 + clhs113*clhs38;
        const double clhs312 =     clhs10*clhs126 + clhs124*clhs38;
        const double clhs313 =     clhs10*clhs137 + clhs135*clhs38;
        const double clhs314 =     clhs10*clhs148 + clhs146*clhs38;
        const double clhs315 =     clhs10*clhs159 + clhs157*clhs38;
        const double clhs316 =     clhs10*clhs170 + clhs168*clhs38;
        const double clhs317 =     clhs10*clhs181 + clhs179*clhs38;
        const double clhs318 =     clhs10*clhs192 + clhs190*clhs38;
        const double clhs319 =     clhs10*clhs203 + clhs201*clhs38;
        const double clhs320 =     clhs10*clhs214 + clhs212*clhs38;
        const double clhs321 =     clhs10*clhs225 + clhs223*clhs38;
        const double clhs322 =     clhs10*clhs236 + clhs234*clhs38;
        const double clhs323 =     clhs10*clhs247 + clhs245*clhs38;
        const double clhs324 =     clhs20*normalslave(2,0)*penalty_parameter;
        const double clhs325 =     clhs44*normalslave(2,0)*penalty_parameter;
        const double clhs326 =     clhs51*normalslave(2,0)*penalty_parameter;
        const double clhs327 =     clhs58*normalslave(2,0)*penalty_parameter;
        const double clhs328 =     clhs65*normalslave(2,0)*penalty_parameter;
        const double clhs329 =     clhs72*normalslave(2,0)*penalty_parameter;
        const double clhs330 =     clhs79*normalslave(2,0)*penalty_parameter;
        const double clhs331 =     clhs86*normalslave(2,0)*penalty_parameter;
        const double clhs332 =     clhs93*normalslave(2,0)*penalty_parameter;
        const double clhs333 =     clhs100*normalslave(2,0)*penalty_parameter;
        const double clhs334 =     clhs107*normalslave(2,0)*penalty_parameter;
        const double clhs335 =     clhs114*normalslave(2,0)*penalty_parameter;
        const double clhs336 =     clhs118*clhs38 + clhs126*clhs23;
        const double clhs337 =     clhs129*clhs38 + clhs137*clhs23;
        const double clhs338 =     clhs140*clhs38 + clhs148*clhs23;
        const double clhs339 =     clhs151*clhs38 + clhs159*clhs23;
        const double clhs340 =     clhs162*clhs38 + clhs170*clhs23;
        const double clhs341 =     clhs173*clhs38 + clhs181*clhs23;
        const double clhs342 =     clhs184*clhs38 + clhs192*clhs23;
        const double clhs343 =     clhs195*clhs38 + clhs203*clhs23;
        const double clhs344 =     clhs206*clhs38 + clhs214*clhs23;
        const double clhs345 =     clhs217*clhs38 + clhs225*clhs23;
        const double clhs346 =     clhs228*clhs38 + clhs23*clhs236;
        const double clhs347 =     clhs23*clhs247 + clhs239*clhs38;
        const double clhs348 =     clhs20*normalslave(2,1)*penalty_parameter;
        const double clhs349 =     clhs44*normalslave(2,1)*penalty_parameter;
        const double clhs350 =     clhs51*normalslave(2,1)*penalty_parameter;
        const double clhs351 =     clhs58*normalslave(2,1)*penalty_parameter;
        const double clhs352 =     clhs65*normalslave(2,1)*penalty_parameter;
        const double clhs353 =     clhs72*normalslave(2,1)*penalty_parameter;
        const double clhs354 =     clhs79*normalslave(2,1)*penalty_parameter;
        const double clhs355 =     clhs86*normalslave(2,1)*penalty_parameter;
        const double clhs356 =     clhs93*normalslave(2,1)*penalty_parameter;
        const double clhs357 =     clhs100*normalslave(2,1)*penalty_parameter;
        const double clhs358 =     clhs107*normalslave(2,1)*penalty_parameter;
        const double clhs359 =     clhs114*normalslave(2,1)*penalty_parameter;
        const double clhs360 =     clhs20*normalslave(2,2)*penalty_parameter;
        const double clhs361 =     clhs44*normalslave(2,2)*penalty_parameter;
        const double clhs362 =     clhs51*normalslave(2,2)*penalty_parameter;
        const double clhs363 =     clhs58*normalslave(2,2)*penalty_parameter;
        const double clhs364 =     clhs65*normalslave(2,2)*penalty_parameter;
        const double clhs365 =     clhs72*normalslave(2,2)*penalty_parameter;
        const double clhs366 =     clhs79*normalslave(2,2)*penalty_parameter;
        const double clhs367 =     clhs86*normalslave(2,2)*penalty_parameter;
        const double clhs368 =     clhs93*normalslave(2,2)*penalty_parameter;
        const double clhs369 =     clhs100*normalslave(2,2)*penalty_parameter;
        const double clhs370 =     clhs107*normalslave(2,2)*penalty_parameter;
        const double clhs371 =     clhs114*normalslave(2,2)*penalty_parameter;
        const double clhs372 =     clhs119*clhs38 + clhs126*clhs25;
        const double clhs373 =     clhs130*clhs38 + clhs137*clhs25;
        const double clhs374 =     clhs141*clhs38 + clhs148*clhs25;
        const double clhs375 =     clhs152*clhs38 + clhs159*clhs25;
        const double clhs376 =     clhs163*clhs38 + clhs170*clhs25;
        const double clhs377 =     clhs174*clhs38 + clhs181*clhs25;
        const double clhs378 =     clhs185*clhs38 + clhs192*clhs25;
        const double clhs379 =     clhs196*clhs38 + clhs203*clhs25;
        const double clhs380 =     clhs207*clhs38 + clhs214*clhs25;
        const double clhs381 =     clhs218*clhs38 + clhs225*clhs25;
        const double clhs382 =     clhs229*clhs38 + clhs236*clhs25;
        const double clhs383 =     clhs240*clhs38 + clhs247*clhs25;
        const double clhs384 =     clhs120*clhs38 + clhs126*clhs27;
        const double clhs385 =     clhs131*clhs38 + clhs137*clhs27;
        const double clhs386 =     clhs142*clhs38 + clhs148*clhs27;
        const double clhs387 =     clhs153*clhs38 + clhs159*clhs27;
        const double clhs388 =     clhs164*clhs38 + clhs170*clhs27;
        const double clhs389 =     clhs175*clhs38 + clhs181*clhs27;
        const double clhs390 =     clhs186*clhs38 + clhs192*clhs27;
        const double clhs391 =     clhs197*clhs38 + clhs203*clhs27;
        const double clhs392 =     clhs208*clhs38 + clhs214*clhs27;
        const double clhs393 =     clhs219*clhs38 + clhs225*clhs27;
        const double clhs394 =     clhs230*clhs38 + clhs236*clhs27;
        const double clhs395 =     clhs241*clhs38 + clhs247*clhs27;
        const double clhs396 =     clhs121*clhs38 + clhs126*clhs29;
        const double clhs397 =     clhs132*clhs38 + clhs137*clhs29;
        const double clhs398 =     clhs143*clhs38 + clhs148*clhs29;
        const double clhs399 =     clhs154*clhs38 + clhs159*clhs29;
        const double clhs400 =     clhs165*clhs38 + clhs170*clhs29;
        const double clhs401 =     clhs176*clhs38 + clhs181*clhs29;
        const double clhs402 =     clhs187*clhs38 + clhs192*clhs29;
        const double clhs403 =     clhs198*clhs38 + clhs203*clhs29;
        const double clhs404 =     clhs209*clhs38 + clhs214*clhs29;
        const double clhs405 =     clhs220*clhs38 + clhs225*clhs29;
        const double clhs406 =     clhs231*clhs38 + clhs236*clhs29;
        const double clhs407 =     clhs242*clhs38 + clhs247*clhs29;
        const double clhs408 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs39*normalslave(2,0);
        lhs(0,1)=clhs46*normalslave(2,0);
        lhs(0,2)=clhs53*normalslave(2,0);
        lhs(0,3)=clhs60*normalslave(2,0);
        lhs(0,4)=clhs67*normalslave(2,0);
        lhs(0,5)=clhs74*normalslave(2,0);
        lhs(0,6)=clhs81*normalslave(2,0);
        lhs(0,7)=clhs88*normalslave(2,0);
        lhs(0,8)=clhs95*normalslave(2,0);
        lhs(0,9)=clhs102*normalslave(2,0);
        lhs(0,10)=clhs109*normalslave(2,0);
        lhs(0,11)=clhs116*normalslave(2,0);
        lhs(0,12)=clhs127*normalslave(2,0);
        lhs(0,13)=clhs138*normalslave(2,0);
        lhs(0,14)=clhs149*normalslave(2,0);
        lhs(0,15)=clhs160*normalslave(2,0);
        lhs(0,16)=clhs171*normalslave(2,0);
        lhs(0,17)=clhs182*normalslave(2,0);
        lhs(0,18)=clhs193*normalslave(2,0);
        lhs(0,19)=clhs204*normalslave(2,0);
        lhs(0,20)=clhs215*normalslave(2,0);
        lhs(0,21)=clhs226*normalslave(2,0);
        lhs(0,22)=clhs237*normalslave(2,0);
        lhs(0,23)=clhs248*normalslave(2,0);
        lhs(0,24)=0;
        lhs(0,25)=0;
        lhs(0,26)=clhs0*clhs249;
        lhs(0,27)=0;
        lhs(1,0)=clhs39*normalslave(2,1);
        lhs(1,1)=clhs46*normalslave(2,1);
        lhs(1,2)=clhs53*normalslave(2,1);
        lhs(1,3)=clhs60*normalslave(2,1);
        lhs(1,4)=clhs67*normalslave(2,1);
        lhs(1,5)=clhs74*normalslave(2,1);
        lhs(1,6)=clhs81*normalslave(2,1);
        lhs(1,7)=clhs88*normalslave(2,1);
        lhs(1,8)=clhs95*normalslave(2,1);
        lhs(1,9)=clhs102*normalslave(2,1);
        lhs(1,10)=clhs109*normalslave(2,1);
        lhs(1,11)=clhs116*normalslave(2,1);
        lhs(1,12)=clhs127*normalslave(2,1);
        lhs(1,13)=clhs138*normalslave(2,1);
        lhs(1,14)=clhs149*normalslave(2,1);
        lhs(1,15)=clhs160*normalslave(2,1);
        lhs(1,16)=clhs171*normalslave(2,1);
        lhs(1,17)=clhs182*normalslave(2,1);
        lhs(1,18)=clhs193*normalslave(2,1);
        lhs(1,19)=clhs204*normalslave(2,1);
        lhs(1,20)=clhs215*normalslave(2,1);
        lhs(1,21)=clhs226*normalslave(2,1);
        lhs(1,22)=clhs237*normalslave(2,1);
        lhs(1,23)=clhs248*normalslave(2,1);
        lhs(1,24)=0;
        lhs(1,25)=0;
        lhs(1,26)=clhs0*clhs250;
        lhs(1,27)=0;
        lhs(2,0)=clhs39*normalslave(2,2);
        lhs(2,1)=clhs46*normalslave(2,2);
        lhs(2,2)=clhs53*normalslave(2,2);
        lhs(2,3)=clhs60*normalslave(2,2);
        lhs(2,4)=clhs67*normalslave(2,2);
        lhs(2,5)=clhs74*normalslave(2,2);
        lhs(2,6)=clhs81*normalslave(2,2);
        lhs(2,7)=clhs88*normalslave(2,2);
        lhs(2,8)=clhs95*normalslave(2,2);
        lhs(2,9)=clhs102*normalslave(2,2);
        lhs(2,10)=clhs109*normalslave(2,2);
        lhs(2,11)=clhs116*normalslave(2,2);
        lhs(2,12)=clhs127*normalslave(2,2);
        lhs(2,13)=clhs138*normalslave(2,2);
        lhs(2,14)=clhs149*normalslave(2,2);
        lhs(2,15)=clhs160*normalslave(2,2);
        lhs(2,16)=clhs171*normalslave(2,2);
        lhs(2,17)=clhs182*normalslave(2,2);
        lhs(2,18)=clhs193*normalslave(2,2);
        lhs(2,19)=clhs204*normalslave(2,2);
        lhs(2,20)=clhs215*normalslave(2,2);
        lhs(2,21)=clhs226*normalslave(2,2);
        lhs(2,22)=clhs237*normalslave(2,2);
        lhs(2,23)=clhs248*normalslave(2,2);
        lhs(2,24)=0;
        lhs(2,25)=0;
        lhs(2,26)=clhs0*clhs251;
        lhs(2,27)=0;
        lhs(3,0)=clhs252*normalslave(2,0);
        lhs(3,1)=clhs253*normalslave(2,0);
        lhs(3,2)=clhs254*normalslave(2,0);
        lhs(3,3)=clhs255*normalslave(2,0);
        lhs(3,4)=clhs256*normalslave(2,0);
        lhs(3,5)=clhs257*normalslave(2,0);
        lhs(3,6)=clhs258*normalslave(2,0);
        lhs(3,7)=clhs259*normalslave(2,0);
        lhs(3,8)=clhs260*normalslave(2,0);
        lhs(3,9)=clhs261*normalslave(2,0);
        lhs(3,10)=clhs262*normalslave(2,0);
        lhs(3,11)=clhs263*normalslave(2,0);
        lhs(3,12)=clhs264*normalslave(2,0);
        lhs(3,13)=clhs265*normalslave(2,0);
        lhs(3,14)=clhs266*normalslave(2,0);
        lhs(3,15)=clhs267*normalslave(2,0);
        lhs(3,16)=clhs268*normalslave(2,0);
        lhs(3,17)=clhs269*normalslave(2,0);
        lhs(3,18)=clhs270*normalslave(2,0);
        lhs(3,19)=clhs271*normalslave(2,0);
        lhs(3,20)=clhs272*normalslave(2,0);
        lhs(3,21)=clhs273*normalslave(2,0);
        lhs(3,22)=clhs274*normalslave(2,0);
        lhs(3,23)=clhs275*normalslave(2,0);
        lhs(3,24)=0;
        lhs(3,25)=0;
        lhs(3,26)=clhs249*clhs4;
        lhs(3,27)=0;
        lhs(4,0)=clhs252*normalslave(2,1);
        lhs(4,1)=clhs253*normalslave(2,1);
        lhs(4,2)=clhs254*normalslave(2,1);
        lhs(4,3)=clhs255*normalslave(2,1);
        lhs(4,4)=clhs256*normalslave(2,1);
        lhs(4,5)=clhs257*normalslave(2,1);
        lhs(4,6)=clhs258*normalslave(2,1);
        lhs(4,7)=clhs259*normalslave(2,1);
        lhs(4,8)=clhs260*normalslave(2,1);
        lhs(4,9)=clhs261*normalslave(2,1);
        lhs(4,10)=clhs262*normalslave(2,1);
        lhs(4,11)=clhs263*normalslave(2,1);
        lhs(4,12)=clhs264*normalslave(2,1);
        lhs(4,13)=clhs265*normalslave(2,1);
        lhs(4,14)=clhs266*normalslave(2,1);
        lhs(4,15)=clhs267*normalslave(2,1);
        lhs(4,16)=clhs268*normalslave(2,1);
        lhs(4,17)=clhs269*normalslave(2,1);
        lhs(4,18)=clhs270*normalslave(2,1);
        lhs(4,19)=clhs271*normalslave(2,1);
        lhs(4,20)=clhs272*normalslave(2,1);
        lhs(4,21)=clhs273*normalslave(2,1);
        lhs(4,22)=clhs274*normalslave(2,1);
        lhs(4,23)=clhs275*normalslave(2,1);
        lhs(4,24)=0;
        lhs(4,25)=0;
        lhs(4,26)=clhs250*clhs4;
        lhs(4,27)=0;
        lhs(5,0)=clhs252*normalslave(2,2);
        lhs(5,1)=clhs253*normalslave(2,2);
        lhs(5,2)=clhs254*normalslave(2,2);
        lhs(5,3)=clhs255*normalslave(2,2);
        lhs(5,4)=clhs256*normalslave(2,2);
        lhs(5,5)=clhs257*normalslave(2,2);
        lhs(5,6)=clhs258*normalslave(2,2);
        lhs(5,7)=clhs259*normalslave(2,2);
        lhs(5,8)=clhs260*normalslave(2,2);
        lhs(5,9)=clhs261*normalslave(2,2);
        lhs(5,10)=clhs262*normalslave(2,2);
        lhs(5,11)=clhs263*normalslave(2,2);
        lhs(5,12)=clhs264*normalslave(2,2);
        lhs(5,13)=clhs265*normalslave(2,2);
        lhs(5,14)=clhs266*normalslave(2,2);
        lhs(5,15)=clhs267*normalslave(2,2);
        lhs(5,16)=clhs268*normalslave(2,2);
        lhs(5,17)=clhs269*normalslave(2,2);
        lhs(5,18)=clhs270*normalslave(2,2);
        lhs(5,19)=clhs271*normalslave(2,2);
        lhs(5,20)=clhs272*normalslave(2,2);
        lhs(5,21)=clhs273*normalslave(2,2);
        lhs(5,22)=clhs274*normalslave(2,2);
        lhs(5,23)=clhs275*normalslave(2,2);
        lhs(5,24)=0;
        lhs(5,25)=0;
        lhs(5,26)=clhs251*clhs4;
        lhs(5,27)=0;
        lhs(6,0)=clhs276*normalslave(2,0);
        lhs(6,1)=clhs277*normalslave(2,0);
        lhs(6,2)=clhs278*normalslave(2,0);
        lhs(6,3)=clhs279*normalslave(2,0);
        lhs(6,4)=clhs280*normalslave(2,0);
        lhs(6,5)=clhs281*normalslave(2,0);
        lhs(6,6)=clhs282*normalslave(2,0);
        lhs(6,7)=clhs283*normalslave(2,0);
        lhs(6,8)=clhs284*normalslave(2,0);
        lhs(6,9)=clhs285*normalslave(2,0);
        lhs(6,10)=clhs286*normalslave(2,0);
        lhs(6,11)=clhs287*normalslave(2,0);
        lhs(6,12)=clhs288*normalslave(2,0);
        lhs(6,13)=clhs289*normalslave(2,0);
        lhs(6,14)=clhs290*normalslave(2,0);
        lhs(6,15)=clhs291*normalslave(2,0);
        lhs(6,16)=clhs292*normalslave(2,0);
        lhs(6,17)=clhs293*normalslave(2,0);
        lhs(6,18)=clhs294*normalslave(2,0);
        lhs(6,19)=clhs295*normalslave(2,0);
        lhs(6,20)=clhs296*normalslave(2,0);
        lhs(6,21)=clhs297*normalslave(2,0);
        lhs(6,22)=clhs298*normalslave(2,0);
        lhs(6,23)=clhs299*normalslave(2,0);
        lhs(6,24)=0;
        lhs(6,25)=0;
        lhs(6,26)=clhs249*clhs7;
        lhs(6,27)=0;
        lhs(7,0)=clhs276*normalslave(2,1);
        lhs(7,1)=clhs277*normalslave(2,1);
        lhs(7,2)=clhs278*normalslave(2,1);
        lhs(7,3)=clhs279*normalslave(2,1);
        lhs(7,4)=clhs280*normalslave(2,1);
        lhs(7,5)=clhs281*normalslave(2,1);
        lhs(7,6)=clhs282*normalslave(2,1);
        lhs(7,7)=clhs283*normalslave(2,1);
        lhs(7,8)=clhs284*normalslave(2,1);
        lhs(7,9)=clhs285*normalslave(2,1);
        lhs(7,10)=clhs286*normalslave(2,1);
        lhs(7,11)=clhs287*normalslave(2,1);
        lhs(7,12)=clhs288*normalslave(2,1);
        lhs(7,13)=clhs289*normalslave(2,1);
        lhs(7,14)=clhs290*normalslave(2,1);
        lhs(7,15)=clhs291*normalslave(2,1);
        lhs(7,16)=clhs292*normalslave(2,1);
        lhs(7,17)=clhs293*normalslave(2,1);
        lhs(7,18)=clhs294*normalslave(2,1);
        lhs(7,19)=clhs295*normalslave(2,1);
        lhs(7,20)=clhs296*normalslave(2,1);
        lhs(7,21)=clhs297*normalslave(2,1);
        lhs(7,22)=clhs298*normalslave(2,1);
        lhs(7,23)=clhs299*normalslave(2,1);
        lhs(7,24)=0;
        lhs(7,25)=0;
        lhs(7,26)=clhs250*clhs7;
        lhs(7,27)=0;
        lhs(8,0)=clhs276*normalslave(2,2);
        lhs(8,1)=clhs277*normalslave(2,2);
        lhs(8,2)=clhs278*normalslave(2,2);
        lhs(8,3)=clhs279*normalslave(2,2);
        lhs(8,4)=clhs280*normalslave(2,2);
        lhs(8,5)=clhs281*normalslave(2,2);
        lhs(8,6)=clhs282*normalslave(2,2);
        lhs(8,7)=clhs283*normalslave(2,2);
        lhs(8,8)=clhs284*normalslave(2,2);
        lhs(8,9)=clhs285*normalslave(2,2);
        lhs(8,10)=clhs286*normalslave(2,2);
        lhs(8,11)=clhs287*normalslave(2,2);
        lhs(8,12)=clhs288*normalslave(2,2);
        lhs(8,13)=clhs289*normalslave(2,2);
        lhs(8,14)=clhs290*normalslave(2,2);
        lhs(8,15)=clhs291*normalslave(2,2);
        lhs(8,16)=clhs292*normalslave(2,2);
        lhs(8,17)=clhs293*normalslave(2,2);
        lhs(8,18)=clhs294*normalslave(2,2);
        lhs(8,19)=clhs295*normalslave(2,2);
        lhs(8,20)=clhs296*normalslave(2,2);
        lhs(8,21)=clhs297*normalslave(2,2);
        lhs(8,22)=clhs298*normalslave(2,2);
        lhs(8,23)=clhs299*normalslave(2,2);
        lhs(8,24)=0;
        lhs(8,25)=0;
        lhs(8,26)=clhs251*clhs7;
        lhs(8,27)=0;
        lhs(9,0)=clhs300*normalslave(2,0);
        lhs(9,1)=clhs301*normalslave(2,0);
        lhs(9,2)=clhs302*normalslave(2,0);
        lhs(9,3)=clhs303*normalslave(2,0);
        lhs(9,4)=clhs304*normalslave(2,0);
        lhs(9,5)=clhs305*normalslave(2,0);
        lhs(9,6)=clhs306*normalslave(2,0);
        lhs(9,7)=clhs307*normalslave(2,0);
        lhs(9,8)=clhs308*normalslave(2,0);
        lhs(9,9)=clhs309*normalslave(2,0);
        lhs(9,10)=clhs310*normalslave(2,0);
        lhs(9,11)=clhs311*normalslave(2,0);
        lhs(9,12)=clhs312*normalslave(2,0);
        lhs(9,13)=clhs313*normalslave(2,0);
        lhs(9,14)=clhs314*normalslave(2,0);
        lhs(9,15)=clhs315*normalslave(2,0);
        lhs(9,16)=clhs316*normalslave(2,0);
        lhs(9,17)=clhs317*normalslave(2,0);
        lhs(9,18)=clhs318*normalslave(2,0);
        lhs(9,19)=clhs319*normalslave(2,0);
        lhs(9,20)=clhs320*normalslave(2,0);
        lhs(9,21)=clhs321*normalslave(2,0);
        lhs(9,22)=clhs322*normalslave(2,0);
        lhs(9,23)=clhs323*normalslave(2,0);
        lhs(9,24)=0;
        lhs(9,25)=0;
        lhs(9,26)=clhs10*clhs249;
        lhs(9,27)=0;
        lhs(10,0)=clhs300*normalslave(2,1);
        lhs(10,1)=clhs301*normalslave(2,1);
        lhs(10,2)=clhs302*normalslave(2,1);
        lhs(10,3)=clhs303*normalslave(2,1);
        lhs(10,4)=clhs304*normalslave(2,1);
        lhs(10,5)=clhs305*normalslave(2,1);
        lhs(10,6)=clhs306*normalslave(2,1);
        lhs(10,7)=clhs307*normalslave(2,1);
        lhs(10,8)=clhs308*normalslave(2,1);
        lhs(10,9)=clhs309*normalslave(2,1);
        lhs(10,10)=clhs310*normalslave(2,1);
        lhs(10,11)=clhs311*normalslave(2,1);
        lhs(10,12)=clhs312*normalslave(2,1);
        lhs(10,13)=clhs313*normalslave(2,1);
        lhs(10,14)=clhs314*normalslave(2,1);
        lhs(10,15)=clhs315*normalslave(2,1);
        lhs(10,16)=clhs316*normalslave(2,1);
        lhs(10,17)=clhs317*normalslave(2,1);
        lhs(10,18)=clhs318*normalslave(2,1);
        lhs(10,19)=clhs319*normalslave(2,1);
        lhs(10,20)=clhs320*normalslave(2,1);
        lhs(10,21)=clhs321*normalslave(2,1);
        lhs(10,22)=clhs322*normalslave(2,1);
        lhs(10,23)=clhs323*normalslave(2,1);
        lhs(10,24)=0;
        lhs(10,25)=0;
        lhs(10,26)=clhs10*clhs250;
        lhs(10,27)=0;
        lhs(11,0)=clhs300*normalslave(2,2);
        lhs(11,1)=clhs301*normalslave(2,2);
        lhs(11,2)=clhs302*normalslave(2,2);
        lhs(11,3)=clhs303*normalslave(2,2);
        lhs(11,4)=clhs304*normalslave(2,2);
        lhs(11,5)=clhs305*normalslave(2,2);
        lhs(11,6)=clhs306*normalslave(2,2);
        lhs(11,7)=clhs307*normalslave(2,2);
        lhs(11,8)=clhs308*normalslave(2,2);
        lhs(11,9)=clhs309*normalslave(2,2);
        lhs(11,10)=clhs310*normalslave(2,2);
        lhs(11,11)=clhs311*normalslave(2,2);
        lhs(11,12)=clhs312*normalslave(2,2);
        lhs(11,13)=clhs313*normalslave(2,2);
        lhs(11,14)=clhs314*normalslave(2,2);
        lhs(11,15)=clhs315*normalslave(2,2);
        lhs(11,16)=clhs316*normalslave(2,2);
        lhs(11,17)=clhs317*normalslave(2,2);
        lhs(11,18)=clhs318*normalslave(2,2);
        lhs(11,19)=clhs319*normalslave(2,2);
        lhs(11,20)=clhs320*normalslave(2,2);
        lhs(11,21)=clhs321*normalslave(2,2);
        lhs(11,22)=clhs322*normalslave(2,2);
        lhs(11,23)=clhs323*normalslave(2,2);
        lhs(11,24)=0;
        lhs(11,25)=0;
        lhs(11,26)=clhs10*clhs251;
        lhs(11,27)=0;
        lhs(12,0)=clhs23*clhs324;
        lhs(12,1)=clhs23*clhs325;
        lhs(12,2)=clhs23*clhs326;
        lhs(12,3)=clhs23*clhs327;
        lhs(12,4)=clhs23*clhs328;
        lhs(12,5)=clhs23*clhs329;
        lhs(12,6)=clhs23*clhs330;
        lhs(12,7)=clhs23*clhs331;
        lhs(12,8)=clhs23*clhs332;
        lhs(12,9)=clhs23*clhs333;
        lhs(12,10)=clhs23*clhs334;
        lhs(12,11)=clhs23*clhs335;
        lhs(12,12)=-clhs336*normalslave(2,0);
        lhs(12,13)=-clhs337*normalslave(2,0);
        lhs(12,14)=-clhs338*normalslave(2,0);
        lhs(12,15)=-clhs339*normalslave(2,0);
        lhs(12,16)=-clhs340*normalslave(2,0);
        lhs(12,17)=-clhs341*normalslave(2,0);
        lhs(12,18)=-clhs342*normalslave(2,0);
        lhs(12,19)=-clhs343*normalslave(2,0);
        lhs(12,20)=-clhs344*normalslave(2,0);
        lhs(12,21)=-clhs345*normalslave(2,0);
        lhs(12,22)=-clhs346*normalslave(2,0);
        lhs(12,23)=-clhs347*normalslave(2,0);
        lhs(12,24)=0;
        lhs(12,25)=0;
        lhs(12,26)=-clhs23*clhs249;
        lhs(12,27)=0;
        lhs(13,0)=clhs23*clhs348;
        lhs(13,1)=clhs23*clhs349;
        lhs(13,2)=clhs23*clhs350;
        lhs(13,3)=clhs23*clhs351;
        lhs(13,4)=clhs23*clhs352;
        lhs(13,5)=clhs23*clhs353;
        lhs(13,6)=clhs23*clhs354;
        lhs(13,7)=clhs23*clhs355;
        lhs(13,8)=clhs23*clhs356;
        lhs(13,9)=clhs23*clhs357;
        lhs(13,10)=clhs23*clhs358;
        lhs(13,11)=clhs23*clhs359;
        lhs(13,12)=-clhs336*normalslave(2,1);
        lhs(13,13)=-clhs337*normalslave(2,1);
        lhs(13,14)=-clhs338*normalslave(2,1);
        lhs(13,15)=-clhs339*normalslave(2,1);
        lhs(13,16)=-clhs340*normalslave(2,1);
        lhs(13,17)=-clhs341*normalslave(2,1);
        lhs(13,18)=-clhs342*normalslave(2,1);
        lhs(13,19)=-clhs343*normalslave(2,1);
        lhs(13,20)=-clhs344*normalslave(2,1);
        lhs(13,21)=-clhs345*normalslave(2,1);
        lhs(13,22)=-clhs346*normalslave(2,1);
        lhs(13,23)=-clhs347*normalslave(2,1);
        lhs(13,24)=0;
        lhs(13,25)=0;
        lhs(13,26)=-clhs23*clhs250;
        lhs(13,27)=0;
        lhs(14,0)=clhs23*clhs360;
        lhs(14,1)=clhs23*clhs361;
        lhs(14,2)=clhs23*clhs362;
        lhs(14,3)=clhs23*clhs363;
        lhs(14,4)=clhs23*clhs364;
        lhs(14,5)=clhs23*clhs365;
        lhs(14,6)=clhs23*clhs366;
        lhs(14,7)=clhs23*clhs367;
        lhs(14,8)=clhs23*clhs368;
        lhs(14,9)=clhs23*clhs369;
        lhs(14,10)=clhs23*clhs370;
        lhs(14,11)=clhs23*clhs371;
        lhs(14,12)=-clhs336*normalslave(2,2);
        lhs(14,13)=-clhs337*normalslave(2,2);
        lhs(14,14)=-clhs338*normalslave(2,2);
        lhs(14,15)=-clhs339*normalslave(2,2);
        lhs(14,16)=-clhs340*normalslave(2,2);
        lhs(14,17)=-clhs341*normalslave(2,2);
        lhs(14,18)=-clhs342*normalslave(2,2);
        lhs(14,19)=-clhs343*normalslave(2,2);
        lhs(14,20)=-clhs344*normalslave(2,2);
        lhs(14,21)=-clhs345*normalslave(2,2);
        lhs(14,22)=-clhs346*normalslave(2,2);
        lhs(14,23)=-clhs347*normalslave(2,2);
        lhs(14,24)=0;
        lhs(14,25)=0;
        lhs(14,26)=-clhs23*clhs251;
        lhs(14,27)=0;
        lhs(15,0)=clhs25*clhs324;
        lhs(15,1)=clhs25*clhs325;
        lhs(15,2)=clhs25*clhs326;
        lhs(15,3)=clhs25*clhs327;
        lhs(15,4)=clhs25*clhs328;
        lhs(15,5)=clhs25*clhs329;
        lhs(15,6)=clhs25*clhs330;
        lhs(15,7)=clhs25*clhs331;
        lhs(15,8)=clhs25*clhs332;
        lhs(15,9)=clhs25*clhs333;
        lhs(15,10)=clhs25*clhs334;
        lhs(15,11)=clhs25*clhs335;
        lhs(15,12)=-clhs372*normalslave(2,0);
        lhs(15,13)=-clhs373*normalslave(2,0);
        lhs(15,14)=-clhs374*normalslave(2,0);
        lhs(15,15)=-clhs375*normalslave(2,0);
        lhs(15,16)=-clhs376*normalslave(2,0);
        lhs(15,17)=-clhs377*normalslave(2,0);
        lhs(15,18)=-clhs378*normalslave(2,0);
        lhs(15,19)=-clhs379*normalslave(2,0);
        lhs(15,20)=-clhs380*normalslave(2,0);
        lhs(15,21)=-clhs381*normalslave(2,0);
        lhs(15,22)=-clhs382*normalslave(2,0);
        lhs(15,23)=-clhs383*normalslave(2,0);
        lhs(15,24)=0;
        lhs(15,25)=0;
        lhs(15,26)=-clhs249*clhs25;
        lhs(15,27)=0;
        lhs(16,0)=clhs25*clhs348;
        lhs(16,1)=clhs25*clhs349;
        lhs(16,2)=clhs25*clhs350;
        lhs(16,3)=clhs25*clhs351;
        lhs(16,4)=clhs25*clhs352;
        lhs(16,5)=clhs25*clhs353;
        lhs(16,6)=clhs25*clhs354;
        lhs(16,7)=clhs25*clhs355;
        lhs(16,8)=clhs25*clhs356;
        lhs(16,9)=clhs25*clhs357;
        lhs(16,10)=clhs25*clhs358;
        lhs(16,11)=clhs25*clhs359;
        lhs(16,12)=-clhs372*normalslave(2,1);
        lhs(16,13)=-clhs373*normalslave(2,1);
        lhs(16,14)=-clhs374*normalslave(2,1);
        lhs(16,15)=-clhs375*normalslave(2,1);
        lhs(16,16)=-clhs376*normalslave(2,1);
        lhs(16,17)=-clhs377*normalslave(2,1);
        lhs(16,18)=-clhs378*normalslave(2,1);
        lhs(16,19)=-clhs379*normalslave(2,1);
        lhs(16,20)=-clhs380*normalslave(2,1);
        lhs(16,21)=-clhs381*normalslave(2,1);
        lhs(16,22)=-clhs382*normalslave(2,1);
        lhs(16,23)=-clhs383*normalslave(2,1);
        lhs(16,24)=0;
        lhs(16,25)=0;
        lhs(16,26)=-clhs25*clhs250;
        lhs(16,27)=0;
        lhs(17,0)=clhs25*clhs360;
        lhs(17,1)=clhs25*clhs361;
        lhs(17,2)=clhs25*clhs362;
        lhs(17,3)=clhs25*clhs363;
        lhs(17,4)=clhs25*clhs364;
        lhs(17,5)=clhs25*clhs365;
        lhs(17,6)=clhs25*clhs366;
        lhs(17,7)=clhs25*clhs367;
        lhs(17,8)=clhs25*clhs368;
        lhs(17,9)=clhs25*clhs369;
        lhs(17,10)=clhs25*clhs370;
        lhs(17,11)=clhs25*clhs371;
        lhs(17,12)=-clhs372*normalslave(2,2);
        lhs(17,13)=-clhs373*normalslave(2,2);
        lhs(17,14)=-clhs374*normalslave(2,2);
        lhs(17,15)=-clhs375*normalslave(2,2);
        lhs(17,16)=-clhs376*normalslave(2,2);
        lhs(17,17)=-clhs377*normalslave(2,2);
        lhs(17,18)=-clhs378*normalslave(2,2);
        lhs(17,19)=-clhs379*normalslave(2,2);
        lhs(17,20)=-clhs380*normalslave(2,2);
        lhs(17,21)=-clhs381*normalslave(2,2);
        lhs(17,22)=-clhs382*normalslave(2,2);
        lhs(17,23)=-clhs383*normalslave(2,2);
        lhs(17,24)=0;
        lhs(17,25)=0;
        lhs(17,26)=-clhs25*clhs251;
        lhs(17,27)=0;
        lhs(18,0)=clhs27*clhs324;
        lhs(18,1)=clhs27*clhs325;
        lhs(18,2)=clhs27*clhs326;
        lhs(18,3)=clhs27*clhs327;
        lhs(18,4)=clhs27*clhs328;
        lhs(18,5)=clhs27*clhs329;
        lhs(18,6)=clhs27*clhs330;
        lhs(18,7)=clhs27*clhs331;
        lhs(18,8)=clhs27*clhs332;
        lhs(18,9)=clhs27*clhs333;
        lhs(18,10)=clhs27*clhs334;
        lhs(18,11)=clhs27*clhs335;
        lhs(18,12)=-clhs384*normalslave(2,0);
        lhs(18,13)=-clhs385*normalslave(2,0);
        lhs(18,14)=-clhs386*normalslave(2,0);
        lhs(18,15)=-clhs387*normalslave(2,0);
        lhs(18,16)=-clhs388*normalslave(2,0);
        lhs(18,17)=-clhs389*normalslave(2,0);
        lhs(18,18)=-clhs390*normalslave(2,0);
        lhs(18,19)=-clhs391*normalslave(2,0);
        lhs(18,20)=-clhs392*normalslave(2,0);
        lhs(18,21)=-clhs393*normalslave(2,0);
        lhs(18,22)=-clhs394*normalslave(2,0);
        lhs(18,23)=-clhs395*normalslave(2,0);
        lhs(18,24)=0;
        lhs(18,25)=0;
        lhs(18,26)=-clhs249*clhs27;
        lhs(18,27)=0;
        lhs(19,0)=clhs27*clhs348;
        lhs(19,1)=clhs27*clhs349;
        lhs(19,2)=clhs27*clhs350;
        lhs(19,3)=clhs27*clhs351;
        lhs(19,4)=clhs27*clhs352;
        lhs(19,5)=clhs27*clhs353;
        lhs(19,6)=clhs27*clhs354;
        lhs(19,7)=clhs27*clhs355;
        lhs(19,8)=clhs27*clhs356;
        lhs(19,9)=clhs27*clhs357;
        lhs(19,10)=clhs27*clhs358;
        lhs(19,11)=clhs27*clhs359;
        lhs(19,12)=-clhs384*normalslave(2,1);
        lhs(19,13)=-clhs385*normalslave(2,1);
        lhs(19,14)=-clhs386*normalslave(2,1);
        lhs(19,15)=-clhs387*normalslave(2,1);
        lhs(19,16)=-clhs388*normalslave(2,1);
        lhs(19,17)=-clhs389*normalslave(2,1);
        lhs(19,18)=-clhs390*normalslave(2,1);
        lhs(19,19)=-clhs391*normalslave(2,1);
        lhs(19,20)=-clhs392*normalslave(2,1);
        lhs(19,21)=-clhs393*normalslave(2,1);
        lhs(19,22)=-clhs394*normalslave(2,1);
        lhs(19,23)=-clhs395*normalslave(2,1);
        lhs(19,24)=0;
        lhs(19,25)=0;
        lhs(19,26)=-clhs250*clhs27;
        lhs(19,27)=0;
        lhs(20,0)=clhs27*clhs360;
        lhs(20,1)=clhs27*clhs361;
        lhs(20,2)=clhs27*clhs362;
        lhs(20,3)=clhs27*clhs363;
        lhs(20,4)=clhs27*clhs364;
        lhs(20,5)=clhs27*clhs365;
        lhs(20,6)=clhs27*clhs366;
        lhs(20,7)=clhs27*clhs367;
        lhs(20,8)=clhs27*clhs368;
        lhs(20,9)=clhs27*clhs369;
        lhs(20,10)=clhs27*clhs370;
        lhs(20,11)=clhs27*clhs371;
        lhs(20,12)=-clhs384*normalslave(2,2);
        lhs(20,13)=-clhs385*normalslave(2,2);
        lhs(20,14)=-clhs386*normalslave(2,2);
        lhs(20,15)=-clhs387*normalslave(2,2);
        lhs(20,16)=-clhs388*normalslave(2,2);
        lhs(20,17)=-clhs389*normalslave(2,2);
        lhs(20,18)=-clhs390*normalslave(2,2);
        lhs(20,19)=-clhs391*normalslave(2,2);
        lhs(20,20)=-clhs392*normalslave(2,2);
        lhs(20,21)=-clhs393*normalslave(2,2);
        lhs(20,22)=-clhs394*normalslave(2,2);
        lhs(20,23)=-clhs395*normalslave(2,2);
        lhs(20,24)=0;
        lhs(20,25)=0;
        lhs(20,26)=-clhs251*clhs27;
        lhs(20,27)=0;
        lhs(21,0)=clhs29*clhs324;
        lhs(21,1)=clhs29*clhs325;
        lhs(21,2)=clhs29*clhs326;
        lhs(21,3)=clhs29*clhs327;
        lhs(21,4)=clhs29*clhs328;
        lhs(21,5)=clhs29*clhs329;
        lhs(21,6)=clhs29*clhs330;
        lhs(21,7)=clhs29*clhs331;
        lhs(21,8)=clhs29*clhs332;
        lhs(21,9)=clhs29*clhs333;
        lhs(21,10)=clhs29*clhs334;
        lhs(21,11)=clhs29*clhs335;
        lhs(21,12)=-clhs396*normalslave(2,0);
        lhs(21,13)=-clhs397*normalslave(2,0);
        lhs(21,14)=-clhs398*normalslave(2,0);
        lhs(21,15)=-clhs399*normalslave(2,0);
        lhs(21,16)=-clhs400*normalslave(2,0);
        lhs(21,17)=-clhs401*normalslave(2,0);
        lhs(21,18)=-clhs402*normalslave(2,0);
        lhs(21,19)=-clhs403*normalslave(2,0);
        lhs(21,20)=-clhs404*normalslave(2,0);
        lhs(21,21)=-clhs405*normalslave(2,0);
        lhs(21,22)=-clhs406*normalslave(2,0);
        lhs(21,23)=-clhs407*normalslave(2,0);
        lhs(21,24)=0;
        lhs(21,25)=0;
        lhs(21,26)=-clhs249*clhs29;
        lhs(21,27)=0;
        lhs(22,0)=clhs29*clhs348;
        lhs(22,1)=clhs29*clhs349;
        lhs(22,2)=clhs29*clhs350;
        lhs(22,3)=clhs29*clhs351;
        lhs(22,4)=clhs29*clhs352;
        lhs(22,5)=clhs29*clhs353;
        lhs(22,6)=clhs29*clhs354;
        lhs(22,7)=clhs29*clhs355;
        lhs(22,8)=clhs29*clhs356;
        lhs(22,9)=clhs29*clhs357;
        lhs(22,10)=clhs29*clhs358;
        lhs(22,11)=clhs29*clhs359;
        lhs(22,12)=-clhs396*normalslave(2,1);
        lhs(22,13)=-clhs397*normalslave(2,1);
        lhs(22,14)=-clhs398*normalslave(2,1);
        lhs(22,15)=-clhs399*normalslave(2,1);
        lhs(22,16)=-clhs400*normalslave(2,1);
        lhs(22,17)=-clhs401*normalslave(2,1);
        lhs(22,18)=-clhs402*normalslave(2,1);
        lhs(22,19)=-clhs403*normalslave(2,1);
        lhs(22,20)=-clhs404*normalslave(2,1);
        lhs(22,21)=-clhs405*normalslave(2,1);
        lhs(22,22)=-clhs406*normalslave(2,1);
        lhs(22,23)=-clhs407*normalslave(2,1);
        lhs(22,24)=0;
        lhs(22,25)=0;
        lhs(22,26)=-clhs250*clhs29;
        lhs(22,27)=0;
        lhs(23,0)=clhs29*clhs360;
        lhs(23,1)=clhs29*clhs361;
        lhs(23,2)=clhs29*clhs362;
        lhs(23,3)=clhs29*clhs363;
        lhs(23,4)=clhs29*clhs364;
        lhs(23,5)=clhs29*clhs365;
        lhs(23,6)=clhs29*clhs366;
        lhs(23,7)=clhs29*clhs367;
        lhs(23,8)=clhs29*clhs368;
        lhs(23,9)=clhs29*clhs369;
        lhs(23,10)=clhs29*clhs370;
        lhs(23,11)=clhs29*clhs371;
        lhs(23,12)=-clhs396*normalslave(2,2);
        lhs(23,13)=-clhs397*normalslave(2,2);
        lhs(23,14)=-clhs398*normalslave(2,2);
        lhs(23,15)=-clhs399*normalslave(2,2);
        lhs(23,16)=-clhs400*normalslave(2,2);
        lhs(23,17)=-clhs401*normalslave(2,2);
        lhs(23,18)=-clhs402*normalslave(2,2);
        lhs(23,19)=-clhs403*normalslave(2,2);
        lhs(23,20)=-clhs404*normalslave(2,2);
        lhs(23,21)=-clhs405*normalslave(2,2);
        lhs(23,22)=-clhs406*normalslave(2,2);
        lhs(23,23)=-clhs407*normalslave(2,2);
        lhs(23,24)=0;
        lhs(23,25)=0;
        lhs(23,26)=-clhs251*clhs29;
        lhs(23,27)=0;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs408;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs408;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs20*scale_factor;
        lhs(26,1)=clhs44*scale_factor;
        lhs(26,2)=clhs51*scale_factor;
        lhs(26,3)=clhs58*scale_factor;
        lhs(26,4)=clhs65*scale_factor;
        lhs(26,5)=clhs72*scale_factor;
        lhs(26,6)=clhs79*scale_factor;
        lhs(26,7)=clhs86*scale_factor;
        lhs(26,8)=clhs93*scale_factor;
        lhs(26,9)=clhs100*scale_factor;
        lhs(26,10)=clhs107*scale_factor;
        lhs(26,11)=clhs114*scale_factor;
        lhs(26,12)=-clhs125*scale_factor;
        lhs(26,13)=-clhs136*scale_factor;
        lhs(26,14)=-clhs147*scale_factor;
        lhs(26,15)=-clhs158*scale_factor;
        lhs(26,16)=-clhs169*scale_factor;
        lhs(26,17)=-clhs180*scale_factor;
        lhs(26,18)=-clhs191*scale_factor;
        lhs(26,19)=-clhs202*scale_factor;
        lhs(26,20)=-clhs213*scale_factor;
        lhs(26,21)=-clhs224*scale_factor;
        lhs(26,22)=-clhs235*scale_factor;
        lhs(26,23)=-clhs246*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs408;
    }
    else if (rActiveInactive == 12 )
    {
        const double clhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(2,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(2,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(2,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(2,0)*penalty_parameter;
        const double clhs22 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(3,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(3,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(3,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(3,0)*penalty_parameter;
        const double clhs32 =     X1(0,0) + u1(0,0);
        const double clhs33 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs34 =     X1(1,0) + u1(1,0);
        const double clhs35 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs36 =     X1(2,0) + u1(2,0);
        const double clhs37 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs38 =     X1(3,0) + u1(3,0);
        const double clhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs40 =     X1(0,1) + u1(0,1);
        const double clhs41 =     X1(1,1) + u1(1,1);
        const double clhs42 =     X1(2,1) + u1(2,1);
        const double clhs43 =     X1(3,1) + u1(3,1);
        const double clhs44 =     X1(0,2) + u1(0,2);
        const double clhs45 =     X1(1,2) + u1(1,2);
        const double clhs46 =     X1(2,2) + u1(2,2);
        const double clhs47 =     X1(3,2) + u1(3,2);
        const double clhs48 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs32*clhs33 + clhs34*clhs35 + clhs36*clhs37 + clhs38*clhs39) + normalslave(2,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs33*clhs40 + clhs35*clhs41 + clhs37*clhs42 + clhs39*clhs43 - clhs6*clhs7) + normalslave(2,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs44 + clhs35*clhs45 + clhs37*clhs46 + clhs39*clhs47));
        const double clhs49 =     clhs48*normalslave(2,0);
        const double clhs50 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs51 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs52 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs53 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs32*clhs50 + clhs34*clhs51 + clhs36*clhs52 + clhs38*clhs53) + normalslave(3,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs40*clhs50 + clhs41*clhs51 + clhs42*clhs52 + clhs43*clhs53) + normalslave(3,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs44*clhs50 + clhs45*clhs51 + clhs46*clhs52 + clhs47*clhs53));
        const double clhs55 =     clhs54*normalslave(3,0);
        const double clhs56 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs57 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs60 =     normalslave(2,0)*(clhs16*clhs56 + clhs17*clhs57 + clhs18*clhs58 + clhs19*clhs59) + normalslave(2,1)*(clhs0 + clhs1*clhs56 + clhs3*clhs57 + clhs58*clhs6 + clhs59*clhs9) + normalslave(2,2)*(clhs12*clhs56 + clhs13*clhs57 + clhs14*clhs58 + clhs15*clhs59);
        const double clhs61 =     clhs60*normalslave(2,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs65 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs66 =     normalslave(3,0)*(clhs16*clhs62 + clhs17*clhs63 + clhs18*clhs64 + clhs19*clhs65) + normalslave(3,1)*(clhs1*clhs62 + clhs22 + clhs3*clhs63 + clhs6*clhs64 + clhs65*clhs9) + normalslave(3,2)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64 + clhs15*clhs65);
        const double clhs67 =     clhs66*normalslave(3,0)*penalty_parameter;
        const double clhs68 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs69 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs70 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs71 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs72 =     normalslave(2,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(2,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(2,2)*(clhs0 + clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71);
        const double clhs73 =     clhs72*normalslave(2,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs75 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs76 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs77 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs78 =     normalslave(3,0)*(clhs16*clhs74 + clhs17*clhs75 + clhs18*clhs76 + clhs19*clhs77) + normalslave(3,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs6*clhs76 + clhs77*clhs9) + normalslave(3,2)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76 + clhs15*clhs77 + clhs22);
        const double clhs79 =     clhs78*normalslave(3,0)*penalty_parameter;
        const double clhs80 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs81 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs82 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs83 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs84 =     normalslave(2,0)*(clhs16*clhs80 + clhs17*clhs81 + clhs18*clhs82 + clhs19*clhs83 + clhs4) + normalslave(2,1)*(clhs1*clhs80 + clhs3*clhs81 + clhs6*clhs82 + clhs83*clhs9) + normalslave(2,2)*(clhs12*clhs80 + clhs13*clhs81 + clhs14*clhs82 + clhs15*clhs83);
        const double clhs85 =     clhs84*normalslave(2,0)*penalty_parameter;
        const double clhs86 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs87 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs90 =     normalslave(3,0)*(clhs16*clhs86 + clhs17*clhs87 + clhs18*clhs88 + clhs19*clhs89 + clhs24) + normalslave(3,1)*(clhs1*clhs86 + clhs3*clhs87 + clhs6*clhs88 + clhs89*clhs9) + normalslave(3,2)*(clhs12*clhs86 + clhs13*clhs87 + clhs14*clhs88 + clhs15*clhs89);
        const double clhs91 =     clhs90*normalslave(3,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs93 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs94 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs95 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs96 =     normalslave(2,0)*(clhs16*clhs92 + clhs17*clhs93 + clhs18*clhs94 + clhs19*clhs95) + normalslave(2,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs4 + clhs6*clhs94 + clhs9*clhs95) + normalslave(2,2)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs15*clhs95);
        const double clhs97 =     clhs96*normalslave(2,0)*penalty_parameter;
        const double clhs98 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs99 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs100 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs101 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs102 =     normalslave(3,0)*(clhs100*clhs18 + clhs101*clhs19 + clhs16*clhs98 + clhs17*clhs99) + normalslave(3,1)*(clhs1*clhs98 + clhs100*clhs6 + clhs101*clhs9 + clhs24 + clhs3*clhs99) + normalslave(3,2)*(clhs100*clhs14 + clhs101*clhs15 + clhs12*clhs98 + clhs13*clhs99);
        const double clhs103 =     clhs102*normalslave(3,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs105 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs106 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs107 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs108 =     normalslave(2,0)*(clhs104*clhs16 + clhs105*clhs17 + clhs106*clhs18 + clhs107*clhs19) + normalslave(2,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs107*clhs9) + normalslave(2,2)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14 + clhs107*clhs15 + clhs4);
        const double clhs109 =     clhs108*normalslave(2,0)*penalty_parameter;
        const double clhs110 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs111 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs112 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs113 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs114 =     normalslave(3,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(3,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(3,2)*(clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15 + clhs24);
        const double clhs115 =     clhs114*normalslave(3,0)*penalty_parameter;
        const double clhs116 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs117 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs118 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs119 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs120 =     normalslave(2,0)*(clhs116*clhs16 + clhs117*clhs17 + clhs118*clhs18 + clhs119*clhs19 + clhs7) + normalslave(2,1)*(clhs1*clhs116 + clhs117*clhs3 + clhs118*clhs6 + clhs119*clhs9) + normalslave(2,2)*(clhs116*clhs12 + clhs117*clhs13 + clhs118*clhs14 + clhs119*clhs15);
        const double clhs121 =     clhs120*normalslave(2,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs123 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs124 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs125 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs126 =     normalslave(3,0)*(clhs122*clhs16 + clhs123*clhs17 + clhs124*clhs18 + clhs125*clhs19 + clhs26) + normalslave(3,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6 + clhs125*clhs9) + normalslave(3,2)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14 + clhs125*clhs15);
        const double clhs127 =     clhs126*normalslave(3,0)*penalty_parameter;
        const double clhs128 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs129 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs130 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs131 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs132 =     normalslave(2,0)*(clhs128*clhs16 + clhs129*clhs17 + clhs130*clhs18 + clhs131*clhs19) + normalslave(2,1)*(clhs1*clhs128 + clhs129*clhs3 + clhs130*clhs6 + clhs131*clhs9 + clhs7) + normalslave(2,2)*(clhs12*clhs128 + clhs129*clhs13 + clhs130*clhs14 + clhs131*clhs15);
        const double clhs133 =     clhs132*normalslave(2,0)*penalty_parameter;
        const double clhs134 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs135 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs136 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs137 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs138 =     normalslave(3,0)*(clhs134*clhs16 + clhs135*clhs17 + clhs136*clhs18 + clhs137*clhs19) + normalslave(3,1)*(clhs1*clhs134 + clhs135*clhs3 + clhs136*clhs6 + clhs137*clhs9 + clhs26) + normalslave(3,2)*(clhs12*clhs134 + clhs13*clhs135 + clhs136*clhs14 + clhs137*clhs15);
        const double clhs139 =     clhs138*normalslave(3,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs141 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs142 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs143 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs144 =     normalslave(2,0)*(clhs140*clhs16 + clhs141*clhs17 + clhs142*clhs18 + clhs143*clhs19) + normalslave(2,1)*(clhs1*clhs140 + clhs141*clhs3 + clhs142*clhs6 + clhs143*clhs9) + normalslave(2,2)*(clhs12*clhs140 + clhs13*clhs141 + clhs14*clhs142 + clhs143*clhs15 + clhs7);
        const double clhs145 =     clhs144*normalslave(2,0)*penalty_parameter;
        const double clhs146 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs147 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs148 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs149 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs150 =     normalslave(3,0)*(clhs146*clhs16 + clhs147*clhs17 + clhs148*clhs18 + clhs149*clhs19) + normalslave(3,1)*(clhs1*clhs146 + clhs147*clhs3 + clhs148*clhs6 + clhs149*clhs9) + normalslave(3,2)*(clhs12*clhs146 + clhs13*clhs147 + clhs14*clhs148 + clhs149*clhs15 + clhs26);
        const double clhs151 =     clhs150*normalslave(3,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs153 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs154 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs155 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs156 =     normalslave(2,0)*(clhs10 + clhs152*clhs16 + clhs153*clhs17 + clhs154*clhs18 + clhs155*clhs19) + normalslave(2,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs155*clhs9) + normalslave(2,2)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154 + clhs15*clhs155);
        const double clhs157 =     clhs156*normalslave(2,0)*penalty_parameter;
        const double clhs158 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs159 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs160 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs161 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs162 =     normalslave(3,0)*(clhs158*clhs16 + clhs159*clhs17 + clhs160*clhs18 + clhs161*clhs19 + clhs28) + normalslave(3,1)*(clhs1*clhs158 + clhs159*clhs3 + clhs160*clhs6 + clhs161*clhs9) + normalslave(3,2)*(clhs12*clhs158 + clhs13*clhs159 + clhs14*clhs160 + clhs15*clhs161);
        const double clhs163 =     clhs162*normalslave(3,0)*penalty_parameter;
        const double clhs164 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs165 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs166 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs167 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs168 =     normalslave(2,0)*(clhs16*clhs164 + clhs165*clhs17 + clhs166*clhs18 + clhs167*clhs19) + normalslave(2,1)*(clhs1*clhs164 + clhs10 + clhs165*clhs3 + clhs166*clhs6 + clhs167*clhs9) + normalslave(2,2)*(clhs12*clhs164 + clhs13*clhs165 + clhs14*clhs166 + clhs15*clhs167);
        const double clhs169 =     clhs168*normalslave(2,0)*penalty_parameter;
        const double clhs170 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs171 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs172 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs173 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs174 =     normalslave(3,0)*(clhs16*clhs170 + clhs17*clhs171 + clhs172*clhs18 + clhs173*clhs19) + normalslave(3,1)*(clhs1*clhs170 + clhs171*clhs3 + clhs172*clhs6 + clhs173*clhs9 + clhs28) + normalslave(3,2)*(clhs12*clhs170 + clhs13*clhs171 + clhs14*clhs172 + clhs15*clhs173);
        const double clhs175 =     clhs174*normalslave(3,0)*penalty_parameter;
        const double clhs176 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs177 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs178 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs179 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs180 =     normalslave(2,0)*(clhs16*clhs176 + clhs17*clhs177 + clhs178*clhs18 + clhs179*clhs19) + normalslave(2,1)*(clhs1*clhs176 + clhs177*clhs3 + clhs178*clhs6 + clhs179*clhs9) + normalslave(2,2)*(clhs10 + clhs12*clhs176 + clhs13*clhs177 + clhs14*clhs178 + clhs15*clhs179);
        const double clhs181 =     clhs180*normalslave(2,0)*penalty_parameter;
        const double clhs182 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs183 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs184 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs185 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs186 =     normalslave(3,0)*(clhs16*clhs182 + clhs17*clhs183 + clhs18*clhs184 + clhs185*clhs19) + normalslave(3,1)*(clhs1*clhs182 + clhs183*clhs3 + clhs184*clhs6 + clhs185*clhs9) + normalslave(3,2)*(clhs12*clhs182 + clhs13*clhs183 + clhs14*clhs184 + clhs15*clhs185 + clhs28);
        const double clhs187 =     clhs186*normalslave(3,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs189 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs190 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs191 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs192 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs193 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs194 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs195 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs197 =     normalslave(2,0)*(-clhs16*clhs188 - clhs17*clhs194 - clhs18*clhs195 - clhs19*clhs196 + clhs190*clhs32 + clhs191*clhs34 + clhs192*clhs36 + clhs193*clhs38 + clhs33) + normalslave(2,1)*(-clhs1*clhs188 + clhs190*clhs40 + clhs191*clhs41 + clhs192*clhs42 + clhs193*clhs43 - clhs194*clhs3 - clhs195*clhs6 - clhs196*clhs9) + normalslave(2,2)*(-clhs12*clhs188 - clhs13*clhs194 - clhs14*clhs195 - clhs15*clhs196 + clhs190*clhs44 + clhs191*clhs45 + clhs192*clhs46 + clhs193*clhs47);
        const double clhs198 =     clhs197*normalslave(2,0)*penalty_parameter;
        const double clhs199 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs200 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs201 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs202 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs203 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs204 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs205 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs206 =     normalslave(3,0)*(-clhs16*clhs189 - clhs17*clhs203 - clhs18*clhs204 - clhs19*clhs205 + clhs199*clhs32 + clhs200*clhs34 + clhs201*clhs36 + clhs202*clhs38 + clhs50) + normalslave(3,1)*(-clhs1*clhs189 + clhs199*clhs40 + clhs200*clhs41 + clhs201*clhs42 + clhs202*clhs43 - clhs203*clhs3 - clhs204*clhs6 - clhs205*clhs9) + normalslave(3,2)*(-clhs12*clhs189 - clhs13*clhs203 - clhs14*clhs204 - clhs15*clhs205 + clhs199*clhs44 + clhs200*clhs45 + clhs201*clhs46 + clhs202*clhs47);
        const double clhs207 =     clhs206*normalslave(3,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs210 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs211 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs216 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs217 =     normalslave(2,0)*(-clhs16*clhs208 - clhs17*clhs214 - clhs18*clhs215 - clhs19*clhs216 + clhs210*clhs32 + clhs211*clhs34 + clhs212*clhs36 + clhs213*clhs38) + normalslave(2,1)*(-clhs1*clhs208 + clhs210*clhs40 + clhs211*clhs41 + clhs212*clhs42 + clhs213*clhs43 - clhs214*clhs3 - clhs215*clhs6 - clhs216*clhs9 + clhs33) + normalslave(2,2)*(-clhs12*clhs208 - clhs13*clhs214 - clhs14*clhs215 - clhs15*clhs216 + clhs210*clhs44 + clhs211*clhs45 + clhs212*clhs46 + clhs213*clhs47);
        const double clhs218 =     clhs217*normalslave(2,0)*penalty_parameter;
        const double clhs219 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs221 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs224 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs226 =     normalslave(3,0)*(-clhs16*clhs209 - clhs17*clhs223 - clhs18*clhs224 - clhs19*clhs225 + clhs219*clhs32 + clhs220*clhs34 + clhs221*clhs36 + clhs222*clhs38) + normalslave(3,1)*(-clhs1*clhs209 + clhs219*clhs40 + clhs220*clhs41 + clhs221*clhs42 + clhs222*clhs43 - clhs223*clhs3 - clhs224*clhs6 - clhs225*clhs9 + clhs50) + normalslave(3,2)*(-clhs12*clhs209 - clhs13*clhs223 - clhs14*clhs224 - clhs15*clhs225 + clhs219*clhs44 + clhs220*clhs45 + clhs221*clhs46 + clhs222*clhs47);
        const double clhs227 =     clhs226*normalslave(3,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs229 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs231 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs232 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs233 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs234 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs235 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs236 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs237 =     normalslave(2,0)*(-clhs16*clhs228 - clhs17*clhs234 - clhs18*clhs235 - clhs19*clhs236 + clhs230*clhs32 + clhs231*clhs34 + clhs232*clhs36 + clhs233*clhs38) + normalslave(2,1)*(-clhs1*clhs228 + clhs230*clhs40 + clhs231*clhs41 + clhs232*clhs42 + clhs233*clhs43 - clhs234*clhs3 - clhs235*clhs6 - clhs236*clhs9) + normalslave(2,2)*(-clhs12*clhs228 - clhs13*clhs234 - clhs14*clhs235 - clhs15*clhs236 + clhs230*clhs44 + clhs231*clhs45 + clhs232*clhs46 + clhs233*clhs47 + clhs33);
        const double clhs238 =     clhs237*normalslave(2,0)*penalty_parameter;
        const double clhs239 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs240 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs241 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs242 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs243 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs244 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs246 =     normalslave(3,0)*(-clhs16*clhs229 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs239*clhs32 + clhs240*clhs34 + clhs241*clhs36 + clhs242*clhs38) + normalslave(3,1)*(-clhs1*clhs229 + clhs239*clhs40 + clhs240*clhs41 + clhs241*clhs42 + clhs242*clhs43 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(3,2)*(-clhs12*clhs229 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs44 + clhs240*clhs45 + clhs241*clhs46 + clhs242*clhs47 + clhs50);
        const double clhs247 =     clhs246*normalslave(3,0)*penalty_parameter;
        const double clhs248 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs249 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs250 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs251 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs254 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs257 =     normalslave(2,0)*(-clhs16*clhs248 - clhs17*clhs254 - clhs18*clhs255 - clhs19*clhs256 + clhs250*clhs32 + clhs251*clhs34 + clhs252*clhs36 + clhs253*clhs38 + clhs35) + normalslave(2,1)*(-clhs1*clhs248 + clhs250*clhs40 + clhs251*clhs41 + clhs252*clhs42 + clhs253*clhs43 - clhs254*clhs3 - clhs255*clhs6 - clhs256*clhs9) + normalslave(2,2)*(-clhs12*clhs248 - clhs13*clhs254 - clhs14*clhs255 - clhs15*clhs256 + clhs250*clhs44 + clhs251*clhs45 + clhs252*clhs46 + clhs253*clhs47);
        const double clhs258 =     clhs257*normalslave(2,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs262 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs264 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs265 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs266 =     normalslave(3,0)*(-clhs16*clhs249 - clhs17*clhs263 - clhs18*clhs264 - clhs19*clhs265 + clhs259*clhs32 + clhs260*clhs34 + clhs261*clhs36 + clhs262*clhs38 + clhs51) + normalslave(3,1)*(-clhs1*clhs249 + clhs259*clhs40 + clhs260*clhs41 + clhs261*clhs42 + clhs262*clhs43 - clhs263*clhs3 - clhs264*clhs6 - clhs265*clhs9) + normalslave(3,2)*(-clhs12*clhs249 - clhs13*clhs263 - clhs14*clhs264 - clhs15*clhs265 + clhs259*clhs44 + clhs260*clhs45 + clhs261*clhs46 + clhs262*clhs47);
        const double clhs267 =     clhs266*normalslave(3,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs269 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs270 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs271 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs272 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs273 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs276 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs277 =     normalslave(2,0)*(-clhs16*clhs268 - clhs17*clhs274 - clhs18*clhs275 - clhs19*clhs276 + clhs270*clhs32 + clhs271*clhs34 + clhs272*clhs36 + clhs273*clhs38) + normalslave(2,1)*(-clhs1*clhs268 + clhs270*clhs40 + clhs271*clhs41 + clhs272*clhs42 + clhs273*clhs43 - clhs274*clhs3 - clhs275*clhs6 - clhs276*clhs9 + clhs35) + normalslave(2,2)*(-clhs12*clhs268 - clhs13*clhs274 - clhs14*clhs275 - clhs15*clhs276 + clhs270*clhs44 + clhs271*clhs45 + clhs272*clhs46 + clhs273*clhs47);
        const double clhs278 =     clhs277*normalslave(2,0)*penalty_parameter;
        const double clhs279 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs280 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs281 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs282 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs283 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs284 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs285 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs286 =     normalslave(3,0)*(-clhs16*clhs269 - clhs17*clhs283 - clhs18*clhs284 - clhs19*clhs285 + clhs279*clhs32 + clhs280*clhs34 + clhs281*clhs36 + clhs282*clhs38) + normalslave(3,1)*(-clhs1*clhs269 + clhs279*clhs40 + clhs280*clhs41 + clhs281*clhs42 + clhs282*clhs43 - clhs283*clhs3 - clhs284*clhs6 - clhs285*clhs9 + clhs51) + normalslave(3,2)*(-clhs12*clhs269 - clhs13*clhs283 - clhs14*clhs284 - clhs15*clhs285 + clhs279*clhs44 + clhs280*clhs45 + clhs281*clhs46 + clhs282*clhs47);
        const double clhs287 =     clhs286*normalslave(3,0)*penalty_parameter;
        const double clhs288 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs289 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs290 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs291 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs292 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs293 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs294 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs295 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs296 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs297 =     normalslave(2,0)*(-clhs16*clhs288 - clhs17*clhs294 - clhs18*clhs295 - clhs19*clhs296 + clhs290*clhs32 + clhs291*clhs34 + clhs292*clhs36 + clhs293*clhs38) + normalslave(2,1)*(-clhs1*clhs288 + clhs290*clhs40 + clhs291*clhs41 + clhs292*clhs42 + clhs293*clhs43 - clhs294*clhs3 - clhs295*clhs6 - clhs296*clhs9) + normalslave(2,2)*(-clhs12*clhs288 - clhs13*clhs294 - clhs14*clhs295 - clhs15*clhs296 + clhs290*clhs44 + clhs291*clhs45 + clhs292*clhs46 + clhs293*clhs47 + clhs35);
        const double clhs298 =     clhs297*normalslave(2,0)*penalty_parameter;
        const double clhs299 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs305 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs306 =     normalslave(3,0)*(-clhs16*clhs289 - clhs17*clhs303 - clhs18*clhs304 - clhs19*clhs305 + clhs299*clhs32 + clhs300*clhs34 + clhs301*clhs36 + clhs302*clhs38) + normalslave(3,1)*(-clhs1*clhs289 + clhs299*clhs40 - clhs3*clhs303 + clhs300*clhs41 + clhs301*clhs42 + clhs302*clhs43 - clhs304*clhs6 - clhs305*clhs9) + normalslave(3,2)*(-clhs12*clhs289 - clhs13*clhs303 - clhs14*clhs304 - clhs15*clhs305 + clhs299*clhs44 + clhs300*clhs45 + clhs301*clhs46 + clhs302*clhs47 + clhs51);
        const double clhs307 =     clhs306*normalslave(3,0)*penalty_parameter;
        const double clhs308 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs309 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs310 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs311 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs312 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs313 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs314 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs315 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs316 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs317 =     normalslave(2,0)*(-clhs16*clhs308 - clhs17*clhs314 - clhs18*clhs315 - clhs19*clhs316 + clhs310*clhs32 + clhs311*clhs34 + clhs312*clhs36 + clhs313*clhs38 + clhs37) + normalslave(2,1)*(-clhs1*clhs308 - clhs3*clhs314 + clhs310*clhs40 + clhs311*clhs41 + clhs312*clhs42 + clhs313*clhs43 - clhs315*clhs6 - clhs316*clhs9) + normalslave(2,2)*(-clhs12*clhs308 - clhs13*clhs314 - clhs14*clhs315 - clhs15*clhs316 + clhs310*clhs44 + clhs311*clhs45 + clhs312*clhs46 + clhs313*clhs47);
        const double clhs318 =     clhs317*normalslave(2,0)*penalty_parameter;
        const double clhs319 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs320 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs321 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs322 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs324 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs325 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs326 =     normalslave(3,0)*(-clhs16*clhs309 - clhs17*clhs323 - clhs18*clhs324 - clhs19*clhs325 + clhs319*clhs32 + clhs320*clhs34 + clhs321*clhs36 + clhs322*clhs38 + clhs52) + normalslave(3,1)*(-clhs1*clhs309 - clhs3*clhs323 + clhs319*clhs40 + clhs320*clhs41 + clhs321*clhs42 + clhs322*clhs43 - clhs324*clhs6 - clhs325*clhs9) + normalslave(3,2)*(-clhs12*clhs309 - clhs13*clhs323 - clhs14*clhs324 - clhs15*clhs325 + clhs319*clhs44 + clhs320*clhs45 + clhs321*clhs46 + clhs322*clhs47);
        const double clhs327 =     clhs326*normalslave(3,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs329 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs330 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs331 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs332 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs333 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs334 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs335 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs336 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs337 =     normalslave(2,0)*(-clhs16*clhs328 - clhs17*clhs334 - clhs18*clhs335 - clhs19*clhs336 + clhs32*clhs330 + clhs331*clhs34 + clhs332*clhs36 + clhs333*clhs38) + normalslave(2,1)*(-clhs1*clhs328 - clhs3*clhs334 + clhs330*clhs40 + clhs331*clhs41 + clhs332*clhs42 + clhs333*clhs43 - clhs335*clhs6 - clhs336*clhs9 + clhs37) + normalslave(2,2)*(-clhs12*clhs328 - clhs13*clhs334 - clhs14*clhs335 - clhs15*clhs336 + clhs330*clhs44 + clhs331*clhs45 + clhs332*clhs46 + clhs333*clhs47);
        const double clhs338 =     clhs337*normalslave(2,0)*penalty_parameter;
        const double clhs339 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs340 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs341 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs342 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs343 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs344 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs345 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs346 =     normalslave(3,0)*(-clhs16*clhs329 - clhs17*clhs343 - clhs18*clhs344 - clhs19*clhs345 + clhs32*clhs339 + clhs34*clhs340 + clhs341*clhs36 + clhs342*clhs38) + normalslave(3,1)*(-clhs1*clhs329 - clhs3*clhs343 + clhs339*clhs40 + clhs340*clhs41 + clhs341*clhs42 + clhs342*clhs43 - clhs344*clhs6 - clhs345*clhs9 + clhs52) + normalslave(3,2)*(-clhs12*clhs329 - clhs13*clhs343 - clhs14*clhs344 - clhs15*clhs345 + clhs339*clhs44 + clhs340*clhs45 + clhs341*clhs46 + clhs342*clhs47);
        const double clhs347 =     clhs346*normalslave(3,0)*penalty_parameter;
        const double clhs348 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs349 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs350 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs351 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs352 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs353 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs354 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs355 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs356 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs357 =     normalslave(2,0)*(-clhs16*clhs348 - clhs17*clhs354 - clhs18*clhs355 - clhs19*clhs356 + clhs32*clhs350 + clhs34*clhs351 + clhs352*clhs36 + clhs353*clhs38) + normalslave(2,1)*(-clhs1*clhs348 - clhs3*clhs354 + clhs350*clhs40 + clhs351*clhs41 + clhs352*clhs42 + clhs353*clhs43 - clhs355*clhs6 - clhs356*clhs9) + normalslave(2,2)*(-clhs12*clhs348 - clhs13*clhs354 - clhs14*clhs355 - clhs15*clhs356 + clhs350*clhs44 + clhs351*clhs45 + clhs352*clhs46 + clhs353*clhs47 + clhs37);
        const double clhs358 =     clhs357*normalslave(2,0)*penalty_parameter;
        const double clhs359 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs360 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs361 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs362 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs363 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs364 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs365 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs366 =     normalslave(3,0)*(-clhs16*clhs349 - clhs17*clhs363 - clhs18*clhs364 - clhs19*clhs365 + clhs32*clhs359 + clhs34*clhs360 + clhs36*clhs361 + clhs362*clhs38) + normalslave(3,1)*(-clhs1*clhs349 - clhs3*clhs363 + clhs359*clhs40 + clhs360*clhs41 + clhs361*clhs42 + clhs362*clhs43 - clhs364*clhs6 - clhs365*clhs9) + normalslave(3,2)*(-clhs12*clhs349 - clhs13*clhs363 - clhs14*clhs364 - clhs15*clhs365 + clhs359*clhs44 + clhs360*clhs45 + clhs361*clhs46 + clhs362*clhs47 + clhs52);
        const double clhs367 =     clhs366*normalslave(3,0)*penalty_parameter;
        const double clhs368 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs369 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs370 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs371 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs372 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs373 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs374 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs375 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs376 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs377 =     normalslave(2,0)*(-clhs16*clhs368 - clhs17*clhs374 - clhs18*clhs375 - clhs19*clhs376 + clhs32*clhs370 + clhs34*clhs371 + clhs36*clhs372 + clhs373*clhs38 + clhs39) + normalslave(2,1)*(-clhs1*clhs368 - clhs3*clhs374 + clhs370*clhs40 + clhs371*clhs41 + clhs372*clhs42 + clhs373*clhs43 - clhs375*clhs6 - clhs376*clhs9) + normalslave(2,2)*(-clhs12*clhs368 - clhs13*clhs374 - clhs14*clhs375 - clhs15*clhs376 + clhs370*clhs44 + clhs371*clhs45 + clhs372*clhs46 + clhs373*clhs47);
        const double clhs378 =     clhs377*normalslave(2,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs380 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs381 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs382 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs383 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs384 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs385 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs386 =     normalslave(3,0)*(-clhs16*clhs369 - clhs17*clhs383 - clhs18*clhs384 - clhs19*clhs385 + clhs32*clhs379 + clhs34*clhs380 + clhs36*clhs381 + clhs38*clhs382 + clhs53) + normalslave(3,1)*(-clhs1*clhs369 - clhs3*clhs383 + clhs379*clhs40 + clhs380*clhs41 + clhs381*clhs42 + clhs382*clhs43 - clhs384*clhs6 - clhs385*clhs9) + normalslave(3,2)*(-clhs12*clhs369 - clhs13*clhs383 - clhs14*clhs384 - clhs15*clhs385 + clhs379*clhs44 + clhs380*clhs45 + clhs381*clhs46 + clhs382*clhs47);
        const double clhs387 =     clhs386*normalslave(3,0)*penalty_parameter;
        const double clhs388 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs389 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs390 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs391 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs392 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs393 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs394 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs395 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs396 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs397 =     normalslave(2,0)*(-clhs16*clhs388 - clhs17*clhs394 - clhs18*clhs395 - clhs19*clhs396 + clhs32*clhs390 + clhs34*clhs391 + clhs36*clhs392 + clhs38*clhs393) + normalslave(2,1)*(-clhs1*clhs388 - clhs3*clhs394 + clhs39 + clhs390*clhs40 + clhs391*clhs41 + clhs392*clhs42 + clhs393*clhs43 - clhs395*clhs6 - clhs396*clhs9) + normalslave(2,2)*(-clhs12*clhs388 - clhs13*clhs394 - clhs14*clhs395 - clhs15*clhs396 + clhs390*clhs44 + clhs391*clhs45 + clhs392*clhs46 + clhs393*clhs47);
        const double clhs398 =     clhs397*normalslave(2,0)*penalty_parameter;
        const double clhs399 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs400 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs401 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs402 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs403 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs404 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs405 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs406 =     normalslave(3,0)*(-clhs16*clhs389 - clhs17*clhs403 - clhs18*clhs404 - clhs19*clhs405 + clhs32*clhs399 + clhs34*clhs400 + clhs36*clhs401 + clhs38*clhs402) + normalslave(3,1)*(-clhs1*clhs389 - clhs3*clhs403 + clhs399*clhs40 + clhs400*clhs41 + clhs401*clhs42 + clhs402*clhs43 - clhs404*clhs6 - clhs405*clhs9 + clhs53) + normalslave(3,2)*(-clhs12*clhs389 - clhs13*clhs403 - clhs14*clhs404 - clhs15*clhs405 + clhs399*clhs44 + clhs400*clhs45 + clhs401*clhs46 + clhs402*clhs47);
        const double clhs407 =     clhs406*normalslave(3,0)*penalty_parameter;
        const double clhs408 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs409 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs410 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs411 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs412 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs413 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs414 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs415 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs416 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs417 =     normalslave(2,0)*(-clhs16*clhs408 - clhs17*clhs414 - clhs18*clhs415 - clhs19*clhs416 + clhs32*clhs410 + clhs34*clhs411 + clhs36*clhs412 + clhs38*clhs413) + normalslave(2,1)*(-clhs1*clhs408 - clhs3*clhs414 + clhs40*clhs410 + clhs41*clhs411 + clhs412*clhs42 + clhs413*clhs43 - clhs415*clhs6 - clhs416*clhs9) + normalslave(2,2)*(-clhs12*clhs408 - clhs13*clhs414 - clhs14*clhs415 - clhs15*clhs416 + clhs39 + clhs410*clhs44 + clhs411*clhs45 + clhs412*clhs46 + clhs413*clhs47);
        const double clhs418 =     clhs417*normalslave(2,0)*penalty_parameter;
        const double clhs419 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs420 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs421 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs422 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs423 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs424 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs425 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs426 =     normalslave(3,0)*(-clhs16*clhs409 - clhs17*clhs423 - clhs18*clhs424 - clhs19*clhs425 + clhs32*clhs419 + clhs34*clhs420 + clhs36*clhs421 + clhs38*clhs422) + normalslave(3,1)*(-clhs1*clhs409 - clhs3*clhs423 + clhs40*clhs419 + clhs41*clhs420 + clhs42*clhs421 + clhs422*clhs43 - clhs424*clhs6 - clhs425*clhs9) + normalslave(3,2)*(-clhs12*clhs409 - clhs13*clhs423 - clhs14*clhs424 - clhs15*clhs425 + clhs419*clhs44 + clhs420*clhs45 + clhs421*clhs46 + clhs422*clhs47 + clhs53);
        const double clhs427 =     clhs426*normalslave(3,0)*penalty_parameter;
        const double clhs428 =     normalslave(2,0)*scale_factor;
        const double clhs429 =     normalslave(3,0)*scale_factor;
        const double clhs430 =     clhs20*normalslave(2,1)*penalty_parameter;
        const double clhs431 =     clhs30*normalslave(3,1)*penalty_parameter;
        const double clhs432 =     clhs48*normalslave(2,1);
        const double clhs433 =     clhs54*normalslave(3,1);
        const double clhs434 =     clhs60*normalslave(2,1)*penalty_parameter;
        const double clhs435 =     clhs66*normalslave(3,1)*penalty_parameter;
        const double clhs436 =     clhs72*normalslave(2,1)*penalty_parameter;
        const double clhs437 =     clhs78*normalslave(3,1)*penalty_parameter;
        const double clhs438 =     clhs84*normalslave(2,1)*penalty_parameter;
        const double clhs439 =     clhs90*normalslave(3,1)*penalty_parameter;
        const double clhs440 =     clhs96*normalslave(2,1)*penalty_parameter;
        const double clhs441 =     clhs102*normalslave(3,1)*penalty_parameter;
        const double clhs442 =     clhs108*normalslave(2,1)*penalty_parameter;
        const double clhs443 =     clhs114*normalslave(3,1)*penalty_parameter;
        const double clhs444 =     clhs120*normalslave(2,1)*penalty_parameter;
        const double clhs445 =     clhs126*normalslave(3,1)*penalty_parameter;
        const double clhs446 =     clhs132*normalslave(2,1)*penalty_parameter;
        const double clhs447 =     clhs138*normalslave(3,1)*penalty_parameter;
        const double clhs448 =     clhs144*normalslave(2,1)*penalty_parameter;
        const double clhs449 =     clhs150*normalslave(3,1)*penalty_parameter;
        const double clhs450 =     clhs156*normalslave(2,1)*penalty_parameter;
        const double clhs451 =     clhs162*normalslave(3,1)*penalty_parameter;
        const double clhs452 =     clhs168*normalslave(2,1)*penalty_parameter;
        const double clhs453 =     clhs174*normalslave(3,1)*penalty_parameter;
        const double clhs454 =     clhs180*normalslave(2,1)*penalty_parameter;
        const double clhs455 =     clhs186*normalslave(3,1)*penalty_parameter;
        const double clhs456 =     clhs197*normalslave(2,1)*penalty_parameter;
        const double clhs457 =     clhs206*normalslave(3,1)*penalty_parameter;
        const double clhs458 =     clhs217*normalslave(2,1)*penalty_parameter;
        const double clhs459 =     clhs226*normalslave(3,1)*penalty_parameter;
        const double clhs460 =     clhs237*normalslave(2,1)*penalty_parameter;
        const double clhs461 =     clhs246*normalslave(3,1)*penalty_parameter;
        const double clhs462 =     clhs257*normalslave(2,1)*penalty_parameter;
        const double clhs463 =     clhs266*normalslave(3,1)*penalty_parameter;
        const double clhs464 =     clhs277*normalslave(2,1)*penalty_parameter;
        const double clhs465 =     clhs286*normalslave(3,1)*penalty_parameter;
        const double clhs466 =     clhs297*normalslave(2,1)*penalty_parameter;
        const double clhs467 =     clhs306*normalslave(3,1)*penalty_parameter;
        const double clhs468 =     clhs317*normalslave(2,1)*penalty_parameter;
        const double clhs469 =     clhs326*normalslave(3,1)*penalty_parameter;
        const double clhs470 =     clhs337*normalslave(2,1)*penalty_parameter;
        const double clhs471 =     clhs346*normalslave(3,1)*penalty_parameter;
        const double clhs472 =     clhs357*normalslave(2,1)*penalty_parameter;
        const double clhs473 =     clhs366*normalslave(3,1)*penalty_parameter;
        const double clhs474 =     clhs377*normalslave(2,1)*penalty_parameter;
        const double clhs475 =     clhs386*normalslave(3,1)*penalty_parameter;
        const double clhs476 =     clhs397*normalslave(2,1)*penalty_parameter;
        const double clhs477 =     clhs406*normalslave(3,1)*penalty_parameter;
        const double clhs478 =     clhs417*normalslave(2,1)*penalty_parameter;
        const double clhs479 =     clhs426*normalslave(3,1)*penalty_parameter;
        const double clhs480 =     normalslave(2,1)*scale_factor;
        const double clhs481 =     normalslave(3,1)*scale_factor;
        const double clhs482 =     clhs20*normalslave(2,2)*penalty_parameter;
        const double clhs483 =     clhs30*normalslave(3,2)*penalty_parameter;
        const double clhs484 =     clhs48*normalslave(2,2);
        const double clhs485 =     clhs54*normalslave(3,2);
        const double clhs486 =     clhs60*normalslave(2,2)*penalty_parameter;
        const double clhs487 =     clhs66*normalslave(3,2)*penalty_parameter;
        const double clhs488 =     clhs72*normalslave(2,2)*penalty_parameter;
        const double clhs489 =     clhs78*normalslave(3,2)*penalty_parameter;
        const double clhs490 =     clhs84*normalslave(2,2)*penalty_parameter;
        const double clhs491 =     clhs90*normalslave(3,2)*penalty_parameter;
        const double clhs492 =     clhs96*normalslave(2,2)*penalty_parameter;
        const double clhs493 =     clhs102*normalslave(3,2)*penalty_parameter;
        const double clhs494 =     clhs108*normalslave(2,2)*penalty_parameter;
        const double clhs495 =     clhs114*normalslave(3,2)*penalty_parameter;
        const double clhs496 =     clhs120*normalslave(2,2)*penalty_parameter;
        const double clhs497 =     clhs126*normalslave(3,2)*penalty_parameter;
        const double clhs498 =     clhs132*normalslave(2,2)*penalty_parameter;
        const double clhs499 =     clhs138*normalslave(3,2)*penalty_parameter;
        const double clhs500 =     clhs144*normalslave(2,2)*penalty_parameter;
        const double clhs501 =     clhs150*normalslave(3,2)*penalty_parameter;
        const double clhs502 =     clhs156*normalslave(2,2)*penalty_parameter;
        const double clhs503 =     clhs162*normalslave(3,2)*penalty_parameter;
        const double clhs504 =     clhs168*normalslave(2,2)*penalty_parameter;
        const double clhs505 =     clhs174*normalslave(3,2)*penalty_parameter;
        const double clhs506 =     clhs180*normalslave(2,2)*penalty_parameter;
        const double clhs507 =     clhs186*normalslave(3,2)*penalty_parameter;
        const double clhs508 =     clhs197*normalslave(2,2)*penalty_parameter;
        const double clhs509 =     clhs206*normalslave(3,2)*penalty_parameter;
        const double clhs510 =     clhs217*normalslave(2,2)*penalty_parameter;
        const double clhs511 =     clhs226*normalslave(3,2)*penalty_parameter;
        const double clhs512 =     clhs237*normalslave(2,2)*penalty_parameter;
        const double clhs513 =     clhs246*normalslave(3,2)*penalty_parameter;
        const double clhs514 =     clhs257*normalslave(2,2)*penalty_parameter;
        const double clhs515 =     clhs266*normalslave(3,2)*penalty_parameter;
        const double clhs516 =     clhs277*normalslave(2,2)*penalty_parameter;
        const double clhs517 =     clhs286*normalslave(3,2)*penalty_parameter;
        const double clhs518 =     clhs297*normalslave(2,2)*penalty_parameter;
        const double clhs519 =     clhs306*normalslave(3,2)*penalty_parameter;
        const double clhs520 =     clhs317*normalslave(2,2)*penalty_parameter;
        const double clhs521 =     clhs326*normalslave(3,2)*penalty_parameter;
        const double clhs522 =     clhs337*normalslave(2,2)*penalty_parameter;
        const double clhs523 =     clhs346*normalslave(3,2)*penalty_parameter;
        const double clhs524 =     clhs357*normalslave(2,2)*penalty_parameter;
        const double clhs525 =     clhs366*normalslave(3,2)*penalty_parameter;
        const double clhs526 =     clhs377*normalslave(2,2)*penalty_parameter;
        const double clhs527 =     clhs386*normalslave(3,2)*penalty_parameter;
        const double clhs528 =     clhs397*normalslave(2,2)*penalty_parameter;
        const double clhs529 =     clhs406*normalslave(3,2)*penalty_parameter;
        const double clhs530 =     clhs417*normalslave(2,2)*penalty_parameter;
        const double clhs531 =     clhs426*normalslave(3,2)*penalty_parameter;
        const double clhs532 =     normalslave(2,2)*scale_factor;
        const double clhs533 =     normalslave(3,2)*scale_factor;
        const double clhs534 =     clhs20*normalslave(2,0);
        const double clhs535 =     clhs30*normalslave(3,0);
        const double clhs536 =     clhs60*normalslave(2,0);
        const double clhs537 =     clhs66*normalslave(3,0);
        const double clhs538 =     clhs72*normalslave(2,0);
        const double clhs539 =     clhs78*normalslave(3,0);
        const double clhs540 =     clhs84*normalslave(2,0);
        const double clhs541 =     clhs90*normalslave(3,0);
        const double clhs542 =     clhs96*normalslave(2,0);
        const double clhs543 =     clhs102*normalslave(3,0);
        const double clhs544 =     clhs108*normalslave(2,0);
        const double clhs545 =     clhs114*normalslave(3,0);
        const double clhs546 =     clhs120*normalslave(2,0);
        const double clhs547 =     clhs126*normalslave(3,0);
        const double clhs548 =     clhs132*normalslave(2,0);
        const double clhs549 =     clhs138*normalslave(3,0);
        const double clhs550 =     clhs144*normalslave(2,0);
        const double clhs551 =     clhs150*normalslave(3,0);
        const double clhs552 =     clhs156*normalslave(2,0);
        const double clhs553 =     clhs162*normalslave(3,0);
        const double clhs554 =     clhs168*normalslave(2,0);
        const double clhs555 =     clhs174*normalslave(3,0);
        const double clhs556 =     clhs180*normalslave(2,0);
        const double clhs557 =     clhs186*normalslave(3,0);
        const double clhs558 =     clhs20*normalslave(2,1);
        const double clhs559 =     clhs30*normalslave(3,1);
        const double clhs560 =     clhs60*normalslave(2,1);
        const double clhs561 =     clhs66*normalslave(3,1);
        const double clhs562 =     clhs72*normalslave(2,1);
        const double clhs563 =     clhs78*normalslave(3,1);
        const double clhs564 =     clhs84*normalslave(2,1);
        const double clhs565 =     clhs90*normalslave(3,1);
        const double clhs566 =     clhs96*normalslave(2,1);
        const double clhs567 =     clhs102*normalslave(3,1);
        const double clhs568 =     clhs108*normalslave(2,1);
        const double clhs569 =     clhs114*normalslave(3,1);
        const double clhs570 =     clhs120*normalslave(2,1);
        const double clhs571 =     clhs126*normalslave(3,1);
        const double clhs572 =     clhs132*normalslave(2,1);
        const double clhs573 =     clhs138*normalslave(3,1);
        const double clhs574 =     clhs144*normalslave(2,1);
        const double clhs575 =     clhs150*normalslave(3,1);
        const double clhs576 =     clhs156*normalslave(2,1);
        const double clhs577 =     clhs162*normalslave(3,1);
        const double clhs578 =     clhs168*normalslave(2,1);
        const double clhs579 =     clhs174*normalslave(3,1);
        const double clhs580 =     clhs180*normalslave(2,1);
        const double clhs581 =     clhs186*normalslave(3,1);
        const double clhs582 =     clhs20*normalslave(2,2);
        const double clhs583 =     clhs30*normalslave(3,2);
        const double clhs584 =     clhs60*normalslave(2,2);
        const double clhs585 =     clhs66*normalslave(3,2);
        const double clhs586 =     clhs72*normalslave(2,2);
        const double clhs587 =     clhs78*normalslave(3,2);
        const double clhs588 =     clhs84*normalslave(2,2);
        const double clhs589 =     clhs90*normalslave(3,2);
        const double clhs590 =     clhs96*normalslave(2,2);
        const double clhs591 =     clhs102*normalslave(3,2);
        const double clhs592 =     clhs108*normalslave(2,2);
        const double clhs593 =     clhs114*normalslave(3,2);
        const double clhs594 =     clhs120*normalslave(2,2);
        const double clhs595 =     clhs126*normalslave(3,2);
        const double clhs596 =     clhs132*normalslave(2,2);
        const double clhs597 =     clhs138*normalslave(3,2);
        const double clhs598 =     clhs144*normalslave(2,2);
        const double clhs599 =     clhs150*normalslave(3,2);
        const double clhs600 =     clhs156*normalslave(2,2);
        const double clhs601 =     clhs162*normalslave(3,2);
        const double clhs602 =     clhs168*normalslave(2,2);
        const double clhs603 =     clhs174*normalslave(3,2);
        const double clhs604 =     clhs180*normalslave(2,2);
        const double clhs605 =     clhs186*normalslave(3,2);
        const double clhs606 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs49 - clhs22*clhs31 + clhs23*clhs55;
        lhs(0,1)=-clhs0*clhs61 - clhs22*clhs67 + clhs49*clhs56 + clhs55*clhs62;
        lhs(0,2)=-clhs0*clhs73 - clhs22*clhs79 + clhs49*clhs68 + clhs55*clhs74;
        lhs(0,3)=-clhs0*clhs85 - clhs22*clhs91 + clhs49*clhs80 + clhs55*clhs86;
        lhs(0,4)=-clhs0*clhs97 - clhs103*clhs22 + clhs49*clhs92 + clhs55*clhs98;
        lhs(0,5)=-clhs0*clhs109 + clhs104*clhs49 + clhs110*clhs55 - clhs115*clhs22;
        lhs(0,6)=-clhs0*clhs121 + clhs116*clhs49 + clhs122*clhs55 - clhs127*clhs22;
        lhs(0,7)=-clhs0*clhs133 + clhs128*clhs49 + clhs134*clhs55 - clhs139*clhs22;
        lhs(0,8)=-clhs0*clhs145 + clhs140*clhs49 + clhs146*clhs55 - clhs151*clhs22;
        lhs(0,9)=-clhs0*clhs157 + clhs152*clhs49 + clhs158*clhs55 - clhs163*clhs22;
        lhs(0,10)=-clhs0*clhs169 + clhs164*clhs49 + clhs170*clhs55 - clhs175*clhs22;
        lhs(0,11)=-clhs0*clhs181 + clhs176*clhs49 + clhs182*clhs55 - clhs187*clhs22;
        lhs(0,12)=clhs0*clhs198 + clhs188*clhs49 + clhs189*clhs55 + clhs207*clhs22;
        lhs(0,13)=clhs0*clhs218 + clhs208*clhs49 + clhs209*clhs55 + clhs22*clhs227;
        lhs(0,14)=clhs0*clhs238 + clhs22*clhs247 + clhs228*clhs49 + clhs229*clhs55;
        lhs(0,15)=clhs0*clhs258 + clhs22*clhs267 + clhs248*clhs49 + clhs249*clhs55;
        lhs(0,16)=clhs0*clhs278 + clhs22*clhs287 + clhs268*clhs49 + clhs269*clhs55;
        lhs(0,17)=clhs0*clhs298 + clhs22*clhs307 + clhs288*clhs49 + clhs289*clhs55;
        lhs(0,18)=clhs0*clhs318 + clhs22*clhs327 + clhs308*clhs49 + clhs309*clhs55;
        lhs(0,19)=clhs0*clhs338 + clhs22*clhs347 + clhs328*clhs49 + clhs329*clhs55;
        lhs(0,20)=clhs0*clhs358 + clhs22*clhs367 + clhs348*clhs49 + clhs349*clhs55;
        lhs(0,21)=clhs0*clhs378 + clhs22*clhs387 + clhs368*clhs49 + clhs369*clhs55;
        lhs(0,22)=clhs0*clhs398 + clhs22*clhs407 + clhs388*clhs49 + clhs389*clhs55;
        lhs(0,23)=clhs0*clhs418 + clhs22*clhs427 + clhs408*clhs49 + clhs409*clhs55;
        lhs(0,24)=0;
        lhs(0,25)=0;
        lhs(0,26)=clhs0*clhs428;
        lhs(0,27)=clhs22*clhs429;
        lhs(1,0)=-clhs0*clhs430 + clhs2*clhs432 - clhs22*clhs431 + clhs23*clhs433;
        lhs(1,1)=-clhs0*clhs434 - clhs22*clhs435 + clhs432*clhs56 + clhs433*clhs62;
        lhs(1,2)=-clhs0*clhs436 - clhs22*clhs437 + clhs432*clhs68 + clhs433*clhs74;
        lhs(1,3)=-clhs0*clhs438 - clhs22*clhs439 + clhs432*clhs80 + clhs433*clhs86;
        lhs(1,4)=-clhs0*clhs440 - clhs22*clhs441 + clhs432*clhs92 + clhs433*clhs98;
        lhs(1,5)=-clhs0*clhs442 + clhs104*clhs432 + clhs110*clhs433 - clhs22*clhs443;
        lhs(1,6)=-clhs0*clhs444 + clhs116*clhs432 + clhs122*clhs433 - clhs22*clhs445;
        lhs(1,7)=-clhs0*clhs446 + clhs128*clhs432 + clhs134*clhs433 - clhs22*clhs447;
        lhs(1,8)=-clhs0*clhs448 + clhs140*clhs432 + clhs146*clhs433 - clhs22*clhs449;
        lhs(1,9)=-clhs0*clhs450 + clhs152*clhs432 + clhs158*clhs433 - clhs22*clhs451;
        lhs(1,10)=-clhs0*clhs452 + clhs164*clhs432 + clhs170*clhs433 - clhs22*clhs453;
        lhs(1,11)=-clhs0*clhs454 + clhs176*clhs432 + clhs182*clhs433 - clhs22*clhs455;
        lhs(1,12)=clhs0*clhs456 + clhs188*clhs432 + clhs189*clhs433 + clhs22*clhs457;
        lhs(1,13)=clhs0*clhs458 + clhs208*clhs432 + clhs209*clhs433 + clhs22*clhs459;
        lhs(1,14)=clhs0*clhs460 + clhs22*clhs461 + clhs228*clhs432 + clhs229*clhs433;
        lhs(1,15)=clhs0*clhs462 + clhs22*clhs463 + clhs248*clhs432 + clhs249*clhs433;
        lhs(1,16)=clhs0*clhs464 + clhs22*clhs465 + clhs268*clhs432 + clhs269*clhs433;
        lhs(1,17)=clhs0*clhs466 + clhs22*clhs467 + clhs288*clhs432 + clhs289*clhs433;
        lhs(1,18)=clhs0*clhs468 + clhs22*clhs469 + clhs308*clhs432 + clhs309*clhs433;
        lhs(1,19)=clhs0*clhs470 + clhs22*clhs471 + clhs328*clhs432 + clhs329*clhs433;
        lhs(1,20)=clhs0*clhs472 + clhs22*clhs473 + clhs348*clhs432 + clhs349*clhs433;
        lhs(1,21)=clhs0*clhs474 + clhs22*clhs475 + clhs368*clhs432 + clhs369*clhs433;
        lhs(1,22)=clhs0*clhs476 + clhs22*clhs477 + clhs388*clhs432 + clhs389*clhs433;
        lhs(1,23)=clhs0*clhs478 + clhs22*clhs479 + clhs408*clhs432 + clhs409*clhs433;
        lhs(1,24)=0;
        lhs(1,25)=0;
        lhs(1,26)=clhs0*clhs480;
        lhs(1,27)=clhs22*clhs481;
        lhs(2,0)=-clhs0*clhs482 + clhs2*clhs484 - clhs22*clhs483 + clhs23*clhs485;
        lhs(2,1)=-clhs0*clhs486 - clhs22*clhs487 + clhs484*clhs56 + clhs485*clhs62;
        lhs(2,2)=-clhs0*clhs488 - clhs22*clhs489 + clhs484*clhs68 + clhs485*clhs74;
        lhs(2,3)=-clhs0*clhs490 - clhs22*clhs491 + clhs484*clhs80 + clhs485*clhs86;
        lhs(2,4)=-clhs0*clhs492 - clhs22*clhs493 + clhs484*clhs92 + clhs485*clhs98;
        lhs(2,5)=-clhs0*clhs494 + clhs104*clhs484 + clhs110*clhs485 - clhs22*clhs495;
        lhs(2,6)=-clhs0*clhs496 + clhs116*clhs484 + clhs122*clhs485 - clhs22*clhs497;
        lhs(2,7)=-clhs0*clhs498 + clhs128*clhs484 + clhs134*clhs485 - clhs22*clhs499;
        lhs(2,8)=-clhs0*clhs500 + clhs140*clhs484 + clhs146*clhs485 - clhs22*clhs501;
        lhs(2,9)=-clhs0*clhs502 + clhs152*clhs484 + clhs158*clhs485 - clhs22*clhs503;
        lhs(2,10)=-clhs0*clhs504 + clhs164*clhs484 + clhs170*clhs485 - clhs22*clhs505;
        lhs(2,11)=-clhs0*clhs506 + clhs176*clhs484 + clhs182*clhs485 - clhs22*clhs507;
        lhs(2,12)=clhs0*clhs508 + clhs188*clhs484 + clhs189*clhs485 + clhs22*clhs509;
        lhs(2,13)=clhs0*clhs510 + clhs208*clhs484 + clhs209*clhs485 + clhs22*clhs511;
        lhs(2,14)=clhs0*clhs512 + clhs22*clhs513 + clhs228*clhs484 + clhs229*clhs485;
        lhs(2,15)=clhs0*clhs514 + clhs22*clhs515 + clhs248*clhs484 + clhs249*clhs485;
        lhs(2,16)=clhs0*clhs516 + clhs22*clhs517 + clhs268*clhs484 + clhs269*clhs485;
        lhs(2,17)=clhs0*clhs518 + clhs22*clhs519 + clhs288*clhs484 + clhs289*clhs485;
        lhs(2,18)=clhs0*clhs520 + clhs22*clhs521 + clhs308*clhs484 + clhs309*clhs485;
        lhs(2,19)=clhs0*clhs522 + clhs22*clhs523 + clhs328*clhs484 + clhs329*clhs485;
        lhs(2,20)=clhs0*clhs524 + clhs22*clhs525 + clhs348*clhs484 + clhs349*clhs485;
        lhs(2,21)=clhs0*clhs526 + clhs22*clhs527 + clhs368*clhs484 + clhs369*clhs485;
        lhs(2,22)=clhs0*clhs528 + clhs22*clhs529 + clhs388*clhs484 + clhs389*clhs485;
        lhs(2,23)=clhs0*clhs530 + clhs22*clhs531 + clhs408*clhs484 + clhs409*clhs485;
        lhs(2,24)=0;
        lhs(2,25)=0;
        lhs(2,26)=clhs0*clhs532;
        lhs(2,27)=clhs22*clhs533;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs55 + clhs49*clhs5;
        lhs(3,1)=-clhs24*clhs67 - clhs4*clhs61 + clhs49*clhs57 + clhs55*clhs63;
        lhs(3,2)=-clhs24*clhs79 - clhs4*clhs73 + clhs49*clhs69 + clhs55*clhs75;
        lhs(3,3)=-clhs24*clhs91 - clhs4*clhs85 + clhs49*clhs81 + clhs55*clhs87;
        lhs(3,4)=-clhs103*clhs24 - clhs4*clhs97 + clhs49*clhs93 + clhs55*clhs99;
        lhs(3,5)=clhs105*clhs49 - clhs109*clhs4 + clhs111*clhs55 - clhs115*clhs24;
        lhs(3,6)=clhs117*clhs49 - clhs121*clhs4 + clhs123*clhs55 - clhs127*clhs24;
        lhs(3,7)=clhs129*clhs49 - clhs133*clhs4 + clhs135*clhs55 - clhs139*clhs24;
        lhs(3,8)=clhs141*clhs49 - clhs145*clhs4 + clhs147*clhs55 - clhs151*clhs24;
        lhs(3,9)=clhs153*clhs49 - clhs157*clhs4 + clhs159*clhs55 - clhs163*clhs24;
        lhs(3,10)=clhs165*clhs49 - clhs169*clhs4 + clhs171*clhs55 - clhs175*clhs24;
        lhs(3,11)=clhs177*clhs49 - clhs181*clhs4 + clhs183*clhs55 - clhs187*clhs24;
        lhs(3,12)=clhs194*clhs49 + clhs198*clhs4 + clhs203*clhs55 + clhs207*clhs24;
        lhs(3,13)=clhs214*clhs49 + clhs218*clhs4 + clhs223*clhs55 + clhs227*clhs24;
        lhs(3,14)=clhs234*clhs49 + clhs238*clhs4 + clhs24*clhs247 + clhs243*clhs55;
        lhs(3,15)=clhs24*clhs267 + clhs254*clhs49 + clhs258*clhs4 + clhs263*clhs55;
        lhs(3,16)=clhs24*clhs287 + clhs274*clhs49 + clhs278*clhs4 + clhs283*clhs55;
        lhs(3,17)=clhs24*clhs307 + clhs294*clhs49 + clhs298*clhs4 + clhs303*clhs55;
        lhs(3,18)=clhs24*clhs327 + clhs314*clhs49 + clhs318*clhs4 + clhs323*clhs55;
        lhs(3,19)=clhs24*clhs347 + clhs334*clhs49 + clhs338*clhs4 + clhs343*clhs55;
        lhs(3,20)=clhs24*clhs367 + clhs354*clhs49 + clhs358*clhs4 + clhs363*clhs55;
        lhs(3,21)=clhs24*clhs387 + clhs374*clhs49 + clhs378*clhs4 + clhs383*clhs55;
        lhs(3,22)=clhs24*clhs407 + clhs394*clhs49 + clhs398*clhs4 + clhs403*clhs55;
        lhs(3,23)=clhs24*clhs427 + clhs4*clhs418 + clhs414*clhs49 + clhs423*clhs55;
        lhs(3,24)=0;
        lhs(3,25)=0;
        lhs(3,26)=clhs4*clhs428;
        lhs(3,27)=clhs24*clhs429;
        lhs(4,0)=-clhs24*clhs431 + clhs25*clhs433 - clhs4*clhs430 + clhs432*clhs5;
        lhs(4,1)=-clhs24*clhs435 - clhs4*clhs434 + clhs432*clhs57 + clhs433*clhs63;
        lhs(4,2)=-clhs24*clhs437 - clhs4*clhs436 + clhs432*clhs69 + clhs433*clhs75;
        lhs(4,3)=-clhs24*clhs439 - clhs4*clhs438 + clhs432*clhs81 + clhs433*clhs87;
        lhs(4,4)=-clhs24*clhs441 - clhs4*clhs440 + clhs432*clhs93 + clhs433*clhs99;
        lhs(4,5)=clhs105*clhs432 + clhs111*clhs433 - clhs24*clhs443 - clhs4*clhs442;
        lhs(4,6)=clhs117*clhs432 + clhs123*clhs433 - clhs24*clhs445 - clhs4*clhs444;
        lhs(4,7)=clhs129*clhs432 + clhs135*clhs433 - clhs24*clhs447 - clhs4*clhs446;
        lhs(4,8)=clhs141*clhs432 + clhs147*clhs433 - clhs24*clhs449 - clhs4*clhs448;
        lhs(4,9)=clhs153*clhs432 + clhs159*clhs433 - clhs24*clhs451 - clhs4*clhs450;
        lhs(4,10)=clhs165*clhs432 + clhs171*clhs433 - clhs24*clhs453 - clhs4*clhs452;
        lhs(4,11)=clhs177*clhs432 + clhs183*clhs433 - clhs24*clhs455 - clhs4*clhs454;
        lhs(4,12)=clhs194*clhs432 + clhs203*clhs433 + clhs24*clhs457 + clhs4*clhs456;
        lhs(4,13)=clhs214*clhs432 + clhs223*clhs433 + clhs24*clhs459 + clhs4*clhs458;
        lhs(4,14)=clhs234*clhs432 + clhs24*clhs461 + clhs243*clhs433 + clhs4*clhs460;
        lhs(4,15)=clhs24*clhs463 + clhs254*clhs432 + clhs263*clhs433 + clhs4*clhs462;
        lhs(4,16)=clhs24*clhs465 + clhs274*clhs432 + clhs283*clhs433 + clhs4*clhs464;
        lhs(4,17)=clhs24*clhs467 + clhs294*clhs432 + clhs303*clhs433 + clhs4*clhs466;
        lhs(4,18)=clhs24*clhs469 + clhs314*clhs432 + clhs323*clhs433 + clhs4*clhs468;
        lhs(4,19)=clhs24*clhs471 + clhs334*clhs432 + clhs343*clhs433 + clhs4*clhs470;
        lhs(4,20)=clhs24*clhs473 + clhs354*clhs432 + clhs363*clhs433 + clhs4*clhs472;
        lhs(4,21)=clhs24*clhs475 + clhs374*clhs432 + clhs383*clhs433 + clhs4*clhs474;
        lhs(4,22)=clhs24*clhs477 + clhs394*clhs432 + clhs4*clhs476 + clhs403*clhs433;
        lhs(4,23)=clhs24*clhs479 + clhs4*clhs478 + clhs414*clhs432 + clhs423*clhs433;
        lhs(4,24)=0;
        lhs(4,25)=0;
        lhs(4,26)=clhs4*clhs480;
        lhs(4,27)=clhs24*clhs481;
        lhs(5,0)=-clhs24*clhs483 + clhs25*clhs485 - clhs4*clhs482 + clhs484*clhs5;
        lhs(5,1)=-clhs24*clhs487 - clhs4*clhs486 + clhs484*clhs57 + clhs485*clhs63;
        lhs(5,2)=-clhs24*clhs489 - clhs4*clhs488 + clhs484*clhs69 + clhs485*clhs75;
        lhs(5,3)=-clhs24*clhs491 - clhs4*clhs490 + clhs484*clhs81 + clhs485*clhs87;
        lhs(5,4)=-clhs24*clhs493 - clhs4*clhs492 + clhs484*clhs93 + clhs485*clhs99;
        lhs(5,5)=clhs105*clhs484 + clhs111*clhs485 - clhs24*clhs495 - clhs4*clhs494;
        lhs(5,6)=clhs117*clhs484 + clhs123*clhs485 - clhs24*clhs497 - clhs4*clhs496;
        lhs(5,7)=clhs129*clhs484 + clhs135*clhs485 - clhs24*clhs499 - clhs4*clhs498;
        lhs(5,8)=clhs141*clhs484 + clhs147*clhs485 - clhs24*clhs501 - clhs4*clhs500;
        lhs(5,9)=clhs153*clhs484 + clhs159*clhs485 - clhs24*clhs503 - clhs4*clhs502;
        lhs(5,10)=clhs165*clhs484 + clhs171*clhs485 - clhs24*clhs505 - clhs4*clhs504;
        lhs(5,11)=clhs177*clhs484 + clhs183*clhs485 - clhs24*clhs507 - clhs4*clhs506;
        lhs(5,12)=clhs194*clhs484 + clhs203*clhs485 + clhs24*clhs509 + clhs4*clhs508;
        lhs(5,13)=clhs214*clhs484 + clhs223*clhs485 + clhs24*clhs511 + clhs4*clhs510;
        lhs(5,14)=clhs234*clhs484 + clhs24*clhs513 + clhs243*clhs485 + clhs4*clhs512;
        lhs(5,15)=clhs24*clhs515 + clhs254*clhs484 + clhs263*clhs485 + clhs4*clhs514;
        lhs(5,16)=clhs24*clhs517 + clhs274*clhs484 + clhs283*clhs485 + clhs4*clhs516;
        lhs(5,17)=clhs24*clhs519 + clhs294*clhs484 + clhs303*clhs485 + clhs4*clhs518;
        lhs(5,18)=clhs24*clhs521 + clhs314*clhs484 + clhs323*clhs485 + clhs4*clhs520;
        lhs(5,19)=clhs24*clhs523 + clhs334*clhs484 + clhs343*clhs485 + clhs4*clhs522;
        lhs(5,20)=clhs24*clhs525 + clhs354*clhs484 + clhs363*clhs485 + clhs4*clhs524;
        lhs(5,21)=clhs24*clhs527 + clhs374*clhs484 + clhs383*clhs485 + clhs4*clhs526;
        lhs(5,22)=clhs24*clhs529 + clhs394*clhs484 + clhs4*clhs528 + clhs403*clhs485;
        lhs(5,23)=clhs24*clhs531 + clhs4*clhs530 + clhs414*clhs484 + clhs423*clhs485;
        lhs(5,24)=0;
        lhs(5,25)=0;
        lhs(5,26)=clhs4*clhs532;
        lhs(5,27)=clhs24*clhs533;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs55 + clhs49*clhs8;
        lhs(6,1)=-clhs26*clhs67 + clhs49*clhs58 + clhs55*clhs64 - clhs61*clhs7;
        lhs(6,2)=-clhs26*clhs79 + clhs49*clhs70 + clhs55*clhs76 - clhs7*clhs73;
        lhs(6,3)=-clhs26*clhs91 + clhs49*clhs82 + clhs55*clhs88 - clhs7*clhs85;
        lhs(6,4)=clhs100*clhs55 - clhs103*clhs26 + clhs49*clhs94 - clhs7*clhs97;
        lhs(6,5)=clhs106*clhs49 - clhs109*clhs7 + clhs112*clhs55 - clhs115*clhs26;
        lhs(6,6)=clhs118*clhs49 - clhs121*clhs7 + clhs124*clhs55 - clhs127*clhs26;
        lhs(6,7)=clhs130*clhs49 - clhs133*clhs7 + clhs136*clhs55 - clhs139*clhs26;
        lhs(6,8)=clhs142*clhs49 - clhs145*clhs7 + clhs148*clhs55 - clhs151*clhs26;
        lhs(6,9)=clhs154*clhs49 - clhs157*clhs7 + clhs160*clhs55 - clhs163*clhs26;
        lhs(6,10)=clhs166*clhs49 - clhs169*clhs7 + clhs172*clhs55 - clhs175*clhs26;
        lhs(6,11)=clhs178*clhs49 - clhs181*clhs7 + clhs184*clhs55 - clhs187*clhs26;
        lhs(6,12)=clhs195*clhs49 + clhs198*clhs7 + clhs204*clhs55 + clhs207*clhs26;
        lhs(6,13)=clhs215*clhs49 + clhs218*clhs7 + clhs224*clhs55 + clhs227*clhs26;
        lhs(6,14)=clhs235*clhs49 + clhs238*clhs7 + clhs244*clhs55 + clhs247*clhs26;
        lhs(6,15)=clhs255*clhs49 + clhs258*clhs7 + clhs26*clhs267 + clhs264*clhs55;
        lhs(6,16)=clhs26*clhs287 + clhs275*clhs49 + clhs278*clhs7 + clhs284*clhs55;
        lhs(6,17)=clhs26*clhs307 + clhs295*clhs49 + clhs298*clhs7 + clhs304*clhs55;
        lhs(6,18)=clhs26*clhs327 + clhs315*clhs49 + clhs318*clhs7 + clhs324*clhs55;
        lhs(6,19)=clhs26*clhs347 + clhs335*clhs49 + clhs338*clhs7 + clhs344*clhs55;
        lhs(6,20)=clhs26*clhs367 + clhs355*clhs49 + clhs358*clhs7 + clhs364*clhs55;
        lhs(6,21)=clhs26*clhs387 + clhs375*clhs49 + clhs378*clhs7 + clhs384*clhs55;
        lhs(6,22)=clhs26*clhs407 + clhs395*clhs49 + clhs398*clhs7 + clhs404*clhs55;
        lhs(6,23)=clhs26*clhs427 + clhs415*clhs49 + clhs418*clhs7 + clhs424*clhs55;
        lhs(6,24)=0;
        lhs(6,25)=0;
        lhs(6,26)=clhs428*clhs7;
        lhs(6,27)=clhs26*clhs429;
        lhs(7,0)=-clhs26*clhs431 + clhs27*clhs433 - clhs430*clhs7 + clhs432*clhs8;
        lhs(7,1)=-clhs26*clhs435 + clhs432*clhs58 + clhs433*clhs64 - clhs434*clhs7;
        lhs(7,2)=-clhs26*clhs437 + clhs432*clhs70 + clhs433*clhs76 - clhs436*clhs7;
        lhs(7,3)=-clhs26*clhs439 + clhs432*clhs82 + clhs433*clhs88 - clhs438*clhs7;
        lhs(7,4)=clhs100*clhs433 - clhs26*clhs441 + clhs432*clhs94 - clhs440*clhs7;
        lhs(7,5)=clhs106*clhs432 + clhs112*clhs433 - clhs26*clhs443 - clhs442*clhs7;
        lhs(7,6)=clhs118*clhs432 + clhs124*clhs433 - clhs26*clhs445 - clhs444*clhs7;
        lhs(7,7)=clhs130*clhs432 + clhs136*clhs433 - clhs26*clhs447 - clhs446*clhs7;
        lhs(7,8)=clhs142*clhs432 + clhs148*clhs433 - clhs26*clhs449 - clhs448*clhs7;
        lhs(7,9)=clhs154*clhs432 + clhs160*clhs433 - clhs26*clhs451 - clhs450*clhs7;
        lhs(7,10)=clhs166*clhs432 + clhs172*clhs433 - clhs26*clhs453 - clhs452*clhs7;
        lhs(7,11)=clhs178*clhs432 + clhs184*clhs433 - clhs26*clhs455 - clhs454*clhs7;
        lhs(7,12)=clhs195*clhs432 + clhs204*clhs433 + clhs26*clhs457 + clhs456*clhs7;
        lhs(7,13)=clhs215*clhs432 + clhs224*clhs433 + clhs26*clhs459 + clhs458*clhs7;
        lhs(7,14)=clhs235*clhs432 + clhs244*clhs433 + clhs26*clhs461 + clhs460*clhs7;
        lhs(7,15)=clhs255*clhs432 + clhs26*clhs463 + clhs264*clhs433 + clhs462*clhs7;
        lhs(7,16)=clhs26*clhs465 + clhs275*clhs432 + clhs284*clhs433 + clhs464*clhs7;
        lhs(7,17)=clhs26*clhs467 + clhs295*clhs432 + clhs304*clhs433 + clhs466*clhs7;
        lhs(7,18)=clhs26*clhs469 + clhs315*clhs432 + clhs324*clhs433 + clhs468*clhs7;
        lhs(7,19)=clhs26*clhs471 + clhs335*clhs432 + clhs344*clhs433 + clhs470*clhs7;
        lhs(7,20)=clhs26*clhs473 + clhs355*clhs432 + clhs364*clhs433 + clhs472*clhs7;
        lhs(7,21)=clhs26*clhs475 + clhs375*clhs432 + clhs384*clhs433 + clhs474*clhs7;
        lhs(7,22)=clhs26*clhs477 + clhs395*clhs432 + clhs404*clhs433 + clhs476*clhs7;
        lhs(7,23)=clhs26*clhs479 + clhs415*clhs432 + clhs424*clhs433 + clhs478*clhs7;
        lhs(7,24)=0;
        lhs(7,25)=0;
        lhs(7,26)=clhs480*clhs7;
        lhs(7,27)=clhs26*clhs481;
        lhs(8,0)=-clhs26*clhs483 + clhs27*clhs485 - clhs482*clhs7 + clhs484*clhs8;
        lhs(8,1)=-clhs26*clhs487 + clhs484*clhs58 + clhs485*clhs64 - clhs486*clhs7;
        lhs(8,2)=-clhs26*clhs489 + clhs484*clhs70 + clhs485*clhs76 - clhs488*clhs7;
        lhs(8,3)=-clhs26*clhs491 + clhs484*clhs82 + clhs485*clhs88 - clhs490*clhs7;
        lhs(8,4)=clhs100*clhs485 - clhs26*clhs493 + clhs484*clhs94 - clhs492*clhs7;
        lhs(8,5)=clhs106*clhs484 + clhs112*clhs485 - clhs26*clhs495 - clhs494*clhs7;
        lhs(8,6)=clhs118*clhs484 + clhs124*clhs485 - clhs26*clhs497 - clhs496*clhs7;
        lhs(8,7)=clhs130*clhs484 + clhs136*clhs485 - clhs26*clhs499 - clhs498*clhs7;
        lhs(8,8)=clhs142*clhs484 + clhs148*clhs485 - clhs26*clhs501 - clhs500*clhs7;
        lhs(8,9)=clhs154*clhs484 + clhs160*clhs485 - clhs26*clhs503 - clhs502*clhs7;
        lhs(8,10)=clhs166*clhs484 + clhs172*clhs485 - clhs26*clhs505 - clhs504*clhs7;
        lhs(8,11)=clhs178*clhs484 + clhs184*clhs485 - clhs26*clhs507 - clhs506*clhs7;
        lhs(8,12)=clhs195*clhs484 + clhs204*clhs485 + clhs26*clhs509 + clhs508*clhs7;
        lhs(8,13)=clhs215*clhs484 + clhs224*clhs485 + clhs26*clhs511 + clhs510*clhs7;
        lhs(8,14)=clhs235*clhs484 + clhs244*clhs485 + clhs26*clhs513 + clhs512*clhs7;
        lhs(8,15)=clhs255*clhs484 + clhs26*clhs515 + clhs264*clhs485 + clhs514*clhs7;
        lhs(8,16)=clhs26*clhs517 + clhs275*clhs484 + clhs284*clhs485 + clhs516*clhs7;
        lhs(8,17)=clhs26*clhs519 + clhs295*clhs484 + clhs304*clhs485 + clhs518*clhs7;
        lhs(8,18)=clhs26*clhs521 + clhs315*clhs484 + clhs324*clhs485 + clhs520*clhs7;
        lhs(8,19)=clhs26*clhs523 + clhs335*clhs484 + clhs344*clhs485 + clhs522*clhs7;
        lhs(8,20)=clhs26*clhs525 + clhs355*clhs484 + clhs364*clhs485 + clhs524*clhs7;
        lhs(8,21)=clhs26*clhs527 + clhs375*clhs484 + clhs384*clhs485 + clhs526*clhs7;
        lhs(8,22)=clhs26*clhs529 + clhs395*clhs484 + clhs404*clhs485 + clhs528*clhs7;
        lhs(8,23)=clhs26*clhs531 + clhs415*clhs484 + clhs424*clhs485 + clhs530*clhs7;
        lhs(8,24)=0;
        lhs(8,25)=0;
        lhs(8,26)=clhs532*clhs7;
        lhs(8,27)=clhs26*clhs533;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs49 - clhs28*clhs31 + clhs29*clhs55;
        lhs(9,1)=-clhs10*clhs61 - clhs28*clhs67 + clhs49*clhs59 + clhs55*clhs65;
        lhs(9,2)=-clhs10*clhs73 - clhs28*clhs79 + clhs49*clhs71 + clhs55*clhs77;
        lhs(9,3)=-clhs10*clhs85 - clhs28*clhs91 + clhs49*clhs83 + clhs55*clhs89;
        lhs(9,4)=-clhs10*clhs97 + clhs101*clhs55 - clhs103*clhs28 + clhs49*clhs95;
        lhs(9,5)=-clhs10*clhs109 + clhs107*clhs49 + clhs113*clhs55 - clhs115*clhs28;
        lhs(9,6)=-clhs10*clhs121 + clhs119*clhs49 + clhs125*clhs55 - clhs127*clhs28;
        lhs(9,7)=-clhs10*clhs133 + clhs131*clhs49 + clhs137*clhs55 - clhs139*clhs28;
        lhs(9,8)=-clhs10*clhs145 + clhs143*clhs49 + clhs149*clhs55 - clhs151*clhs28;
        lhs(9,9)=-clhs10*clhs157 + clhs155*clhs49 + clhs161*clhs55 - clhs163*clhs28;
        lhs(9,10)=-clhs10*clhs169 + clhs167*clhs49 + clhs173*clhs55 - clhs175*clhs28;
        lhs(9,11)=-clhs10*clhs181 + clhs179*clhs49 + clhs185*clhs55 - clhs187*clhs28;
        lhs(9,12)=clhs10*clhs198 + clhs196*clhs49 + clhs205*clhs55 + clhs207*clhs28;
        lhs(9,13)=clhs10*clhs218 + clhs216*clhs49 + clhs225*clhs55 + clhs227*clhs28;
        lhs(9,14)=clhs10*clhs238 + clhs236*clhs49 + clhs245*clhs55 + clhs247*clhs28;
        lhs(9,15)=clhs10*clhs258 + clhs256*clhs49 + clhs265*clhs55 + clhs267*clhs28;
        lhs(9,16)=clhs10*clhs278 + clhs276*clhs49 + clhs28*clhs287 + clhs285*clhs55;
        lhs(9,17)=clhs10*clhs298 + clhs28*clhs307 + clhs296*clhs49 + clhs305*clhs55;
        lhs(9,18)=clhs10*clhs318 + clhs28*clhs327 + clhs316*clhs49 + clhs325*clhs55;
        lhs(9,19)=clhs10*clhs338 + clhs28*clhs347 + clhs336*clhs49 + clhs345*clhs55;
        lhs(9,20)=clhs10*clhs358 + clhs28*clhs367 + clhs356*clhs49 + clhs365*clhs55;
        lhs(9,21)=clhs10*clhs378 + clhs28*clhs387 + clhs376*clhs49 + clhs385*clhs55;
        lhs(9,22)=clhs10*clhs398 + clhs28*clhs407 + clhs396*clhs49 + clhs405*clhs55;
        lhs(9,23)=clhs10*clhs418 + clhs28*clhs427 + clhs416*clhs49 + clhs425*clhs55;
        lhs(9,24)=0;
        lhs(9,25)=0;
        lhs(9,26)=clhs10*clhs428;
        lhs(9,27)=clhs28*clhs429;
        lhs(10,0)=-clhs10*clhs430 + clhs11*clhs432 - clhs28*clhs431 + clhs29*clhs433;
        lhs(10,1)=-clhs10*clhs434 - clhs28*clhs435 + clhs432*clhs59 + clhs433*clhs65;
        lhs(10,2)=-clhs10*clhs436 - clhs28*clhs437 + clhs432*clhs71 + clhs433*clhs77;
        lhs(10,3)=-clhs10*clhs438 - clhs28*clhs439 + clhs432*clhs83 + clhs433*clhs89;
        lhs(10,4)=-clhs10*clhs440 + clhs101*clhs433 - clhs28*clhs441 + clhs432*clhs95;
        lhs(10,5)=-clhs10*clhs442 + clhs107*clhs432 + clhs113*clhs433 - clhs28*clhs443;
        lhs(10,6)=-clhs10*clhs444 + clhs119*clhs432 + clhs125*clhs433 - clhs28*clhs445;
        lhs(10,7)=-clhs10*clhs446 + clhs131*clhs432 + clhs137*clhs433 - clhs28*clhs447;
        lhs(10,8)=-clhs10*clhs448 + clhs143*clhs432 + clhs149*clhs433 - clhs28*clhs449;
        lhs(10,9)=-clhs10*clhs450 + clhs155*clhs432 + clhs161*clhs433 - clhs28*clhs451;
        lhs(10,10)=-clhs10*clhs452 + clhs167*clhs432 + clhs173*clhs433 - clhs28*clhs453;
        lhs(10,11)=-clhs10*clhs454 + clhs179*clhs432 + clhs185*clhs433 - clhs28*clhs455;
        lhs(10,12)=clhs10*clhs456 + clhs196*clhs432 + clhs205*clhs433 + clhs28*clhs457;
        lhs(10,13)=clhs10*clhs458 + clhs216*clhs432 + clhs225*clhs433 + clhs28*clhs459;
        lhs(10,14)=clhs10*clhs460 + clhs236*clhs432 + clhs245*clhs433 + clhs28*clhs461;
        lhs(10,15)=clhs10*clhs462 + clhs256*clhs432 + clhs265*clhs433 + clhs28*clhs463;
        lhs(10,16)=clhs10*clhs464 + clhs276*clhs432 + clhs28*clhs465 + clhs285*clhs433;
        lhs(10,17)=clhs10*clhs466 + clhs28*clhs467 + clhs296*clhs432 + clhs305*clhs433;
        lhs(10,18)=clhs10*clhs468 + clhs28*clhs469 + clhs316*clhs432 + clhs325*clhs433;
        lhs(10,19)=clhs10*clhs470 + clhs28*clhs471 + clhs336*clhs432 + clhs345*clhs433;
        lhs(10,20)=clhs10*clhs472 + clhs28*clhs473 + clhs356*clhs432 + clhs365*clhs433;
        lhs(10,21)=clhs10*clhs474 + clhs28*clhs475 + clhs376*clhs432 + clhs385*clhs433;
        lhs(10,22)=clhs10*clhs476 + clhs28*clhs477 + clhs396*clhs432 + clhs405*clhs433;
        lhs(10,23)=clhs10*clhs478 + clhs28*clhs479 + clhs416*clhs432 + clhs425*clhs433;
        lhs(10,24)=0;
        lhs(10,25)=0;
        lhs(10,26)=clhs10*clhs480;
        lhs(10,27)=clhs28*clhs481;
        lhs(11,0)=-clhs10*clhs482 + clhs11*clhs484 - clhs28*clhs483 + clhs29*clhs485;
        lhs(11,1)=-clhs10*clhs486 - clhs28*clhs487 + clhs484*clhs59 + clhs485*clhs65;
        lhs(11,2)=-clhs10*clhs488 - clhs28*clhs489 + clhs484*clhs71 + clhs485*clhs77;
        lhs(11,3)=-clhs10*clhs490 - clhs28*clhs491 + clhs484*clhs83 + clhs485*clhs89;
        lhs(11,4)=-clhs10*clhs492 + clhs101*clhs485 - clhs28*clhs493 + clhs484*clhs95;
        lhs(11,5)=-clhs10*clhs494 + clhs107*clhs484 + clhs113*clhs485 - clhs28*clhs495;
        lhs(11,6)=-clhs10*clhs496 + clhs119*clhs484 + clhs125*clhs485 - clhs28*clhs497;
        lhs(11,7)=-clhs10*clhs498 + clhs131*clhs484 + clhs137*clhs485 - clhs28*clhs499;
        lhs(11,8)=-clhs10*clhs500 + clhs143*clhs484 + clhs149*clhs485 - clhs28*clhs501;
        lhs(11,9)=-clhs10*clhs502 + clhs155*clhs484 + clhs161*clhs485 - clhs28*clhs503;
        lhs(11,10)=-clhs10*clhs504 + clhs167*clhs484 + clhs173*clhs485 - clhs28*clhs505;
        lhs(11,11)=-clhs10*clhs506 + clhs179*clhs484 + clhs185*clhs485 - clhs28*clhs507;
        lhs(11,12)=clhs10*clhs508 + clhs196*clhs484 + clhs205*clhs485 + clhs28*clhs509;
        lhs(11,13)=clhs10*clhs510 + clhs216*clhs484 + clhs225*clhs485 + clhs28*clhs511;
        lhs(11,14)=clhs10*clhs512 + clhs236*clhs484 + clhs245*clhs485 + clhs28*clhs513;
        lhs(11,15)=clhs10*clhs514 + clhs256*clhs484 + clhs265*clhs485 + clhs28*clhs515;
        lhs(11,16)=clhs10*clhs516 + clhs276*clhs484 + clhs28*clhs517 + clhs285*clhs485;
        lhs(11,17)=clhs10*clhs518 + clhs28*clhs519 + clhs296*clhs484 + clhs305*clhs485;
        lhs(11,18)=clhs10*clhs520 + clhs28*clhs521 + clhs316*clhs484 + clhs325*clhs485;
        lhs(11,19)=clhs10*clhs522 + clhs28*clhs523 + clhs336*clhs484 + clhs345*clhs485;
        lhs(11,20)=clhs10*clhs524 + clhs28*clhs525 + clhs356*clhs484 + clhs365*clhs485;
        lhs(11,21)=clhs10*clhs526 + clhs28*clhs527 + clhs376*clhs484 + clhs385*clhs485;
        lhs(11,22)=clhs10*clhs528 + clhs28*clhs529 + clhs396*clhs484 + clhs405*clhs485;
        lhs(11,23)=clhs10*clhs530 + clhs28*clhs531 + clhs416*clhs484 + clhs425*clhs485;
        lhs(11,24)=0;
        lhs(11,25)=0;
        lhs(11,26)=clhs10*clhs532;
        lhs(11,27)=clhs28*clhs533;
        lhs(12,0)=penalty_parameter*(clhs33*clhs534 + clhs50*clhs535);
        lhs(12,1)=penalty_parameter*(clhs33*clhs536 + clhs50*clhs537);
        lhs(12,2)=penalty_parameter*(clhs33*clhs538 + clhs50*clhs539);
        lhs(12,3)=penalty_parameter*(clhs33*clhs540 + clhs50*clhs541);
        lhs(12,4)=penalty_parameter*(clhs33*clhs542 + clhs50*clhs543);
        lhs(12,5)=penalty_parameter*(clhs33*clhs544 + clhs50*clhs545);
        lhs(12,6)=penalty_parameter*(clhs33*clhs546 + clhs50*clhs547);
        lhs(12,7)=penalty_parameter*(clhs33*clhs548 + clhs50*clhs549);
        lhs(12,8)=penalty_parameter*(clhs33*clhs550 + clhs50*clhs551);
        lhs(12,9)=penalty_parameter*(clhs33*clhs552 + clhs50*clhs553);
        lhs(12,10)=penalty_parameter*(clhs33*clhs554 + clhs50*clhs555);
        lhs(12,11)=penalty_parameter*(clhs33*clhs556 + clhs50*clhs557);
        lhs(12,12)=-clhs190*clhs49 - clhs198*clhs33 - clhs199*clhs55 - clhs207*clhs50;
        lhs(12,13)=-clhs210*clhs49 - clhs218*clhs33 - clhs219*clhs55 - clhs227*clhs50;
        lhs(12,14)=-clhs230*clhs49 - clhs238*clhs33 - clhs239*clhs55 - clhs247*clhs50;
        lhs(12,15)=-clhs250*clhs49 - clhs258*clhs33 - clhs259*clhs55 - clhs267*clhs50;
        lhs(12,16)=-clhs270*clhs49 - clhs278*clhs33 - clhs279*clhs55 - clhs287*clhs50;
        lhs(12,17)=-clhs290*clhs49 - clhs298*clhs33 - clhs299*clhs55 - clhs307*clhs50;
        lhs(12,18)=-clhs310*clhs49 - clhs318*clhs33 - clhs319*clhs55 - clhs327*clhs50;
        lhs(12,19)=-clhs33*clhs338 - clhs330*clhs49 - clhs339*clhs55 - clhs347*clhs50;
        lhs(12,20)=-clhs33*clhs358 - clhs350*clhs49 - clhs359*clhs55 - clhs367*clhs50;
        lhs(12,21)=-clhs33*clhs378 - clhs370*clhs49 - clhs379*clhs55 - clhs387*clhs50;
        lhs(12,22)=-clhs33*clhs398 - clhs390*clhs49 - clhs399*clhs55 - clhs407*clhs50;
        lhs(12,23)=-clhs33*clhs418 - clhs410*clhs49 - clhs419*clhs55 - clhs427*clhs50;
        lhs(12,24)=0;
        lhs(12,25)=0;
        lhs(12,26)=-clhs33*clhs428;
        lhs(12,27)=-clhs429*clhs50;
        lhs(13,0)=penalty_parameter*(clhs33*clhs558 + clhs50*clhs559);
        lhs(13,1)=penalty_parameter*(clhs33*clhs560 + clhs50*clhs561);
        lhs(13,2)=penalty_parameter*(clhs33*clhs562 + clhs50*clhs563);
        lhs(13,3)=penalty_parameter*(clhs33*clhs564 + clhs50*clhs565);
        lhs(13,4)=penalty_parameter*(clhs33*clhs566 + clhs50*clhs567);
        lhs(13,5)=penalty_parameter*(clhs33*clhs568 + clhs50*clhs569);
        lhs(13,6)=penalty_parameter*(clhs33*clhs570 + clhs50*clhs571);
        lhs(13,7)=penalty_parameter*(clhs33*clhs572 + clhs50*clhs573);
        lhs(13,8)=penalty_parameter*(clhs33*clhs574 + clhs50*clhs575);
        lhs(13,9)=penalty_parameter*(clhs33*clhs576 + clhs50*clhs577);
        lhs(13,10)=penalty_parameter*(clhs33*clhs578 + clhs50*clhs579);
        lhs(13,11)=penalty_parameter*(clhs33*clhs580 + clhs50*clhs581);
        lhs(13,12)=-clhs190*clhs432 - clhs199*clhs433 - clhs33*clhs456 - clhs457*clhs50;
        lhs(13,13)=-clhs210*clhs432 - clhs219*clhs433 - clhs33*clhs458 - clhs459*clhs50;
        lhs(13,14)=-clhs230*clhs432 - clhs239*clhs433 - clhs33*clhs460 - clhs461*clhs50;
        lhs(13,15)=-clhs250*clhs432 - clhs259*clhs433 - clhs33*clhs462 - clhs463*clhs50;
        lhs(13,16)=-clhs270*clhs432 - clhs279*clhs433 - clhs33*clhs464 - clhs465*clhs50;
        lhs(13,17)=-clhs290*clhs432 - clhs299*clhs433 - clhs33*clhs466 - clhs467*clhs50;
        lhs(13,18)=-clhs310*clhs432 - clhs319*clhs433 - clhs33*clhs468 - clhs469*clhs50;
        lhs(13,19)=-clhs33*clhs470 - clhs330*clhs432 - clhs339*clhs433 - clhs471*clhs50;
        lhs(13,20)=-clhs33*clhs472 - clhs350*clhs432 - clhs359*clhs433 - clhs473*clhs50;
        lhs(13,21)=-clhs33*clhs474 - clhs370*clhs432 - clhs379*clhs433 - clhs475*clhs50;
        lhs(13,22)=-clhs33*clhs476 - clhs390*clhs432 - clhs399*clhs433 - clhs477*clhs50;
        lhs(13,23)=-clhs33*clhs478 - clhs410*clhs432 - clhs419*clhs433 - clhs479*clhs50;
        lhs(13,24)=0;
        lhs(13,25)=0;
        lhs(13,26)=-clhs33*clhs480;
        lhs(13,27)=-clhs481*clhs50;
        lhs(14,0)=penalty_parameter*(clhs33*clhs582 + clhs50*clhs583);
        lhs(14,1)=penalty_parameter*(clhs33*clhs584 + clhs50*clhs585);
        lhs(14,2)=penalty_parameter*(clhs33*clhs586 + clhs50*clhs587);
        lhs(14,3)=penalty_parameter*(clhs33*clhs588 + clhs50*clhs589);
        lhs(14,4)=penalty_parameter*(clhs33*clhs590 + clhs50*clhs591);
        lhs(14,5)=penalty_parameter*(clhs33*clhs592 + clhs50*clhs593);
        lhs(14,6)=penalty_parameter*(clhs33*clhs594 + clhs50*clhs595);
        lhs(14,7)=penalty_parameter*(clhs33*clhs596 + clhs50*clhs597);
        lhs(14,8)=penalty_parameter*(clhs33*clhs598 + clhs50*clhs599);
        lhs(14,9)=penalty_parameter*(clhs33*clhs600 + clhs50*clhs601);
        lhs(14,10)=penalty_parameter*(clhs33*clhs602 + clhs50*clhs603);
        lhs(14,11)=penalty_parameter*(clhs33*clhs604 + clhs50*clhs605);
        lhs(14,12)=-clhs190*clhs484 - clhs199*clhs485 - clhs33*clhs508 - clhs50*clhs509;
        lhs(14,13)=-clhs210*clhs484 - clhs219*clhs485 - clhs33*clhs510 - clhs50*clhs511;
        lhs(14,14)=-clhs230*clhs484 - clhs239*clhs485 - clhs33*clhs512 - clhs50*clhs513;
        lhs(14,15)=-clhs250*clhs484 - clhs259*clhs485 - clhs33*clhs514 - clhs50*clhs515;
        lhs(14,16)=-clhs270*clhs484 - clhs279*clhs485 - clhs33*clhs516 - clhs50*clhs517;
        lhs(14,17)=-clhs290*clhs484 - clhs299*clhs485 - clhs33*clhs518 - clhs50*clhs519;
        lhs(14,18)=-clhs310*clhs484 - clhs319*clhs485 - clhs33*clhs520 - clhs50*clhs521;
        lhs(14,19)=-clhs33*clhs522 - clhs330*clhs484 - clhs339*clhs485 - clhs50*clhs523;
        lhs(14,20)=-clhs33*clhs524 - clhs350*clhs484 - clhs359*clhs485 - clhs50*clhs525;
        lhs(14,21)=-clhs33*clhs526 - clhs370*clhs484 - clhs379*clhs485 - clhs50*clhs527;
        lhs(14,22)=-clhs33*clhs528 - clhs390*clhs484 - clhs399*clhs485 - clhs50*clhs529;
        lhs(14,23)=-clhs33*clhs530 - clhs410*clhs484 - clhs419*clhs485 - clhs50*clhs531;
        lhs(14,24)=0;
        lhs(14,25)=0;
        lhs(14,26)=-clhs33*clhs532;
        lhs(14,27)=-clhs50*clhs533;
        lhs(15,0)=penalty_parameter*(clhs35*clhs534 + clhs51*clhs535);
        lhs(15,1)=penalty_parameter*(clhs35*clhs536 + clhs51*clhs537);
        lhs(15,2)=penalty_parameter*(clhs35*clhs538 + clhs51*clhs539);
        lhs(15,3)=penalty_parameter*(clhs35*clhs540 + clhs51*clhs541);
        lhs(15,4)=penalty_parameter*(clhs35*clhs542 + clhs51*clhs543);
        lhs(15,5)=penalty_parameter*(clhs35*clhs544 + clhs51*clhs545);
        lhs(15,6)=penalty_parameter*(clhs35*clhs546 + clhs51*clhs547);
        lhs(15,7)=penalty_parameter*(clhs35*clhs548 + clhs51*clhs549);
        lhs(15,8)=penalty_parameter*(clhs35*clhs550 + clhs51*clhs551);
        lhs(15,9)=penalty_parameter*(clhs35*clhs552 + clhs51*clhs553);
        lhs(15,10)=penalty_parameter*(clhs35*clhs554 + clhs51*clhs555);
        lhs(15,11)=penalty_parameter*(clhs35*clhs556 + clhs51*clhs557);
        lhs(15,12)=-clhs191*clhs49 - clhs198*clhs35 - clhs200*clhs55 - clhs207*clhs51;
        lhs(15,13)=-clhs211*clhs49 - clhs218*clhs35 - clhs220*clhs55 - clhs227*clhs51;
        lhs(15,14)=-clhs231*clhs49 - clhs238*clhs35 - clhs240*clhs55 - clhs247*clhs51;
        lhs(15,15)=-clhs251*clhs49 - clhs258*clhs35 - clhs260*clhs55 - clhs267*clhs51;
        lhs(15,16)=-clhs271*clhs49 - clhs278*clhs35 - clhs280*clhs55 - clhs287*clhs51;
        lhs(15,17)=-clhs291*clhs49 - clhs298*clhs35 - clhs300*clhs55 - clhs307*clhs51;
        lhs(15,18)=-clhs311*clhs49 - clhs318*clhs35 - clhs320*clhs55 - clhs327*clhs51;
        lhs(15,19)=-clhs331*clhs49 - clhs338*clhs35 - clhs340*clhs55 - clhs347*clhs51;
        lhs(15,20)=-clhs35*clhs358 - clhs351*clhs49 - clhs360*clhs55 - clhs367*clhs51;
        lhs(15,21)=-clhs35*clhs378 - clhs371*clhs49 - clhs380*clhs55 - clhs387*clhs51;
        lhs(15,22)=-clhs35*clhs398 - clhs391*clhs49 - clhs400*clhs55 - clhs407*clhs51;
        lhs(15,23)=-clhs35*clhs418 - clhs411*clhs49 - clhs420*clhs55 - clhs427*clhs51;
        lhs(15,24)=0;
        lhs(15,25)=0;
        lhs(15,26)=-clhs35*clhs428;
        lhs(15,27)=-clhs429*clhs51;
        lhs(16,0)=penalty_parameter*(clhs35*clhs558 + clhs51*clhs559);
        lhs(16,1)=penalty_parameter*(clhs35*clhs560 + clhs51*clhs561);
        lhs(16,2)=penalty_parameter*(clhs35*clhs562 + clhs51*clhs563);
        lhs(16,3)=penalty_parameter*(clhs35*clhs564 + clhs51*clhs565);
        lhs(16,4)=penalty_parameter*(clhs35*clhs566 + clhs51*clhs567);
        lhs(16,5)=penalty_parameter*(clhs35*clhs568 + clhs51*clhs569);
        lhs(16,6)=penalty_parameter*(clhs35*clhs570 + clhs51*clhs571);
        lhs(16,7)=penalty_parameter*(clhs35*clhs572 + clhs51*clhs573);
        lhs(16,8)=penalty_parameter*(clhs35*clhs574 + clhs51*clhs575);
        lhs(16,9)=penalty_parameter*(clhs35*clhs576 + clhs51*clhs577);
        lhs(16,10)=penalty_parameter*(clhs35*clhs578 + clhs51*clhs579);
        lhs(16,11)=penalty_parameter*(clhs35*clhs580 + clhs51*clhs581);
        lhs(16,12)=-clhs191*clhs432 - clhs200*clhs433 - clhs35*clhs456 - clhs457*clhs51;
        lhs(16,13)=-clhs211*clhs432 - clhs220*clhs433 - clhs35*clhs458 - clhs459*clhs51;
        lhs(16,14)=-clhs231*clhs432 - clhs240*clhs433 - clhs35*clhs460 - clhs461*clhs51;
        lhs(16,15)=-clhs251*clhs432 - clhs260*clhs433 - clhs35*clhs462 - clhs463*clhs51;
        lhs(16,16)=-clhs271*clhs432 - clhs280*clhs433 - clhs35*clhs464 - clhs465*clhs51;
        lhs(16,17)=-clhs291*clhs432 - clhs300*clhs433 - clhs35*clhs466 - clhs467*clhs51;
        lhs(16,18)=-clhs311*clhs432 - clhs320*clhs433 - clhs35*clhs468 - clhs469*clhs51;
        lhs(16,19)=-clhs331*clhs432 - clhs340*clhs433 - clhs35*clhs470 - clhs471*clhs51;
        lhs(16,20)=-clhs35*clhs472 - clhs351*clhs432 - clhs360*clhs433 - clhs473*clhs51;
        lhs(16,21)=-clhs35*clhs474 - clhs371*clhs432 - clhs380*clhs433 - clhs475*clhs51;
        lhs(16,22)=-clhs35*clhs476 - clhs391*clhs432 - clhs400*clhs433 - clhs477*clhs51;
        lhs(16,23)=-clhs35*clhs478 - clhs411*clhs432 - clhs420*clhs433 - clhs479*clhs51;
        lhs(16,24)=0;
        lhs(16,25)=0;
        lhs(16,26)=-clhs35*clhs480;
        lhs(16,27)=-clhs481*clhs51;
        lhs(17,0)=penalty_parameter*(clhs35*clhs582 + clhs51*clhs583);
        lhs(17,1)=penalty_parameter*(clhs35*clhs584 + clhs51*clhs585);
        lhs(17,2)=penalty_parameter*(clhs35*clhs586 + clhs51*clhs587);
        lhs(17,3)=penalty_parameter*(clhs35*clhs588 + clhs51*clhs589);
        lhs(17,4)=penalty_parameter*(clhs35*clhs590 + clhs51*clhs591);
        lhs(17,5)=penalty_parameter*(clhs35*clhs592 + clhs51*clhs593);
        lhs(17,6)=penalty_parameter*(clhs35*clhs594 + clhs51*clhs595);
        lhs(17,7)=penalty_parameter*(clhs35*clhs596 + clhs51*clhs597);
        lhs(17,8)=penalty_parameter*(clhs35*clhs598 + clhs51*clhs599);
        lhs(17,9)=penalty_parameter*(clhs35*clhs600 + clhs51*clhs601);
        lhs(17,10)=penalty_parameter*(clhs35*clhs602 + clhs51*clhs603);
        lhs(17,11)=penalty_parameter*(clhs35*clhs604 + clhs51*clhs605);
        lhs(17,12)=-clhs191*clhs484 - clhs200*clhs485 - clhs35*clhs508 - clhs509*clhs51;
        lhs(17,13)=-clhs211*clhs484 - clhs220*clhs485 - clhs35*clhs510 - clhs51*clhs511;
        lhs(17,14)=-clhs231*clhs484 - clhs240*clhs485 - clhs35*clhs512 - clhs51*clhs513;
        lhs(17,15)=-clhs251*clhs484 - clhs260*clhs485 - clhs35*clhs514 - clhs51*clhs515;
        lhs(17,16)=-clhs271*clhs484 - clhs280*clhs485 - clhs35*clhs516 - clhs51*clhs517;
        lhs(17,17)=-clhs291*clhs484 - clhs300*clhs485 - clhs35*clhs518 - clhs51*clhs519;
        lhs(17,18)=-clhs311*clhs484 - clhs320*clhs485 - clhs35*clhs520 - clhs51*clhs521;
        lhs(17,19)=-clhs331*clhs484 - clhs340*clhs485 - clhs35*clhs522 - clhs51*clhs523;
        lhs(17,20)=-clhs35*clhs524 - clhs351*clhs484 - clhs360*clhs485 - clhs51*clhs525;
        lhs(17,21)=-clhs35*clhs526 - clhs371*clhs484 - clhs380*clhs485 - clhs51*clhs527;
        lhs(17,22)=-clhs35*clhs528 - clhs391*clhs484 - clhs400*clhs485 - clhs51*clhs529;
        lhs(17,23)=-clhs35*clhs530 - clhs411*clhs484 - clhs420*clhs485 - clhs51*clhs531;
        lhs(17,24)=0;
        lhs(17,25)=0;
        lhs(17,26)=-clhs35*clhs532;
        lhs(17,27)=-clhs51*clhs533;
        lhs(18,0)=penalty_parameter*(clhs37*clhs534 + clhs52*clhs535);
        lhs(18,1)=penalty_parameter*(clhs37*clhs536 + clhs52*clhs537);
        lhs(18,2)=penalty_parameter*(clhs37*clhs538 + clhs52*clhs539);
        lhs(18,3)=penalty_parameter*(clhs37*clhs540 + clhs52*clhs541);
        lhs(18,4)=penalty_parameter*(clhs37*clhs542 + clhs52*clhs543);
        lhs(18,5)=penalty_parameter*(clhs37*clhs544 + clhs52*clhs545);
        lhs(18,6)=penalty_parameter*(clhs37*clhs546 + clhs52*clhs547);
        lhs(18,7)=penalty_parameter*(clhs37*clhs548 + clhs52*clhs549);
        lhs(18,8)=penalty_parameter*(clhs37*clhs550 + clhs52*clhs551);
        lhs(18,9)=penalty_parameter*(clhs37*clhs552 + clhs52*clhs553);
        lhs(18,10)=penalty_parameter*(clhs37*clhs554 + clhs52*clhs555);
        lhs(18,11)=penalty_parameter*(clhs37*clhs556 + clhs52*clhs557);
        lhs(18,12)=-clhs192*clhs49 - clhs198*clhs37 - clhs201*clhs55 - clhs207*clhs52;
        lhs(18,13)=-clhs212*clhs49 - clhs218*clhs37 - clhs221*clhs55 - clhs227*clhs52;
        lhs(18,14)=-clhs232*clhs49 - clhs238*clhs37 - clhs241*clhs55 - clhs247*clhs52;
        lhs(18,15)=-clhs252*clhs49 - clhs258*clhs37 - clhs261*clhs55 - clhs267*clhs52;
        lhs(18,16)=-clhs272*clhs49 - clhs278*clhs37 - clhs281*clhs55 - clhs287*clhs52;
        lhs(18,17)=-clhs292*clhs49 - clhs298*clhs37 - clhs301*clhs55 - clhs307*clhs52;
        lhs(18,18)=-clhs312*clhs49 - clhs318*clhs37 - clhs321*clhs55 - clhs327*clhs52;
        lhs(18,19)=-clhs332*clhs49 - clhs338*clhs37 - clhs341*clhs55 - clhs347*clhs52;
        lhs(18,20)=-clhs352*clhs49 - clhs358*clhs37 - clhs361*clhs55 - clhs367*clhs52;
        lhs(18,21)=-clhs37*clhs378 - clhs372*clhs49 - clhs381*clhs55 - clhs387*clhs52;
        lhs(18,22)=-clhs37*clhs398 - clhs392*clhs49 - clhs401*clhs55 - clhs407*clhs52;
        lhs(18,23)=-clhs37*clhs418 - clhs412*clhs49 - clhs421*clhs55 - clhs427*clhs52;
        lhs(18,24)=0;
        lhs(18,25)=0;
        lhs(18,26)=-clhs37*clhs428;
        lhs(18,27)=-clhs429*clhs52;
        lhs(19,0)=penalty_parameter*(clhs37*clhs558 + clhs52*clhs559);
        lhs(19,1)=penalty_parameter*(clhs37*clhs560 + clhs52*clhs561);
        lhs(19,2)=penalty_parameter*(clhs37*clhs562 + clhs52*clhs563);
        lhs(19,3)=penalty_parameter*(clhs37*clhs564 + clhs52*clhs565);
        lhs(19,4)=penalty_parameter*(clhs37*clhs566 + clhs52*clhs567);
        lhs(19,5)=penalty_parameter*(clhs37*clhs568 + clhs52*clhs569);
        lhs(19,6)=penalty_parameter*(clhs37*clhs570 + clhs52*clhs571);
        lhs(19,7)=penalty_parameter*(clhs37*clhs572 + clhs52*clhs573);
        lhs(19,8)=penalty_parameter*(clhs37*clhs574 + clhs52*clhs575);
        lhs(19,9)=penalty_parameter*(clhs37*clhs576 + clhs52*clhs577);
        lhs(19,10)=penalty_parameter*(clhs37*clhs578 + clhs52*clhs579);
        lhs(19,11)=penalty_parameter*(clhs37*clhs580 + clhs52*clhs581);
        lhs(19,12)=-clhs192*clhs432 - clhs201*clhs433 - clhs37*clhs456 - clhs457*clhs52;
        lhs(19,13)=-clhs212*clhs432 - clhs221*clhs433 - clhs37*clhs458 - clhs459*clhs52;
        lhs(19,14)=-clhs232*clhs432 - clhs241*clhs433 - clhs37*clhs460 - clhs461*clhs52;
        lhs(19,15)=-clhs252*clhs432 - clhs261*clhs433 - clhs37*clhs462 - clhs463*clhs52;
        lhs(19,16)=-clhs272*clhs432 - clhs281*clhs433 - clhs37*clhs464 - clhs465*clhs52;
        lhs(19,17)=-clhs292*clhs432 - clhs301*clhs433 - clhs37*clhs466 - clhs467*clhs52;
        lhs(19,18)=-clhs312*clhs432 - clhs321*clhs433 - clhs37*clhs468 - clhs469*clhs52;
        lhs(19,19)=-clhs332*clhs432 - clhs341*clhs433 - clhs37*clhs470 - clhs471*clhs52;
        lhs(19,20)=-clhs352*clhs432 - clhs361*clhs433 - clhs37*clhs472 - clhs473*clhs52;
        lhs(19,21)=-clhs37*clhs474 - clhs372*clhs432 - clhs381*clhs433 - clhs475*clhs52;
        lhs(19,22)=-clhs37*clhs476 - clhs392*clhs432 - clhs401*clhs433 - clhs477*clhs52;
        lhs(19,23)=-clhs37*clhs478 - clhs412*clhs432 - clhs421*clhs433 - clhs479*clhs52;
        lhs(19,24)=0;
        lhs(19,25)=0;
        lhs(19,26)=-clhs37*clhs480;
        lhs(19,27)=-clhs481*clhs52;
        lhs(20,0)=penalty_parameter*(clhs37*clhs582 + clhs52*clhs583);
        lhs(20,1)=penalty_parameter*(clhs37*clhs584 + clhs52*clhs585);
        lhs(20,2)=penalty_parameter*(clhs37*clhs586 + clhs52*clhs587);
        lhs(20,3)=penalty_parameter*(clhs37*clhs588 + clhs52*clhs589);
        lhs(20,4)=penalty_parameter*(clhs37*clhs590 + clhs52*clhs591);
        lhs(20,5)=penalty_parameter*(clhs37*clhs592 + clhs52*clhs593);
        lhs(20,6)=penalty_parameter*(clhs37*clhs594 + clhs52*clhs595);
        lhs(20,7)=penalty_parameter*(clhs37*clhs596 + clhs52*clhs597);
        lhs(20,8)=penalty_parameter*(clhs37*clhs598 + clhs52*clhs599);
        lhs(20,9)=penalty_parameter*(clhs37*clhs600 + clhs52*clhs601);
        lhs(20,10)=penalty_parameter*(clhs37*clhs602 + clhs52*clhs603);
        lhs(20,11)=penalty_parameter*(clhs37*clhs604 + clhs52*clhs605);
        lhs(20,12)=-clhs192*clhs484 - clhs201*clhs485 - clhs37*clhs508 - clhs509*clhs52;
        lhs(20,13)=-clhs212*clhs484 - clhs221*clhs485 - clhs37*clhs510 - clhs511*clhs52;
        lhs(20,14)=-clhs232*clhs484 - clhs241*clhs485 - clhs37*clhs512 - clhs513*clhs52;
        lhs(20,15)=-clhs252*clhs484 - clhs261*clhs485 - clhs37*clhs514 - clhs515*clhs52;
        lhs(20,16)=-clhs272*clhs484 - clhs281*clhs485 - clhs37*clhs516 - clhs517*clhs52;
        lhs(20,17)=-clhs292*clhs484 - clhs301*clhs485 - clhs37*clhs518 - clhs519*clhs52;
        lhs(20,18)=-clhs312*clhs484 - clhs321*clhs485 - clhs37*clhs520 - clhs52*clhs521;
        lhs(20,19)=-clhs332*clhs484 - clhs341*clhs485 - clhs37*clhs522 - clhs52*clhs523;
        lhs(20,20)=-clhs352*clhs484 - clhs361*clhs485 - clhs37*clhs524 - clhs52*clhs525;
        lhs(20,21)=-clhs37*clhs526 - clhs372*clhs484 - clhs381*clhs485 - clhs52*clhs527;
        lhs(20,22)=-clhs37*clhs528 - clhs392*clhs484 - clhs401*clhs485 - clhs52*clhs529;
        lhs(20,23)=-clhs37*clhs530 - clhs412*clhs484 - clhs421*clhs485 - clhs52*clhs531;
        lhs(20,24)=0;
        lhs(20,25)=0;
        lhs(20,26)=-clhs37*clhs532;
        lhs(20,27)=-clhs52*clhs533;
        lhs(21,0)=penalty_parameter*(clhs39*clhs534 + clhs53*clhs535);
        lhs(21,1)=penalty_parameter*(clhs39*clhs536 + clhs53*clhs537);
        lhs(21,2)=penalty_parameter*(clhs39*clhs538 + clhs53*clhs539);
        lhs(21,3)=penalty_parameter*(clhs39*clhs540 + clhs53*clhs541);
        lhs(21,4)=penalty_parameter*(clhs39*clhs542 + clhs53*clhs543);
        lhs(21,5)=penalty_parameter*(clhs39*clhs544 + clhs53*clhs545);
        lhs(21,6)=penalty_parameter*(clhs39*clhs546 + clhs53*clhs547);
        lhs(21,7)=penalty_parameter*(clhs39*clhs548 + clhs53*clhs549);
        lhs(21,8)=penalty_parameter*(clhs39*clhs550 + clhs53*clhs551);
        lhs(21,9)=penalty_parameter*(clhs39*clhs552 + clhs53*clhs553);
        lhs(21,10)=penalty_parameter*(clhs39*clhs554 + clhs53*clhs555);
        lhs(21,11)=penalty_parameter*(clhs39*clhs556 + clhs53*clhs557);
        lhs(21,12)=-clhs193*clhs49 - clhs198*clhs39 - clhs202*clhs55 - clhs207*clhs53;
        lhs(21,13)=-clhs213*clhs49 - clhs218*clhs39 - clhs222*clhs55 - clhs227*clhs53;
        lhs(21,14)=-clhs233*clhs49 - clhs238*clhs39 - clhs242*clhs55 - clhs247*clhs53;
        lhs(21,15)=-clhs253*clhs49 - clhs258*clhs39 - clhs262*clhs55 - clhs267*clhs53;
        lhs(21,16)=-clhs273*clhs49 - clhs278*clhs39 - clhs282*clhs55 - clhs287*clhs53;
        lhs(21,17)=-clhs293*clhs49 - clhs298*clhs39 - clhs302*clhs55 - clhs307*clhs53;
        lhs(21,18)=-clhs313*clhs49 - clhs318*clhs39 - clhs322*clhs55 - clhs327*clhs53;
        lhs(21,19)=-clhs333*clhs49 - clhs338*clhs39 - clhs342*clhs55 - clhs347*clhs53;
        lhs(21,20)=-clhs353*clhs49 - clhs358*clhs39 - clhs362*clhs55 - clhs367*clhs53;
        lhs(21,21)=-clhs373*clhs49 - clhs378*clhs39 - clhs382*clhs55 - clhs387*clhs53;
        lhs(21,22)=-clhs39*clhs398 - clhs393*clhs49 - clhs402*clhs55 - clhs407*clhs53;
        lhs(21,23)=-clhs39*clhs418 - clhs413*clhs49 - clhs422*clhs55 - clhs427*clhs53;
        lhs(21,24)=0;
        lhs(21,25)=0;
        lhs(21,26)=-clhs39*clhs428;
        lhs(21,27)=-clhs429*clhs53;
        lhs(22,0)=penalty_parameter*(clhs39*clhs558 + clhs53*clhs559);
        lhs(22,1)=penalty_parameter*(clhs39*clhs560 + clhs53*clhs561);
        lhs(22,2)=penalty_parameter*(clhs39*clhs562 + clhs53*clhs563);
        lhs(22,3)=penalty_parameter*(clhs39*clhs564 + clhs53*clhs565);
        lhs(22,4)=penalty_parameter*(clhs39*clhs566 + clhs53*clhs567);
        lhs(22,5)=penalty_parameter*(clhs39*clhs568 + clhs53*clhs569);
        lhs(22,6)=penalty_parameter*(clhs39*clhs570 + clhs53*clhs571);
        lhs(22,7)=penalty_parameter*(clhs39*clhs572 + clhs53*clhs573);
        lhs(22,8)=penalty_parameter*(clhs39*clhs574 + clhs53*clhs575);
        lhs(22,9)=penalty_parameter*(clhs39*clhs576 + clhs53*clhs577);
        lhs(22,10)=penalty_parameter*(clhs39*clhs578 + clhs53*clhs579);
        lhs(22,11)=penalty_parameter*(clhs39*clhs580 + clhs53*clhs581);
        lhs(22,12)=-clhs193*clhs432 - clhs202*clhs433 - clhs39*clhs456 - clhs457*clhs53;
        lhs(22,13)=-clhs213*clhs432 - clhs222*clhs433 - clhs39*clhs458 - clhs459*clhs53;
        lhs(22,14)=-clhs233*clhs432 - clhs242*clhs433 - clhs39*clhs460 - clhs461*clhs53;
        lhs(22,15)=-clhs253*clhs432 - clhs262*clhs433 - clhs39*clhs462 - clhs463*clhs53;
        lhs(22,16)=-clhs273*clhs432 - clhs282*clhs433 - clhs39*clhs464 - clhs465*clhs53;
        lhs(22,17)=-clhs293*clhs432 - clhs302*clhs433 - clhs39*clhs466 - clhs467*clhs53;
        lhs(22,18)=-clhs313*clhs432 - clhs322*clhs433 - clhs39*clhs468 - clhs469*clhs53;
        lhs(22,19)=-clhs333*clhs432 - clhs342*clhs433 - clhs39*clhs470 - clhs471*clhs53;
        lhs(22,20)=-clhs353*clhs432 - clhs362*clhs433 - clhs39*clhs472 - clhs473*clhs53;
        lhs(22,21)=-clhs373*clhs432 - clhs382*clhs433 - clhs39*clhs474 - clhs475*clhs53;
        lhs(22,22)=-clhs39*clhs476 - clhs393*clhs432 - clhs402*clhs433 - clhs477*clhs53;
        lhs(22,23)=-clhs39*clhs478 - clhs413*clhs432 - clhs422*clhs433 - clhs479*clhs53;
        lhs(22,24)=0;
        lhs(22,25)=0;
        lhs(22,26)=-clhs39*clhs480;
        lhs(22,27)=-clhs481*clhs53;
        lhs(23,0)=penalty_parameter*(clhs39*clhs582 + clhs53*clhs583);
        lhs(23,1)=penalty_parameter*(clhs39*clhs584 + clhs53*clhs585);
        lhs(23,2)=penalty_parameter*(clhs39*clhs586 + clhs53*clhs587);
        lhs(23,3)=penalty_parameter*(clhs39*clhs588 + clhs53*clhs589);
        lhs(23,4)=penalty_parameter*(clhs39*clhs590 + clhs53*clhs591);
        lhs(23,5)=penalty_parameter*(clhs39*clhs592 + clhs53*clhs593);
        lhs(23,6)=penalty_parameter*(clhs39*clhs594 + clhs53*clhs595);
        lhs(23,7)=penalty_parameter*(clhs39*clhs596 + clhs53*clhs597);
        lhs(23,8)=penalty_parameter*(clhs39*clhs598 + clhs53*clhs599);
        lhs(23,9)=penalty_parameter*(clhs39*clhs600 + clhs53*clhs601);
        lhs(23,10)=penalty_parameter*(clhs39*clhs602 + clhs53*clhs603);
        lhs(23,11)=penalty_parameter*(clhs39*clhs604 + clhs53*clhs605);
        lhs(23,12)=-clhs193*clhs484 - clhs202*clhs485 - clhs39*clhs508 - clhs509*clhs53;
        lhs(23,13)=-clhs213*clhs484 - clhs222*clhs485 - clhs39*clhs510 - clhs511*clhs53;
        lhs(23,14)=-clhs233*clhs484 - clhs242*clhs485 - clhs39*clhs512 - clhs513*clhs53;
        lhs(23,15)=-clhs253*clhs484 - clhs262*clhs485 - clhs39*clhs514 - clhs515*clhs53;
        lhs(23,16)=-clhs273*clhs484 - clhs282*clhs485 - clhs39*clhs516 - clhs517*clhs53;
        lhs(23,17)=-clhs293*clhs484 - clhs302*clhs485 - clhs39*clhs518 - clhs519*clhs53;
        lhs(23,18)=-clhs313*clhs484 - clhs322*clhs485 - clhs39*clhs520 - clhs521*clhs53;
        lhs(23,19)=-clhs333*clhs484 - clhs342*clhs485 - clhs39*clhs522 - clhs523*clhs53;
        lhs(23,20)=-clhs353*clhs484 - clhs362*clhs485 - clhs39*clhs524 - clhs525*clhs53;
        lhs(23,21)=-clhs373*clhs484 - clhs382*clhs485 - clhs39*clhs526 - clhs527*clhs53;
        lhs(23,22)=-clhs39*clhs528 - clhs393*clhs484 - clhs402*clhs485 - clhs529*clhs53;
        lhs(23,23)=-clhs39*clhs530 - clhs413*clhs484 - clhs422*clhs485 - clhs53*clhs531;
        lhs(23,24)=0;
        lhs(23,25)=0;
        lhs(23,26)=-clhs39*clhs532;
        lhs(23,27)=-clhs53*clhs533;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs606;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs606;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs20*scale_factor;
        lhs(26,1)=clhs60*scale_factor;
        lhs(26,2)=clhs72*scale_factor;
        lhs(26,3)=clhs84*scale_factor;
        lhs(26,4)=clhs96*scale_factor;
        lhs(26,5)=clhs108*scale_factor;
        lhs(26,6)=clhs120*scale_factor;
        lhs(26,7)=clhs132*scale_factor;
        lhs(26,8)=clhs144*scale_factor;
        lhs(26,9)=clhs156*scale_factor;
        lhs(26,10)=clhs168*scale_factor;
        lhs(26,11)=clhs180*scale_factor;
        lhs(26,12)=-clhs197*scale_factor;
        lhs(26,13)=-clhs217*scale_factor;
        lhs(26,14)=-clhs237*scale_factor;
        lhs(26,15)=-clhs257*scale_factor;
        lhs(26,16)=-clhs277*scale_factor;
        lhs(26,17)=-clhs297*scale_factor;
        lhs(26,18)=-clhs317*scale_factor;
        lhs(26,19)=-clhs337*scale_factor;
        lhs(26,20)=-clhs357*scale_factor;
        lhs(26,21)=-clhs377*scale_factor;
        lhs(26,22)=-clhs397*scale_factor;
        lhs(26,23)=-clhs417*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=clhs30*scale_factor;
        lhs(27,1)=clhs66*scale_factor;
        lhs(27,2)=clhs78*scale_factor;
        lhs(27,3)=clhs90*scale_factor;
        lhs(27,4)=clhs102*scale_factor;
        lhs(27,5)=clhs114*scale_factor;
        lhs(27,6)=clhs126*scale_factor;
        lhs(27,7)=clhs138*scale_factor;
        lhs(27,8)=clhs150*scale_factor;
        lhs(27,9)=clhs162*scale_factor;
        lhs(27,10)=clhs174*scale_factor;
        lhs(27,11)=clhs186*scale_factor;
        lhs(27,12)=-clhs206*scale_factor;
        lhs(27,13)=-clhs226*scale_factor;
        lhs(27,14)=-clhs246*scale_factor;
        lhs(27,15)=-clhs266*scale_factor;
        lhs(27,16)=-clhs286*scale_factor;
        lhs(27,17)=-clhs306*scale_factor;
        lhs(27,18)=-clhs326*scale_factor;
        lhs(27,19)=-clhs346*scale_factor;
        lhs(27,20)=-clhs366*scale_factor;
        lhs(27,21)=-clhs386*scale_factor;
        lhs(27,22)=-clhs406*scale_factor;
        lhs(27,23)=-clhs426*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 2 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(1,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(1,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(1,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*penalty_parameter;
        const double clhs22 =     X1(0,0) + u1(0,0);
        const double clhs23 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs24 =     X1(1,0) + u1(1,0);
        const double clhs25 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs26 =     X1(2,0) + u1(2,0);
        const double clhs27 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs28 =     X1(3,0) + u1(3,0);
        const double clhs29 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs30 =     X1(0,1) + u1(0,1);
        const double clhs31 =     X1(1,1) + u1(1,1);
        const double clhs32 =     X1(2,1) + u1(2,1);
        const double clhs33 =     X1(3,1) + u1(3,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     X1(3,2) + u1(3,2);
        const double clhs38 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs22*clhs23 + clhs24*clhs25 + clhs26*clhs27 + clhs28*clhs29) + normalslave(1,1)*(-clhs0*clhs1 - clhs10*clhs9 + clhs23*clhs30 + clhs25*clhs31 + clhs27*clhs32 + clhs29*clhs33 - clhs3*clhs4 - clhs6*clhs7) + normalslave(1,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs23*clhs34 + clhs25*clhs35 + clhs27*clhs36 + clhs29*clhs37));
        const double clhs39 =     -clhs0*clhs21 + clhs2*clhs38;
        const double clhs40 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs41 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs42 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs43 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs44 =     normalslave(1,0)*(clhs16*clhs40 + clhs17*clhs41 + clhs18*clhs42 + clhs19*clhs43) + normalslave(1,1)*(clhs0 + clhs1*clhs40 + clhs3*clhs41 + clhs42*clhs6 + clhs43*clhs9) + normalslave(1,2)*(clhs12*clhs40 + clhs13*clhs41 + clhs14*clhs42 + clhs15*clhs43);
        const double clhs45 =     clhs44*penalty_parameter;
        const double clhs46 =     -clhs0*clhs45 + clhs38*clhs40;
        const double clhs47 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs48 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs49 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs50 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs51 =     normalslave(1,0)*(clhs16*clhs47 + clhs17*clhs48 + clhs18*clhs49 + clhs19*clhs50) + normalslave(1,1)*(clhs1*clhs47 + clhs3*clhs48 + clhs49*clhs6 + clhs50*clhs9) + normalslave(1,2)*(clhs0 + clhs12*clhs47 + clhs13*clhs48 + clhs14*clhs49 + clhs15*clhs50);
        const double clhs52 =     clhs51*penalty_parameter;
        const double clhs53 =     -clhs0*clhs52 + clhs38*clhs47;
        const double clhs54 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs55 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs56 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs57 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs58 =     normalslave(1,0)*(clhs16*clhs54 + clhs17*clhs55 + clhs18*clhs56 + clhs19*clhs57 + clhs4) + normalslave(1,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6 + clhs57*clhs9) + normalslave(1,2)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56 + clhs15*clhs57);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs38*clhs54;
        const double clhs61 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs62 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs63 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs64 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs65 =     normalslave(1,0)*(clhs16*clhs61 + clhs17*clhs62 + clhs18*clhs63 + clhs19*clhs64) + normalslave(1,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs4 + clhs6*clhs63 + clhs64*clhs9) + normalslave(1,2)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs15*clhs64);
        const double clhs66 =     clhs65*penalty_parameter;
        const double clhs67 =     -clhs0*clhs66 + clhs38*clhs61;
        const double clhs68 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs69 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs70 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs71 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs72 =     normalslave(1,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(1,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(1,2)*(clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71 + clhs4);
        const double clhs73 =     clhs72*penalty_parameter;
        const double clhs74 =     -clhs0*clhs73 + clhs38*clhs68;
        const double clhs75 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs76 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs77 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs78 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs79 =     normalslave(1,0)*(clhs16*clhs75 + clhs17*clhs76 + clhs18*clhs77 + clhs19*clhs78 + clhs7) + normalslave(1,1)*(clhs1*clhs75 + clhs3*clhs76 + clhs6*clhs77 + clhs78*clhs9) + normalslave(1,2)*(clhs12*clhs75 + clhs13*clhs76 + clhs14*clhs77 + clhs15*clhs78);
        const double clhs80 =     clhs79*penalty_parameter;
        const double clhs81 =     -clhs0*clhs80 + clhs38*clhs75;
        const double clhs82 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs83 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs84 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs85 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs86 =     normalslave(1,0)*(clhs16*clhs82 + clhs17*clhs83 + clhs18*clhs84 + clhs19*clhs85) + normalslave(1,1)*(clhs1*clhs82 + clhs3*clhs83 + clhs6*clhs84 + clhs7 + clhs85*clhs9) + normalslave(1,2)*(clhs12*clhs82 + clhs13*clhs83 + clhs14*clhs84 + clhs15*clhs85);
        const double clhs87 =     clhs86*penalty_parameter;
        const double clhs88 =     -clhs0*clhs87 + clhs38*clhs82;
        const double clhs89 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs90 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs91 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs92 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs93 =     normalslave(1,0)*(clhs16*clhs89 + clhs17*clhs90 + clhs18*clhs91 + clhs19*clhs92) + normalslave(1,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91 + clhs9*clhs92) + normalslave(1,2)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91 + clhs15*clhs92 + clhs7);
        const double clhs94 =     clhs93*penalty_parameter;
        const double clhs95 =     -clhs0*clhs94 + clhs38*clhs89;
        const double clhs96 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs97 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs98 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs99 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs100 =     normalslave(1,0)*(clhs10 + clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(1,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(1,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99);
        const double clhs101 =     clhs100*penalty_parameter;
        const double clhs102 =     -clhs0*clhs101 + clhs38*clhs96;
        const double clhs103 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs104 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs105 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs106 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs107 =     normalslave(1,0)*(clhs103*clhs16 + clhs104*clhs17 + clhs105*clhs18 + clhs106*clhs19) + normalslave(1,1)*(clhs1*clhs103 + clhs10 + clhs104*clhs3 + clhs105*clhs6 + clhs106*clhs9) + normalslave(1,2)*(clhs103*clhs12 + clhs104*clhs13 + clhs105*clhs14 + clhs106*clhs15);
        const double clhs108 =     clhs107*penalty_parameter;
        const double clhs109 =     -clhs0*clhs108 + clhs103*clhs38;
        const double clhs110 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs111 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs112 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs113 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs114 =     normalslave(1,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(1,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(1,2)*(clhs10 + clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15);
        const double clhs115 =     clhs114*penalty_parameter;
        const double clhs116 =     -clhs0*clhs115 + clhs110*clhs38;
        const double clhs117 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs118 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs119 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs120 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs121 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs122 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs123 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs124 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs125 =     normalslave(1,0)*(-clhs117*clhs16 + clhs118*clhs22 + clhs119*clhs24 + clhs120*clhs26 + clhs121*clhs28 - clhs122*clhs17 - clhs123*clhs18 - clhs124*clhs19 + clhs23) + normalslave(1,1)*(-clhs1*clhs117 + clhs118*clhs30 + clhs119*clhs31 + clhs120*clhs32 + clhs121*clhs33 - clhs122*clhs3 - clhs123*clhs6 - clhs124*clhs9) + normalslave(1,2)*(-clhs117*clhs12 + clhs118*clhs34 + clhs119*clhs35 + clhs120*clhs36 + clhs121*clhs37 - clhs122*clhs13 - clhs123*clhs14 - clhs124*clhs15);
        const double clhs126 =     clhs125*penalty_parameter;
        const double clhs127 =     clhs0*clhs126 + clhs117*clhs38;
        const double clhs128 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs129 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs130 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs131 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs132 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs133 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs134 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs135 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs136 =     normalslave(1,0)*(-clhs128*clhs16 + clhs129*clhs22 + clhs130*clhs24 + clhs131*clhs26 + clhs132*clhs28 - clhs133*clhs17 - clhs134*clhs18 - clhs135*clhs19) + normalslave(1,1)*(-clhs1*clhs128 + clhs129*clhs30 + clhs130*clhs31 + clhs131*clhs32 + clhs132*clhs33 - clhs133*clhs3 - clhs134*clhs6 - clhs135*clhs9 + clhs23) + normalslave(1,2)*(-clhs12*clhs128 + clhs129*clhs34 - clhs13*clhs133 + clhs130*clhs35 + clhs131*clhs36 + clhs132*clhs37 - clhs134*clhs14 - clhs135*clhs15);
        const double clhs137 =     clhs136*penalty_parameter;
        const double clhs138 =     clhs0*clhs137 + clhs128*clhs38;
        const double clhs139 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs140 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs141 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs142 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs143 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs144 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs145 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs146 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs147 =     normalslave(1,0)*(-clhs139*clhs16 + clhs140*clhs22 + clhs141*clhs24 + clhs142*clhs26 + clhs143*clhs28 - clhs144*clhs17 - clhs145*clhs18 - clhs146*clhs19) + normalslave(1,1)*(-clhs1*clhs139 + clhs140*clhs30 + clhs141*clhs31 + clhs142*clhs32 + clhs143*clhs33 - clhs144*clhs3 - clhs145*clhs6 - clhs146*clhs9) + normalslave(1,2)*(-clhs12*clhs139 - clhs13*clhs144 - clhs14*clhs145 + clhs140*clhs34 + clhs141*clhs35 + clhs142*clhs36 + clhs143*clhs37 - clhs146*clhs15 + clhs23);
        const double clhs148 =     clhs147*penalty_parameter;
        const double clhs149 =     clhs0*clhs148 + clhs139*clhs38;
        const double clhs150 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs151 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs152 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs153 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs154 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs155 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs156 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs157 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs158 =     normalslave(1,0)*(-clhs150*clhs16 + clhs151*clhs22 + clhs152*clhs24 + clhs153*clhs26 + clhs154*clhs28 - clhs155*clhs17 - clhs156*clhs18 - clhs157*clhs19 + clhs25) + normalslave(1,1)*(-clhs1*clhs150 + clhs151*clhs30 + clhs152*clhs31 + clhs153*clhs32 + clhs154*clhs33 - clhs155*clhs3 - clhs156*clhs6 - clhs157*clhs9) + normalslave(1,2)*(-clhs12*clhs150 - clhs13*clhs155 - clhs14*clhs156 - clhs15*clhs157 + clhs151*clhs34 + clhs152*clhs35 + clhs153*clhs36 + clhs154*clhs37);
        const double clhs159 =     clhs158*penalty_parameter;
        const double clhs160 =     clhs0*clhs159 + clhs150*clhs38;
        const double clhs161 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs162 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs163 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs164 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs165 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs166 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs167 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs168 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs169 =     normalslave(1,0)*(-clhs16*clhs161 + clhs162*clhs22 + clhs163*clhs24 + clhs164*clhs26 + clhs165*clhs28 - clhs166*clhs17 - clhs167*clhs18 - clhs168*clhs19) + normalslave(1,1)*(-clhs1*clhs161 + clhs162*clhs30 + clhs163*clhs31 + clhs164*clhs32 + clhs165*clhs33 - clhs166*clhs3 - clhs167*clhs6 - clhs168*clhs9 + clhs25) + normalslave(1,2)*(-clhs12*clhs161 - clhs13*clhs166 - clhs14*clhs167 - clhs15*clhs168 + clhs162*clhs34 + clhs163*clhs35 + clhs164*clhs36 + clhs165*clhs37);
        const double clhs170 =     clhs169*penalty_parameter;
        const double clhs171 =     clhs0*clhs170 + clhs161*clhs38;
        const double clhs172 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs173 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs174 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs175 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs176 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs177 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs178 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs179 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs180 =     normalslave(1,0)*(-clhs16*clhs172 - clhs17*clhs177 + clhs173*clhs22 + clhs174*clhs24 + clhs175*clhs26 + clhs176*clhs28 - clhs178*clhs18 - clhs179*clhs19) + normalslave(1,1)*(-clhs1*clhs172 + clhs173*clhs30 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6 - clhs179*clhs9) + normalslave(1,2)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 - clhs15*clhs179 + clhs173*clhs34 + clhs174*clhs35 + clhs175*clhs36 + clhs176*clhs37 + clhs25);
        const double clhs181 =     clhs180*penalty_parameter;
        const double clhs182 =     clhs0*clhs181 + clhs172*clhs38;
        const double clhs183 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs184 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs185 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs186 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs187 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs188 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs189 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs190 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs191 =     normalslave(1,0)*(-clhs16*clhs183 - clhs17*clhs188 - clhs18*clhs189 + clhs184*clhs22 + clhs185*clhs24 + clhs186*clhs26 + clhs187*clhs28 - clhs19*clhs190 + clhs27) + normalslave(1,1)*(-clhs1*clhs183 + clhs184*clhs30 + clhs185*clhs31 + clhs186*clhs32 + clhs187*clhs33 - clhs188*clhs3 - clhs189*clhs6 - clhs190*clhs9) + normalslave(1,2)*(-clhs12*clhs183 - clhs13*clhs188 - clhs14*clhs189 - clhs15*clhs190 + clhs184*clhs34 + clhs185*clhs35 + clhs186*clhs36 + clhs187*clhs37);
        const double clhs192 =     clhs191*penalty_parameter;
        const double clhs193 =     clhs0*clhs192 + clhs183*clhs38;
        const double clhs194 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs195 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs196 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs197 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs198 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs199 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs200 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs201 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs202 =     normalslave(1,0)*(-clhs16*clhs194 - clhs17*clhs199 - clhs18*clhs200 - clhs19*clhs201 + clhs195*clhs22 + clhs196*clhs24 + clhs197*clhs26 + clhs198*clhs28) + normalslave(1,1)*(-clhs1*clhs194 + clhs195*clhs30 + clhs196*clhs31 + clhs197*clhs32 + clhs198*clhs33 - clhs199*clhs3 - clhs200*clhs6 - clhs201*clhs9 + clhs27) + normalslave(1,2)*(-clhs12*clhs194 - clhs13*clhs199 - clhs14*clhs200 - clhs15*clhs201 + clhs195*clhs34 + clhs196*clhs35 + clhs197*clhs36 + clhs198*clhs37);
        const double clhs203 =     clhs202*penalty_parameter;
        const double clhs204 =     clhs0*clhs203 + clhs194*clhs38;
        const double clhs205 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs206 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs207 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs208 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs209 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs210 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs211 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs212 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs213 =     normalslave(1,0)*(-clhs16*clhs205 - clhs17*clhs210 - clhs18*clhs211 - clhs19*clhs212 + clhs206*clhs22 + clhs207*clhs24 + clhs208*clhs26 + clhs209*clhs28) + normalslave(1,1)*(-clhs1*clhs205 + clhs206*clhs30 + clhs207*clhs31 + clhs208*clhs32 + clhs209*clhs33 - clhs210*clhs3 - clhs211*clhs6 - clhs212*clhs9) + normalslave(1,2)*(-clhs12*clhs205 - clhs13*clhs210 - clhs14*clhs211 - clhs15*clhs212 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs209*clhs37 + clhs27);
        const double clhs214 =     clhs213*penalty_parameter;
        const double clhs215 =     clhs0*clhs214 + clhs205*clhs38;
        const double clhs216 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs217 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs218 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs219 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs220 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs221 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs222 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs223 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs224 =     normalslave(1,0)*(-clhs16*clhs216 - clhs17*clhs221 - clhs18*clhs222 - clhs19*clhs223 + clhs217*clhs22 + clhs218*clhs24 + clhs219*clhs26 + clhs220*clhs28 + clhs29) + normalslave(1,1)*(-clhs1*clhs216 + clhs217*clhs30 + clhs218*clhs31 + clhs219*clhs32 + clhs220*clhs33 - clhs221*clhs3 - clhs222*clhs6 - clhs223*clhs9) + normalslave(1,2)*(-clhs12*clhs216 - clhs13*clhs221 - clhs14*clhs222 - clhs15*clhs223 + clhs217*clhs34 + clhs218*clhs35 + clhs219*clhs36 + clhs220*clhs37);
        const double clhs225 =     clhs224*penalty_parameter;
        const double clhs226 =     clhs0*clhs225 + clhs216*clhs38;
        const double clhs227 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs228 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs229 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs230 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs231 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs232 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs233 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs234 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs235 =     normalslave(1,0)*(-clhs16*clhs227 - clhs17*clhs232 - clhs18*clhs233 - clhs19*clhs234 + clhs22*clhs228 + clhs229*clhs24 + clhs230*clhs26 + clhs231*clhs28) + normalslave(1,1)*(-clhs1*clhs227 + clhs228*clhs30 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6 - clhs234*clhs9 + clhs29) + normalslave(1,2)*(-clhs12*clhs227 - clhs13*clhs232 - clhs14*clhs233 - clhs15*clhs234 + clhs228*clhs34 + clhs229*clhs35 + clhs230*clhs36 + clhs231*clhs37);
        const double clhs236 =     clhs235*penalty_parameter;
        const double clhs237 =     clhs0*clhs236 + clhs227*clhs38;
        const double clhs238 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs239 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs240 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs241 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs242 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs243 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs244 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs245 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs246 =     normalslave(1,0)*(-clhs16*clhs238 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs22*clhs239 + clhs24*clhs240 + clhs241*clhs26 + clhs242*clhs28) + normalslave(1,1)*(-clhs1*clhs238 + clhs239*clhs30 + clhs240*clhs31 + clhs241*clhs32 + clhs242*clhs33 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(1,2)*(-clhs12*clhs238 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs34 + clhs240*clhs35 + clhs241*clhs36 + clhs242*clhs37 + clhs29);
        const double clhs247 =     clhs246*penalty_parameter;
        const double clhs248 =     clhs0*clhs247 + clhs238*clhs38;
        const double clhs249 =     normalslave(1,0)*scale_factor;
        const double clhs250 =     normalslave(1,1)*scale_factor;
        const double clhs251 =     normalslave(1,2)*scale_factor;
        const double clhs252 =     -clhs21*clhs4 + clhs38*clhs5;
        const double clhs253 =     clhs38*clhs41 - clhs4*clhs45;
        const double clhs254 =     clhs38*clhs48 - clhs4*clhs52;
        const double clhs255 =     clhs38*clhs55 - clhs4*clhs59;
        const double clhs256 =     clhs38*clhs62 - clhs4*clhs66;
        const double clhs257 =     clhs38*clhs69 - clhs4*clhs73;
        const double clhs258 =     clhs38*clhs76 - clhs4*clhs80;
        const double clhs259 =     clhs38*clhs83 - clhs4*clhs87;
        const double clhs260 =     clhs38*clhs90 - clhs4*clhs94;
        const double clhs261 =     -clhs101*clhs4 + clhs38*clhs97;
        const double clhs262 =     clhs104*clhs38 - clhs108*clhs4;
        const double clhs263 =     clhs111*clhs38 - clhs115*clhs4;
        const double clhs264 =     clhs122*clhs38 + clhs126*clhs4;
        const double clhs265 =     clhs133*clhs38 + clhs137*clhs4;
        const double clhs266 =     clhs144*clhs38 + clhs148*clhs4;
        const double clhs267 =     clhs155*clhs38 + clhs159*clhs4;
        const double clhs268 =     clhs166*clhs38 + clhs170*clhs4;
        const double clhs269 =     clhs177*clhs38 + clhs181*clhs4;
        const double clhs270 =     clhs188*clhs38 + clhs192*clhs4;
        const double clhs271 =     clhs199*clhs38 + clhs203*clhs4;
        const double clhs272 =     clhs210*clhs38 + clhs214*clhs4;
        const double clhs273 =     clhs221*clhs38 + clhs225*clhs4;
        const double clhs274 =     clhs232*clhs38 + clhs236*clhs4;
        const double clhs275 =     clhs243*clhs38 + clhs247*clhs4;
        const double clhs276 =     -clhs21*clhs7 + clhs38*clhs8;
        const double clhs277 =     clhs38*clhs42 - clhs45*clhs7;
        const double clhs278 =     clhs38*clhs49 - clhs52*clhs7;
        const double clhs279 =     clhs38*clhs56 - clhs59*clhs7;
        const double clhs280 =     clhs38*clhs63 - clhs66*clhs7;
        const double clhs281 =     clhs38*clhs70 - clhs7*clhs73;
        const double clhs282 =     clhs38*clhs77 - clhs7*clhs80;
        const double clhs283 =     clhs38*clhs84 - clhs7*clhs87;
        const double clhs284 =     clhs38*clhs91 - clhs7*clhs94;
        const double clhs285 =     -clhs101*clhs7 + clhs38*clhs98;
        const double clhs286 =     clhs105*clhs38 - clhs108*clhs7;
        const double clhs287 =     clhs112*clhs38 - clhs115*clhs7;
        const double clhs288 =     clhs123*clhs38 + clhs126*clhs7;
        const double clhs289 =     clhs134*clhs38 + clhs137*clhs7;
        const double clhs290 =     clhs145*clhs38 + clhs148*clhs7;
        const double clhs291 =     clhs156*clhs38 + clhs159*clhs7;
        const double clhs292 =     clhs167*clhs38 + clhs170*clhs7;
        const double clhs293 =     clhs178*clhs38 + clhs181*clhs7;
        const double clhs294 =     clhs189*clhs38 + clhs192*clhs7;
        const double clhs295 =     clhs200*clhs38 + clhs203*clhs7;
        const double clhs296 =     clhs211*clhs38 + clhs214*clhs7;
        const double clhs297 =     clhs222*clhs38 + clhs225*clhs7;
        const double clhs298 =     clhs233*clhs38 + clhs236*clhs7;
        const double clhs299 =     clhs244*clhs38 + clhs247*clhs7;
        const double clhs300 =     -clhs10*clhs21 + clhs11*clhs38;
        const double clhs301 =     -clhs10*clhs45 + clhs38*clhs43;
        const double clhs302 =     -clhs10*clhs52 + clhs38*clhs50;
        const double clhs303 =     -clhs10*clhs59 + clhs38*clhs57;
        const double clhs304 =     -clhs10*clhs66 + clhs38*clhs64;
        const double clhs305 =     -clhs10*clhs73 + clhs38*clhs71;
        const double clhs306 =     -clhs10*clhs80 + clhs38*clhs78;
        const double clhs307 =     -clhs10*clhs87 + clhs38*clhs85;
        const double clhs308 =     -clhs10*clhs94 + clhs38*clhs92;
        const double clhs309 =     -clhs10*clhs101 + clhs38*clhs99;
        const double clhs310 =     -clhs10*clhs108 + clhs106*clhs38;
        const double clhs311 =     -clhs10*clhs115 + clhs113*clhs38;
        const double clhs312 =     clhs10*clhs126 + clhs124*clhs38;
        const double clhs313 =     clhs10*clhs137 + clhs135*clhs38;
        const double clhs314 =     clhs10*clhs148 + clhs146*clhs38;
        const double clhs315 =     clhs10*clhs159 + clhs157*clhs38;
        const double clhs316 =     clhs10*clhs170 + clhs168*clhs38;
        const double clhs317 =     clhs10*clhs181 + clhs179*clhs38;
        const double clhs318 =     clhs10*clhs192 + clhs190*clhs38;
        const double clhs319 =     clhs10*clhs203 + clhs201*clhs38;
        const double clhs320 =     clhs10*clhs214 + clhs212*clhs38;
        const double clhs321 =     clhs10*clhs225 + clhs223*clhs38;
        const double clhs322 =     clhs10*clhs236 + clhs234*clhs38;
        const double clhs323 =     clhs10*clhs247 + clhs245*clhs38;
        const double clhs324 =     clhs20*normalslave(1,0)*penalty_parameter;
        const double clhs325 =     clhs44*normalslave(1,0)*penalty_parameter;
        const double clhs326 =     clhs51*normalslave(1,0)*penalty_parameter;
        const double clhs327 =     clhs58*normalslave(1,0)*penalty_parameter;
        const double clhs328 =     clhs65*normalslave(1,0)*penalty_parameter;
        const double clhs329 =     clhs72*normalslave(1,0)*penalty_parameter;
        const double clhs330 =     clhs79*normalslave(1,0)*penalty_parameter;
        const double clhs331 =     clhs86*normalslave(1,0)*penalty_parameter;
        const double clhs332 =     clhs93*normalslave(1,0)*penalty_parameter;
        const double clhs333 =     clhs100*normalslave(1,0)*penalty_parameter;
        const double clhs334 =     clhs107*normalslave(1,0)*penalty_parameter;
        const double clhs335 =     clhs114*normalslave(1,0)*penalty_parameter;
        const double clhs336 =     clhs118*clhs38 + clhs126*clhs23;
        const double clhs337 =     clhs129*clhs38 + clhs137*clhs23;
        const double clhs338 =     clhs140*clhs38 + clhs148*clhs23;
        const double clhs339 =     clhs151*clhs38 + clhs159*clhs23;
        const double clhs340 =     clhs162*clhs38 + clhs170*clhs23;
        const double clhs341 =     clhs173*clhs38 + clhs181*clhs23;
        const double clhs342 =     clhs184*clhs38 + clhs192*clhs23;
        const double clhs343 =     clhs195*clhs38 + clhs203*clhs23;
        const double clhs344 =     clhs206*clhs38 + clhs214*clhs23;
        const double clhs345 =     clhs217*clhs38 + clhs225*clhs23;
        const double clhs346 =     clhs228*clhs38 + clhs23*clhs236;
        const double clhs347 =     clhs23*clhs247 + clhs239*clhs38;
        const double clhs348 =     clhs20*normalslave(1,1)*penalty_parameter;
        const double clhs349 =     clhs44*normalslave(1,1)*penalty_parameter;
        const double clhs350 =     clhs51*normalslave(1,1)*penalty_parameter;
        const double clhs351 =     clhs58*normalslave(1,1)*penalty_parameter;
        const double clhs352 =     clhs65*normalslave(1,1)*penalty_parameter;
        const double clhs353 =     clhs72*normalslave(1,1)*penalty_parameter;
        const double clhs354 =     clhs79*normalslave(1,1)*penalty_parameter;
        const double clhs355 =     clhs86*normalslave(1,1)*penalty_parameter;
        const double clhs356 =     clhs93*normalslave(1,1)*penalty_parameter;
        const double clhs357 =     clhs100*normalslave(1,1)*penalty_parameter;
        const double clhs358 =     clhs107*normalslave(1,1)*penalty_parameter;
        const double clhs359 =     clhs114*normalslave(1,1)*penalty_parameter;
        const double clhs360 =     clhs20*normalslave(1,2)*penalty_parameter;
        const double clhs361 =     clhs44*normalslave(1,2)*penalty_parameter;
        const double clhs362 =     clhs51*normalslave(1,2)*penalty_parameter;
        const double clhs363 =     clhs58*normalslave(1,2)*penalty_parameter;
        const double clhs364 =     clhs65*normalslave(1,2)*penalty_parameter;
        const double clhs365 =     clhs72*normalslave(1,2)*penalty_parameter;
        const double clhs366 =     clhs79*normalslave(1,2)*penalty_parameter;
        const double clhs367 =     clhs86*normalslave(1,2)*penalty_parameter;
        const double clhs368 =     clhs93*normalslave(1,2)*penalty_parameter;
        const double clhs369 =     clhs100*normalslave(1,2)*penalty_parameter;
        const double clhs370 =     clhs107*normalslave(1,2)*penalty_parameter;
        const double clhs371 =     clhs114*normalslave(1,2)*penalty_parameter;
        const double clhs372 =     clhs119*clhs38 + clhs126*clhs25;
        const double clhs373 =     clhs130*clhs38 + clhs137*clhs25;
        const double clhs374 =     clhs141*clhs38 + clhs148*clhs25;
        const double clhs375 =     clhs152*clhs38 + clhs159*clhs25;
        const double clhs376 =     clhs163*clhs38 + clhs170*clhs25;
        const double clhs377 =     clhs174*clhs38 + clhs181*clhs25;
        const double clhs378 =     clhs185*clhs38 + clhs192*clhs25;
        const double clhs379 =     clhs196*clhs38 + clhs203*clhs25;
        const double clhs380 =     clhs207*clhs38 + clhs214*clhs25;
        const double clhs381 =     clhs218*clhs38 + clhs225*clhs25;
        const double clhs382 =     clhs229*clhs38 + clhs236*clhs25;
        const double clhs383 =     clhs240*clhs38 + clhs247*clhs25;
        const double clhs384 =     clhs120*clhs38 + clhs126*clhs27;
        const double clhs385 =     clhs131*clhs38 + clhs137*clhs27;
        const double clhs386 =     clhs142*clhs38 + clhs148*clhs27;
        const double clhs387 =     clhs153*clhs38 + clhs159*clhs27;
        const double clhs388 =     clhs164*clhs38 + clhs170*clhs27;
        const double clhs389 =     clhs175*clhs38 + clhs181*clhs27;
        const double clhs390 =     clhs186*clhs38 + clhs192*clhs27;
        const double clhs391 =     clhs197*clhs38 + clhs203*clhs27;
        const double clhs392 =     clhs208*clhs38 + clhs214*clhs27;
        const double clhs393 =     clhs219*clhs38 + clhs225*clhs27;
        const double clhs394 =     clhs230*clhs38 + clhs236*clhs27;
        const double clhs395 =     clhs241*clhs38 + clhs247*clhs27;
        const double clhs396 =     clhs121*clhs38 + clhs126*clhs29;
        const double clhs397 =     clhs132*clhs38 + clhs137*clhs29;
        const double clhs398 =     clhs143*clhs38 + clhs148*clhs29;
        const double clhs399 =     clhs154*clhs38 + clhs159*clhs29;
        const double clhs400 =     clhs165*clhs38 + clhs170*clhs29;
        const double clhs401 =     clhs176*clhs38 + clhs181*clhs29;
        const double clhs402 =     clhs187*clhs38 + clhs192*clhs29;
        const double clhs403 =     clhs198*clhs38 + clhs203*clhs29;
        const double clhs404 =     clhs209*clhs38 + clhs214*clhs29;
        const double clhs405 =     clhs220*clhs38 + clhs225*clhs29;
        const double clhs406 =     clhs231*clhs38 + clhs236*clhs29;
        const double clhs407 =     clhs242*clhs38 + clhs247*clhs29;
        const double clhs408 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs39*normalslave(1,0);
        lhs(0,1)=clhs46*normalslave(1,0);
        lhs(0,2)=clhs53*normalslave(1,0);
        lhs(0,3)=clhs60*normalslave(1,0);
        lhs(0,4)=clhs67*normalslave(1,0);
        lhs(0,5)=clhs74*normalslave(1,0);
        lhs(0,6)=clhs81*normalslave(1,0);
        lhs(0,7)=clhs88*normalslave(1,0);
        lhs(0,8)=clhs95*normalslave(1,0);
        lhs(0,9)=clhs102*normalslave(1,0);
        lhs(0,10)=clhs109*normalslave(1,0);
        lhs(0,11)=clhs116*normalslave(1,0);
        lhs(0,12)=clhs127*normalslave(1,0);
        lhs(0,13)=clhs138*normalslave(1,0);
        lhs(0,14)=clhs149*normalslave(1,0);
        lhs(0,15)=clhs160*normalslave(1,0);
        lhs(0,16)=clhs171*normalslave(1,0);
        lhs(0,17)=clhs182*normalslave(1,0);
        lhs(0,18)=clhs193*normalslave(1,0);
        lhs(0,19)=clhs204*normalslave(1,0);
        lhs(0,20)=clhs215*normalslave(1,0);
        lhs(0,21)=clhs226*normalslave(1,0);
        lhs(0,22)=clhs237*normalslave(1,0);
        lhs(0,23)=clhs248*normalslave(1,0);
        lhs(0,24)=0;
        lhs(0,25)=clhs0*clhs249;
        lhs(0,26)=0;
        lhs(0,27)=0;
        lhs(1,0)=clhs39*normalslave(1,1);
        lhs(1,1)=clhs46*normalslave(1,1);
        lhs(1,2)=clhs53*normalslave(1,1);
        lhs(1,3)=clhs60*normalslave(1,1);
        lhs(1,4)=clhs67*normalslave(1,1);
        lhs(1,5)=clhs74*normalslave(1,1);
        lhs(1,6)=clhs81*normalslave(1,1);
        lhs(1,7)=clhs88*normalslave(1,1);
        lhs(1,8)=clhs95*normalslave(1,1);
        lhs(1,9)=clhs102*normalslave(1,1);
        lhs(1,10)=clhs109*normalslave(1,1);
        lhs(1,11)=clhs116*normalslave(1,1);
        lhs(1,12)=clhs127*normalslave(1,1);
        lhs(1,13)=clhs138*normalslave(1,1);
        lhs(1,14)=clhs149*normalslave(1,1);
        lhs(1,15)=clhs160*normalslave(1,1);
        lhs(1,16)=clhs171*normalslave(1,1);
        lhs(1,17)=clhs182*normalslave(1,1);
        lhs(1,18)=clhs193*normalslave(1,1);
        lhs(1,19)=clhs204*normalslave(1,1);
        lhs(1,20)=clhs215*normalslave(1,1);
        lhs(1,21)=clhs226*normalslave(1,1);
        lhs(1,22)=clhs237*normalslave(1,1);
        lhs(1,23)=clhs248*normalslave(1,1);
        lhs(1,24)=0;
        lhs(1,25)=clhs0*clhs250;
        lhs(1,26)=0;
        lhs(1,27)=0;
        lhs(2,0)=clhs39*normalslave(1,2);
        lhs(2,1)=clhs46*normalslave(1,2);
        lhs(2,2)=clhs53*normalslave(1,2);
        lhs(2,3)=clhs60*normalslave(1,2);
        lhs(2,4)=clhs67*normalslave(1,2);
        lhs(2,5)=clhs74*normalslave(1,2);
        lhs(2,6)=clhs81*normalslave(1,2);
        lhs(2,7)=clhs88*normalslave(1,2);
        lhs(2,8)=clhs95*normalslave(1,2);
        lhs(2,9)=clhs102*normalslave(1,2);
        lhs(2,10)=clhs109*normalslave(1,2);
        lhs(2,11)=clhs116*normalslave(1,2);
        lhs(2,12)=clhs127*normalslave(1,2);
        lhs(2,13)=clhs138*normalslave(1,2);
        lhs(2,14)=clhs149*normalslave(1,2);
        lhs(2,15)=clhs160*normalslave(1,2);
        lhs(2,16)=clhs171*normalslave(1,2);
        lhs(2,17)=clhs182*normalslave(1,2);
        lhs(2,18)=clhs193*normalslave(1,2);
        lhs(2,19)=clhs204*normalslave(1,2);
        lhs(2,20)=clhs215*normalslave(1,2);
        lhs(2,21)=clhs226*normalslave(1,2);
        lhs(2,22)=clhs237*normalslave(1,2);
        lhs(2,23)=clhs248*normalslave(1,2);
        lhs(2,24)=0;
        lhs(2,25)=clhs0*clhs251;
        lhs(2,26)=0;
        lhs(2,27)=0;
        lhs(3,0)=clhs252*normalslave(1,0);
        lhs(3,1)=clhs253*normalslave(1,0);
        lhs(3,2)=clhs254*normalslave(1,0);
        lhs(3,3)=clhs255*normalslave(1,0);
        lhs(3,4)=clhs256*normalslave(1,0);
        lhs(3,5)=clhs257*normalslave(1,0);
        lhs(3,6)=clhs258*normalslave(1,0);
        lhs(3,7)=clhs259*normalslave(1,0);
        lhs(3,8)=clhs260*normalslave(1,0);
        lhs(3,9)=clhs261*normalslave(1,0);
        lhs(3,10)=clhs262*normalslave(1,0);
        lhs(3,11)=clhs263*normalslave(1,0);
        lhs(3,12)=clhs264*normalslave(1,0);
        lhs(3,13)=clhs265*normalslave(1,0);
        lhs(3,14)=clhs266*normalslave(1,0);
        lhs(3,15)=clhs267*normalslave(1,0);
        lhs(3,16)=clhs268*normalslave(1,0);
        lhs(3,17)=clhs269*normalslave(1,0);
        lhs(3,18)=clhs270*normalslave(1,0);
        lhs(3,19)=clhs271*normalslave(1,0);
        lhs(3,20)=clhs272*normalslave(1,0);
        lhs(3,21)=clhs273*normalslave(1,0);
        lhs(3,22)=clhs274*normalslave(1,0);
        lhs(3,23)=clhs275*normalslave(1,0);
        lhs(3,24)=0;
        lhs(3,25)=clhs249*clhs4;
        lhs(3,26)=0;
        lhs(3,27)=0;
        lhs(4,0)=clhs252*normalslave(1,1);
        lhs(4,1)=clhs253*normalslave(1,1);
        lhs(4,2)=clhs254*normalslave(1,1);
        lhs(4,3)=clhs255*normalslave(1,1);
        lhs(4,4)=clhs256*normalslave(1,1);
        lhs(4,5)=clhs257*normalslave(1,1);
        lhs(4,6)=clhs258*normalslave(1,1);
        lhs(4,7)=clhs259*normalslave(1,1);
        lhs(4,8)=clhs260*normalslave(1,1);
        lhs(4,9)=clhs261*normalslave(1,1);
        lhs(4,10)=clhs262*normalslave(1,1);
        lhs(4,11)=clhs263*normalslave(1,1);
        lhs(4,12)=clhs264*normalslave(1,1);
        lhs(4,13)=clhs265*normalslave(1,1);
        lhs(4,14)=clhs266*normalslave(1,1);
        lhs(4,15)=clhs267*normalslave(1,1);
        lhs(4,16)=clhs268*normalslave(1,1);
        lhs(4,17)=clhs269*normalslave(1,1);
        lhs(4,18)=clhs270*normalslave(1,1);
        lhs(4,19)=clhs271*normalslave(1,1);
        lhs(4,20)=clhs272*normalslave(1,1);
        lhs(4,21)=clhs273*normalslave(1,1);
        lhs(4,22)=clhs274*normalslave(1,1);
        lhs(4,23)=clhs275*normalslave(1,1);
        lhs(4,24)=0;
        lhs(4,25)=clhs250*clhs4;
        lhs(4,26)=0;
        lhs(4,27)=0;
        lhs(5,0)=clhs252*normalslave(1,2);
        lhs(5,1)=clhs253*normalslave(1,2);
        lhs(5,2)=clhs254*normalslave(1,2);
        lhs(5,3)=clhs255*normalslave(1,2);
        lhs(5,4)=clhs256*normalslave(1,2);
        lhs(5,5)=clhs257*normalslave(1,2);
        lhs(5,6)=clhs258*normalslave(1,2);
        lhs(5,7)=clhs259*normalslave(1,2);
        lhs(5,8)=clhs260*normalslave(1,2);
        lhs(5,9)=clhs261*normalslave(1,2);
        lhs(5,10)=clhs262*normalslave(1,2);
        lhs(5,11)=clhs263*normalslave(1,2);
        lhs(5,12)=clhs264*normalslave(1,2);
        lhs(5,13)=clhs265*normalslave(1,2);
        lhs(5,14)=clhs266*normalslave(1,2);
        lhs(5,15)=clhs267*normalslave(1,2);
        lhs(5,16)=clhs268*normalslave(1,2);
        lhs(5,17)=clhs269*normalslave(1,2);
        lhs(5,18)=clhs270*normalslave(1,2);
        lhs(5,19)=clhs271*normalslave(1,2);
        lhs(5,20)=clhs272*normalslave(1,2);
        lhs(5,21)=clhs273*normalslave(1,2);
        lhs(5,22)=clhs274*normalslave(1,2);
        lhs(5,23)=clhs275*normalslave(1,2);
        lhs(5,24)=0;
        lhs(5,25)=clhs251*clhs4;
        lhs(5,26)=0;
        lhs(5,27)=0;
        lhs(6,0)=clhs276*normalslave(1,0);
        lhs(6,1)=clhs277*normalslave(1,0);
        lhs(6,2)=clhs278*normalslave(1,0);
        lhs(6,3)=clhs279*normalslave(1,0);
        lhs(6,4)=clhs280*normalslave(1,0);
        lhs(6,5)=clhs281*normalslave(1,0);
        lhs(6,6)=clhs282*normalslave(1,0);
        lhs(6,7)=clhs283*normalslave(1,0);
        lhs(6,8)=clhs284*normalslave(1,0);
        lhs(6,9)=clhs285*normalslave(1,0);
        lhs(6,10)=clhs286*normalslave(1,0);
        lhs(6,11)=clhs287*normalslave(1,0);
        lhs(6,12)=clhs288*normalslave(1,0);
        lhs(6,13)=clhs289*normalslave(1,0);
        lhs(6,14)=clhs290*normalslave(1,0);
        lhs(6,15)=clhs291*normalslave(1,0);
        lhs(6,16)=clhs292*normalslave(1,0);
        lhs(6,17)=clhs293*normalslave(1,0);
        lhs(6,18)=clhs294*normalslave(1,0);
        lhs(6,19)=clhs295*normalslave(1,0);
        lhs(6,20)=clhs296*normalslave(1,0);
        lhs(6,21)=clhs297*normalslave(1,0);
        lhs(6,22)=clhs298*normalslave(1,0);
        lhs(6,23)=clhs299*normalslave(1,0);
        lhs(6,24)=0;
        lhs(6,25)=clhs249*clhs7;
        lhs(6,26)=0;
        lhs(6,27)=0;
        lhs(7,0)=clhs276*normalslave(1,1);
        lhs(7,1)=clhs277*normalslave(1,1);
        lhs(7,2)=clhs278*normalslave(1,1);
        lhs(7,3)=clhs279*normalslave(1,1);
        lhs(7,4)=clhs280*normalslave(1,1);
        lhs(7,5)=clhs281*normalslave(1,1);
        lhs(7,6)=clhs282*normalslave(1,1);
        lhs(7,7)=clhs283*normalslave(1,1);
        lhs(7,8)=clhs284*normalslave(1,1);
        lhs(7,9)=clhs285*normalslave(1,1);
        lhs(7,10)=clhs286*normalslave(1,1);
        lhs(7,11)=clhs287*normalslave(1,1);
        lhs(7,12)=clhs288*normalslave(1,1);
        lhs(7,13)=clhs289*normalslave(1,1);
        lhs(7,14)=clhs290*normalslave(1,1);
        lhs(7,15)=clhs291*normalslave(1,1);
        lhs(7,16)=clhs292*normalslave(1,1);
        lhs(7,17)=clhs293*normalslave(1,1);
        lhs(7,18)=clhs294*normalslave(1,1);
        lhs(7,19)=clhs295*normalslave(1,1);
        lhs(7,20)=clhs296*normalslave(1,1);
        lhs(7,21)=clhs297*normalslave(1,1);
        lhs(7,22)=clhs298*normalslave(1,1);
        lhs(7,23)=clhs299*normalslave(1,1);
        lhs(7,24)=0;
        lhs(7,25)=clhs250*clhs7;
        lhs(7,26)=0;
        lhs(7,27)=0;
        lhs(8,0)=clhs276*normalslave(1,2);
        lhs(8,1)=clhs277*normalslave(1,2);
        lhs(8,2)=clhs278*normalslave(1,2);
        lhs(8,3)=clhs279*normalslave(1,2);
        lhs(8,4)=clhs280*normalslave(1,2);
        lhs(8,5)=clhs281*normalslave(1,2);
        lhs(8,6)=clhs282*normalslave(1,2);
        lhs(8,7)=clhs283*normalslave(1,2);
        lhs(8,8)=clhs284*normalslave(1,2);
        lhs(8,9)=clhs285*normalslave(1,2);
        lhs(8,10)=clhs286*normalslave(1,2);
        lhs(8,11)=clhs287*normalslave(1,2);
        lhs(8,12)=clhs288*normalslave(1,2);
        lhs(8,13)=clhs289*normalslave(1,2);
        lhs(8,14)=clhs290*normalslave(1,2);
        lhs(8,15)=clhs291*normalslave(1,2);
        lhs(8,16)=clhs292*normalslave(1,2);
        lhs(8,17)=clhs293*normalslave(1,2);
        lhs(8,18)=clhs294*normalslave(1,2);
        lhs(8,19)=clhs295*normalslave(1,2);
        lhs(8,20)=clhs296*normalslave(1,2);
        lhs(8,21)=clhs297*normalslave(1,2);
        lhs(8,22)=clhs298*normalslave(1,2);
        lhs(8,23)=clhs299*normalslave(1,2);
        lhs(8,24)=0;
        lhs(8,25)=clhs251*clhs7;
        lhs(8,26)=0;
        lhs(8,27)=0;
        lhs(9,0)=clhs300*normalslave(1,0);
        lhs(9,1)=clhs301*normalslave(1,0);
        lhs(9,2)=clhs302*normalslave(1,0);
        lhs(9,3)=clhs303*normalslave(1,0);
        lhs(9,4)=clhs304*normalslave(1,0);
        lhs(9,5)=clhs305*normalslave(1,0);
        lhs(9,6)=clhs306*normalslave(1,0);
        lhs(9,7)=clhs307*normalslave(1,0);
        lhs(9,8)=clhs308*normalslave(1,0);
        lhs(9,9)=clhs309*normalslave(1,0);
        lhs(9,10)=clhs310*normalslave(1,0);
        lhs(9,11)=clhs311*normalslave(1,0);
        lhs(9,12)=clhs312*normalslave(1,0);
        lhs(9,13)=clhs313*normalslave(1,0);
        lhs(9,14)=clhs314*normalslave(1,0);
        lhs(9,15)=clhs315*normalslave(1,0);
        lhs(9,16)=clhs316*normalslave(1,0);
        lhs(9,17)=clhs317*normalslave(1,0);
        lhs(9,18)=clhs318*normalslave(1,0);
        lhs(9,19)=clhs319*normalslave(1,0);
        lhs(9,20)=clhs320*normalslave(1,0);
        lhs(9,21)=clhs321*normalslave(1,0);
        lhs(9,22)=clhs322*normalslave(1,0);
        lhs(9,23)=clhs323*normalslave(1,0);
        lhs(9,24)=0;
        lhs(9,25)=clhs10*clhs249;
        lhs(9,26)=0;
        lhs(9,27)=0;
        lhs(10,0)=clhs300*normalslave(1,1);
        lhs(10,1)=clhs301*normalslave(1,1);
        lhs(10,2)=clhs302*normalslave(1,1);
        lhs(10,3)=clhs303*normalslave(1,1);
        lhs(10,4)=clhs304*normalslave(1,1);
        lhs(10,5)=clhs305*normalslave(1,1);
        lhs(10,6)=clhs306*normalslave(1,1);
        lhs(10,7)=clhs307*normalslave(1,1);
        lhs(10,8)=clhs308*normalslave(1,1);
        lhs(10,9)=clhs309*normalslave(1,1);
        lhs(10,10)=clhs310*normalslave(1,1);
        lhs(10,11)=clhs311*normalslave(1,1);
        lhs(10,12)=clhs312*normalslave(1,1);
        lhs(10,13)=clhs313*normalslave(1,1);
        lhs(10,14)=clhs314*normalslave(1,1);
        lhs(10,15)=clhs315*normalslave(1,1);
        lhs(10,16)=clhs316*normalslave(1,1);
        lhs(10,17)=clhs317*normalslave(1,1);
        lhs(10,18)=clhs318*normalslave(1,1);
        lhs(10,19)=clhs319*normalslave(1,1);
        lhs(10,20)=clhs320*normalslave(1,1);
        lhs(10,21)=clhs321*normalslave(1,1);
        lhs(10,22)=clhs322*normalslave(1,1);
        lhs(10,23)=clhs323*normalslave(1,1);
        lhs(10,24)=0;
        lhs(10,25)=clhs10*clhs250;
        lhs(10,26)=0;
        lhs(10,27)=0;
        lhs(11,0)=clhs300*normalslave(1,2);
        lhs(11,1)=clhs301*normalslave(1,2);
        lhs(11,2)=clhs302*normalslave(1,2);
        lhs(11,3)=clhs303*normalslave(1,2);
        lhs(11,4)=clhs304*normalslave(1,2);
        lhs(11,5)=clhs305*normalslave(1,2);
        lhs(11,6)=clhs306*normalslave(1,2);
        lhs(11,7)=clhs307*normalslave(1,2);
        lhs(11,8)=clhs308*normalslave(1,2);
        lhs(11,9)=clhs309*normalslave(1,2);
        lhs(11,10)=clhs310*normalslave(1,2);
        lhs(11,11)=clhs311*normalslave(1,2);
        lhs(11,12)=clhs312*normalslave(1,2);
        lhs(11,13)=clhs313*normalslave(1,2);
        lhs(11,14)=clhs314*normalslave(1,2);
        lhs(11,15)=clhs315*normalslave(1,2);
        lhs(11,16)=clhs316*normalslave(1,2);
        lhs(11,17)=clhs317*normalslave(1,2);
        lhs(11,18)=clhs318*normalslave(1,2);
        lhs(11,19)=clhs319*normalslave(1,2);
        lhs(11,20)=clhs320*normalslave(1,2);
        lhs(11,21)=clhs321*normalslave(1,2);
        lhs(11,22)=clhs322*normalslave(1,2);
        lhs(11,23)=clhs323*normalslave(1,2);
        lhs(11,24)=0;
        lhs(11,25)=clhs10*clhs251;
        lhs(11,26)=0;
        lhs(11,27)=0;
        lhs(12,0)=clhs23*clhs324;
        lhs(12,1)=clhs23*clhs325;
        lhs(12,2)=clhs23*clhs326;
        lhs(12,3)=clhs23*clhs327;
        lhs(12,4)=clhs23*clhs328;
        lhs(12,5)=clhs23*clhs329;
        lhs(12,6)=clhs23*clhs330;
        lhs(12,7)=clhs23*clhs331;
        lhs(12,8)=clhs23*clhs332;
        lhs(12,9)=clhs23*clhs333;
        lhs(12,10)=clhs23*clhs334;
        lhs(12,11)=clhs23*clhs335;
        lhs(12,12)=-clhs336*normalslave(1,0);
        lhs(12,13)=-clhs337*normalslave(1,0);
        lhs(12,14)=-clhs338*normalslave(1,0);
        lhs(12,15)=-clhs339*normalslave(1,0);
        lhs(12,16)=-clhs340*normalslave(1,0);
        lhs(12,17)=-clhs341*normalslave(1,0);
        lhs(12,18)=-clhs342*normalslave(1,0);
        lhs(12,19)=-clhs343*normalslave(1,0);
        lhs(12,20)=-clhs344*normalslave(1,0);
        lhs(12,21)=-clhs345*normalslave(1,0);
        lhs(12,22)=-clhs346*normalslave(1,0);
        lhs(12,23)=-clhs347*normalslave(1,0);
        lhs(12,24)=0;
        lhs(12,25)=-clhs23*clhs249;
        lhs(12,26)=0;
        lhs(12,27)=0;
        lhs(13,0)=clhs23*clhs348;
        lhs(13,1)=clhs23*clhs349;
        lhs(13,2)=clhs23*clhs350;
        lhs(13,3)=clhs23*clhs351;
        lhs(13,4)=clhs23*clhs352;
        lhs(13,5)=clhs23*clhs353;
        lhs(13,6)=clhs23*clhs354;
        lhs(13,7)=clhs23*clhs355;
        lhs(13,8)=clhs23*clhs356;
        lhs(13,9)=clhs23*clhs357;
        lhs(13,10)=clhs23*clhs358;
        lhs(13,11)=clhs23*clhs359;
        lhs(13,12)=-clhs336*normalslave(1,1);
        lhs(13,13)=-clhs337*normalslave(1,1);
        lhs(13,14)=-clhs338*normalslave(1,1);
        lhs(13,15)=-clhs339*normalslave(1,1);
        lhs(13,16)=-clhs340*normalslave(1,1);
        lhs(13,17)=-clhs341*normalslave(1,1);
        lhs(13,18)=-clhs342*normalslave(1,1);
        lhs(13,19)=-clhs343*normalslave(1,1);
        lhs(13,20)=-clhs344*normalslave(1,1);
        lhs(13,21)=-clhs345*normalslave(1,1);
        lhs(13,22)=-clhs346*normalslave(1,1);
        lhs(13,23)=-clhs347*normalslave(1,1);
        lhs(13,24)=0;
        lhs(13,25)=-clhs23*clhs250;
        lhs(13,26)=0;
        lhs(13,27)=0;
        lhs(14,0)=clhs23*clhs360;
        lhs(14,1)=clhs23*clhs361;
        lhs(14,2)=clhs23*clhs362;
        lhs(14,3)=clhs23*clhs363;
        lhs(14,4)=clhs23*clhs364;
        lhs(14,5)=clhs23*clhs365;
        lhs(14,6)=clhs23*clhs366;
        lhs(14,7)=clhs23*clhs367;
        lhs(14,8)=clhs23*clhs368;
        lhs(14,9)=clhs23*clhs369;
        lhs(14,10)=clhs23*clhs370;
        lhs(14,11)=clhs23*clhs371;
        lhs(14,12)=-clhs336*normalslave(1,2);
        lhs(14,13)=-clhs337*normalslave(1,2);
        lhs(14,14)=-clhs338*normalslave(1,2);
        lhs(14,15)=-clhs339*normalslave(1,2);
        lhs(14,16)=-clhs340*normalslave(1,2);
        lhs(14,17)=-clhs341*normalslave(1,2);
        lhs(14,18)=-clhs342*normalslave(1,2);
        lhs(14,19)=-clhs343*normalslave(1,2);
        lhs(14,20)=-clhs344*normalslave(1,2);
        lhs(14,21)=-clhs345*normalslave(1,2);
        lhs(14,22)=-clhs346*normalslave(1,2);
        lhs(14,23)=-clhs347*normalslave(1,2);
        lhs(14,24)=0;
        lhs(14,25)=-clhs23*clhs251;
        lhs(14,26)=0;
        lhs(14,27)=0;
        lhs(15,0)=clhs25*clhs324;
        lhs(15,1)=clhs25*clhs325;
        lhs(15,2)=clhs25*clhs326;
        lhs(15,3)=clhs25*clhs327;
        lhs(15,4)=clhs25*clhs328;
        lhs(15,5)=clhs25*clhs329;
        lhs(15,6)=clhs25*clhs330;
        lhs(15,7)=clhs25*clhs331;
        lhs(15,8)=clhs25*clhs332;
        lhs(15,9)=clhs25*clhs333;
        lhs(15,10)=clhs25*clhs334;
        lhs(15,11)=clhs25*clhs335;
        lhs(15,12)=-clhs372*normalslave(1,0);
        lhs(15,13)=-clhs373*normalslave(1,0);
        lhs(15,14)=-clhs374*normalslave(1,0);
        lhs(15,15)=-clhs375*normalslave(1,0);
        lhs(15,16)=-clhs376*normalslave(1,0);
        lhs(15,17)=-clhs377*normalslave(1,0);
        lhs(15,18)=-clhs378*normalslave(1,0);
        lhs(15,19)=-clhs379*normalslave(1,0);
        lhs(15,20)=-clhs380*normalslave(1,0);
        lhs(15,21)=-clhs381*normalslave(1,0);
        lhs(15,22)=-clhs382*normalslave(1,0);
        lhs(15,23)=-clhs383*normalslave(1,0);
        lhs(15,24)=0;
        lhs(15,25)=-clhs249*clhs25;
        lhs(15,26)=0;
        lhs(15,27)=0;
        lhs(16,0)=clhs25*clhs348;
        lhs(16,1)=clhs25*clhs349;
        lhs(16,2)=clhs25*clhs350;
        lhs(16,3)=clhs25*clhs351;
        lhs(16,4)=clhs25*clhs352;
        lhs(16,5)=clhs25*clhs353;
        lhs(16,6)=clhs25*clhs354;
        lhs(16,7)=clhs25*clhs355;
        lhs(16,8)=clhs25*clhs356;
        lhs(16,9)=clhs25*clhs357;
        lhs(16,10)=clhs25*clhs358;
        lhs(16,11)=clhs25*clhs359;
        lhs(16,12)=-clhs372*normalslave(1,1);
        lhs(16,13)=-clhs373*normalslave(1,1);
        lhs(16,14)=-clhs374*normalslave(1,1);
        lhs(16,15)=-clhs375*normalslave(1,1);
        lhs(16,16)=-clhs376*normalslave(1,1);
        lhs(16,17)=-clhs377*normalslave(1,1);
        lhs(16,18)=-clhs378*normalslave(1,1);
        lhs(16,19)=-clhs379*normalslave(1,1);
        lhs(16,20)=-clhs380*normalslave(1,1);
        lhs(16,21)=-clhs381*normalslave(1,1);
        lhs(16,22)=-clhs382*normalslave(1,1);
        lhs(16,23)=-clhs383*normalslave(1,1);
        lhs(16,24)=0;
        lhs(16,25)=-clhs25*clhs250;
        lhs(16,26)=0;
        lhs(16,27)=0;
        lhs(17,0)=clhs25*clhs360;
        lhs(17,1)=clhs25*clhs361;
        lhs(17,2)=clhs25*clhs362;
        lhs(17,3)=clhs25*clhs363;
        lhs(17,4)=clhs25*clhs364;
        lhs(17,5)=clhs25*clhs365;
        lhs(17,6)=clhs25*clhs366;
        lhs(17,7)=clhs25*clhs367;
        lhs(17,8)=clhs25*clhs368;
        lhs(17,9)=clhs25*clhs369;
        lhs(17,10)=clhs25*clhs370;
        lhs(17,11)=clhs25*clhs371;
        lhs(17,12)=-clhs372*normalslave(1,2);
        lhs(17,13)=-clhs373*normalslave(1,2);
        lhs(17,14)=-clhs374*normalslave(1,2);
        lhs(17,15)=-clhs375*normalslave(1,2);
        lhs(17,16)=-clhs376*normalslave(1,2);
        lhs(17,17)=-clhs377*normalslave(1,2);
        lhs(17,18)=-clhs378*normalslave(1,2);
        lhs(17,19)=-clhs379*normalslave(1,2);
        lhs(17,20)=-clhs380*normalslave(1,2);
        lhs(17,21)=-clhs381*normalslave(1,2);
        lhs(17,22)=-clhs382*normalslave(1,2);
        lhs(17,23)=-clhs383*normalslave(1,2);
        lhs(17,24)=0;
        lhs(17,25)=-clhs25*clhs251;
        lhs(17,26)=0;
        lhs(17,27)=0;
        lhs(18,0)=clhs27*clhs324;
        lhs(18,1)=clhs27*clhs325;
        lhs(18,2)=clhs27*clhs326;
        lhs(18,3)=clhs27*clhs327;
        lhs(18,4)=clhs27*clhs328;
        lhs(18,5)=clhs27*clhs329;
        lhs(18,6)=clhs27*clhs330;
        lhs(18,7)=clhs27*clhs331;
        lhs(18,8)=clhs27*clhs332;
        lhs(18,9)=clhs27*clhs333;
        lhs(18,10)=clhs27*clhs334;
        lhs(18,11)=clhs27*clhs335;
        lhs(18,12)=-clhs384*normalslave(1,0);
        lhs(18,13)=-clhs385*normalslave(1,0);
        lhs(18,14)=-clhs386*normalslave(1,0);
        lhs(18,15)=-clhs387*normalslave(1,0);
        lhs(18,16)=-clhs388*normalslave(1,0);
        lhs(18,17)=-clhs389*normalslave(1,0);
        lhs(18,18)=-clhs390*normalslave(1,0);
        lhs(18,19)=-clhs391*normalslave(1,0);
        lhs(18,20)=-clhs392*normalslave(1,0);
        lhs(18,21)=-clhs393*normalslave(1,0);
        lhs(18,22)=-clhs394*normalslave(1,0);
        lhs(18,23)=-clhs395*normalslave(1,0);
        lhs(18,24)=0;
        lhs(18,25)=-clhs249*clhs27;
        lhs(18,26)=0;
        lhs(18,27)=0;
        lhs(19,0)=clhs27*clhs348;
        lhs(19,1)=clhs27*clhs349;
        lhs(19,2)=clhs27*clhs350;
        lhs(19,3)=clhs27*clhs351;
        lhs(19,4)=clhs27*clhs352;
        lhs(19,5)=clhs27*clhs353;
        lhs(19,6)=clhs27*clhs354;
        lhs(19,7)=clhs27*clhs355;
        lhs(19,8)=clhs27*clhs356;
        lhs(19,9)=clhs27*clhs357;
        lhs(19,10)=clhs27*clhs358;
        lhs(19,11)=clhs27*clhs359;
        lhs(19,12)=-clhs384*normalslave(1,1);
        lhs(19,13)=-clhs385*normalslave(1,1);
        lhs(19,14)=-clhs386*normalslave(1,1);
        lhs(19,15)=-clhs387*normalslave(1,1);
        lhs(19,16)=-clhs388*normalslave(1,1);
        lhs(19,17)=-clhs389*normalslave(1,1);
        lhs(19,18)=-clhs390*normalslave(1,1);
        lhs(19,19)=-clhs391*normalslave(1,1);
        lhs(19,20)=-clhs392*normalslave(1,1);
        lhs(19,21)=-clhs393*normalslave(1,1);
        lhs(19,22)=-clhs394*normalslave(1,1);
        lhs(19,23)=-clhs395*normalslave(1,1);
        lhs(19,24)=0;
        lhs(19,25)=-clhs250*clhs27;
        lhs(19,26)=0;
        lhs(19,27)=0;
        lhs(20,0)=clhs27*clhs360;
        lhs(20,1)=clhs27*clhs361;
        lhs(20,2)=clhs27*clhs362;
        lhs(20,3)=clhs27*clhs363;
        lhs(20,4)=clhs27*clhs364;
        lhs(20,5)=clhs27*clhs365;
        lhs(20,6)=clhs27*clhs366;
        lhs(20,7)=clhs27*clhs367;
        lhs(20,8)=clhs27*clhs368;
        lhs(20,9)=clhs27*clhs369;
        lhs(20,10)=clhs27*clhs370;
        lhs(20,11)=clhs27*clhs371;
        lhs(20,12)=-clhs384*normalslave(1,2);
        lhs(20,13)=-clhs385*normalslave(1,2);
        lhs(20,14)=-clhs386*normalslave(1,2);
        lhs(20,15)=-clhs387*normalslave(1,2);
        lhs(20,16)=-clhs388*normalslave(1,2);
        lhs(20,17)=-clhs389*normalslave(1,2);
        lhs(20,18)=-clhs390*normalslave(1,2);
        lhs(20,19)=-clhs391*normalslave(1,2);
        lhs(20,20)=-clhs392*normalslave(1,2);
        lhs(20,21)=-clhs393*normalslave(1,2);
        lhs(20,22)=-clhs394*normalslave(1,2);
        lhs(20,23)=-clhs395*normalslave(1,2);
        lhs(20,24)=0;
        lhs(20,25)=-clhs251*clhs27;
        lhs(20,26)=0;
        lhs(20,27)=0;
        lhs(21,0)=clhs29*clhs324;
        lhs(21,1)=clhs29*clhs325;
        lhs(21,2)=clhs29*clhs326;
        lhs(21,3)=clhs29*clhs327;
        lhs(21,4)=clhs29*clhs328;
        lhs(21,5)=clhs29*clhs329;
        lhs(21,6)=clhs29*clhs330;
        lhs(21,7)=clhs29*clhs331;
        lhs(21,8)=clhs29*clhs332;
        lhs(21,9)=clhs29*clhs333;
        lhs(21,10)=clhs29*clhs334;
        lhs(21,11)=clhs29*clhs335;
        lhs(21,12)=-clhs396*normalslave(1,0);
        lhs(21,13)=-clhs397*normalslave(1,0);
        lhs(21,14)=-clhs398*normalslave(1,0);
        lhs(21,15)=-clhs399*normalslave(1,0);
        lhs(21,16)=-clhs400*normalslave(1,0);
        lhs(21,17)=-clhs401*normalslave(1,0);
        lhs(21,18)=-clhs402*normalslave(1,0);
        lhs(21,19)=-clhs403*normalslave(1,0);
        lhs(21,20)=-clhs404*normalslave(1,0);
        lhs(21,21)=-clhs405*normalslave(1,0);
        lhs(21,22)=-clhs406*normalslave(1,0);
        lhs(21,23)=-clhs407*normalslave(1,0);
        lhs(21,24)=0;
        lhs(21,25)=-clhs249*clhs29;
        lhs(21,26)=0;
        lhs(21,27)=0;
        lhs(22,0)=clhs29*clhs348;
        lhs(22,1)=clhs29*clhs349;
        lhs(22,2)=clhs29*clhs350;
        lhs(22,3)=clhs29*clhs351;
        lhs(22,4)=clhs29*clhs352;
        lhs(22,5)=clhs29*clhs353;
        lhs(22,6)=clhs29*clhs354;
        lhs(22,7)=clhs29*clhs355;
        lhs(22,8)=clhs29*clhs356;
        lhs(22,9)=clhs29*clhs357;
        lhs(22,10)=clhs29*clhs358;
        lhs(22,11)=clhs29*clhs359;
        lhs(22,12)=-clhs396*normalslave(1,1);
        lhs(22,13)=-clhs397*normalslave(1,1);
        lhs(22,14)=-clhs398*normalslave(1,1);
        lhs(22,15)=-clhs399*normalslave(1,1);
        lhs(22,16)=-clhs400*normalslave(1,1);
        lhs(22,17)=-clhs401*normalslave(1,1);
        lhs(22,18)=-clhs402*normalslave(1,1);
        lhs(22,19)=-clhs403*normalslave(1,1);
        lhs(22,20)=-clhs404*normalslave(1,1);
        lhs(22,21)=-clhs405*normalslave(1,1);
        lhs(22,22)=-clhs406*normalslave(1,1);
        lhs(22,23)=-clhs407*normalslave(1,1);
        lhs(22,24)=0;
        lhs(22,25)=-clhs250*clhs29;
        lhs(22,26)=0;
        lhs(22,27)=0;
        lhs(23,0)=clhs29*clhs360;
        lhs(23,1)=clhs29*clhs361;
        lhs(23,2)=clhs29*clhs362;
        lhs(23,3)=clhs29*clhs363;
        lhs(23,4)=clhs29*clhs364;
        lhs(23,5)=clhs29*clhs365;
        lhs(23,6)=clhs29*clhs366;
        lhs(23,7)=clhs29*clhs367;
        lhs(23,8)=clhs29*clhs368;
        lhs(23,9)=clhs29*clhs369;
        lhs(23,10)=clhs29*clhs370;
        lhs(23,11)=clhs29*clhs371;
        lhs(23,12)=-clhs396*normalslave(1,2);
        lhs(23,13)=-clhs397*normalslave(1,2);
        lhs(23,14)=-clhs398*normalslave(1,2);
        lhs(23,15)=-clhs399*normalslave(1,2);
        lhs(23,16)=-clhs400*normalslave(1,2);
        lhs(23,17)=-clhs401*normalslave(1,2);
        lhs(23,18)=-clhs402*normalslave(1,2);
        lhs(23,19)=-clhs403*normalslave(1,2);
        lhs(23,20)=-clhs404*normalslave(1,2);
        lhs(23,21)=-clhs405*normalslave(1,2);
        lhs(23,22)=-clhs406*normalslave(1,2);
        lhs(23,23)=-clhs407*normalslave(1,2);
        lhs(23,24)=0;
        lhs(23,25)=-clhs251*clhs29;
        lhs(23,26)=0;
        lhs(23,27)=0;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs408;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs20*scale_factor;
        lhs(25,1)=clhs44*scale_factor;
        lhs(25,2)=clhs51*scale_factor;
        lhs(25,3)=clhs58*scale_factor;
        lhs(25,4)=clhs65*scale_factor;
        lhs(25,5)=clhs72*scale_factor;
        lhs(25,6)=clhs79*scale_factor;
        lhs(25,7)=clhs86*scale_factor;
        lhs(25,8)=clhs93*scale_factor;
        lhs(25,9)=clhs100*scale_factor;
        lhs(25,10)=clhs107*scale_factor;
        lhs(25,11)=clhs114*scale_factor;
        lhs(25,12)=-clhs125*scale_factor;
        lhs(25,13)=-clhs136*scale_factor;
        lhs(25,14)=-clhs147*scale_factor;
        lhs(25,15)=-clhs158*scale_factor;
        lhs(25,16)=-clhs169*scale_factor;
        lhs(25,17)=-clhs180*scale_factor;
        lhs(25,18)=-clhs191*scale_factor;
        lhs(25,19)=-clhs202*scale_factor;
        lhs(25,20)=-clhs213*scale_factor;
        lhs(25,21)=-clhs224*scale_factor;
        lhs(25,22)=-clhs235*scale_factor;
        lhs(25,23)=-clhs246*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs408;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs408;
    }
    else if (rActiveInactive == 10 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(1,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(1,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(1,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(1,0)*penalty_parameter;
        const double clhs22 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(3,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(3,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(3,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(3,0)*penalty_parameter;
        const double clhs32 =     X1(0,0) + u1(0,0);
        const double clhs33 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs34 =     X1(1,0) + u1(1,0);
        const double clhs35 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs36 =     X1(2,0) + u1(2,0);
        const double clhs37 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs38 =     X1(3,0) + u1(3,0);
        const double clhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs40 =     X1(0,1) + u1(0,1);
        const double clhs41 =     X1(1,1) + u1(1,1);
        const double clhs42 =     X1(2,1) + u1(2,1);
        const double clhs43 =     X1(3,1) + u1(3,1);
        const double clhs44 =     X1(0,2) + u1(0,2);
        const double clhs45 =     X1(1,2) + u1(1,2);
        const double clhs46 =     X1(2,2) + u1(2,2);
        const double clhs47 =     X1(3,2) + u1(3,2);
        const double clhs48 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs32*clhs33 + clhs34*clhs35 + clhs36*clhs37 + clhs38*clhs39) + normalslave(1,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs33*clhs40 + clhs35*clhs41 + clhs37*clhs42 + clhs39*clhs43 - clhs6*clhs7) + normalslave(1,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs44 + clhs35*clhs45 + clhs37*clhs46 + clhs39*clhs47));
        const double clhs49 =     clhs48*normalslave(1,0);
        const double clhs50 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs51 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs52 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs53 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs32*clhs50 + clhs34*clhs51 + clhs36*clhs52 + clhs38*clhs53) + normalslave(3,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs40*clhs50 + clhs41*clhs51 + clhs42*clhs52 + clhs43*clhs53) + normalslave(3,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs44*clhs50 + clhs45*clhs51 + clhs46*clhs52 + clhs47*clhs53));
        const double clhs55 =     clhs54*normalslave(3,0);
        const double clhs56 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs57 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs60 =     normalslave(1,0)*(clhs16*clhs56 + clhs17*clhs57 + clhs18*clhs58 + clhs19*clhs59) + normalslave(1,1)*(clhs0 + clhs1*clhs56 + clhs3*clhs57 + clhs58*clhs6 + clhs59*clhs9) + normalslave(1,2)*(clhs12*clhs56 + clhs13*clhs57 + clhs14*clhs58 + clhs15*clhs59);
        const double clhs61 =     clhs60*normalslave(1,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs65 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs66 =     normalslave(3,0)*(clhs16*clhs62 + clhs17*clhs63 + clhs18*clhs64 + clhs19*clhs65) + normalslave(3,1)*(clhs1*clhs62 + clhs22 + clhs3*clhs63 + clhs6*clhs64 + clhs65*clhs9) + normalslave(3,2)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64 + clhs15*clhs65);
        const double clhs67 =     clhs66*normalslave(3,0)*penalty_parameter;
        const double clhs68 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs69 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs70 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs71 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs72 =     normalslave(1,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(1,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(1,2)*(clhs0 + clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71);
        const double clhs73 =     clhs72*normalslave(1,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs75 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs76 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs77 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs78 =     normalslave(3,0)*(clhs16*clhs74 + clhs17*clhs75 + clhs18*clhs76 + clhs19*clhs77) + normalslave(3,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs6*clhs76 + clhs77*clhs9) + normalslave(3,2)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76 + clhs15*clhs77 + clhs22);
        const double clhs79 =     clhs78*normalslave(3,0)*penalty_parameter;
        const double clhs80 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs81 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs82 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs83 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs84 =     normalslave(1,0)*(clhs16*clhs80 + clhs17*clhs81 + clhs18*clhs82 + clhs19*clhs83 + clhs4) + normalslave(1,1)*(clhs1*clhs80 + clhs3*clhs81 + clhs6*clhs82 + clhs83*clhs9) + normalslave(1,2)*(clhs12*clhs80 + clhs13*clhs81 + clhs14*clhs82 + clhs15*clhs83);
        const double clhs85 =     clhs84*normalslave(1,0)*penalty_parameter;
        const double clhs86 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs87 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs90 =     normalslave(3,0)*(clhs16*clhs86 + clhs17*clhs87 + clhs18*clhs88 + clhs19*clhs89 + clhs24) + normalslave(3,1)*(clhs1*clhs86 + clhs3*clhs87 + clhs6*clhs88 + clhs89*clhs9) + normalslave(3,2)*(clhs12*clhs86 + clhs13*clhs87 + clhs14*clhs88 + clhs15*clhs89);
        const double clhs91 =     clhs90*normalslave(3,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs93 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs94 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs95 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs96 =     normalslave(1,0)*(clhs16*clhs92 + clhs17*clhs93 + clhs18*clhs94 + clhs19*clhs95) + normalslave(1,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs4 + clhs6*clhs94 + clhs9*clhs95) + normalslave(1,2)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs15*clhs95);
        const double clhs97 =     clhs96*normalslave(1,0)*penalty_parameter;
        const double clhs98 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs99 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs100 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs101 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs102 =     normalslave(3,0)*(clhs100*clhs18 + clhs101*clhs19 + clhs16*clhs98 + clhs17*clhs99) + normalslave(3,1)*(clhs1*clhs98 + clhs100*clhs6 + clhs101*clhs9 + clhs24 + clhs3*clhs99) + normalslave(3,2)*(clhs100*clhs14 + clhs101*clhs15 + clhs12*clhs98 + clhs13*clhs99);
        const double clhs103 =     clhs102*normalslave(3,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs105 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs106 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs107 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs108 =     normalslave(1,0)*(clhs104*clhs16 + clhs105*clhs17 + clhs106*clhs18 + clhs107*clhs19) + normalslave(1,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs107*clhs9) + normalslave(1,2)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14 + clhs107*clhs15 + clhs4);
        const double clhs109 =     clhs108*normalslave(1,0)*penalty_parameter;
        const double clhs110 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs111 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs112 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs113 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs114 =     normalslave(3,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(3,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(3,2)*(clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15 + clhs24);
        const double clhs115 =     clhs114*normalslave(3,0)*penalty_parameter;
        const double clhs116 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs117 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs118 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs119 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs120 =     normalslave(1,0)*(clhs116*clhs16 + clhs117*clhs17 + clhs118*clhs18 + clhs119*clhs19 + clhs7) + normalslave(1,1)*(clhs1*clhs116 + clhs117*clhs3 + clhs118*clhs6 + clhs119*clhs9) + normalslave(1,2)*(clhs116*clhs12 + clhs117*clhs13 + clhs118*clhs14 + clhs119*clhs15);
        const double clhs121 =     clhs120*normalslave(1,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs123 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs124 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs125 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs126 =     normalslave(3,0)*(clhs122*clhs16 + clhs123*clhs17 + clhs124*clhs18 + clhs125*clhs19 + clhs26) + normalslave(3,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6 + clhs125*clhs9) + normalslave(3,2)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14 + clhs125*clhs15);
        const double clhs127 =     clhs126*normalslave(3,0)*penalty_parameter;
        const double clhs128 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs129 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs130 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs131 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs132 =     normalslave(1,0)*(clhs128*clhs16 + clhs129*clhs17 + clhs130*clhs18 + clhs131*clhs19) + normalslave(1,1)*(clhs1*clhs128 + clhs129*clhs3 + clhs130*clhs6 + clhs131*clhs9 + clhs7) + normalslave(1,2)*(clhs12*clhs128 + clhs129*clhs13 + clhs130*clhs14 + clhs131*clhs15);
        const double clhs133 =     clhs132*normalslave(1,0)*penalty_parameter;
        const double clhs134 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs135 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs136 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs137 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs138 =     normalslave(3,0)*(clhs134*clhs16 + clhs135*clhs17 + clhs136*clhs18 + clhs137*clhs19) + normalslave(3,1)*(clhs1*clhs134 + clhs135*clhs3 + clhs136*clhs6 + clhs137*clhs9 + clhs26) + normalslave(3,2)*(clhs12*clhs134 + clhs13*clhs135 + clhs136*clhs14 + clhs137*clhs15);
        const double clhs139 =     clhs138*normalslave(3,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs141 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs142 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs143 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs144 =     normalslave(1,0)*(clhs140*clhs16 + clhs141*clhs17 + clhs142*clhs18 + clhs143*clhs19) + normalslave(1,1)*(clhs1*clhs140 + clhs141*clhs3 + clhs142*clhs6 + clhs143*clhs9) + normalslave(1,2)*(clhs12*clhs140 + clhs13*clhs141 + clhs14*clhs142 + clhs143*clhs15 + clhs7);
        const double clhs145 =     clhs144*normalslave(1,0)*penalty_parameter;
        const double clhs146 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs147 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs148 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs149 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs150 =     normalslave(3,0)*(clhs146*clhs16 + clhs147*clhs17 + clhs148*clhs18 + clhs149*clhs19) + normalslave(3,1)*(clhs1*clhs146 + clhs147*clhs3 + clhs148*clhs6 + clhs149*clhs9) + normalslave(3,2)*(clhs12*clhs146 + clhs13*clhs147 + clhs14*clhs148 + clhs149*clhs15 + clhs26);
        const double clhs151 =     clhs150*normalslave(3,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs153 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs154 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs155 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs156 =     normalslave(1,0)*(clhs10 + clhs152*clhs16 + clhs153*clhs17 + clhs154*clhs18 + clhs155*clhs19) + normalslave(1,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs155*clhs9) + normalslave(1,2)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154 + clhs15*clhs155);
        const double clhs157 =     clhs156*normalslave(1,0)*penalty_parameter;
        const double clhs158 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs159 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs160 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs161 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs162 =     normalslave(3,0)*(clhs158*clhs16 + clhs159*clhs17 + clhs160*clhs18 + clhs161*clhs19 + clhs28) + normalslave(3,1)*(clhs1*clhs158 + clhs159*clhs3 + clhs160*clhs6 + clhs161*clhs9) + normalslave(3,2)*(clhs12*clhs158 + clhs13*clhs159 + clhs14*clhs160 + clhs15*clhs161);
        const double clhs163 =     clhs162*normalslave(3,0)*penalty_parameter;
        const double clhs164 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs165 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs166 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs167 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs168 =     normalslave(1,0)*(clhs16*clhs164 + clhs165*clhs17 + clhs166*clhs18 + clhs167*clhs19) + normalslave(1,1)*(clhs1*clhs164 + clhs10 + clhs165*clhs3 + clhs166*clhs6 + clhs167*clhs9) + normalslave(1,2)*(clhs12*clhs164 + clhs13*clhs165 + clhs14*clhs166 + clhs15*clhs167);
        const double clhs169 =     clhs168*normalslave(1,0)*penalty_parameter;
        const double clhs170 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs171 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs172 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs173 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs174 =     normalslave(3,0)*(clhs16*clhs170 + clhs17*clhs171 + clhs172*clhs18 + clhs173*clhs19) + normalslave(3,1)*(clhs1*clhs170 + clhs171*clhs3 + clhs172*clhs6 + clhs173*clhs9 + clhs28) + normalslave(3,2)*(clhs12*clhs170 + clhs13*clhs171 + clhs14*clhs172 + clhs15*clhs173);
        const double clhs175 =     clhs174*normalslave(3,0)*penalty_parameter;
        const double clhs176 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs177 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs178 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs179 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs180 =     normalslave(1,0)*(clhs16*clhs176 + clhs17*clhs177 + clhs178*clhs18 + clhs179*clhs19) + normalslave(1,1)*(clhs1*clhs176 + clhs177*clhs3 + clhs178*clhs6 + clhs179*clhs9) + normalslave(1,2)*(clhs10 + clhs12*clhs176 + clhs13*clhs177 + clhs14*clhs178 + clhs15*clhs179);
        const double clhs181 =     clhs180*normalslave(1,0)*penalty_parameter;
        const double clhs182 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs183 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs184 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs185 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs186 =     normalslave(3,0)*(clhs16*clhs182 + clhs17*clhs183 + clhs18*clhs184 + clhs185*clhs19) + normalslave(3,1)*(clhs1*clhs182 + clhs183*clhs3 + clhs184*clhs6 + clhs185*clhs9) + normalslave(3,2)*(clhs12*clhs182 + clhs13*clhs183 + clhs14*clhs184 + clhs15*clhs185 + clhs28);
        const double clhs187 =     clhs186*normalslave(3,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs189 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs190 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs191 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs192 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs193 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs194 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs195 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs197 =     normalslave(1,0)*(-clhs16*clhs188 - clhs17*clhs194 - clhs18*clhs195 - clhs19*clhs196 + clhs190*clhs32 + clhs191*clhs34 + clhs192*clhs36 + clhs193*clhs38 + clhs33) + normalslave(1,1)*(-clhs1*clhs188 + clhs190*clhs40 + clhs191*clhs41 + clhs192*clhs42 + clhs193*clhs43 - clhs194*clhs3 - clhs195*clhs6 - clhs196*clhs9) + normalslave(1,2)*(-clhs12*clhs188 - clhs13*clhs194 - clhs14*clhs195 - clhs15*clhs196 + clhs190*clhs44 + clhs191*clhs45 + clhs192*clhs46 + clhs193*clhs47);
        const double clhs198 =     clhs197*normalslave(1,0)*penalty_parameter;
        const double clhs199 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs200 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs201 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs202 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs203 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs204 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs205 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs206 =     normalslave(3,0)*(-clhs16*clhs189 - clhs17*clhs203 - clhs18*clhs204 - clhs19*clhs205 + clhs199*clhs32 + clhs200*clhs34 + clhs201*clhs36 + clhs202*clhs38 + clhs50) + normalslave(3,1)*(-clhs1*clhs189 + clhs199*clhs40 + clhs200*clhs41 + clhs201*clhs42 + clhs202*clhs43 - clhs203*clhs3 - clhs204*clhs6 - clhs205*clhs9) + normalslave(3,2)*(-clhs12*clhs189 - clhs13*clhs203 - clhs14*clhs204 - clhs15*clhs205 + clhs199*clhs44 + clhs200*clhs45 + clhs201*clhs46 + clhs202*clhs47);
        const double clhs207 =     clhs206*normalslave(3,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs210 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs211 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs216 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs217 =     normalslave(1,0)*(-clhs16*clhs208 - clhs17*clhs214 - clhs18*clhs215 - clhs19*clhs216 + clhs210*clhs32 + clhs211*clhs34 + clhs212*clhs36 + clhs213*clhs38) + normalslave(1,1)*(-clhs1*clhs208 + clhs210*clhs40 + clhs211*clhs41 + clhs212*clhs42 + clhs213*clhs43 - clhs214*clhs3 - clhs215*clhs6 - clhs216*clhs9 + clhs33) + normalslave(1,2)*(-clhs12*clhs208 - clhs13*clhs214 - clhs14*clhs215 - clhs15*clhs216 + clhs210*clhs44 + clhs211*clhs45 + clhs212*clhs46 + clhs213*clhs47);
        const double clhs218 =     clhs217*normalslave(1,0)*penalty_parameter;
        const double clhs219 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs221 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs224 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs226 =     normalslave(3,0)*(-clhs16*clhs209 - clhs17*clhs223 - clhs18*clhs224 - clhs19*clhs225 + clhs219*clhs32 + clhs220*clhs34 + clhs221*clhs36 + clhs222*clhs38) + normalslave(3,1)*(-clhs1*clhs209 + clhs219*clhs40 + clhs220*clhs41 + clhs221*clhs42 + clhs222*clhs43 - clhs223*clhs3 - clhs224*clhs6 - clhs225*clhs9 + clhs50) + normalslave(3,2)*(-clhs12*clhs209 - clhs13*clhs223 - clhs14*clhs224 - clhs15*clhs225 + clhs219*clhs44 + clhs220*clhs45 + clhs221*clhs46 + clhs222*clhs47);
        const double clhs227 =     clhs226*normalslave(3,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs229 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs231 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs232 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs233 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs234 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs235 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs236 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs237 =     normalslave(1,0)*(-clhs16*clhs228 - clhs17*clhs234 - clhs18*clhs235 - clhs19*clhs236 + clhs230*clhs32 + clhs231*clhs34 + clhs232*clhs36 + clhs233*clhs38) + normalslave(1,1)*(-clhs1*clhs228 + clhs230*clhs40 + clhs231*clhs41 + clhs232*clhs42 + clhs233*clhs43 - clhs234*clhs3 - clhs235*clhs6 - clhs236*clhs9) + normalslave(1,2)*(-clhs12*clhs228 - clhs13*clhs234 - clhs14*clhs235 - clhs15*clhs236 + clhs230*clhs44 + clhs231*clhs45 + clhs232*clhs46 + clhs233*clhs47 + clhs33);
        const double clhs238 =     clhs237*normalslave(1,0)*penalty_parameter;
        const double clhs239 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs240 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs241 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs242 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs243 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs244 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs246 =     normalslave(3,0)*(-clhs16*clhs229 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs239*clhs32 + clhs240*clhs34 + clhs241*clhs36 + clhs242*clhs38) + normalslave(3,1)*(-clhs1*clhs229 + clhs239*clhs40 + clhs240*clhs41 + clhs241*clhs42 + clhs242*clhs43 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(3,2)*(-clhs12*clhs229 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs44 + clhs240*clhs45 + clhs241*clhs46 + clhs242*clhs47 + clhs50);
        const double clhs247 =     clhs246*normalslave(3,0)*penalty_parameter;
        const double clhs248 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs249 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs250 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs251 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs254 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs257 =     normalslave(1,0)*(-clhs16*clhs248 - clhs17*clhs254 - clhs18*clhs255 - clhs19*clhs256 + clhs250*clhs32 + clhs251*clhs34 + clhs252*clhs36 + clhs253*clhs38 + clhs35) + normalslave(1,1)*(-clhs1*clhs248 + clhs250*clhs40 + clhs251*clhs41 + clhs252*clhs42 + clhs253*clhs43 - clhs254*clhs3 - clhs255*clhs6 - clhs256*clhs9) + normalslave(1,2)*(-clhs12*clhs248 - clhs13*clhs254 - clhs14*clhs255 - clhs15*clhs256 + clhs250*clhs44 + clhs251*clhs45 + clhs252*clhs46 + clhs253*clhs47);
        const double clhs258 =     clhs257*normalslave(1,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs262 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs264 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs265 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs266 =     normalslave(3,0)*(-clhs16*clhs249 - clhs17*clhs263 - clhs18*clhs264 - clhs19*clhs265 + clhs259*clhs32 + clhs260*clhs34 + clhs261*clhs36 + clhs262*clhs38 + clhs51) + normalslave(3,1)*(-clhs1*clhs249 + clhs259*clhs40 + clhs260*clhs41 + clhs261*clhs42 + clhs262*clhs43 - clhs263*clhs3 - clhs264*clhs6 - clhs265*clhs9) + normalslave(3,2)*(-clhs12*clhs249 - clhs13*clhs263 - clhs14*clhs264 - clhs15*clhs265 + clhs259*clhs44 + clhs260*clhs45 + clhs261*clhs46 + clhs262*clhs47);
        const double clhs267 =     clhs266*normalslave(3,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs269 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs270 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs271 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs272 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs273 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs276 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs277 =     normalslave(1,0)*(-clhs16*clhs268 - clhs17*clhs274 - clhs18*clhs275 - clhs19*clhs276 + clhs270*clhs32 + clhs271*clhs34 + clhs272*clhs36 + clhs273*clhs38) + normalslave(1,1)*(-clhs1*clhs268 + clhs270*clhs40 + clhs271*clhs41 + clhs272*clhs42 + clhs273*clhs43 - clhs274*clhs3 - clhs275*clhs6 - clhs276*clhs9 + clhs35) + normalslave(1,2)*(-clhs12*clhs268 - clhs13*clhs274 - clhs14*clhs275 - clhs15*clhs276 + clhs270*clhs44 + clhs271*clhs45 + clhs272*clhs46 + clhs273*clhs47);
        const double clhs278 =     clhs277*normalslave(1,0)*penalty_parameter;
        const double clhs279 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs280 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs281 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs282 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs283 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs284 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs285 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs286 =     normalslave(3,0)*(-clhs16*clhs269 - clhs17*clhs283 - clhs18*clhs284 - clhs19*clhs285 + clhs279*clhs32 + clhs280*clhs34 + clhs281*clhs36 + clhs282*clhs38) + normalslave(3,1)*(-clhs1*clhs269 + clhs279*clhs40 + clhs280*clhs41 + clhs281*clhs42 + clhs282*clhs43 - clhs283*clhs3 - clhs284*clhs6 - clhs285*clhs9 + clhs51) + normalslave(3,2)*(-clhs12*clhs269 - clhs13*clhs283 - clhs14*clhs284 - clhs15*clhs285 + clhs279*clhs44 + clhs280*clhs45 + clhs281*clhs46 + clhs282*clhs47);
        const double clhs287 =     clhs286*normalslave(3,0)*penalty_parameter;
        const double clhs288 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs289 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs290 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs291 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs292 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs293 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs294 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs295 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs296 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs297 =     normalslave(1,0)*(-clhs16*clhs288 - clhs17*clhs294 - clhs18*clhs295 - clhs19*clhs296 + clhs290*clhs32 + clhs291*clhs34 + clhs292*clhs36 + clhs293*clhs38) + normalslave(1,1)*(-clhs1*clhs288 + clhs290*clhs40 + clhs291*clhs41 + clhs292*clhs42 + clhs293*clhs43 - clhs294*clhs3 - clhs295*clhs6 - clhs296*clhs9) + normalslave(1,2)*(-clhs12*clhs288 - clhs13*clhs294 - clhs14*clhs295 - clhs15*clhs296 + clhs290*clhs44 + clhs291*clhs45 + clhs292*clhs46 + clhs293*clhs47 + clhs35);
        const double clhs298 =     clhs297*normalslave(1,0)*penalty_parameter;
        const double clhs299 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs305 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs306 =     normalslave(3,0)*(-clhs16*clhs289 - clhs17*clhs303 - clhs18*clhs304 - clhs19*clhs305 + clhs299*clhs32 + clhs300*clhs34 + clhs301*clhs36 + clhs302*clhs38) + normalslave(3,1)*(-clhs1*clhs289 + clhs299*clhs40 - clhs3*clhs303 + clhs300*clhs41 + clhs301*clhs42 + clhs302*clhs43 - clhs304*clhs6 - clhs305*clhs9) + normalslave(3,2)*(-clhs12*clhs289 - clhs13*clhs303 - clhs14*clhs304 - clhs15*clhs305 + clhs299*clhs44 + clhs300*clhs45 + clhs301*clhs46 + clhs302*clhs47 + clhs51);
        const double clhs307 =     clhs306*normalslave(3,0)*penalty_parameter;
        const double clhs308 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs309 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs310 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs311 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs312 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs313 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs314 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs315 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs316 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs317 =     normalslave(1,0)*(-clhs16*clhs308 - clhs17*clhs314 - clhs18*clhs315 - clhs19*clhs316 + clhs310*clhs32 + clhs311*clhs34 + clhs312*clhs36 + clhs313*clhs38 + clhs37) + normalslave(1,1)*(-clhs1*clhs308 - clhs3*clhs314 + clhs310*clhs40 + clhs311*clhs41 + clhs312*clhs42 + clhs313*clhs43 - clhs315*clhs6 - clhs316*clhs9) + normalslave(1,2)*(-clhs12*clhs308 - clhs13*clhs314 - clhs14*clhs315 - clhs15*clhs316 + clhs310*clhs44 + clhs311*clhs45 + clhs312*clhs46 + clhs313*clhs47);
        const double clhs318 =     clhs317*normalslave(1,0)*penalty_parameter;
        const double clhs319 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs320 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs321 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs322 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs324 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs325 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs326 =     normalslave(3,0)*(-clhs16*clhs309 - clhs17*clhs323 - clhs18*clhs324 - clhs19*clhs325 + clhs319*clhs32 + clhs320*clhs34 + clhs321*clhs36 + clhs322*clhs38 + clhs52) + normalslave(3,1)*(-clhs1*clhs309 - clhs3*clhs323 + clhs319*clhs40 + clhs320*clhs41 + clhs321*clhs42 + clhs322*clhs43 - clhs324*clhs6 - clhs325*clhs9) + normalslave(3,2)*(-clhs12*clhs309 - clhs13*clhs323 - clhs14*clhs324 - clhs15*clhs325 + clhs319*clhs44 + clhs320*clhs45 + clhs321*clhs46 + clhs322*clhs47);
        const double clhs327 =     clhs326*normalslave(3,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs329 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs330 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs331 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs332 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs333 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs334 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs335 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs336 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs337 =     normalslave(1,0)*(-clhs16*clhs328 - clhs17*clhs334 - clhs18*clhs335 - clhs19*clhs336 + clhs32*clhs330 + clhs331*clhs34 + clhs332*clhs36 + clhs333*clhs38) + normalslave(1,1)*(-clhs1*clhs328 - clhs3*clhs334 + clhs330*clhs40 + clhs331*clhs41 + clhs332*clhs42 + clhs333*clhs43 - clhs335*clhs6 - clhs336*clhs9 + clhs37) + normalslave(1,2)*(-clhs12*clhs328 - clhs13*clhs334 - clhs14*clhs335 - clhs15*clhs336 + clhs330*clhs44 + clhs331*clhs45 + clhs332*clhs46 + clhs333*clhs47);
        const double clhs338 =     clhs337*normalslave(1,0)*penalty_parameter;
        const double clhs339 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs340 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs341 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs342 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs343 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs344 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs345 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs346 =     normalslave(3,0)*(-clhs16*clhs329 - clhs17*clhs343 - clhs18*clhs344 - clhs19*clhs345 + clhs32*clhs339 + clhs34*clhs340 + clhs341*clhs36 + clhs342*clhs38) + normalslave(3,1)*(-clhs1*clhs329 - clhs3*clhs343 + clhs339*clhs40 + clhs340*clhs41 + clhs341*clhs42 + clhs342*clhs43 - clhs344*clhs6 - clhs345*clhs9 + clhs52) + normalslave(3,2)*(-clhs12*clhs329 - clhs13*clhs343 - clhs14*clhs344 - clhs15*clhs345 + clhs339*clhs44 + clhs340*clhs45 + clhs341*clhs46 + clhs342*clhs47);
        const double clhs347 =     clhs346*normalslave(3,0)*penalty_parameter;
        const double clhs348 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs349 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs350 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs351 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs352 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs353 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs354 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs355 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs356 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs357 =     normalslave(1,0)*(-clhs16*clhs348 - clhs17*clhs354 - clhs18*clhs355 - clhs19*clhs356 + clhs32*clhs350 + clhs34*clhs351 + clhs352*clhs36 + clhs353*clhs38) + normalslave(1,1)*(-clhs1*clhs348 - clhs3*clhs354 + clhs350*clhs40 + clhs351*clhs41 + clhs352*clhs42 + clhs353*clhs43 - clhs355*clhs6 - clhs356*clhs9) + normalslave(1,2)*(-clhs12*clhs348 - clhs13*clhs354 - clhs14*clhs355 - clhs15*clhs356 + clhs350*clhs44 + clhs351*clhs45 + clhs352*clhs46 + clhs353*clhs47 + clhs37);
        const double clhs358 =     clhs357*normalslave(1,0)*penalty_parameter;
        const double clhs359 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs360 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs361 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs362 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs363 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs364 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs365 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs366 =     normalslave(3,0)*(-clhs16*clhs349 - clhs17*clhs363 - clhs18*clhs364 - clhs19*clhs365 + clhs32*clhs359 + clhs34*clhs360 + clhs36*clhs361 + clhs362*clhs38) + normalslave(3,1)*(-clhs1*clhs349 - clhs3*clhs363 + clhs359*clhs40 + clhs360*clhs41 + clhs361*clhs42 + clhs362*clhs43 - clhs364*clhs6 - clhs365*clhs9) + normalslave(3,2)*(-clhs12*clhs349 - clhs13*clhs363 - clhs14*clhs364 - clhs15*clhs365 + clhs359*clhs44 + clhs360*clhs45 + clhs361*clhs46 + clhs362*clhs47 + clhs52);
        const double clhs367 =     clhs366*normalslave(3,0)*penalty_parameter;
        const double clhs368 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs369 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs370 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs371 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs372 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs373 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs374 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs375 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs376 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs377 =     normalslave(1,0)*(-clhs16*clhs368 - clhs17*clhs374 - clhs18*clhs375 - clhs19*clhs376 + clhs32*clhs370 + clhs34*clhs371 + clhs36*clhs372 + clhs373*clhs38 + clhs39) + normalslave(1,1)*(-clhs1*clhs368 - clhs3*clhs374 + clhs370*clhs40 + clhs371*clhs41 + clhs372*clhs42 + clhs373*clhs43 - clhs375*clhs6 - clhs376*clhs9) + normalslave(1,2)*(-clhs12*clhs368 - clhs13*clhs374 - clhs14*clhs375 - clhs15*clhs376 + clhs370*clhs44 + clhs371*clhs45 + clhs372*clhs46 + clhs373*clhs47);
        const double clhs378 =     clhs377*normalslave(1,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs380 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs381 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs382 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs383 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs384 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs385 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs386 =     normalslave(3,0)*(-clhs16*clhs369 - clhs17*clhs383 - clhs18*clhs384 - clhs19*clhs385 + clhs32*clhs379 + clhs34*clhs380 + clhs36*clhs381 + clhs38*clhs382 + clhs53) + normalslave(3,1)*(-clhs1*clhs369 - clhs3*clhs383 + clhs379*clhs40 + clhs380*clhs41 + clhs381*clhs42 + clhs382*clhs43 - clhs384*clhs6 - clhs385*clhs9) + normalslave(3,2)*(-clhs12*clhs369 - clhs13*clhs383 - clhs14*clhs384 - clhs15*clhs385 + clhs379*clhs44 + clhs380*clhs45 + clhs381*clhs46 + clhs382*clhs47);
        const double clhs387 =     clhs386*normalslave(3,0)*penalty_parameter;
        const double clhs388 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs389 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs390 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs391 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs392 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs393 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs394 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs395 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs396 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs397 =     normalslave(1,0)*(-clhs16*clhs388 - clhs17*clhs394 - clhs18*clhs395 - clhs19*clhs396 + clhs32*clhs390 + clhs34*clhs391 + clhs36*clhs392 + clhs38*clhs393) + normalslave(1,1)*(-clhs1*clhs388 - clhs3*clhs394 + clhs39 + clhs390*clhs40 + clhs391*clhs41 + clhs392*clhs42 + clhs393*clhs43 - clhs395*clhs6 - clhs396*clhs9) + normalslave(1,2)*(-clhs12*clhs388 - clhs13*clhs394 - clhs14*clhs395 - clhs15*clhs396 + clhs390*clhs44 + clhs391*clhs45 + clhs392*clhs46 + clhs393*clhs47);
        const double clhs398 =     clhs397*normalslave(1,0)*penalty_parameter;
        const double clhs399 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs400 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs401 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs402 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs403 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs404 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs405 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs406 =     normalslave(3,0)*(-clhs16*clhs389 - clhs17*clhs403 - clhs18*clhs404 - clhs19*clhs405 + clhs32*clhs399 + clhs34*clhs400 + clhs36*clhs401 + clhs38*clhs402) + normalslave(3,1)*(-clhs1*clhs389 - clhs3*clhs403 + clhs399*clhs40 + clhs400*clhs41 + clhs401*clhs42 + clhs402*clhs43 - clhs404*clhs6 - clhs405*clhs9 + clhs53) + normalslave(3,2)*(-clhs12*clhs389 - clhs13*clhs403 - clhs14*clhs404 - clhs15*clhs405 + clhs399*clhs44 + clhs400*clhs45 + clhs401*clhs46 + clhs402*clhs47);
        const double clhs407 =     clhs406*normalslave(3,0)*penalty_parameter;
        const double clhs408 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs409 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs410 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs411 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs412 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs413 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs414 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs415 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs416 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs417 =     normalslave(1,0)*(-clhs16*clhs408 - clhs17*clhs414 - clhs18*clhs415 - clhs19*clhs416 + clhs32*clhs410 + clhs34*clhs411 + clhs36*clhs412 + clhs38*clhs413) + normalslave(1,1)*(-clhs1*clhs408 - clhs3*clhs414 + clhs40*clhs410 + clhs41*clhs411 + clhs412*clhs42 + clhs413*clhs43 - clhs415*clhs6 - clhs416*clhs9) + normalslave(1,2)*(-clhs12*clhs408 - clhs13*clhs414 - clhs14*clhs415 - clhs15*clhs416 + clhs39 + clhs410*clhs44 + clhs411*clhs45 + clhs412*clhs46 + clhs413*clhs47);
        const double clhs418 =     clhs417*normalslave(1,0)*penalty_parameter;
        const double clhs419 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs420 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs421 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs422 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs423 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs424 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs425 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs426 =     normalslave(3,0)*(-clhs16*clhs409 - clhs17*clhs423 - clhs18*clhs424 - clhs19*clhs425 + clhs32*clhs419 + clhs34*clhs420 + clhs36*clhs421 + clhs38*clhs422) + normalslave(3,1)*(-clhs1*clhs409 - clhs3*clhs423 + clhs40*clhs419 + clhs41*clhs420 + clhs42*clhs421 + clhs422*clhs43 - clhs424*clhs6 - clhs425*clhs9) + normalslave(3,2)*(-clhs12*clhs409 - clhs13*clhs423 - clhs14*clhs424 - clhs15*clhs425 + clhs419*clhs44 + clhs420*clhs45 + clhs421*clhs46 + clhs422*clhs47 + clhs53);
        const double clhs427 =     clhs426*normalslave(3,0)*penalty_parameter;
        const double clhs428 =     normalslave(1,0)*scale_factor;
        const double clhs429 =     normalslave(3,0)*scale_factor;
        const double clhs430 =     clhs20*normalslave(1,1)*penalty_parameter;
        const double clhs431 =     clhs30*normalslave(3,1)*penalty_parameter;
        const double clhs432 =     clhs48*normalslave(1,1);
        const double clhs433 =     clhs54*normalslave(3,1);
        const double clhs434 =     clhs60*normalslave(1,1)*penalty_parameter;
        const double clhs435 =     clhs66*normalslave(3,1)*penalty_parameter;
        const double clhs436 =     clhs72*normalslave(1,1)*penalty_parameter;
        const double clhs437 =     clhs78*normalslave(3,1)*penalty_parameter;
        const double clhs438 =     clhs84*normalslave(1,1)*penalty_parameter;
        const double clhs439 =     clhs90*normalslave(3,1)*penalty_parameter;
        const double clhs440 =     clhs96*normalslave(1,1)*penalty_parameter;
        const double clhs441 =     clhs102*normalslave(3,1)*penalty_parameter;
        const double clhs442 =     clhs108*normalslave(1,1)*penalty_parameter;
        const double clhs443 =     clhs114*normalslave(3,1)*penalty_parameter;
        const double clhs444 =     clhs120*normalslave(1,1)*penalty_parameter;
        const double clhs445 =     clhs126*normalslave(3,1)*penalty_parameter;
        const double clhs446 =     clhs132*normalslave(1,1)*penalty_parameter;
        const double clhs447 =     clhs138*normalslave(3,1)*penalty_parameter;
        const double clhs448 =     clhs144*normalslave(1,1)*penalty_parameter;
        const double clhs449 =     clhs150*normalslave(3,1)*penalty_parameter;
        const double clhs450 =     clhs156*normalslave(1,1)*penalty_parameter;
        const double clhs451 =     clhs162*normalslave(3,1)*penalty_parameter;
        const double clhs452 =     clhs168*normalslave(1,1)*penalty_parameter;
        const double clhs453 =     clhs174*normalslave(3,1)*penalty_parameter;
        const double clhs454 =     clhs180*normalslave(1,1)*penalty_parameter;
        const double clhs455 =     clhs186*normalslave(3,1)*penalty_parameter;
        const double clhs456 =     clhs197*normalslave(1,1)*penalty_parameter;
        const double clhs457 =     clhs206*normalslave(3,1)*penalty_parameter;
        const double clhs458 =     clhs217*normalslave(1,1)*penalty_parameter;
        const double clhs459 =     clhs226*normalslave(3,1)*penalty_parameter;
        const double clhs460 =     clhs237*normalslave(1,1)*penalty_parameter;
        const double clhs461 =     clhs246*normalslave(3,1)*penalty_parameter;
        const double clhs462 =     clhs257*normalslave(1,1)*penalty_parameter;
        const double clhs463 =     clhs266*normalslave(3,1)*penalty_parameter;
        const double clhs464 =     clhs277*normalslave(1,1)*penalty_parameter;
        const double clhs465 =     clhs286*normalslave(3,1)*penalty_parameter;
        const double clhs466 =     clhs297*normalslave(1,1)*penalty_parameter;
        const double clhs467 =     clhs306*normalslave(3,1)*penalty_parameter;
        const double clhs468 =     clhs317*normalslave(1,1)*penalty_parameter;
        const double clhs469 =     clhs326*normalslave(3,1)*penalty_parameter;
        const double clhs470 =     clhs337*normalslave(1,1)*penalty_parameter;
        const double clhs471 =     clhs346*normalslave(3,1)*penalty_parameter;
        const double clhs472 =     clhs357*normalslave(1,1)*penalty_parameter;
        const double clhs473 =     clhs366*normalslave(3,1)*penalty_parameter;
        const double clhs474 =     clhs377*normalslave(1,1)*penalty_parameter;
        const double clhs475 =     clhs386*normalslave(3,1)*penalty_parameter;
        const double clhs476 =     clhs397*normalslave(1,1)*penalty_parameter;
        const double clhs477 =     clhs406*normalslave(3,1)*penalty_parameter;
        const double clhs478 =     clhs417*normalslave(1,1)*penalty_parameter;
        const double clhs479 =     clhs426*normalslave(3,1)*penalty_parameter;
        const double clhs480 =     normalslave(1,1)*scale_factor;
        const double clhs481 =     normalslave(3,1)*scale_factor;
        const double clhs482 =     clhs20*normalslave(1,2)*penalty_parameter;
        const double clhs483 =     clhs30*normalslave(3,2)*penalty_parameter;
        const double clhs484 =     clhs48*normalslave(1,2);
        const double clhs485 =     clhs54*normalslave(3,2);
        const double clhs486 =     clhs60*normalslave(1,2)*penalty_parameter;
        const double clhs487 =     clhs66*normalslave(3,2)*penalty_parameter;
        const double clhs488 =     clhs72*normalslave(1,2)*penalty_parameter;
        const double clhs489 =     clhs78*normalslave(3,2)*penalty_parameter;
        const double clhs490 =     clhs84*normalslave(1,2)*penalty_parameter;
        const double clhs491 =     clhs90*normalslave(3,2)*penalty_parameter;
        const double clhs492 =     clhs96*normalslave(1,2)*penalty_parameter;
        const double clhs493 =     clhs102*normalslave(3,2)*penalty_parameter;
        const double clhs494 =     clhs108*normalslave(1,2)*penalty_parameter;
        const double clhs495 =     clhs114*normalslave(3,2)*penalty_parameter;
        const double clhs496 =     clhs120*normalslave(1,2)*penalty_parameter;
        const double clhs497 =     clhs126*normalslave(3,2)*penalty_parameter;
        const double clhs498 =     clhs132*normalslave(1,2)*penalty_parameter;
        const double clhs499 =     clhs138*normalslave(3,2)*penalty_parameter;
        const double clhs500 =     clhs144*normalslave(1,2)*penalty_parameter;
        const double clhs501 =     clhs150*normalslave(3,2)*penalty_parameter;
        const double clhs502 =     clhs156*normalslave(1,2)*penalty_parameter;
        const double clhs503 =     clhs162*normalslave(3,2)*penalty_parameter;
        const double clhs504 =     clhs168*normalslave(1,2)*penalty_parameter;
        const double clhs505 =     clhs174*normalslave(3,2)*penalty_parameter;
        const double clhs506 =     clhs180*normalslave(1,2)*penalty_parameter;
        const double clhs507 =     clhs186*normalslave(3,2)*penalty_parameter;
        const double clhs508 =     clhs197*normalslave(1,2)*penalty_parameter;
        const double clhs509 =     clhs206*normalslave(3,2)*penalty_parameter;
        const double clhs510 =     clhs217*normalslave(1,2)*penalty_parameter;
        const double clhs511 =     clhs226*normalslave(3,2)*penalty_parameter;
        const double clhs512 =     clhs237*normalslave(1,2)*penalty_parameter;
        const double clhs513 =     clhs246*normalslave(3,2)*penalty_parameter;
        const double clhs514 =     clhs257*normalslave(1,2)*penalty_parameter;
        const double clhs515 =     clhs266*normalslave(3,2)*penalty_parameter;
        const double clhs516 =     clhs277*normalslave(1,2)*penalty_parameter;
        const double clhs517 =     clhs286*normalslave(3,2)*penalty_parameter;
        const double clhs518 =     clhs297*normalslave(1,2)*penalty_parameter;
        const double clhs519 =     clhs306*normalslave(3,2)*penalty_parameter;
        const double clhs520 =     clhs317*normalslave(1,2)*penalty_parameter;
        const double clhs521 =     clhs326*normalslave(3,2)*penalty_parameter;
        const double clhs522 =     clhs337*normalslave(1,2)*penalty_parameter;
        const double clhs523 =     clhs346*normalslave(3,2)*penalty_parameter;
        const double clhs524 =     clhs357*normalslave(1,2)*penalty_parameter;
        const double clhs525 =     clhs366*normalslave(3,2)*penalty_parameter;
        const double clhs526 =     clhs377*normalslave(1,2)*penalty_parameter;
        const double clhs527 =     clhs386*normalslave(3,2)*penalty_parameter;
        const double clhs528 =     clhs397*normalslave(1,2)*penalty_parameter;
        const double clhs529 =     clhs406*normalslave(3,2)*penalty_parameter;
        const double clhs530 =     clhs417*normalslave(1,2)*penalty_parameter;
        const double clhs531 =     clhs426*normalslave(3,2)*penalty_parameter;
        const double clhs532 =     normalslave(1,2)*scale_factor;
        const double clhs533 =     normalslave(3,2)*scale_factor;
        const double clhs534 =     clhs20*normalslave(1,0);
        const double clhs535 =     clhs30*normalslave(3,0);
        const double clhs536 =     clhs60*normalslave(1,0);
        const double clhs537 =     clhs66*normalslave(3,0);
        const double clhs538 =     clhs72*normalslave(1,0);
        const double clhs539 =     clhs78*normalslave(3,0);
        const double clhs540 =     clhs84*normalslave(1,0);
        const double clhs541 =     clhs90*normalslave(3,0);
        const double clhs542 =     clhs96*normalslave(1,0);
        const double clhs543 =     clhs102*normalslave(3,0);
        const double clhs544 =     clhs108*normalslave(1,0);
        const double clhs545 =     clhs114*normalslave(3,0);
        const double clhs546 =     clhs120*normalslave(1,0);
        const double clhs547 =     clhs126*normalslave(3,0);
        const double clhs548 =     clhs132*normalslave(1,0);
        const double clhs549 =     clhs138*normalslave(3,0);
        const double clhs550 =     clhs144*normalslave(1,0);
        const double clhs551 =     clhs150*normalslave(3,0);
        const double clhs552 =     clhs156*normalslave(1,0);
        const double clhs553 =     clhs162*normalslave(3,0);
        const double clhs554 =     clhs168*normalslave(1,0);
        const double clhs555 =     clhs174*normalslave(3,0);
        const double clhs556 =     clhs180*normalslave(1,0);
        const double clhs557 =     clhs186*normalslave(3,0);
        const double clhs558 =     clhs20*normalslave(1,1);
        const double clhs559 =     clhs30*normalslave(3,1);
        const double clhs560 =     clhs60*normalslave(1,1);
        const double clhs561 =     clhs66*normalslave(3,1);
        const double clhs562 =     clhs72*normalslave(1,1);
        const double clhs563 =     clhs78*normalslave(3,1);
        const double clhs564 =     clhs84*normalslave(1,1);
        const double clhs565 =     clhs90*normalslave(3,1);
        const double clhs566 =     clhs96*normalslave(1,1);
        const double clhs567 =     clhs102*normalslave(3,1);
        const double clhs568 =     clhs108*normalslave(1,1);
        const double clhs569 =     clhs114*normalslave(3,1);
        const double clhs570 =     clhs120*normalslave(1,1);
        const double clhs571 =     clhs126*normalslave(3,1);
        const double clhs572 =     clhs132*normalslave(1,1);
        const double clhs573 =     clhs138*normalslave(3,1);
        const double clhs574 =     clhs144*normalslave(1,1);
        const double clhs575 =     clhs150*normalslave(3,1);
        const double clhs576 =     clhs156*normalslave(1,1);
        const double clhs577 =     clhs162*normalslave(3,1);
        const double clhs578 =     clhs168*normalslave(1,1);
        const double clhs579 =     clhs174*normalslave(3,1);
        const double clhs580 =     clhs180*normalslave(1,1);
        const double clhs581 =     clhs186*normalslave(3,1);
        const double clhs582 =     clhs20*normalslave(1,2);
        const double clhs583 =     clhs30*normalslave(3,2);
        const double clhs584 =     clhs60*normalslave(1,2);
        const double clhs585 =     clhs66*normalslave(3,2);
        const double clhs586 =     clhs72*normalslave(1,2);
        const double clhs587 =     clhs78*normalslave(3,2);
        const double clhs588 =     clhs84*normalslave(1,2);
        const double clhs589 =     clhs90*normalslave(3,2);
        const double clhs590 =     clhs96*normalslave(1,2);
        const double clhs591 =     clhs102*normalslave(3,2);
        const double clhs592 =     clhs108*normalslave(1,2);
        const double clhs593 =     clhs114*normalslave(3,2);
        const double clhs594 =     clhs120*normalslave(1,2);
        const double clhs595 =     clhs126*normalslave(3,2);
        const double clhs596 =     clhs132*normalslave(1,2);
        const double clhs597 =     clhs138*normalslave(3,2);
        const double clhs598 =     clhs144*normalslave(1,2);
        const double clhs599 =     clhs150*normalslave(3,2);
        const double clhs600 =     clhs156*normalslave(1,2);
        const double clhs601 =     clhs162*normalslave(3,2);
        const double clhs602 =     clhs168*normalslave(1,2);
        const double clhs603 =     clhs174*normalslave(3,2);
        const double clhs604 =     clhs180*normalslave(1,2);
        const double clhs605 =     clhs186*normalslave(3,2);
        const double clhs606 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs49 - clhs22*clhs31 + clhs23*clhs55;
        lhs(0,1)=-clhs0*clhs61 - clhs22*clhs67 + clhs49*clhs56 + clhs55*clhs62;
        lhs(0,2)=-clhs0*clhs73 - clhs22*clhs79 + clhs49*clhs68 + clhs55*clhs74;
        lhs(0,3)=-clhs0*clhs85 - clhs22*clhs91 + clhs49*clhs80 + clhs55*clhs86;
        lhs(0,4)=-clhs0*clhs97 - clhs103*clhs22 + clhs49*clhs92 + clhs55*clhs98;
        lhs(0,5)=-clhs0*clhs109 + clhs104*clhs49 + clhs110*clhs55 - clhs115*clhs22;
        lhs(0,6)=-clhs0*clhs121 + clhs116*clhs49 + clhs122*clhs55 - clhs127*clhs22;
        lhs(0,7)=-clhs0*clhs133 + clhs128*clhs49 + clhs134*clhs55 - clhs139*clhs22;
        lhs(0,8)=-clhs0*clhs145 + clhs140*clhs49 + clhs146*clhs55 - clhs151*clhs22;
        lhs(0,9)=-clhs0*clhs157 + clhs152*clhs49 + clhs158*clhs55 - clhs163*clhs22;
        lhs(0,10)=-clhs0*clhs169 + clhs164*clhs49 + clhs170*clhs55 - clhs175*clhs22;
        lhs(0,11)=-clhs0*clhs181 + clhs176*clhs49 + clhs182*clhs55 - clhs187*clhs22;
        lhs(0,12)=clhs0*clhs198 + clhs188*clhs49 + clhs189*clhs55 + clhs207*clhs22;
        lhs(0,13)=clhs0*clhs218 + clhs208*clhs49 + clhs209*clhs55 + clhs22*clhs227;
        lhs(0,14)=clhs0*clhs238 + clhs22*clhs247 + clhs228*clhs49 + clhs229*clhs55;
        lhs(0,15)=clhs0*clhs258 + clhs22*clhs267 + clhs248*clhs49 + clhs249*clhs55;
        lhs(0,16)=clhs0*clhs278 + clhs22*clhs287 + clhs268*clhs49 + clhs269*clhs55;
        lhs(0,17)=clhs0*clhs298 + clhs22*clhs307 + clhs288*clhs49 + clhs289*clhs55;
        lhs(0,18)=clhs0*clhs318 + clhs22*clhs327 + clhs308*clhs49 + clhs309*clhs55;
        lhs(0,19)=clhs0*clhs338 + clhs22*clhs347 + clhs328*clhs49 + clhs329*clhs55;
        lhs(0,20)=clhs0*clhs358 + clhs22*clhs367 + clhs348*clhs49 + clhs349*clhs55;
        lhs(0,21)=clhs0*clhs378 + clhs22*clhs387 + clhs368*clhs49 + clhs369*clhs55;
        lhs(0,22)=clhs0*clhs398 + clhs22*clhs407 + clhs388*clhs49 + clhs389*clhs55;
        lhs(0,23)=clhs0*clhs418 + clhs22*clhs427 + clhs408*clhs49 + clhs409*clhs55;
        lhs(0,24)=0;
        lhs(0,25)=clhs0*clhs428;
        lhs(0,26)=0;
        lhs(0,27)=clhs22*clhs429;
        lhs(1,0)=-clhs0*clhs430 + clhs2*clhs432 - clhs22*clhs431 + clhs23*clhs433;
        lhs(1,1)=-clhs0*clhs434 - clhs22*clhs435 + clhs432*clhs56 + clhs433*clhs62;
        lhs(1,2)=-clhs0*clhs436 - clhs22*clhs437 + clhs432*clhs68 + clhs433*clhs74;
        lhs(1,3)=-clhs0*clhs438 - clhs22*clhs439 + clhs432*clhs80 + clhs433*clhs86;
        lhs(1,4)=-clhs0*clhs440 - clhs22*clhs441 + clhs432*clhs92 + clhs433*clhs98;
        lhs(1,5)=-clhs0*clhs442 + clhs104*clhs432 + clhs110*clhs433 - clhs22*clhs443;
        lhs(1,6)=-clhs0*clhs444 + clhs116*clhs432 + clhs122*clhs433 - clhs22*clhs445;
        lhs(1,7)=-clhs0*clhs446 + clhs128*clhs432 + clhs134*clhs433 - clhs22*clhs447;
        lhs(1,8)=-clhs0*clhs448 + clhs140*clhs432 + clhs146*clhs433 - clhs22*clhs449;
        lhs(1,9)=-clhs0*clhs450 + clhs152*clhs432 + clhs158*clhs433 - clhs22*clhs451;
        lhs(1,10)=-clhs0*clhs452 + clhs164*clhs432 + clhs170*clhs433 - clhs22*clhs453;
        lhs(1,11)=-clhs0*clhs454 + clhs176*clhs432 + clhs182*clhs433 - clhs22*clhs455;
        lhs(1,12)=clhs0*clhs456 + clhs188*clhs432 + clhs189*clhs433 + clhs22*clhs457;
        lhs(1,13)=clhs0*clhs458 + clhs208*clhs432 + clhs209*clhs433 + clhs22*clhs459;
        lhs(1,14)=clhs0*clhs460 + clhs22*clhs461 + clhs228*clhs432 + clhs229*clhs433;
        lhs(1,15)=clhs0*clhs462 + clhs22*clhs463 + clhs248*clhs432 + clhs249*clhs433;
        lhs(1,16)=clhs0*clhs464 + clhs22*clhs465 + clhs268*clhs432 + clhs269*clhs433;
        lhs(1,17)=clhs0*clhs466 + clhs22*clhs467 + clhs288*clhs432 + clhs289*clhs433;
        lhs(1,18)=clhs0*clhs468 + clhs22*clhs469 + clhs308*clhs432 + clhs309*clhs433;
        lhs(1,19)=clhs0*clhs470 + clhs22*clhs471 + clhs328*clhs432 + clhs329*clhs433;
        lhs(1,20)=clhs0*clhs472 + clhs22*clhs473 + clhs348*clhs432 + clhs349*clhs433;
        lhs(1,21)=clhs0*clhs474 + clhs22*clhs475 + clhs368*clhs432 + clhs369*clhs433;
        lhs(1,22)=clhs0*clhs476 + clhs22*clhs477 + clhs388*clhs432 + clhs389*clhs433;
        lhs(1,23)=clhs0*clhs478 + clhs22*clhs479 + clhs408*clhs432 + clhs409*clhs433;
        lhs(1,24)=0;
        lhs(1,25)=clhs0*clhs480;
        lhs(1,26)=0;
        lhs(1,27)=clhs22*clhs481;
        lhs(2,0)=-clhs0*clhs482 + clhs2*clhs484 - clhs22*clhs483 + clhs23*clhs485;
        lhs(2,1)=-clhs0*clhs486 - clhs22*clhs487 + clhs484*clhs56 + clhs485*clhs62;
        lhs(2,2)=-clhs0*clhs488 - clhs22*clhs489 + clhs484*clhs68 + clhs485*clhs74;
        lhs(2,3)=-clhs0*clhs490 - clhs22*clhs491 + clhs484*clhs80 + clhs485*clhs86;
        lhs(2,4)=-clhs0*clhs492 - clhs22*clhs493 + clhs484*clhs92 + clhs485*clhs98;
        lhs(2,5)=-clhs0*clhs494 + clhs104*clhs484 + clhs110*clhs485 - clhs22*clhs495;
        lhs(2,6)=-clhs0*clhs496 + clhs116*clhs484 + clhs122*clhs485 - clhs22*clhs497;
        lhs(2,7)=-clhs0*clhs498 + clhs128*clhs484 + clhs134*clhs485 - clhs22*clhs499;
        lhs(2,8)=-clhs0*clhs500 + clhs140*clhs484 + clhs146*clhs485 - clhs22*clhs501;
        lhs(2,9)=-clhs0*clhs502 + clhs152*clhs484 + clhs158*clhs485 - clhs22*clhs503;
        lhs(2,10)=-clhs0*clhs504 + clhs164*clhs484 + clhs170*clhs485 - clhs22*clhs505;
        lhs(2,11)=-clhs0*clhs506 + clhs176*clhs484 + clhs182*clhs485 - clhs22*clhs507;
        lhs(2,12)=clhs0*clhs508 + clhs188*clhs484 + clhs189*clhs485 + clhs22*clhs509;
        lhs(2,13)=clhs0*clhs510 + clhs208*clhs484 + clhs209*clhs485 + clhs22*clhs511;
        lhs(2,14)=clhs0*clhs512 + clhs22*clhs513 + clhs228*clhs484 + clhs229*clhs485;
        lhs(2,15)=clhs0*clhs514 + clhs22*clhs515 + clhs248*clhs484 + clhs249*clhs485;
        lhs(2,16)=clhs0*clhs516 + clhs22*clhs517 + clhs268*clhs484 + clhs269*clhs485;
        lhs(2,17)=clhs0*clhs518 + clhs22*clhs519 + clhs288*clhs484 + clhs289*clhs485;
        lhs(2,18)=clhs0*clhs520 + clhs22*clhs521 + clhs308*clhs484 + clhs309*clhs485;
        lhs(2,19)=clhs0*clhs522 + clhs22*clhs523 + clhs328*clhs484 + clhs329*clhs485;
        lhs(2,20)=clhs0*clhs524 + clhs22*clhs525 + clhs348*clhs484 + clhs349*clhs485;
        lhs(2,21)=clhs0*clhs526 + clhs22*clhs527 + clhs368*clhs484 + clhs369*clhs485;
        lhs(2,22)=clhs0*clhs528 + clhs22*clhs529 + clhs388*clhs484 + clhs389*clhs485;
        lhs(2,23)=clhs0*clhs530 + clhs22*clhs531 + clhs408*clhs484 + clhs409*clhs485;
        lhs(2,24)=0;
        lhs(2,25)=clhs0*clhs532;
        lhs(2,26)=0;
        lhs(2,27)=clhs22*clhs533;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs55 + clhs49*clhs5;
        lhs(3,1)=-clhs24*clhs67 - clhs4*clhs61 + clhs49*clhs57 + clhs55*clhs63;
        lhs(3,2)=-clhs24*clhs79 - clhs4*clhs73 + clhs49*clhs69 + clhs55*clhs75;
        lhs(3,3)=-clhs24*clhs91 - clhs4*clhs85 + clhs49*clhs81 + clhs55*clhs87;
        lhs(3,4)=-clhs103*clhs24 - clhs4*clhs97 + clhs49*clhs93 + clhs55*clhs99;
        lhs(3,5)=clhs105*clhs49 - clhs109*clhs4 + clhs111*clhs55 - clhs115*clhs24;
        lhs(3,6)=clhs117*clhs49 - clhs121*clhs4 + clhs123*clhs55 - clhs127*clhs24;
        lhs(3,7)=clhs129*clhs49 - clhs133*clhs4 + clhs135*clhs55 - clhs139*clhs24;
        lhs(3,8)=clhs141*clhs49 - clhs145*clhs4 + clhs147*clhs55 - clhs151*clhs24;
        lhs(3,9)=clhs153*clhs49 - clhs157*clhs4 + clhs159*clhs55 - clhs163*clhs24;
        lhs(3,10)=clhs165*clhs49 - clhs169*clhs4 + clhs171*clhs55 - clhs175*clhs24;
        lhs(3,11)=clhs177*clhs49 - clhs181*clhs4 + clhs183*clhs55 - clhs187*clhs24;
        lhs(3,12)=clhs194*clhs49 + clhs198*clhs4 + clhs203*clhs55 + clhs207*clhs24;
        lhs(3,13)=clhs214*clhs49 + clhs218*clhs4 + clhs223*clhs55 + clhs227*clhs24;
        lhs(3,14)=clhs234*clhs49 + clhs238*clhs4 + clhs24*clhs247 + clhs243*clhs55;
        lhs(3,15)=clhs24*clhs267 + clhs254*clhs49 + clhs258*clhs4 + clhs263*clhs55;
        lhs(3,16)=clhs24*clhs287 + clhs274*clhs49 + clhs278*clhs4 + clhs283*clhs55;
        lhs(3,17)=clhs24*clhs307 + clhs294*clhs49 + clhs298*clhs4 + clhs303*clhs55;
        lhs(3,18)=clhs24*clhs327 + clhs314*clhs49 + clhs318*clhs4 + clhs323*clhs55;
        lhs(3,19)=clhs24*clhs347 + clhs334*clhs49 + clhs338*clhs4 + clhs343*clhs55;
        lhs(3,20)=clhs24*clhs367 + clhs354*clhs49 + clhs358*clhs4 + clhs363*clhs55;
        lhs(3,21)=clhs24*clhs387 + clhs374*clhs49 + clhs378*clhs4 + clhs383*clhs55;
        lhs(3,22)=clhs24*clhs407 + clhs394*clhs49 + clhs398*clhs4 + clhs403*clhs55;
        lhs(3,23)=clhs24*clhs427 + clhs4*clhs418 + clhs414*clhs49 + clhs423*clhs55;
        lhs(3,24)=0;
        lhs(3,25)=clhs4*clhs428;
        lhs(3,26)=0;
        lhs(3,27)=clhs24*clhs429;
        lhs(4,0)=-clhs24*clhs431 + clhs25*clhs433 - clhs4*clhs430 + clhs432*clhs5;
        lhs(4,1)=-clhs24*clhs435 - clhs4*clhs434 + clhs432*clhs57 + clhs433*clhs63;
        lhs(4,2)=-clhs24*clhs437 - clhs4*clhs436 + clhs432*clhs69 + clhs433*clhs75;
        lhs(4,3)=-clhs24*clhs439 - clhs4*clhs438 + clhs432*clhs81 + clhs433*clhs87;
        lhs(4,4)=-clhs24*clhs441 - clhs4*clhs440 + clhs432*clhs93 + clhs433*clhs99;
        lhs(4,5)=clhs105*clhs432 + clhs111*clhs433 - clhs24*clhs443 - clhs4*clhs442;
        lhs(4,6)=clhs117*clhs432 + clhs123*clhs433 - clhs24*clhs445 - clhs4*clhs444;
        lhs(4,7)=clhs129*clhs432 + clhs135*clhs433 - clhs24*clhs447 - clhs4*clhs446;
        lhs(4,8)=clhs141*clhs432 + clhs147*clhs433 - clhs24*clhs449 - clhs4*clhs448;
        lhs(4,9)=clhs153*clhs432 + clhs159*clhs433 - clhs24*clhs451 - clhs4*clhs450;
        lhs(4,10)=clhs165*clhs432 + clhs171*clhs433 - clhs24*clhs453 - clhs4*clhs452;
        lhs(4,11)=clhs177*clhs432 + clhs183*clhs433 - clhs24*clhs455 - clhs4*clhs454;
        lhs(4,12)=clhs194*clhs432 + clhs203*clhs433 + clhs24*clhs457 + clhs4*clhs456;
        lhs(4,13)=clhs214*clhs432 + clhs223*clhs433 + clhs24*clhs459 + clhs4*clhs458;
        lhs(4,14)=clhs234*clhs432 + clhs24*clhs461 + clhs243*clhs433 + clhs4*clhs460;
        lhs(4,15)=clhs24*clhs463 + clhs254*clhs432 + clhs263*clhs433 + clhs4*clhs462;
        lhs(4,16)=clhs24*clhs465 + clhs274*clhs432 + clhs283*clhs433 + clhs4*clhs464;
        lhs(4,17)=clhs24*clhs467 + clhs294*clhs432 + clhs303*clhs433 + clhs4*clhs466;
        lhs(4,18)=clhs24*clhs469 + clhs314*clhs432 + clhs323*clhs433 + clhs4*clhs468;
        lhs(4,19)=clhs24*clhs471 + clhs334*clhs432 + clhs343*clhs433 + clhs4*clhs470;
        lhs(4,20)=clhs24*clhs473 + clhs354*clhs432 + clhs363*clhs433 + clhs4*clhs472;
        lhs(4,21)=clhs24*clhs475 + clhs374*clhs432 + clhs383*clhs433 + clhs4*clhs474;
        lhs(4,22)=clhs24*clhs477 + clhs394*clhs432 + clhs4*clhs476 + clhs403*clhs433;
        lhs(4,23)=clhs24*clhs479 + clhs4*clhs478 + clhs414*clhs432 + clhs423*clhs433;
        lhs(4,24)=0;
        lhs(4,25)=clhs4*clhs480;
        lhs(4,26)=0;
        lhs(4,27)=clhs24*clhs481;
        lhs(5,0)=-clhs24*clhs483 + clhs25*clhs485 - clhs4*clhs482 + clhs484*clhs5;
        lhs(5,1)=-clhs24*clhs487 - clhs4*clhs486 + clhs484*clhs57 + clhs485*clhs63;
        lhs(5,2)=-clhs24*clhs489 - clhs4*clhs488 + clhs484*clhs69 + clhs485*clhs75;
        lhs(5,3)=-clhs24*clhs491 - clhs4*clhs490 + clhs484*clhs81 + clhs485*clhs87;
        lhs(5,4)=-clhs24*clhs493 - clhs4*clhs492 + clhs484*clhs93 + clhs485*clhs99;
        lhs(5,5)=clhs105*clhs484 + clhs111*clhs485 - clhs24*clhs495 - clhs4*clhs494;
        lhs(5,6)=clhs117*clhs484 + clhs123*clhs485 - clhs24*clhs497 - clhs4*clhs496;
        lhs(5,7)=clhs129*clhs484 + clhs135*clhs485 - clhs24*clhs499 - clhs4*clhs498;
        lhs(5,8)=clhs141*clhs484 + clhs147*clhs485 - clhs24*clhs501 - clhs4*clhs500;
        lhs(5,9)=clhs153*clhs484 + clhs159*clhs485 - clhs24*clhs503 - clhs4*clhs502;
        lhs(5,10)=clhs165*clhs484 + clhs171*clhs485 - clhs24*clhs505 - clhs4*clhs504;
        lhs(5,11)=clhs177*clhs484 + clhs183*clhs485 - clhs24*clhs507 - clhs4*clhs506;
        lhs(5,12)=clhs194*clhs484 + clhs203*clhs485 + clhs24*clhs509 + clhs4*clhs508;
        lhs(5,13)=clhs214*clhs484 + clhs223*clhs485 + clhs24*clhs511 + clhs4*clhs510;
        lhs(5,14)=clhs234*clhs484 + clhs24*clhs513 + clhs243*clhs485 + clhs4*clhs512;
        lhs(5,15)=clhs24*clhs515 + clhs254*clhs484 + clhs263*clhs485 + clhs4*clhs514;
        lhs(5,16)=clhs24*clhs517 + clhs274*clhs484 + clhs283*clhs485 + clhs4*clhs516;
        lhs(5,17)=clhs24*clhs519 + clhs294*clhs484 + clhs303*clhs485 + clhs4*clhs518;
        lhs(5,18)=clhs24*clhs521 + clhs314*clhs484 + clhs323*clhs485 + clhs4*clhs520;
        lhs(5,19)=clhs24*clhs523 + clhs334*clhs484 + clhs343*clhs485 + clhs4*clhs522;
        lhs(5,20)=clhs24*clhs525 + clhs354*clhs484 + clhs363*clhs485 + clhs4*clhs524;
        lhs(5,21)=clhs24*clhs527 + clhs374*clhs484 + clhs383*clhs485 + clhs4*clhs526;
        lhs(5,22)=clhs24*clhs529 + clhs394*clhs484 + clhs4*clhs528 + clhs403*clhs485;
        lhs(5,23)=clhs24*clhs531 + clhs4*clhs530 + clhs414*clhs484 + clhs423*clhs485;
        lhs(5,24)=0;
        lhs(5,25)=clhs4*clhs532;
        lhs(5,26)=0;
        lhs(5,27)=clhs24*clhs533;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs55 + clhs49*clhs8;
        lhs(6,1)=-clhs26*clhs67 + clhs49*clhs58 + clhs55*clhs64 - clhs61*clhs7;
        lhs(6,2)=-clhs26*clhs79 + clhs49*clhs70 + clhs55*clhs76 - clhs7*clhs73;
        lhs(6,3)=-clhs26*clhs91 + clhs49*clhs82 + clhs55*clhs88 - clhs7*clhs85;
        lhs(6,4)=clhs100*clhs55 - clhs103*clhs26 + clhs49*clhs94 - clhs7*clhs97;
        lhs(6,5)=clhs106*clhs49 - clhs109*clhs7 + clhs112*clhs55 - clhs115*clhs26;
        lhs(6,6)=clhs118*clhs49 - clhs121*clhs7 + clhs124*clhs55 - clhs127*clhs26;
        lhs(6,7)=clhs130*clhs49 - clhs133*clhs7 + clhs136*clhs55 - clhs139*clhs26;
        lhs(6,8)=clhs142*clhs49 - clhs145*clhs7 + clhs148*clhs55 - clhs151*clhs26;
        lhs(6,9)=clhs154*clhs49 - clhs157*clhs7 + clhs160*clhs55 - clhs163*clhs26;
        lhs(6,10)=clhs166*clhs49 - clhs169*clhs7 + clhs172*clhs55 - clhs175*clhs26;
        lhs(6,11)=clhs178*clhs49 - clhs181*clhs7 + clhs184*clhs55 - clhs187*clhs26;
        lhs(6,12)=clhs195*clhs49 + clhs198*clhs7 + clhs204*clhs55 + clhs207*clhs26;
        lhs(6,13)=clhs215*clhs49 + clhs218*clhs7 + clhs224*clhs55 + clhs227*clhs26;
        lhs(6,14)=clhs235*clhs49 + clhs238*clhs7 + clhs244*clhs55 + clhs247*clhs26;
        lhs(6,15)=clhs255*clhs49 + clhs258*clhs7 + clhs26*clhs267 + clhs264*clhs55;
        lhs(6,16)=clhs26*clhs287 + clhs275*clhs49 + clhs278*clhs7 + clhs284*clhs55;
        lhs(6,17)=clhs26*clhs307 + clhs295*clhs49 + clhs298*clhs7 + clhs304*clhs55;
        lhs(6,18)=clhs26*clhs327 + clhs315*clhs49 + clhs318*clhs7 + clhs324*clhs55;
        lhs(6,19)=clhs26*clhs347 + clhs335*clhs49 + clhs338*clhs7 + clhs344*clhs55;
        lhs(6,20)=clhs26*clhs367 + clhs355*clhs49 + clhs358*clhs7 + clhs364*clhs55;
        lhs(6,21)=clhs26*clhs387 + clhs375*clhs49 + clhs378*clhs7 + clhs384*clhs55;
        lhs(6,22)=clhs26*clhs407 + clhs395*clhs49 + clhs398*clhs7 + clhs404*clhs55;
        lhs(6,23)=clhs26*clhs427 + clhs415*clhs49 + clhs418*clhs7 + clhs424*clhs55;
        lhs(6,24)=0;
        lhs(6,25)=clhs428*clhs7;
        lhs(6,26)=0;
        lhs(6,27)=clhs26*clhs429;
        lhs(7,0)=-clhs26*clhs431 + clhs27*clhs433 - clhs430*clhs7 + clhs432*clhs8;
        lhs(7,1)=-clhs26*clhs435 + clhs432*clhs58 + clhs433*clhs64 - clhs434*clhs7;
        lhs(7,2)=-clhs26*clhs437 + clhs432*clhs70 + clhs433*clhs76 - clhs436*clhs7;
        lhs(7,3)=-clhs26*clhs439 + clhs432*clhs82 + clhs433*clhs88 - clhs438*clhs7;
        lhs(7,4)=clhs100*clhs433 - clhs26*clhs441 + clhs432*clhs94 - clhs440*clhs7;
        lhs(7,5)=clhs106*clhs432 + clhs112*clhs433 - clhs26*clhs443 - clhs442*clhs7;
        lhs(7,6)=clhs118*clhs432 + clhs124*clhs433 - clhs26*clhs445 - clhs444*clhs7;
        lhs(7,7)=clhs130*clhs432 + clhs136*clhs433 - clhs26*clhs447 - clhs446*clhs7;
        lhs(7,8)=clhs142*clhs432 + clhs148*clhs433 - clhs26*clhs449 - clhs448*clhs7;
        lhs(7,9)=clhs154*clhs432 + clhs160*clhs433 - clhs26*clhs451 - clhs450*clhs7;
        lhs(7,10)=clhs166*clhs432 + clhs172*clhs433 - clhs26*clhs453 - clhs452*clhs7;
        lhs(7,11)=clhs178*clhs432 + clhs184*clhs433 - clhs26*clhs455 - clhs454*clhs7;
        lhs(7,12)=clhs195*clhs432 + clhs204*clhs433 + clhs26*clhs457 + clhs456*clhs7;
        lhs(7,13)=clhs215*clhs432 + clhs224*clhs433 + clhs26*clhs459 + clhs458*clhs7;
        lhs(7,14)=clhs235*clhs432 + clhs244*clhs433 + clhs26*clhs461 + clhs460*clhs7;
        lhs(7,15)=clhs255*clhs432 + clhs26*clhs463 + clhs264*clhs433 + clhs462*clhs7;
        lhs(7,16)=clhs26*clhs465 + clhs275*clhs432 + clhs284*clhs433 + clhs464*clhs7;
        lhs(7,17)=clhs26*clhs467 + clhs295*clhs432 + clhs304*clhs433 + clhs466*clhs7;
        lhs(7,18)=clhs26*clhs469 + clhs315*clhs432 + clhs324*clhs433 + clhs468*clhs7;
        lhs(7,19)=clhs26*clhs471 + clhs335*clhs432 + clhs344*clhs433 + clhs470*clhs7;
        lhs(7,20)=clhs26*clhs473 + clhs355*clhs432 + clhs364*clhs433 + clhs472*clhs7;
        lhs(7,21)=clhs26*clhs475 + clhs375*clhs432 + clhs384*clhs433 + clhs474*clhs7;
        lhs(7,22)=clhs26*clhs477 + clhs395*clhs432 + clhs404*clhs433 + clhs476*clhs7;
        lhs(7,23)=clhs26*clhs479 + clhs415*clhs432 + clhs424*clhs433 + clhs478*clhs7;
        lhs(7,24)=0;
        lhs(7,25)=clhs480*clhs7;
        lhs(7,26)=0;
        lhs(7,27)=clhs26*clhs481;
        lhs(8,0)=-clhs26*clhs483 + clhs27*clhs485 - clhs482*clhs7 + clhs484*clhs8;
        lhs(8,1)=-clhs26*clhs487 + clhs484*clhs58 + clhs485*clhs64 - clhs486*clhs7;
        lhs(8,2)=-clhs26*clhs489 + clhs484*clhs70 + clhs485*clhs76 - clhs488*clhs7;
        lhs(8,3)=-clhs26*clhs491 + clhs484*clhs82 + clhs485*clhs88 - clhs490*clhs7;
        lhs(8,4)=clhs100*clhs485 - clhs26*clhs493 + clhs484*clhs94 - clhs492*clhs7;
        lhs(8,5)=clhs106*clhs484 + clhs112*clhs485 - clhs26*clhs495 - clhs494*clhs7;
        lhs(8,6)=clhs118*clhs484 + clhs124*clhs485 - clhs26*clhs497 - clhs496*clhs7;
        lhs(8,7)=clhs130*clhs484 + clhs136*clhs485 - clhs26*clhs499 - clhs498*clhs7;
        lhs(8,8)=clhs142*clhs484 + clhs148*clhs485 - clhs26*clhs501 - clhs500*clhs7;
        lhs(8,9)=clhs154*clhs484 + clhs160*clhs485 - clhs26*clhs503 - clhs502*clhs7;
        lhs(8,10)=clhs166*clhs484 + clhs172*clhs485 - clhs26*clhs505 - clhs504*clhs7;
        lhs(8,11)=clhs178*clhs484 + clhs184*clhs485 - clhs26*clhs507 - clhs506*clhs7;
        lhs(8,12)=clhs195*clhs484 + clhs204*clhs485 + clhs26*clhs509 + clhs508*clhs7;
        lhs(8,13)=clhs215*clhs484 + clhs224*clhs485 + clhs26*clhs511 + clhs510*clhs7;
        lhs(8,14)=clhs235*clhs484 + clhs244*clhs485 + clhs26*clhs513 + clhs512*clhs7;
        lhs(8,15)=clhs255*clhs484 + clhs26*clhs515 + clhs264*clhs485 + clhs514*clhs7;
        lhs(8,16)=clhs26*clhs517 + clhs275*clhs484 + clhs284*clhs485 + clhs516*clhs7;
        lhs(8,17)=clhs26*clhs519 + clhs295*clhs484 + clhs304*clhs485 + clhs518*clhs7;
        lhs(8,18)=clhs26*clhs521 + clhs315*clhs484 + clhs324*clhs485 + clhs520*clhs7;
        lhs(8,19)=clhs26*clhs523 + clhs335*clhs484 + clhs344*clhs485 + clhs522*clhs7;
        lhs(8,20)=clhs26*clhs525 + clhs355*clhs484 + clhs364*clhs485 + clhs524*clhs7;
        lhs(8,21)=clhs26*clhs527 + clhs375*clhs484 + clhs384*clhs485 + clhs526*clhs7;
        lhs(8,22)=clhs26*clhs529 + clhs395*clhs484 + clhs404*clhs485 + clhs528*clhs7;
        lhs(8,23)=clhs26*clhs531 + clhs415*clhs484 + clhs424*clhs485 + clhs530*clhs7;
        lhs(8,24)=0;
        lhs(8,25)=clhs532*clhs7;
        lhs(8,26)=0;
        lhs(8,27)=clhs26*clhs533;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs49 - clhs28*clhs31 + clhs29*clhs55;
        lhs(9,1)=-clhs10*clhs61 - clhs28*clhs67 + clhs49*clhs59 + clhs55*clhs65;
        lhs(9,2)=-clhs10*clhs73 - clhs28*clhs79 + clhs49*clhs71 + clhs55*clhs77;
        lhs(9,3)=-clhs10*clhs85 - clhs28*clhs91 + clhs49*clhs83 + clhs55*clhs89;
        lhs(9,4)=-clhs10*clhs97 + clhs101*clhs55 - clhs103*clhs28 + clhs49*clhs95;
        lhs(9,5)=-clhs10*clhs109 + clhs107*clhs49 + clhs113*clhs55 - clhs115*clhs28;
        lhs(9,6)=-clhs10*clhs121 + clhs119*clhs49 + clhs125*clhs55 - clhs127*clhs28;
        lhs(9,7)=-clhs10*clhs133 + clhs131*clhs49 + clhs137*clhs55 - clhs139*clhs28;
        lhs(9,8)=-clhs10*clhs145 + clhs143*clhs49 + clhs149*clhs55 - clhs151*clhs28;
        lhs(9,9)=-clhs10*clhs157 + clhs155*clhs49 + clhs161*clhs55 - clhs163*clhs28;
        lhs(9,10)=-clhs10*clhs169 + clhs167*clhs49 + clhs173*clhs55 - clhs175*clhs28;
        lhs(9,11)=-clhs10*clhs181 + clhs179*clhs49 + clhs185*clhs55 - clhs187*clhs28;
        lhs(9,12)=clhs10*clhs198 + clhs196*clhs49 + clhs205*clhs55 + clhs207*clhs28;
        lhs(9,13)=clhs10*clhs218 + clhs216*clhs49 + clhs225*clhs55 + clhs227*clhs28;
        lhs(9,14)=clhs10*clhs238 + clhs236*clhs49 + clhs245*clhs55 + clhs247*clhs28;
        lhs(9,15)=clhs10*clhs258 + clhs256*clhs49 + clhs265*clhs55 + clhs267*clhs28;
        lhs(9,16)=clhs10*clhs278 + clhs276*clhs49 + clhs28*clhs287 + clhs285*clhs55;
        lhs(9,17)=clhs10*clhs298 + clhs28*clhs307 + clhs296*clhs49 + clhs305*clhs55;
        lhs(9,18)=clhs10*clhs318 + clhs28*clhs327 + clhs316*clhs49 + clhs325*clhs55;
        lhs(9,19)=clhs10*clhs338 + clhs28*clhs347 + clhs336*clhs49 + clhs345*clhs55;
        lhs(9,20)=clhs10*clhs358 + clhs28*clhs367 + clhs356*clhs49 + clhs365*clhs55;
        lhs(9,21)=clhs10*clhs378 + clhs28*clhs387 + clhs376*clhs49 + clhs385*clhs55;
        lhs(9,22)=clhs10*clhs398 + clhs28*clhs407 + clhs396*clhs49 + clhs405*clhs55;
        lhs(9,23)=clhs10*clhs418 + clhs28*clhs427 + clhs416*clhs49 + clhs425*clhs55;
        lhs(9,24)=0;
        lhs(9,25)=clhs10*clhs428;
        lhs(9,26)=0;
        lhs(9,27)=clhs28*clhs429;
        lhs(10,0)=-clhs10*clhs430 + clhs11*clhs432 - clhs28*clhs431 + clhs29*clhs433;
        lhs(10,1)=-clhs10*clhs434 - clhs28*clhs435 + clhs432*clhs59 + clhs433*clhs65;
        lhs(10,2)=-clhs10*clhs436 - clhs28*clhs437 + clhs432*clhs71 + clhs433*clhs77;
        lhs(10,3)=-clhs10*clhs438 - clhs28*clhs439 + clhs432*clhs83 + clhs433*clhs89;
        lhs(10,4)=-clhs10*clhs440 + clhs101*clhs433 - clhs28*clhs441 + clhs432*clhs95;
        lhs(10,5)=-clhs10*clhs442 + clhs107*clhs432 + clhs113*clhs433 - clhs28*clhs443;
        lhs(10,6)=-clhs10*clhs444 + clhs119*clhs432 + clhs125*clhs433 - clhs28*clhs445;
        lhs(10,7)=-clhs10*clhs446 + clhs131*clhs432 + clhs137*clhs433 - clhs28*clhs447;
        lhs(10,8)=-clhs10*clhs448 + clhs143*clhs432 + clhs149*clhs433 - clhs28*clhs449;
        lhs(10,9)=-clhs10*clhs450 + clhs155*clhs432 + clhs161*clhs433 - clhs28*clhs451;
        lhs(10,10)=-clhs10*clhs452 + clhs167*clhs432 + clhs173*clhs433 - clhs28*clhs453;
        lhs(10,11)=-clhs10*clhs454 + clhs179*clhs432 + clhs185*clhs433 - clhs28*clhs455;
        lhs(10,12)=clhs10*clhs456 + clhs196*clhs432 + clhs205*clhs433 + clhs28*clhs457;
        lhs(10,13)=clhs10*clhs458 + clhs216*clhs432 + clhs225*clhs433 + clhs28*clhs459;
        lhs(10,14)=clhs10*clhs460 + clhs236*clhs432 + clhs245*clhs433 + clhs28*clhs461;
        lhs(10,15)=clhs10*clhs462 + clhs256*clhs432 + clhs265*clhs433 + clhs28*clhs463;
        lhs(10,16)=clhs10*clhs464 + clhs276*clhs432 + clhs28*clhs465 + clhs285*clhs433;
        lhs(10,17)=clhs10*clhs466 + clhs28*clhs467 + clhs296*clhs432 + clhs305*clhs433;
        lhs(10,18)=clhs10*clhs468 + clhs28*clhs469 + clhs316*clhs432 + clhs325*clhs433;
        lhs(10,19)=clhs10*clhs470 + clhs28*clhs471 + clhs336*clhs432 + clhs345*clhs433;
        lhs(10,20)=clhs10*clhs472 + clhs28*clhs473 + clhs356*clhs432 + clhs365*clhs433;
        lhs(10,21)=clhs10*clhs474 + clhs28*clhs475 + clhs376*clhs432 + clhs385*clhs433;
        lhs(10,22)=clhs10*clhs476 + clhs28*clhs477 + clhs396*clhs432 + clhs405*clhs433;
        lhs(10,23)=clhs10*clhs478 + clhs28*clhs479 + clhs416*clhs432 + clhs425*clhs433;
        lhs(10,24)=0;
        lhs(10,25)=clhs10*clhs480;
        lhs(10,26)=0;
        lhs(10,27)=clhs28*clhs481;
        lhs(11,0)=-clhs10*clhs482 + clhs11*clhs484 - clhs28*clhs483 + clhs29*clhs485;
        lhs(11,1)=-clhs10*clhs486 - clhs28*clhs487 + clhs484*clhs59 + clhs485*clhs65;
        lhs(11,2)=-clhs10*clhs488 - clhs28*clhs489 + clhs484*clhs71 + clhs485*clhs77;
        lhs(11,3)=-clhs10*clhs490 - clhs28*clhs491 + clhs484*clhs83 + clhs485*clhs89;
        lhs(11,4)=-clhs10*clhs492 + clhs101*clhs485 - clhs28*clhs493 + clhs484*clhs95;
        lhs(11,5)=-clhs10*clhs494 + clhs107*clhs484 + clhs113*clhs485 - clhs28*clhs495;
        lhs(11,6)=-clhs10*clhs496 + clhs119*clhs484 + clhs125*clhs485 - clhs28*clhs497;
        lhs(11,7)=-clhs10*clhs498 + clhs131*clhs484 + clhs137*clhs485 - clhs28*clhs499;
        lhs(11,8)=-clhs10*clhs500 + clhs143*clhs484 + clhs149*clhs485 - clhs28*clhs501;
        lhs(11,9)=-clhs10*clhs502 + clhs155*clhs484 + clhs161*clhs485 - clhs28*clhs503;
        lhs(11,10)=-clhs10*clhs504 + clhs167*clhs484 + clhs173*clhs485 - clhs28*clhs505;
        lhs(11,11)=-clhs10*clhs506 + clhs179*clhs484 + clhs185*clhs485 - clhs28*clhs507;
        lhs(11,12)=clhs10*clhs508 + clhs196*clhs484 + clhs205*clhs485 + clhs28*clhs509;
        lhs(11,13)=clhs10*clhs510 + clhs216*clhs484 + clhs225*clhs485 + clhs28*clhs511;
        lhs(11,14)=clhs10*clhs512 + clhs236*clhs484 + clhs245*clhs485 + clhs28*clhs513;
        lhs(11,15)=clhs10*clhs514 + clhs256*clhs484 + clhs265*clhs485 + clhs28*clhs515;
        lhs(11,16)=clhs10*clhs516 + clhs276*clhs484 + clhs28*clhs517 + clhs285*clhs485;
        lhs(11,17)=clhs10*clhs518 + clhs28*clhs519 + clhs296*clhs484 + clhs305*clhs485;
        lhs(11,18)=clhs10*clhs520 + clhs28*clhs521 + clhs316*clhs484 + clhs325*clhs485;
        lhs(11,19)=clhs10*clhs522 + clhs28*clhs523 + clhs336*clhs484 + clhs345*clhs485;
        lhs(11,20)=clhs10*clhs524 + clhs28*clhs525 + clhs356*clhs484 + clhs365*clhs485;
        lhs(11,21)=clhs10*clhs526 + clhs28*clhs527 + clhs376*clhs484 + clhs385*clhs485;
        lhs(11,22)=clhs10*clhs528 + clhs28*clhs529 + clhs396*clhs484 + clhs405*clhs485;
        lhs(11,23)=clhs10*clhs530 + clhs28*clhs531 + clhs416*clhs484 + clhs425*clhs485;
        lhs(11,24)=0;
        lhs(11,25)=clhs10*clhs532;
        lhs(11,26)=0;
        lhs(11,27)=clhs28*clhs533;
        lhs(12,0)=penalty_parameter*(clhs33*clhs534 + clhs50*clhs535);
        lhs(12,1)=penalty_parameter*(clhs33*clhs536 + clhs50*clhs537);
        lhs(12,2)=penalty_parameter*(clhs33*clhs538 + clhs50*clhs539);
        lhs(12,3)=penalty_parameter*(clhs33*clhs540 + clhs50*clhs541);
        lhs(12,4)=penalty_parameter*(clhs33*clhs542 + clhs50*clhs543);
        lhs(12,5)=penalty_parameter*(clhs33*clhs544 + clhs50*clhs545);
        lhs(12,6)=penalty_parameter*(clhs33*clhs546 + clhs50*clhs547);
        lhs(12,7)=penalty_parameter*(clhs33*clhs548 + clhs50*clhs549);
        lhs(12,8)=penalty_parameter*(clhs33*clhs550 + clhs50*clhs551);
        lhs(12,9)=penalty_parameter*(clhs33*clhs552 + clhs50*clhs553);
        lhs(12,10)=penalty_parameter*(clhs33*clhs554 + clhs50*clhs555);
        lhs(12,11)=penalty_parameter*(clhs33*clhs556 + clhs50*clhs557);
        lhs(12,12)=-clhs190*clhs49 - clhs198*clhs33 - clhs199*clhs55 - clhs207*clhs50;
        lhs(12,13)=-clhs210*clhs49 - clhs218*clhs33 - clhs219*clhs55 - clhs227*clhs50;
        lhs(12,14)=-clhs230*clhs49 - clhs238*clhs33 - clhs239*clhs55 - clhs247*clhs50;
        lhs(12,15)=-clhs250*clhs49 - clhs258*clhs33 - clhs259*clhs55 - clhs267*clhs50;
        lhs(12,16)=-clhs270*clhs49 - clhs278*clhs33 - clhs279*clhs55 - clhs287*clhs50;
        lhs(12,17)=-clhs290*clhs49 - clhs298*clhs33 - clhs299*clhs55 - clhs307*clhs50;
        lhs(12,18)=-clhs310*clhs49 - clhs318*clhs33 - clhs319*clhs55 - clhs327*clhs50;
        lhs(12,19)=-clhs33*clhs338 - clhs330*clhs49 - clhs339*clhs55 - clhs347*clhs50;
        lhs(12,20)=-clhs33*clhs358 - clhs350*clhs49 - clhs359*clhs55 - clhs367*clhs50;
        lhs(12,21)=-clhs33*clhs378 - clhs370*clhs49 - clhs379*clhs55 - clhs387*clhs50;
        lhs(12,22)=-clhs33*clhs398 - clhs390*clhs49 - clhs399*clhs55 - clhs407*clhs50;
        lhs(12,23)=-clhs33*clhs418 - clhs410*clhs49 - clhs419*clhs55 - clhs427*clhs50;
        lhs(12,24)=0;
        lhs(12,25)=-clhs33*clhs428;
        lhs(12,26)=0;
        lhs(12,27)=-clhs429*clhs50;
        lhs(13,0)=penalty_parameter*(clhs33*clhs558 + clhs50*clhs559);
        lhs(13,1)=penalty_parameter*(clhs33*clhs560 + clhs50*clhs561);
        lhs(13,2)=penalty_parameter*(clhs33*clhs562 + clhs50*clhs563);
        lhs(13,3)=penalty_parameter*(clhs33*clhs564 + clhs50*clhs565);
        lhs(13,4)=penalty_parameter*(clhs33*clhs566 + clhs50*clhs567);
        lhs(13,5)=penalty_parameter*(clhs33*clhs568 + clhs50*clhs569);
        lhs(13,6)=penalty_parameter*(clhs33*clhs570 + clhs50*clhs571);
        lhs(13,7)=penalty_parameter*(clhs33*clhs572 + clhs50*clhs573);
        lhs(13,8)=penalty_parameter*(clhs33*clhs574 + clhs50*clhs575);
        lhs(13,9)=penalty_parameter*(clhs33*clhs576 + clhs50*clhs577);
        lhs(13,10)=penalty_parameter*(clhs33*clhs578 + clhs50*clhs579);
        lhs(13,11)=penalty_parameter*(clhs33*clhs580 + clhs50*clhs581);
        lhs(13,12)=-clhs190*clhs432 - clhs199*clhs433 - clhs33*clhs456 - clhs457*clhs50;
        lhs(13,13)=-clhs210*clhs432 - clhs219*clhs433 - clhs33*clhs458 - clhs459*clhs50;
        lhs(13,14)=-clhs230*clhs432 - clhs239*clhs433 - clhs33*clhs460 - clhs461*clhs50;
        lhs(13,15)=-clhs250*clhs432 - clhs259*clhs433 - clhs33*clhs462 - clhs463*clhs50;
        lhs(13,16)=-clhs270*clhs432 - clhs279*clhs433 - clhs33*clhs464 - clhs465*clhs50;
        lhs(13,17)=-clhs290*clhs432 - clhs299*clhs433 - clhs33*clhs466 - clhs467*clhs50;
        lhs(13,18)=-clhs310*clhs432 - clhs319*clhs433 - clhs33*clhs468 - clhs469*clhs50;
        lhs(13,19)=-clhs33*clhs470 - clhs330*clhs432 - clhs339*clhs433 - clhs471*clhs50;
        lhs(13,20)=-clhs33*clhs472 - clhs350*clhs432 - clhs359*clhs433 - clhs473*clhs50;
        lhs(13,21)=-clhs33*clhs474 - clhs370*clhs432 - clhs379*clhs433 - clhs475*clhs50;
        lhs(13,22)=-clhs33*clhs476 - clhs390*clhs432 - clhs399*clhs433 - clhs477*clhs50;
        lhs(13,23)=-clhs33*clhs478 - clhs410*clhs432 - clhs419*clhs433 - clhs479*clhs50;
        lhs(13,24)=0;
        lhs(13,25)=-clhs33*clhs480;
        lhs(13,26)=0;
        lhs(13,27)=-clhs481*clhs50;
        lhs(14,0)=penalty_parameter*(clhs33*clhs582 + clhs50*clhs583);
        lhs(14,1)=penalty_parameter*(clhs33*clhs584 + clhs50*clhs585);
        lhs(14,2)=penalty_parameter*(clhs33*clhs586 + clhs50*clhs587);
        lhs(14,3)=penalty_parameter*(clhs33*clhs588 + clhs50*clhs589);
        lhs(14,4)=penalty_parameter*(clhs33*clhs590 + clhs50*clhs591);
        lhs(14,5)=penalty_parameter*(clhs33*clhs592 + clhs50*clhs593);
        lhs(14,6)=penalty_parameter*(clhs33*clhs594 + clhs50*clhs595);
        lhs(14,7)=penalty_parameter*(clhs33*clhs596 + clhs50*clhs597);
        lhs(14,8)=penalty_parameter*(clhs33*clhs598 + clhs50*clhs599);
        lhs(14,9)=penalty_parameter*(clhs33*clhs600 + clhs50*clhs601);
        lhs(14,10)=penalty_parameter*(clhs33*clhs602 + clhs50*clhs603);
        lhs(14,11)=penalty_parameter*(clhs33*clhs604 + clhs50*clhs605);
        lhs(14,12)=-clhs190*clhs484 - clhs199*clhs485 - clhs33*clhs508 - clhs50*clhs509;
        lhs(14,13)=-clhs210*clhs484 - clhs219*clhs485 - clhs33*clhs510 - clhs50*clhs511;
        lhs(14,14)=-clhs230*clhs484 - clhs239*clhs485 - clhs33*clhs512 - clhs50*clhs513;
        lhs(14,15)=-clhs250*clhs484 - clhs259*clhs485 - clhs33*clhs514 - clhs50*clhs515;
        lhs(14,16)=-clhs270*clhs484 - clhs279*clhs485 - clhs33*clhs516 - clhs50*clhs517;
        lhs(14,17)=-clhs290*clhs484 - clhs299*clhs485 - clhs33*clhs518 - clhs50*clhs519;
        lhs(14,18)=-clhs310*clhs484 - clhs319*clhs485 - clhs33*clhs520 - clhs50*clhs521;
        lhs(14,19)=-clhs33*clhs522 - clhs330*clhs484 - clhs339*clhs485 - clhs50*clhs523;
        lhs(14,20)=-clhs33*clhs524 - clhs350*clhs484 - clhs359*clhs485 - clhs50*clhs525;
        lhs(14,21)=-clhs33*clhs526 - clhs370*clhs484 - clhs379*clhs485 - clhs50*clhs527;
        lhs(14,22)=-clhs33*clhs528 - clhs390*clhs484 - clhs399*clhs485 - clhs50*clhs529;
        lhs(14,23)=-clhs33*clhs530 - clhs410*clhs484 - clhs419*clhs485 - clhs50*clhs531;
        lhs(14,24)=0;
        lhs(14,25)=-clhs33*clhs532;
        lhs(14,26)=0;
        lhs(14,27)=-clhs50*clhs533;
        lhs(15,0)=penalty_parameter*(clhs35*clhs534 + clhs51*clhs535);
        lhs(15,1)=penalty_parameter*(clhs35*clhs536 + clhs51*clhs537);
        lhs(15,2)=penalty_parameter*(clhs35*clhs538 + clhs51*clhs539);
        lhs(15,3)=penalty_parameter*(clhs35*clhs540 + clhs51*clhs541);
        lhs(15,4)=penalty_parameter*(clhs35*clhs542 + clhs51*clhs543);
        lhs(15,5)=penalty_parameter*(clhs35*clhs544 + clhs51*clhs545);
        lhs(15,6)=penalty_parameter*(clhs35*clhs546 + clhs51*clhs547);
        lhs(15,7)=penalty_parameter*(clhs35*clhs548 + clhs51*clhs549);
        lhs(15,8)=penalty_parameter*(clhs35*clhs550 + clhs51*clhs551);
        lhs(15,9)=penalty_parameter*(clhs35*clhs552 + clhs51*clhs553);
        lhs(15,10)=penalty_parameter*(clhs35*clhs554 + clhs51*clhs555);
        lhs(15,11)=penalty_parameter*(clhs35*clhs556 + clhs51*clhs557);
        lhs(15,12)=-clhs191*clhs49 - clhs198*clhs35 - clhs200*clhs55 - clhs207*clhs51;
        lhs(15,13)=-clhs211*clhs49 - clhs218*clhs35 - clhs220*clhs55 - clhs227*clhs51;
        lhs(15,14)=-clhs231*clhs49 - clhs238*clhs35 - clhs240*clhs55 - clhs247*clhs51;
        lhs(15,15)=-clhs251*clhs49 - clhs258*clhs35 - clhs260*clhs55 - clhs267*clhs51;
        lhs(15,16)=-clhs271*clhs49 - clhs278*clhs35 - clhs280*clhs55 - clhs287*clhs51;
        lhs(15,17)=-clhs291*clhs49 - clhs298*clhs35 - clhs300*clhs55 - clhs307*clhs51;
        lhs(15,18)=-clhs311*clhs49 - clhs318*clhs35 - clhs320*clhs55 - clhs327*clhs51;
        lhs(15,19)=-clhs331*clhs49 - clhs338*clhs35 - clhs340*clhs55 - clhs347*clhs51;
        lhs(15,20)=-clhs35*clhs358 - clhs351*clhs49 - clhs360*clhs55 - clhs367*clhs51;
        lhs(15,21)=-clhs35*clhs378 - clhs371*clhs49 - clhs380*clhs55 - clhs387*clhs51;
        lhs(15,22)=-clhs35*clhs398 - clhs391*clhs49 - clhs400*clhs55 - clhs407*clhs51;
        lhs(15,23)=-clhs35*clhs418 - clhs411*clhs49 - clhs420*clhs55 - clhs427*clhs51;
        lhs(15,24)=0;
        lhs(15,25)=-clhs35*clhs428;
        lhs(15,26)=0;
        lhs(15,27)=-clhs429*clhs51;
        lhs(16,0)=penalty_parameter*(clhs35*clhs558 + clhs51*clhs559);
        lhs(16,1)=penalty_parameter*(clhs35*clhs560 + clhs51*clhs561);
        lhs(16,2)=penalty_parameter*(clhs35*clhs562 + clhs51*clhs563);
        lhs(16,3)=penalty_parameter*(clhs35*clhs564 + clhs51*clhs565);
        lhs(16,4)=penalty_parameter*(clhs35*clhs566 + clhs51*clhs567);
        lhs(16,5)=penalty_parameter*(clhs35*clhs568 + clhs51*clhs569);
        lhs(16,6)=penalty_parameter*(clhs35*clhs570 + clhs51*clhs571);
        lhs(16,7)=penalty_parameter*(clhs35*clhs572 + clhs51*clhs573);
        lhs(16,8)=penalty_parameter*(clhs35*clhs574 + clhs51*clhs575);
        lhs(16,9)=penalty_parameter*(clhs35*clhs576 + clhs51*clhs577);
        lhs(16,10)=penalty_parameter*(clhs35*clhs578 + clhs51*clhs579);
        lhs(16,11)=penalty_parameter*(clhs35*clhs580 + clhs51*clhs581);
        lhs(16,12)=-clhs191*clhs432 - clhs200*clhs433 - clhs35*clhs456 - clhs457*clhs51;
        lhs(16,13)=-clhs211*clhs432 - clhs220*clhs433 - clhs35*clhs458 - clhs459*clhs51;
        lhs(16,14)=-clhs231*clhs432 - clhs240*clhs433 - clhs35*clhs460 - clhs461*clhs51;
        lhs(16,15)=-clhs251*clhs432 - clhs260*clhs433 - clhs35*clhs462 - clhs463*clhs51;
        lhs(16,16)=-clhs271*clhs432 - clhs280*clhs433 - clhs35*clhs464 - clhs465*clhs51;
        lhs(16,17)=-clhs291*clhs432 - clhs300*clhs433 - clhs35*clhs466 - clhs467*clhs51;
        lhs(16,18)=-clhs311*clhs432 - clhs320*clhs433 - clhs35*clhs468 - clhs469*clhs51;
        lhs(16,19)=-clhs331*clhs432 - clhs340*clhs433 - clhs35*clhs470 - clhs471*clhs51;
        lhs(16,20)=-clhs35*clhs472 - clhs351*clhs432 - clhs360*clhs433 - clhs473*clhs51;
        lhs(16,21)=-clhs35*clhs474 - clhs371*clhs432 - clhs380*clhs433 - clhs475*clhs51;
        lhs(16,22)=-clhs35*clhs476 - clhs391*clhs432 - clhs400*clhs433 - clhs477*clhs51;
        lhs(16,23)=-clhs35*clhs478 - clhs411*clhs432 - clhs420*clhs433 - clhs479*clhs51;
        lhs(16,24)=0;
        lhs(16,25)=-clhs35*clhs480;
        lhs(16,26)=0;
        lhs(16,27)=-clhs481*clhs51;
        lhs(17,0)=penalty_parameter*(clhs35*clhs582 + clhs51*clhs583);
        lhs(17,1)=penalty_parameter*(clhs35*clhs584 + clhs51*clhs585);
        lhs(17,2)=penalty_parameter*(clhs35*clhs586 + clhs51*clhs587);
        lhs(17,3)=penalty_parameter*(clhs35*clhs588 + clhs51*clhs589);
        lhs(17,4)=penalty_parameter*(clhs35*clhs590 + clhs51*clhs591);
        lhs(17,5)=penalty_parameter*(clhs35*clhs592 + clhs51*clhs593);
        lhs(17,6)=penalty_parameter*(clhs35*clhs594 + clhs51*clhs595);
        lhs(17,7)=penalty_parameter*(clhs35*clhs596 + clhs51*clhs597);
        lhs(17,8)=penalty_parameter*(clhs35*clhs598 + clhs51*clhs599);
        lhs(17,9)=penalty_parameter*(clhs35*clhs600 + clhs51*clhs601);
        lhs(17,10)=penalty_parameter*(clhs35*clhs602 + clhs51*clhs603);
        lhs(17,11)=penalty_parameter*(clhs35*clhs604 + clhs51*clhs605);
        lhs(17,12)=-clhs191*clhs484 - clhs200*clhs485 - clhs35*clhs508 - clhs509*clhs51;
        lhs(17,13)=-clhs211*clhs484 - clhs220*clhs485 - clhs35*clhs510 - clhs51*clhs511;
        lhs(17,14)=-clhs231*clhs484 - clhs240*clhs485 - clhs35*clhs512 - clhs51*clhs513;
        lhs(17,15)=-clhs251*clhs484 - clhs260*clhs485 - clhs35*clhs514 - clhs51*clhs515;
        lhs(17,16)=-clhs271*clhs484 - clhs280*clhs485 - clhs35*clhs516 - clhs51*clhs517;
        lhs(17,17)=-clhs291*clhs484 - clhs300*clhs485 - clhs35*clhs518 - clhs51*clhs519;
        lhs(17,18)=-clhs311*clhs484 - clhs320*clhs485 - clhs35*clhs520 - clhs51*clhs521;
        lhs(17,19)=-clhs331*clhs484 - clhs340*clhs485 - clhs35*clhs522 - clhs51*clhs523;
        lhs(17,20)=-clhs35*clhs524 - clhs351*clhs484 - clhs360*clhs485 - clhs51*clhs525;
        lhs(17,21)=-clhs35*clhs526 - clhs371*clhs484 - clhs380*clhs485 - clhs51*clhs527;
        lhs(17,22)=-clhs35*clhs528 - clhs391*clhs484 - clhs400*clhs485 - clhs51*clhs529;
        lhs(17,23)=-clhs35*clhs530 - clhs411*clhs484 - clhs420*clhs485 - clhs51*clhs531;
        lhs(17,24)=0;
        lhs(17,25)=-clhs35*clhs532;
        lhs(17,26)=0;
        lhs(17,27)=-clhs51*clhs533;
        lhs(18,0)=penalty_parameter*(clhs37*clhs534 + clhs52*clhs535);
        lhs(18,1)=penalty_parameter*(clhs37*clhs536 + clhs52*clhs537);
        lhs(18,2)=penalty_parameter*(clhs37*clhs538 + clhs52*clhs539);
        lhs(18,3)=penalty_parameter*(clhs37*clhs540 + clhs52*clhs541);
        lhs(18,4)=penalty_parameter*(clhs37*clhs542 + clhs52*clhs543);
        lhs(18,5)=penalty_parameter*(clhs37*clhs544 + clhs52*clhs545);
        lhs(18,6)=penalty_parameter*(clhs37*clhs546 + clhs52*clhs547);
        lhs(18,7)=penalty_parameter*(clhs37*clhs548 + clhs52*clhs549);
        lhs(18,8)=penalty_parameter*(clhs37*clhs550 + clhs52*clhs551);
        lhs(18,9)=penalty_parameter*(clhs37*clhs552 + clhs52*clhs553);
        lhs(18,10)=penalty_parameter*(clhs37*clhs554 + clhs52*clhs555);
        lhs(18,11)=penalty_parameter*(clhs37*clhs556 + clhs52*clhs557);
        lhs(18,12)=-clhs192*clhs49 - clhs198*clhs37 - clhs201*clhs55 - clhs207*clhs52;
        lhs(18,13)=-clhs212*clhs49 - clhs218*clhs37 - clhs221*clhs55 - clhs227*clhs52;
        lhs(18,14)=-clhs232*clhs49 - clhs238*clhs37 - clhs241*clhs55 - clhs247*clhs52;
        lhs(18,15)=-clhs252*clhs49 - clhs258*clhs37 - clhs261*clhs55 - clhs267*clhs52;
        lhs(18,16)=-clhs272*clhs49 - clhs278*clhs37 - clhs281*clhs55 - clhs287*clhs52;
        lhs(18,17)=-clhs292*clhs49 - clhs298*clhs37 - clhs301*clhs55 - clhs307*clhs52;
        lhs(18,18)=-clhs312*clhs49 - clhs318*clhs37 - clhs321*clhs55 - clhs327*clhs52;
        lhs(18,19)=-clhs332*clhs49 - clhs338*clhs37 - clhs341*clhs55 - clhs347*clhs52;
        lhs(18,20)=-clhs352*clhs49 - clhs358*clhs37 - clhs361*clhs55 - clhs367*clhs52;
        lhs(18,21)=-clhs37*clhs378 - clhs372*clhs49 - clhs381*clhs55 - clhs387*clhs52;
        lhs(18,22)=-clhs37*clhs398 - clhs392*clhs49 - clhs401*clhs55 - clhs407*clhs52;
        lhs(18,23)=-clhs37*clhs418 - clhs412*clhs49 - clhs421*clhs55 - clhs427*clhs52;
        lhs(18,24)=0;
        lhs(18,25)=-clhs37*clhs428;
        lhs(18,26)=0;
        lhs(18,27)=-clhs429*clhs52;
        lhs(19,0)=penalty_parameter*(clhs37*clhs558 + clhs52*clhs559);
        lhs(19,1)=penalty_parameter*(clhs37*clhs560 + clhs52*clhs561);
        lhs(19,2)=penalty_parameter*(clhs37*clhs562 + clhs52*clhs563);
        lhs(19,3)=penalty_parameter*(clhs37*clhs564 + clhs52*clhs565);
        lhs(19,4)=penalty_parameter*(clhs37*clhs566 + clhs52*clhs567);
        lhs(19,5)=penalty_parameter*(clhs37*clhs568 + clhs52*clhs569);
        lhs(19,6)=penalty_parameter*(clhs37*clhs570 + clhs52*clhs571);
        lhs(19,7)=penalty_parameter*(clhs37*clhs572 + clhs52*clhs573);
        lhs(19,8)=penalty_parameter*(clhs37*clhs574 + clhs52*clhs575);
        lhs(19,9)=penalty_parameter*(clhs37*clhs576 + clhs52*clhs577);
        lhs(19,10)=penalty_parameter*(clhs37*clhs578 + clhs52*clhs579);
        lhs(19,11)=penalty_parameter*(clhs37*clhs580 + clhs52*clhs581);
        lhs(19,12)=-clhs192*clhs432 - clhs201*clhs433 - clhs37*clhs456 - clhs457*clhs52;
        lhs(19,13)=-clhs212*clhs432 - clhs221*clhs433 - clhs37*clhs458 - clhs459*clhs52;
        lhs(19,14)=-clhs232*clhs432 - clhs241*clhs433 - clhs37*clhs460 - clhs461*clhs52;
        lhs(19,15)=-clhs252*clhs432 - clhs261*clhs433 - clhs37*clhs462 - clhs463*clhs52;
        lhs(19,16)=-clhs272*clhs432 - clhs281*clhs433 - clhs37*clhs464 - clhs465*clhs52;
        lhs(19,17)=-clhs292*clhs432 - clhs301*clhs433 - clhs37*clhs466 - clhs467*clhs52;
        lhs(19,18)=-clhs312*clhs432 - clhs321*clhs433 - clhs37*clhs468 - clhs469*clhs52;
        lhs(19,19)=-clhs332*clhs432 - clhs341*clhs433 - clhs37*clhs470 - clhs471*clhs52;
        lhs(19,20)=-clhs352*clhs432 - clhs361*clhs433 - clhs37*clhs472 - clhs473*clhs52;
        lhs(19,21)=-clhs37*clhs474 - clhs372*clhs432 - clhs381*clhs433 - clhs475*clhs52;
        lhs(19,22)=-clhs37*clhs476 - clhs392*clhs432 - clhs401*clhs433 - clhs477*clhs52;
        lhs(19,23)=-clhs37*clhs478 - clhs412*clhs432 - clhs421*clhs433 - clhs479*clhs52;
        lhs(19,24)=0;
        lhs(19,25)=-clhs37*clhs480;
        lhs(19,26)=0;
        lhs(19,27)=-clhs481*clhs52;
        lhs(20,0)=penalty_parameter*(clhs37*clhs582 + clhs52*clhs583);
        lhs(20,1)=penalty_parameter*(clhs37*clhs584 + clhs52*clhs585);
        lhs(20,2)=penalty_parameter*(clhs37*clhs586 + clhs52*clhs587);
        lhs(20,3)=penalty_parameter*(clhs37*clhs588 + clhs52*clhs589);
        lhs(20,4)=penalty_parameter*(clhs37*clhs590 + clhs52*clhs591);
        lhs(20,5)=penalty_parameter*(clhs37*clhs592 + clhs52*clhs593);
        lhs(20,6)=penalty_parameter*(clhs37*clhs594 + clhs52*clhs595);
        lhs(20,7)=penalty_parameter*(clhs37*clhs596 + clhs52*clhs597);
        lhs(20,8)=penalty_parameter*(clhs37*clhs598 + clhs52*clhs599);
        lhs(20,9)=penalty_parameter*(clhs37*clhs600 + clhs52*clhs601);
        lhs(20,10)=penalty_parameter*(clhs37*clhs602 + clhs52*clhs603);
        lhs(20,11)=penalty_parameter*(clhs37*clhs604 + clhs52*clhs605);
        lhs(20,12)=-clhs192*clhs484 - clhs201*clhs485 - clhs37*clhs508 - clhs509*clhs52;
        lhs(20,13)=-clhs212*clhs484 - clhs221*clhs485 - clhs37*clhs510 - clhs511*clhs52;
        lhs(20,14)=-clhs232*clhs484 - clhs241*clhs485 - clhs37*clhs512 - clhs513*clhs52;
        lhs(20,15)=-clhs252*clhs484 - clhs261*clhs485 - clhs37*clhs514 - clhs515*clhs52;
        lhs(20,16)=-clhs272*clhs484 - clhs281*clhs485 - clhs37*clhs516 - clhs517*clhs52;
        lhs(20,17)=-clhs292*clhs484 - clhs301*clhs485 - clhs37*clhs518 - clhs519*clhs52;
        lhs(20,18)=-clhs312*clhs484 - clhs321*clhs485 - clhs37*clhs520 - clhs52*clhs521;
        lhs(20,19)=-clhs332*clhs484 - clhs341*clhs485 - clhs37*clhs522 - clhs52*clhs523;
        lhs(20,20)=-clhs352*clhs484 - clhs361*clhs485 - clhs37*clhs524 - clhs52*clhs525;
        lhs(20,21)=-clhs37*clhs526 - clhs372*clhs484 - clhs381*clhs485 - clhs52*clhs527;
        lhs(20,22)=-clhs37*clhs528 - clhs392*clhs484 - clhs401*clhs485 - clhs52*clhs529;
        lhs(20,23)=-clhs37*clhs530 - clhs412*clhs484 - clhs421*clhs485 - clhs52*clhs531;
        lhs(20,24)=0;
        lhs(20,25)=-clhs37*clhs532;
        lhs(20,26)=0;
        lhs(20,27)=-clhs52*clhs533;
        lhs(21,0)=penalty_parameter*(clhs39*clhs534 + clhs53*clhs535);
        lhs(21,1)=penalty_parameter*(clhs39*clhs536 + clhs53*clhs537);
        lhs(21,2)=penalty_parameter*(clhs39*clhs538 + clhs53*clhs539);
        lhs(21,3)=penalty_parameter*(clhs39*clhs540 + clhs53*clhs541);
        lhs(21,4)=penalty_parameter*(clhs39*clhs542 + clhs53*clhs543);
        lhs(21,5)=penalty_parameter*(clhs39*clhs544 + clhs53*clhs545);
        lhs(21,6)=penalty_parameter*(clhs39*clhs546 + clhs53*clhs547);
        lhs(21,7)=penalty_parameter*(clhs39*clhs548 + clhs53*clhs549);
        lhs(21,8)=penalty_parameter*(clhs39*clhs550 + clhs53*clhs551);
        lhs(21,9)=penalty_parameter*(clhs39*clhs552 + clhs53*clhs553);
        lhs(21,10)=penalty_parameter*(clhs39*clhs554 + clhs53*clhs555);
        lhs(21,11)=penalty_parameter*(clhs39*clhs556 + clhs53*clhs557);
        lhs(21,12)=-clhs193*clhs49 - clhs198*clhs39 - clhs202*clhs55 - clhs207*clhs53;
        lhs(21,13)=-clhs213*clhs49 - clhs218*clhs39 - clhs222*clhs55 - clhs227*clhs53;
        lhs(21,14)=-clhs233*clhs49 - clhs238*clhs39 - clhs242*clhs55 - clhs247*clhs53;
        lhs(21,15)=-clhs253*clhs49 - clhs258*clhs39 - clhs262*clhs55 - clhs267*clhs53;
        lhs(21,16)=-clhs273*clhs49 - clhs278*clhs39 - clhs282*clhs55 - clhs287*clhs53;
        lhs(21,17)=-clhs293*clhs49 - clhs298*clhs39 - clhs302*clhs55 - clhs307*clhs53;
        lhs(21,18)=-clhs313*clhs49 - clhs318*clhs39 - clhs322*clhs55 - clhs327*clhs53;
        lhs(21,19)=-clhs333*clhs49 - clhs338*clhs39 - clhs342*clhs55 - clhs347*clhs53;
        lhs(21,20)=-clhs353*clhs49 - clhs358*clhs39 - clhs362*clhs55 - clhs367*clhs53;
        lhs(21,21)=-clhs373*clhs49 - clhs378*clhs39 - clhs382*clhs55 - clhs387*clhs53;
        lhs(21,22)=-clhs39*clhs398 - clhs393*clhs49 - clhs402*clhs55 - clhs407*clhs53;
        lhs(21,23)=-clhs39*clhs418 - clhs413*clhs49 - clhs422*clhs55 - clhs427*clhs53;
        lhs(21,24)=0;
        lhs(21,25)=-clhs39*clhs428;
        lhs(21,26)=0;
        lhs(21,27)=-clhs429*clhs53;
        lhs(22,0)=penalty_parameter*(clhs39*clhs558 + clhs53*clhs559);
        lhs(22,1)=penalty_parameter*(clhs39*clhs560 + clhs53*clhs561);
        lhs(22,2)=penalty_parameter*(clhs39*clhs562 + clhs53*clhs563);
        lhs(22,3)=penalty_parameter*(clhs39*clhs564 + clhs53*clhs565);
        lhs(22,4)=penalty_parameter*(clhs39*clhs566 + clhs53*clhs567);
        lhs(22,5)=penalty_parameter*(clhs39*clhs568 + clhs53*clhs569);
        lhs(22,6)=penalty_parameter*(clhs39*clhs570 + clhs53*clhs571);
        lhs(22,7)=penalty_parameter*(clhs39*clhs572 + clhs53*clhs573);
        lhs(22,8)=penalty_parameter*(clhs39*clhs574 + clhs53*clhs575);
        lhs(22,9)=penalty_parameter*(clhs39*clhs576 + clhs53*clhs577);
        lhs(22,10)=penalty_parameter*(clhs39*clhs578 + clhs53*clhs579);
        lhs(22,11)=penalty_parameter*(clhs39*clhs580 + clhs53*clhs581);
        lhs(22,12)=-clhs193*clhs432 - clhs202*clhs433 - clhs39*clhs456 - clhs457*clhs53;
        lhs(22,13)=-clhs213*clhs432 - clhs222*clhs433 - clhs39*clhs458 - clhs459*clhs53;
        lhs(22,14)=-clhs233*clhs432 - clhs242*clhs433 - clhs39*clhs460 - clhs461*clhs53;
        lhs(22,15)=-clhs253*clhs432 - clhs262*clhs433 - clhs39*clhs462 - clhs463*clhs53;
        lhs(22,16)=-clhs273*clhs432 - clhs282*clhs433 - clhs39*clhs464 - clhs465*clhs53;
        lhs(22,17)=-clhs293*clhs432 - clhs302*clhs433 - clhs39*clhs466 - clhs467*clhs53;
        lhs(22,18)=-clhs313*clhs432 - clhs322*clhs433 - clhs39*clhs468 - clhs469*clhs53;
        lhs(22,19)=-clhs333*clhs432 - clhs342*clhs433 - clhs39*clhs470 - clhs471*clhs53;
        lhs(22,20)=-clhs353*clhs432 - clhs362*clhs433 - clhs39*clhs472 - clhs473*clhs53;
        lhs(22,21)=-clhs373*clhs432 - clhs382*clhs433 - clhs39*clhs474 - clhs475*clhs53;
        lhs(22,22)=-clhs39*clhs476 - clhs393*clhs432 - clhs402*clhs433 - clhs477*clhs53;
        lhs(22,23)=-clhs39*clhs478 - clhs413*clhs432 - clhs422*clhs433 - clhs479*clhs53;
        lhs(22,24)=0;
        lhs(22,25)=-clhs39*clhs480;
        lhs(22,26)=0;
        lhs(22,27)=-clhs481*clhs53;
        lhs(23,0)=penalty_parameter*(clhs39*clhs582 + clhs53*clhs583);
        lhs(23,1)=penalty_parameter*(clhs39*clhs584 + clhs53*clhs585);
        lhs(23,2)=penalty_parameter*(clhs39*clhs586 + clhs53*clhs587);
        lhs(23,3)=penalty_parameter*(clhs39*clhs588 + clhs53*clhs589);
        lhs(23,4)=penalty_parameter*(clhs39*clhs590 + clhs53*clhs591);
        lhs(23,5)=penalty_parameter*(clhs39*clhs592 + clhs53*clhs593);
        lhs(23,6)=penalty_parameter*(clhs39*clhs594 + clhs53*clhs595);
        lhs(23,7)=penalty_parameter*(clhs39*clhs596 + clhs53*clhs597);
        lhs(23,8)=penalty_parameter*(clhs39*clhs598 + clhs53*clhs599);
        lhs(23,9)=penalty_parameter*(clhs39*clhs600 + clhs53*clhs601);
        lhs(23,10)=penalty_parameter*(clhs39*clhs602 + clhs53*clhs603);
        lhs(23,11)=penalty_parameter*(clhs39*clhs604 + clhs53*clhs605);
        lhs(23,12)=-clhs193*clhs484 - clhs202*clhs485 - clhs39*clhs508 - clhs509*clhs53;
        lhs(23,13)=-clhs213*clhs484 - clhs222*clhs485 - clhs39*clhs510 - clhs511*clhs53;
        lhs(23,14)=-clhs233*clhs484 - clhs242*clhs485 - clhs39*clhs512 - clhs513*clhs53;
        lhs(23,15)=-clhs253*clhs484 - clhs262*clhs485 - clhs39*clhs514 - clhs515*clhs53;
        lhs(23,16)=-clhs273*clhs484 - clhs282*clhs485 - clhs39*clhs516 - clhs517*clhs53;
        lhs(23,17)=-clhs293*clhs484 - clhs302*clhs485 - clhs39*clhs518 - clhs519*clhs53;
        lhs(23,18)=-clhs313*clhs484 - clhs322*clhs485 - clhs39*clhs520 - clhs521*clhs53;
        lhs(23,19)=-clhs333*clhs484 - clhs342*clhs485 - clhs39*clhs522 - clhs523*clhs53;
        lhs(23,20)=-clhs353*clhs484 - clhs362*clhs485 - clhs39*clhs524 - clhs525*clhs53;
        lhs(23,21)=-clhs373*clhs484 - clhs382*clhs485 - clhs39*clhs526 - clhs527*clhs53;
        lhs(23,22)=-clhs39*clhs528 - clhs393*clhs484 - clhs402*clhs485 - clhs529*clhs53;
        lhs(23,23)=-clhs39*clhs530 - clhs413*clhs484 - clhs422*clhs485 - clhs53*clhs531;
        lhs(23,24)=0;
        lhs(23,25)=-clhs39*clhs532;
        lhs(23,26)=0;
        lhs(23,27)=-clhs53*clhs533;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs606;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs20*scale_factor;
        lhs(25,1)=clhs60*scale_factor;
        lhs(25,2)=clhs72*scale_factor;
        lhs(25,3)=clhs84*scale_factor;
        lhs(25,4)=clhs96*scale_factor;
        lhs(25,5)=clhs108*scale_factor;
        lhs(25,6)=clhs120*scale_factor;
        lhs(25,7)=clhs132*scale_factor;
        lhs(25,8)=clhs144*scale_factor;
        lhs(25,9)=clhs156*scale_factor;
        lhs(25,10)=clhs168*scale_factor;
        lhs(25,11)=clhs180*scale_factor;
        lhs(25,12)=-clhs197*scale_factor;
        lhs(25,13)=-clhs217*scale_factor;
        lhs(25,14)=-clhs237*scale_factor;
        lhs(25,15)=-clhs257*scale_factor;
        lhs(25,16)=-clhs277*scale_factor;
        lhs(25,17)=-clhs297*scale_factor;
        lhs(25,18)=-clhs317*scale_factor;
        lhs(25,19)=-clhs337*scale_factor;
        lhs(25,20)=-clhs357*scale_factor;
        lhs(25,21)=-clhs377*scale_factor;
        lhs(25,22)=-clhs397*scale_factor;
        lhs(25,23)=-clhs417*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs606;
        lhs(26,27)=0;
        lhs(27,0)=clhs30*scale_factor;
        lhs(27,1)=clhs66*scale_factor;
        lhs(27,2)=clhs78*scale_factor;
        lhs(27,3)=clhs90*scale_factor;
        lhs(27,4)=clhs102*scale_factor;
        lhs(27,5)=clhs114*scale_factor;
        lhs(27,6)=clhs126*scale_factor;
        lhs(27,7)=clhs138*scale_factor;
        lhs(27,8)=clhs150*scale_factor;
        lhs(27,9)=clhs162*scale_factor;
        lhs(27,10)=clhs174*scale_factor;
        lhs(27,11)=clhs186*scale_factor;
        lhs(27,12)=-clhs206*scale_factor;
        lhs(27,13)=-clhs226*scale_factor;
        lhs(27,14)=-clhs246*scale_factor;
        lhs(27,15)=-clhs266*scale_factor;
        lhs(27,16)=-clhs286*scale_factor;
        lhs(27,17)=-clhs306*scale_factor;
        lhs(27,18)=-clhs326*scale_factor;
        lhs(27,19)=-clhs346*scale_factor;
        lhs(27,20)=-clhs366*scale_factor;
        lhs(27,21)=-clhs386*scale_factor;
        lhs(27,22)=-clhs406*scale_factor;
        lhs(27,23)=-clhs426*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 6 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(1,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(1,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(1,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(1,0)*penalty_parameter;
        const double clhs22 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(2,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(2,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(2,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(2,0)*penalty_parameter;
        const double clhs32 =     X1(0,0) + u1(0,0);
        const double clhs33 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs34 =     X1(1,0) + u1(1,0);
        const double clhs35 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs36 =     X1(2,0) + u1(2,0);
        const double clhs37 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs38 =     X1(3,0) + u1(3,0);
        const double clhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs40 =     X1(0,1) + u1(0,1);
        const double clhs41 =     X1(1,1) + u1(1,1);
        const double clhs42 =     X1(2,1) + u1(2,1);
        const double clhs43 =     X1(3,1) + u1(3,1);
        const double clhs44 =     X1(0,2) + u1(0,2);
        const double clhs45 =     X1(1,2) + u1(1,2);
        const double clhs46 =     X1(2,2) + u1(2,2);
        const double clhs47 =     X1(3,2) + u1(3,2);
        const double clhs48 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs32*clhs33 + clhs34*clhs35 + clhs36*clhs37 + clhs38*clhs39) + normalslave(1,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs33*clhs40 + clhs35*clhs41 + clhs37*clhs42 + clhs39*clhs43 - clhs6*clhs7) + normalslave(1,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs44 + clhs35*clhs45 + clhs37*clhs46 + clhs39*clhs47));
        const double clhs49 =     clhs48*normalslave(1,0);
        const double clhs50 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs51 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs52 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs53 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs32*clhs50 + clhs34*clhs51 + clhs36*clhs52 + clhs38*clhs53) + normalslave(2,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs40*clhs50 + clhs41*clhs51 + clhs42*clhs52 + clhs43*clhs53) + normalslave(2,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs44*clhs50 + clhs45*clhs51 + clhs46*clhs52 + clhs47*clhs53));
        const double clhs55 =     clhs54*normalslave(2,0);
        const double clhs56 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs57 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs60 =     normalslave(1,0)*(clhs16*clhs56 + clhs17*clhs57 + clhs18*clhs58 + clhs19*clhs59) + normalslave(1,1)*(clhs0 + clhs1*clhs56 + clhs3*clhs57 + clhs58*clhs6 + clhs59*clhs9) + normalslave(1,2)*(clhs12*clhs56 + clhs13*clhs57 + clhs14*clhs58 + clhs15*clhs59);
        const double clhs61 =     clhs60*normalslave(1,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs65 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs66 =     normalslave(2,0)*(clhs16*clhs62 + clhs17*clhs63 + clhs18*clhs64 + clhs19*clhs65) + normalslave(2,1)*(clhs1*clhs62 + clhs22 + clhs3*clhs63 + clhs6*clhs64 + clhs65*clhs9) + normalslave(2,2)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64 + clhs15*clhs65);
        const double clhs67 =     clhs66*normalslave(2,0)*penalty_parameter;
        const double clhs68 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs69 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs70 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs71 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs72 =     normalslave(1,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(1,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(1,2)*(clhs0 + clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71);
        const double clhs73 =     clhs72*normalslave(1,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs75 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs76 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs77 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs78 =     normalslave(2,0)*(clhs16*clhs74 + clhs17*clhs75 + clhs18*clhs76 + clhs19*clhs77) + normalslave(2,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs6*clhs76 + clhs77*clhs9) + normalslave(2,2)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76 + clhs15*clhs77 + clhs22);
        const double clhs79 =     clhs78*normalslave(2,0)*penalty_parameter;
        const double clhs80 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs81 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs82 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs83 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs84 =     normalslave(1,0)*(clhs16*clhs80 + clhs17*clhs81 + clhs18*clhs82 + clhs19*clhs83 + clhs4) + normalslave(1,1)*(clhs1*clhs80 + clhs3*clhs81 + clhs6*clhs82 + clhs83*clhs9) + normalslave(1,2)*(clhs12*clhs80 + clhs13*clhs81 + clhs14*clhs82 + clhs15*clhs83);
        const double clhs85 =     clhs84*normalslave(1,0)*penalty_parameter;
        const double clhs86 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs87 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs90 =     normalslave(2,0)*(clhs16*clhs86 + clhs17*clhs87 + clhs18*clhs88 + clhs19*clhs89 + clhs24) + normalslave(2,1)*(clhs1*clhs86 + clhs3*clhs87 + clhs6*clhs88 + clhs89*clhs9) + normalslave(2,2)*(clhs12*clhs86 + clhs13*clhs87 + clhs14*clhs88 + clhs15*clhs89);
        const double clhs91 =     clhs90*normalslave(2,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs93 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs94 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs95 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs96 =     normalslave(1,0)*(clhs16*clhs92 + clhs17*clhs93 + clhs18*clhs94 + clhs19*clhs95) + normalslave(1,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs4 + clhs6*clhs94 + clhs9*clhs95) + normalslave(1,2)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs15*clhs95);
        const double clhs97 =     clhs96*normalslave(1,0)*penalty_parameter;
        const double clhs98 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs99 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs100 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs101 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs102 =     normalslave(2,0)*(clhs100*clhs18 + clhs101*clhs19 + clhs16*clhs98 + clhs17*clhs99) + normalslave(2,1)*(clhs1*clhs98 + clhs100*clhs6 + clhs101*clhs9 + clhs24 + clhs3*clhs99) + normalslave(2,2)*(clhs100*clhs14 + clhs101*clhs15 + clhs12*clhs98 + clhs13*clhs99);
        const double clhs103 =     clhs102*normalslave(2,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs105 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs106 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs107 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs108 =     normalslave(1,0)*(clhs104*clhs16 + clhs105*clhs17 + clhs106*clhs18 + clhs107*clhs19) + normalslave(1,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs107*clhs9) + normalslave(1,2)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14 + clhs107*clhs15 + clhs4);
        const double clhs109 =     clhs108*normalslave(1,0)*penalty_parameter;
        const double clhs110 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs111 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs112 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs113 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs114 =     normalslave(2,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(2,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(2,2)*(clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15 + clhs24);
        const double clhs115 =     clhs114*normalslave(2,0)*penalty_parameter;
        const double clhs116 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs117 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs118 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs119 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs120 =     normalslave(1,0)*(clhs116*clhs16 + clhs117*clhs17 + clhs118*clhs18 + clhs119*clhs19 + clhs7) + normalslave(1,1)*(clhs1*clhs116 + clhs117*clhs3 + clhs118*clhs6 + clhs119*clhs9) + normalslave(1,2)*(clhs116*clhs12 + clhs117*clhs13 + clhs118*clhs14 + clhs119*clhs15);
        const double clhs121 =     clhs120*normalslave(1,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs123 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs124 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs125 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs126 =     normalslave(2,0)*(clhs122*clhs16 + clhs123*clhs17 + clhs124*clhs18 + clhs125*clhs19 + clhs26) + normalslave(2,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6 + clhs125*clhs9) + normalslave(2,2)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14 + clhs125*clhs15);
        const double clhs127 =     clhs126*normalslave(2,0)*penalty_parameter;
        const double clhs128 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs129 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs130 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs131 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs132 =     normalslave(1,0)*(clhs128*clhs16 + clhs129*clhs17 + clhs130*clhs18 + clhs131*clhs19) + normalslave(1,1)*(clhs1*clhs128 + clhs129*clhs3 + clhs130*clhs6 + clhs131*clhs9 + clhs7) + normalslave(1,2)*(clhs12*clhs128 + clhs129*clhs13 + clhs130*clhs14 + clhs131*clhs15);
        const double clhs133 =     clhs132*normalslave(1,0)*penalty_parameter;
        const double clhs134 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs135 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs136 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs137 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs138 =     normalslave(2,0)*(clhs134*clhs16 + clhs135*clhs17 + clhs136*clhs18 + clhs137*clhs19) + normalslave(2,1)*(clhs1*clhs134 + clhs135*clhs3 + clhs136*clhs6 + clhs137*clhs9 + clhs26) + normalslave(2,2)*(clhs12*clhs134 + clhs13*clhs135 + clhs136*clhs14 + clhs137*clhs15);
        const double clhs139 =     clhs138*normalslave(2,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs141 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs142 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs143 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs144 =     normalslave(1,0)*(clhs140*clhs16 + clhs141*clhs17 + clhs142*clhs18 + clhs143*clhs19) + normalslave(1,1)*(clhs1*clhs140 + clhs141*clhs3 + clhs142*clhs6 + clhs143*clhs9) + normalslave(1,2)*(clhs12*clhs140 + clhs13*clhs141 + clhs14*clhs142 + clhs143*clhs15 + clhs7);
        const double clhs145 =     clhs144*normalslave(1,0)*penalty_parameter;
        const double clhs146 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs147 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs148 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs149 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs150 =     normalslave(2,0)*(clhs146*clhs16 + clhs147*clhs17 + clhs148*clhs18 + clhs149*clhs19) + normalslave(2,1)*(clhs1*clhs146 + clhs147*clhs3 + clhs148*clhs6 + clhs149*clhs9) + normalslave(2,2)*(clhs12*clhs146 + clhs13*clhs147 + clhs14*clhs148 + clhs149*clhs15 + clhs26);
        const double clhs151 =     clhs150*normalslave(2,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs153 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs154 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs155 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs156 =     normalslave(1,0)*(clhs10 + clhs152*clhs16 + clhs153*clhs17 + clhs154*clhs18 + clhs155*clhs19) + normalslave(1,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs155*clhs9) + normalslave(1,2)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154 + clhs15*clhs155);
        const double clhs157 =     clhs156*normalslave(1,0)*penalty_parameter;
        const double clhs158 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs159 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs160 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs161 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs162 =     normalslave(2,0)*(clhs158*clhs16 + clhs159*clhs17 + clhs160*clhs18 + clhs161*clhs19 + clhs28) + normalslave(2,1)*(clhs1*clhs158 + clhs159*clhs3 + clhs160*clhs6 + clhs161*clhs9) + normalslave(2,2)*(clhs12*clhs158 + clhs13*clhs159 + clhs14*clhs160 + clhs15*clhs161);
        const double clhs163 =     clhs162*normalslave(2,0)*penalty_parameter;
        const double clhs164 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs165 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs166 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs167 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs168 =     normalslave(1,0)*(clhs16*clhs164 + clhs165*clhs17 + clhs166*clhs18 + clhs167*clhs19) + normalslave(1,1)*(clhs1*clhs164 + clhs10 + clhs165*clhs3 + clhs166*clhs6 + clhs167*clhs9) + normalslave(1,2)*(clhs12*clhs164 + clhs13*clhs165 + clhs14*clhs166 + clhs15*clhs167);
        const double clhs169 =     clhs168*normalslave(1,0)*penalty_parameter;
        const double clhs170 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs171 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs172 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs173 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs174 =     normalslave(2,0)*(clhs16*clhs170 + clhs17*clhs171 + clhs172*clhs18 + clhs173*clhs19) + normalslave(2,1)*(clhs1*clhs170 + clhs171*clhs3 + clhs172*clhs6 + clhs173*clhs9 + clhs28) + normalslave(2,2)*(clhs12*clhs170 + clhs13*clhs171 + clhs14*clhs172 + clhs15*clhs173);
        const double clhs175 =     clhs174*normalslave(2,0)*penalty_parameter;
        const double clhs176 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs177 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs178 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs179 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs180 =     normalslave(1,0)*(clhs16*clhs176 + clhs17*clhs177 + clhs178*clhs18 + clhs179*clhs19) + normalslave(1,1)*(clhs1*clhs176 + clhs177*clhs3 + clhs178*clhs6 + clhs179*clhs9) + normalslave(1,2)*(clhs10 + clhs12*clhs176 + clhs13*clhs177 + clhs14*clhs178 + clhs15*clhs179);
        const double clhs181 =     clhs180*normalslave(1,0)*penalty_parameter;
        const double clhs182 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs183 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs184 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs185 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs186 =     normalslave(2,0)*(clhs16*clhs182 + clhs17*clhs183 + clhs18*clhs184 + clhs185*clhs19) + normalslave(2,1)*(clhs1*clhs182 + clhs183*clhs3 + clhs184*clhs6 + clhs185*clhs9) + normalslave(2,2)*(clhs12*clhs182 + clhs13*clhs183 + clhs14*clhs184 + clhs15*clhs185 + clhs28);
        const double clhs187 =     clhs186*normalslave(2,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs189 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs190 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs191 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs192 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs193 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs194 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs195 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs197 =     normalslave(1,0)*(-clhs16*clhs188 - clhs17*clhs194 - clhs18*clhs195 - clhs19*clhs196 + clhs190*clhs32 + clhs191*clhs34 + clhs192*clhs36 + clhs193*clhs38 + clhs33) + normalslave(1,1)*(-clhs1*clhs188 + clhs190*clhs40 + clhs191*clhs41 + clhs192*clhs42 + clhs193*clhs43 - clhs194*clhs3 - clhs195*clhs6 - clhs196*clhs9) + normalslave(1,2)*(-clhs12*clhs188 - clhs13*clhs194 - clhs14*clhs195 - clhs15*clhs196 + clhs190*clhs44 + clhs191*clhs45 + clhs192*clhs46 + clhs193*clhs47);
        const double clhs198 =     clhs197*normalslave(1,0)*penalty_parameter;
        const double clhs199 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs200 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs201 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs202 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs203 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs204 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs205 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs206 =     normalslave(2,0)*(-clhs16*clhs189 - clhs17*clhs203 - clhs18*clhs204 - clhs19*clhs205 + clhs199*clhs32 + clhs200*clhs34 + clhs201*clhs36 + clhs202*clhs38 + clhs50) + normalslave(2,1)*(-clhs1*clhs189 + clhs199*clhs40 + clhs200*clhs41 + clhs201*clhs42 + clhs202*clhs43 - clhs203*clhs3 - clhs204*clhs6 - clhs205*clhs9) + normalslave(2,2)*(-clhs12*clhs189 - clhs13*clhs203 - clhs14*clhs204 - clhs15*clhs205 + clhs199*clhs44 + clhs200*clhs45 + clhs201*clhs46 + clhs202*clhs47);
        const double clhs207 =     clhs206*normalslave(2,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs210 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs211 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs216 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs217 =     normalslave(1,0)*(-clhs16*clhs208 - clhs17*clhs214 - clhs18*clhs215 - clhs19*clhs216 + clhs210*clhs32 + clhs211*clhs34 + clhs212*clhs36 + clhs213*clhs38) + normalslave(1,1)*(-clhs1*clhs208 + clhs210*clhs40 + clhs211*clhs41 + clhs212*clhs42 + clhs213*clhs43 - clhs214*clhs3 - clhs215*clhs6 - clhs216*clhs9 + clhs33) + normalslave(1,2)*(-clhs12*clhs208 - clhs13*clhs214 - clhs14*clhs215 - clhs15*clhs216 + clhs210*clhs44 + clhs211*clhs45 + clhs212*clhs46 + clhs213*clhs47);
        const double clhs218 =     clhs217*normalslave(1,0)*penalty_parameter;
        const double clhs219 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs221 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs224 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs226 =     normalslave(2,0)*(-clhs16*clhs209 - clhs17*clhs223 - clhs18*clhs224 - clhs19*clhs225 + clhs219*clhs32 + clhs220*clhs34 + clhs221*clhs36 + clhs222*clhs38) + normalslave(2,1)*(-clhs1*clhs209 + clhs219*clhs40 + clhs220*clhs41 + clhs221*clhs42 + clhs222*clhs43 - clhs223*clhs3 - clhs224*clhs6 - clhs225*clhs9 + clhs50) + normalslave(2,2)*(-clhs12*clhs209 - clhs13*clhs223 - clhs14*clhs224 - clhs15*clhs225 + clhs219*clhs44 + clhs220*clhs45 + clhs221*clhs46 + clhs222*clhs47);
        const double clhs227 =     clhs226*normalslave(2,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs229 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs231 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs232 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs233 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs234 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs235 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs236 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs237 =     normalslave(1,0)*(-clhs16*clhs228 - clhs17*clhs234 - clhs18*clhs235 - clhs19*clhs236 + clhs230*clhs32 + clhs231*clhs34 + clhs232*clhs36 + clhs233*clhs38) + normalslave(1,1)*(-clhs1*clhs228 + clhs230*clhs40 + clhs231*clhs41 + clhs232*clhs42 + clhs233*clhs43 - clhs234*clhs3 - clhs235*clhs6 - clhs236*clhs9) + normalslave(1,2)*(-clhs12*clhs228 - clhs13*clhs234 - clhs14*clhs235 - clhs15*clhs236 + clhs230*clhs44 + clhs231*clhs45 + clhs232*clhs46 + clhs233*clhs47 + clhs33);
        const double clhs238 =     clhs237*normalslave(1,0)*penalty_parameter;
        const double clhs239 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs240 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs241 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs242 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs243 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs244 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs246 =     normalslave(2,0)*(-clhs16*clhs229 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs239*clhs32 + clhs240*clhs34 + clhs241*clhs36 + clhs242*clhs38) + normalslave(2,1)*(-clhs1*clhs229 + clhs239*clhs40 + clhs240*clhs41 + clhs241*clhs42 + clhs242*clhs43 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(2,2)*(-clhs12*clhs229 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs44 + clhs240*clhs45 + clhs241*clhs46 + clhs242*clhs47 + clhs50);
        const double clhs247 =     clhs246*normalslave(2,0)*penalty_parameter;
        const double clhs248 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs249 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs250 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs251 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs254 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs257 =     normalslave(1,0)*(-clhs16*clhs248 - clhs17*clhs254 - clhs18*clhs255 - clhs19*clhs256 + clhs250*clhs32 + clhs251*clhs34 + clhs252*clhs36 + clhs253*clhs38 + clhs35) + normalslave(1,1)*(-clhs1*clhs248 + clhs250*clhs40 + clhs251*clhs41 + clhs252*clhs42 + clhs253*clhs43 - clhs254*clhs3 - clhs255*clhs6 - clhs256*clhs9) + normalslave(1,2)*(-clhs12*clhs248 - clhs13*clhs254 - clhs14*clhs255 - clhs15*clhs256 + clhs250*clhs44 + clhs251*clhs45 + clhs252*clhs46 + clhs253*clhs47);
        const double clhs258 =     clhs257*normalslave(1,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs262 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs264 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs265 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs266 =     normalslave(2,0)*(-clhs16*clhs249 - clhs17*clhs263 - clhs18*clhs264 - clhs19*clhs265 + clhs259*clhs32 + clhs260*clhs34 + clhs261*clhs36 + clhs262*clhs38 + clhs51) + normalslave(2,1)*(-clhs1*clhs249 + clhs259*clhs40 + clhs260*clhs41 + clhs261*clhs42 + clhs262*clhs43 - clhs263*clhs3 - clhs264*clhs6 - clhs265*clhs9) + normalslave(2,2)*(-clhs12*clhs249 - clhs13*clhs263 - clhs14*clhs264 - clhs15*clhs265 + clhs259*clhs44 + clhs260*clhs45 + clhs261*clhs46 + clhs262*clhs47);
        const double clhs267 =     clhs266*normalslave(2,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs269 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs270 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs271 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs272 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs273 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs276 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs277 =     normalslave(1,0)*(-clhs16*clhs268 - clhs17*clhs274 - clhs18*clhs275 - clhs19*clhs276 + clhs270*clhs32 + clhs271*clhs34 + clhs272*clhs36 + clhs273*clhs38) + normalslave(1,1)*(-clhs1*clhs268 + clhs270*clhs40 + clhs271*clhs41 + clhs272*clhs42 + clhs273*clhs43 - clhs274*clhs3 - clhs275*clhs6 - clhs276*clhs9 + clhs35) + normalslave(1,2)*(-clhs12*clhs268 - clhs13*clhs274 - clhs14*clhs275 - clhs15*clhs276 + clhs270*clhs44 + clhs271*clhs45 + clhs272*clhs46 + clhs273*clhs47);
        const double clhs278 =     clhs277*normalslave(1,0)*penalty_parameter;
        const double clhs279 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs280 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs281 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs282 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs283 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs284 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs285 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs286 =     normalslave(2,0)*(-clhs16*clhs269 - clhs17*clhs283 - clhs18*clhs284 - clhs19*clhs285 + clhs279*clhs32 + clhs280*clhs34 + clhs281*clhs36 + clhs282*clhs38) + normalslave(2,1)*(-clhs1*clhs269 + clhs279*clhs40 + clhs280*clhs41 + clhs281*clhs42 + clhs282*clhs43 - clhs283*clhs3 - clhs284*clhs6 - clhs285*clhs9 + clhs51) + normalslave(2,2)*(-clhs12*clhs269 - clhs13*clhs283 - clhs14*clhs284 - clhs15*clhs285 + clhs279*clhs44 + clhs280*clhs45 + clhs281*clhs46 + clhs282*clhs47);
        const double clhs287 =     clhs286*normalslave(2,0)*penalty_parameter;
        const double clhs288 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs289 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs290 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs291 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs292 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs293 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs294 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs295 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs296 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs297 =     normalslave(1,0)*(-clhs16*clhs288 - clhs17*clhs294 - clhs18*clhs295 - clhs19*clhs296 + clhs290*clhs32 + clhs291*clhs34 + clhs292*clhs36 + clhs293*clhs38) + normalslave(1,1)*(-clhs1*clhs288 + clhs290*clhs40 + clhs291*clhs41 + clhs292*clhs42 + clhs293*clhs43 - clhs294*clhs3 - clhs295*clhs6 - clhs296*clhs9) + normalslave(1,2)*(-clhs12*clhs288 - clhs13*clhs294 - clhs14*clhs295 - clhs15*clhs296 + clhs290*clhs44 + clhs291*clhs45 + clhs292*clhs46 + clhs293*clhs47 + clhs35);
        const double clhs298 =     clhs297*normalslave(1,0)*penalty_parameter;
        const double clhs299 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs305 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs306 =     normalslave(2,0)*(-clhs16*clhs289 - clhs17*clhs303 - clhs18*clhs304 - clhs19*clhs305 + clhs299*clhs32 + clhs300*clhs34 + clhs301*clhs36 + clhs302*clhs38) + normalslave(2,1)*(-clhs1*clhs289 + clhs299*clhs40 - clhs3*clhs303 + clhs300*clhs41 + clhs301*clhs42 + clhs302*clhs43 - clhs304*clhs6 - clhs305*clhs9) + normalslave(2,2)*(-clhs12*clhs289 - clhs13*clhs303 - clhs14*clhs304 - clhs15*clhs305 + clhs299*clhs44 + clhs300*clhs45 + clhs301*clhs46 + clhs302*clhs47 + clhs51);
        const double clhs307 =     clhs306*normalslave(2,0)*penalty_parameter;
        const double clhs308 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs309 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs310 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs311 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs312 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs313 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs314 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs315 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs316 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs317 =     normalslave(1,0)*(-clhs16*clhs308 - clhs17*clhs314 - clhs18*clhs315 - clhs19*clhs316 + clhs310*clhs32 + clhs311*clhs34 + clhs312*clhs36 + clhs313*clhs38 + clhs37) + normalslave(1,1)*(-clhs1*clhs308 - clhs3*clhs314 + clhs310*clhs40 + clhs311*clhs41 + clhs312*clhs42 + clhs313*clhs43 - clhs315*clhs6 - clhs316*clhs9) + normalslave(1,2)*(-clhs12*clhs308 - clhs13*clhs314 - clhs14*clhs315 - clhs15*clhs316 + clhs310*clhs44 + clhs311*clhs45 + clhs312*clhs46 + clhs313*clhs47);
        const double clhs318 =     clhs317*normalslave(1,0)*penalty_parameter;
        const double clhs319 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs320 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs321 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs322 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs324 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs325 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs326 =     normalslave(2,0)*(-clhs16*clhs309 - clhs17*clhs323 - clhs18*clhs324 - clhs19*clhs325 + clhs319*clhs32 + clhs320*clhs34 + clhs321*clhs36 + clhs322*clhs38 + clhs52) + normalslave(2,1)*(-clhs1*clhs309 - clhs3*clhs323 + clhs319*clhs40 + clhs320*clhs41 + clhs321*clhs42 + clhs322*clhs43 - clhs324*clhs6 - clhs325*clhs9) + normalslave(2,2)*(-clhs12*clhs309 - clhs13*clhs323 - clhs14*clhs324 - clhs15*clhs325 + clhs319*clhs44 + clhs320*clhs45 + clhs321*clhs46 + clhs322*clhs47);
        const double clhs327 =     clhs326*normalslave(2,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs329 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs330 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs331 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs332 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs333 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs334 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs335 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs336 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs337 =     normalslave(1,0)*(-clhs16*clhs328 - clhs17*clhs334 - clhs18*clhs335 - clhs19*clhs336 + clhs32*clhs330 + clhs331*clhs34 + clhs332*clhs36 + clhs333*clhs38) + normalslave(1,1)*(-clhs1*clhs328 - clhs3*clhs334 + clhs330*clhs40 + clhs331*clhs41 + clhs332*clhs42 + clhs333*clhs43 - clhs335*clhs6 - clhs336*clhs9 + clhs37) + normalslave(1,2)*(-clhs12*clhs328 - clhs13*clhs334 - clhs14*clhs335 - clhs15*clhs336 + clhs330*clhs44 + clhs331*clhs45 + clhs332*clhs46 + clhs333*clhs47);
        const double clhs338 =     clhs337*normalslave(1,0)*penalty_parameter;
        const double clhs339 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs340 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs341 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs342 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs343 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs344 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs345 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs346 =     normalslave(2,0)*(-clhs16*clhs329 - clhs17*clhs343 - clhs18*clhs344 - clhs19*clhs345 + clhs32*clhs339 + clhs34*clhs340 + clhs341*clhs36 + clhs342*clhs38) + normalslave(2,1)*(-clhs1*clhs329 - clhs3*clhs343 + clhs339*clhs40 + clhs340*clhs41 + clhs341*clhs42 + clhs342*clhs43 - clhs344*clhs6 - clhs345*clhs9 + clhs52) + normalslave(2,2)*(-clhs12*clhs329 - clhs13*clhs343 - clhs14*clhs344 - clhs15*clhs345 + clhs339*clhs44 + clhs340*clhs45 + clhs341*clhs46 + clhs342*clhs47);
        const double clhs347 =     clhs346*normalslave(2,0)*penalty_parameter;
        const double clhs348 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs349 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs350 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs351 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs352 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs353 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs354 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs355 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs356 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs357 =     normalslave(1,0)*(-clhs16*clhs348 - clhs17*clhs354 - clhs18*clhs355 - clhs19*clhs356 + clhs32*clhs350 + clhs34*clhs351 + clhs352*clhs36 + clhs353*clhs38) + normalslave(1,1)*(-clhs1*clhs348 - clhs3*clhs354 + clhs350*clhs40 + clhs351*clhs41 + clhs352*clhs42 + clhs353*clhs43 - clhs355*clhs6 - clhs356*clhs9) + normalslave(1,2)*(-clhs12*clhs348 - clhs13*clhs354 - clhs14*clhs355 - clhs15*clhs356 + clhs350*clhs44 + clhs351*clhs45 + clhs352*clhs46 + clhs353*clhs47 + clhs37);
        const double clhs358 =     clhs357*normalslave(1,0)*penalty_parameter;
        const double clhs359 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs360 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs361 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs362 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs363 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs364 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs365 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs366 =     normalslave(2,0)*(-clhs16*clhs349 - clhs17*clhs363 - clhs18*clhs364 - clhs19*clhs365 + clhs32*clhs359 + clhs34*clhs360 + clhs36*clhs361 + clhs362*clhs38) + normalslave(2,1)*(-clhs1*clhs349 - clhs3*clhs363 + clhs359*clhs40 + clhs360*clhs41 + clhs361*clhs42 + clhs362*clhs43 - clhs364*clhs6 - clhs365*clhs9) + normalslave(2,2)*(-clhs12*clhs349 - clhs13*clhs363 - clhs14*clhs364 - clhs15*clhs365 + clhs359*clhs44 + clhs360*clhs45 + clhs361*clhs46 + clhs362*clhs47 + clhs52);
        const double clhs367 =     clhs366*normalslave(2,0)*penalty_parameter;
        const double clhs368 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs369 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs370 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs371 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs372 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs373 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs374 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs375 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs376 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs377 =     normalslave(1,0)*(-clhs16*clhs368 - clhs17*clhs374 - clhs18*clhs375 - clhs19*clhs376 + clhs32*clhs370 + clhs34*clhs371 + clhs36*clhs372 + clhs373*clhs38 + clhs39) + normalslave(1,1)*(-clhs1*clhs368 - clhs3*clhs374 + clhs370*clhs40 + clhs371*clhs41 + clhs372*clhs42 + clhs373*clhs43 - clhs375*clhs6 - clhs376*clhs9) + normalslave(1,2)*(-clhs12*clhs368 - clhs13*clhs374 - clhs14*clhs375 - clhs15*clhs376 + clhs370*clhs44 + clhs371*clhs45 + clhs372*clhs46 + clhs373*clhs47);
        const double clhs378 =     clhs377*normalslave(1,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs380 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs381 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs382 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs383 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs384 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs385 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs386 =     normalslave(2,0)*(-clhs16*clhs369 - clhs17*clhs383 - clhs18*clhs384 - clhs19*clhs385 + clhs32*clhs379 + clhs34*clhs380 + clhs36*clhs381 + clhs38*clhs382 + clhs53) + normalslave(2,1)*(-clhs1*clhs369 - clhs3*clhs383 + clhs379*clhs40 + clhs380*clhs41 + clhs381*clhs42 + clhs382*clhs43 - clhs384*clhs6 - clhs385*clhs9) + normalslave(2,2)*(-clhs12*clhs369 - clhs13*clhs383 - clhs14*clhs384 - clhs15*clhs385 + clhs379*clhs44 + clhs380*clhs45 + clhs381*clhs46 + clhs382*clhs47);
        const double clhs387 =     clhs386*normalslave(2,0)*penalty_parameter;
        const double clhs388 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs389 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs390 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs391 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs392 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs393 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs394 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs395 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs396 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs397 =     normalslave(1,0)*(-clhs16*clhs388 - clhs17*clhs394 - clhs18*clhs395 - clhs19*clhs396 + clhs32*clhs390 + clhs34*clhs391 + clhs36*clhs392 + clhs38*clhs393) + normalslave(1,1)*(-clhs1*clhs388 - clhs3*clhs394 + clhs39 + clhs390*clhs40 + clhs391*clhs41 + clhs392*clhs42 + clhs393*clhs43 - clhs395*clhs6 - clhs396*clhs9) + normalslave(1,2)*(-clhs12*clhs388 - clhs13*clhs394 - clhs14*clhs395 - clhs15*clhs396 + clhs390*clhs44 + clhs391*clhs45 + clhs392*clhs46 + clhs393*clhs47);
        const double clhs398 =     clhs397*normalslave(1,0)*penalty_parameter;
        const double clhs399 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs400 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs401 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs402 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs403 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs404 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs405 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs406 =     normalslave(2,0)*(-clhs16*clhs389 - clhs17*clhs403 - clhs18*clhs404 - clhs19*clhs405 + clhs32*clhs399 + clhs34*clhs400 + clhs36*clhs401 + clhs38*clhs402) + normalslave(2,1)*(-clhs1*clhs389 - clhs3*clhs403 + clhs399*clhs40 + clhs400*clhs41 + clhs401*clhs42 + clhs402*clhs43 - clhs404*clhs6 - clhs405*clhs9 + clhs53) + normalslave(2,2)*(-clhs12*clhs389 - clhs13*clhs403 - clhs14*clhs404 - clhs15*clhs405 + clhs399*clhs44 + clhs400*clhs45 + clhs401*clhs46 + clhs402*clhs47);
        const double clhs407 =     clhs406*normalslave(2,0)*penalty_parameter;
        const double clhs408 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs409 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs410 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs411 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs412 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs413 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs414 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs415 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs416 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs417 =     normalslave(1,0)*(-clhs16*clhs408 - clhs17*clhs414 - clhs18*clhs415 - clhs19*clhs416 + clhs32*clhs410 + clhs34*clhs411 + clhs36*clhs412 + clhs38*clhs413) + normalslave(1,1)*(-clhs1*clhs408 - clhs3*clhs414 + clhs40*clhs410 + clhs41*clhs411 + clhs412*clhs42 + clhs413*clhs43 - clhs415*clhs6 - clhs416*clhs9) + normalslave(1,2)*(-clhs12*clhs408 - clhs13*clhs414 - clhs14*clhs415 - clhs15*clhs416 + clhs39 + clhs410*clhs44 + clhs411*clhs45 + clhs412*clhs46 + clhs413*clhs47);
        const double clhs418 =     clhs417*normalslave(1,0)*penalty_parameter;
        const double clhs419 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs420 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs421 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs422 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs423 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs424 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs425 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs426 =     normalslave(2,0)*(-clhs16*clhs409 - clhs17*clhs423 - clhs18*clhs424 - clhs19*clhs425 + clhs32*clhs419 + clhs34*clhs420 + clhs36*clhs421 + clhs38*clhs422) + normalslave(2,1)*(-clhs1*clhs409 - clhs3*clhs423 + clhs40*clhs419 + clhs41*clhs420 + clhs42*clhs421 + clhs422*clhs43 - clhs424*clhs6 - clhs425*clhs9) + normalslave(2,2)*(-clhs12*clhs409 - clhs13*clhs423 - clhs14*clhs424 - clhs15*clhs425 + clhs419*clhs44 + clhs420*clhs45 + clhs421*clhs46 + clhs422*clhs47 + clhs53);
        const double clhs427 =     clhs426*normalslave(2,0)*penalty_parameter;
        const double clhs428 =     normalslave(1,0)*scale_factor;
        const double clhs429 =     normalslave(2,0)*scale_factor;
        const double clhs430 =     clhs20*normalslave(1,1)*penalty_parameter;
        const double clhs431 =     clhs30*normalslave(2,1)*penalty_parameter;
        const double clhs432 =     clhs48*normalslave(1,1);
        const double clhs433 =     clhs54*normalslave(2,1);
        const double clhs434 =     clhs60*normalslave(1,1)*penalty_parameter;
        const double clhs435 =     clhs66*normalslave(2,1)*penalty_parameter;
        const double clhs436 =     clhs72*normalslave(1,1)*penalty_parameter;
        const double clhs437 =     clhs78*normalslave(2,1)*penalty_parameter;
        const double clhs438 =     clhs84*normalslave(1,1)*penalty_parameter;
        const double clhs439 =     clhs90*normalslave(2,1)*penalty_parameter;
        const double clhs440 =     clhs96*normalslave(1,1)*penalty_parameter;
        const double clhs441 =     clhs102*normalslave(2,1)*penalty_parameter;
        const double clhs442 =     clhs108*normalslave(1,1)*penalty_parameter;
        const double clhs443 =     clhs114*normalslave(2,1)*penalty_parameter;
        const double clhs444 =     clhs120*normalslave(1,1)*penalty_parameter;
        const double clhs445 =     clhs126*normalslave(2,1)*penalty_parameter;
        const double clhs446 =     clhs132*normalslave(1,1)*penalty_parameter;
        const double clhs447 =     clhs138*normalslave(2,1)*penalty_parameter;
        const double clhs448 =     clhs144*normalslave(1,1)*penalty_parameter;
        const double clhs449 =     clhs150*normalslave(2,1)*penalty_parameter;
        const double clhs450 =     clhs156*normalslave(1,1)*penalty_parameter;
        const double clhs451 =     clhs162*normalslave(2,1)*penalty_parameter;
        const double clhs452 =     clhs168*normalslave(1,1)*penalty_parameter;
        const double clhs453 =     clhs174*normalslave(2,1)*penalty_parameter;
        const double clhs454 =     clhs180*normalslave(1,1)*penalty_parameter;
        const double clhs455 =     clhs186*normalslave(2,1)*penalty_parameter;
        const double clhs456 =     clhs197*normalslave(1,1)*penalty_parameter;
        const double clhs457 =     clhs206*normalslave(2,1)*penalty_parameter;
        const double clhs458 =     clhs217*normalslave(1,1)*penalty_parameter;
        const double clhs459 =     clhs226*normalslave(2,1)*penalty_parameter;
        const double clhs460 =     clhs237*normalslave(1,1)*penalty_parameter;
        const double clhs461 =     clhs246*normalslave(2,1)*penalty_parameter;
        const double clhs462 =     clhs257*normalslave(1,1)*penalty_parameter;
        const double clhs463 =     clhs266*normalslave(2,1)*penalty_parameter;
        const double clhs464 =     clhs277*normalslave(1,1)*penalty_parameter;
        const double clhs465 =     clhs286*normalslave(2,1)*penalty_parameter;
        const double clhs466 =     clhs297*normalslave(1,1)*penalty_parameter;
        const double clhs467 =     clhs306*normalslave(2,1)*penalty_parameter;
        const double clhs468 =     clhs317*normalslave(1,1)*penalty_parameter;
        const double clhs469 =     clhs326*normalslave(2,1)*penalty_parameter;
        const double clhs470 =     clhs337*normalslave(1,1)*penalty_parameter;
        const double clhs471 =     clhs346*normalslave(2,1)*penalty_parameter;
        const double clhs472 =     clhs357*normalslave(1,1)*penalty_parameter;
        const double clhs473 =     clhs366*normalslave(2,1)*penalty_parameter;
        const double clhs474 =     clhs377*normalslave(1,1)*penalty_parameter;
        const double clhs475 =     clhs386*normalslave(2,1)*penalty_parameter;
        const double clhs476 =     clhs397*normalslave(1,1)*penalty_parameter;
        const double clhs477 =     clhs406*normalslave(2,1)*penalty_parameter;
        const double clhs478 =     clhs417*normalslave(1,1)*penalty_parameter;
        const double clhs479 =     clhs426*normalslave(2,1)*penalty_parameter;
        const double clhs480 =     normalslave(1,1)*scale_factor;
        const double clhs481 =     normalslave(2,1)*scale_factor;
        const double clhs482 =     clhs20*normalslave(1,2)*penalty_parameter;
        const double clhs483 =     clhs30*normalslave(2,2)*penalty_parameter;
        const double clhs484 =     clhs48*normalslave(1,2);
        const double clhs485 =     clhs54*normalslave(2,2);
        const double clhs486 =     clhs60*normalslave(1,2)*penalty_parameter;
        const double clhs487 =     clhs66*normalslave(2,2)*penalty_parameter;
        const double clhs488 =     clhs72*normalslave(1,2)*penalty_parameter;
        const double clhs489 =     clhs78*normalslave(2,2)*penalty_parameter;
        const double clhs490 =     clhs84*normalslave(1,2)*penalty_parameter;
        const double clhs491 =     clhs90*normalslave(2,2)*penalty_parameter;
        const double clhs492 =     clhs96*normalslave(1,2)*penalty_parameter;
        const double clhs493 =     clhs102*normalslave(2,2)*penalty_parameter;
        const double clhs494 =     clhs108*normalslave(1,2)*penalty_parameter;
        const double clhs495 =     clhs114*normalslave(2,2)*penalty_parameter;
        const double clhs496 =     clhs120*normalslave(1,2)*penalty_parameter;
        const double clhs497 =     clhs126*normalslave(2,2)*penalty_parameter;
        const double clhs498 =     clhs132*normalslave(1,2)*penalty_parameter;
        const double clhs499 =     clhs138*normalslave(2,2)*penalty_parameter;
        const double clhs500 =     clhs144*normalslave(1,2)*penalty_parameter;
        const double clhs501 =     clhs150*normalslave(2,2)*penalty_parameter;
        const double clhs502 =     clhs156*normalslave(1,2)*penalty_parameter;
        const double clhs503 =     clhs162*normalslave(2,2)*penalty_parameter;
        const double clhs504 =     clhs168*normalslave(1,2)*penalty_parameter;
        const double clhs505 =     clhs174*normalslave(2,2)*penalty_parameter;
        const double clhs506 =     clhs180*normalslave(1,2)*penalty_parameter;
        const double clhs507 =     clhs186*normalslave(2,2)*penalty_parameter;
        const double clhs508 =     clhs197*normalslave(1,2)*penalty_parameter;
        const double clhs509 =     clhs206*normalslave(2,2)*penalty_parameter;
        const double clhs510 =     clhs217*normalslave(1,2)*penalty_parameter;
        const double clhs511 =     clhs226*normalslave(2,2)*penalty_parameter;
        const double clhs512 =     clhs237*normalslave(1,2)*penalty_parameter;
        const double clhs513 =     clhs246*normalslave(2,2)*penalty_parameter;
        const double clhs514 =     clhs257*normalslave(1,2)*penalty_parameter;
        const double clhs515 =     clhs266*normalslave(2,2)*penalty_parameter;
        const double clhs516 =     clhs277*normalslave(1,2)*penalty_parameter;
        const double clhs517 =     clhs286*normalslave(2,2)*penalty_parameter;
        const double clhs518 =     clhs297*normalslave(1,2)*penalty_parameter;
        const double clhs519 =     clhs306*normalslave(2,2)*penalty_parameter;
        const double clhs520 =     clhs317*normalslave(1,2)*penalty_parameter;
        const double clhs521 =     clhs326*normalslave(2,2)*penalty_parameter;
        const double clhs522 =     clhs337*normalslave(1,2)*penalty_parameter;
        const double clhs523 =     clhs346*normalslave(2,2)*penalty_parameter;
        const double clhs524 =     clhs357*normalslave(1,2)*penalty_parameter;
        const double clhs525 =     clhs366*normalslave(2,2)*penalty_parameter;
        const double clhs526 =     clhs377*normalslave(1,2)*penalty_parameter;
        const double clhs527 =     clhs386*normalslave(2,2)*penalty_parameter;
        const double clhs528 =     clhs397*normalslave(1,2)*penalty_parameter;
        const double clhs529 =     clhs406*normalslave(2,2)*penalty_parameter;
        const double clhs530 =     clhs417*normalslave(1,2)*penalty_parameter;
        const double clhs531 =     clhs426*normalslave(2,2)*penalty_parameter;
        const double clhs532 =     normalslave(1,2)*scale_factor;
        const double clhs533 =     normalslave(2,2)*scale_factor;
        const double clhs534 =     clhs20*normalslave(1,0);
        const double clhs535 =     clhs30*normalslave(2,0);
        const double clhs536 =     clhs60*normalslave(1,0);
        const double clhs537 =     clhs66*normalslave(2,0);
        const double clhs538 =     clhs72*normalslave(1,0);
        const double clhs539 =     clhs78*normalslave(2,0);
        const double clhs540 =     clhs84*normalslave(1,0);
        const double clhs541 =     clhs90*normalslave(2,0);
        const double clhs542 =     clhs96*normalslave(1,0);
        const double clhs543 =     clhs102*normalslave(2,0);
        const double clhs544 =     clhs108*normalslave(1,0);
        const double clhs545 =     clhs114*normalslave(2,0);
        const double clhs546 =     clhs120*normalslave(1,0);
        const double clhs547 =     clhs126*normalslave(2,0);
        const double clhs548 =     clhs132*normalslave(1,0);
        const double clhs549 =     clhs138*normalslave(2,0);
        const double clhs550 =     clhs144*normalslave(1,0);
        const double clhs551 =     clhs150*normalslave(2,0);
        const double clhs552 =     clhs156*normalslave(1,0);
        const double clhs553 =     clhs162*normalslave(2,0);
        const double clhs554 =     clhs168*normalslave(1,0);
        const double clhs555 =     clhs174*normalslave(2,0);
        const double clhs556 =     clhs180*normalslave(1,0);
        const double clhs557 =     clhs186*normalslave(2,0);
        const double clhs558 =     clhs20*normalslave(1,1);
        const double clhs559 =     clhs30*normalslave(2,1);
        const double clhs560 =     clhs60*normalslave(1,1);
        const double clhs561 =     clhs66*normalslave(2,1);
        const double clhs562 =     clhs72*normalslave(1,1);
        const double clhs563 =     clhs78*normalslave(2,1);
        const double clhs564 =     clhs84*normalslave(1,1);
        const double clhs565 =     clhs90*normalslave(2,1);
        const double clhs566 =     clhs96*normalslave(1,1);
        const double clhs567 =     clhs102*normalslave(2,1);
        const double clhs568 =     clhs108*normalslave(1,1);
        const double clhs569 =     clhs114*normalslave(2,1);
        const double clhs570 =     clhs120*normalslave(1,1);
        const double clhs571 =     clhs126*normalslave(2,1);
        const double clhs572 =     clhs132*normalslave(1,1);
        const double clhs573 =     clhs138*normalslave(2,1);
        const double clhs574 =     clhs144*normalslave(1,1);
        const double clhs575 =     clhs150*normalslave(2,1);
        const double clhs576 =     clhs156*normalslave(1,1);
        const double clhs577 =     clhs162*normalslave(2,1);
        const double clhs578 =     clhs168*normalslave(1,1);
        const double clhs579 =     clhs174*normalslave(2,1);
        const double clhs580 =     clhs180*normalslave(1,1);
        const double clhs581 =     clhs186*normalslave(2,1);
        const double clhs582 =     clhs20*normalslave(1,2);
        const double clhs583 =     clhs30*normalslave(2,2);
        const double clhs584 =     clhs60*normalslave(1,2);
        const double clhs585 =     clhs66*normalslave(2,2);
        const double clhs586 =     clhs72*normalslave(1,2);
        const double clhs587 =     clhs78*normalslave(2,2);
        const double clhs588 =     clhs84*normalslave(1,2);
        const double clhs589 =     clhs90*normalslave(2,2);
        const double clhs590 =     clhs96*normalslave(1,2);
        const double clhs591 =     clhs102*normalslave(2,2);
        const double clhs592 =     clhs108*normalslave(1,2);
        const double clhs593 =     clhs114*normalslave(2,2);
        const double clhs594 =     clhs120*normalslave(1,2);
        const double clhs595 =     clhs126*normalslave(2,2);
        const double clhs596 =     clhs132*normalslave(1,2);
        const double clhs597 =     clhs138*normalslave(2,2);
        const double clhs598 =     clhs144*normalslave(1,2);
        const double clhs599 =     clhs150*normalslave(2,2);
        const double clhs600 =     clhs156*normalslave(1,2);
        const double clhs601 =     clhs162*normalslave(2,2);
        const double clhs602 =     clhs168*normalslave(1,2);
        const double clhs603 =     clhs174*normalslave(2,2);
        const double clhs604 =     clhs180*normalslave(1,2);
        const double clhs605 =     clhs186*normalslave(2,2);
        const double clhs606 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs49 - clhs22*clhs31 + clhs23*clhs55;
        lhs(0,1)=-clhs0*clhs61 - clhs22*clhs67 + clhs49*clhs56 + clhs55*clhs62;
        lhs(0,2)=-clhs0*clhs73 - clhs22*clhs79 + clhs49*clhs68 + clhs55*clhs74;
        lhs(0,3)=-clhs0*clhs85 - clhs22*clhs91 + clhs49*clhs80 + clhs55*clhs86;
        lhs(0,4)=-clhs0*clhs97 - clhs103*clhs22 + clhs49*clhs92 + clhs55*clhs98;
        lhs(0,5)=-clhs0*clhs109 + clhs104*clhs49 + clhs110*clhs55 - clhs115*clhs22;
        lhs(0,6)=-clhs0*clhs121 + clhs116*clhs49 + clhs122*clhs55 - clhs127*clhs22;
        lhs(0,7)=-clhs0*clhs133 + clhs128*clhs49 + clhs134*clhs55 - clhs139*clhs22;
        lhs(0,8)=-clhs0*clhs145 + clhs140*clhs49 + clhs146*clhs55 - clhs151*clhs22;
        lhs(0,9)=-clhs0*clhs157 + clhs152*clhs49 + clhs158*clhs55 - clhs163*clhs22;
        lhs(0,10)=-clhs0*clhs169 + clhs164*clhs49 + clhs170*clhs55 - clhs175*clhs22;
        lhs(0,11)=-clhs0*clhs181 + clhs176*clhs49 + clhs182*clhs55 - clhs187*clhs22;
        lhs(0,12)=clhs0*clhs198 + clhs188*clhs49 + clhs189*clhs55 + clhs207*clhs22;
        lhs(0,13)=clhs0*clhs218 + clhs208*clhs49 + clhs209*clhs55 + clhs22*clhs227;
        lhs(0,14)=clhs0*clhs238 + clhs22*clhs247 + clhs228*clhs49 + clhs229*clhs55;
        lhs(0,15)=clhs0*clhs258 + clhs22*clhs267 + clhs248*clhs49 + clhs249*clhs55;
        lhs(0,16)=clhs0*clhs278 + clhs22*clhs287 + clhs268*clhs49 + clhs269*clhs55;
        lhs(0,17)=clhs0*clhs298 + clhs22*clhs307 + clhs288*clhs49 + clhs289*clhs55;
        lhs(0,18)=clhs0*clhs318 + clhs22*clhs327 + clhs308*clhs49 + clhs309*clhs55;
        lhs(0,19)=clhs0*clhs338 + clhs22*clhs347 + clhs328*clhs49 + clhs329*clhs55;
        lhs(0,20)=clhs0*clhs358 + clhs22*clhs367 + clhs348*clhs49 + clhs349*clhs55;
        lhs(0,21)=clhs0*clhs378 + clhs22*clhs387 + clhs368*clhs49 + clhs369*clhs55;
        lhs(0,22)=clhs0*clhs398 + clhs22*clhs407 + clhs388*clhs49 + clhs389*clhs55;
        lhs(0,23)=clhs0*clhs418 + clhs22*clhs427 + clhs408*clhs49 + clhs409*clhs55;
        lhs(0,24)=0;
        lhs(0,25)=clhs0*clhs428;
        lhs(0,26)=clhs22*clhs429;
        lhs(0,27)=0;
        lhs(1,0)=-clhs0*clhs430 + clhs2*clhs432 - clhs22*clhs431 + clhs23*clhs433;
        lhs(1,1)=-clhs0*clhs434 - clhs22*clhs435 + clhs432*clhs56 + clhs433*clhs62;
        lhs(1,2)=-clhs0*clhs436 - clhs22*clhs437 + clhs432*clhs68 + clhs433*clhs74;
        lhs(1,3)=-clhs0*clhs438 - clhs22*clhs439 + clhs432*clhs80 + clhs433*clhs86;
        lhs(1,4)=-clhs0*clhs440 - clhs22*clhs441 + clhs432*clhs92 + clhs433*clhs98;
        lhs(1,5)=-clhs0*clhs442 + clhs104*clhs432 + clhs110*clhs433 - clhs22*clhs443;
        lhs(1,6)=-clhs0*clhs444 + clhs116*clhs432 + clhs122*clhs433 - clhs22*clhs445;
        lhs(1,7)=-clhs0*clhs446 + clhs128*clhs432 + clhs134*clhs433 - clhs22*clhs447;
        lhs(1,8)=-clhs0*clhs448 + clhs140*clhs432 + clhs146*clhs433 - clhs22*clhs449;
        lhs(1,9)=-clhs0*clhs450 + clhs152*clhs432 + clhs158*clhs433 - clhs22*clhs451;
        lhs(1,10)=-clhs0*clhs452 + clhs164*clhs432 + clhs170*clhs433 - clhs22*clhs453;
        lhs(1,11)=-clhs0*clhs454 + clhs176*clhs432 + clhs182*clhs433 - clhs22*clhs455;
        lhs(1,12)=clhs0*clhs456 + clhs188*clhs432 + clhs189*clhs433 + clhs22*clhs457;
        lhs(1,13)=clhs0*clhs458 + clhs208*clhs432 + clhs209*clhs433 + clhs22*clhs459;
        lhs(1,14)=clhs0*clhs460 + clhs22*clhs461 + clhs228*clhs432 + clhs229*clhs433;
        lhs(1,15)=clhs0*clhs462 + clhs22*clhs463 + clhs248*clhs432 + clhs249*clhs433;
        lhs(1,16)=clhs0*clhs464 + clhs22*clhs465 + clhs268*clhs432 + clhs269*clhs433;
        lhs(1,17)=clhs0*clhs466 + clhs22*clhs467 + clhs288*clhs432 + clhs289*clhs433;
        lhs(1,18)=clhs0*clhs468 + clhs22*clhs469 + clhs308*clhs432 + clhs309*clhs433;
        lhs(1,19)=clhs0*clhs470 + clhs22*clhs471 + clhs328*clhs432 + clhs329*clhs433;
        lhs(1,20)=clhs0*clhs472 + clhs22*clhs473 + clhs348*clhs432 + clhs349*clhs433;
        lhs(1,21)=clhs0*clhs474 + clhs22*clhs475 + clhs368*clhs432 + clhs369*clhs433;
        lhs(1,22)=clhs0*clhs476 + clhs22*clhs477 + clhs388*clhs432 + clhs389*clhs433;
        lhs(1,23)=clhs0*clhs478 + clhs22*clhs479 + clhs408*clhs432 + clhs409*clhs433;
        lhs(1,24)=0;
        lhs(1,25)=clhs0*clhs480;
        lhs(1,26)=clhs22*clhs481;
        lhs(1,27)=0;
        lhs(2,0)=-clhs0*clhs482 + clhs2*clhs484 - clhs22*clhs483 + clhs23*clhs485;
        lhs(2,1)=-clhs0*clhs486 - clhs22*clhs487 + clhs484*clhs56 + clhs485*clhs62;
        lhs(2,2)=-clhs0*clhs488 - clhs22*clhs489 + clhs484*clhs68 + clhs485*clhs74;
        lhs(2,3)=-clhs0*clhs490 - clhs22*clhs491 + clhs484*clhs80 + clhs485*clhs86;
        lhs(2,4)=-clhs0*clhs492 - clhs22*clhs493 + clhs484*clhs92 + clhs485*clhs98;
        lhs(2,5)=-clhs0*clhs494 + clhs104*clhs484 + clhs110*clhs485 - clhs22*clhs495;
        lhs(2,6)=-clhs0*clhs496 + clhs116*clhs484 + clhs122*clhs485 - clhs22*clhs497;
        lhs(2,7)=-clhs0*clhs498 + clhs128*clhs484 + clhs134*clhs485 - clhs22*clhs499;
        lhs(2,8)=-clhs0*clhs500 + clhs140*clhs484 + clhs146*clhs485 - clhs22*clhs501;
        lhs(2,9)=-clhs0*clhs502 + clhs152*clhs484 + clhs158*clhs485 - clhs22*clhs503;
        lhs(2,10)=-clhs0*clhs504 + clhs164*clhs484 + clhs170*clhs485 - clhs22*clhs505;
        lhs(2,11)=-clhs0*clhs506 + clhs176*clhs484 + clhs182*clhs485 - clhs22*clhs507;
        lhs(2,12)=clhs0*clhs508 + clhs188*clhs484 + clhs189*clhs485 + clhs22*clhs509;
        lhs(2,13)=clhs0*clhs510 + clhs208*clhs484 + clhs209*clhs485 + clhs22*clhs511;
        lhs(2,14)=clhs0*clhs512 + clhs22*clhs513 + clhs228*clhs484 + clhs229*clhs485;
        lhs(2,15)=clhs0*clhs514 + clhs22*clhs515 + clhs248*clhs484 + clhs249*clhs485;
        lhs(2,16)=clhs0*clhs516 + clhs22*clhs517 + clhs268*clhs484 + clhs269*clhs485;
        lhs(2,17)=clhs0*clhs518 + clhs22*clhs519 + clhs288*clhs484 + clhs289*clhs485;
        lhs(2,18)=clhs0*clhs520 + clhs22*clhs521 + clhs308*clhs484 + clhs309*clhs485;
        lhs(2,19)=clhs0*clhs522 + clhs22*clhs523 + clhs328*clhs484 + clhs329*clhs485;
        lhs(2,20)=clhs0*clhs524 + clhs22*clhs525 + clhs348*clhs484 + clhs349*clhs485;
        lhs(2,21)=clhs0*clhs526 + clhs22*clhs527 + clhs368*clhs484 + clhs369*clhs485;
        lhs(2,22)=clhs0*clhs528 + clhs22*clhs529 + clhs388*clhs484 + clhs389*clhs485;
        lhs(2,23)=clhs0*clhs530 + clhs22*clhs531 + clhs408*clhs484 + clhs409*clhs485;
        lhs(2,24)=0;
        lhs(2,25)=clhs0*clhs532;
        lhs(2,26)=clhs22*clhs533;
        lhs(2,27)=0;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs55 + clhs49*clhs5;
        lhs(3,1)=-clhs24*clhs67 - clhs4*clhs61 + clhs49*clhs57 + clhs55*clhs63;
        lhs(3,2)=-clhs24*clhs79 - clhs4*clhs73 + clhs49*clhs69 + clhs55*clhs75;
        lhs(3,3)=-clhs24*clhs91 - clhs4*clhs85 + clhs49*clhs81 + clhs55*clhs87;
        lhs(3,4)=-clhs103*clhs24 - clhs4*clhs97 + clhs49*clhs93 + clhs55*clhs99;
        lhs(3,5)=clhs105*clhs49 - clhs109*clhs4 + clhs111*clhs55 - clhs115*clhs24;
        lhs(3,6)=clhs117*clhs49 - clhs121*clhs4 + clhs123*clhs55 - clhs127*clhs24;
        lhs(3,7)=clhs129*clhs49 - clhs133*clhs4 + clhs135*clhs55 - clhs139*clhs24;
        lhs(3,8)=clhs141*clhs49 - clhs145*clhs4 + clhs147*clhs55 - clhs151*clhs24;
        lhs(3,9)=clhs153*clhs49 - clhs157*clhs4 + clhs159*clhs55 - clhs163*clhs24;
        lhs(3,10)=clhs165*clhs49 - clhs169*clhs4 + clhs171*clhs55 - clhs175*clhs24;
        lhs(3,11)=clhs177*clhs49 - clhs181*clhs4 + clhs183*clhs55 - clhs187*clhs24;
        lhs(3,12)=clhs194*clhs49 + clhs198*clhs4 + clhs203*clhs55 + clhs207*clhs24;
        lhs(3,13)=clhs214*clhs49 + clhs218*clhs4 + clhs223*clhs55 + clhs227*clhs24;
        lhs(3,14)=clhs234*clhs49 + clhs238*clhs4 + clhs24*clhs247 + clhs243*clhs55;
        lhs(3,15)=clhs24*clhs267 + clhs254*clhs49 + clhs258*clhs4 + clhs263*clhs55;
        lhs(3,16)=clhs24*clhs287 + clhs274*clhs49 + clhs278*clhs4 + clhs283*clhs55;
        lhs(3,17)=clhs24*clhs307 + clhs294*clhs49 + clhs298*clhs4 + clhs303*clhs55;
        lhs(3,18)=clhs24*clhs327 + clhs314*clhs49 + clhs318*clhs4 + clhs323*clhs55;
        lhs(3,19)=clhs24*clhs347 + clhs334*clhs49 + clhs338*clhs4 + clhs343*clhs55;
        lhs(3,20)=clhs24*clhs367 + clhs354*clhs49 + clhs358*clhs4 + clhs363*clhs55;
        lhs(3,21)=clhs24*clhs387 + clhs374*clhs49 + clhs378*clhs4 + clhs383*clhs55;
        lhs(3,22)=clhs24*clhs407 + clhs394*clhs49 + clhs398*clhs4 + clhs403*clhs55;
        lhs(3,23)=clhs24*clhs427 + clhs4*clhs418 + clhs414*clhs49 + clhs423*clhs55;
        lhs(3,24)=0;
        lhs(3,25)=clhs4*clhs428;
        lhs(3,26)=clhs24*clhs429;
        lhs(3,27)=0;
        lhs(4,0)=-clhs24*clhs431 + clhs25*clhs433 - clhs4*clhs430 + clhs432*clhs5;
        lhs(4,1)=-clhs24*clhs435 - clhs4*clhs434 + clhs432*clhs57 + clhs433*clhs63;
        lhs(4,2)=-clhs24*clhs437 - clhs4*clhs436 + clhs432*clhs69 + clhs433*clhs75;
        lhs(4,3)=-clhs24*clhs439 - clhs4*clhs438 + clhs432*clhs81 + clhs433*clhs87;
        lhs(4,4)=-clhs24*clhs441 - clhs4*clhs440 + clhs432*clhs93 + clhs433*clhs99;
        lhs(4,5)=clhs105*clhs432 + clhs111*clhs433 - clhs24*clhs443 - clhs4*clhs442;
        lhs(4,6)=clhs117*clhs432 + clhs123*clhs433 - clhs24*clhs445 - clhs4*clhs444;
        lhs(4,7)=clhs129*clhs432 + clhs135*clhs433 - clhs24*clhs447 - clhs4*clhs446;
        lhs(4,8)=clhs141*clhs432 + clhs147*clhs433 - clhs24*clhs449 - clhs4*clhs448;
        lhs(4,9)=clhs153*clhs432 + clhs159*clhs433 - clhs24*clhs451 - clhs4*clhs450;
        lhs(4,10)=clhs165*clhs432 + clhs171*clhs433 - clhs24*clhs453 - clhs4*clhs452;
        lhs(4,11)=clhs177*clhs432 + clhs183*clhs433 - clhs24*clhs455 - clhs4*clhs454;
        lhs(4,12)=clhs194*clhs432 + clhs203*clhs433 + clhs24*clhs457 + clhs4*clhs456;
        lhs(4,13)=clhs214*clhs432 + clhs223*clhs433 + clhs24*clhs459 + clhs4*clhs458;
        lhs(4,14)=clhs234*clhs432 + clhs24*clhs461 + clhs243*clhs433 + clhs4*clhs460;
        lhs(4,15)=clhs24*clhs463 + clhs254*clhs432 + clhs263*clhs433 + clhs4*clhs462;
        lhs(4,16)=clhs24*clhs465 + clhs274*clhs432 + clhs283*clhs433 + clhs4*clhs464;
        lhs(4,17)=clhs24*clhs467 + clhs294*clhs432 + clhs303*clhs433 + clhs4*clhs466;
        lhs(4,18)=clhs24*clhs469 + clhs314*clhs432 + clhs323*clhs433 + clhs4*clhs468;
        lhs(4,19)=clhs24*clhs471 + clhs334*clhs432 + clhs343*clhs433 + clhs4*clhs470;
        lhs(4,20)=clhs24*clhs473 + clhs354*clhs432 + clhs363*clhs433 + clhs4*clhs472;
        lhs(4,21)=clhs24*clhs475 + clhs374*clhs432 + clhs383*clhs433 + clhs4*clhs474;
        lhs(4,22)=clhs24*clhs477 + clhs394*clhs432 + clhs4*clhs476 + clhs403*clhs433;
        lhs(4,23)=clhs24*clhs479 + clhs4*clhs478 + clhs414*clhs432 + clhs423*clhs433;
        lhs(4,24)=0;
        lhs(4,25)=clhs4*clhs480;
        lhs(4,26)=clhs24*clhs481;
        lhs(4,27)=0;
        lhs(5,0)=-clhs24*clhs483 + clhs25*clhs485 - clhs4*clhs482 + clhs484*clhs5;
        lhs(5,1)=-clhs24*clhs487 - clhs4*clhs486 + clhs484*clhs57 + clhs485*clhs63;
        lhs(5,2)=-clhs24*clhs489 - clhs4*clhs488 + clhs484*clhs69 + clhs485*clhs75;
        lhs(5,3)=-clhs24*clhs491 - clhs4*clhs490 + clhs484*clhs81 + clhs485*clhs87;
        lhs(5,4)=-clhs24*clhs493 - clhs4*clhs492 + clhs484*clhs93 + clhs485*clhs99;
        lhs(5,5)=clhs105*clhs484 + clhs111*clhs485 - clhs24*clhs495 - clhs4*clhs494;
        lhs(5,6)=clhs117*clhs484 + clhs123*clhs485 - clhs24*clhs497 - clhs4*clhs496;
        lhs(5,7)=clhs129*clhs484 + clhs135*clhs485 - clhs24*clhs499 - clhs4*clhs498;
        lhs(5,8)=clhs141*clhs484 + clhs147*clhs485 - clhs24*clhs501 - clhs4*clhs500;
        lhs(5,9)=clhs153*clhs484 + clhs159*clhs485 - clhs24*clhs503 - clhs4*clhs502;
        lhs(5,10)=clhs165*clhs484 + clhs171*clhs485 - clhs24*clhs505 - clhs4*clhs504;
        lhs(5,11)=clhs177*clhs484 + clhs183*clhs485 - clhs24*clhs507 - clhs4*clhs506;
        lhs(5,12)=clhs194*clhs484 + clhs203*clhs485 + clhs24*clhs509 + clhs4*clhs508;
        lhs(5,13)=clhs214*clhs484 + clhs223*clhs485 + clhs24*clhs511 + clhs4*clhs510;
        lhs(5,14)=clhs234*clhs484 + clhs24*clhs513 + clhs243*clhs485 + clhs4*clhs512;
        lhs(5,15)=clhs24*clhs515 + clhs254*clhs484 + clhs263*clhs485 + clhs4*clhs514;
        lhs(5,16)=clhs24*clhs517 + clhs274*clhs484 + clhs283*clhs485 + clhs4*clhs516;
        lhs(5,17)=clhs24*clhs519 + clhs294*clhs484 + clhs303*clhs485 + clhs4*clhs518;
        lhs(5,18)=clhs24*clhs521 + clhs314*clhs484 + clhs323*clhs485 + clhs4*clhs520;
        lhs(5,19)=clhs24*clhs523 + clhs334*clhs484 + clhs343*clhs485 + clhs4*clhs522;
        lhs(5,20)=clhs24*clhs525 + clhs354*clhs484 + clhs363*clhs485 + clhs4*clhs524;
        lhs(5,21)=clhs24*clhs527 + clhs374*clhs484 + clhs383*clhs485 + clhs4*clhs526;
        lhs(5,22)=clhs24*clhs529 + clhs394*clhs484 + clhs4*clhs528 + clhs403*clhs485;
        lhs(5,23)=clhs24*clhs531 + clhs4*clhs530 + clhs414*clhs484 + clhs423*clhs485;
        lhs(5,24)=0;
        lhs(5,25)=clhs4*clhs532;
        lhs(5,26)=clhs24*clhs533;
        lhs(5,27)=0;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs55 + clhs49*clhs8;
        lhs(6,1)=-clhs26*clhs67 + clhs49*clhs58 + clhs55*clhs64 - clhs61*clhs7;
        lhs(6,2)=-clhs26*clhs79 + clhs49*clhs70 + clhs55*clhs76 - clhs7*clhs73;
        lhs(6,3)=-clhs26*clhs91 + clhs49*clhs82 + clhs55*clhs88 - clhs7*clhs85;
        lhs(6,4)=clhs100*clhs55 - clhs103*clhs26 + clhs49*clhs94 - clhs7*clhs97;
        lhs(6,5)=clhs106*clhs49 - clhs109*clhs7 + clhs112*clhs55 - clhs115*clhs26;
        lhs(6,6)=clhs118*clhs49 - clhs121*clhs7 + clhs124*clhs55 - clhs127*clhs26;
        lhs(6,7)=clhs130*clhs49 - clhs133*clhs7 + clhs136*clhs55 - clhs139*clhs26;
        lhs(6,8)=clhs142*clhs49 - clhs145*clhs7 + clhs148*clhs55 - clhs151*clhs26;
        lhs(6,9)=clhs154*clhs49 - clhs157*clhs7 + clhs160*clhs55 - clhs163*clhs26;
        lhs(6,10)=clhs166*clhs49 - clhs169*clhs7 + clhs172*clhs55 - clhs175*clhs26;
        lhs(6,11)=clhs178*clhs49 - clhs181*clhs7 + clhs184*clhs55 - clhs187*clhs26;
        lhs(6,12)=clhs195*clhs49 + clhs198*clhs7 + clhs204*clhs55 + clhs207*clhs26;
        lhs(6,13)=clhs215*clhs49 + clhs218*clhs7 + clhs224*clhs55 + clhs227*clhs26;
        lhs(6,14)=clhs235*clhs49 + clhs238*clhs7 + clhs244*clhs55 + clhs247*clhs26;
        lhs(6,15)=clhs255*clhs49 + clhs258*clhs7 + clhs26*clhs267 + clhs264*clhs55;
        lhs(6,16)=clhs26*clhs287 + clhs275*clhs49 + clhs278*clhs7 + clhs284*clhs55;
        lhs(6,17)=clhs26*clhs307 + clhs295*clhs49 + clhs298*clhs7 + clhs304*clhs55;
        lhs(6,18)=clhs26*clhs327 + clhs315*clhs49 + clhs318*clhs7 + clhs324*clhs55;
        lhs(6,19)=clhs26*clhs347 + clhs335*clhs49 + clhs338*clhs7 + clhs344*clhs55;
        lhs(6,20)=clhs26*clhs367 + clhs355*clhs49 + clhs358*clhs7 + clhs364*clhs55;
        lhs(6,21)=clhs26*clhs387 + clhs375*clhs49 + clhs378*clhs7 + clhs384*clhs55;
        lhs(6,22)=clhs26*clhs407 + clhs395*clhs49 + clhs398*clhs7 + clhs404*clhs55;
        lhs(6,23)=clhs26*clhs427 + clhs415*clhs49 + clhs418*clhs7 + clhs424*clhs55;
        lhs(6,24)=0;
        lhs(6,25)=clhs428*clhs7;
        lhs(6,26)=clhs26*clhs429;
        lhs(6,27)=0;
        lhs(7,0)=-clhs26*clhs431 + clhs27*clhs433 - clhs430*clhs7 + clhs432*clhs8;
        lhs(7,1)=-clhs26*clhs435 + clhs432*clhs58 + clhs433*clhs64 - clhs434*clhs7;
        lhs(7,2)=-clhs26*clhs437 + clhs432*clhs70 + clhs433*clhs76 - clhs436*clhs7;
        lhs(7,3)=-clhs26*clhs439 + clhs432*clhs82 + clhs433*clhs88 - clhs438*clhs7;
        lhs(7,4)=clhs100*clhs433 - clhs26*clhs441 + clhs432*clhs94 - clhs440*clhs7;
        lhs(7,5)=clhs106*clhs432 + clhs112*clhs433 - clhs26*clhs443 - clhs442*clhs7;
        lhs(7,6)=clhs118*clhs432 + clhs124*clhs433 - clhs26*clhs445 - clhs444*clhs7;
        lhs(7,7)=clhs130*clhs432 + clhs136*clhs433 - clhs26*clhs447 - clhs446*clhs7;
        lhs(7,8)=clhs142*clhs432 + clhs148*clhs433 - clhs26*clhs449 - clhs448*clhs7;
        lhs(7,9)=clhs154*clhs432 + clhs160*clhs433 - clhs26*clhs451 - clhs450*clhs7;
        lhs(7,10)=clhs166*clhs432 + clhs172*clhs433 - clhs26*clhs453 - clhs452*clhs7;
        lhs(7,11)=clhs178*clhs432 + clhs184*clhs433 - clhs26*clhs455 - clhs454*clhs7;
        lhs(7,12)=clhs195*clhs432 + clhs204*clhs433 + clhs26*clhs457 + clhs456*clhs7;
        lhs(7,13)=clhs215*clhs432 + clhs224*clhs433 + clhs26*clhs459 + clhs458*clhs7;
        lhs(7,14)=clhs235*clhs432 + clhs244*clhs433 + clhs26*clhs461 + clhs460*clhs7;
        lhs(7,15)=clhs255*clhs432 + clhs26*clhs463 + clhs264*clhs433 + clhs462*clhs7;
        lhs(7,16)=clhs26*clhs465 + clhs275*clhs432 + clhs284*clhs433 + clhs464*clhs7;
        lhs(7,17)=clhs26*clhs467 + clhs295*clhs432 + clhs304*clhs433 + clhs466*clhs7;
        lhs(7,18)=clhs26*clhs469 + clhs315*clhs432 + clhs324*clhs433 + clhs468*clhs7;
        lhs(7,19)=clhs26*clhs471 + clhs335*clhs432 + clhs344*clhs433 + clhs470*clhs7;
        lhs(7,20)=clhs26*clhs473 + clhs355*clhs432 + clhs364*clhs433 + clhs472*clhs7;
        lhs(7,21)=clhs26*clhs475 + clhs375*clhs432 + clhs384*clhs433 + clhs474*clhs7;
        lhs(7,22)=clhs26*clhs477 + clhs395*clhs432 + clhs404*clhs433 + clhs476*clhs7;
        lhs(7,23)=clhs26*clhs479 + clhs415*clhs432 + clhs424*clhs433 + clhs478*clhs7;
        lhs(7,24)=0;
        lhs(7,25)=clhs480*clhs7;
        lhs(7,26)=clhs26*clhs481;
        lhs(7,27)=0;
        lhs(8,0)=-clhs26*clhs483 + clhs27*clhs485 - clhs482*clhs7 + clhs484*clhs8;
        lhs(8,1)=-clhs26*clhs487 + clhs484*clhs58 + clhs485*clhs64 - clhs486*clhs7;
        lhs(8,2)=-clhs26*clhs489 + clhs484*clhs70 + clhs485*clhs76 - clhs488*clhs7;
        lhs(8,3)=-clhs26*clhs491 + clhs484*clhs82 + clhs485*clhs88 - clhs490*clhs7;
        lhs(8,4)=clhs100*clhs485 - clhs26*clhs493 + clhs484*clhs94 - clhs492*clhs7;
        lhs(8,5)=clhs106*clhs484 + clhs112*clhs485 - clhs26*clhs495 - clhs494*clhs7;
        lhs(8,6)=clhs118*clhs484 + clhs124*clhs485 - clhs26*clhs497 - clhs496*clhs7;
        lhs(8,7)=clhs130*clhs484 + clhs136*clhs485 - clhs26*clhs499 - clhs498*clhs7;
        lhs(8,8)=clhs142*clhs484 + clhs148*clhs485 - clhs26*clhs501 - clhs500*clhs7;
        lhs(8,9)=clhs154*clhs484 + clhs160*clhs485 - clhs26*clhs503 - clhs502*clhs7;
        lhs(8,10)=clhs166*clhs484 + clhs172*clhs485 - clhs26*clhs505 - clhs504*clhs7;
        lhs(8,11)=clhs178*clhs484 + clhs184*clhs485 - clhs26*clhs507 - clhs506*clhs7;
        lhs(8,12)=clhs195*clhs484 + clhs204*clhs485 + clhs26*clhs509 + clhs508*clhs7;
        lhs(8,13)=clhs215*clhs484 + clhs224*clhs485 + clhs26*clhs511 + clhs510*clhs7;
        lhs(8,14)=clhs235*clhs484 + clhs244*clhs485 + clhs26*clhs513 + clhs512*clhs7;
        lhs(8,15)=clhs255*clhs484 + clhs26*clhs515 + clhs264*clhs485 + clhs514*clhs7;
        lhs(8,16)=clhs26*clhs517 + clhs275*clhs484 + clhs284*clhs485 + clhs516*clhs7;
        lhs(8,17)=clhs26*clhs519 + clhs295*clhs484 + clhs304*clhs485 + clhs518*clhs7;
        lhs(8,18)=clhs26*clhs521 + clhs315*clhs484 + clhs324*clhs485 + clhs520*clhs7;
        lhs(8,19)=clhs26*clhs523 + clhs335*clhs484 + clhs344*clhs485 + clhs522*clhs7;
        lhs(8,20)=clhs26*clhs525 + clhs355*clhs484 + clhs364*clhs485 + clhs524*clhs7;
        lhs(8,21)=clhs26*clhs527 + clhs375*clhs484 + clhs384*clhs485 + clhs526*clhs7;
        lhs(8,22)=clhs26*clhs529 + clhs395*clhs484 + clhs404*clhs485 + clhs528*clhs7;
        lhs(8,23)=clhs26*clhs531 + clhs415*clhs484 + clhs424*clhs485 + clhs530*clhs7;
        lhs(8,24)=0;
        lhs(8,25)=clhs532*clhs7;
        lhs(8,26)=clhs26*clhs533;
        lhs(8,27)=0;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs49 - clhs28*clhs31 + clhs29*clhs55;
        lhs(9,1)=-clhs10*clhs61 - clhs28*clhs67 + clhs49*clhs59 + clhs55*clhs65;
        lhs(9,2)=-clhs10*clhs73 - clhs28*clhs79 + clhs49*clhs71 + clhs55*clhs77;
        lhs(9,3)=-clhs10*clhs85 - clhs28*clhs91 + clhs49*clhs83 + clhs55*clhs89;
        lhs(9,4)=-clhs10*clhs97 + clhs101*clhs55 - clhs103*clhs28 + clhs49*clhs95;
        lhs(9,5)=-clhs10*clhs109 + clhs107*clhs49 + clhs113*clhs55 - clhs115*clhs28;
        lhs(9,6)=-clhs10*clhs121 + clhs119*clhs49 + clhs125*clhs55 - clhs127*clhs28;
        lhs(9,7)=-clhs10*clhs133 + clhs131*clhs49 + clhs137*clhs55 - clhs139*clhs28;
        lhs(9,8)=-clhs10*clhs145 + clhs143*clhs49 + clhs149*clhs55 - clhs151*clhs28;
        lhs(9,9)=-clhs10*clhs157 + clhs155*clhs49 + clhs161*clhs55 - clhs163*clhs28;
        lhs(9,10)=-clhs10*clhs169 + clhs167*clhs49 + clhs173*clhs55 - clhs175*clhs28;
        lhs(9,11)=-clhs10*clhs181 + clhs179*clhs49 + clhs185*clhs55 - clhs187*clhs28;
        lhs(9,12)=clhs10*clhs198 + clhs196*clhs49 + clhs205*clhs55 + clhs207*clhs28;
        lhs(9,13)=clhs10*clhs218 + clhs216*clhs49 + clhs225*clhs55 + clhs227*clhs28;
        lhs(9,14)=clhs10*clhs238 + clhs236*clhs49 + clhs245*clhs55 + clhs247*clhs28;
        lhs(9,15)=clhs10*clhs258 + clhs256*clhs49 + clhs265*clhs55 + clhs267*clhs28;
        lhs(9,16)=clhs10*clhs278 + clhs276*clhs49 + clhs28*clhs287 + clhs285*clhs55;
        lhs(9,17)=clhs10*clhs298 + clhs28*clhs307 + clhs296*clhs49 + clhs305*clhs55;
        lhs(9,18)=clhs10*clhs318 + clhs28*clhs327 + clhs316*clhs49 + clhs325*clhs55;
        lhs(9,19)=clhs10*clhs338 + clhs28*clhs347 + clhs336*clhs49 + clhs345*clhs55;
        lhs(9,20)=clhs10*clhs358 + clhs28*clhs367 + clhs356*clhs49 + clhs365*clhs55;
        lhs(9,21)=clhs10*clhs378 + clhs28*clhs387 + clhs376*clhs49 + clhs385*clhs55;
        lhs(9,22)=clhs10*clhs398 + clhs28*clhs407 + clhs396*clhs49 + clhs405*clhs55;
        lhs(9,23)=clhs10*clhs418 + clhs28*clhs427 + clhs416*clhs49 + clhs425*clhs55;
        lhs(9,24)=0;
        lhs(9,25)=clhs10*clhs428;
        lhs(9,26)=clhs28*clhs429;
        lhs(9,27)=0;
        lhs(10,0)=-clhs10*clhs430 + clhs11*clhs432 - clhs28*clhs431 + clhs29*clhs433;
        lhs(10,1)=-clhs10*clhs434 - clhs28*clhs435 + clhs432*clhs59 + clhs433*clhs65;
        lhs(10,2)=-clhs10*clhs436 - clhs28*clhs437 + clhs432*clhs71 + clhs433*clhs77;
        lhs(10,3)=-clhs10*clhs438 - clhs28*clhs439 + clhs432*clhs83 + clhs433*clhs89;
        lhs(10,4)=-clhs10*clhs440 + clhs101*clhs433 - clhs28*clhs441 + clhs432*clhs95;
        lhs(10,5)=-clhs10*clhs442 + clhs107*clhs432 + clhs113*clhs433 - clhs28*clhs443;
        lhs(10,6)=-clhs10*clhs444 + clhs119*clhs432 + clhs125*clhs433 - clhs28*clhs445;
        lhs(10,7)=-clhs10*clhs446 + clhs131*clhs432 + clhs137*clhs433 - clhs28*clhs447;
        lhs(10,8)=-clhs10*clhs448 + clhs143*clhs432 + clhs149*clhs433 - clhs28*clhs449;
        lhs(10,9)=-clhs10*clhs450 + clhs155*clhs432 + clhs161*clhs433 - clhs28*clhs451;
        lhs(10,10)=-clhs10*clhs452 + clhs167*clhs432 + clhs173*clhs433 - clhs28*clhs453;
        lhs(10,11)=-clhs10*clhs454 + clhs179*clhs432 + clhs185*clhs433 - clhs28*clhs455;
        lhs(10,12)=clhs10*clhs456 + clhs196*clhs432 + clhs205*clhs433 + clhs28*clhs457;
        lhs(10,13)=clhs10*clhs458 + clhs216*clhs432 + clhs225*clhs433 + clhs28*clhs459;
        lhs(10,14)=clhs10*clhs460 + clhs236*clhs432 + clhs245*clhs433 + clhs28*clhs461;
        lhs(10,15)=clhs10*clhs462 + clhs256*clhs432 + clhs265*clhs433 + clhs28*clhs463;
        lhs(10,16)=clhs10*clhs464 + clhs276*clhs432 + clhs28*clhs465 + clhs285*clhs433;
        lhs(10,17)=clhs10*clhs466 + clhs28*clhs467 + clhs296*clhs432 + clhs305*clhs433;
        lhs(10,18)=clhs10*clhs468 + clhs28*clhs469 + clhs316*clhs432 + clhs325*clhs433;
        lhs(10,19)=clhs10*clhs470 + clhs28*clhs471 + clhs336*clhs432 + clhs345*clhs433;
        lhs(10,20)=clhs10*clhs472 + clhs28*clhs473 + clhs356*clhs432 + clhs365*clhs433;
        lhs(10,21)=clhs10*clhs474 + clhs28*clhs475 + clhs376*clhs432 + clhs385*clhs433;
        lhs(10,22)=clhs10*clhs476 + clhs28*clhs477 + clhs396*clhs432 + clhs405*clhs433;
        lhs(10,23)=clhs10*clhs478 + clhs28*clhs479 + clhs416*clhs432 + clhs425*clhs433;
        lhs(10,24)=0;
        lhs(10,25)=clhs10*clhs480;
        lhs(10,26)=clhs28*clhs481;
        lhs(10,27)=0;
        lhs(11,0)=-clhs10*clhs482 + clhs11*clhs484 - clhs28*clhs483 + clhs29*clhs485;
        lhs(11,1)=-clhs10*clhs486 - clhs28*clhs487 + clhs484*clhs59 + clhs485*clhs65;
        lhs(11,2)=-clhs10*clhs488 - clhs28*clhs489 + clhs484*clhs71 + clhs485*clhs77;
        lhs(11,3)=-clhs10*clhs490 - clhs28*clhs491 + clhs484*clhs83 + clhs485*clhs89;
        lhs(11,4)=-clhs10*clhs492 + clhs101*clhs485 - clhs28*clhs493 + clhs484*clhs95;
        lhs(11,5)=-clhs10*clhs494 + clhs107*clhs484 + clhs113*clhs485 - clhs28*clhs495;
        lhs(11,6)=-clhs10*clhs496 + clhs119*clhs484 + clhs125*clhs485 - clhs28*clhs497;
        lhs(11,7)=-clhs10*clhs498 + clhs131*clhs484 + clhs137*clhs485 - clhs28*clhs499;
        lhs(11,8)=-clhs10*clhs500 + clhs143*clhs484 + clhs149*clhs485 - clhs28*clhs501;
        lhs(11,9)=-clhs10*clhs502 + clhs155*clhs484 + clhs161*clhs485 - clhs28*clhs503;
        lhs(11,10)=-clhs10*clhs504 + clhs167*clhs484 + clhs173*clhs485 - clhs28*clhs505;
        lhs(11,11)=-clhs10*clhs506 + clhs179*clhs484 + clhs185*clhs485 - clhs28*clhs507;
        lhs(11,12)=clhs10*clhs508 + clhs196*clhs484 + clhs205*clhs485 + clhs28*clhs509;
        lhs(11,13)=clhs10*clhs510 + clhs216*clhs484 + clhs225*clhs485 + clhs28*clhs511;
        lhs(11,14)=clhs10*clhs512 + clhs236*clhs484 + clhs245*clhs485 + clhs28*clhs513;
        lhs(11,15)=clhs10*clhs514 + clhs256*clhs484 + clhs265*clhs485 + clhs28*clhs515;
        lhs(11,16)=clhs10*clhs516 + clhs276*clhs484 + clhs28*clhs517 + clhs285*clhs485;
        lhs(11,17)=clhs10*clhs518 + clhs28*clhs519 + clhs296*clhs484 + clhs305*clhs485;
        lhs(11,18)=clhs10*clhs520 + clhs28*clhs521 + clhs316*clhs484 + clhs325*clhs485;
        lhs(11,19)=clhs10*clhs522 + clhs28*clhs523 + clhs336*clhs484 + clhs345*clhs485;
        lhs(11,20)=clhs10*clhs524 + clhs28*clhs525 + clhs356*clhs484 + clhs365*clhs485;
        lhs(11,21)=clhs10*clhs526 + clhs28*clhs527 + clhs376*clhs484 + clhs385*clhs485;
        lhs(11,22)=clhs10*clhs528 + clhs28*clhs529 + clhs396*clhs484 + clhs405*clhs485;
        lhs(11,23)=clhs10*clhs530 + clhs28*clhs531 + clhs416*clhs484 + clhs425*clhs485;
        lhs(11,24)=0;
        lhs(11,25)=clhs10*clhs532;
        lhs(11,26)=clhs28*clhs533;
        lhs(11,27)=0;
        lhs(12,0)=penalty_parameter*(clhs33*clhs534 + clhs50*clhs535);
        lhs(12,1)=penalty_parameter*(clhs33*clhs536 + clhs50*clhs537);
        lhs(12,2)=penalty_parameter*(clhs33*clhs538 + clhs50*clhs539);
        lhs(12,3)=penalty_parameter*(clhs33*clhs540 + clhs50*clhs541);
        lhs(12,4)=penalty_parameter*(clhs33*clhs542 + clhs50*clhs543);
        lhs(12,5)=penalty_parameter*(clhs33*clhs544 + clhs50*clhs545);
        lhs(12,6)=penalty_parameter*(clhs33*clhs546 + clhs50*clhs547);
        lhs(12,7)=penalty_parameter*(clhs33*clhs548 + clhs50*clhs549);
        lhs(12,8)=penalty_parameter*(clhs33*clhs550 + clhs50*clhs551);
        lhs(12,9)=penalty_parameter*(clhs33*clhs552 + clhs50*clhs553);
        lhs(12,10)=penalty_parameter*(clhs33*clhs554 + clhs50*clhs555);
        lhs(12,11)=penalty_parameter*(clhs33*clhs556 + clhs50*clhs557);
        lhs(12,12)=-clhs190*clhs49 - clhs198*clhs33 - clhs199*clhs55 - clhs207*clhs50;
        lhs(12,13)=-clhs210*clhs49 - clhs218*clhs33 - clhs219*clhs55 - clhs227*clhs50;
        lhs(12,14)=-clhs230*clhs49 - clhs238*clhs33 - clhs239*clhs55 - clhs247*clhs50;
        lhs(12,15)=-clhs250*clhs49 - clhs258*clhs33 - clhs259*clhs55 - clhs267*clhs50;
        lhs(12,16)=-clhs270*clhs49 - clhs278*clhs33 - clhs279*clhs55 - clhs287*clhs50;
        lhs(12,17)=-clhs290*clhs49 - clhs298*clhs33 - clhs299*clhs55 - clhs307*clhs50;
        lhs(12,18)=-clhs310*clhs49 - clhs318*clhs33 - clhs319*clhs55 - clhs327*clhs50;
        lhs(12,19)=-clhs33*clhs338 - clhs330*clhs49 - clhs339*clhs55 - clhs347*clhs50;
        lhs(12,20)=-clhs33*clhs358 - clhs350*clhs49 - clhs359*clhs55 - clhs367*clhs50;
        lhs(12,21)=-clhs33*clhs378 - clhs370*clhs49 - clhs379*clhs55 - clhs387*clhs50;
        lhs(12,22)=-clhs33*clhs398 - clhs390*clhs49 - clhs399*clhs55 - clhs407*clhs50;
        lhs(12,23)=-clhs33*clhs418 - clhs410*clhs49 - clhs419*clhs55 - clhs427*clhs50;
        lhs(12,24)=0;
        lhs(12,25)=-clhs33*clhs428;
        lhs(12,26)=-clhs429*clhs50;
        lhs(12,27)=0;
        lhs(13,0)=penalty_parameter*(clhs33*clhs558 + clhs50*clhs559);
        lhs(13,1)=penalty_parameter*(clhs33*clhs560 + clhs50*clhs561);
        lhs(13,2)=penalty_parameter*(clhs33*clhs562 + clhs50*clhs563);
        lhs(13,3)=penalty_parameter*(clhs33*clhs564 + clhs50*clhs565);
        lhs(13,4)=penalty_parameter*(clhs33*clhs566 + clhs50*clhs567);
        lhs(13,5)=penalty_parameter*(clhs33*clhs568 + clhs50*clhs569);
        lhs(13,6)=penalty_parameter*(clhs33*clhs570 + clhs50*clhs571);
        lhs(13,7)=penalty_parameter*(clhs33*clhs572 + clhs50*clhs573);
        lhs(13,8)=penalty_parameter*(clhs33*clhs574 + clhs50*clhs575);
        lhs(13,9)=penalty_parameter*(clhs33*clhs576 + clhs50*clhs577);
        lhs(13,10)=penalty_parameter*(clhs33*clhs578 + clhs50*clhs579);
        lhs(13,11)=penalty_parameter*(clhs33*clhs580 + clhs50*clhs581);
        lhs(13,12)=-clhs190*clhs432 - clhs199*clhs433 - clhs33*clhs456 - clhs457*clhs50;
        lhs(13,13)=-clhs210*clhs432 - clhs219*clhs433 - clhs33*clhs458 - clhs459*clhs50;
        lhs(13,14)=-clhs230*clhs432 - clhs239*clhs433 - clhs33*clhs460 - clhs461*clhs50;
        lhs(13,15)=-clhs250*clhs432 - clhs259*clhs433 - clhs33*clhs462 - clhs463*clhs50;
        lhs(13,16)=-clhs270*clhs432 - clhs279*clhs433 - clhs33*clhs464 - clhs465*clhs50;
        lhs(13,17)=-clhs290*clhs432 - clhs299*clhs433 - clhs33*clhs466 - clhs467*clhs50;
        lhs(13,18)=-clhs310*clhs432 - clhs319*clhs433 - clhs33*clhs468 - clhs469*clhs50;
        lhs(13,19)=-clhs33*clhs470 - clhs330*clhs432 - clhs339*clhs433 - clhs471*clhs50;
        lhs(13,20)=-clhs33*clhs472 - clhs350*clhs432 - clhs359*clhs433 - clhs473*clhs50;
        lhs(13,21)=-clhs33*clhs474 - clhs370*clhs432 - clhs379*clhs433 - clhs475*clhs50;
        lhs(13,22)=-clhs33*clhs476 - clhs390*clhs432 - clhs399*clhs433 - clhs477*clhs50;
        lhs(13,23)=-clhs33*clhs478 - clhs410*clhs432 - clhs419*clhs433 - clhs479*clhs50;
        lhs(13,24)=0;
        lhs(13,25)=-clhs33*clhs480;
        lhs(13,26)=-clhs481*clhs50;
        lhs(13,27)=0;
        lhs(14,0)=penalty_parameter*(clhs33*clhs582 + clhs50*clhs583);
        lhs(14,1)=penalty_parameter*(clhs33*clhs584 + clhs50*clhs585);
        lhs(14,2)=penalty_parameter*(clhs33*clhs586 + clhs50*clhs587);
        lhs(14,3)=penalty_parameter*(clhs33*clhs588 + clhs50*clhs589);
        lhs(14,4)=penalty_parameter*(clhs33*clhs590 + clhs50*clhs591);
        lhs(14,5)=penalty_parameter*(clhs33*clhs592 + clhs50*clhs593);
        lhs(14,6)=penalty_parameter*(clhs33*clhs594 + clhs50*clhs595);
        lhs(14,7)=penalty_parameter*(clhs33*clhs596 + clhs50*clhs597);
        lhs(14,8)=penalty_parameter*(clhs33*clhs598 + clhs50*clhs599);
        lhs(14,9)=penalty_parameter*(clhs33*clhs600 + clhs50*clhs601);
        lhs(14,10)=penalty_parameter*(clhs33*clhs602 + clhs50*clhs603);
        lhs(14,11)=penalty_parameter*(clhs33*clhs604 + clhs50*clhs605);
        lhs(14,12)=-clhs190*clhs484 - clhs199*clhs485 - clhs33*clhs508 - clhs50*clhs509;
        lhs(14,13)=-clhs210*clhs484 - clhs219*clhs485 - clhs33*clhs510 - clhs50*clhs511;
        lhs(14,14)=-clhs230*clhs484 - clhs239*clhs485 - clhs33*clhs512 - clhs50*clhs513;
        lhs(14,15)=-clhs250*clhs484 - clhs259*clhs485 - clhs33*clhs514 - clhs50*clhs515;
        lhs(14,16)=-clhs270*clhs484 - clhs279*clhs485 - clhs33*clhs516 - clhs50*clhs517;
        lhs(14,17)=-clhs290*clhs484 - clhs299*clhs485 - clhs33*clhs518 - clhs50*clhs519;
        lhs(14,18)=-clhs310*clhs484 - clhs319*clhs485 - clhs33*clhs520 - clhs50*clhs521;
        lhs(14,19)=-clhs33*clhs522 - clhs330*clhs484 - clhs339*clhs485 - clhs50*clhs523;
        lhs(14,20)=-clhs33*clhs524 - clhs350*clhs484 - clhs359*clhs485 - clhs50*clhs525;
        lhs(14,21)=-clhs33*clhs526 - clhs370*clhs484 - clhs379*clhs485 - clhs50*clhs527;
        lhs(14,22)=-clhs33*clhs528 - clhs390*clhs484 - clhs399*clhs485 - clhs50*clhs529;
        lhs(14,23)=-clhs33*clhs530 - clhs410*clhs484 - clhs419*clhs485 - clhs50*clhs531;
        lhs(14,24)=0;
        lhs(14,25)=-clhs33*clhs532;
        lhs(14,26)=-clhs50*clhs533;
        lhs(14,27)=0;
        lhs(15,0)=penalty_parameter*(clhs35*clhs534 + clhs51*clhs535);
        lhs(15,1)=penalty_parameter*(clhs35*clhs536 + clhs51*clhs537);
        lhs(15,2)=penalty_parameter*(clhs35*clhs538 + clhs51*clhs539);
        lhs(15,3)=penalty_parameter*(clhs35*clhs540 + clhs51*clhs541);
        lhs(15,4)=penalty_parameter*(clhs35*clhs542 + clhs51*clhs543);
        lhs(15,5)=penalty_parameter*(clhs35*clhs544 + clhs51*clhs545);
        lhs(15,6)=penalty_parameter*(clhs35*clhs546 + clhs51*clhs547);
        lhs(15,7)=penalty_parameter*(clhs35*clhs548 + clhs51*clhs549);
        lhs(15,8)=penalty_parameter*(clhs35*clhs550 + clhs51*clhs551);
        lhs(15,9)=penalty_parameter*(clhs35*clhs552 + clhs51*clhs553);
        lhs(15,10)=penalty_parameter*(clhs35*clhs554 + clhs51*clhs555);
        lhs(15,11)=penalty_parameter*(clhs35*clhs556 + clhs51*clhs557);
        lhs(15,12)=-clhs191*clhs49 - clhs198*clhs35 - clhs200*clhs55 - clhs207*clhs51;
        lhs(15,13)=-clhs211*clhs49 - clhs218*clhs35 - clhs220*clhs55 - clhs227*clhs51;
        lhs(15,14)=-clhs231*clhs49 - clhs238*clhs35 - clhs240*clhs55 - clhs247*clhs51;
        lhs(15,15)=-clhs251*clhs49 - clhs258*clhs35 - clhs260*clhs55 - clhs267*clhs51;
        lhs(15,16)=-clhs271*clhs49 - clhs278*clhs35 - clhs280*clhs55 - clhs287*clhs51;
        lhs(15,17)=-clhs291*clhs49 - clhs298*clhs35 - clhs300*clhs55 - clhs307*clhs51;
        lhs(15,18)=-clhs311*clhs49 - clhs318*clhs35 - clhs320*clhs55 - clhs327*clhs51;
        lhs(15,19)=-clhs331*clhs49 - clhs338*clhs35 - clhs340*clhs55 - clhs347*clhs51;
        lhs(15,20)=-clhs35*clhs358 - clhs351*clhs49 - clhs360*clhs55 - clhs367*clhs51;
        lhs(15,21)=-clhs35*clhs378 - clhs371*clhs49 - clhs380*clhs55 - clhs387*clhs51;
        lhs(15,22)=-clhs35*clhs398 - clhs391*clhs49 - clhs400*clhs55 - clhs407*clhs51;
        lhs(15,23)=-clhs35*clhs418 - clhs411*clhs49 - clhs420*clhs55 - clhs427*clhs51;
        lhs(15,24)=0;
        lhs(15,25)=-clhs35*clhs428;
        lhs(15,26)=-clhs429*clhs51;
        lhs(15,27)=0;
        lhs(16,0)=penalty_parameter*(clhs35*clhs558 + clhs51*clhs559);
        lhs(16,1)=penalty_parameter*(clhs35*clhs560 + clhs51*clhs561);
        lhs(16,2)=penalty_parameter*(clhs35*clhs562 + clhs51*clhs563);
        lhs(16,3)=penalty_parameter*(clhs35*clhs564 + clhs51*clhs565);
        lhs(16,4)=penalty_parameter*(clhs35*clhs566 + clhs51*clhs567);
        lhs(16,5)=penalty_parameter*(clhs35*clhs568 + clhs51*clhs569);
        lhs(16,6)=penalty_parameter*(clhs35*clhs570 + clhs51*clhs571);
        lhs(16,7)=penalty_parameter*(clhs35*clhs572 + clhs51*clhs573);
        lhs(16,8)=penalty_parameter*(clhs35*clhs574 + clhs51*clhs575);
        lhs(16,9)=penalty_parameter*(clhs35*clhs576 + clhs51*clhs577);
        lhs(16,10)=penalty_parameter*(clhs35*clhs578 + clhs51*clhs579);
        lhs(16,11)=penalty_parameter*(clhs35*clhs580 + clhs51*clhs581);
        lhs(16,12)=-clhs191*clhs432 - clhs200*clhs433 - clhs35*clhs456 - clhs457*clhs51;
        lhs(16,13)=-clhs211*clhs432 - clhs220*clhs433 - clhs35*clhs458 - clhs459*clhs51;
        lhs(16,14)=-clhs231*clhs432 - clhs240*clhs433 - clhs35*clhs460 - clhs461*clhs51;
        lhs(16,15)=-clhs251*clhs432 - clhs260*clhs433 - clhs35*clhs462 - clhs463*clhs51;
        lhs(16,16)=-clhs271*clhs432 - clhs280*clhs433 - clhs35*clhs464 - clhs465*clhs51;
        lhs(16,17)=-clhs291*clhs432 - clhs300*clhs433 - clhs35*clhs466 - clhs467*clhs51;
        lhs(16,18)=-clhs311*clhs432 - clhs320*clhs433 - clhs35*clhs468 - clhs469*clhs51;
        lhs(16,19)=-clhs331*clhs432 - clhs340*clhs433 - clhs35*clhs470 - clhs471*clhs51;
        lhs(16,20)=-clhs35*clhs472 - clhs351*clhs432 - clhs360*clhs433 - clhs473*clhs51;
        lhs(16,21)=-clhs35*clhs474 - clhs371*clhs432 - clhs380*clhs433 - clhs475*clhs51;
        lhs(16,22)=-clhs35*clhs476 - clhs391*clhs432 - clhs400*clhs433 - clhs477*clhs51;
        lhs(16,23)=-clhs35*clhs478 - clhs411*clhs432 - clhs420*clhs433 - clhs479*clhs51;
        lhs(16,24)=0;
        lhs(16,25)=-clhs35*clhs480;
        lhs(16,26)=-clhs481*clhs51;
        lhs(16,27)=0;
        lhs(17,0)=penalty_parameter*(clhs35*clhs582 + clhs51*clhs583);
        lhs(17,1)=penalty_parameter*(clhs35*clhs584 + clhs51*clhs585);
        lhs(17,2)=penalty_parameter*(clhs35*clhs586 + clhs51*clhs587);
        lhs(17,3)=penalty_parameter*(clhs35*clhs588 + clhs51*clhs589);
        lhs(17,4)=penalty_parameter*(clhs35*clhs590 + clhs51*clhs591);
        lhs(17,5)=penalty_parameter*(clhs35*clhs592 + clhs51*clhs593);
        lhs(17,6)=penalty_parameter*(clhs35*clhs594 + clhs51*clhs595);
        lhs(17,7)=penalty_parameter*(clhs35*clhs596 + clhs51*clhs597);
        lhs(17,8)=penalty_parameter*(clhs35*clhs598 + clhs51*clhs599);
        lhs(17,9)=penalty_parameter*(clhs35*clhs600 + clhs51*clhs601);
        lhs(17,10)=penalty_parameter*(clhs35*clhs602 + clhs51*clhs603);
        lhs(17,11)=penalty_parameter*(clhs35*clhs604 + clhs51*clhs605);
        lhs(17,12)=-clhs191*clhs484 - clhs200*clhs485 - clhs35*clhs508 - clhs509*clhs51;
        lhs(17,13)=-clhs211*clhs484 - clhs220*clhs485 - clhs35*clhs510 - clhs51*clhs511;
        lhs(17,14)=-clhs231*clhs484 - clhs240*clhs485 - clhs35*clhs512 - clhs51*clhs513;
        lhs(17,15)=-clhs251*clhs484 - clhs260*clhs485 - clhs35*clhs514 - clhs51*clhs515;
        lhs(17,16)=-clhs271*clhs484 - clhs280*clhs485 - clhs35*clhs516 - clhs51*clhs517;
        lhs(17,17)=-clhs291*clhs484 - clhs300*clhs485 - clhs35*clhs518 - clhs51*clhs519;
        lhs(17,18)=-clhs311*clhs484 - clhs320*clhs485 - clhs35*clhs520 - clhs51*clhs521;
        lhs(17,19)=-clhs331*clhs484 - clhs340*clhs485 - clhs35*clhs522 - clhs51*clhs523;
        lhs(17,20)=-clhs35*clhs524 - clhs351*clhs484 - clhs360*clhs485 - clhs51*clhs525;
        lhs(17,21)=-clhs35*clhs526 - clhs371*clhs484 - clhs380*clhs485 - clhs51*clhs527;
        lhs(17,22)=-clhs35*clhs528 - clhs391*clhs484 - clhs400*clhs485 - clhs51*clhs529;
        lhs(17,23)=-clhs35*clhs530 - clhs411*clhs484 - clhs420*clhs485 - clhs51*clhs531;
        lhs(17,24)=0;
        lhs(17,25)=-clhs35*clhs532;
        lhs(17,26)=-clhs51*clhs533;
        lhs(17,27)=0;
        lhs(18,0)=penalty_parameter*(clhs37*clhs534 + clhs52*clhs535);
        lhs(18,1)=penalty_parameter*(clhs37*clhs536 + clhs52*clhs537);
        lhs(18,2)=penalty_parameter*(clhs37*clhs538 + clhs52*clhs539);
        lhs(18,3)=penalty_parameter*(clhs37*clhs540 + clhs52*clhs541);
        lhs(18,4)=penalty_parameter*(clhs37*clhs542 + clhs52*clhs543);
        lhs(18,5)=penalty_parameter*(clhs37*clhs544 + clhs52*clhs545);
        lhs(18,6)=penalty_parameter*(clhs37*clhs546 + clhs52*clhs547);
        lhs(18,7)=penalty_parameter*(clhs37*clhs548 + clhs52*clhs549);
        lhs(18,8)=penalty_parameter*(clhs37*clhs550 + clhs52*clhs551);
        lhs(18,9)=penalty_parameter*(clhs37*clhs552 + clhs52*clhs553);
        lhs(18,10)=penalty_parameter*(clhs37*clhs554 + clhs52*clhs555);
        lhs(18,11)=penalty_parameter*(clhs37*clhs556 + clhs52*clhs557);
        lhs(18,12)=-clhs192*clhs49 - clhs198*clhs37 - clhs201*clhs55 - clhs207*clhs52;
        lhs(18,13)=-clhs212*clhs49 - clhs218*clhs37 - clhs221*clhs55 - clhs227*clhs52;
        lhs(18,14)=-clhs232*clhs49 - clhs238*clhs37 - clhs241*clhs55 - clhs247*clhs52;
        lhs(18,15)=-clhs252*clhs49 - clhs258*clhs37 - clhs261*clhs55 - clhs267*clhs52;
        lhs(18,16)=-clhs272*clhs49 - clhs278*clhs37 - clhs281*clhs55 - clhs287*clhs52;
        lhs(18,17)=-clhs292*clhs49 - clhs298*clhs37 - clhs301*clhs55 - clhs307*clhs52;
        lhs(18,18)=-clhs312*clhs49 - clhs318*clhs37 - clhs321*clhs55 - clhs327*clhs52;
        lhs(18,19)=-clhs332*clhs49 - clhs338*clhs37 - clhs341*clhs55 - clhs347*clhs52;
        lhs(18,20)=-clhs352*clhs49 - clhs358*clhs37 - clhs361*clhs55 - clhs367*clhs52;
        lhs(18,21)=-clhs37*clhs378 - clhs372*clhs49 - clhs381*clhs55 - clhs387*clhs52;
        lhs(18,22)=-clhs37*clhs398 - clhs392*clhs49 - clhs401*clhs55 - clhs407*clhs52;
        lhs(18,23)=-clhs37*clhs418 - clhs412*clhs49 - clhs421*clhs55 - clhs427*clhs52;
        lhs(18,24)=0;
        lhs(18,25)=-clhs37*clhs428;
        lhs(18,26)=-clhs429*clhs52;
        lhs(18,27)=0;
        lhs(19,0)=penalty_parameter*(clhs37*clhs558 + clhs52*clhs559);
        lhs(19,1)=penalty_parameter*(clhs37*clhs560 + clhs52*clhs561);
        lhs(19,2)=penalty_parameter*(clhs37*clhs562 + clhs52*clhs563);
        lhs(19,3)=penalty_parameter*(clhs37*clhs564 + clhs52*clhs565);
        lhs(19,4)=penalty_parameter*(clhs37*clhs566 + clhs52*clhs567);
        lhs(19,5)=penalty_parameter*(clhs37*clhs568 + clhs52*clhs569);
        lhs(19,6)=penalty_parameter*(clhs37*clhs570 + clhs52*clhs571);
        lhs(19,7)=penalty_parameter*(clhs37*clhs572 + clhs52*clhs573);
        lhs(19,8)=penalty_parameter*(clhs37*clhs574 + clhs52*clhs575);
        lhs(19,9)=penalty_parameter*(clhs37*clhs576 + clhs52*clhs577);
        lhs(19,10)=penalty_parameter*(clhs37*clhs578 + clhs52*clhs579);
        lhs(19,11)=penalty_parameter*(clhs37*clhs580 + clhs52*clhs581);
        lhs(19,12)=-clhs192*clhs432 - clhs201*clhs433 - clhs37*clhs456 - clhs457*clhs52;
        lhs(19,13)=-clhs212*clhs432 - clhs221*clhs433 - clhs37*clhs458 - clhs459*clhs52;
        lhs(19,14)=-clhs232*clhs432 - clhs241*clhs433 - clhs37*clhs460 - clhs461*clhs52;
        lhs(19,15)=-clhs252*clhs432 - clhs261*clhs433 - clhs37*clhs462 - clhs463*clhs52;
        lhs(19,16)=-clhs272*clhs432 - clhs281*clhs433 - clhs37*clhs464 - clhs465*clhs52;
        lhs(19,17)=-clhs292*clhs432 - clhs301*clhs433 - clhs37*clhs466 - clhs467*clhs52;
        lhs(19,18)=-clhs312*clhs432 - clhs321*clhs433 - clhs37*clhs468 - clhs469*clhs52;
        lhs(19,19)=-clhs332*clhs432 - clhs341*clhs433 - clhs37*clhs470 - clhs471*clhs52;
        lhs(19,20)=-clhs352*clhs432 - clhs361*clhs433 - clhs37*clhs472 - clhs473*clhs52;
        lhs(19,21)=-clhs37*clhs474 - clhs372*clhs432 - clhs381*clhs433 - clhs475*clhs52;
        lhs(19,22)=-clhs37*clhs476 - clhs392*clhs432 - clhs401*clhs433 - clhs477*clhs52;
        lhs(19,23)=-clhs37*clhs478 - clhs412*clhs432 - clhs421*clhs433 - clhs479*clhs52;
        lhs(19,24)=0;
        lhs(19,25)=-clhs37*clhs480;
        lhs(19,26)=-clhs481*clhs52;
        lhs(19,27)=0;
        lhs(20,0)=penalty_parameter*(clhs37*clhs582 + clhs52*clhs583);
        lhs(20,1)=penalty_parameter*(clhs37*clhs584 + clhs52*clhs585);
        lhs(20,2)=penalty_parameter*(clhs37*clhs586 + clhs52*clhs587);
        lhs(20,3)=penalty_parameter*(clhs37*clhs588 + clhs52*clhs589);
        lhs(20,4)=penalty_parameter*(clhs37*clhs590 + clhs52*clhs591);
        lhs(20,5)=penalty_parameter*(clhs37*clhs592 + clhs52*clhs593);
        lhs(20,6)=penalty_parameter*(clhs37*clhs594 + clhs52*clhs595);
        lhs(20,7)=penalty_parameter*(clhs37*clhs596 + clhs52*clhs597);
        lhs(20,8)=penalty_parameter*(clhs37*clhs598 + clhs52*clhs599);
        lhs(20,9)=penalty_parameter*(clhs37*clhs600 + clhs52*clhs601);
        lhs(20,10)=penalty_parameter*(clhs37*clhs602 + clhs52*clhs603);
        lhs(20,11)=penalty_parameter*(clhs37*clhs604 + clhs52*clhs605);
        lhs(20,12)=-clhs192*clhs484 - clhs201*clhs485 - clhs37*clhs508 - clhs509*clhs52;
        lhs(20,13)=-clhs212*clhs484 - clhs221*clhs485 - clhs37*clhs510 - clhs511*clhs52;
        lhs(20,14)=-clhs232*clhs484 - clhs241*clhs485 - clhs37*clhs512 - clhs513*clhs52;
        lhs(20,15)=-clhs252*clhs484 - clhs261*clhs485 - clhs37*clhs514 - clhs515*clhs52;
        lhs(20,16)=-clhs272*clhs484 - clhs281*clhs485 - clhs37*clhs516 - clhs517*clhs52;
        lhs(20,17)=-clhs292*clhs484 - clhs301*clhs485 - clhs37*clhs518 - clhs519*clhs52;
        lhs(20,18)=-clhs312*clhs484 - clhs321*clhs485 - clhs37*clhs520 - clhs52*clhs521;
        lhs(20,19)=-clhs332*clhs484 - clhs341*clhs485 - clhs37*clhs522 - clhs52*clhs523;
        lhs(20,20)=-clhs352*clhs484 - clhs361*clhs485 - clhs37*clhs524 - clhs52*clhs525;
        lhs(20,21)=-clhs37*clhs526 - clhs372*clhs484 - clhs381*clhs485 - clhs52*clhs527;
        lhs(20,22)=-clhs37*clhs528 - clhs392*clhs484 - clhs401*clhs485 - clhs52*clhs529;
        lhs(20,23)=-clhs37*clhs530 - clhs412*clhs484 - clhs421*clhs485 - clhs52*clhs531;
        lhs(20,24)=0;
        lhs(20,25)=-clhs37*clhs532;
        lhs(20,26)=-clhs52*clhs533;
        lhs(20,27)=0;
        lhs(21,0)=penalty_parameter*(clhs39*clhs534 + clhs53*clhs535);
        lhs(21,1)=penalty_parameter*(clhs39*clhs536 + clhs53*clhs537);
        lhs(21,2)=penalty_parameter*(clhs39*clhs538 + clhs53*clhs539);
        lhs(21,3)=penalty_parameter*(clhs39*clhs540 + clhs53*clhs541);
        lhs(21,4)=penalty_parameter*(clhs39*clhs542 + clhs53*clhs543);
        lhs(21,5)=penalty_parameter*(clhs39*clhs544 + clhs53*clhs545);
        lhs(21,6)=penalty_parameter*(clhs39*clhs546 + clhs53*clhs547);
        lhs(21,7)=penalty_parameter*(clhs39*clhs548 + clhs53*clhs549);
        lhs(21,8)=penalty_parameter*(clhs39*clhs550 + clhs53*clhs551);
        lhs(21,9)=penalty_parameter*(clhs39*clhs552 + clhs53*clhs553);
        lhs(21,10)=penalty_parameter*(clhs39*clhs554 + clhs53*clhs555);
        lhs(21,11)=penalty_parameter*(clhs39*clhs556 + clhs53*clhs557);
        lhs(21,12)=-clhs193*clhs49 - clhs198*clhs39 - clhs202*clhs55 - clhs207*clhs53;
        lhs(21,13)=-clhs213*clhs49 - clhs218*clhs39 - clhs222*clhs55 - clhs227*clhs53;
        lhs(21,14)=-clhs233*clhs49 - clhs238*clhs39 - clhs242*clhs55 - clhs247*clhs53;
        lhs(21,15)=-clhs253*clhs49 - clhs258*clhs39 - clhs262*clhs55 - clhs267*clhs53;
        lhs(21,16)=-clhs273*clhs49 - clhs278*clhs39 - clhs282*clhs55 - clhs287*clhs53;
        lhs(21,17)=-clhs293*clhs49 - clhs298*clhs39 - clhs302*clhs55 - clhs307*clhs53;
        lhs(21,18)=-clhs313*clhs49 - clhs318*clhs39 - clhs322*clhs55 - clhs327*clhs53;
        lhs(21,19)=-clhs333*clhs49 - clhs338*clhs39 - clhs342*clhs55 - clhs347*clhs53;
        lhs(21,20)=-clhs353*clhs49 - clhs358*clhs39 - clhs362*clhs55 - clhs367*clhs53;
        lhs(21,21)=-clhs373*clhs49 - clhs378*clhs39 - clhs382*clhs55 - clhs387*clhs53;
        lhs(21,22)=-clhs39*clhs398 - clhs393*clhs49 - clhs402*clhs55 - clhs407*clhs53;
        lhs(21,23)=-clhs39*clhs418 - clhs413*clhs49 - clhs422*clhs55 - clhs427*clhs53;
        lhs(21,24)=0;
        lhs(21,25)=-clhs39*clhs428;
        lhs(21,26)=-clhs429*clhs53;
        lhs(21,27)=0;
        lhs(22,0)=penalty_parameter*(clhs39*clhs558 + clhs53*clhs559);
        lhs(22,1)=penalty_parameter*(clhs39*clhs560 + clhs53*clhs561);
        lhs(22,2)=penalty_parameter*(clhs39*clhs562 + clhs53*clhs563);
        lhs(22,3)=penalty_parameter*(clhs39*clhs564 + clhs53*clhs565);
        lhs(22,4)=penalty_parameter*(clhs39*clhs566 + clhs53*clhs567);
        lhs(22,5)=penalty_parameter*(clhs39*clhs568 + clhs53*clhs569);
        lhs(22,6)=penalty_parameter*(clhs39*clhs570 + clhs53*clhs571);
        lhs(22,7)=penalty_parameter*(clhs39*clhs572 + clhs53*clhs573);
        lhs(22,8)=penalty_parameter*(clhs39*clhs574 + clhs53*clhs575);
        lhs(22,9)=penalty_parameter*(clhs39*clhs576 + clhs53*clhs577);
        lhs(22,10)=penalty_parameter*(clhs39*clhs578 + clhs53*clhs579);
        lhs(22,11)=penalty_parameter*(clhs39*clhs580 + clhs53*clhs581);
        lhs(22,12)=-clhs193*clhs432 - clhs202*clhs433 - clhs39*clhs456 - clhs457*clhs53;
        lhs(22,13)=-clhs213*clhs432 - clhs222*clhs433 - clhs39*clhs458 - clhs459*clhs53;
        lhs(22,14)=-clhs233*clhs432 - clhs242*clhs433 - clhs39*clhs460 - clhs461*clhs53;
        lhs(22,15)=-clhs253*clhs432 - clhs262*clhs433 - clhs39*clhs462 - clhs463*clhs53;
        lhs(22,16)=-clhs273*clhs432 - clhs282*clhs433 - clhs39*clhs464 - clhs465*clhs53;
        lhs(22,17)=-clhs293*clhs432 - clhs302*clhs433 - clhs39*clhs466 - clhs467*clhs53;
        lhs(22,18)=-clhs313*clhs432 - clhs322*clhs433 - clhs39*clhs468 - clhs469*clhs53;
        lhs(22,19)=-clhs333*clhs432 - clhs342*clhs433 - clhs39*clhs470 - clhs471*clhs53;
        lhs(22,20)=-clhs353*clhs432 - clhs362*clhs433 - clhs39*clhs472 - clhs473*clhs53;
        lhs(22,21)=-clhs373*clhs432 - clhs382*clhs433 - clhs39*clhs474 - clhs475*clhs53;
        lhs(22,22)=-clhs39*clhs476 - clhs393*clhs432 - clhs402*clhs433 - clhs477*clhs53;
        lhs(22,23)=-clhs39*clhs478 - clhs413*clhs432 - clhs422*clhs433 - clhs479*clhs53;
        lhs(22,24)=0;
        lhs(22,25)=-clhs39*clhs480;
        lhs(22,26)=-clhs481*clhs53;
        lhs(22,27)=0;
        lhs(23,0)=penalty_parameter*(clhs39*clhs582 + clhs53*clhs583);
        lhs(23,1)=penalty_parameter*(clhs39*clhs584 + clhs53*clhs585);
        lhs(23,2)=penalty_parameter*(clhs39*clhs586 + clhs53*clhs587);
        lhs(23,3)=penalty_parameter*(clhs39*clhs588 + clhs53*clhs589);
        lhs(23,4)=penalty_parameter*(clhs39*clhs590 + clhs53*clhs591);
        lhs(23,5)=penalty_parameter*(clhs39*clhs592 + clhs53*clhs593);
        lhs(23,6)=penalty_parameter*(clhs39*clhs594 + clhs53*clhs595);
        lhs(23,7)=penalty_parameter*(clhs39*clhs596 + clhs53*clhs597);
        lhs(23,8)=penalty_parameter*(clhs39*clhs598 + clhs53*clhs599);
        lhs(23,9)=penalty_parameter*(clhs39*clhs600 + clhs53*clhs601);
        lhs(23,10)=penalty_parameter*(clhs39*clhs602 + clhs53*clhs603);
        lhs(23,11)=penalty_parameter*(clhs39*clhs604 + clhs53*clhs605);
        lhs(23,12)=-clhs193*clhs484 - clhs202*clhs485 - clhs39*clhs508 - clhs509*clhs53;
        lhs(23,13)=-clhs213*clhs484 - clhs222*clhs485 - clhs39*clhs510 - clhs511*clhs53;
        lhs(23,14)=-clhs233*clhs484 - clhs242*clhs485 - clhs39*clhs512 - clhs513*clhs53;
        lhs(23,15)=-clhs253*clhs484 - clhs262*clhs485 - clhs39*clhs514 - clhs515*clhs53;
        lhs(23,16)=-clhs273*clhs484 - clhs282*clhs485 - clhs39*clhs516 - clhs517*clhs53;
        lhs(23,17)=-clhs293*clhs484 - clhs302*clhs485 - clhs39*clhs518 - clhs519*clhs53;
        lhs(23,18)=-clhs313*clhs484 - clhs322*clhs485 - clhs39*clhs520 - clhs521*clhs53;
        lhs(23,19)=-clhs333*clhs484 - clhs342*clhs485 - clhs39*clhs522 - clhs523*clhs53;
        lhs(23,20)=-clhs353*clhs484 - clhs362*clhs485 - clhs39*clhs524 - clhs525*clhs53;
        lhs(23,21)=-clhs373*clhs484 - clhs382*clhs485 - clhs39*clhs526 - clhs527*clhs53;
        lhs(23,22)=-clhs39*clhs528 - clhs393*clhs484 - clhs402*clhs485 - clhs529*clhs53;
        lhs(23,23)=-clhs39*clhs530 - clhs413*clhs484 - clhs422*clhs485 - clhs53*clhs531;
        lhs(23,24)=0;
        lhs(23,25)=-clhs39*clhs532;
        lhs(23,26)=-clhs53*clhs533;
        lhs(23,27)=0;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=clhs606;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs20*scale_factor;
        lhs(25,1)=clhs60*scale_factor;
        lhs(25,2)=clhs72*scale_factor;
        lhs(25,3)=clhs84*scale_factor;
        lhs(25,4)=clhs96*scale_factor;
        lhs(25,5)=clhs108*scale_factor;
        lhs(25,6)=clhs120*scale_factor;
        lhs(25,7)=clhs132*scale_factor;
        lhs(25,8)=clhs144*scale_factor;
        lhs(25,9)=clhs156*scale_factor;
        lhs(25,10)=clhs168*scale_factor;
        lhs(25,11)=clhs180*scale_factor;
        lhs(25,12)=-clhs197*scale_factor;
        lhs(25,13)=-clhs217*scale_factor;
        lhs(25,14)=-clhs237*scale_factor;
        lhs(25,15)=-clhs257*scale_factor;
        lhs(25,16)=-clhs277*scale_factor;
        lhs(25,17)=-clhs297*scale_factor;
        lhs(25,18)=-clhs317*scale_factor;
        lhs(25,19)=-clhs337*scale_factor;
        lhs(25,20)=-clhs357*scale_factor;
        lhs(25,21)=-clhs377*scale_factor;
        lhs(25,22)=-clhs397*scale_factor;
        lhs(25,23)=-clhs417*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs30*scale_factor;
        lhs(26,1)=clhs66*scale_factor;
        lhs(26,2)=clhs78*scale_factor;
        lhs(26,3)=clhs90*scale_factor;
        lhs(26,4)=clhs102*scale_factor;
        lhs(26,5)=clhs114*scale_factor;
        lhs(26,6)=clhs126*scale_factor;
        lhs(26,7)=clhs138*scale_factor;
        lhs(26,8)=clhs150*scale_factor;
        lhs(26,9)=clhs162*scale_factor;
        lhs(26,10)=clhs174*scale_factor;
        lhs(26,11)=clhs186*scale_factor;
        lhs(26,12)=-clhs206*scale_factor;
        lhs(26,13)=-clhs226*scale_factor;
        lhs(26,14)=-clhs246*scale_factor;
        lhs(26,15)=-clhs266*scale_factor;
        lhs(26,16)=-clhs286*scale_factor;
        lhs(26,17)=-clhs306*scale_factor;
        lhs(26,18)=-clhs326*scale_factor;
        lhs(26,19)=-clhs346*scale_factor;
        lhs(26,20)=-clhs366*scale_factor;
        lhs(26,21)=-clhs386*scale_factor;
        lhs(26,22)=-clhs406*scale_factor;
        lhs(26,23)=-clhs426*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs606;
    }
    else if (rActiveInactive == 14 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(1,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(1,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(1,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(1,0)*penalty_parameter;
        const double clhs22 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(2,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(2,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(2,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(2,0)*penalty_parameter;
        const double clhs32 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs33 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs34 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs35 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs36 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs37 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs38 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs39 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs40 =     normalslave(3,0)*(clhs16*clhs33 + clhs17*clhs35 + clhs18*clhs37 + clhs19*clhs39 + clhs32) + normalslave(3,1)*(clhs1*clhs33 + clhs3*clhs35 + clhs37*clhs6 + clhs39*clhs9) + normalslave(3,2)*(clhs12*clhs33 + clhs13*clhs35 + clhs14*clhs37 + clhs15*clhs39);
        const double clhs41 =     clhs40*normalslave(3,0)*penalty_parameter;
        const double clhs42 =     X1(0,0) + u1(0,0);
        const double clhs43 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs44 =     X1(1,0) + u1(1,0);
        const double clhs45 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs46 =     X1(2,0) + u1(2,0);
        const double clhs47 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs48 =     X1(3,0) + u1(3,0);
        const double clhs49 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs50 =     X1(0,1) + u1(0,1);
        const double clhs51 =     X1(1,1) + u1(1,1);
        const double clhs52 =     X1(2,1) + u1(2,1);
        const double clhs53 =     X1(3,1) + u1(3,1);
        const double clhs54 =     X1(0,2) + u1(0,2);
        const double clhs55 =     X1(1,2) + u1(1,2);
        const double clhs56 =     X1(2,2) + u1(2,2);
        const double clhs57 =     X1(3,2) + u1(3,2);
        const double clhs58 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs42*clhs43 + clhs44*clhs45 + clhs46*clhs47 + clhs48*clhs49) + normalslave(1,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs43*clhs50 + clhs45*clhs51 + clhs47*clhs52 + clhs49*clhs53 - clhs6*clhs7) + normalslave(1,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs43*clhs54 + clhs45*clhs55 + clhs47*clhs56 + clhs49*clhs57));
        const double clhs59 =     clhs58*normalslave(1,0);
        const double clhs60 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs61 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs62 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs63 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs64 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs42*clhs60 + clhs44*clhs61 + clhs46*clhs62 + clhs48*clhs63) + normalslave(2,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs50*clhs60 + clhs51*clhs61 + clhs52*clhs62 + clhs53*clhs63) + normalslave(2,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs54*clhs60 + clhs55*clhs61 + clhs56*clhs62 + clhs57*clhs63));
        const double clhs65 =     clhs64*normalslave(2,0);
        const double clhs66 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs67 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs68 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs69 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs70 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs32 - clhs17*clhs34 - clhs18*clhs36 - clhs19*clhs38 + clhs42*clhs66 + clhs44*clhs67 + clhs46*clhs68 + clhs48*clhs69) + normalslave(3,1)*(-clhs1*clhs32 - clhs3*clhs34 - clhs36*clhs6 - clhs38*clhs9 + clhs50*clhs66 + clhs51*clhs67 + clhs52*clhs68 + clhs53*clhs69) + normalslave(3,2)*(-clhs12*clhs32 - clhs13*clhs34 - clhs14*clhs36 - clhs15*clhs38 + clhs54*clhs66 + clhs55*clhs67 + clhs56*clhs68 + clhs57*clhs69));
        const double clhs71 =     clhs70*normalslave(3,0);
        const double clhs72 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs73 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs74 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs75 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs76 =     normalslave(1,0)*(clhs16*clhs72 + clhs17*clhs73 + clhs18*clhs74 + clhs19*clhs75) + normalslave(1,1)*(clhs0 + clhs1*clhs72 + clhs3*clhs73 + clhs6*clhs74 + clhs75*clhs9) + normalslave(1,2)*(clhs12*clhs72 + clhs13*clhs73 + clhs14*clhs74 + clhs15*clhs75);
        const double clhs77 =     clhs76*normalslave(1,0)*penalty_parameter;
        const double clhs78 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs79 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs80 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs81 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs82 =     normalslave(2,0)*(clhs16*clhs78 + clhs17*clhs79 + clhs18*clhs80 + clhs19*clhs81) + normalslave(2,1)*(clhs1*clhs78 + clhs22 + clhs3*clhs79 + clhs6*clhs80 + clhs81*clhs9) + normalslave(2,2)*(clhs12*clhs78 + clhs13*clhs79 + clhs14*clhs80 + clhs15*clhs81);
        const double clhs83 =     clhs82*normalslave(2,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs85 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs86 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs87 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs88 =     normalslave(3,0)*(clhs16*clhs84 + clhs17*clhs85 + clhs18*clhs86 + clhs19*clhs87) + normalslave(3,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs32 + clhs6*clhs86 + clhs87*clhs9) + normalslave(3,2)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86 + clhs15*clhs87);
        const double clhs89 =     clhs88*normalslave(3,0)*penalty_parameter;
        const double clhs90 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs91 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs92 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs93 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs94 =     normalslave(1,0)*(clhs16*clhs90 + clhs17*clhs91 + clhs18*clhs92 + clhs19*clhs93) + normalslave(1,1)*(clhs1*clhs90 + clhs3*clhs91 + clhs6*clhs92 + clhs9*clhs93) + normalslave(1,2)*(clhs0 + clhs12*clhs90 + clhs13*clhs91 + clhs14*clhs92 + clhs15*clhs93);
        const double clhs95 =     clhs94*normalslave(1,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs97 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs98 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs99 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs100 =     normalslave(2,0)*(clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(2,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(2,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99 + clhs22);
        const double clhs101 =     clhs100*normalslave(2,0)*penalty_parameter;
        const double clhs102 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs103 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs104 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs105 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs106 =     normalslave(3,0)*(clhs102*clhs16 + clhs103*clhs17 + clhs104*clhs18 + clhs105*clhs19) + normalslave(3,1)*(clhs1*clhs102 + clhs103*clhs3 + clhs104*clhs6 + clhs105*clhs9) + normalslave(3,2)*(clhs102*clhs12 + clhs103*clhs13 + clhs104*clhs14 + clhs105*clhs15 + clhs32);
        const double clhs107 =     clhs106*normalslave(3,0)*penalty_parameter;
        const double clhs108 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs109 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs110 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs111 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs112 =     normalslave(1,0)*(clhs108*clhs16 + clhs109*clhs17 + clhs110*clhs18 + clhs111*clhs19 + clhs4) + normalslave(1,1)*(clhs1*clhs108 + clhs109*clhs3 + clhs110*clhs6 + clhs111*clhs9) + normalslave(1,2)*(clhs108*clhs12 + clhs109*clhs13 + clhs110*clhs14 + clhs111*clhs15);
        const double clhs113 =     clhs112*normalslave(1,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs115 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs116 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs117 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs118 =     normalslave(2,0)*(clhs114*clhs16 + clhs115*clhs17 + clhs116*clhs18 + clhs117*clhs19 + clhs24) + normalslave(2,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6 + clhs117*clhs9) + normalslave(2,2)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14 + clhs117*clhs15);
        const double clhs119 =     clhs118*normalslave(2,0)*penalty_parameter;
        const double clhs120 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs121 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs122 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs123 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs124 =     normalslave(3,0)*(clhs120*clhs16 + clhs121*clhs17 + clhs122*clhs18 + clhs123*clhs19 + clhs34) + normalslave(3,1)*(clhs1*clhs120 + clhs121*clhs3 + clhs122*clhs6 + clhs123*clhs9) + normalslave(3,2)*(clhs12*clhs120 + clhs121*clhs13 + clhs122*clhs14 + clhs123*clhs15);
        const double clhs125 =     clhs124*normalslave(3,0)*penalty_parameter;
        const double clhs126 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs127 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs128 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs129 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs130 =     normalslave(1,0)*(clhs126*clhs16 + clhs127*clhs17 + clhs128*clhs18 + clhs129*clhs19) + normalslave(1,1)*(clhs1*clhs126 + clhs127*clhs3 + clhs128*clhs6 + clhs129*clhs9 + clhs4) + normalslave(1,2)*(clhs12*clhs126 + clhs127*clhs13 + clhs128*clhs14 + clhs129*clhs15);
        const double clhs131 =     clhs130*normalslave(1,0)*penalty_parameter;
        const double clhs132 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs133 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs134 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs135 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs136 =     normalslave(2,0)*(clhs132*clhs16 + clhs133*clhs17 + clhs134*clhs18 + clhs135*clhs19) + normalslave(2,1)*(clhs1*clhs132 + clhs133*clhs3 + clhs134*clhs6 + clhs135*clhs9 + clhs24) + normalslave(2,2)*(clhs12*clhs132 + clhs13*clhs133 + clhs134*clhs14 + clhs135*clhs15);
        const double clhs137 =     clhs136*normalslave(2,0)*penalty_parameter;
        const double clhs138 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs139 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs140 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs141 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs142 =     normalslave(3,0)*(clhs138*clhs16 + clhs139*clhs17 + clhs140*clhs18 + clhs141*clhs19) + normalslave(3,1)*(clhs1*clhs138 + clhs139*clhs3 + clhs140*clhs6 + clhs141*clhs9 + clhs34) + normalslave(3,2)*(clhs12*clhs138 + clhs13*clhs139 + clhs14*clhs140 + clhs141*clhs15);
        const double clhs143 =     clhs142*normalslave(3,0)*penalty_parameter;
        const double clhs144 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs145 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs146 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs147 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs148 =     normalslave(1,0)*(clhs144*clhs16 + clhs145*clhs17 + clhs146*clhs18 + clhs147*clhs19) + normalslave(1,1)*(clhs1*clhs144 + clhs145*clhs3 + clhs146*clhs6 + clhs147*clhs9) + normalslave(1,2)*(clhs12*clhs144 + clhs13*clhs145 + clhs14*clhs146 + clhs147*clhs15 + clhs4);
        const double clhs149 =     clhs148*normalslave(1,0)*penalty_parameter;
        const double clhs150 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs151 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs152 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs153 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs154 =     normalslave(2,0)*(clhs150*clhs16 + clhs151*clhs17 + clhs152*clhs18 + clhs153*clhs19) + normalslave(2,1)*(clhs1*clhs150 + clhs151*clhs3 + clhs152*clhs6 + clhs153*clhs9) + normalslave(2,2)*(clhs12*clhs150 + clhs13*clhs151 + clhs14*clhs152 + clhs15*clhs153 + clhs24);
        const double clhs155 =     clhs154*normalslave(2,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs157 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs158 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs159 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs160 =     normalslave(3,0)*(clhs156*clhs16 + clhs157*clhs17 + clhs158*clhs18 + clhs159*clhs19) + normalslave(3,1)*(clhs1*clhs156 + clhs157*clhs3 + clhs158*clhs6 + clhs159*clhs9) + normalslave(3,2)*(clhs12*clhs156 + clhs13*clhs157 + clhs14*clhs158 + clhs15*clhs159 + clhs34);
        const double clhs161 =     clhs160*normalslave(3,0)*penalty_parameter;
        const double clhs162 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs163 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs164 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs165 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs166 =     normalslave(1,0)*(clhs16*clhs162 + clhs163*clhs17 + clhs164*clhs18 + clhs165*clhs19 + clhs7) + normalslave(1,1)*(clhs1*clhs162 + clhs163*clhs3 + clhs164*clhs6 + clhs165*clhs9) + normalslave(1,2)*(clhs12*clhs162 + clhs13*clhs163 + clhs14*clhs164 + clhs15*clhs165);
        const double clhs167 =     clhs166*normalslave(1,0)*penalty_parameter;
        const double clhs168 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs169 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs170 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs171 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs172 =     normalslave(2,0)*(clhs16*clhs168 + clhs169*clhs17 + clhs170*clhs18 + clhs171*clhs19 + clhs26) + normalslave(2,1)*(clhs1*clhs168 + clhs169*clhs3 + clhs170*clhs6 + clhs171*clhs9) + normalslave(2,2)*(clhs12*clhs168 + clhs13*clhs169 + clhs14*clhs170 + clhs15*clhs171);
        const double clhs173 =     clhs172*normalslave(2,0)*penalty_parameter;
        const double clhs174 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs175 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs176 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs177 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs178 =     normalslave(3,0)*(clhs16*clhs174 + clhs17*clhs175 + clhs176*clhs18 + clhs177*clhs19 + clhs36) + normalslave(3,1)*(clhs1*clhs174 + clhs175*clhs3 + clhs176*clhs6 + clhs177*clhs9) + normalslave(3,2)*(clhs12*clhs174 + clhs13*clhs175 + clhs14*clhs176 + clhs15*clhs177);
        const double clhs179 =     clhs178*normalslave(3,0)*penalty_parameter;
        const double clhs180 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs181 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs182 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs183 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs184 =     normalslave(1,0)*(clhs16*clhs180 + clhs17*clhs181 + clhs18*clhs182 + clhs183*clhs19) + normalslave(1,1)*(clhs1*clhs180 + clhs181*clhs3 + clhs182*clhs6 + clhs183*clhs9 + clhs7) + normalslave(1,2)*(clhs12*clhs180 + clhs13*clhs181 + clhs14*clhs182 + clhs15*clhs183);
        const double clhs185 =     clhs184*normalslave(1,0)*penalty_parameter;
        const double clhs186 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs187 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs188 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs189 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs190 =     normalslave(2,0)*(clhs16*clhs186 + clhs17*clhs187 + clhs18*clhs188 + clhs189*clhs19) + normalslave(2,1)*(clhs1*clhs186 + clhs187*clhs3 + clhs188*clhs6 + clhs189*clhs9 + clhs26) + normalslave(2,2)*(clhs12*clhs186 + clhs13*clhs187 + clhs14*clhs188 + clhs15*clhs189);
        const double clhs191 =     clhs190*normalslave(2,0)*penalty_parameter;
        const double clhs192 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs193 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs194 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs195 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs196 =     normalslave(3,0)*(clhs16*clhs192 + clhs17*clhs193 + clhs18*clhs194 + clhs19*clhs195) + normalslave(3,1)*(clhs1*clhs192 + clhs193*clhs3 + clhs194*clhs6 + clhs195*clhs9 + clhs36) + normalslave(3,2)*(clhs12*clhs192 + clhs13*clhs193 + clhs14*clhs194 + clhs15*clhs195);
        const double clhs197 =     clhs196*normalslave(3,0)*penalty_parameter;
        const double clhs198 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs199 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs200 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs201 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs202 =     normalslave(1,0)*(clhs16*clhs198 + clhs17*clhs199 + clhs18*clhs200 + clhs19*clhs201) + normalslave(1,1)*(clhs1*clhs198 + clhs199*clhs3 + clhs200*clhs6 + clhs201*clhs9) + normalslave(1,2)*(clhs12*clhs198 + clhs13*clhs199 + clhs14*clhs200 + clhs15*clhs201 + clhs7);
        const double clhs203 =     clhs202*normalslave(1,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs205 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs206 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs207 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs208 =     normalslave(2,0)*(clhs16*clhs204 + clhs17*clhs205 + clhs18*clhs206 + clhs19*clhs207) + normalslave(2,1)*(clhs1*clhs204 + clhs205*clhs3 + clhs206*clhs6 + clhs207*clhs9) + normalslave(2,2)*(clhs12*clhs204 + clhs13*clhs205 + clhs14*clhs206 + clhs15*clhs207 + clhs26);
        const double clhs209 =     clhs208*normalslave(2,0)*penalty_parameter;
        const double clhs210 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs211 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs212 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs213 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs214 =     normalslave(3,0)*(clhs16*clhs210 + clhs17*clhs211 + clhs18*clhs212 + clhs19*clhs213) + normalslave(3,1)*(clhs1*clhs210 + clhs211*clhs3 + clhs212*clhs6 + clhs213*clhs9) + normalslave(3,2)*(clhs12*clhs210 + clhs13*clhs211 + clhs14*clhs212 + clhs15*clhs213 + clhs36);
        const double clhs215 =     clhs214*normalslave(3,0)*penalty_parameter;
        const double clhs216 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs217 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs218 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs219 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs220 =     normalslave(1,0)*(clhs10 + clhs16*clhs216 + clhs17*clhs217 + clhs18*clhs218 + clhs19*clhs219) + normalslave(1,1)*(clhs1*clhs216 + clhs217*clhs3 + clhs218*clhs6 + clhs219*clhs9) + normalslave(1,2)*(clhs12*clhs216 + clhs13*clhs217 + clhs14*clhs218 + clhs15*clhs219);
        const double clhs221 =     clhs220*normalslave(1,0)*penalty_parameter;
        const double clhs222 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs223 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs224 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs225 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs226 =     normalslave(2,0)*(clhs16*clhs222 + clhs17*clhs223 + clhs18*clhs224 + clhs19*clhs225 + clhs28) + normalslave(2,1)*(clhs1*clhs222 + clhs223*clhs3 + clhs224*clhs6 + clhs225*clhs9) + normalslave(2,2)*(clhs12*clhs222 + clhs13*clhs223 + clhs14*clhs224 + clhs15*clhs225);
        const double clhs227 =     clhs226*normalslave(2,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs229 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs230 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs231 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs232 =     normalslave(3,0)*(clhs16*clhs228 + clhs17*clhs229 + clhs18*clhs230 + clhs19*clhs231 + clhs38) + normalslave(3,1)*(clhs1*clhs228 + clhs229*clhs3 + clhs230*clhs6 + clhs231*clhs9) + normalslave(3,2)*(clhs12*clhs228 + clhs13*clhs229 + clhs14*clhs230 + clhs15*clhs231);
        const double clhs233 =     clhs232*normalslave(3,0)*penalty_parameter;
        const double clhs234 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs235 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs236 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs237 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs238 =     normalslave(1,0)*(clhs16*clhs234 + clhs17*clhs235 + clhs18*clhs236 + clhs19*clhs237) + normalslave(1,1)*(clhs1*clhs234 + clhs10 + clhs235*clhs3 + clhs236*clhs6 + clhs237*clhs9) + normalslave(1,2)*(clhs12*clhs234 + clhs13*clhs235 + clhs14*clhs236 + clhs15*clhs237);
        const double clhs239 =     clhs238*normalslave(1,0)*penalty_parameter;
        const double clhs240 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs241 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs242 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs243 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs244 =     normalslave(2,0)*(clhs16*clhs240 + clhs17*clhs241 + clhs18*clhs242 + clhs19*clhs243) + normalslave(2,1)*(clhs1*clhs240 + clhs241*clhs3 + clhs242*clhs6 + clhs243*clhs9 + clhs28) + normalslave(2,2)*(clhs12*clhs240 + clhs13*clhs241 + clhs14*clhs242 + clhs15*clhs243);
        const double clhs245 =     clhs244*normalslave(2,0)*penalty_parameter;
        const double clhs246 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs247 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs248 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs249 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs250 =     normalslave(3,0)*(clhs16*clhs246 + clhs17*clhs247 + clhs18*clhs248 + clhs19*clhs249) + normalslave(3,1)*(clhs1*clhs246 + clhs247*clhs3 + clhs248*clhs6 + clhs249*clhs9 + clhs38) + normalslave(3,2)*(clhs12*clhs246 + clhs13*clhs247 + clhs14*clhs248 + clhs15*clhs249);
        const double clhs251 =     clhs250*normalslave(3,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs253 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs254 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs255 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs256 =     normalslave(1,0)*(clhs16*clhs252 + clhs17*clhs253 + clhs18*clhs254 + clhs19*clhs255) + normalslave(1,1)*(clhs1*clhs252 + clhs253*clhs3 + clhs254*clhs6 + clhs255*clhs9) + normalslave(1,2)*(clhs10 + clhs12*clhs252 + clhs13*clhs253 + clhs14*clhs254 + clhs15*clhs255);
        const double clhs257 =     clhs256*normalslave(1,0)*penalty_parameter;
        const double clhs258 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs259 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs260 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs261 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs262 =     normalslave(2,0)*(clhs16*clhs258 + clhs17*clhs259 + clhs18*clhs260 + clhs19*clhs261) + normalslave(2,1)*(clhs1*clhs258 + clhs259*clhs3 + clhs260*clhs6 + clhs261*clhs9) + normalslave(2,2)*(clhs12*clhs258 + clhs13*clhs259 + clhs14*clhs260 + clhs15*clhs261 + clhs28);
        const double clhs263 =     clhs262*normalslave(2,0)*penalty_parameter;
        const double clhs264 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs265 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs266 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs267 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs268 =     normalslave(3,0)*(clhs16*clhs264 + clhs17*clhs265 + clhs18*clhs266 + clhs19*clhs267) + normalslave(3,1)*(clhs1*clhs264 + clhs265*clhs3 + clhs266*clhs6 + clhs267*clhs9) + normalslave(3,2)*(clhs12*clhs264 + clhs13*clhs265 + clhs14*clhs266 + clhs15*clhs267 + clhs38);
        const double clhs269 =     clhs268*normalslave(3,0)*penalty_parameter;
        const double clhs270 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs271 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs272 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs273 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs274 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs275 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs276 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs277 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs278 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs279 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs280 =     normalslave(1,0)*(-clhs16*clhs270 - clhs17*clhs277 - clhs18*clhs278 - clhs19*clhs279 + clhs273*clhs42 + clhs274*clhs44 + clhs275*clhs46 + clhs276*clhs48 + clhs43) + normalslave(1,1)*(-clhs1*clhs270 + clhs273*clhs50 + clhs274*clhs51 + clhs275*clhs52 + clhs276*clhs53 - clhs277*clhs3 - clhs278*clhs6 - clhs279*clhs9) + normalslave(1,2)*(-clhs12*clhs270 - clhs13*clhs277 - clhs14*clhs278 - clhs15*clhs279 + clhs273*clhs54 + clhs274*clhs55 + clhs275*clhs56 + clhs276*clhs57);
        const double clhs281 =     clhs280*normalslave(1,0)*penalty_parameter;
        const double clhs282 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs283 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs284 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs285 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs286 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs287 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs288 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs289 =     normalslave(2,0)*(-clhs16*clhs271 - clhs17*clhs286 - clhs18*clhs287 - clhs19*clhs288 + clhs282*clhs42 + clhs283*clhs44 + clhs284*clhs46 + clhs285*clhs48 + clhs60) + normalslave(2,1)*(-clhs1*clhs271 + clhs282*clhs50 + clhs283*clhs51 + clhs284*clhs52 + clhs285*clhs53 - clhs286*clhs3 - clhs287*clhs6 - clhs288*clhs9) + normalslave(2,2)*(-clhs12*clhs271 - clhs13*clhs286 - clhs14*clhs287 - clhs15*clhs288 + clhs282*clhs54 + clhs283*clhs55 + clhs284*clhs56 + clhs285*clhs57);
        const double clhs290 =     clhs289*normalslave(2,0)*penalty_parameter;
        const double clhs291 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs292 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs293 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs294 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs295 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs296 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs297 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs298 =     normalslave(3,0)*(-clhs16*clhs272 - clhs17*clhs295 - clhs18*clhs296 - clhs19*clhs297 + clhs291*clhs42 + clhs292*clhs44 + clhs293*clhs46 + clhs294*clhs48 + clhs66) + normalslave(3,1)*(-clhs1*clhs272 + clhs291*clhs50 + clhs292*clhs51 + clhs293*clhs52 + clhs294*clhs53 - clhs295*clhs3 - clhs296*clhs6 - clhs297*clhs9) + normalslave(3,2)*(-clhs12*clhs272 - clhs13*clhs295 - clhs14*clhs296 - clhs15*clhs297 + clhs291*clhs54 + clhs292*clhs55 + clhs293*clhs56 + clhs294*clhs57);
        const double clhs299 =     clhs298*normalslave(3,0)*penalty_parameter;
        const double clhs300 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs301 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs302 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs303 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs304 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs305 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs306 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs307 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs308 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs309 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs310 =     normalslave(1,0)*(-clhs16*clhs300 - clhs17*clhs307 - clhs18*clhs308 - clhs19*clhs309 + clhs303*clhs42 + clhs304*clhs44 + clhs305*clhs46 + clhs306*clhs48) + normalslave(1,1)*(-clhs1*clhs300 - clhs3*clhs307 + clhs303*clhs50 + clhs304*clhs51 + clhs305*clhs52 + clhs306*clhs53 - clhs308*clhs6 - clhs309*clhs9 + clhs43) + normalslave(1,2)*(-clhs12*clhs300 - clhs13*clhs307 - clhs14*clhs308 - clhs15*clhs309 + clhs303*clhs54 + clhs304*clhs55 + clhs305*clhs56 + clhs306*clhs57);
        const double clhs311 =     clhs310*normalslave(1,0)*penalty_parameter;
        const double clhs312 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs313 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs314 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs315 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs316 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs317 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs318 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs319 =     normalslave(2,0)*(-clhs16*clhs301 - clhs17*clhs316 - clhs18*clhs317 - clhs19*clhs318 + clhs312*clhs42 + clhs313*clhs44 + clhs314*clhs46 + clhs315*clhs48) + normalslave(2,1)*(-clhs1*clhs301 - clhs3*clhs316 + clhs312*clhs50 + clhs313*clhs51 + clhs314*clhs52 + clhs315*clhs53 - clhs317*clhs6 - clhs318*clhs9 + clhs60) + normalslave(2,2)*(-clhs12*clhs301 - clhs13*clhs316 - clhs14*clhs317 - clhs15*clhs318 + clhs312*clhs54 + clhs313*clhs55 + clhs314*clhs56 + clhs315*clhs57);
        const double clhs320 =     clhs319*normalslave(2,0)*penalty_parameter;
        const double clhs321 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs322 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs323 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs324 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs325 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs326 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs327 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs328 =     normalslave(3,0)*(-clhs16*clhs302 - clhs17*clhs325 - clhs18*clhs326 - clhs19*clhs327 + clhs321*clhs42 + clhs322*clhs44 + clhs323*clhs46 + clhs324*clhs48) + normalslave(3,1)*(-clhs1*clhs302 - clhs3*clhs325 + clhs321*clhs50 + clhs322*clhs51 + clhs323*clhs52 + clhs324*clhs53 - clhs326*clhs6 - clhs327*clhs9 + clhs66) + normalslave(3,2)*(-clhs12*clhs302 - clhs13*clhs325 - clhs14*clhs326 - clhs15*clhs327 + clhs321*clhs54 + clhs322*clhs55 + clhs323*clhs56 + clhs324*clhs57);
        const double clhs329 =     clhs328*normalslave(3,0)*penalty_parameter;
        const double clhs330 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs331 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs332 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs333 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs334 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs335 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs336 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs337 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs338 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs339 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs340 =     normalslave(1,0)*(-clhs16*clhs330 - clhs17*clhs337 - clhs18*clhs338 - clhs19*clhs339 + clhs333*clhs42 + clhs334*clhs44 + clhs335*clhs46 + clhs336*clhs48) + normalslave(1,1)*(-clhs1*clhs330 - clhs3*clhs337 + clhs333*clhs50 + clhs334*clhs51 + clhs335*clhs52 + clhs336*clhs53 - clhs338*clhs6 - clhs339*clhs9) + normalslave(1,2)*(-clhs12*clhs330 - clhs13*clhs337 - clhs14*clhs338 - clhs15*clhs339 + clhs333*clhs54 + clhs334*clhs55 + clhs335*clhs56 + clhs336*clhs57 + clhs43);
        const double clhs341 =     clhs340*normalslave(1,0)*penalty_parameter;
        const double clhs342 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs343 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs344 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs345 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs346 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs347 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs348 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs349 =     normalslave(2,0)*(-clhs16*clhs331 - clhs17*clhs346 - clhs18*clhs347 - clhs19*clhs348 + clhs342*clhs42 + clhs343*clhs44 + clhs344*clhs46 + clhs345*clhs48) + normalslave(2,1)*(-clhs1*clhs331 - clhs3*clhs346 + clhs342*clhs50 + clhs343*clhs51 + clhs344*clhs52 + clhs345*clhs53 - clhs347*clhs6 - clhs348*clhs9) + normalslave(2,2)*(-clhs12*clhs331 - clhs13*clhs346 - clhs14*clhs347 - clhs15*clhs348 + clhs342*clhs54 + clhs343*clhs55 + clhs344*clhs56 + clhs345*clhs57 + clhs60);
        const double clhs350 =     clhs349*normalslave(2,0)*penalty_parameter;
        const double clhs351 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs352 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs353 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs354 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs355 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs356 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs357 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs358 =     normalslave(3,0)*(-clhs16*clhs332 - clhs17*clhs355 - clhs18*clhs356 - clhs19*clhs357 + clhs351*clhs42 + clhs352*clhs44 + clhs353*clhs46 + clhs354*clhs48) + normalslave(3,1)*(-clhs1*clhs332 - clhs3*clhs355 + clhs351*clhs50 + clhs352*clhs51 + clhs353*clhs52 + clhs354*clhs53 - clhs356*clhs6 - clhs357*clhs9) + normalslave(3,2)*(-clhs12*clhs332 - clhs13*clhs355 - clhs14*clhs356 - clhs15*clhs357 + clhs351*clhs54 + clhs352*clhs55 + clhs353*clhs56 + clhs354*clhs57 + clhs66);
        const double clhs359 =     clhs358*normalslave(3,0)*penalty_parameter;
        const double clhs360 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs361 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs362 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs363 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs364 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs365 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs366 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs367 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs368 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs369 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs370 =     normalslave(1,0)*(-clhs16*clhs360 - clhs17*clhs367 - clhs18*clhs368 - clhs19*clhs369 + clhs363*clhs42 + clhs364*clhs44 + clhs365*clhs46 + clhs366*clhs48 + clhs45) + normalslave(1,1)*(-clhs1*clhs360 - clhs3*clhs367 + clhs363*clhs50 + clhs364*clhs51 + clhs365*clhs52 + clhs366*clhs53 - clhs368*clhs6 - clhs369*clhs9) + normalslave(1,2)*(-clhs12*clhs360 - clhs13*clhs367 - clhs14*clhs368 - clhs15*clhs369 + clhs363*clhs54 + clhs364*clhs55 + clhs365*clhs56 + clhs366*clhs57);
        const double clhs371 =     clhs370*normalslave(1,0)*penalty_parameter;
        const double clhs372 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs373 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs374 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs375 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs376 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs377 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs378 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs379 =     normalslave(2,0)*(-clhs16*clhs361 - clhs17*clhs376 - clhs18*clhs377 - clhs19*clhs378 + clhs372*clhs42 + clhs373*clhs44 + clhs374*clhs46 + clhs375*clhs48 + clhs61) + normalslave(2,1)*(-clhs1*clhs361 - clhs3*clhs376 + clhs372*clhs50 + clhs373*clhs51 + clhs374*clhs52 + clhs375*clhs53 - clhs377*clhs6 - clhs378*clhs9) + normalslave(2,2)*(-clhs12*clhs361 - clhs13*clhs376 - clhs14*clhs377 - clhs15*clhs378 + clhs372*clhs54 + clhs373*clhs55 + clhs374*clhs56 + clhs375*clhs57);
        const double clhs380 =     clhs379*normalslave(2,0)*penalty_parameter;
        const double clhs381 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs382 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs383 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs384 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs385 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs386 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs387 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs388 =     normalslave(3,0)*(-clhs16*clhs362 - clhs17*clhs385 - clhs18*clhs386 - clhs19*clhs387 + clhs381*clhs42 + clhs382*clhs44 + clhs383*clhs46 + clhs384*clhs48 + clhs67) + normalslave(3,1)*(-clhs1*clhs362 - clhs3*clhs385 + clhs381*clhs50 + clhs382*clhs51 + clhs383*clhs52 + clhs384*clhs53 - clhs386*clhs6 - clhs387*clhs9) + normalslave(3,2)*(-clhs12*clhs362 - clhs13*clhs385 - clhs14*clhs386 - clhs15*clhs387 + clhs381*clhs54 + clhs382*clhs55 + clhs383*clhs56 + clhs384*clhs57);
        const double clhs389 =     clhs388*normalslave(3,0)*penalty_parameter;
        const double clhs390 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs391 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs392 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs393 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs394 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs395 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs396 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs397 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs398 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs399 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs400 =     normalslave(1,0)*(-clhs16*clhs390 - clhs17*clhs397 - clhs18*clhs398 - clhs19*clhs399 + clhs393*clhs42 + clhs394*clhs44 + clhs395*clhs46 + clhs396*clhs48) + normalslave(1,1)*(-clhs1*clhs390 - clhs3*clhs397 + clhs393*clhs50 + clhs394*clhs51 + clhs395*clhs52 + clhs396*clhs53 - clhs398*clhs6 - clhs399*clhs9 + clhs45) + normalslave(1,2)*(-clhs12*clhs390 - clhs13*clhs397 - clhs14*clhs398 - clhs15*clhs399 + clhs393*clhs54 + clhs394*clhs55 + clhs395*clhs56 + clhs396*clhs57);
        const double clhs401 =     clhs400*normalslave(1,0)*penalty_parameter;
        const double clhs402 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs403 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs404 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs405 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs406 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs407 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs408 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs409 =     normalslave(2,0)*(-clhs16*clhs391 - clhs17*clhs406 - clhs18*clhs407 - clhs19*clhs408 + clhs402*clhs42 + clhs403*clhs44 + clhs404*clhs46 + clhs405*clhs48) + normalslave(2,1)*(-clhs1*clhs391 - clhs3*clhs406 + clhs402*clhs50 + clhs403*clhs51 + clhs404*clhs52 + clhs405*clhs53 - clhs407*clhs6 - clhs408*clhs9 + clhs61) + normalslave(2,2)*(-clhs12*clhs391 - clhs13*clhs406 - clhs14*clhs407 - clhs15*clhs408 + clhs402*clhs54 + clhs403*clhs55 + clhs404*clhs56 + clhs405*clhs57);
        const double clhs410 =     clhs409*normalslave(2,0)*penalty_parameter;
        const double clhs411 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs412 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs413 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs414 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs415 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs416 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs417 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs418 =     normalslave(3,0)*(-clhs16*clhs392 - clhs17*clhs415 - clhs18*clhs416 - clhs19*clhs417 + clhs411*clhs42 + clhs412*clhs44 + clhs413*clhs46 + clhs414*clhs48) + normalslave(3,1)*(-clhs1*clhs392 - clhs3*clhs415 + clhs411*clhs50 + clhs412*clhs51 + clhs413*clhs52 + clhs414*clhs53 - clhs416*clhs6 - clhs417*clhs9 + clhs67) + normalslave(3,2)*(-clhs12*clhs392 - clhs13*clhs415 - clhs14*clhs416 - clhs15*clhs417 + clhs411*clhs54 + clhs412*clhs55 + clhs413*clhs56 + clhs414*clhs57);
        const double clhs419 =     clhs418*normalslave(3,0)*penalty_parameter;
        const double clhs420 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs421 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs422 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs423 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs424 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs425 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs426 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs427 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs428 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs429 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs430 =     normalslave(1,0)*(-clhs16*clhs420 - clhs17*clhs427 - clhs18*clhs428 - clhs19*clhs429 + clhs42*clhs423 + clhs424*clhs44 + clhs425*clhs46 + clhs426*clhs48) + normalslave(1,1)*(-clhs1*clhs420 - clhs3*clhs427 + clhs423*clhs50 + clhs424*clhs51 + clhs425*clhs52 + clhs426*clhs53 - clhs428*clhs6 - clhs429*clhs9) + normalslave(1,2)*(-clhs12*clhs420 - clhs13*clhs427 - clhs14*clhs428 - clhs15*clhs429 + clhs423*clhs54 + clhs424*clhs55 + clhs425*clhs56 + clhs426*clhs57 + clhs45);
        const double clhs431 =     clhs430*normalslave(1,0)*penalty_parameter;
        const double clhs432 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs433 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs434 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs435 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs436 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs437 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs438 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs439 =     normalslave(2,0)*(-clhs16*clhs421 - clhs17*clhs436 - clhs18*clhs437 - clhs19*clhs438 + clhs42*clhs432 + clhs433*clhs44 + clhs434*clhs46 + clhs435*clhs48) + normalslave(2,1)*(-clhs1*clhs421 - clhs3*clhs436 + clhs432*clhs50 + clhs433*clhs51 + clhs434*clhs52 + clhs435*clhs53 - clhs437*clhs6 - clhs438*clhs9) + normalslave(2,2)*(-clhs12*clhs421 - clhs13*clhs436 - clhs14*clhs437 - clhs15*clhs438 + clhs432*clhs54 + clhs433*clhs55 + clhs434*clhs56 + clhs435*clhs57 + clhs61);
        const double clhs440 =     clhs439*normalslave(2,0)*penalty_parameter;
        const double clhs441 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs442 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs443 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs444 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs445 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs446 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs447 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs448 =     normalslave(3,0)*(-clhs16*clhs422 - clhs17*clhs445 - clhs18*clhs446 - clhs19*clhs447 + clhs42*clhs441 + clhs44*clhs442 + clhs443*clhs46 + clhs444*clhs48) + normalslave(3,1)*(-clhs1*clhs422 - clhs3*clhs445 + clhs441*clhs50 + clhs442*clhs51 + clhs443*clhs52 + clhs444*clhs53 - clhs446*clhs6 - clhs447*clhs9) + normalslave(3,2)*(-clhs12*clhs422 - clhs13*clhs445 - clhs14*clhs446 - clhs15*clhs447 + clhs441*clhs54 + clhs442*clhs55 + clhs443*clhs56 + clhs444*clhs57 + clhs67);
        const double clhs449 =     clhs448*normalslave(3,0)*penalty_parameter;
        const double clhs450 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs451 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs452 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs453 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs454 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs455 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs456 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs457 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs458 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs459 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs460 =     normalslave(1,0)*(-clhs16*clhs450 - clhs17*clhs457 - clhs18*clhs458 - clhs19*clhs459 + clhs42*clhs453 + clhs44*clhs454 + clhs455*clhs46 + clhs456*clhs48 + clhs47) + normalslave(1,1)*(-clhs1*clhs450 - clhs3*clhs457 + clhs453*clhs50 + clhs454*clhs51 + clhs455*clhs52 + clhs456*clhs53 - clhs458*clhs6 - clhs459*clhs9) + normalslave(1,2)*(-clhs12*clhs450 - clhs13*clhs457 - clhs14*clhs458 - clhs15*clhs459 + clhs453*clhs54 + clhs454*clhs55 + clhs455*clhs56 + clhs456*clhs57);
        const double clhs461 =     clhs460*normalslave(1,0)*penalty_parameter;
        const double clhs462 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs463 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs464 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs465 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs466 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs467 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs468 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs469 =     normalslave(2,0)*(-clhs16*clhs451 - clhs17*clhs466 - clhs18*clhs467 - clhs19*clhs468 + clhs42*clhs462 + clhs44*clhs463 + clhs46*clhs464 + clhs465*clhs48 + clhs62) + normalslave(2,1)*(-clhs1*clhs451 - clhs3*clhs466 + clhs462*clhs50 + clhs463*clhs51 + clhs464*clhs52 + clhs465*clhs53 - clhs467*clhs6 - clhs468*clhs9) + normalslave(2,2)*(-clhs12*clhs451 - clhs13*clhs466 - clhs14*clhs467 - clhs15*clhs468 + clhs462*clhs54 + clhs463*clhs55 + clhs464*clhs56 + clhs465*clhs57);
        const double clhs470 =     clhs469*normalslave(2,0)*penalty_parameter;
        const double clhs471 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs472 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs473 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs474 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs475 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs476 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs477 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs478 =     normalslave(3,0)*(-clhs16*clhs452 - clhs17*clhs475 - clhs18*clhs476 - clhs19*clhs477 + clhs42*clhs471 + clhs44*clhs472 + clhs46*clhs473 + clhs474*clhs48 + clhs68) + normalslave(3,1)*(-clhs1*clhs452 - clhs3*clhs475 + clhs471*clhs50 + clhs472*clhs51 + clhs473*clhs52 + clhs474*clhs53 - clhs476*clhs6 - clhs477*clhs9) + normalslave(3,2)*(-clhs12*clhs452 - clhs13*clhs475 - clhs14*clhs476 - clhs15*clhs477 + clhs471*clhs54 + clhs472*clhs55 + clhs473*clhs56 + clhs474*clhs57);
        const double clhs479 =     clhs478*normalslave(3,0)*penalty_parameter;
        const double clhs480 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs481 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs482 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs483 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs484 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs485 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs486 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs487 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs488 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs489 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs490 =     normalslave(1,0)*(-clhs16*clhs480 - clhs17*clhs487 - clhs18*clhs488 - clhs19*clhs489 + clhs42*clhs483 + clhs44*clhs484 + clhs46*clhs485 + clhs48*clhs486) + normalslave(1,1)*(-clhs1*clhs480 - clhs3*clhs487 + clhs47 + clhs483*clhs50 + clhs484*clhs51 + clhs485*clhs52 + clhs486*clhs53 - clhs488*clhs6 - clhs489*clhs9) + normalslave(1,2)*(-clhs12*clhs480 - clhs13*clhs487 - clhs14*clhs488 - clhs15*clhs489 + clhs483*clhs54 + clhs484*clhs55 + clhs485*clhs56 + clhs486*clhs57);
        const double clhs491 =     clhs490*normalslave(1,0)*penalty_parameter;
        const double clhs492 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs493 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs494 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs495 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs496 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs497 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs498 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs499 =     normalslave(2,0)*(-clhs16*clhs481 - clhs17*clhs496 - clhs18*clhs497 - clhs19*clhs498 + clhs42*clhs492 + clhs44*clhs493 + clhs46*clhs494 + clhs48*clhs495) + normalslave(2,1)*(-clhs1*clhs481 - clhs3*clhs496 + clhs492*clhs50 + clhs493*clhs51 + clhs494*clhs52 + clhs495*clhs53 - clhs497*clhs6 - clhs498*clhs9 + clhs62) + normalslave(2,2)*(-clhs12*clhs481 - clhs13*clhs496 - clhs14*clhs497 - clhs15*clhs498 + clhs492*clhs54 + clhs493*clhs55 + clhs494*clhs56 + clhs495*clhs57);
        const double clhs500 =     clhs499*normalslave(2,0)*penalty_parameter;
        const double clhs501 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs502 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs503 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs504 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs505 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs506 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs507 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs508 =     normalslave(3,0)*(-clhs16*clhs482 - clhs17*clhs505 - clhs18*clhs506 - clhs19*clhs507 + clhs42*clhs501 + clhs44*clhs502 + clhs46*clhs503 + clhs48*clhs504) + normalslave(3,1)*(-clhs1*clhs482 - clhs3*clhs505 + clhs50*clhs501 + clhs502*clhs51 + clhs503*clhs52 + clhs504*clhs53 - clhs506*clhs6 - clhs507*clhs9 + clhs68) + normalslave(3,2)*(-clhs12*clhs482 - clhs13*clhs505 - clhs14*clhs506 - clhs15*clhs507 + clhs501*clhs54 + clhs502*clhs55 + clhs503*clhs56 + clhs504*clhs57);
        const double clhs509 =     clhs508*normalslave(3,0)*penalty_parameter;
        const double clhs510 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs511 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs512 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs513 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs514 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs515 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs516 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs517 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs518 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs519 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs520 =     normalslave(1,0)*(-clhs16*clhs510 - clhs17*clhs517 - clhs18*clhs518 - clhs19*clhs519 + clhs42*clhs513 + clhs44*clhs514 + clhs46*clhs515 + clhs48*clhs516) + normalslave(1,1)*(-clhs1*clhs510 - clhs3*clhs517 + clhs50*clhs513 + clhs51*clhs514 + clhs515*clhs52 + clhs516*clhs53 - clhs518*clhs6 - clhs519*clhs9) + normalslave(1,2)*(-clhs12*clhs510 - clhs13*clhs517 - clhs14*clhs518 - clhs15*clhs519 + clhs47 + clhs513*clhs54 + clhs514*clhs55 + clhs515*clhs56 + clhs516*clhs57);
        const double clhs521 =     clhs520*normalslave(1,0)*penalty_parameter;
        const double clhs522 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs523 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs524 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs525 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs526 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs527 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs528 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs529 =     normalslave(2,0)*(-clhs16*clhs511 - clhs17*clhs526 - clhs18*clhs527 - clhs19*clhs528 + clhs42*clhs522 + clhs44*clhs523 + clhs46*clhs524 + clhs48*clhs525) + normalslave(2,1)*(-clhs1*clhs511 - clhs3*clhs526 + clhs50*clhs522 + clhs51*clhs523 + clhs52*clhs524 + clhs525*clhs53 - clhs527*clhs6 - clhs528*clhs9) + normalslave(2,2)*(-clhs12*clhs511 - clhs13*clhs526 - clhs14*clhs527 - clhs15*clhs528 + clhs522*clhs54 + clhs523*clhs55 + clhs524*clhs56 + clhs525*clhs57 + clhs62);
        const double clhs530 =     clhs529*normalslave(2,0)*penalty_parameter;
        const double clhs531 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs532 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs533 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs534 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs535 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs536 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs537 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs538 =     normalslave(3,0)*(-clhs16*clhs512 - clhs17*clhs535 - clhs18*clhs536 - clhs19*clhs537 + clhs42*clhs531 + clhs44*clhs532 + clhs46*clhs533 + clhs48*clhs534) + normalslave(3,1)*(-clhs1*clhs512 - clhs3*clhs535 + clhs50*clhs531 + clhs51*clhs532 + clhs52*clhs533 + clhs53*clhs534 - clhs536*clhs6 - clhs537*clhs9) + normalslave(3,2)*(-clhs12*clhs512 - clhs13*clhs535 - clhs14*clhs536 - clhs15*clhs537 + clhs531*clhs54 + clhs532*clhs55 + clhs533*clhs56 + clhs534*clhs57 + clhs68);
        const double clhs539 =     clhs538*normalslave(3,0)*penalty_parameter;
        const double clhs540 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs541 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs542 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs543 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs544 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs545 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs546 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs547 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs548 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs549 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs550 =     normalslave(1,0)*(-clhs16*clhs540 - clhs17*clhs547 - clhs18*clhs548 - clhs19*clhs549 + clhs42*clhs543 + clhs44*clhs544 + clhs46*clhs545 + clhs48*clhs546 + clhs49) + normalslave(1,1)*(-clhs1*clhs540 - clhs3*clhs547 + clhs50*clhs543 + clhs51*clhs544 + clhs52*clhs545 + clhs53*clhs546 - clhs548*clhs6 - clhs549*clhs9) + normalslave(1,2)*(-clhs12*clhs540 - clhs13*clhs547 - clhs14*clhs548 - clhs15*clhs549 + clhs54*clhs543 + clhs544*clhs55 + clhs545*clhs56 + clhs546*clhs57);
        const double clhs551 =     clhs550*normalslave(1,0)*penalty_parameter;
        const double clhs552 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs553 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs554 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs555 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs556 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs557 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs558 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs559 =     normalslave(2,0)*(-clhs16*clhs541 - clhs17*clhs556 - clhs18*clhs557 - clhs19*clhs558 + clhs42*clhs552 + clhs44*clhs553 + clhs46*clhs554 + clhs48*clhs555 + clhs63) + normalslave(2,1)*(-clhs1*clhs541 - clhs3*clhs556 + clhs50*clhs552 + clhs51*clhs553 + clhs52*clhs554 + clhs53*clhs555 - clhs557*clhs6 - clhs558*clhs9) + normalslave(2,2)*(-clhs12*clhs541 - clhs13*clhs556 - clhs14*clhs557 - clhs15*clhs558 + clhs54*clhs552 + clhs55*clhs553 + clhs554*clhs56 + clhs555*clhs57);
        const double clhs560 =     clhs559*normalslave(2,0)*penalty_parameter;
        const double clhs561 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs562 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs563 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs564 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs565 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs566 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs567 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs568 =     normalslave(3,0)*(-clhs16*clhs542 - clhs17*clhs565 - clhs18*clhs566 - clhs19*clhs567 + clhs42*clhs561 + clhs44*clhs562 + clhs46*clhs563 + clhs48*clhs564 + clhs69) + normalslave(3,1)*(-clhs1*clhs542 - clhs3*clhs565 + clhs50*clhs561 + clhs51*clhs562 + clhs52*clhs563 + clhs53*clhs564 - clhs566*clhs6 - clhs567*clhs9) + normalslave(3,2)*(-clhs12*clhs542 - clhs13*clhs565 - clhs14*clhs566 - clhs15*clhs567 + clhs54*clhs561 + clhs55*clhs562 + clhs56*clhs563 + clhs564*clhs57);
        const double clhs569 =     clhs568*normalslave(3,0)*penalty_parameter;
        const double clhs570 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs571 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs572 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs573 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs574 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs575 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs576 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs577 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs578 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs579 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs580 =     normalslave(1,0)*(-clhs16*clhs570 - clhs17*clhs577 - clhs18*clhs578 - clhs19*clhs579 + clhs42*clhs573 + clhs44*clhs574 + clhs46*clhs575 + clhs48*clhs576) + normalslave(1,1)*(-clhs1*clhs570 - clhs3*clhs577 + clhs49 + clhs50*clhs573 + clhs51*clhs574 + clhs52*clhs575 + clhs53*clhs576 - clhs578*clhs6 - clhs579*clhs9) + normalslave(1,2)*(-clhs12*clhs570 - clhs13*clhs577 - clhs14*clhs578 - clhs15*clhs579 + clhs54*clhs573 + clhs55*clhs574 + clhs56*clhs575 + clhs57*clhs576);
        const double clhs581 =     clhs580*normalslave(1,0)*penalty_parameter;
        const double clhs582 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs583 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs584 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs585 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs586 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs587 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs588 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs589 =     normalslave(2,0)*(-clhs16*clhs571 - clhs17*clhs586 - clhs18*clhs587 - clhs19*clhs588 + clhs42*clhs582 + clhs44*clhs583 + clhs46*clhs584 + clhs48*clhs585) + normalslave(2,1)*(-clhs1*clhs571 - clhs3*clhs586 + clhs50*clhs582 + clhs51*clhs583 + clhs52*clhs584 + clhs53*clhs585 - clhs587*clhs6 - clhs588*clhs9 + clhs63) + normalslave(2,2)*(-clhs12*clhs571 - clhs13*clhs586 - clhs14*clhs587 - clhs15*clhs588 + clhs54*clhs582 + clhs55*clhs583 + clhs56*clhs584 + clhs57*clhs585);
        const double clhs590 =     clhs589*normalslave(2,0)*penalty_parameter;
        const double clhs591 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs592 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs593 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs594 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs595 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs596 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs597 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs598 =     normalslave(3,0)*(-clhs16*clhs572 - clhs17*clhs595 - clhs18*clhs596 - clhs19*clhs597 + clhs42*clhs591 + clhs44*clhs592 + clhs46*clhs593 + clhs48*clhs594) + normalslave(3,1)*(-clhs1*clhs572 - clhs3*clhs595 + clhs50*clhs591 + clhs51*clhs592 + clhs52*clhs593 + clhs53*clhs594 - clhs596*clhs6 - clhs597*clhs9 + clhs69) + normalslave(3,2)*(-clhs12*clhs572 - clhs13*clhs595 - clhs14*clhs596 - clhs15*clhs597 + clhs54*clhs591 + clhs55*clhs592 + clhs56*clhs593 + clhs57*clhs594);
        const double clhs599 =     clhs598*normalslave(3,0)*penalty_parameter;
        const double clhs600 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs601 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs602 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs603 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs604 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs605 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs606 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs607 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs608 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs609 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs610 =     normalslave(1,0)*(-clhs16*clhs600 - clhs17*clhs607 - clhs18*clhs608 - clhs19*clhs609 + clhs42*clhs603 + clhs44*clhs604 + clhs46*clhs605 + clhs48*clhs606) + normalslave(1,1)*(-clhs1*clhs600 - clhs3*clhs607 + clhs50*clhs603 + clhs51*clhs604 + clhs52*clhs605 + clhs53*clhs606 - clhs6*clhs608 - clhs609*clhs9) + normalslave(1,2)*(-clhs12*clhs600 - clhs13*clhs607 - clhs14*clhs608 - clhs15*clhs609 + clhs49 + clhs54*clhs603 + clhs55*clhs604 + clhs56*clhs605 + clhs57*clhs606);
        const double clhs611 =     clhs610*normalslave(1,0)*penalty_parameter;
        const double clhs612 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs613 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs614 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs615 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs616 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs617 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs618 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs619 =     normalslave(2,0)*(-clhs16*clhs601 - clhs17*clhs616 - clhs18*clhs617 - clhs19*clhs618 + clhs42*clhs612 + clhs44*clhs613 + clhs46*clhs614 + clhs48*clhs615) + normalslave(2,1)*(-clhs1*clhs601 - clhs3*clhs616 + clhs50*clhs612 + clhs51*clhs613 + clhs52*clhs614 + clhs53*clhs615 - clhs6*clhs617 - clhs618*clhs9) + normalslave(2,2)*(-clhs12*clhs601 - clhs13*clhs616 - clhs14*clhs617 - clhs15*clhs618 + clhs54*clhs612 + clhs55*clhs613 + clhs56*clhs614 + clhs57*clhs615 + clhs63);
        const double clhs620 =     clhs619*normalslave(2,0)*penalty_parameter;
        const double clhs621 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs622 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs623 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs624 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs625 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs626 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs627 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs628 =     normalslave(3,0)*(-clhs16*clhs602 - clhs17*clhs625 - clhs18*clhs626 - clhs19*clhs627 + clhs42*clhs621 + clhs44*clhs622 + clhs46*clhs623 + clhs48*clhs624) + normalslave(3,1)*(-clhs1*clhs602 - clhs3*clhs625 + clhs50*clhs621 + clhs51*clhs622 + clhs52*clhs623 + clhs53*clhs624 - clhs6*clhs626 - clhs627*clhs9) + normalslave(3,2)*(-clhs12*clhs602 - clhs13*clhs625 - clhs14*clhs626 - clhs15*clhs627 + clhs54*clhs621 + clhs55*clhs622 + clhs56*clhs623 + clhs57*clhs624 + clhs69);
        const double clhs629 =     clhs628*normalslave(3,0)*penalty_parameter;
        const double clhs630 =     normalslave(1,0)*scale_factor;
        const double clhs631 =     normalslave(2,0)*scale_factor;
        const double clhs632 =     normalslave(3,0)*scale_factor;
        const double clhs633 =     clhs20*normalslave(1,1)*penalty_parameter;
        const double clhs634 =     clhs30*normalslave(2,1)*penalty_parameter;
        const double clhs635 =     clhs40*normalslave(3,1)*penalty_parameter;
        const double clhs636 =     clhs58*normalslave(1,1);
        const double clhs637 =     clhs64*normalslave(2,1);
        const double clhs638 =     clhs70*normalslave(3,1);
        const double clhs639 =     clhs76*normalslave(1,1)*penalty_parameter;
        const double clhs640 =     clhs82*normalslave(2,1)*penalty_parameter;
        const double clhs641 =     clhs88*normalslave(3,1)*penalty_parameter;
        const double clhs642 =     clhs94*normalslave(1,1)*penalty_parameter;
        const double clhs643 =     clhs100*normalslave(2,1)*penalty_parameter;
        const double clhs644 =     clhs106*normalslave(3,1)*penalty_parameter;
        const double clhs645 =     clhs112*normalslave(1,1)*penalty_parameter;
        const double clhs646 =     clhs118*normalslave(2,1)*penalty_parameter;
        const double clhs647 =     clhs124*normalslave(3,1)*penalty_parameter;
        const double clhs648 =     clhs130*normalslave(1,1)*penalty_parameter;
        const double clhs649 =     clhs136*normalslave(2,1)*penalty_parameter;
        const double clhs650 =     clhs142*normalslave(3,1)*penalty_parameter;
        const double clhs651 =     clhs148*normalslave(1,1)*penalty_parameter;
        const double clhs652 =     clhs154*normalslave(2,1)*penalty_parameter;
        const double clhs653 =     clhs160*normalslave(3,1)*penalty_parameter;
        const double clhs654 =     clhs166*normalslave(1,1)*penalty_parameter;
        const double clhs655 =     clhs172*normalslave(2,1)*penalty_parameter;
        const double clhs656 =     clhs178*normalslave(3,1)*penalty_parameter;
        const double clhs657 =     clhs184*normalslave(1,1)*penalty_parameter;
        const double clhs658 =     clhs190*normalslave(2,1)*penalty_parameter;
        const double clhs659 =     clhs196*normalslave(3,1)*penalty_parameter;
        const double clhs660 =     clhs202*normalslave(1,1)*penalty_parameter;
        const double clhs661 =     clhs208*normalslave(2,1)*penalty_parameter;
        const double clhs662 =     clhs214*normalslave(3,1)*penalty_parameter;
        const double clhs663 =     clhs220*normalslave(1,1)*penalty_parameter;
        const double clhs664 =     clhs226*normalslave(2,1)*penalty_parameter;
        const double clhs665 =     clhs232*normalslave(3,1)*penalty_parameter;
        const double clhs666 =     clhs238*normalslave(1,1)*penalty_parameter;
        const double clhs667 =     clhs244*normalslave(2,1)*penalty_parameter;
        const double clhs668 =     clhs250*normalslave(3,1)*penalty_parameter;
        const double clhs669 =     clhs256*normalslave(1,1)*penalty_parameter;
        const double clhs670 =     clhs262*normalslave(2,1)*penalty_parameter;
        const double clhs671 =     clhs268*normalslave(3,1)*penalty_parameter;
        const double clhs672 =     clhs280*normalslave(1,1)*penalty_parameter;
        const double clhs673 =     clhs289*normalslave(2,1)*penalty_parameter;
        const double clhs674 =     clhs298*normalslave(3,1)*penalty_parameter;
        const double clhs675 =     clhs310*normalslave(1,1)*penalty_parameter;
        const double clhs676 =     clhs319*normalslave(2,1)*penalty_parameter;
        const double clhs677 =     clhs328*normalslave(3,1)*penalty_parameter;
        const double clhs678 =     clhs340*normalslave(1,1)*penalty_parameter;
        const double clhs679 =     clhs349*normalslave(2,1)*penalty_parameter;
        const double clhs680 =     clhs358*normalslave(3,1)*penalty_parameter;
        const double clhs681 =     clhs370*normalslave(1,1)*penalty_parameter;
        const double clhs682 =     clhs379*normalslave(2,1)*penalty_parameter;
        const double clhs683 =     clhs388*normalslave(3,1)*penalty_parameter;
        const double clhs684 =     clhs400*normalslave(1,1)*penalty_parameter;
        const double clhs685 =     clhs409*normalslave(2,1)*penalty_parameter;
        const double clhs686 =     clhs418*normalslave(3,1)*penalty_parameter;
        const double clhs687 =     clhs430*normalslave(1,1)*penalty_parameter;
        const double clhs688 =     clhs439*normalslave(2,1)*penalty_parameter;
        const double clhs689 =     clhs448*normalslave(3,1)*penalty_parameter;
        const double clhs690 =     clhs460*normalslave(1,1)*penalty_parameter;
        const double clhs691 =     clhs469*normalslave(2,1)*penalty_parameter;
        const double clhs692 =     clhs478*normalslave(3,1)*penalty_parameter;
        const double clhs693 =     clhs490*normalslave(1,1)*penalty_parameter;
        const double clhs694 =     clhs499*normalslave(2,1)*penalty_parameter;
        const double clhs695 =     clhs508*normalslave(3,1)*penalty_parameter;
        const double clhs696 =     clhs520*normalslave(1,1)*penalty_parameter;
        const double clhs697 =     clhs529*normalslave(2,1)*penalty_parameter;
        const double clhs698 =     clhs538*normalslave(3,1)*penalty_parameter;
        const double clhs699 =     clhs550*normalslave(1,1)*penalty_parameter;
        const double clhs700 =     clhs559*normalslave(2,1)*penalty_parameter;
        const double clhs701 =     clhs568*normalslave(3,1)*penalty_parameter;
        const double clhs702 =     clhs580*normalslave(1,1)*penalty_parameter;
        const double clhs703 =     clhs589*normalslave(2,1)*penalty_parameter;
        const double clhs704 =     clhs598*normalslave(3,1)*penalty_parameter;
        const double clhs705 =     clhs610*normalslave(1,1)*penalty_parameter;
        const double clhs706 =     clhs619*normalslave(2,1)*penalty_parameter;
        const double clhs707 =     clhs628*normalslave(3,1)*penalty_parameter;
        const double clhs708 =     normalslave(1,1)*scale_factor;
        const double clhs709 =     normalslave(2,1)*scale_factor;
        const double clhs710 =     normalslave(3,1)*scale_factor;
        const double clhs711 =     clhs20*normalslave(1,2)*penalty_parameter;
        const double clhs712 =     clhs30*normalslave(2,2)*penalty_parameter;
        const double clhs713 =     clhs40*normalslave(3,2)*penalty_parameter;
        const double clhs714 =     clhs58*normalslave(1,2);
        const double clhs715 =     clhs64*normalslave(2,2);
        const double clhs716 =     clhs70*normalslave(3,2);
        const double clhs717 =     clhs76*normalslave(1,2)*penalty_parameter;
        const double clhs718 =     clhs82*normalslave(2,2)*penalty_parameter;
        const double clhs719 =     clhs88*normalslave(3,2)*penalty_parameter;
        const double clhs720 =     clhs94*normalslave(1,2)*penalty_parameter;
        const double clhs721 =     clhs100*normalslave(2,2)*penalty_parameter;
        const double clhs722 =     clhs106*normalslave(3,2)*penalty_parameter;
        const double clhs723 =     clhs112*normalslave(1,2)*penalty_parameter;
        const double clhs724 =     clhs118*normalslave(2,2)*penalty_parameter;
        const double clhs725 =     clhs124*normalslave(3,2)*penalty_parameter;
        const double clhs726 =     clhs130*normalslave(1,2)*penalty_parameter;
        const double clhs727 =     clhs136*normalslave(2,2)*penalty_parameter;
        const double clhs728 =     clhs142*normalslave(3,2)*penalty_parameter;
        const double clhs729 =     clhs148*normalslave(1,2)*penalty_parameter;
        const double clhs730 =     clhs154*normalslave(2,2)*penalty_parameter;
        const double clhs731 =     clhs160*normalslave(3,2)*penalty_parameter;
        const double clhs732 =     clhs166*normalslave(1,2)*penalty_parameter;
        const double clhs733 =     clhs172*normalslave(2,2)*penalty_parameter;
        const double clhs734 =     clhs178*normalslave(3,2)*penalty_parameter;
        const double clhs735 =     clhs184*normalslave(1,2)*penalty_parameter;
        const double clhs736 =     clhs190*normalslave(2,2)*penalty_parameter;
        const double clhs737 =     clhs196*normalslave(3,2)*penalty_parameter;
        const double clhs738 =     clhs202*normalslave(1,2)*penalty_parameter;
        const double clhs739 =     clhs208*normalslave(2,2)*penalty_parameter;
        const double clhs740 =     clhs214*normalslave(3,2)*penalty_parameter;
        const double clhs741 =     clhs220*normalslave(1,2)*penalty_parameter;
        const double clhs742 =     clhs226*normalslave(2,2)*penalty_parameter;
        const double clhs743 =     clhs232*normalslave(3,2)*penalty_parameter;
        const double clhs744 =     clhs238*normalslave(1,2)*penalty_parameter;
        const double clhs745 =     clhs244*normalslave(2,2)*penalty_parameter;
        const double clhs746 =     clhs250*normalslave(3,2)*penalty_parameter;
        const double clhs747 =     clhs256*normalslave(1,2)*penalty_parameter;
        const double clhs748 =     clhs262*normalslave(2,2)*penalty_parameter;
        const double clhs749 =     clhs268*normalslave(3,2)*penalty_parameter;
        const double clhs750 =     clhs280*normalslave(1,2)*penalty_parameter;
        const double clhs751 =     clhs289*normalslave(2,2)*penalty_parameter;
        const double clhs752 =     clhs298*normalslave(3,2)*penalty_parameter;
        const double clhs753 =     clhs310*normalslave(1,2)*penalty_parameter;
        const double clhs754 =     clhs319*normalslave(2,2)*penalty_parameter;
        const double clhs755 =     clhs328*normalslave(3,2)*penalty_parameter;
        const double clhs756 =     clhs340*normalslave(1,2)*penalty_parameter;
        const double clhs757 =     clhs349*normalslave(2,2)*penalty_parameter;
        const double clhs758 =     clhs358*normalslave(3,2)*penalty_parameter;
        const double clhs759 =     clhs370*normalslave(1,2)*penalty_parameter;
        const double clhs760 =     clhs379*normalslave(2,2)*penalty_parameter;
        const double clhs761 =     clhs388*normalslave(3,2)*penalty_parameter;
        const double clhs762 =     clhs400*normalslave(1,2)*penalty_parameter;
        const double clhs763 =     clhs409*normalslave(2,2)*penalty_parameter;
        const double clhs764 =     clhs418*normalslave(3,2)*penalty_parameter;
        const double clhs765 =     clhs430*normalslave(1,2)*penalty_parameter;
        const double clhs766 =     clhs439*normalslave(2,2)*penalty_parameter;
        const double clhs767 =     clhs448*normalslave(3,2)*penalty_parameter;
        const double clhs768 =     clhs460*normalslave(1,2)*penalty_parameter;
        const double clhs769 =     clhs469*normalslave(2,2)*penalty_parameter;
        const double clhs770 =     clhs478*normalslave(3,2)*penalty_parameter;
        const double clhs771 =     clhs490*normalslave(1,2)*penalty_parameter;
        const double clhs772 =     clhs499*normalslave(2,2)*penalty_parameter;
        const double clhs773 =     clhs508*normalslave(3,2)*penalty_parameter;
        const double clhs774 =     clhs520*normalslave(1,2)*penalty_parameter;
        const double clhs775 =     clhs529*normalslave(2,2)*penalty_parameter;
        const double clhs776 =     clhs538*normalslave(3,2)*penalty_parameter;
        const double clhs777 =     clhs550*normalslave(1,2)*penalty_parameter;
        const double clhs778 =     clhs559*normalslave(2,2)*penalty_parameter;
        const double clhs779 =     clhs568*normalslave(3,2)*penalty_parameter;
        const double clhs780 =     clhs580*normalslave(1,2)*penalty_parameter;
        const double clhs781 =     clhs589*normalslave(2,2)*penalty_parameter;
        const double clhs782 =     clhs598*normalslave(3,2)*penalty_parameter;
        const double clhs783 =     clhs610*normalslave(1,2)*penalty_parameter;
        const double clhs784 =     clhs619*normalslave(2,2)*penalty_parameter;
        const double clhs785 =     clhs628*normalslave(3,2)*penalty_parameter;
        const double clhs786 =     normalslave(1,2)*scale_factor;
        const double clhs787 =     normalslave(2,2)*scale_factor;
        const double clhs788 =     normalslave(3,2)*scale_factor;
        const double clhs789 =     clhs20*normalslave(1,0);
        const double clhs790 =     clhs30*normalslave(2,0);
        const double clhs791 =     clhs40*normalslave(3,0);
        const double clhs792 =     clhs76*normalslave(1,0);
        const double clhs793 =     clhs82*normalslave(2,0);
        const double clhs794 =     clhs88*normalslave(3,0);
        const double clhs795 =     clhs94*normalslave(1,0);
        const double clhs796 =     clhs100*normalslave(2,0);
        const double clhs797 =     clhs106*normalslave(3,0);
        const double clhs798 =     clhs112*normalslave(1,0);
        const double clhs799 =     clhs118*normalslave(2,0);
        const double clhs800 =     clhs124*normalslave(3,0);
        const double clhs801 =     clhs130*normalslave(1,0);
        const double clhs802 =     clhs136*normalslave(2,0);
        const double clhs803 =     clhs142*normalslave(3,0);
        const double clhs804 =     clhs148*normalslave(1,0);
        const double clhs805 =     clhs154*normalslave(2,0);
        const double clhs806 =     clhs160*normalslave(3,0);
        const double clhs807 =     clhs166*normalslave(1,0);
        const double clhs808 =     clhs172*normalslave(2,0);
        const double clhs809 =     clhs178*normalslave(3,0);
        const double clhs810 =     clhs184*normalslave(1,0);
        const double clhs811 =     clhs190*normalslave(2,0);
        const double clhs812 =     clhs196*normalslave(3,0);
        const double clhs813 =     clhs202*normalslave(1,0);
        const double clhs814 =     clhs208*normalslave(2,0);
        const double clhs815 =     clhs214*normalslave(3,0);
        const double clhs816 =     clhs220*normalslave(1,0);
        const double clhs817 =     clhs226*normalslave(2,0);
        const double clhs818 =     clhs232*normalslave(3,0);
        const double clhs819 =     clhs238*normalslave(1,0);
        const double clhs820 =     clhs244*normalslave(2,0);
        const double clhs821 =     clhs250*normalslave(3,0);
        const double clhs822 =     clhs256*normalslave(1,0);
        const double clhs823 =     clhs262*normalslave(2,0);
        const double clhs824 =     clhs268*normalslave(3,0);
        const double clhs825 =     clhs20*normalslave(1,1);
        const double clhs826 =     clhs30*normalslave(2,1);
        const double clhs827 =     clhs40*normalslave(3,1);
        const double clhs828 =     clhs76*normalslave(1,1);
        const double clhs829 =     clhs82*normalslave(2,1);
        const double clhs830 =     clhs88*normalslave(3,1);
        const double clhs831 =     clhs94*normalslave(1,1);
        const double clhs832 =     clhs100*normalslave(2,1);
        const double clhs833 =     clhs106*normalslave(3,1);
        const double clhs834 =     clhs112*normalslave(1,1);
        const double clhs835 =     clhs118*normalslave(2,1);
        const double clhs836 =     clhs124*normalslave(3,1);
        const double clhs837 =     clhs130*normalslave(1,1);
        const double clhs838 =     clhs136*normalslave(2,1);
        const double clhs839 =     clhs142*normalslave(3,1);
        const double clhs840 =     clhs148*normalslave(1,1);
        const double clhs841 =     clhs154*normalslave(2,1);
        const double clhs842 =     clhs160*normalslave(3,1);
        const double clhs843 =     clhs166*normalslave(1,1);
        const double clhs844 =     clhs172*normalslave(2,1);
        const double clhs845 =     clhs178*normalslave(3,1);
        const double clhs846 =     clhs184*normalslave(1,1);
        const double clhs847 =     clhs190*normalslave(2,1);
        const double clhs848 =     clhs196*normalslave(3,1);
        const double clhs849 =     clhs202*normalslave(1,1);
        const double clhs850 =     clhs208*normalslave(2,1);
        const double clhs851 =     clhs214*normalslave(3,1);
        const double clhs852 =     clhs220*normalslave(1,1);
        const double clhs853 =     clhs226*normalslave(2,1);
        const double clhs854 =     clhs232*normalslave(3,1);
        const double clhs855 =     clhs238*normalslave(1,1);
        const double clhs856 =     clhs244*normalslave(2,1);
        const double clhs857 =     clhs250*normalslave(3,1);
        const double clhs858 =     clhs256*normalslave(1,1);
        const double clhs859 =     clhs262*normalslave(2,1);
        const double clhs860 =     clhs268*normalslave(3,1);
        const double clhs861 =     clhs20*normalslave(1,2);
        const double clhs862 =     clhs30*normalslave(2,2);
        const double clhs863 =     clhs40*normalslave(3,2);
        const double clhs864 =     clhs76*normalslave(1,2);
        const double clhs865 =     clhs82*normalslave(2,2);
        const double clhs866 =     clhs88*normalslave(3,2);
        const double clhs867 =     clhs94*normalslave(1,2);
        const double clhs868 =     clhs100*normalslave(2,2);
        const double clhs869 =     clhs106*normalslave(3,2);
        const double clhs870 =     clhs112*normalslave(1,2);
        const double clhs871 =     clhs118*normalslave(2,2);
        const double clhs872 =     clhs124*normalslave(3,2);
        const double clhs873 =     clhs130*normalslave(1,2);
        const double clhs874 =     clhs136*normalslave(2,2);
        const double clhs875 =     clhs142*normalslave(3,2);
        const double clhs876 =     clhs148*normalslave(1,2);
        const double clhs877 =     clhs154*normalslave(2,2);
        const double clhs878 =     clhs160*normalslave(3,2);
        const double clhs879 =     clhs166*normalslave(1,2);
        const double clhs880 =     clhs172*normalslave(2,2);
        const double clhs881 =     clhs178*normalslave(3,2);
        const double clhs882 =     clhs184*normalslave(1,2);
        const double clhs883 =     clhs190*normalslave(2,2);
        const double clhs884 =     clhs196*normalslave(3,2);
        const double clhs885 =     clhs202*normalslave(1,2);
        const double clhs886 =     clhs208*normalslave(2,2);
        const double clhs887 =     clhs214*normalslave(3,2);
        const double clhs888 =     clhs220*normalslave(1,2);
        const double clhs889 =     clhs226*normalslave(2,2);
        const double clhs890 =     clhs232*normalslave(3,2);
        const double clhs891 =     clhs238*normalslave(1,2);
        const double clhs892 =     clhs244*normalslave(2,2);
        const double clhs893 =     clhs250*normalslave(3,2);
        const double clhs894 =     clhs256*normalslave(1,2);
        const double clhs895 =     clhs262*normalslave(2,2);
        const double clhs896 =     clhs268*normalslave(3,2);
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs59 - clhs22*clhs31 + clhs23*clhs65 - clhs32*clhs41 + clhs33*clhs71;
        lhs(0,1)=-clhs0*clhs77 - clhs22*clhs83 - clhs32*clhs89 + clhs59*clhs72 + clhs65*clhs78 + clhs71*clhs84;
        lhs(0,2)=-clhs0*clhs95 - clhs101*clhs22 + clhs102*clhs71 - clhs107*clhs32 + clhs59*clhs90 + clhs65*clhs96;
        lhs(0,3)=-clhs0*clhs113 + clhs108*clhs59 + clhs114*clhs65 - clhs119*clhs22 + clhs120*clhs71 - clhs125*clhs32;
        lhs(0,4)=-clhs0*clhs131 + clhs126*clhs59 + clhs132*clhs65 - clhs137*clhs22 + clhs138*clhs71 - clhs143*clhs32;
        lhs(0,5)=-clhs0*clhs149 + clhs144*clhs59 + clhs150*clhs65 - clhs155*clhs22 + clhs156*clhs71 - clhs161*clhs32;
        lhs(0,6)=-clhs0*clhs167 + clhs162*clhs59 + clhs168*clhs65 - clhs173*clhs22 + clhs174*clhs71 - clhs179*clhs32;
        lhs(0,7)=-clhs0*clhs185 + clhs180*clhs59 + clhs186*clhs65 - clhs191*clhs22 + clhs192*clhs71 - clhs197*clhs32;
        lhs(0,8)=-clhs0*clhs203 + clhs198*clhs59 + clhs204*clhs65 - clhs209*clhs22 + clhs210*clhs71 - clhs215*clhs32;
        lhs(0,9)=-clhs0*clhs221 + clhs216*clhs59 - clhs22*clhs227 + clhs222*clhs65 + clhs228*clhs71 - clhs233*clhs32;
        lhs(0,10)=-clhs0*clhs239 - clhs22*clhs245 + clhs234*clhs59 + clhs240*clhs65 + clhs246*clhs71 - clhs251*clhs32;
        lhs(0,11)=-clhs0*clhs257 - clhs22*clhs263 + clhs252*clhs59 + clhs258*clhs65 + clhs264*clhs71 - clhs269*clhs32;
        lhs(0,12)=clhs0*clhs281 + clhs22*clhs290 + clhs270*clhs59 + clhs271*clhs65 + clhs272*clhs71 + clhs299*clhs32;
        lhs(0,13)=clhs0*clhs311 + clhs22*clhs320 + clhs300*clhs59 + clhs301*clhs65 + clhs302*clhs71 + clhs32*clhs329;
        lhs(0,14)=clhs0*clhs341 + clhs22*clhs350 + clhs32*clhs359 + clhs330*clhs59 + clhs331*clhs65 + clhs332*clhs71;
        lhs(0,15)=clhs0*clhs371 + clhs22*clhs380 + clhs32*clhs389 + clhs360*clhs59 + clhs361*clhs65 + clhs362*clhs71;
        lhs(0,16)=clhs0*clhs401 + clhs22*clhs410 + clhs32*clhs419 + clhs390*clhs59 + clhs391*clhs65 + clhs392*clhs71;
        lhs(0,17)=clhs0*clhs431 + clhs22*clhs440 + clhs32*clhs449 + clhs420*clhs59 + clhs421*clhs65 + clhs422*clhs71;
        lhs(0,18)=clhs0*clhs461 + clhs22*clhs470 + clhs32*clhs479 + clhs450*clhs59 + clhs451*clhs65 + clhs452*clhs71;
        lhs(0,19)=clhs0*clhs491 + clhs22*clhs500 + clhs32*clhs509 + clhs480*clhs59 + clhs481*clhs65 + clhs482*clhs71;
        lhs(0,20)=clhs0*clhs521 + clhs22*clhs530 + clhs32*clhs539 + clhs510*clhs59 + clhs511*clhs65 + clhs512*clhs71;
        lhs(0,21)=clhs0*clhs551 + clhs22*clhs560 + clhs32*clhs569 + clhs540*clhs59 + clhs541*clhs65 + clhs542*clhs71;
        lhs(0,22)=clhs0*clhs581 + clhs22*clhs590 + clhs32*clhs599 + clhs570*clhs59 + clhs571*clhs65 + clhs572*clhs71;
        lhs(0,23)=clhs0*clhs611 + clhs22*clhs620 + clhs32*clhs629 + clhs59*clhs600 + clhs601*clhs65 + clhs602*clhs71;
        lhs(0,24)=0;
        lhs(0,25)=clhs0*clhs630;
        lhs(0,26)=clhs22*clhs631;
        lhs(0,27)=clhs32*clhs632;
        lhs(1,0)=-clhs0*clhs633 + clhs2*clhs636 - clhs22*clhs634 + clhs23*clhs637 - clhs32*clhs635 + clhs33*clhs638;
        lhs(1,1)=-clhs0*clhs639 - clhs22*clhs640 - clhs32*clhs641 + clhs636*clhs72 + clhs637*clhs78 + clhs638*clhs84;
        lhs(1,2)=-clhs0*clhs642 + clhs102*clhs638 - clhs22*clhs643 - clhs32*clhs644 + clhs636*clhs90 + clhs637*clhs96;
        lhs(1,3)=-clhs0*clhs645 + clhs108*clhs636 + clhs114*clhs637 + clhs120*clhs638 - clhs22*clhs646 - clhs32*clhs647;
        lhs(1,4)=-clhs0*clhs648 + clhs126*clhs636 + clhs132*clhs637 + clhs138*clhs638 - clhs22*clhs649 - clhs32*clhs650;
        lhs(1,5)=-clhs0*clhs651 + clhs144*clhs636 + clhs150*clhs637 + clhs156*clhs638 - clhs22*clhs652 - clhs32*clhs653;
        lhs(1,6)=-clhs0*clhs654 + clhs162*clhs636 + clhs168*clhs637 + clhs174*clhs638 - clhs22*clhs655 - clhs32*clhs656;
        lhs(1,7)=-clhs0*clhs657 + clhs180*clhs636 + clhs186*clhs637 + clhs192*clhs638 - clhs22*clhs658 - clhs32*clhs659;
        lhs(1,8)=-clhs0*clhs660 + clhs198*clhs636 + clhs204*clhs637 + clhs210*clhs638 - clhs22*clhs661 - clhs32*clhs662;
        lhs(1,9)=-clhs0*clhs663 + clhs216*clhs636 - clhs22*clhs664 + clhs222*clhs637 + clhs228*clhs638 - clhs32*clhs665;
        lhs(1,10)=-clhs0*clhs666 - clhs22*clhs667 + clhs234*clhs636 + clhs240*clhs637 + clhs246*clhs638 - clhs32*clhs668;
        lhs(1,11)=-clhs0*clhs669 - clhs22*clhs670 + clhs252*clhs636 + clhs258*clhs637 + clhs264*clhs638 - clhs32*clhs671;
        lhs(1,12)=clhs0*clhs672 + clhs22*clhs673 + clhs270*clhs636 + clhs271*clhs637 + clhs272*clhs638 + clhs32*clhs674;
        lhs(1,13)=clhs0*clhs675 + clhs22*clhs676 + clhs300*clhs636 + clhs301*clhs637 + clhs302*clhs638 + clhs32*clhs677;
        lhs(1,14)=clhs0*clhs678 + clhs22*clhs679 + clhs32*clhs680 + clhs330*clhs636 + clhs331*clhs637 + clhs332*clhs638;
        lhs(1,15)=clhs0*clhs681 + clhs22*clhs682 + clhs32*clhs683 + clhs360*clhs636 + clhs361*clhs637 + clhs362*clhs638;
        lhs(1,16)=clhs0*clhs684 + clhs22*clhs685 + clhs32*clhs686 + clhs390*clhs636 + clhs391*clhs637 + clhs392*clhs638;
        lhs(1,17)=clhs0*clhs687 + clhs22*clhs688 + clhs32*clhs689 + clhs420*clhs636 + clhs421*clhs637 + clhs422*clhs638;
        lhs(1,18)=clhs0*clhs690 + clhs22*clhs691 + clhs32*clhs692 + clhs450*clhs636 + clhs451*clhs637 + clhs452*clhs638;
        lhs(1,19)=clhs0*clhs693 + clhs22*clhs694 + clhs32*clhs695 + clhs480*clhs636 + clhs481*clhs637 + clhs482*clhs638;
        lhs(1,20)=clhs0*clhs696 + clhs22*clhs697 + clhs32*clhs698 + clhs510*clhs636 + clhs511*clhs637 + clhs512*clhs638;
        lhs(1,21)=clhs0*clhs699 + clhs22*clhs700 + clhs32*clhs701 + clhs540*clhs636 + clhs541*clhs637 + clhs542*clhs638;
        lhs(1,22)=clhs0*clhs702 + clhs22*clhs703 + clhs32*clhs704 + clhs570*clhs636 + clhs571*clhs637 + clhs572*clhs638;
        lhs(1,23)=clhs0*clhs705 + clhs22*clhs706 + clhs32*clhs707 + clhs600*clhs636 + clhs601*clhs637 + clhs602*clhs638;
        lhs(1,24)=0;
        lhs(1,25)=clhs0*clhs708;
        lhs(1,26)=clhs22*clhs709;
        lhs(1,27)=clhs32*clhs710;
        lhs(2,0)=-clhs0*clhs711 + clhs2*clhs714 - clhs22*clhs712 + clhs23*clhs715 - clhs32*clhs713 + clhs33*clhs716;
        lhs(2,1)=-clhs0*clhs717 - clhs22*clhs718 - clhs32*clhs719 + clhs714*clhs72 + clhs715*clhs78 + clhs716*clhs84;
        lhs(2,2)=-clhs0*clhs720 + clhs102*clhs716 - clhs22*clhs721 - clhs32*clhs722 + clhs714*clhs90 + clhs715*clhs96;
        lhs(2,3)=-clhs0*clhs723 + clhs108*clhs714 + clhs114*clhs715 + clhs120*clhs716 - clhs22*clhs724 - clhs32*clhs725;
        lhs(2,4)=-clhs0*clhs726 + clhs126*clhs714 + clhs132*clhs715 + clhs138*clhs716 - clhs22*clhs727 - clhs32*clhs728;
        lhs(2,5)=-clhs0*clhs729 + clhs144*clhs714 + clhs150*clhs715 + clhs156*clhs716 - clhs22*clhs730 - clhs32*clhs731;
        lhs(2,6)=-clhs0*clhs732 + clhs162*clhs714 + clhs168*clhs715 + clhs174*clhs716 - clhs22*clhs733 - clhs32*clhs734;
        lhs(2,7)=-clhs0*clhs735 + clhs180*clhs714 + clhs186*clhs715 + clhs192*clhs716 - clhs22*clhs736 - clhs32*clhs737;
        lhs(2,8)=-clhs0*clhs738 + clhs198*clhs714 + clhs204*clhs715 + clhs210*clhs716 - clhs22*clhs739 - clhs32*clhs740;
        lhs(2,9)=-clhs0*clhs741 + clhs216*clhs714 - clhs22*clhs742 + clhs222*clhs715 + clhs228*clhs716 - clhs32*clhs743;
        lhs(2,10)=-clhs0*clhs744 - clhs22*clhs745 + clhs234*clhs714 + clhs240*clhs715 + clhs246*clhs716 - clhs32*clhs746;
        lhs(2,11)=-clhs0*clhs747 - clhs22*clhs748 + clhs252*clhs714 + clhs258*clhs715 + clhs264*clhs716 - clhs32*clhs749;
        lhs(2,12)=clhs0*clhs750 + clhs22*clhs751 + clhs270*clhs714 + clhs271*clhs715 + clhs272*clhs716 + clhs32*clhs752;
        lhs(2,13)=clhs0*clhs753 + clhs22*clhs754 + clhs300*clhs714 + clhs301*clhs715 + clhs302*clhs716 + clhs32*clhs755;
        lhs(2,14)=clhs0*clhs756 + clhs22*clhs757 + clhs32*clhs758 + clhs330*clhs714 + clhs331*clhs715 + clhs332*clhs716;
        lhs(2,15)=clhs0*clhs759 + clhs22*clhs760 + clhs32*clhs761 + clhs360*clhs714 + clhs361*clhs715 + clhs362*clhs716;
        lhs(2,16)=clhs0*clhs762 + clhs22*clhs763 + clhs32*clhs764 + clhs390*clhs714 + clhs391*clhs715 + clhs392*clhs716;
        lhs(2,17)=clhs0*clhs765 + clhs22*clhs766 + clhs32*clhs767 + clhs420*clhs714 + clhs421*clhs715 + clhs422*clhs716;
        lhs(2,18)=clhs0*clhs768 + clhs22*clhs769 + clhs32*clhs770 + clhs450*clhs714 + clhs451*clhs715 + clhs452*clhs716;
        lhs(2,19)=clhs0*clhs771 + clhs22*clhs772 + clhs32*clhs773 + clhs480*clhs714 + clhs481*clhs715 + clhs482*clhs716;
        lhs(2,20)=clhs0*clhs774 + clhs22*clhs775 + clhs32*clhs776 + clhs510*clhs714 + clhs511*clhs715 + clhs512*clhs716;
        lhs(2,21)=clhs0*clhs777 + clhs22*clhs778 + clhs32*clhs779 + clhs540*clhs714 + clhs541*clhs715 + clhs542*clhs716;
        lhs(2,22)=clhs0*clhs780 + clhs22*clhs781 + clhs32*clhs782 + clhs570*clhs714 + clhs571*clhs715 + clhs572*clhs716;
        lhs(2,23)=clhs0*clhs783 + clhs22*clhs784 + clhs32*clhs785 + clhs600*clhs714 + clhs601*clhs715 + clhs602*clhs716;
        lhs(2,24)=0;
        lhs(2,25)=clhs0*clhs786;
        lhs(2,26)=clhs22*clhs787;
        lhs(2,27)=clhs32*clhs788;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs65 - clhs34*clhs41 + clhs35*clhs71 + clhs5*clhs59;
        lhs(3,1)=-clhs24*clhs83 - clhs34*clhs89 - clhs4*clhs77 + clhs59*clhs73 + clhs65*clhs79 + clhs71*clhs85;
        lhs(3,2)=-clhs101*clhs24 + clhs103*clhs71 - clhs107*clhs34 - clhs4*clhs95 + clhs59*clhs91 + clhs65*clhs97;
        lhs(3,3)=clhs109*clhs59 - clhs113*clhs4 + clhs115*clhs65 - clhs119*clhs24 + clhs121*clhs71 - clhs125*clhs34;
        lhs(3,4)=clhs127*clhs59 - clhs131*clhs4 + clhs133*clhs65 - clhs137*clhs24 + clhs139*clhs71 - clhs143*clhs34;
        lhs(3,5)=clhs145*clhs59 - clhs149*clhs4 + clhs151*clhs65 - clhs155*clhs24 + clhs157*clhs71 - clhs161*clhs34;
        lhs(3,6)=clhs163*clhs59 - clhs167*clhs4 + clhs169*clhs65 - clhs173*clhs24 + clhs175*clhs71 - clhs179*clhs34;
        lhs(3,7)=clhs181*clhs59 - clhs185*clhs4 + clhs187*clhs65 - clhs191*clhs24 + clhs193*clhs71 - clhs197*clhs34;
        lhs(3,8)=clhs199*clhs59 - clhs203*clhs4 + clhs205*clhs65 - clhs209*clhs24 + clhs211*clhs71 - clhs215*clhs34;
        lhs(3,9)=clhs217*clhs59 - clhs221*clhs4 + clhs223*clhs65 - clhs227*clhs24 + clhs229*clhs71 - clhs233*clhs34;
        lhs(3,10)=clhs235*clhs59 - clhs239*clhs4 - clhs24*clhs245 + clhs241*clhs65 + clhs247*clhs71 - clhs251*clhs34;
        lhs(3,11)=-clhs24*clhs263 + clhs253*clhs59 - clhs257*clhs4 + clhs259*clhs65 + clhs265*clhs71 - clhs269*clhs34;
        lhs(3,12)=clhs24*clhs290 + clhs277*clhs59 + clhs281*clhs4 + clhs286*clhs65 + clhs295*clhs71 + clhs299*clhs34;
        lhs(3,13)=clhs24*clhs320 + clhs307*clhs59 + clhs311*clhs4 + clhs316*clhs65 + clhs325*clhs71 + clhs329*clhs34;
        lhs(3,14)=clhs24*clhs350 + clhs337*clhs59 + clhs34*clhs359 + clhs341*clhs4 + clhs346*clhs65 + clhs355*clhs71;
        lhs(3,15)=clhs24*clhs380 + clhs34*clhs389 + clhs367*clhs59 + clhs371*clhs4 + clhs376*clhs65 + clhs385*clhs71;
        lhs(3,16)=clhs24*clhs410 + clhs34*clhs419 + clhs397*clhs59 + clhs4*clhs401 + clhs406*clhs65 + clhs415*clhs71;
        lhs(3,17)=clhs24*clhs440 + clhs34*clhs449 + clhs4*clhs431 + clhs427*clhs59 + clhs436*clhs65 + clhs445*clhs71;
        lhs(3,18)=clhs24*clhs470 + clhs34*clhs479 + clhs4*clhs461 + clhs457*clhs59 + clhs466*clhs65 + clhs475*clhs71;
        lhs(3,19)=clhs24*clhs500 + clhs34*clhs509 + clhs4*clhs491 + clhs487*clhs59 + clhs496*clhs65 + clhs505*clhs71;
        lhs(3,20)=clhs24*clhs530 + clhs34*clhs539 + clhs4*clhs521 + clhs517*clhs59 + clhs526*clhs65 + clhs535*clhs71;
        lhs(3,21)=clhs24*clhs560 + clhs34*clhs569 + clhs4*clhs551 + clhs547*clhs59 + clhs556*clhs65 + clhs565*clhs71;
        lhs(3,22)=clhs24*clhs590 + clhs34*clhs599 + clhs4*clhs581 + clhs577*clhs59 + clhs586*clhs65 + clhs595*clhs71;
        lhs(3,23)=clhs24*clhs620 + clhs34*clhs629 + clhs4*clhs611 + clhs59*clhs607 + clhs616*clhs65 + clhs625*clhs71;
        lhs(3,24)=0;
        lhs(3,25)=clhs4*clhs630;
        lhs(3,26)=clhs24*clhs631;
        lhs(3,27)=clhs34*clhs632;
        lhs(4,0)=-clhs24*clhs634 + clhs25*clhs637 - clhs34*clhs635 + clhs35*clhs638 - clhs4*clhs633 + clhs5*clhs636;
        lhs(4,1)=-clhs24*clhs640 - clhs34*clhs641 - clhs4*clhs639 + clhs636*clhs73 + clhs637*clhs79 + clhs638*clhs85;
        lhs(4,2)=clhs103*clhs638 - clhs24*clhs643 - clhs34*clhs644 - clhs4*clhs642 + clhs636*clhs91 + clhs637*clhs97;
        lhs(4,3)=clhs109*clhs636 + clhs115*clhs637 + clhs121*clhs638 - clhs24*clhs646 - clhs34*clhs647 - clhs4*clhs645;
        lhs(4,4)=clhs127*clhs636 + clhs133*clhs637 + clhs139*clhs638 - clhs24*clhs649 - clhs34*clhs650 - clhs4*clhs648;
        lhs(4,5)=clhs145*clhs636 + clhs151*clhs637 + clhs157*clhs638 - clhs24*clhs652 - clhs34*clhs653 - clhs4*clhs651;
        lhs(4,6)=clhs163*clhs636 + clhs169*clhs637 + clhs175*clhs638 - clhs24*clhs655 - clhs34*clhs656 - clhs4*clhs654;
        lhs(4,7)=clhs181*clhs636 + clhs187*clhs637 + clhs193*clhs638 - clhs24*clhs658 - clhs34*clhs659 - clhs4*clhs657;
        lhs(4,8)=clhs199*clhs636 + clhs205*clhs637 + clhs211*clhs638 - clhs24*clhs661 - clhs34*clhs662 - clhs4*clhs660;
        lhs(4,9)=clhs217*clhs636 + clhs223*clhs637 + clhs229*clhs638 - clhs24*clhs664 - clhs34*clhs665 - clhs4*clhs663;
        lhs(4,10)=clhs235*clhs636 - clhs24*clhs667 + clhs241*clhs637 + clhs247*clhs638 - clhs34*clhs668 - clhs4*clhs666;
        lhs(4,11)=-clhs24*clhs670 + clhs253*clhs636 + clhs259*clhs637 + clhs265*clhs638 - clhs34*clhs671 - clhs4*clhs669;
        lhs(4,12)=clhs24*clhs673 + clhs277*clhs636 + clhs286*clhs637 + clhs295*clhs638 + clhs34*clhs674 + clhs4*clhs672;
        lhs(4,13)=clhs24*clhs676 + clhs307*clhs636 + clhs316*clhs637 + clhs325*clhs638 + clhs34*clhs677 + clhs4*clhs675;
        lhs(4,14)=clhs24*clhs679 + clhs337*clhs636 + clhs34*clhs680 + clhs346*clhs637 + clhs355*clhs638 + clhs4*clhs678;
        lhs(4,15)=clhs24*clhs682 + clhs34*clhs683 + clhs367*clhs636 + clhs376*clhs637 + clhs385*clhs638 + clhs4*clhs681;
        lhs(4,16)=clhs24*clhs685 + clhs34*clhs686 + clhs397*clhs636 + clhs4*clhs684 + clhs406*clhs637 + clhs415*clhs638;
        lhs(4,17)=clhs24*clhs688 + clhs34*clhs689 + clhs4*clhs687 + clhs427*clhs636 + clhs436*clhs637 + clhs445*clhs638;
        lhs(4,18)=clhs24*clhs691 + clhs34*clhs692 + clhs4*clhs690 + clhs457*clhs636 + clhs466*clhs637 + clhs475*clhs638;
        lhs(4,19)=clhs24*clhs694 + clhs34*clhs695 + clhs4*clhs693 + clhs487*clhs636 + clhs496*clhs637 + clhs505*clhs638;
        lhs(4,20)=clhs24*clhs697 + clhs34*clhs698 + clhs4*clhs696 + clhs517*clhs636 + clhs526*clhs637 + clhs535*clhs638;
        lhs(4,21)=clhs24*clhs700 + clhs34*clhs701 + clhs4*clhs699 + clhs547*clhs636 + clhs556*clhs637 + clhs565*clhs638;
        lhs(4,22)=clhs24*clhs703 + clhs34*clhs704 + clhs4*clhs702 + clhs577*clhs636 + clhs586*clhs637 + clhs595*clhs638;
        lhs(4,23)=clhs24*clhs706 + clhs34*clhs707 + clhs4*clhs705 + clhs607*clhs636 + clhs616*clhs637 + clhs625*clhs638;
        lhs(4,24)=0;
        lhs(4,25)=clhs4*clhs708;
        lhs(4,26)=clhs24*clhs709;
        lhs(4,27)=clhs34*clhs710;
        lhs(5,0)=-clhs24*clhs712 + clhs25*clhs715 - clhs34*clhs713 + clhs35*clhs716 - clhs4*clhs711 + clhs5*clhs714;
        lhs(5,1)=-clhs24*clhs718 - clhs34*clhs719 - clhs4*clhs717 + clhs714*clhs73 + clhs715*clhs79 + clhs716*clhs85;
        lhs(5,2)=clhs103*clhs716 - clhs24*clhs721 - clhs34*clhs722 - clhs4*clhs720 + clhs714*clhs91 + clhs715*clhs97;
        lhs(5,3)=clhs109*clhs714 + clhs115*clhs715 + clhs121*clhs716 - clhs24*clhs724 - clhs34*clhs725 - clhs4*clhs723;
        lhs(5,4)=clhs127*clhs714 + clhs133*clhs715 + clhs139*clhs716 - clhs24*clhs727 - clhs34*clhs728 - clhs4*clhs726;
        lhs(5,5)=clhs145*clhs714 + clhs151*clhs715 + clhs157*clhs716 - clhs24*clhs730 - clhs34*clhs731 - clhs4*clhs729;
        lhs(5,6)=clhs163*clhs714 + clhs169*clhs715 + clhs175*clhs716 - clhs24*clhs733 - clhs34*clhs734 - clhs4*clhs732;
        lhs(5,7)=clhs181*clhs714 + clhs187*clhs715 + clhs193*clhs716 - clhs24*clhs736 - clhs34*clhs737 - clhs4*clhs735;
        lhs(5,8)=clhs199*clhs714 + clhs205*clhs715 + clhs211*clhs716 - clhs24*clhs739 - clhs34*clhs740 - clhs4*clhs738;
        lhs(5,9)=clhs217*clhs714 + clhs223*clhs715 + clhs229*clhs716 - clhs24*clhs742 - clhs34*clhs743 - clhs4*clhs741;
        lhs(5,10)=clhs235*clhs714 - clhs24*clhs745 + clhs241*clhs715 + clhs247*clhs716 - clhs34*clhs746 - clhs4*clhs744;
        lhs(5,11)=-clhs24*clhs748 + clhs253*clhs714 + clhs259*clhs715 + clhs265*clhs716 - clhs34*clhs749 - clhs4*clhs747;
        lhs(5,12)=clhs24*clhs751 + clhs277*clhs714 + clhs286*clhs715 + clhs295*clhs716 + clhs34*clhs752 + clhs4*clhs750;
        lhs(5,13)=clhs24*clhs754 + clhs307*clhs714 + clhs316*clhs715 + clhs325*clhs716 + clhs34*clhs755 + clhs4*clhs753;
        lhs(5,14)=clhs24*clhs757 + clhs337*clhs714 + clhs34*clhs758 + clhs346*clhs715 + clhs355*clhs716 + clhs4*clhs756;
        lhs(5,15)=clhs24*clhs760 + clhs34*clhs761 + clhs367*clhs714 + clhs376*clhs715 + clhs385*clhs716 + clhs4*clhs759;
        lhs(5,16)=clhs24*clhs763 + clhs34*clhs764 + clhs397*clhs714 + clhs4*clhs762 + clhs406*clhs715 + clhs415*clhs716;
        lhs(5,17)=clhs24*clhs766 + clhs34*clhs767 + clhs4*clhs765 + clhs427*clhs714 + clhs436*clhs715 + clhs445*clhs716;
        lhs(5,18)=clhs24*clhs769 + clhs34*clhs770 + clhs4*clhs768 + clhs457*clhs714 + clhs466*clhs715 + clhs475*clhs716;
        lhs(5,19)=clhs24*clhs772 + clhs34*clhs773 + clhs4*clhs771 + clhs487*clhs714 + clhs496*clhs715 + clhs505*clhs716;
        lhs(5,20)=clhs24*clhs775 + clhs34*clhs776 + clhs4*clhs774 + clhs517*clhs714 + clhs526*clhs715 + clhs535*clhs716;
        lhs(5,21)=clhs24*clhs778 + clhs34*clhs779 + clhs4*clhs777 + clhs547*clhs714 + clhs556*clhs715 + clhs565*clhs716;
        lhs(5,22)=clhs24*clhs781 + clhs34*clhs782 + clhs4*clhs780 + clhs577*clhs714 + clhs586*clhs715 + clhs595*clhs716;
        lhs(5,23)=clhs24*clhs784 + clhs34*clhs785 + clhs4*clhs783 + clhs607*clhs714 + clhs616*clhs715 + clhs625*clhs716;
        lhs(5,24)=0;
        lhs(5,25)=clhs4*clhs786;
        lhs(5,26)=clhs24*clhs787;
        lhs(5,27)=clhs34*clhs788;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs65 - clhs36*clhs41 + clhs37*clhs71 + clhs59*clhs8;
        lhs(6,1)=-clhs26*clhs83 - clhs36*clhs89 + clhs59*clhs74 + clhs65*clhs80 - clhs7*clhs77 + clhs71*clhs86;
        lhs(6,2)=-clhs101*clhs26 + clhs104*clhs71 - clhs107*clhs36 + clhs59*clhs92 + clhs65*clhs98 - clhs7*clhs95;
        lhs(6,3)=clhs110*clhs59 - clhs113*clhs7 + clhs116*clhs65 - clhs119*clhs26 + clhs122*clhs71 - clhs125*clhs36;
        lhs(6,4)=clhs128*clhs59 - clhs131*clhs7 + clhs134*clhs65 - clhs137*clhs26 + clhs140*clhs71 - clhs143*clhs36;
        lhs(6,5)=clhs146*clhs59 - clhs149*clhs7 + clhs152*clhs65 - clhs155*clhs26 + clhs158*clhs71 - clhs161*clhs36;
        lhs(6,6)=clhs164*clhs59 - clhs167*clhs7 + clhs170*clhs65 - clhs173*clhs26 + clhs176*clhs71 - clhs179*clhs36;
        lhs(6,7)=clhs182*clhs59 - clhs185*clhs7 + clhs188*clhs65 - clhs191*clhs26 + clhs194*clhs71 - clhs197*clhs36;
        lhs(6,8)=clhs200*clhs59 - clhs203*clhs7 + clhs206*clhs65 - clhs209*clhs26 + clhs212*clhs71 - clhs215*clhs36;
        lhs(6,9)=clhs218*clhs59 - clhs221*clhs7 + clhs224*clhs65 - clhs227*clhs26 + clhs230*clhs71 - clhs233*clhs36;
        lhs(6,10)=clhs236*clhs59 - clhs239*clhs7 + clhs242*clhs65 - clhs245*clhs26 + clhs248*clhs71 - clhs251*clhs36;
        lhs(6,11)=clhs254*clhs59 - clhs257*clhs7 - clhs26*clhs263 + clhs260*clhs65 + clhs266*clhs71 - clhs269*clhs36;
        lhs(6,12)=clhs26*clhs290 + clhs278*clhs59 + clhs281*clhs7 + clhs287*clhs65 + clhs296*clhs71 + clhs299*clhs36;
        lhs(6,13)=clhs26*clhs320 + clhs308*clhs59 + clhs311*clhs7 + clhs317*clhs65 + clhs326*clhs71 + clhs329*clhs36;
        lhs(6,14)=clhs26*clhs350 + clhs338*clhs59 + clhs341*clhs7 + clhs347*clhs65 + clhs356*clhs71 + clhs359*clhs36;
        lhs(6,15)=clhs26*clhs380 + clhs36*clhs389 + clhs368*clhs59 + clhs371*clhs7 + clhs377*clhs65 + clhs386*clhs71;
        lhs(6,16)=clhs26*clhs410 + clhs36*clhs419 + clhs398*clhs59 + clhs401*clhs7 + clhs407*clhs65 + clhs416*clhs71;
        lhs(6,17)=clhs26*clhs440 + clhs36*clhs449 + clhs428*clhs59 + clhs431*clhs7 + clhs437*clhs65 + clhs446*clhs71;
        lhs(6,18)=clhs26*clhs470 + clhs36*clhs479 + clhs458*clhs59 + clhs461*clhs7 + clhs467*clhs65 + clhs476*clhs71;
        lhs(6,19)=clhs26*clhs500 + clhs36*clhs509 + clhs488*clhs59 + clhs491*clhs7 + clhs497*clhs65 + clhs506*clhs71;
        lhs(6,20)=clhs26*clhs530 + clhs36*clhs539 + clhs518*clhs59 + clhs521*clhs7 + clhs527*clhs65 + clhs536*clhs71;
        lhs(6,21)=clhs26*clhs560 + clhs36*clhs569 + clhs548*clhs59 + clhs551*clhs7 + clhs557*clhs65 + clhs566*clhs71;
        lhs(6,22)=clhs26*clhs590 + clhs36*clhs599 + clhs578*clhs59 + clhs581*clhs7 + clhs587*clhs65 + clhs596*clhs71;
        lhs(6,23)=clhs26*clhs620 + clhs36*clhs629 + clhs59*clhs608 + clhs611*clhs7 + clhs617*clhs65 + clhs626*clhs71;
        lhs(6,24)=0;
        lhs(6,25)=clhs630*clhs7;
        lhs(6,26)=clhs26*clhs631;
        lhs(6,27)=clhs36*clhs632;
        lhs(7,0)=-clhs26*clhs634 + clhs27*clhs637 - clhs36*clhs635 + clhs37*clhs638 - clhs633*clhs7 + clhs636*clhs8;
        lhs(7,1)=-clhs26*clhs640 - clhs36*clhs641 + clhs636*clhs74 + clhs637*clhs80 + clhs638*clhs86 - clhs639*clhs7;
        lhs(7,2)=clhs104*clhs638 - clhs26*clhs643 - clhs36*clhs644 + clhs636*clhs92 + clhs637*clhs98 - clhs642*clhs7;
        lhs(7,3)=clhs110*clhs636 + clhs116*clhs637 + clhs122*clhs638 - clhs26*clhs646 - clhs36*clhs647 - clhs645*clhs7;
        lhs(7,4)=clhs128*clhs636 + clhs134*clhs637 + clhs140*clhs638 - clhs26*clhs649 - clhs36*clhs650 - clhs648*clhs7;
        lhs(7,5)=clhs146*clhs636 + clhs152*clhs637 + clhs158*clhs638 - clhs26*clhs652 - clhs36*clhs653 - clhs651*clhs7;
        lhs(7,6)=clhs164*clhs636 + clhs170*clhs637 + clhs176*clhs638 - clhs26*clhs655 - clhs36*clhs656 - clhs654*clhs7;
        lhs(7,7)=clhs182*clhs636 + clhs188*clhs637 + clhs194*clhs638 - clhs26*clhs658 - clhs36*clhs659 - clhs657*clhs7;
        lhs(7,8)=clhs200*clhs636 + clhs206*clhs637 + clhs212*clhs638 - clhs26*clhs661 - clhs36*clhs662 - clhs660*clhs7;
        lhs(7,9)=clhs218*clhs636 + clhs224*clhs637 + clhs230*clhs638 - clhs26*clhs664 - clhs36*clhs665 - clhs663*clhs7;
        lhs(7,10)=clhs236*clhs636 + clhs242*clhs637 + clhs248*clhs638 - clhs26*clhs667 - clhs36*clhs668 - clhs666*clhs7;
        lhs(7,11)=clhs254*clhs636 - clhs26*clhs670 + clhs260*clhs637 + clhs266*clhs638 - clhs36*clhs671 - clhs669*clhs7;
        lhs(7,12)=clhs26*clhs673 + clhs278*clhs636 + clhs287*clhs637 + clhs296*clhs638 + clhs36*clhs674 + clhs672*clhs7;
        lhs(7,13)=clhs26*clhs676 + clhs308*clhs636 + clhs317*clhs637 + clhs326*clhs638 + clhs36*clhs677 + clhs675*clhs7;
        lhs(7,14)=clhs26*clhs679 + clhs338*clhs636 + clhs347*clhs637 + clhs356*clhs638 + clhs36*clhs680 + clhs678*clhs7;
        lhs(7,15)=clhs26*clhs682 + clhs36*clhs683 + clhs368*clhs636 + clhs377*clhs637 + clhs386*clhs638 + clhs681*clhs7;
        lhs(7,16)=clhs26*clhs685 + clhs36*clhs686 + clhs398*clhs636 + clhs407*clhs637 + clhs416*clhs638 + clhs684*clhs7;
        lhs(7,17)=clhs26*clhs688 + clhs36*clhs689 + clhs428*clhs636 + clhs437*clhs637 + clhs446*clhs638 + clhs687*clhs7;
        lhs(7,18)=clhs26*clhs691 + clhs36*clhs692 + clhs458*clhs636 + clhs467*clhs637 + clhs476*clhs638 + clhs690*clhs7;
        lhs(7,19)=clhs26*clhs694 + clhs36*clhs695 + clhs488*clhs636 + clhs497*clhs637 + clhs506*clhs638 + clhs693*clhs7;
        lhs(7,20)=clhs26*clhs697 + clhs36*clhs698 + clhs518*clhs636 + clhs527*clhs637 + clhs536*clhs638 + clhs696*clhs7;
        lhs(7,21)=clhs26*clhs700 + clhs36*clhs701 + clhs548*clhs636 + clhs557*clhs637 + clhs566*clhs638 + clhs699*clhs7;
        lhs(7,22)=clhs26*clhs703 + clhs36*clhs704 + clhs578*clhs636 + clhs587*clhs637 + clhs596*clhs638 + clhs7*clhs702;
        lhs(7,23)=clhs26*clhs706 + clhs36*clhs707 + clhs608*clhs636 + clhs617*clhs637 + clhs626*clhs638 + clhs7*clhs705;
        lhs(7,24)=0;
        lhs(7,25)=clhs7*clhs708;
        lhs(7,26)=clhs26*clhs709;
        lhs(7,27)=clhs36*clhs710;
        lhs(8,0)=-clhs26*clhs712 + clhs27*clhs715 - clhs36*clhs713 + clhs37*clhs716 - clhs7*clhs711 + clhs714*clhs8;
        lhs(8,1)=-clhs26*clhs718 - clhs36*clhs719 - clhs7*clhs717 + clhs714*clhs74 + clhs715*clhs80 + clhs716*clhs86;
        lhs(8,2)=clhs104*clhs716 - clhs26*clhs721 - clhs36*clhs722 - clhs7*clhs720 + clhs714*clhs92 + clhs715*clhs98;
        lhs(8,3)=clhs110*clhs714 + clhs116*clhs715 + clhs122*clhs716 - clhs26*clhs724 - clhs36*clhs725 - clhs7*clhs723;
        lhs(8,4)=clhs128*clhs714 + clhs134*clhs715 + clhs140*clhs716 - clhs26*clhs727 - clhs36*clhs728 - clhs7*clhs726;
        lhs(8,5)=clhs146*clhs714 + clhs152*clhs715 + clhs158*clhs716 - clhs26*clhs730 - clhs36*clhs731 - clhs7*clhs729;
        lhs(8,6)=clhs164*clhs714 + clhs170*clhs715 + clhs176*clhs716 - clhs26*clhs733 - clhs36*clhs734 - clhs7*clhs732;
        lhs(8,7)=clhs182*clhs714 + clhs188*clhs715 + clhs194*clhs716 - clhs26*clhs736 - clhs36*clhs737 - clhs7*clhs735;
        lhs(8,8)=clhs200*clhs714 + clhs206*clhs715 + clhs212*clhs716 - clhs26*clhs739 - clhs36*clhs740 - clhs7*clhs738;
        lhs(8,9)=clhs218*clhs714 + clhs224*clhs715 + clhs230*clhs716 - clhs26*clhs742 - clhs36*clhs743 - clhs7*clhs741;
        lhs(8,10)=clhs236*clhs714 + clhs242*clhs715 + clhs248*clhs716 - clhs26*clhs745 - clhs36*clhs746 - clhs7*clhs744;
        lhs(8,11)=clhs254*clhs714 - clhs26*clhs748 + clhs260*clhs715 + clhs266*clhs716 - clhs36*clhs749 - clhs7*clhs747;
        lhs(8,12)=clhs26*clhs751 + clhs278*clhs714 + clhs287*clhs715 + clhs296*clhs716 + clhs36*clhs752 + clhs7*clhs750;
        lhs(8,13)=clhs26*clhs754 + clhs308*clhs714 + clhs317*clhs715 + clhs326*clhs716 + clhs36*clhs755 + clhs7*clhs753;
        lhs(8,14)=clhs26*clhs757 + clhs338*clhs714 + clhs347*clhs715 + clhs356*clhs716 + clhs36*clhs758 + clhs7*clhs756;
        lhs(8,15)=clhs26*clhs760 + clhs36*clhs761 + clhs368*clhs714 + clhs377*clhs715 + clhs386*clhs716 + clhs7*clhs759;
        lhs(8,16)=clhs26*clhs763 + clhs36*clhs764 + clhs398*clhs714 + clhs407*clhs715 + clhs416*clhs716 + clhs7*clhs762;
        lhs(8,17)=clhs26*clhs766 + clhs36*clhs767 + clhs428*clhs714 + clhs437*clhs715 + clhs446*clhs716 + clhs7*clhs765;
        lhs(8,18)=clhs26*clhs769 + clhs36*clhs770 + clhs458*clhs714 + clhs467*clhs715 + clhs476*clhs716 + clhs7*clhs768;
        lhs(8,19)=clhs26*clhs772 + clhs36*clhs773 + clhs488*clhs714 + clhs497*clhs715 + clhs506*clhs716 + clhs7*clhs771;
        lhs(8,20)=clhs26*clhs775 + clhs36*clhs776 + clhs518*clhs714 + clhs527*clhs715 + clhs536*clhs716 + clhs7*clhs774;
        lhs(8,21)=clhs26*clhs778 + clhs36*clhs779 + clhs548*clhs714 + clhs557*clhs715 + clhs566*clhs716 + clhs7*clhs777;
        lhs(8,22)=clhs26*clhs781 + clhs36*clhs782 + clhs578*clhs714 + clhs587*clhs715 + clhs596*clhs716 + clhs7*clhs780;
        lhs(8,23)=clhs26*clhs784 + clhs36*clhs785 + clhs608*clhs714 + clhs617*clhs715 + clhs626*clhs716 + clhs7*clhs783;
        lhs(8,24)=0;
        lhs(8,25)=clhs7*clhs786;
        lhs(8,26)=clhs26*clhs787;
        lhs(8,27)=clhs36*clhs788;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs59 - clhs28*clhs31 + clhs29*clhs65 - clhs38*clhs41 + clhs39*clhs71;
        lhs(9,1)=-clhs10*clhs77 - clhs28*clhs83 - clhs38*clhs89 + clhs59*clhs75 + clhs65*clhs81 + clhs71*clhs87;
        lhs(9,2)=-clhs10*clhs95 - clhs101*clhs28 + clhs105*clhs71 - clhs107*clhs38 + clhs59*clhs93 + clhs65*clhs99;
        lhs(9,3)=-clhs10*clhs113 + clhs111*clhs59 + clhs117*clhs65 - clhs119*clhs28 + clhs123*clhs71 - clhs125*clhs38;
        lhs(9,4)=-clhs10*clhs131 + clhs129*clhs59 + clhs135*clhs65 - clhs137*clhs28 + clhs141*clhs71 - clhs143*clhs38;
        lhs(9,5)=-clhs10*clhs149 + clhs147*clhs59 + clhs153*clhs65 - clhs155*clhs28 + clhs159*clhs71 - clhs161*clhs38;
        lhs(9,6)=-clhs10*clhs167 + clhs165*clhs59 + clhs171*clhs65 - clhs173*clhs28 + clhs177*clhs71 - clhs179*clhs38;
        lhs(9,7)=-clhs10*clhs185 + clhs183*clhs59 + clhs189*clhs65 - clhs191*clhs28 + clhs195*clhs71 - clhs197*clhs38;
        lhs(9,8)=-clhs10*clhs203 + clhs201*clhs59 + clhs207*clhs65 - clhs209*clhs28 + clhs213*clhs71 - clhs215*clhs38;
        lhs(9,9)=-clhs10*clhs221 + clhs219*clhs59 + clhs225*clhs65 - clhs227*clhs28 + clhs231*clhs71 - clhs233*clhs38;
        lhs(9,10)=-clhs10*clhs239 + clhs237*clhs59 + clhs243*clhs65 - clhs245*clhs28 + clhs249*clhs71 - clhs251*clhs38;
        lhs(9,11)=-clhs10*clhs257 + clhs255*clhs59 + clhs261*clhs65 - clhs263*clhs28 + clhs267*clhs71 - clhs269*clhs38;
        lhs(9,12)=clhs10*clhs281 + clhs279*clhs59 + clhs28*clhs290 + clhs288*clhs65 + clhs297*clhs71 + clhs299*clhs38;
        lhs(9,13)=clhs10*clhs311 + clhs28*clhs320 + clhs309*clhs59 + clhs318*clhs65 + clhs327*clhs71 + clhs329*clhs38;
        lhs(9,14)=clhs10*clhs341 + clhs28*clhs350 + clhs339*clhs59 + clhs348*clhs65 + clhs357*clhs71 + clhs359*clhs38;
        lhs(9,15)=clhs10*clhs371 + clhs28*clhs380 + clhs369*clhs59 + clhs378*clhs65 + clhs38*clhs389 + clhs387*clhs71;
        lhs(9,16)=clhs10*clhs401 + clhs28*clhs410 + clhs38*clhs419 + clhs399*clhs59 + clhs408*clhs65 + clhs417*clhs71;
        lhs(9,17)=clhs10*clhs431 + clhs28*clhs440 + clhs38*clhs449 + clhs429*clhs59 + clhs438*clhs65 + clhs447*clhs71;
        lhs(9,18)=clhs10*clhs461 + clhs28*clhs470 + clhs38*clhs479 + clhs459*clhs59 + clhs468*clhs65 + clhs477*clhs71;
        lhs(9,19)=clhs10*clhs491 + clhs28*clhs500 + clhs38*clhs509 + clhs489*clhs59 + clhs498*clhs65 + clhs507*clhs71;
        lhs(9,20)=clhs10*clhs521 + clhs28*clhs530 + clhs38*clhs539 + clhs519*clhs59 + clhs528*clhs65 + clhs537*clhs71;
        lhs(9,21)=clhs10*clhs551 + clhs28*clhs560 + clhs38*clhs569 + clhs549*clhs59 + clhs558*clhs65 + clhs567*clhs71;
        lhs(9,22)=clhs10*clhs581 + clhs28*clhs590 + clhs38*clhs599 + clhs579*clhs59 + clhs588*clhs65 + clhs597*clhs71;
        lhs(9,23)=clhs10*clhs611 + clhs28*clhs620 + clhs38*clhs629 + clhs59*clhs609 + clhs618*clhs65 + clhs627*clhs71;
        lhs(9,24)=0;
        lhs(9,25)=clhs10*clhs630;
        lhs(9,26)=clhs28*clhs631;
        lhs(9,27)=clhs38*clhs632;
        lhs(10,0)=-clhs10*clhs633 + clhs11*clhs636 - clhs28*clhs634 + clhs29*clhs637 - clhs38*clhs635 + clhs39*clhs638;
        lhs(10,1)=-clhs10*clhs639 - clhs28*clhs640 - clhs38*clhs641 + clhs636*clhs75 + clhs637*clhs81 + clhs638*clhs87;
        lhs(10,2)=-clhs10*clhs642 + clhs105*clhs638 - clhs28*clhs643 - clhs38*clhs644 + clhs636*clhs93 + clhs637*clhs99;
        lhs(10,3)=-clhs10*clhs645 + clhs111*clhs636 + clhs117*clhs637 + clhs123*clhs638 - clhs28*clhs646 - clhs38*clhs647;
        lhs(10,4)=-clhs10*clhs648 + clhs129*clhs636 + clhs135*clhs637 + clhs141*clhs638 - clhs28*clhs649 - clhs38*clhs650;
        lhs(10,5)=-clhs10*clhs651 + clhs147*clhs636 + clhs153*clhs637 + clhs159*clhs638 - clhs28*clhs652 - clhs38*clhs653;
        lhs(10,6)=-clhs10*clhs654 + clhs165*clhs636 + clhs171*clhs637 + clhs177*clhs638 - clhs28*clhs655 - clhs38*clhs656;
        lhs(10,7)=-clhs10*clhs657 + clhs183*clhs636 + clhs189*clhs637 + clhs195*clhs638 - clhs28*clhs658 - clhs38*clhs659;
        lhs(10,8)=-clhs10*clhs660 + clhs201*clhs636 + clhs207*clhs637 + clhs213*clhs638 - clhs28*clhs661 - clhs38*clhs662;
        lhs(10,9)=-clhs10*clhs663 + clhs219*clhs636 + clhs225*clhs637 + clhs231*clhs638 - clhs28*clhs664 - clhs38*clhs665;
        lhs(10,10)=-clhs10*clhs666 + clhs237*clhs636 + clhs243*clhs637 + clhs249*clhs638 - clhs28*clhs667 - clhs38*clhs668;
        lhs(10,11)=-clhs10*clhs669 + clhs255*clhs636 + clhs261*clhs637 + clhs267*clhs638 - clhs28*clhs670 - clhs38*clhs671;
        lhs(10,12)=clhs10*clhs672 + clhs279*clhs636 + clhs28*clhs673 + clhs288*clhs637 + clhs297*clhs638 + clhs38*clhs674;
        lhs(10,13)=clhs10*clhs675 + clhs28*clhs676 + clhs309*clhs636 + clhs318*clhs637 + clhs327*clhs638 + clhs38*clhs677;
        lhs(10,14)=clhs10*clhs678 + clhs28*clhs679 + clhs339*clhs636 + clhs348*clhs637 + clhs357*clhs638 + clhs38*clhs680;
        lhs(10,15)=clhs10*clhs681 + clhs28*clhs682 + clhs369*clhs636 + clhs378*clhs637 + clhs38*clhs683 + clhs387*clhs638;
        lhs(10,16)=clhs10*clhs684 + clhs28*clhs685 + clhs38*clhs686 + clhs399*clhs636 + clhs408*clhs637 + clhs417*clhs638;
        lhs(10,17)=clhs10*clhs687 + clhs28*clhs688 + clhs38*clhs689 + clhs429*clhs636 + clhs438*clhs637 + clhs447*clhs638;
        lhs(10,18)=clhs10*clhs690 + clhs28*clhs691 + clhs38*clhs692 + clhs459*clhs636 + clhs468*clhs637 + clhs477*clhs638;
        lhs(10,19)=clhs10*clhs693 + clhs28*clhs694 + clhs38*clhs695 + clhs489*clhs636 + clhs498*clhs637 + clhs507*clhs638;
        lhs(10,20)=clhs10*clhs696 + clhs28*clhs697 + clhs38*clhs698 + clhs519*clhs636 + clhs528*clhs637 + clhs537*clhs638;
        lhs(10,21)=clhs10*clhs699 + clhs28*clhs700 + clhs38*clhs701 + clhs549*clhs636 + clhs558*clhs637 + clhs567*clhs638;
        lhs(10,22)=clhs10*clhs702 + clhs28*clhs703 + clhs38*clhs704 + clhs579*clhs636 + clhs588*clhs637 + clhs597*clhs638;
        lhs(10,23)=clhs10*clhs705 + clhs28*clhs706 + clhs38*clhs707 + clhs609*clhs636 + clhs618*clhs637 + clhs627*clhs638;
        lhs(10,24)=0;
        lhs(10,25)=clhs10*clhs708;
        lhs(10,26)=clhs28*clhs709;
        lhs(10,27)=clhs38*clhs710;
        lhs(11,0)=-clhs10*clhs711 + clhs11*clhs714 - clhs28*clhs712 + clhs29*clhs715 - clhs38*clhs713 + clhs39*clhs716;
        lhs(11,1)=-clhs10*clhs717 - clhs28*clhs718 - clhs38*clhs719 + clhs714*clhs75 + clhs715*clhs81 + clhs716*clhs87;
        lhs(11,2)=-clhs10*clhs720 + clhs105*clhs716 - clhs28*clhs721 - clhs38*clhs722 + clhs714*clhs93 + clhs715*clhs99;
        lhs(11,3)=-clhs10*clhs723 + clhs111*clhs714 + clhs117*clhs715 + clhs123*clhs716 - clhs28*clhs724 - clhs38*clhs725;
        lhs(11,4)=-clhs10*clhs726 + clhs129*clhs714 + clhs135*clhs715 + clhs141*clhs716 - clhs28*clhs727 - clhs38*clhs728;
        lhs(11,5)=-clhs10*clhs729 + clhs147*clhs714 + clhs153*clhs715 + clhs159*clhs716 - clhs28*clhs730 - clhs38*clhs731;
        lhs(11,6)=-clhs10*clhs732 + clhs165*clhs714 + clhs171*clhs715 + clhs177*clhs716 - clhs28*clhs733 - clhs38*clhs734;
        lhs(11,7)=-clhs10*clhs735 + clhs183*clhs714 + clhs189*clhs715 + clhs195*clhs716 - clhs28*clhs736 - clhs38*clhs737;
        lhs(11,8)=-clhs10*clhs738 + clhs201*clhs714 + clhs207*clhs715 + clhs213*clhs716 - clhs28*clhs739 - clhs38*clhs740;
        lhs(11,9)=-clhs10*clhs741 + clhs219*clhs714 + clhs225*clhs715 + clhs231*clhs716 - clhs28*clhs742 - clhs38*clhs743;
        lhs(11,10)=-clhs10*clhs744 + clhs237*clhs714 + clhs243*clhs715 + clhs249*clhs716 - clhs28*clhs745 - clhs38*clhs746;
        lhs(11,11)=-clhs10*clhs747 + clhs255*clhs714 + clhs261*clhs715 + clhs267*clhs716 - clhs28*clhs748 - clhs38*clhs749;
        lhs(11,12)=clhs10*clhs750 + clhs279*clhs714 + clhs28*clhs751 + clhs288*clhs715 + clhs297*clhs716 + clhs38*clhs752;
        lhs(11,13)=clhs10*clhs753 + clhs28*clhs754 + clhs309*clhs714 + clhs318*clhs715 + clhs327*clhs716 + clhs38*clhs755;
        lhs(11,14)=clhs10*clhs756 + clhs28*clhs757 + clhs339*clhs714 + clhs348*clhs715 + clhs357*clhs716 + clhs38*clhs758;
        lhs(11,15)=clhs10*clhs759 + clhs28*clhs760 + clhs369*clhs714 + clhs378*clhs715 + clhs38*clhs761 + clhs387*clhs716;
        lhs(11,16)=clhs10*clhs762 + clhs28*clhs763 + clhs38*clhs764 + clhs399*clhs714 + clhs408*clhs715 + clhs417*clhs716;
        lhs(11,17)=clhs10*clhs765 + clhs28*clhs766 + clhs38*clhs767 + clhs429*clhs714 + clhs438*clhs715 + clhs447*clhs716;
        lhs(11,18)=clhs10*clhs768 + clhs28*clhs769 + clhs38*clhs770 + clhs459*clhs714 + clhs468*clhs715 + clhs477*clhs716;
        lhs(11,19)=clhs10*clhs771 + clhs28*clhs772 + clhs38*clhs773 + clhs489*clhs714 + clhs498*clhs715 + clhs507*clhs716;
        lhs(11,20)=clhs10*clhs774 + clhs28*clhs775 + clhs38*clhs776 + clhs519*clhs714 + clhs528*clhs715 + clhs537*clhs716;
        lhs(11,21)=clhs10*clhs777 + clhs28*clhs778 + clhs38*clhs779 + clhs549*clhs714 + clhs558*clhs715 + clhs567*clhs716;
        lhs(11,22)=clhs10*clhs780 + clhs28*clhs781 + clhs38*clhs782 + clhs579*clhs714 + clhs588*clhs715 + clhs597*clhs716;
        lhs(11,23)=clhs10*clhs783 + clhs28*clhs784 + clhs38*clhs785 + clhs609*clhs714 + clhs618*clhs715 + clhs627*clhs716;
        lhs(11,24)=0;
        lhs(11,25)=clhs10*clhs786;
        lhs(11,26)=clhs28*clhs787;
        lhs(11,27)=clhs38*clhs788;
        lhs(12,0)=penalty_parameter*(clhs43*clhs789 + clhs60*clhs790 + clhs66*clhs791);
        lhs(12,1)=penalty_parameter*(clhs43*clhs792 + clhs60*clhs793 + clhs66*clhs794);
        lhs(12,2)=penalty_parameter*(clhs43*clhs795 + clhs60*clhs796 + clhs66*clhs797);
        lhs(12,3)=penalty_parameter*(clhs43*clhs798 + clhs60*clhs799 + clhs66*clhs800);
        lhs(12,4)=penalty_parameter*(clhs43*clhs801 + clhs60*clhs802 + clhs66*clhs803);
        lhs(12,5)=penalty_parameter*(clhs43*clhs804 + clhs60*clhs805 + clhs66*clhs806);
        lhs(12,6)=penalty_parameter*(clhs43*clhs807 + clhs60*clhs808 + clhs66*clhs809);
        lhs(12,7)=penalty_parameter*(clhs43*clhs810 + clhs60*clhs811 + clhs66*clhs812);
        lhs(12,8)=penalty_parameter*(clhs43*clhs813 + clhs60*clhs814 + clhs66*clhs815);
        lhs(12,9)=penalty_parameter*(clhs43*clhs816 + clhs60*clhs817 + clhs66*clhs818);
        lhs(12,10)=penalty_parameter*(clhs43*clhs819 + clhs60*clhs820 + clhs66*clhs821);
        lhs(12,11)=penalty_parameter*(clhs43*clhs822 + clhs60*clhs823 + clhs66*clhs824);
        lhs(12,12)=-clhs273*clhs59 - clhs281*clhs43 - clhs282*clhs65 - clhs290*clhs60 - clhs291*clhs71 - clhs299*clhs66;
        lhs(12,13)=-clhs303*clhs59 - clhs311*clhs43 - clhs312*clhs65 - clhs320*clhs60 - clhs321*clhs71 - clhs329*clhs66;
        lhs(12,14)=-clhs333*clhs59 - clhs341*clhs43 - clhs342*clhs65 - clhs350*clhs60 - clhs351*clhs71 - clhs359*clhs66;
        lhs(12,15)=-clhs363*clhs59 - clhs371*clhs43 - clhs372*clhs65 - clhs380*clhs60 - clhs381*clhs71 - clhs389*clhs66;
        lhs(12,16)=-clhs393*clhs59 - clhs401*clhs43 - clhs402*clhs65 - clhs410*clhs60 - clhs411*clhs71 - clhs419*clhs66;
        lhs(12,17)=-clhs423*clhs59 - clhs43*clhs431 - clhs432*clhs65 - clhs440*clhs60 - clhs441*clhs71 - clhs449*clhs66;
        lhs(12,18)=-clhs43*clhs461 - clhs453*clhs59 - clhs462*clhs65 - clhs470*clhs60 - clhs471*clhs71 - clhs479*clhs66;
        lhs(12,19)=-clhs43*clhs491 - clhs483*clhs59 - clhs492*clhs65 - clhs500*clhs60 - clhs501*clhs71 - clhs509*clhs66;
        lhs(12,20)=-clhs43*clhs521 - clhs513*clhs59 - clhs522*clhs65 - clhs530*clhs60 - clhs531*clhs71 - clhs539*clhs66;
        lhs(12,21)=-clhs43*clhs551 - clhs543*clhs59 - clhs552*clhs65 - clhs560*clhs60 - clhs561*clhs71 - clhs569*clhs66;
        lhs(12,22)=-clhs43*clhs581 - clhs573*clhs59 - clhs582*clhs65 - clhs590*clhs60 - clhs591*clhs71 - clhs599*clhs66;
        lhs(12,23)=-clhs43*clhs611 - clhs59*clhs603 - clhs60*clhs620 - clhs612*clhs65 - clhs621*clhs71 - clhs629*clhs66;
        lhs(12,24)=0;
        lhs(12,25)=-clhs43*clhs630;
        lhs(12,26)=-clhs60*clhs631;
        lhs(12,27)=-clhs632*clhs66;
        lhs(13,0)=penalty_parameter*(clhs43*clhs825 + clhs60*clhs826 + clhs66*clhs827);
        lhs(13,1)=penalty_parameter*(clhs43*clhs828 + clhs60*clhs829 + clhs66*clhs830);
        lhs(13,2)=penalty_parameter*(clhs43*clhs831 + clhs60*clhs832 + clhs66*clhs833);
        lhs(13,3)=penalty_parameter*(clhs43*clhs834 + clhs60*clhs835 + clhs66*clhs836);
        lhs(13,4)=penalty_parameter*(clhs43*clhs837 + clhs60*clhs838 + clhs66*clhs839);
        lhs(13,5)=penalty_parameter*(clhs43*clhs840 + clhs60*clhs841 + clhs66*clhs842);
        lhs(13,6)=penalty_parameter*(clhs43*clhs843 + clhs60*clhs844 + clhs66*clhs845);
        lhs(13,7)=penalty_parameter*(clhs43*clhs846 + clhs60*clhs847 + clhs66*clhs848);
        lhs(13,8)=penalty_parameter*(clhs43*clhs849 + clhs60*clhs850 + clhs66*clhs851);
        lhs(13,9)=penalty_parameter*(clhs43*clhs852 + clhs60*clhs853 + clhs66*clhs854);
        lhs(13,10)=penalty_parameter*(clhs43*clhs855 + clhs60*clhs856 + clhs66*clhs857);
        lhs(13,11)=penalty_parameter*(clhs43*clhs858 + clhs60*clhs859 + clhs66*clhs860);
        lhs(13,12)=-clhs273*clhs636 - clhs282*clhs637 - clhs291*clhs638 - clhs43*clhs672 - clhs60*clhs673 - clhs66*clhs674;
        lhs(13,13)=-clhs303*clhs636 - clhs312*clhs637 - clhs321*clhs638 - clhs43*clhs675 - clhs60*clhs676 - clhs66*clhs677;
        lhs(13,14)=-clhs333*clhs636 - clhs342*clhs637 - clhs351*clhs638 - clhs43*clhs678 - clhs60*clhs679 - clhs66*clhs680;
        lhs(13,15)=-clhs363*clhs636 - clhs372*clhs637 - clhs381*clhs638 - clhs43*clhs681 - clhs60*clhs682 - clhs66*clhs683;
        lhs(13,16)=-clhs393*clhs636 - clhs402*clhs637 - clhs411*clhs638 - clhs43*clhs684 - clhs60*clhs685 - clhs66*clhs686;
        lhs(13,17)=-clhs423*clhs636 - clhs43*clhs687 - clhs432*clhs637 - clhs441*clhs638 - clhs60*clhs688 - clhs66*clhs689;
        lhs(13,18)=-clhs43*clhs690 - clhs453*clhs636 - clhs462*clhs637 - clhs471*clhs638 - clhs60*clhs691 - clhs66*clhs692;
        lhs(13,19)=-clhs43*clhs693 - clhs483*clhs636 - clhs492*clhs637 - clhs501*clhs638 - clhs60*clhs694 - clhs66*clhs695;
        lhs(13,20)=-clhs43*clhs696 - clhs513*clhs636 - clhs522*clhs637 - clhs531*clhs638 - clhs60*clhs697 - clhs66*clhs698;
        lhs(13,21)=-clhs43*clhs699 - clhs543*clhs636 - clhs552*clhs637 - clhs561*clhs638 - clhs60*clhs700 - clhs66*clhs701;
        lhs(13,22)=-clhs43*clhs702 - clhs573*clhs636 - clhs582*clhs637 - clhs591*clhs638 - clhs60*clhs703 - clhs66*clhs704;
        lhs(13,23)=-clhs43*clhs705 - clhs60*clhs706 - clhs603*clhs636 - clhs612*clhs637 - clhs621*clhs638 - clhs66*clhs707;
        lhs(13,24)=0;
        lhs(13,25)=-clhs43*clhs708;
        lhs(13,26)=-clhs60*clhs709;
        lhs(13,27)=-clhs66*clhs710;
        lhs(14,0)=penalty_parameter*(clhs43*clhs861 + clhs60*clhs862 + clhs66*clhs863);
        lhs(14,1)=penalty_parameter*(clhs43*clhs864 + clhs60*clhs865 + clhs66*clhs866);
        lhs(14,2)=penalty_parameter*(clhs43*clhs867 + clhs60*clhs868 + clhs66*clhs869);
        lhs(14,3)=penalty_parameter*(clhs43*clhs870 + clhs60*clhs871 + clhs66*clhs872);
        lhs(14,4)=penalty_parameter*(clhs43*clhs873 + clhs60*clhs874 + clhs66*clhs875);
        lhs(14,5)=penalty_parameter*(clhs43*clhs876 + clhs60*clhs877 + clhs66*clhs878);
        lhs(14,6)=penalty_parameter*(clhs43*clhs879 + clhs60*clhs880 + clhs66*clhs881);
        lhs(14,7)=penalty_parameter*(clhs43*clhs882 + clhs60*clhs883 + clhs66*clhs884);
        lhs(14,8)=penalty_parameter*(clhs43*clhs885 + clhs60*clhs886 + clhs66*clhs887);
        lhs(14,9)=penalty_parameter*(clhs43*clhs888 + clhs60*clhs889 + clhs66*clhs890);
        lhs(14,10)=penalty_parameter*(clhs43*clhs891 + clhs60*clhs892 + clhs66*clhs893);
        lhs(14,11)=penalty_parameter*(clhs43*clhs894 + clhs60*clhs895 + clhs66*clhs896);
        lhs(14,12)=-clhs273*clhs714 - clhs282*clhs715 - clhs291*clhs716 - clhs43*clhs750 - clhs60*clhs751 - clhs66*clhs752;
        lhs(14,13)=-clhs303*clhs714 - clhs312*clhs715 - clhs321*clhs716 - clhs43*clhs753 - clhs60*clhs754 - clhs66*clhs755;
        lhs(14,14)=-clhs333*clhs714 - clhs342*clhs715 - clhs351*clhs716 - clhs43*clhs756 - clhs60*clhs757 - clhs66*clhs758;
        lhs(14,15)=-clhs363*clhs714 - clhs372*clhs715 - clhs381*clhs716 - clhs43*clhs759 - clhs60*clhs760 - clhs66*clhs761;
        lhs(14,16)=-clhs393*clhs714 - clhs402*clhs715 - clhs411*clhs716 - clhs43*clhs762 - clhs60*clhs763 - clhs66*clhs764;
        lhs(14,17)=-clhs423*clhs714 - clhs43*clhs765 - clhs432*clhs715 - clhs441*clhs716 - clhs60*clhs766 - clhs66*clhs767;
        lhs(14,18)=-clhs43*clhs768 - clhs453*clhs714 - clhs462*clhs715 - clhs471*clhs716 - clhs60*clhs769 - clhs66*clhs770;
        lhs(14,19)=-clhs43*clhs771 - clhs483*clhs714 - clhs492*clhs715 - clhs501*clhs716 - clhs60*clhs772 - clhs66*clhs773;
        lhs(14,20)=-clhs43*clhs774 - clhs513*clhs714 - clhs522*clhs715 - clhs531*clhs716 - clhs60*clhs775 - clhs66*clhs776;
        lhs(14,21)=-clhs43*clhs777 - clhs543*clhs714 - clhs552*clhs715 - clhs561*clhs716 - clhs60*clhs778 - clhs66*clhs779;
        lhs(14,22)=-clhs43*clhs780 - clhs573*clhs714 - clhs582*clhs715 - clhs591*clhs716 - clhs60*clhs781 - clhs66*clhs782;
        lhs(14,23)=-clhs43*clhs783 - clhs60*clhs784 - clhs603*clhs714 - clhs612*clhs715 - clhs621*clhs716 - clhs66*clhs785;
        lhs(14,24)=0;
        lhs(14,25)=-clhs43*clhs786;
        lhs(14,26)=-clhs60*clhs787;
        lhs(14,27)=-clhs66*clhs788;
        lhs(15,0)=penalty_parameter*(clhs45*clhs789 + clhs61*clhs790 + clhs67*clhs791);
        lhs(15,1)=penalty_parameter*(clhs45*clhs792 + clhs61*clhs793 + clhs67*clhs794);
        lhs(15,2)=penalty_parameter*(clhs45*clhs795 + clhs61*clhs796 + clhs67*clhs797);
        lhs(15,3)=penalty_parameter*(clhs45*clhs798 + clhs61*clhs799 + clhs67*clhs800);
        lhs(15,4)=penalty_parameter*(clhs45*clhs801 + clhs61*clhs802 + clhs67*clhs803);
        lhs(15,5)=penalty_parameter*(clhs45*clhs804 + clhs61*clhs805 + clhs67*clhs806);
        lhs(15,6)=penalty_parameter*(clhs45*clhs807 + clhs61*clhs808 + clhs67*clhs809);
        lhs(15,7)=penalty_parameter*(clhs45*clhs810 + clhs61*clhs811 + clhs67*clhs812);
        lhs(15,8)=penalty_parameter*(clhs45*clhs813 + clhs61*clhs814 + clhs67*clhs815);
        lhs(15,9)=penalty_parameter*(clhs45*clhs816 + clhs61*clhs817 + clhs67*clhs818);
        lhs(15,10)=penalty_parameter*(clhs45*clhs819 + clhs61*clhs820 + clhs67*clhs821);
        lhs(15,11)=penalty_parameter*(clhs45*clhs822 + clhs61*clhs823 + clhs67*clhs824);
        lhs(15,12)=-clhs274*clhs59 - clhs281*clhs45 - clhs283*clhs65 - clhs290*clhs61 - clhs292*clhs71 - clhs299*clhs67;
        lhs(15,13)=-clhs304*clhs59 - clhs311*clhs45 - clhs313*clhs65 - clhs320*clhs61 - clhs322*clhs71 - clhs329*clhs67;
        lhs(15,14)=-clhs334*clhs59 - clhs341*clhs45 - clhs343*clhs65 - clhs350*clhs61 - clhs352*clhs71 - clhs359*clhs67;
        lhs(15,15)=-clhs364*clhs59 - clhs371*clhs45 - clhs373*clhs65 - clhs380*clhs61 - clhs382*clhs71 - clhs389*clhs67;
        lhs(15,16)=-clhs394*clhs59 - clhs401*clhs45 - clhs403*clhs65 - clhs410*clhs61 - clhs412*clhs71 - clhs419*clhs67;
        lhs(15,17)=-clhs424*clhs59 - clhs431*clhs45 - clhs433*clhs65 - clhs440*clhs61 - clhs442*clhs71 - clhs449*clhs67;
        lhs(15,18)=-clhs45*clhs461 - clhs454*clhs59 - clhs463*clhs65 - clhs470*clhs61 - clhs472*clhs71 - clhs479*clhs67;
        lhs(15,19)=-clhs45*clhs491 - clhs484*clhs59 - clhs493*clhs65 - clhs500*clhs61 - clhs502*clhs71 - clhs509*clhs67;
        lhs(15,20)=-clhs45*clhs521 - clhs514*clhs59 - clhs523*clhs65 - clhs530*clhs61 - clhs532*clhs71 - clhs539*clhs67;
        lhs(15,21)=-clhs45*clhs551 - clhs544*clhs59 - clhs553*clhs65 - clhs560*clhs61 - clhs562*clhs71 - clhs569*clhs67;
        lhs(15,22)=-clhs45*clhs581 - clhs574*clhs59 - clhs583*clhs65 - clhs590*clhs61 - clhs592*clhs71 - clhs599*clhs67;
        lhs(15,23)=-clhs45*clhs611 - clhs59*clhs604 - clhs61*clhs620 - clhs613*clhs65 - clhs622*clhs71 - clhs629*clhs67;
        lhs(15,24)=0;
        lhs(15,25)=-clhs45*clhs630;
        lhs(15,26)=-clhs61*clhs631;
        lhs(15,27)=-clhs632*clhs67;
        lhs(16,0)=penalty_parameter*(clhs45*clhs825 + clhs61*clhs826 + clhs67*clhs827);
        lhs(16,1)=penalty_parameter*(clhs45*clhs828 + clhs61*clhs829 + clhs67*clhs830);
        lhs(16,2)=penalty_parameter*(clhs45*clhs831 + clhs61*clhs832 + clhs67*clhs833);
        lhs(16,3)=penalty_parameter*(clhs45*clhs834 + clhs61*clhs835 + clhs67*clhs836);
        lhs(16,4)=penalty_parameter*(clhs45*clhs837 + clhs61*clhs838 + clhs67*clhs839);
        lhs(16,5)=penalty_parameter*(clhs45*clhs840 + clhs61*clhs841 + clhs67*clhs842);
        lhs(16,6)=penalty_parameter*(clhs45*clhs843 + clhs61*clhs844 + clhs67*clhs845);
        lhs(16,7)=penalty_parameter*(clhs45*clhs846 + clhs61*clhs847 + clhs67*clhs848);
        lhs(16,8)=penalty_parameter*(clhs45*clhs849 + clhs61*clhs850 + clhs67*clhs851);
        lhs(16,9)=penalty_parameter*(clhs45*clhs852 + clhs61*clhs853 + clhs67*clhs854);
        lhs(16,10)=penalty_parameter*(clhs45*clhs855 + clhs61*clhs856 + clhs67*clhs857);
        lhs(16,11)=penalty_parameter*(clhs45*clhs858 + clhs61*clhs859 + clhs67*clhs860);
        lhs(16,12)=-clhs274*clhs636 - clhs283*clhs637 - clhs292*clhs638 - clhs45*clhs672 - clhs61*clhs673 - clhs67*clhs674;
        lhs(16,13)=-clhs304*clhs636 - clhs313*clhs637 - clhs322*clhs638 - clhs45*clhs675 - clhs61*clhs676 - clhs67*clhs677;
        lhs(16,14)=-clhs334*clhs636 - clhs343*clhs637 - clhs352*clhs638 - clhs45*clhs678 - clhs61*clhs679 - clhs67*clhs680;
        lhs(16,15)=-clhs364*clhs636 - clhs373*clhs637 - clhs382*clhs638 - clhs45*clhs681 - clhs61*clhs682 - clhs67*clhs683;
        lhs(16,16)=-clhs394*clhs636 - clhs403*clhs637 - clhs412*clhs638 - clhs45*clhs684 - clhs61*clhs685 - clhs67*clhs686;
        lhs(16,17)=-clhs424*clhs636 - clhs433*clhs637 - clhs442*clhs638 - clhs45*clhs687 - clhs61*clhs688 - clhs67*clhs689;
        lhs(16,18)=-clhs45*clhs690 - clhs454*clhs636 - clhs463*clhs637 - clhs472*clhs638 - clhs61*clhs691 - clhs67*clhs692;
        lhs(16,19)=-clhs45*clhs693 - clhs484*clhs636 - clhs493*clhs637 - clhs502*clhs638 - clhs61*clhs694 - clhs67*clhs695;
        lhs(16,20)=-clhs45*clhs696 - clhs514*clhs636 - clhs523*clhs637 - clhs532*clhs638 - clhs61*clhs697 - clhs67*clhs698;
        lhs(16,21)=-clhs45*clhs699 - clhs544*clhs636 - clhs553*clhs637 - clhs562*clhs638 - clhs61*clhs700 - clhs67*clhs701;
        lhs(16,22)=-clhs45*clhs702 - clhs574*clhs636 - clhs583*clhs637 - clhs592*clhs638 - clhs61*clhs703 - clhs67*clhs704;
        lhs(16,23)=-clhs45*clhs705 - clhs604*clhs636 - clhs61*clhs706 - clhs613*clhs637 - clhs622*clhs638 - clhs67*clhs707;
        lhs(16,24)=0;
        lhs(16,25)=-clhs45*clhs708;
        lhs(16,26)=-clhs61*clhs709;
        lhs(16,27)=-clhs67*clhs710;
        lhs(17,0)=penalty_parameter*(clhs45*clhs861 + clhs61*clhs862 + clhs67*clhs863);
        lhs(17,1)=penalty_parameter*(clhs45*clhs864 + clhs61*clhs865 + clhs67*clhs866);
        lhs(17,2)=penalty_parameter*(clhs45*clhs867 + clhs61*clhs868 + clhs67*clhs869);
        lhs(17,3)=penalty_parameter*(clhs45*clhs870 + clhs61*clhs871 + clhs67*clhs872);
        lhs(17,4)=penalty_parameter*(clhs45*clhs873 + clhs61*clhs874 + clhs67*clhs875);
        lhs(17,5)=penalty_parameter*(clhs45*clhs876 + clhs61*clhs877 + clhs67*clhs878);
        lhs(17,6)=penalty_parameter*(clhs45*clhs879 + clhs61*clhs880 + clhs67*clhs881);
        lhs(17,7)=penalty_parameter*(clhs45*clhs882 + clhs61*clhs883 + clhs67*clhs884);
        lhs(17,8)=penalty_parameter*(clhs45*clhs885 + clhs61*clhs886 + clhs67*clhs887);
        lhs(17,9)=penalty_parameter*(clhs45*clhs888 + clhs61*clhs889 + clhs67*clhs890);
        lhs(17,10)=penalty_parameter*(clhs45*clhs891 + clhs61*clhs892 + clhs67*clhs893);
        lhs(17,11)=penalty_parameter*(clhs45*clhs894 + clhs61*clhs895 + clhs67*clhs896);
        lhs(17,12)=-clhs274*clhs714 - clhs283*clhs715 - clhs292*clhs716 - clhs45*clhs750 - clhs61*clhs751 - clhs67*clhs752;
        lhs(17,13)=-clhs304*clhs714 - clhs313*clhs715 - clhs322*clhs716 - clhs45*clhs753 - clhs61*clhs754 - clhs67*clhs755;
        lhs(17,14)=-clhs334*clhs714 - clhs343*clhs715 - clhs352*clhs716 - clhs45*clhs756 - clhs61*clhs757 - clhs67*clhs758;
        lhs(17,15)=-clhs364*clhs714 - clhs373*clhs715 - clhs382*clhs716 - clhs45*clhs759 - clhs61*clhs760 - clhs67*clhs761;
        lhs(17,16)=-clhs394*clhs714 - clhs403*clhs715 - clhs412*clhs716 - clhs45*clhs762 - clhs61*clhs763 - clhs67*clhs764;
        lhs(17,17)=-clhs424*clhs714 - clhs433*clhs715 - clhs442*clhs716 - clhs45*clhs765 - clhs61*clhs766 - clhs67*clhs767;
        lhs(17,18)=-clhs45*clhs768 - clhs454*clhs714 - clhs463*clhs715 - clhs472*clhs716 - clhs61*clhs769 - clhs67*clhs770;
        lhs(17,19)=-clhs45*clhs771 - clhs484*clhs714 - clhs493*clhs715 - clhs502*clhs716 - clhs61*clhs772 - clhs67*clhs773;
        lhs(17,20)=-clhs45*clhs774 - clhs514*clhs714 - clhs523*clhs715 - clhs532*clhs716 - clhs61*clhs775 - clhs67*clhs776;
        lhs(17,21)=-clhs45*clhs777 - clhs544*clhs714 - clhs553*clhs715 - clhs562*clhs716 - clhs61*clhs778 - clhs67*clhs779;
        lhs(17,22)=-clhs45*clhs780 - clhs574*clhs714 - clhs583*clhs715 - clhs592*clhs716 - clhs61*clhs781 - clhs67*clhs782;
        lhs(17,23)=-clhs45*clhs783 - clhs604*clhs714 - clhs61*clhs784 - clhs613*clhs715 - clhs622*clhs716 - clhs67*clhs785;
        lhs(17,24)=0;
        lhs(17,25)=-clhs45*clhs786;
        lhs(17,26)=-clhs61*clhs787;
        lhs(17,27)=-clhs67*clhs788;
        lhs(18,0)=penalty_parameter*(clhs47*clhs789 + clhs62*clhs790 + clhs68*clhs791);
        lhs(18,1)=penalty_parameter*(clhs47*clhs792 + clhs62*clhs793 + clhs68*clhs794);
        lhs(18,2)=penalty_parameter*(clhs47*clhs795 + clhs62*clhs796 + clhs68*clhs797);
        lhs(18,3)=penalty_parameter*(clhs47*clhs798 + clhs62*clhs799 + clhs68*clhs800);
        lhs(18,4)=penalty_parameter*(clhs47*clhs801 + clhs62*clhs802 + clhs68*clhs803);
        lhs(18,5)=penalty_parameter*(clhs47*clhs804 + clhs62*clhs805 + clhs68*clhs806);
        lhs(18,6)=penalty_parameter*(clhs47*clhs807 + clhs62*clhs808 + clhs68*clhs809);
        lhs(18,7)=penalty_parameter*(clhs47*clhs810 + clhs62*clhs811 + clhs68*clhs812);
        lhs(18,8)=penalty_parameter*(clhs47*clhs813 + clhs62*clhs814 + clhs68*clhs815);
        lhs(18,9)=penalty_parameter*(clhs47*clhs816 + clhs62*clhs817 + clhs68*clhs818);
        lhs(18,10)=penalty_parameter*(clhs47*clhs819 + clhs62*clhs820 + clhs68*clhs821);
        lhs(18,11)=penalty_parameter*(clhs47*clhs822 + clhs62*clhs823 + clhs68*clhs824);
        lhs(18,12)=-clhs275*clhs59 - clhs281*clhs47 - clhs284*clhs65 - clhs290*clhs62 - clhs293*clhs71 - clhs299*clhs68;
        lhs(18,13)=-clhs305*clhs59 - clhs311*clhs47 - clhs314*clhs65 - clhs320*clhs62 - clhs323*clhs71 - clhs329*clhs68;
        lhs(18,14)=-clhs335*clhs59 - clhs341*clhs47 - clhs344*clhs65 - clhs350*clhs62 - clhs353*clhs71 - clhs359*clhs68;
        lhs(18,15)=-clhs365*clhs59 - clhs371*clhs47 - clhs374*clhs65 - clhs380*clhs62 - clhs383*clhs71 - clhs389*clhs68;
        lhs(18,16)=-clhs395*clhs59 - clhs401*clhs47 - clhs404*clhs65 - clhs410*clhs62 - clhs413*clhs71 - clhs419*clhs68;
        lhs(18,17)=-clhs425*clhs59 - clhs431*clhs47 - clhs434*clhs65 - clhs440*clhs62 - clhs443*clhs71 - clhs449*clhs68;
        lhs(18,18)=-clhs455*clhs59 - clhs461*clhs47 - clhs464*clhs65 - clhs470*clhs62 - clhs473*clhs71 - clhs479*clhs68;
        lhs(18,19)=-clhs47*clhs491 - clhs485*clhs59 - clhs494*clhs65 - clhs500*clhs62 - clhs503*clhs71 - clhs509*clhs68;
        lhs(18,20)=-clhs47*clhs521 - clhs515*clhs59 - clhs524*clhs65 - clhs530*clhs62 - clhs533*clhs71 - clhs539*clhs68;
        lhs(18,21)=-clhs47*clhs551 - clhs545*clhs59 - clhs554*clhs65 - clhs560*clhs62 - clhs563*clhs71 - clhs569*clhs68;
        lhs(18,22)=-clhs47*clhs581 - clhs575*clhs59 - clhs584*clhs65 - clhs590*clhs62 - clhs593*clhs71 - clhs599*clhs68;
        lhs(18,23)=-clhs47*clhs611 - clhs59*clhs605 - clhs614*clhs65 - clhs62*clhs620 - clhs623*clhs71 - clhs629*clhs68;
        lhs(18,24)=0;
        lhs(18,25)=-clhs47*clhs630;
        lhs(18,26)=-clhs62*clhs631;
        lhs(18,27)=-clhs632*clhs68;
        lhs(19,0)=penalty_parameter*(clhs47*clhs825 + clhs62*clhs826 + clhs68*clhs827);
        lhs(19,1)=penalty_parameter*(clhs47*clhs828 + clhs62*clhs829 + clhs68*clhs830);
        lhs(19,2)=penalty_parameter*(clhs47*clhs831 + clhs62*clhs832 + clhs68*clhs833);
        lhs(19,3)=penalty_parameter*(clhs47*clhs834 + clhs62*clhs835 + clhs68*clhs836);
        lhs(19,4)=penalty_parameter*(clhs47*clhs837 + clhs62*clhs838 + clhs68*clhs839);
        lhs(19,5)=penalty_parameter*(clhs47*clhs840 + clhs62*clhs841 + clhs68*clhs842);
        lhs(19,6)=penalty_parameter*(clhs47*clhs843 + clhs62*clhs844 + clhs68*clhs845);
        lhs(19,7)=penalty_parameter*(clhs47*clhs846 + clhs62*clhs847 + clhs68*clhs848);
        lhs(19,8)=penalty_parameter*(clhs47*clhs849 + clhs62*clhs850 + clhs68*clhs851);
        lhs(19,9)=penalty_parameter*(clhs47*clhs852 + clhs62*clhs853 + clhs68*clhs854);
        lhs(19,10)=penalty_parameter*(clhs47*clhs855 + clhs62*clhs856 + clhs68*clhs857);
        lhs(19,11)=penalty_parameter*(clhs47*clhs858 + clhs62*clhs859 + clhs68*clhs860);
        lhs(19,12)=-clhs275*clhs636 - clhs284*clhs637 - clhs293*clhs638 - clhs47*clhs672 - clhs62*clhs673 - clhs674*clhs68;
        lhs(19,13)=-clhs305*clhs636 - clhs314*clhs637 - clhs323*clhs638 - clhs47*clhs675 - clhs62*clhs676 - clhs677*clhs68;
        lhs(19,14)=-clhs335*clhs636 - clhs344*clhs637 - clhs353*clhs638 - clhs47*clhs678 - clhs62*clhs679 - clhs68*clhs680;
        lhs(19,15)=-clhs365*clhs636 - clhs374*clhs637 - clhs383*clhs638 - clhs47*clhs681 - clhs62*clhs682 - clhs68*clhs683;
        lhs(19,16)=-clhs395*clhs636 - clhs404*clhs637 - clhs413*clhs638 - clhs47*clhs684 - clhs62*clhs685 - clhs68*clhs686;
        lhs(19,17)=-clhs425*clhs636 - clhs434*clhs637 - clhs443*clhs638 - clhs47*clhs687 - clhs62*clhs688 - clhs68*clhs689;
        lhs(19,18)=-clhs455*clhs636 - clhs464*clhs637 - clhs47*clhs690 - clhs473*clhs638 - clhs62*clhs691 - clhs68*clhs692;
        lhs(19,19)=-clhs47*clhs693 - clhs485*clhs636 - clhs494*clhs637 - clhs503*clhs638 - clhs62*clhs694 - clhs68*clhs695;
        lhs(19,20)=-clhs47*clhs696 - clhs515*clhs636 - clhs524*clhs637 - clhs533*clhs638 - clhs62*clhs697 - clhs68*clhs698;
        lhs(19,21)=-clhs47*clhs699 - clhs545*clhs636 - clhs554*clhs637 - clhs563*clhs638 - clhs62*clhs700 - clhs68*clhs701;
        lhs(19,22)=-clhs47*clhs702 - clhs575*clhs636 - clhs584*clhs637 - clhs593*clhs638 - clhs62*clhs703 - clhs68*clhs704;
        lhs(19,23)=-clhs47*clhs705 - clhs605*clhs636 - clhs614*clhs637 - clhs62*clhs706 - clhs623*clhs638 - clhs68*clhs707;
        lhs(19,24)=0;
        lhs(19,25)=-clhs47*clhs708;
        lhs(19,26)=-clhs62*clhs709;
        lhs(19,27)=-clhs68*clhs710;
        lhs(20,0)=penalty_parameter*(clhs47*clhs861 + clhs62*clhs862 + clhs68*clhs863);
        lhs(20,1)=penalty_parameter*(clhs47*clhs864 + clhs62*clhs865 + clhs68*clhs866);
        lhs(20,2)=penalty_parameter*(clhs47*clhs867 + clhs62*clhs868 + clhs68*clhs869);
        lhs(20,3)=penalty_parameter*(clhs47*clhs870 + clhs62*clhs871 + clhs68*clhs872);
        lhs(20,4)=penalty_parameter*(clhs47*clhs873 + clhs62*clhs874 + clhs68*clhs875);
        lhs(20,5)=penalty_parameter*(clhs47*clhs876 + clhs62*clhs877 + clhs68*clhs878);
        lhs(20,6)=penalty_parameter*(clhs47*clhs879 + clhs62*clhs880 + clhs68*clhs881);
        lhs(20,7)=penalty_parameter*(clhs47*clhs882 + clhs62*clhs883 + clhs68*clhs884);
        lhs(20,8)=penalty_parameter*(clhs47*clhs885 + clhs62*clhs886 + clhs68*clhs887);
        lhs(20,9)=penalty_parameter*(clhs47*clhs888 + clhs62*clhs889 + clhs68*clhs890);
        lhs(20,10)=penalty_parameter*(clhs47*clhs891 + clhs62*clhs892 + clhs68*clhs893);
        lhs(20,11)=penalty_parameter*(clhs47*clhs894 + clhs62*clhs895 + clhs68*clhs896);
        lhs(20,12)=-clhs275*clhs714 - clhs284*clhs715 - clhs293*clhs716 - clhs47*clhs750 - clhs62*clhs751 - clhs68*clhs752;
        lhs(20,13)=-clhs305*clhs714 - clhs314*clhs715 - clhs323*clhs716 - clhs47*clhs753 - clhs62*clhs754 - clhs68*clhs755;
        lhs(20,14)=-clhs335*clhs714 - clhs344*clhs715 - clhs353*clhs716 - clhs47*clhs756 - clhs62*clhs757 - clhs68*clhs758;
        lhs(20,15)=-clhs365*clhs714 - clhs374*clhs715 - clhs383*clhs716 - clhs47*clhs759 - clhs62*clhs760 - clhs68*clhs761;
        lhs(20,16)=-clhs395*clhs714 - clhs404*clhs715 - clhs413*clhs716 - clhs47*clhs762 - clhs62*clhs763 - clhs68*clhs764;
        lhs(20,17)=-clhs425*clhs714 - clhs434*clhs715 - clhs443*clhs716 - clhs47*clhs765 - clhs62*clhs766 - clhs68*clhs767;
        lhs(20,18)=-clhs455*clhs714 - clhs464*clhs715 - clhs47*clhs768 - clhs473*clhs716 - clhs62*clhs769 - clhs68*clhs770;
        lhs(20,19)=-clhs47*clhs771 - clhs485*clhs714 - clhs494*clhs715 - clhs503*clhs716 - clhs62*clhs772 - clhs68*clhs773;
        lhs(20,20)=-clhs47*clhs774 - clhs515*clhs714 - clhs524*clhs715 - clhs533*clhs716 - clhs62*clhs775 - clhs68*clhs776;
        lhs(20,21)=-clhs47*clhs777 - clhs545*clhs714 - clhs554*clhs715 - clhs563*clhs716 - clhs62*clhs778 - clhs68*clhs779;
        lhs(20,22)=-clhs47*clhs780 - clhs575*clhs714 - clhs584*clhs715 - clhs593*clhs716 - clhs62*clhs781 - clhs68*clhs782;
        lhs(20,23)=-clhs47*clhs783 - clhs605*clhs714 - clhs614*clhs715 - clhs62*clhs784 - clhs623*clhs716 - clhs68*clhs785;
        lhs(20,24)=0;
        lhs(20,25)=-clhs47*clhs786;
        lhs(20,26)=-clhs62*clhs787;
        lhs(20,27)=-clhs68*clhs788;
        lhs(21,0)=penalty_parameter*(clhs49*clhs789 + clhs63*clhs790 + clhs69*clhs791);
        lhs(21,1)=penalty_parameter*(clhs49*clhs792 + clhs63*clhs793 + clhs69*clhs794);
        lhs(21,2)=penalty_parameter*(clhs49*clhs795 + clhs63*clhs796 + clhs69*clhs797);
        lhs(21,3)=penalty_parameter*(clhs49*clhs798 + clhs63*clhs799 + clhs69*clhs800);
        lhs(21,4)=penalty_parameter*(clhs49*clhs801 + clhs63*clhs802 + clhs69*clhs803);
        lhs(21,5)=penalty_parameter*(clhs49*clhs804 + clhs63*clhs805 + clhs69*clhs806);
        lhs(21,6)=penalty_parameter*(clhs49*clhs807 + clhs63*clhs808 + clhs69*clhs809);
        lhs(21,7)=penalty_parameter*(clhs49*clhs810 + clhs63*clhs811 + clhs69*clhs812);
        lhs(21,8)=penalty_parameter*(clhs49*clhs813 + clhs63*clhs814 + clhs69*clhs815);
        lhs(21,9)=penalty_parameter*(clhs49*clhs816 + clhs63*clhs817 + clhs69*clhs818);
        lhs(21,10)=penalty_parameter*(clhs49*clhs819 + clhs63*clhs820 + clhs69*clhs821);
        lhs(21,11)=penalty_parameter*(clhs49*clhs822 + clhs63*clhs823 + clhs69*clhs824);
        lhs(21,12)=-clhs276*clhs59 - clhs281*clhs49 - clhs285*clhs65 - clhs290*clhs63 - clhs294*clhs71 - clhs299*clhs69;
        lhs(21,13)=-clhs306*clhs59 - clhs311*clhs49 - clhs315*clhs65 - clhs320*clhs63 - clhs324*clhs71 - clhs329*clhs69;
        lhs(21,14)=-clhs336*clhs59 - clhs341*clhs49 - clhs345*clhs65 - clhs350*clhs63 - clhs354*clhs71 - clhs359*clhs69;
        lhs(21,15)=-clhs366*clhs59 - clhs371*clhs49 - clhs375*clhs65 - clhs380*clhs63 - clhs384*clhs71 - clhs389*clhs69;
        lhs(21,16)=-clhs396*clhs59 - clhs401*clhs49 - clhs405*clhs65 - clhs410*clhs63 - clhs414*clhs71 - clhs419*clhs69;
        lhs(21,17)=-clhs426*clhs59 - clhs431*clhs49 - clhs435*clhs65 - clhs440*clhs63 - clhs444*clhs71 - clhs449*clhs69;
        lhs(21,18)=-clhs456*clhs59 - clhs461*clhs49 - clhs465*clhs65 - clhs470*clhs63 - clhs474*clhs71 - clhs479*clhs69;
        lhs(21,19)=-clhs486*clhs59 - clhs49*clhs491 - clhs495*clhs65 - clhs500*clhs63 - clhs504*clhs71 - clhs509*clhs69;
        lhs(21,20)=-clhs49*clhs521 - clhs516*clhs59 - clhs525*clhs65 - clhs530*clhs63 - clhs534*clhs71 - clhs539*clhs69;
        lhs(21,21)=-clhs49*clhs551 - clhs546*clhs59 - clhs555*clhs65 - clhs560*clhs63 - clhs564*clhs71 - clhs569*clhs69;
        lhs(21,22)=-clhs49*clhs581 - clhs576*clhs59 - clhs585*clhs65 - clhs590*clhs63 - clhs594*clhs71 - clhs599*clhs69;
        lhs(21,23)=-clhs49*clhs611 - clhs59*clhs606 - clhs615*clhs65 - clhs620*clhs63 - clhs624*clhs71 - clhs629*clhs69;
        lhs(21,24)=0;
        lhs(21,25)=-clhs49*clhs630;
        lhs(21,26)=-clhs63*clhs631;
        lhs(21,27)=-clhs632*clhs69;
        lhs(22,0)=penalty_parameter*(clhs49*clhs825 + clhs63*clhs826 + clhs69*clhs827);
        lhs(22,1)=penalty_parameter*(clhs49*clhs828 + clhs63*clhs829 + clhs69*clhs830);
        lhs(22,2)=penalty_parameter*(clhs49*clhs831 + clhs63*clhs832 + clhs69*clhs833);
        lhs(22,3)=penalty_parameter*(clhs49*clhs834 + clhs63*clhs835 + clhs69*clhs836);
        lhs(22,4)=penalty_parameter*(clhs49*clhs837 + clhs63*clhs838 + clhs69*clhs839);
        lhs(22,5)=penalty_parameter*(clhs49*clhs840 + clhs63*clhs841 + clhs69*clhs842);
        lhs(22,6)=penalty_parameter*(clhs49*clhs843 + clhs63*clhs844 + clhs69*clhs845);
        lhs(22,7)=penalty_parameter*(clhs49*clhs846 + clhs63*clhs847 + clhs69*clhs848);
        lhs(22,8)=penalty_parameter*(clhs49*clhs849 + clhs63*clhs850 + clhs69*clhs851);
        lhs(22,9)=penalty_parameter*(clhs49*clhs852 + clhs63*clhs853 + clhs69*clhs854);
        lhs(22,10)=penalty_parameter*(clhs49*clhs855 + clhs63*clhs856 + clhs69*clhs857);
        lhs(22,11)=penalty_parameter*(clhs49*clhs858 + clhs63*clhs859 + clhs69*clhs860);
        lhs(22,12)=-clhs276*clhs636 - clhs285*clhs637 - clhs294*clhs638 - clhs49*clhs672 - clhs63*clhs673 - clhs674*clhs69;
        lhs(22,13)=-clhs306*clhs636 - clhs315*clhs637 - clhs324*clhs638 - clhs49*clhs675 - clhs63*clhs676 - clhs677*clhs69;
        lhs(22,14)=-clhs336*clhs636 - clhs345*clhs637 - clhs354*clhs638 - clhs49*clhs678 - clhs63*clhs679 - clhs680*clhs69;
        lhs(22,15)=-clhs366*clhs636 - clhs375*clhs637 - clhs384*clhs638 - clhs49*clhs681 - clhs63*clhs682 - clhs683*clhs69;
        lhs(22,16)=-clhs396*clhs636 - clhs405*clhs637 - clhs414*clhs638 - clhs49*clhs684 - clhs63*clhs685 - clhs686*clhs69;
        lhs(22,17)=-clhs426*clhs636 - clhs435*clhs637 - clhs444*clhs638 - clhs49*clhs687 - clhs63*clhs688 - clhs689*clhs69;
        lhs(22,18)=-clhs456*clhs636 - clhs465*clhs637 - clhs474*clhs638 - clhs49*clhs690 - clhs63*clhs691 - clhs69*clhs692;
        lhs(22,19)=-clhs486*clhs636 - clhs49*clhs693 - clhs495*clhs637 - clhs504*clhs638 - clhs63*clhs694 - clhs69*clhs695;
        lhs(22,20)=-clhs49*clhs696 - clhs516*clhs636 - clhs525*clhs637 - clhs534*clhs638 - clhs63*clhs697 - clhs69*clhs698;
        lhs(22,21)=-clhs49*clhs699 - clhs546*clhs636 - clhs555*clhs637 - clhs564*clhs638 - clhs63*clhs700 - clhs69*clhs701;
        lhs(22,22)=-clhs49*clhs702 - clhs576*clhs636 - clhs585*clhs637 - clhs594*clhs638 - clhs63*clhs703 - clhs69*clhs704;
        lhs(22,23)=-clhs49*clhs705 - clhs606*clhs636 - clhs615*clhs637 - clhs624*clhs638 - clhs63*clhs706 - clhs69*clhs707;
        lhs(22,24)=0;
        lhs(22,25)=-clhs49*clhs708;
        lhs(22,26)=-clhs63*clhs709;
        lhs(22,27)=-clhs69*clhs710;
        lhs(23,0)=penalty_parameter*(clhs49*clhs861 + clhs63*clhs862 + clhs69*clhs863);
        lhs(23,1)=penalty_parameter*(clhs49*clhs864 + clhs63*clhs865 + clhs69*clhs866);
        lhs(23,2)=penalty_parameter*(clhs49*clhs867 + clhs63*clhs868 + clhs69*clhs869);
        lhs(23,3)=penalty_parameter*(clhs49*clhs870 + clhs63*clhs871 + clhs69*clhs872);
        lhs(23,4)=penalty_parameter*(clhs49*clhs873 + clhs63*clhs874 + clhs69*clhs875);
        lhs(23,5)=penalty_parameter*(clhs49*clhs876 + clhs63*clhs877 + clhs69*clhs878);
        lhs(23,6)=penalty_parameter*(clhs49*clhs879 + clhs63*clhs880 + clhs69*clhs881);
        lhs(23,7)=penalty_parameter*(clhs49*clhs882 + clhs63*clhs883 + clhs69*clhs884);
        lhs(23,8)=penalty_parameter*(clhs49*clhs885 + clhs63*clhs886 + clhs69*clhs887);
        lhs(23,9)=penalty_parameter*(clhs49*clhs888 + clhs63*clhs889 + clhs69*clhs890);
        lhs(23,10)=penalty_parameter*(clhs49*clhs891 + clhs63*clhs892 + clhs69*clhs893);
        lhs(23,11)=penalty_parameter*(clhs49*clhs894 + clhs63*clhs895 + clhs69*clhs896);
        lhs(23,12)=-clhs276*clhs714 - clhs285*clhs715 - clhs294*clhs716 - clhs49*clhs750 - clhs63*clhs751 - clhs69*clhs752;
        lhs(23,13)=-clhs306*clhs714 - clhs315*clhs715 - clhs324*clhs716 - clhs49*clhs753 - clhs63*clhs754 - clhs69*clhs755;
        lhs(23,14)=-clhs336*clhs714 - clhs345*clhs715 - clhs354*clhs716 - clhs49*clhs756 - clhs63*clhs757 - clhs69*clhs758;
        lhs(23,15)=-clhs366*clhs714 - clhs375*clhs715 - clhs384*clhs716 - clhs49*clhs759 - clhs63*clhs760 - clhs69*clhs761;
        lhs(23,16)=-clhs396*clhs714 - clhs405*clhs715 - clhs414*clhs716 - clhs49*clhs762 - clhs63*clhs763 - clhs69*clhs764;
        lhs(23,17)=-clhs426*clhs714 - clhs435*clhs715 - clhs444*clhs716 - clhs49*clhs765 - clhs63*clhs766 - clhs69*clhs767;
        lhs(23,18)=-clhs456*clhs714 - clhs465*clhs715 - clhs474*clhs716 - clhs49*clhs768 - clhs63*clhs769 - clhs69*clhs770;
        lhs(23,19)=-clhs486*clhs714 - clhs49*clhs771 - clhs495*clhs715 - clhs504*clhs716 - clhs63*clhs772 - clhs69*clhs773;
        lhs(23,20)=-clhs49*clhs774 - clhs516*clhs714 - clhs525*clhs715 - clhs534*clhs716 - clhs63*clhs775 - clhs69*clhs776;
        lhs(23,21)=-clhs49*clhs777 - clhs546*clhs714 - clhs555*clhs715 - clhs564*clhs716 - clhs63*clhs778 - clhs69*clhs779;
        lhs(23,22)=-clhs49*clhs780 - clhs576*clhs714 - clhs585*clhs715 - clhs594*clhs716 - clhs63*clhs781 - clhs69*clhs782;
        lhs(23,23)=-clhs49*clhs783 - clhs606*clhs714 - clhs615*clhs715 - clhs624*clhs716 - clhs63*clhs784 - clhs69*clhs785;
        lhs(23,24)=0;
        lhs(23,25)=-clhs49*clhs786;
        lhs(23,26)=-clhs63*clhs787;
        lhs(23,27)=-clhs69*clhs788;
        lhs(24,0)=0;
        lhs(24,1)=0;
        lhs(24,2)=0;
        lhs(24,3)=0;
        lhs(24,4)=0;
        lhs(24,5)=0;
        lhs(24,6)=0;
        lhs(24,7)=0;
        lhs(24,8)=0;
        lhs(24,9)=0;
        lhs(24,10)=0;
        lhs(24,11)=0;
        lhs(24,12)=0;
        lhs(24,13)=0;
        lhs(24,14)=0;
        lhs(24,15)=0;
        lhs(24,16)=0;
        lhs(24,17)=0;
        lhs(24,18)=0;
        lhs(24,19)=0;
        lhs(24,20)=0;
        lhs(24,21)=0;
        lhs(24,22)=0;
        lhs(24,23)=0;
        lhs(24,24)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs20*scale_factor;
        lhs(25,1)=clhs76*scale_factor;
        lhs(25,2)=clhs94*scale_factor;
        lhs(25,3)=clhs112*scale_factor;
        lhs(25,4)=clhs130*scale_factor;
        lhs(25,5)=clhs148*scale_factor;
        lhs(25,6)=clhs166*scale_factor;
        lhs(25,7)=clhs184*scale_factor;
        lhs(25,8)=clhs202*scale_factor;
        lhs(25,9)=clhs220*scale_factor;
        lhs(25,10)=clhs238*scale_factor;
        lhs(25,11)=clhs256*scale_factor;
        lhs(25,12)=-clhs280*scale_factor;
        lhs(25,13)=-clhs310*scale_factor;
        lhs(25,14)=-clhs340*scale_factor;
        lhs(25,15)=-clhs370*scale_factor;
        lhs(25,16)=-clhs400*scale_factor;
        lhs(25,17)=-clhs430*scale_factor;
        lhs(25,18)=-clhs460*scale_factor;
        lhs(25,19)=-clhs490*scale_factor;
        lhs(25,20)=-clhs520*scale_factor;
        lhs(25,21)=-clhs550*scale_factor;
        lhs(25,22)=-clhs580*scale_factor;
        lhs(25,23)=-clhs610*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs30*scale_factor;
        lhs(26,1)=clhs82*scale_factor;
        lhs(26,2)=clhs100*scale_factor;
        lhs(26,3)=clhs118*scale_factor;
        lhs(26,4)=clhs136*scale_factor;
        lhs(26,5)=clhs154*scale_factor;
        lhs(26,6)=clhs172*scale_factor;
        lhs(26,7)=clhs190*scale_factor;
        lhs(26,8)=clhs208*scale_factor;
        lhs(26,9)=clhs226*scale_factor;
        lhs(26,10)=clhs244*scale_factor;
        lhs(26,11)=clhs262*scale_factor;
        lhs(26,12)=-clhs289*scale_factor;
        lhs(26,13)=-clhs319*scale_factor;
        lhs(26,14)=-clhs349*scale_factor;
        lhs(26,15)=-clhs379*scale_factor;
        lhs(26,16)=-clhs409*scale_factor;
        lhs(26,17)=-clhs439*scale_factor;
        lhs(26,18)=-clhs469*scale_factor;
        lhs(26,19)=-clhs499*scale_factor;
        lhs(26,20)=-clhs529*scale_factor;
        lhs(26,21)=-clhs559*scale_factor;
        lhs(26,22)=-clhs589*scale_factor;
        lhs(26,23)=-clhs619*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=clhs40*scale_factor;
        lhs(27,1)=clhs88*scale_factor;
        lhs(27,2)=clhs106*scale_factor;
        lhs(27,3)=clhs124*scale_factor;
        lhs(27,4)=clhs142*scale_factor;
        lhs(27,5)=clhs160*scale_factor;
        lhs(27,6)=clhs178*scale_factor;
        lhs(27,7)=clhs196*scale_factor;
        lhs(27,8)=clhs214*scale_factor;
        lhs(27,9)=clhs232*scale_factor;
        lhs(27,10)=clhs250*scale_factor;
        lhs(27,11)=clhs268*scale_factor;
        lhs(27,12)=-clhs298*scale_factor;
        lhs(27,13)=-clhs328*scale_factor;
        lhs(27,14)=-clhs358*scale_factor;
        lhs(27,15)=-clhs388*scale_factor;
        lhs(27,16)=-clhs418*scale_factor;
        lhs(27,17)=-clhs448*scale_factor;
        lhs(27,18)=-clhs478*scale_factor;
        lhs(27,19)=-clhs508*scale_factor;
        lhs(27,20)=-clhs538*scale_factor;
        lhs(27,21)=-clhs568*scale_factor;
        lhs(27,22)=-clhs598*scale_factor;
        lhs(27,23)=-clhs628*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 1 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*penalty_parameter;
        const double clhs22 =     X1(0,0) + u1(0,0);
        const double clhs23 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs24 =     X1(1,0) + u1(1,0);
        const double clhs25 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs26 =     X1(2,0) + u1(2,0);
        const double clhs27 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs28 =     X1(3,0) + u1(3,0);
        const double clhs29 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs30 =     X1(0,1) + u1(0,1);
        const double clhs31 =     X1(1,1) + u1(1,1);
        const double clhs32 =     X1(2,1) + u1(2,1);
        const double clhs33 =     X1(3,1) + u1(3,1);
        const double clhs34 =     X1(0,2) + u1(0,2);
        const double clhs35 =     X1(1,2) + u1(1,2);
        const double clhs36 =     X1(2,2) + u1(2,2);
        const double clhs37 =     X1(3,2) + u1(3,2);
        const double clhs38 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs22*clhs23 + clhs24*clhs25 + clhs26*clhs27 + clhs28*clhs29) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 + clhs23*clhs30 + clhs25*clhs31 + clhs27*clhs32 + clhs29*clhs33 - clhs3*clhs4 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs23*clhs34 + clhs25*clhs35 + clhs27*clhs36 + clhs29*clhs37));
        const double clhs39 =     -clhs0*clhs21 + clhs2*clhs38;
        const double clhs40 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs41 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs42 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs43 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs44 =     normalslave(0,0)*(clhs16*clhs40 + clhs17*clhs41 + clhs18*clhs42 + clhs19*clhs43) + normalslave(0,1)*(clhs0 + clhs1*clhs40 + clhs3*clhs41 + clhs42*clhs6 + clhs43*clhs9) + normalslave(0,2)*(clhs12*clhs40 + clhs13*clhs41 + clhs14*clhs42 + clhs15*clhs43);
        const double clhs45 =     clhs44*penalty_parameter;
        const double clhs46 =     -clhs0*clhs45 + clhs38*clhs40;
        const double clhs47 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs48 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs49 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs50 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs51 =     normalslave(0,0)*(clhs16*clhs47 + clhs17*clhs48 + clhs18*clhs49 + clhs19*clhs50) + normalslave(0,1)*(clhs1*clhs47 + clhs3*clhs48 + clhs49*clhs6 + clhs50*clhs9) + normalslave(0,2)*(clhs0 + clhs12*clhs47 + clhs13*clhs48 + clhs14*clhs49 + clhs15*clhs50);
        const double clhs52 =     clhs51*penalty_parameter;
        const double clhs53 =     -clhs0*clhs52 + clhs38*clhs47;
        const double clhs54 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs55 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs56 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs57 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs58 =     normalslave(0,0)*(clhs16*clhs54 + clhs17*clhs55 + clhs18*clhs56 + clhs19*clhs57 + clhs4) + normalslave(0,1)*(clhs1*clhs54 + clhs3*clhs55 + clhs56*clhs6 + clhs57*clhs9) + normalslave(0,2)*(clhs12*clhs54 + clhs13*clhs55 + clhs14*clhs56 + clhs15*clhs57);
        const double clhs59 =     clhs58*penalty_parameter;
        const double clhs60 =     -clhs0*clhs59 + clhs38*clhs54;
        const double clhs61 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs62 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs63 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs64 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs65 =     normalslave(0,0)*(clhs16*clhs61 + clhs17*clhs62 + clhs18*clhs63 + clhs19*clhs64) + normalslave(0,1)*(clhs1*clhs61 + clhs3*clhs62 + clhs4 + clhs6*clhs63 + clhs64*clhs9) + normalslave(0,2)*(clhs12*clhs61 + clhs13*clhs62 + clhs14*clhs63 + clhs15*clhs64);
        const double clhs66 =     clhs65*penalty_parameter;
        const double clhs67 =     -clhs0*clhs66 + clhs38*clhs61;
        const double clhs68 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs69 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs70 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs71 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs72 =     normalslave(0,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(0,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(0,2)*(clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71 + clhs4);
        const double clhs73 =     clhs72*penalty_parameter;
        const double clhs74 =     -clhs0*clhs73 + clhs38*clhs68;
        const double clhs75 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs76 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs77 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs78 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs79 =     normalslave(0,0)*(clhs16*clhs75 + clhs17*clhs76 + clhs18*clhs77 + clhs19*clhs78 + clhs7) + normalslave(0,1)*(clhs1*clhs75 + clhs3*clhs76 + clhs6*clhs77 + clhs78*clhs9) + normalslave(0,2)*(clhs12*clhs75 + clhs13*clhs76 + clhs14*clhs77 + clhs15*clhs78);
        const double clhs80 =     clhs79*penalty_parameter;
        const double clhs81 =     -clhs0*clhs80 + clhs38*clhs75;
        const double clhs82 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs83 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs84 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs85 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs86 =     normalslave(0,0)*(clhs16*clhs82 + clhs17*clhs83 + clhs18*clhs84 + clhs19*clhs85) + normalslave(0,1)*(clhs1*clhs82 + clhs3*clhs83 + clhs6*clhs84 + clhs7 + clhs85*clhs9) + normalslave(0,2)*(clhs12*clhs82 + clhs13*clhs83 + clhs14*clhs84 + clhs15*clhs85);
        const double clhs87 =     clhs86*penalty_parameter;
        const double clhs88 =     -clhs0*clhs87 + clhs38*clhs82;
        const double clhs89 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs90 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs91 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs92 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs93 =     normalslave(0,0)*(clhs16*clhs89 + clhs17*clhs90 + clhs18*clhs91 + clhs19*clhs92) + normalslave(0,1)*(clhs1*clhs89 + clhs3*clhs90 + clhs6*clhs91 + clhs9*clhs92) + normalslave(0,2)*(clhs12*clhs89 + clhs13*clhs90 + clhs14*clhs91 + clhs15*clhs92 + clhs7);
        const double clhs94 =     clhs93*penalty_parameter;
        const double clhs95 =     -clhs0*clhs94 + clhs38*clhs89;
        const double clhs96 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs97 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs98 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs99 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs100 =     normalslave(0,0)*(clhs10 + clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(0,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(0,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99);
        const double clhs101 =     clhs100*penalty_parameter;
        const double clhs102 =     -clhs0*clhs101 + clhs38*clhs96;
        const double clhs103 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs104 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs105 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs106 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs107 =     normalslave(0,0)*(clhs103*clhs16 + clhs104*clhs17 + clhs105*clhs18 + clhs106*clhs19) + normalslave(0,1)*(clhs1*clhs103 + clhs10 + clhs104*clhs3 + clhs105*clhs6 + clhs106*clhs9) + normalslave(0,2)*(clhs103*clhs12 + clhs104*clhs13 + clhs105*clhs14 + clhs106*clhs15);
        const double clhs108 =     clhs107*penalty_parameter;
        const double clhs109 =     -clhs0*clhs108 + clhs103*clhs38;
        const double clhs110 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs111 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs112 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs113 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs114 =     normalslave(0,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(0,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(0,2)*(clhs10 + clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15);
        const double clhs115 =     clhs114*penalty_parameter;
        const double clhs116 =     -clhs0*clhs115 + clhs110*clhs38;
        const double clhs117 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs118 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs119 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs120 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs121 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs122 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs123 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs124 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs125 =     normalslave(0,0)*(-clhs117*clhs16 + clhs118*clhs22 + clhs119*clhs24 + clhs120*clhs26 + clhs121*clhs28 - clhs122*clhs17 - clhs123*clhs18 - clhs124*clhs19 + clhs23) + normalslave(0,1)*(-clhs1*clhs117 + clhs118*clhs30 + clhs119*clhs31 + clhs120*clhs32 + clhs121*clhs33 - clhs122*clhs3 - clhs123*clhs6 - clhs124*clhs9) + normalslave(0,2)*(-clhs117*clhs12 + clhs118*clhs34 + clhs119*clhs35 + clhs120*clhs36 + clhs121*clhs37 - clhs122*clhs13 - clhs123*clhs14 - clhs124*clhs15);
        const double clhs126 =     clhs125*penalty_parameter;
        const double clhs127 =     clhs0*clhs126 + clhs117*clhs38;
        const double clhs128 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs129 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs130 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs131 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs132 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs133 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs134 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs135 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs136 =     normalslave(0,0)*(-clhs128*clhs16 + clhs129*clhs22 + clhs130*clhs24 + clhs131*clhs26 + clhs132*clhs28 - clhs133*clhs17 - clhs134*clhs18 - clhs135*clhs19) + normalslave(0,1)*(-clhs1*clhs128 + clhs129*clhs30 + clhs130*clhs31 + clhs131*clhs32 + clhs132*clhs33 - clhs133*clhs3 - clhs134*clhs6 - clhs135*clhs9 + clhs23) + normalslave(0,2)*(-clhs12*clhs128 + clhs129*clhs34 - clhs13*clhs133 + clhs130*clhs35 + clhs131*clhs36 + clhs132*clhs37 - clhs134*clhs14 - clhs135*clhs15);
        const double clhs137 =     clhs136*penalty_parameter;
        const double clhs138 =     clhs0*clhs137 + clhs128*clhs38;
        const double clhs139 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs140 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs141 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs142 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs143 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs144 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs145 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs146 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs147 =     normalslave(0,0)*(-clhs139*clhs16 + clhs140*clhs22 + clhs141*clhs24 + clhs142*clhs26 + clhs143*clhs28 - clhs144*clhs17 - clhs145*clhs18 - clhs146*clhs19) + normalslave(0,1)*(-clhs1*clhs139 + clhs140*clhs30 + clhs141*clhs31 + clhs142*clhs32 + clhs143*clhs33 - clhs144*clhs3 - clhs145*clhs6 - clhs146*clhs9) + normalslave(0,2)*(-clhs12*clhs139 - clhs13*clhs144 - clhs14*clhs145 + clhs140*clhs34 + clhs141*clhs35 + clhs142*clhs36 + clhs143*clhs37 - clhs146*clhs15 + clhs23);
        const double clhs148 =     clhs147*penalty_parameter;
        const double clhs149 =     clhs0*clhs148 + clhs139*clhs38;
        const double clhs150 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs151 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs152 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs153 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs154 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs155 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs156 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs157 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs158 =     normalslave(0,0)*(-clhs150*clhs16 + clhs151*clhs22 + clhs152*clhs24 + clhs153*clhs26 + clhs154*clhs28 - clhs155*clhs17 - clhs156*clhs18 - clhs157*clhs19 + clhs25) + normalslave(0,1)*(-clhs1*clhs150 + clhs151*clhs30 + clhs152*clhs31 + clhs153*clhs32 + clhs154*clhs33 - clhs155*clhs3 - clhs156*clhs6 - clhs157*clhs9) + normalslave(0,2)*(-clhs12*clhs150 - clhs13*clhs155 - clhs14*clhs156 - clhs15*clhs157 + clhs151*clhs34 + clhs152*clhs35 + clhs153*clhs36 + clhs154*clhs37);
        const double clhs159 =     clhs158*penalty_parameter;
        const double clhs160 =     clhs0*clhs159 + clhs150*clhs38;
        const double clhs161 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs162 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs163 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs164 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs165 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs166 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs167 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs168 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs169 =     normalslave(0,0)*(-clhs16*clhs161 + clhs162*clhs22 + clhs163*clhs24 + clhs164*clhs26 + clhs165*clhs28 - clhs166*clhs17 - clhs167*clhs18 - clhs168*clhs19) + normalslave(0,1)*(-clhs1*clhs161 + clhs162*clhs30 + clhs163*clhs31 + clhs164*clhs32 + clhs165*clhs33 - clhs166*clhs3 - clhs167*clhs6 - clhs168*clhs9 + clhs25) + normalslave(0,2)*(-clhs12*clhs161 - clhs13*clhs166 - clhs14*clhs167 - clhs15*clhs168 + clhs162*clhs34 + clhs163*clhs35 + clhs164*clhs36 + clhs165*clhs37);
        const double clhs170 =     clhs169*penalty_parameter;
        const double clhs171 =     clhs0*clhs170 + clhs161*clhs38;
        const double clhs172 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs173 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs174 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs175 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs176 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs177 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs178 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs179 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs180 =     normalslave(0,0)*(-clhs16*clhs172 - clhs17*clhs177 + clhs173*clhs22 + clhs174*clhs24 + clhs175*clhs26 + clhs176*clhs28 - clhs178*clhs18 - clhs179*clhs19) + normalslave(0,1)*(-clhs1*clhs172 + clhs173*clhs30 + clhs174*clhs31 + clhs175*clhs32 + clhs176*clhs33 - clhs177*clhs3 - clhs178*clhs6 - clhs179*clhs9) + normalslave(0,2)*(-clhs12*clhs172 - clhs13*clhs177 - clhs14*clhs178 - clhs15*clhs179 + clhs173*clhs34 + clhs174*clhs35 + clhs175*clhs36 + clhs176*clhs37 + clhs25);
        const double clhs181 =     clhs180*penalty_parameter;
        const double clhs182 =     clhs0*clhs181 + clhs172*clhs38;
        const double clhs183 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs184 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs185 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs186 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs187 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs188 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs189 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs190 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs191 =     normalslave(0,0)*(-clhs16*clhs183 - clhs17*clhs188 - clhs18*clhs189 + clhs184*clhs22 + clhs185*clhs24 + clhs186*clhs26 + clhs187*clhs28 - clhs19*clhs190 + clhs27) + normalslave(0,1)*(-clhs1*clhs183 + clhs184*clhs30 + clhs185*clhs31 + clhs186*clhs32 + clhs187*clhs33 - clhs188*clhs3 - clhs189*clhs6 - clhs190*clhs9) + normalslave(0,2)*(-clhs12*clhs183 - clhs13*clhs188 - clhs14*clhs189 - clhs15*clhs190 + clhs184*clhs34 + clhs185*clhs35 + clhs186*clhs36 + clhs187*clhs37);
        const double clhs192 =     clhs191*penalty_parameter;
        const double clhs193 =     clhs0*clhs192 + clhs183*clhs38;
        const double clhs194 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs195 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs196 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs197 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs198 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs199 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs200 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs201 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs202 =     normalslave(0,0)*(-clhs16*clhs194 - clhs17*clhs199 - clhs18*clhs200 - clhs19*clhs201 + clhs195*clhs22 + clhs196*clhs24 + clhs197*clhs26 + clhs198*clhs28) + normalslave(0,1)*(-clhs1*clhs194 + clhs195*clhs30 + clhs196*clhs31 + clhs197*clhs32 + clhs198*clhs33 - clhs199*clhs3 - clhs200*clhs6 - clhs201*clhs9 + clhs27) + normalslave(0,2)*(-clhs12*clhs194 - clhs13*clhs199 - clhs14*clhs200 - clhs15*clhs201 + clhs195*clhs34 + clhs196*clhs35 + clhs197*clhs36 + clhs198*clhs37);
        const double clhs203 =     clhs202*penalty_parameter;
        const double clhs204 =     clhs0*clhs203 + clhs194*clhs38;
        const double clhs205 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs206 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs207 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs208 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs209 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs210 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs211 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs212 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs213 =     normalslave(0,0)*(-clhs16*clhs205 - clhs17*clhs210 - clhs18*clhs211 - clhs19*clhs212 + clhs206*clhs22 + clhs207*clhs24 + clhs208*clhs26 + clhs209*clhs28) + normalslave(0,1)*(-clhs1*clhs205 + clhs206*clhs30 + clhs207*clhs31 + clhs208*clhs32 + clhs209*clhs33 - clhs210*clhs3 - clhs211*clhs6 - clhs212*clhs9) + normalslave(0,2)*(-clhs12*clhs205 - clhs13*clhs210 - clhs14*clhs211 - clhs15*clhs212 + clhs206*clhs34 + clhs207*clhs35 + clhs208*clhs36 + clhs209*clhs37 + clhs27);
        const double clhs214 =     clhs213*penalty_parameter;
        const double clhs215 =     clhs0*clhs214 + clhs205*clhs38;
        const double clhs216 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs217 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs218 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs219 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs220 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs221 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs222 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs223 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs224 =     normalslave(0,0)*(-clhs16*clhs216 - clhs17*clhs221 - clhs18*clhs222 - clhs19*clhs223 + clhs217*clhs22 + clhs218*clhs24 + clhs219*clhs26 + clhs220*clhs28 + clhs29) + normalslave(0,1)*(-clhs1*clhs216 + clhs217*clhs30 + clhs218*clhs31 + clhs219*clhs32 + clhs220*clhs33 - clhs221*clhs3 - clhs222*clhs6 - clhs223*clhs9) + normalslave(0,2)*(-clhs12*clhs216 - clhs13*clhs221 - clhs14*clhs222 - clhs15*clhs223 + clhs217*clhs34 + clhs218*clhs35 + clhs219*clhs36 + clhs220*clhs37);
        const double clhs225 =     clhs224*penalty_parameter;
        const double clhs226 =     clhs0*clhs225 + clhs216*clhs38;
        const double clhs227 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs228 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs229 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs230 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs231 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs232 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs233 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs234 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs235 =     normalslave(0,0)*(-clhs16*clhs227 - clhs17*clhs232 - clhs18*clhs233 - clhs19*clhs234 + clhs22*clhs228 + clhs229*clhs24 + clhs230*clhs26 + clhs231*clhs28) + normalslave(0,1)*(-clhs1*clhs227 + clhs228*clhs30 + clhs229*clhs31 + clhs230*clhs32 + clhs231*clhs33 - clhs232*clhs3 - clhs233*clhs6 - clhs234*clhs9 + clhs29) + normalslave(0,2)*(-clhs12*clhs227 - clhs13*clhs232 - clhs14*clhs233 - clhs15*clhs234 + clhs228*clhs34 + clhs229*clhs35 + clhs230*clhs36 + clhs231*clhs37);
        const double clhs236 =     clhs235*penalty_parameter;
        const double clhs237 =     clhs0*clhs236 + clhs227*clhs38;
        const double clhs238 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs239 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs240 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs241 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs242 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs243 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs244 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs245 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs246 =     normalslave(0,0)*(-clhs16*clhs238 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs22*clhs239 + clhs24*clhs240 + clhs241*clhs26 + clhs242*clhs28) + normalslave(0,1)*(-clhs1*clhs238 + clhs239*clhs30 + clhs240*clhs31 + clhs241*clhs32 + clhs242*clhs33 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(0,2)*(-clhs12*clhs238 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs34 + clhs240*clhs35 + clhs241*clhs36 + clhs242*clhs37 + clhs29);
        const double clhs247 =     clhs246*penalty_parameter;
        const double clhs248 =     clhs0*clhs247 + clhs238*clhs38;
        const double clhs249 =     normalslave(0,0)*scale_factor;
        const double clhs250 =     normalslave(0,1)*scale_factor;
        const double clhs251 =     normalslave(0,2)*scale_factor;
        const double clhs252 =     -clhs21*clhs4 + clhs38*clhs5;
        const double clhs253 =     clhs38*clhs41 - clhs4*clhs45;
        const double clhs254 =     clhs38*clhs48 - clhs4*clhs52;
        const double clhs255 =     clhs38*clhs55 - clhs4*clhs59;
        const double clhs256 =     clhs38*clhs62 - clhs4*clhs66;
        const double clhs257 =     clhs38*clhs69 - clhs4*clhs73;
        const double clhs258 =     clhs38*clhs76 - clhs4*clhs80;
        const double clhs259 =     clhs38*clhs83 - clhs4*clhs87;
        const double clhs260 =     clhs38*clhs90 - clhs4*clhs94;
        const double clhs261 =     -clhs101*clhs4 + clhs38*clhs97;
        const double clhs262 =     clhs104*clhs38 - clhs108*clhs4;
        const double clhs263 =     clhs111*clhs38 - clhs115*clhs4;
        const double clhs264 =     clhs122*clhs38 + clhs126*clhs4;
        const double clhs265 =     clhs133*clhs38 + clhs137*clhs4;
        const double clhs266 =     clhs144*clhs38 + clhs148*clhs4;
        const double clhs267 =     clhs155*clhs38 + clhs159*clhs4;
        const double clhs268 =     clhs166*clhs38 + clhs170*clhs4;
        const double clhs269 =     clhs177*clhs38 + clhs181*clhs4;
        const double clhs270 =     clhs188*clhs38 + clhs192*clhs4;
        const double clhs271 =     clhs199*clhs38 + clhs203*clhs4;
        const double clhs272 =     clhs210*clhs38 + clhs214*clhs4;
        const double clhs273 =     clhs221*clhs38 + clhs225*clhs4;
        const double clhs274 =     clhs232*clhs38 + clhs236*clhs4;
        const double clhs275 =     clhs243*clhs38 + clhs247*clhs4;
        const double clhs276 =     -clhs21*clhs7 + clhs38*clhs8;
        const double clhs277 =     clhs38*clhs42 - clhs45*clhs7;
        const double clhs278 =     clhs38*clhs49 - clhs52*clhs7;
        const double clhs279 =     clhs38*clhs56 - clhs59*clhs7;
        const double clhs280 =     clhs38*clhs63 - clhs66*clhs7;
        const double clhs281 =     clhs38*clhs70 - clhs7*clhs73;
        const double clhs282 =     clhs38*clhs77 - clhs7*clhs80;
        const double clhs283 =     clhs38*clhs84 - clhs7*clhs87;
        const double clhs284 =     clhs38*clhs91 - clhs7*clhs94;
        const double clhs285 =     -clhs101*clhs7 + clhs38*clhs98;
        const double clhs286 =     clhs105*clhs38 - clhs108*clhs7;
        const double clhs287 =     clhs112*clhs38 - clhs115*clhs7;
        const double clhs288 =     clhs123*clhs38 + clhs126*clhs7;
        const double clhs289 =     clhs134*clhs38 + clhs137*clhs7;
        const double clhs290 =     clhs145*clhs38 + clhs148*clhs7;
        const double clhs291 =     clhs156*clhs38 + clhs159*clhs7;
        const double clhs292 =     clhs167*clhs38 + clhs170*clhs7;
        const double clhs293 =     clhs178*clhs38 + clhs181*clhs7;
        const double clhs294 =     clhs189*clhs38 + clhs192*clhs7;
        const double clhs295 =     clhs200*clhs38 + clhs203*clhs7;
        const double clhs296 =     clhs211*clhs38 + clhs214*clhs7;
        const double clhs297 =     clhs222*clhs38 + clhs225*clhs7;
        const double clhs298 =     clhs233*clhs38 + clhs236*clhs7;
        const double clhs299 =     clhs244*clhs38 + clhs247*clhs7;
        const double clhs300 =     -clhs10*clhs21 + clhs11*clhs38;
        const double clhs301 =     -clhs10*clhs45 + clhs38*clhs43;
        const double clhs302 =     -clhs10*clhs52 + clhs38*clhs50;
        const double clhs303 =     -clhs10*clhs59 + clhs38*clhs57;
        const double clhs304 =     -clhs10*clhs66 + clhs38*clhs64;
        const double clhs305 =     -clhs10*clhs73 + clhs38*clhs71;
        const double clhs306 =     -clhs10*clhs80 + clhs38*clhs78;
        const double clhs307 =     -clhs10*clhs87 + clhs38*clhs85;
        const double clhs308 =     -clhs10*clhs94 + clhs38*clhs92;
        const double clhs309 =     -clhs10*clhs101 + clhs38*clhs99;
        const double clhs310 =     -clhs10*clhs108 + clhs106*clhs38;
        const double clhs311 =     -clhs10*clhs115 + clhs113*clhs38;
        const double clhs312 =     clhs10*clhs126 + clhs124*clhs38;
        const double clhs313 =     clhs10*clhs137 + clhs135*clhs38;
        const double clhs314 =     clhs10*clhs148 + clhs146*clhs38;
        const double clhs315 =     clhs10*clhs159 + clhs157*clhs38;
        const double clhs316 =     clhs10*clhs170 + clhs168*clhs38;
        const double clhs317 =     clhs10*clhs181 + clhs179*clhs38;
        const double clhs318 =     clhs10*clhs192 + clhs190*clhs38;
        const double clhs319 =     clhs10*clhs203 + clhs201*clhs38;
        const double clhs320 =     clhs10*clhs214 + clhs212*clhs38;
        const double clhs321 =     clhs10*clhs225 + clhs223*clhs38;
        const double clhs322 =     clhs10*clhs236 + clhs234*clhs38;
        const double clhs323 =     clhs10*clhs247 + clhs245*clhs38;
        const double clhs324 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs325 =     clhs44*normalslave(0,0)*penalty_parameter;
        const double clhs326 =     clhs51*normalslave(0,0)*penalty_parameter;
        const double clhs327 =     clhs58*normalslave(0,0)*penalty_parameter;
        const double clhs328 =     clhs65*normalslave(0,0)*penalty_parameter;
        const double clhs329 =     clhs72*normalslave(0,0)*penalty_parameter;
        const double clhs330 =     clhs79*normalslave(0,0)*penalty_parameter;
        const double clhs331 =     clhs86*normalslave(0,0)*penalty_parameter;
        const double clhs332 =     clhs93*normalslave(0,0)*penalty_parameter;
        const double clhs333 =     clhs100*normalslave(0,0)*penalty_parameter;
        const double clhs334 =     clhs107*normalslave(0,0)*penalty_parameter;
        const double clhs335 =     clhs114*normalslave(0,0)*penalty_parameter;
        const double clhs336 =     clhs118*clhs38 + clhs126*clhs23;
        const double clhs337 =     clhs129*clhs38 + clhs137*clhs23;
        const double clhs338 =     clhs140*clhs38 + clhs148*clhs23;
        const double clhs339 =     clhs151*clhs38 + clhs159*clhs23;
        const double clhs340 =     clhs162*clhs38 + clhs170*clhs23;
        const double clhs341 =     clhs173*clhs38 + clhs181*clhs23;
        const double clhs342 =     clhs184*clhs38 + clhs192*clhs23;
        const double clhs343 =     clhs195*clhs38 + clhs203*clhs23;
        const double clhs344 =     clhs206*clhs38 + clhs214*clhs23;
        const double clhs345 =     clhs217*clhs38 + clhs225*clhs23;
        const double clhs346 =     clhs228*clhs38 + clhs23*clhs236;
        const double clhs347 =     clhs23*clhs247 + clhs239*clhs38;
        const double clhs348 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs349 =     clhs44*normalslave(0,1)*penalty_parameter;
        const double clhs350 =     clhs51*normalslave(0,1)*penalty_parameter;
        const double clhs351 =     clhs58*normalslave(0,1)*penalty_parameter;
        const double clhs352 =     clhs65*normalslave(0,1)*penalty_parameter;
        const double clhs353 =     clhs72*normalslave(0,1)*penalty_parameter;
        const double clhs354 =     clhs79*normalslave(0,1)*penalty_parameter;
        const double clhs355 =     clhs86*normalslave(0,1)*penalty_parameter;
        const double clhs356 =     clhs93*normalslave(0,1)*penalty_parameter;
        const double clhs357 =     clhs100*normalslave(0,1)*penalty_parameter;
        const double clhs358 =     clhs107*normalslave(0,1)*penalty_parameter;
        const double clhs359 =     clhs114*normalslave(0,1)*penalty_parameter;
        const double clhs360 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs361 =     clhs44*normalslave(0,2)*penalty_parameter;
        const double clhs362 =     clhs51*normalslave(0,2)*penalty_parameter;
        const double clhs363 =     clhs58*normalslave(0,2)*penalty_parameter;
        const double clhs364 =     clhs65*normalslave(0,2)*penalty_parameter;
        const double clhs365 =     clhs72*normalslave(0,2)*penalty_parameter;
        const double clhs366 =     clhs79*normalslave(0,2)*penalty_parameter;
        const double clhs367 =     clhs86*normalslave(0,2)*penalty_parameter;
        const double clhs368 =     clhs93*normalslave(0,2)*penalty_parameter;
        const double clhs369 =     clhs100*normalslave(0,2)*penalty_parameter;
        const double clhs370 =     clhs107*normalslave(0,2)*penalty_parameter;
        const double clhs371 =     clhs114*normalslave(0,2)*penalty_parameter;
        const double clhs372 =     clhs119*clhs38 + clhs126*clhs25;
        const double clhs373 =     clhs130*clhs38 + clhs137*clhs25;
        const double clhs374 =     clhs141*clhs38 + clhs148*clhs25;
        const double clhs375 =     clhs152*clhs38 + clhs159*clhs25;
        const double clhs376 =     clhs163*clhs38 + clhs170*clhs25;
        const double clhs377 =     clhs174*clhs38 + clhs181*clhs25;
        const double clhs378 =     clhs185*clhs38 + clhs192*clhs25;
        const double clhs379 =     clhs196*clhs38 + clhs203*clhs25;
        const double clhs380 =     clhs207*clhs38 + clhs214*clhs25;
        const double clhs381 =     clhs218*clhs38 + clhs225*clhs25;
        const double clhs382 =     clhs229*clhs38 + clhs236*clhs25;
        const double clhs383 =     clhs240*clhs38 + clhs247*clhs25;
        const double clhs384 =     clhs120*clhs38 + clhs126*clhs27;
        const double clhs385 =     clhs131*clhs38 + clhs137*clhs27;
        const double clhs386 =     clhs142*clhs38 + clhs148*clhs27;
        const double clhs387 =     clhs153*clhs38 + clhs159*clhs27;
        const double clhs388 =     clhs164*clhs38 + clhs170*clhs27;
        const double clhs389 =     clhs175*clhs38 + clhs181*clhs27;
        const double clhs390 =     clhs186*clhs38 + clhs192*clhs27;
        const double clhs391 =     clhs197*clhs38 + clhs203*clhs27;
        const double clhs392 =     clhs208*clhs38 + clhs214*clhs27;
        const double clhs393 =     clhs219*clhs38 + clhs225*clhs27;
        const double clhs394 =     clhs230*clhs38 + clhs236*clhs27;
        const double clhs395 =     clhs241*clhs38 + clhs247*clhs27;
        const double clhs396 =     clhs121*clhs38 + clhs126*clhs29;
        const double clhs397 =     clhs132*clhs38 + clhs137*clhs29;
        const double clhs398 =     clhs143*clhs38 + clhs148*clhs29;
        const double clhs399 =     clhs154*clhs38 + clhs159*clhs29;
        const double clhs400 =     clhs165*clhs38 + clhs170*clhs29;
        const double clhs401 =     clhs176*clhs38 + clhs181*clhs29;
        const double clhs402 =     clhs187*clhs38 + clhs192*clhs29;
        const double clhs403 =     clhs198*clhs38 + clhs203*clhs29;
        const double clhs404 =     clhs209*clhs38 + clhs214*clhs29;
        const double clhs405 =     clhs220*clhs38 + clhs225*clhs29;
        const double clhs406 =     clhs231*clhs38 + clhs236*clhs29;
        const double clhs407 =     clhs242*clhs38 + clhs247*clhs29;
        const double clhs408 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=clhs39*normalslave(0,0);
        lhs(0,1)=clhs46*normalslave(0,0);
        lhs(0,2)=clhs53*normalslave(0,0);
        lhs(0,3)=clhs60*normalslave(0,0);
        lhs(0,4)=clhs67*normalslave(0,0);
        lhs(0,5)=clhs74*normalslave(0,0);
        lhs(0,6)=clhs81*normalslave(0,0);
        lhs(0,7)=clhs88*normalslave(0,0);
        lhs(0,8)=clhs95*normalslave(0,0);
        lhs(0,9)=clhs102*normalslave(0,0);
        lhs(0,10)=clhs109*normalslave(0,0);
        lhs(0,11)=clhs116*normalslave(0,0);
        lhs(0,12)=clhs127*normalslave(0,0);
        lhs(0,13)=clhs138*normalslave(0,0);
        lhs(0,14)=clhs149*normalslave(0,0);
        lhs(0,15)=clhs160*normalslave(0,0);
        lhs(0,16)=clhs171*normalslave(0,0);
        lhs(0,17)=clhs182*normalslave(0,0);
        lhs(0,18)=clhs193*normalslave(0,0);
        lhs(0,19)=clhs204*normalslave(0,0);
        lhs(0,20)=clhs215*normalslave(0,0);
        lhs(0,21)=clhs226*normalslave(0,0);
        lhs(0,22)=clhs237*normalslave(0,0);
        lhs(0,23)=clhs248*normalslave(0,0);
        lhs(0,24)=clhs0*clhs249;
        lhs(0,25)=0;
        lhs(0,26)=0;
        lhs(0,27)=0;
        lhs(1,0)=clhs39*normalslave(0,1);
        lhs(1,1)=clhs46*normalslave(0,1);
        lhs(1,2)=clhs53*normalslave(0,1);
        lhs(1,3)=clhs60*normalslave(0,1);
        lhs(1,4)=clhs67*normalslave(0,1);
        lhs(1,5)=clhs74*normalslave(0,1);
        lhs(1,6)=clhs81*normalslave(0,1);
        lhs(1,7)=clhs88*normalslave(0,1);
        lhs(1,8)=clhs95*normalslave(0,1);
        lhs(1,9)=clhs102*normalslave(0,1);
        lhs(1,10)=clhs109*normalslave(0,1);
        lhs(1,11)=clhs116*normalslave(0,1);
        lhs(1,12)=clhs127*normalslave(0,1);
        lhs(1,13)=clhs138*normalslave(0,1);
        lhs(1,14)=clhs149*normalslave(0,1);
        lhs(1,15)=clhs160*normalslave(0,1);
        lhs(1,16)=clhs171*normalslave(0,1);
        lhs(1,17)=clhs182*normalslave(0,1);
        lhs(1,18)=clhs193*normalslave(0,1);
        lhs(1,19)=clhs204*normalslave(0,1);
        lhs(1,20)=clhs215*normalslave(0,1);
        lhs(1,21)=clhs226*normalslave(0,1);
        lhs(1,22)=clhs237*normalslave(0,1);
        lhs(1,23)=clhs248*normalslave(0,1);
        lhs(1,24)=clhs0*clhs250;
        lhs(1,25)=0;
        lhs(1,26)=0;
        lhs(1,27)=0;
        lhs(2,0)=clhs39*normalslave(0,2);
        lhs(2,1)=clhs46*normalslave(0,2);
        lhs(2,2)=clhs53*normalslave(0,2);
        lhs(2,3)=clhs60*normalslave(0,2);
        lhs(2,4)=clhs67*normalslave(0,2);
        lhs(2,5)=clhs74*normalslave(0,2);
        lhs(2,6)=clhs81*normalslave(0,2);
        lhs(2,7)=clhs88*normalslave(0,2);
        lhs(2,8)=clhs95*normalslave(0,2);
        lhs(2,9)=clhs102*normalslave(0,2);
        lhs(2,10)=clhs109*normalslave(0,2);
        lhs(2,11)=clhs116*normalslave(0,2);
        lhs(2,12)=clhs127*normalslave(0,2);
        lhs(2,13)=clhs138*normalslave(0,2);
        lhs(2,14)=clhs149*normalslave(0,2);
        lhs(2,15)=clhs160*normalslave(0,2);
        lhs(2,16)=clhs171*normalslave(0,2);
        lhs(2,17)=clhs182*normalslave(0,2);
        lhs(2,18)=clhs193*normalslave(0,2);
        lhs(2,19)=clhs204*normalslave(0,2);
        lhs(2,20)=clhs215*normalslave(0,2);
        lhs(2,21)=clhs226*normalslave(0,2);
        lhs(2,22)=clhs237*normalslave(0,2);
        lhs(2,23)=clhs248*normalslave(0,2);
        lhs(2,24)=clhs0*clhs251;
        lhs(2,25)=0;
        lhs(2,26)=0;
        lhs(2,27)=0;
        lhs(3,0)=clhs252*normalslave(0,0);
        lhs(3,1)=clhs253*normalslave(0,0);
        lhs(3,2)=clhs254*normalslave(0,0);
        lhs(3,3)=clhs255*normalslave(0,0);
        lhs(3,4)=clhs256*normalslave(0,0);
        lhs(3,5)=clhs257*normalslave(0,0);
        lhs(3,6)=clhs258*normalslave(0,0);
        lhs(3,7)=clhs259*normalslave(0,0);
        lhs(3,8)=clhs260*normalslave(0,0);
        lhs(3,9)=clhs261*normalslave(0,0);
        lhs(3,10)=clhs262*normalslave(0,0);
        lhs(3,11)=clhs263*normalslave(0,0);
        lhs(3,12)=clhs264*normalslave(0,0);
        lhs(3,13)=clhs265*normalslave(0,0);
        lhs(3,14)=clhs266*normalslave(0,0);
        lhs(3,15)=clhs267*normalslave(0,0);
        lhs(3,16)=clhs268*normalslave(0,0);
        lhs(3,17)=clhs269*normalslave(0,0);
        lhs(3,18)=clhs270*normalslave(0,0);
        lhs(3,19)=clhs271*normalslave(0,0);
        lhs(3,20)=clhs272*normalslave(0,0);
        lhs(3,21)=clhs273*normalslave(0,0);
        lhs(3,22)=clhs274*normalslave(0,0);
        lhs(3,23)=clhs275*normalslave(0,0);
        lhs(3,24)=clhs249*clhs4;
        lhs(3,25)=0;
        lhs(3,26)=0;
        lhs(3,27)=0;
        lhs(4,0)=clhs252*normalslave(0,1);
        lhs(4,1)=clhs253*normalslave(0,1);
        lhs(4,2)=clhs254*normalslave(0,1);
        lhs(4,3)=clhs255*normalslave(0,1);
        lhs(4,4)=clhs256*normalslave(0,1);
        lhs(4,5)=clhs257*normalslave(0,1);
        lhs(4,6)=clhs258*normalslave(0,1);
        lhs(4,7)=clhs259*normalslave(0,1);
        lhs(4,8)=clhs260*normalslave(0,1);
        lhs(4,9)=clhs261*normalslave(0,1);
        lhs(4,10)=clhs262*normalslave(0,1);
        lhs(4,11)=clhs263*normalslave(0,1);
        lhs(4,12)=clhs264*normalslave(0,1);
        lhs(4,13)=clhs265*normalslave(0,1);
        lhs(4,14)=clhs266*normalslave(0,1);
        lhs(4,15)=clhs267*normalslave(0,1);
        lhs(4,16)=clhs268*normalslave(0,1);
        lhs(4,17)=clhs269*normalslave(0,1);
        lhs(4,18)=clhs270*normalslave(0,1);
        lhs(4,19)=clhs271*normalslave(0,1);
        lhs(4,20)=clhs272*normalslave(0,1);
        lhs(4,21)=clhs273*normalslave(0,1);
        lhs(4,22)=clhs274*normalslave(0,1);
        lhs(4,23)=clhs275*normalslave(0,1);
        lhs(4,24)=clhs250*clhs4;
        lhs(4,25)=0;
        lhs(4,26)=0;
        lhs(4,27)=0;
        lhs(5,0)=clhs252*normalslave(0,2);
        lhs(5,1)=clhs253*normalslave(0,2);
        lhs(5,2)=clhs254*normalslave(0,2);
        lhs(5,3)=clhs255*normalslave(0,2);
        lhs(5,4)=clhs256*normalslave(0,2);
        lhs(5,5)=clhs257*normalslave(0,2);
        lhs(5,6)=clhs258*normalslave(0,2);
        lhs(5,7)=clhs259*normalslave(0,2);
        lhs(5,8)=clhs260*normalslave(0,2);
        lhs(5,9)=clhs261*normalslave(0,2);
        lhs(5,10)=clhs262*normalslave(0,2);
        lhs(5,11)=clhs263*normalslave(0,2);
        lhs(5,12)=clhs264*normalslave(0,2);
        lhs(5,13)=clhs265*normalslave(0,2);
        lhs(5,14)=clhs266*normalslave(0,2);
        lhs(5,15)=clhs267*normalslave(0,2);
        lhs(5,16)=clhs268*normalslave(0,2);
        lhs(5,17)=clhs269*normalslave(0,2);
        lhs(5,18)=clhs270*normalslave(0,2);
        lhs(5,19)=clhs271*normalslave(0,2);
        lhs(5,20)=clhs272*normalslave(0,2);
        lhs(5,21)=clhs273*normalslave(0,2);
        lhs(5,22)=clhs274*normalslave(0,2);
        lhs(5,23)=clhs275*normalslave(0,2);
        lhs(5,24)=clhs251*clhs4;
        lhs(5,25)=0;
        lhs(5,26)=0;
        lhs(5,27)=0;
        lhs(6,0)=clhs276*normalslave(0,0);
        lhs(6,1)=clhs277*normalslave(0,0);
        lhs(6,2)=clhs278*normalslave(0,0);
        lhs(6,3)=clhs279*normalslave(0,0);
        lhs(6,4)=clhs280*normalslave(0,0);
        lhs(6,5)=clhs281*normalslave(0,0);
        lhs(6,6)=clhs282*normalslave(0,0);
        lhs(6,7)=clhs283*normalslave(0,0);
        lhs(6,8)=clhs284*normalslave(0,0);
        lhs(6,9)=clhs285*normalslave(0,0);
        lhs(6,10)=clhs286*normalslave(0,0);
        lhs(6,11)=clhs287*normalslave(0,0);
        lhs(6,12)=clhs288*normalslave(0,0);
        lhs(6,13)=clhs289*normalslave(0,0);
        lhs(6,14)=clhs290*normalslave(0,0);
        lhs(6,15)=clhs291*normalslave(0,0);
        lhs(6,16)=clhs292*normalslave(0,0);
        lhs(6,17)=clhs293*normalslave(0,0);
        lhs(6,18)=clhs294*normalslave(0,0);
        lhs(6,19)=clhs295*normalslave(0,0);
        lhs(6,20)=clhs296*normalslave(0,0);
        lhs(6,21)=clhs297*normalslave(0,0);
        lhs(6,22)=clhs298*normalslave(0,0);
        lhs(6,23)=clhs299*normalslave(0,0);
        lhs(6,24)=clhs249*clhs7;
        lhs(6,25)=0;
        lhs(6,26)=0;
        lhs(6,27)=0;
        lhs(7,0)=clhs276*normalslave(0,1);
        lhs(7,1)=clhs277*normalslave(0,1);
        lhs(7,2)=clhs278*normalslave(0,1);
        lhs(7,3)=clhs279*normalslave(0,1);
        lhs(7,4)=clhs280*normalslave(0,1);
        lhs(7,5)=clhs281*normalslave(0,1);
        lhs(7,6)=clhs282*normalslave(0,1);
        lhs(7,7)=clhs283*normalslave(0,1);
        lhs(7,8)=clhs284*normalslave(0,1);
        lhs(7,9)=clhs285*normalslave(0,1);
        lhs(7,10)=clhs286*normalslave(0,1);
        lhs(7,11)=clhs287*normalslave(0,1);
        lhs(7,12)=clhs288*normalslave(0,1);
        lhs(7,13)=clhs289*normalslave(0,1);
        lhs(7,14)=clhs290*normalslave(0,1);
        lhs(7,15)=clhs291*normalslave(0,1);
        lhs(7,16)=clhs292*normalslave(0,1);
        lhs(7,17)=clhs293*normalslave(0,1);
        lhs(7,18)=clhs294*normalslave(0,1);
        lhs(7,19)=clhs295*normalslave(0,1);
        lhs(7,20)=clhs296*normalslave(0,1);
        lhs(7,21)=clhs297*normalslave(0,1);
        lhs(7,22)=clhs298*normalslave(0,1);
        lhs(7,23)=clhs299*normalslave(0,1);
        lhs(7,24)=clhs250*clhs7;
        lhs(7,25)=0;
        lhs(7,26)=0;
        lhs(7,27)=0;
        lhs(8,0)=clhs276*normalslave(0,2);
        lhs(8,1)=clhs277*normalslave(0,2);
        lhs(8,2)=clhs278*normalslave(0,2);
        lhs(8,3)=clhs279*normalslave(0,2);
        lhs(8,4)=clhs280*normalslave(0,2);
        lhs(8,5)=clhs281*normalslave(0,2);
        lhs(8,6)=clhs282*normalslave(0,2);
        lhs(8,7)=clhs283*normalslave(0,2);
        lhs(8,8)=clhs284*normalslave(0,2);
        lhs(8,9)=clhs285*normalslave(0,2);
        lhs(8,10)=clhs286*normalslave(0,2);
        lhs(8,11)=clhs287*normalslave(0,2);
        lhs(8,12)=clhs288*normalslave(0,2);
        lhs(8,13)=clhs289*normalslave(0,2);
        lhs(8,14)=clhs290*normalslave(0,2);
        lhs(8,15)=clhs291*normalslave(0,2);
        lhs(8,16)=clhs292*normalslave(0,2);
        lhs(8,17)=clhs293*normalslave(0,2);
        lhs(8,18)=clhs294*normalslave(0,2);
        lhs(8,19)=clhs295*normalslave(0,2);
        lhs(8,20)=clhs296*normalslave(0,2);
        lhs(8,21)=clhs297*normalslave(0,2);
        lhs(8,22)=clhs298*normalslave(0,2);
        lhs(8,23)=clhs299*normalslave(0,2);
        lhs(8,24)=clhs251*clhs7;
        lhs(8,25)=0;
        lhs(8,26)=0;
        lhs(8,27)=0;
        lhs(9,0)=clhs300*normalslave(0,0);
        lhs(9,1)=clhs301*normalslave(0,0);
        lhs(9,2)=clhs302*normalslave(0,0);
        lhs(9,3)=clhs303*normalslave(0,0);
        lhs(9,4)=clhs304*normalslave(0,0);
        lhs(9,5)=clhs305*normalslave(0,0);
        lhs(9,6)=clhs306*normalslave(0,0);
        lhs(9,7)=clhs307*normalslave(0,0);
        lhs(9,8)=clhs308*normalslave(0,0);
        lhs(9,9)=clhs309*normalslave(0,0);
        lhs(9,10)=clhs310*normalslave(0,0);
        lhs(9,11)=clhs311*normalslave(0,0);
        lhs(9,12)=clhs312*normalslave(0,0);
        lhs(9,13)=clhs313*normalslave(0,0);
        lhs(9,14)=clhs314*normalslave(0,0);
        lhs(9,15)=clhs315*normalslave(0,0);
        lhs(9,16)=clhs316*normalslave(0,0);
        lhs(9,17)=clhs317*normalslave(0,0);
        lhs(9,18)=clhs318*normalslave(0,0);
        lhs(9,19)=clhs319*normalslave(0,0);
        lhs(9,20)=clhs320*normalslave(0,0);
        lhs(9,21)=clhs321*normalslave(0,0);
        lhs(9,22)=clhs322*normalslave(0,0);
        lhs(9,23)=clhs323*normalslave(0,0);
        lhs(9,24)=clhs10*clhs249;
        lhs(9,25)=0;
        lhs(9,26)=0;
        lhs(9,27)=0;
        lhs(10,0)=clhs300*normalslave(0,1);
        lhs(10,1)=clhs301*normalslave(0,1);
        lhs(10,2)=clhs302*normalslave(0,1);
        lhs(10,3)=clhs303*normalslave(0,1);
        lhs(10,4)=clhs304*normalslave(0,1);
        lhs(10,5)=clhs305*normalslave(0,1);
        lhs(10,6)=clhs306*normalslave(0,1);
        lhs(10,7)=clhs307*normalslave(0,1);
        lhs(10,8)=clhs308*normalslave(0,1);
        lhs(10,9)=clhs309*normalslave(0,1);
        lhs(10,10)=clhs310*normalslave(0,1);
        lhs(10,11)=clhs311*normalslave(0,1);
        lhs(10,12)=clhs312*normalslave(0,1);
        lhs(10,13)=clhs313*normalslave(0,1);
        lhs(10,14)=clhs314*normalslave(0,1);
        lhs(10,15)=clhs315*normalslave(0,1);
        lhs(10,16)=clhs316*normalslave(0,1);
        lhs(10,17)=clhs317*normalslave(0,1);
        lhs(10,18)=clhs318*normalslave(0,1);
        lhs(10,19)=clhs319*normalslave(0,1);
        lhs(10,20)=clhs320*normalslave(0,1);
        lhs(10,21)=clhs321*normalslave(0,1);
        lhs(10,22)=clhs322*normalslave(0,1);
        lhs(10,23)=clhs323*normalslave(0,1);
        lhs(10,24)=clhs10*clhs250;
        lhs(10,25)=0;
        lhs(10,26)=0;
        lhs(10,27)=0;
        lhs(11,0)=clhs300*normalslave(0,2);
        lhs(11,1)=clhs301*normalslave(0,2);
        lhs(11,2)=clhs302*normalslave(0,2);
        lhs(11,3)=clhs303*normalslave(0,2);
        lhs(11,4)=clhs304*normalslave(0,2);
        lhs(11,5)=clhs305*normalslave(0,2);
        lhs(11,6)=clhs306*normalslave(0,2);
        lhs(11,7)=clhs307*normalslave(0,2);
        lhs(11,8)=clhs308*normalslave(0,2);
        lhs(11,9)=clhs309*normalslave(0,2);
        lhs(11,10)=clhs310*normalslave(0,2);
        lhs(11,11)=clhs311*normalslave(0,2);
        lhs(11,12)=clhs312*normalslave(0,2);
        lhs(11,13)=clhs313*normalslave(0,2);
        lhs(11,14)=clhs314*normalslave(0,2);
        lhs(11,15)=clhs315*normalslave(0,2);
        lhs(11,16)=clhs316*normalslave(0,2);
        lhs(11,17)=clhs317*normalslave(0,2);
        lhs(11,18)=clhs318*normalslave(0,2);
        lhs(11,19)=clhs319*normalslave(0,2);
        lhs(11,20)=clhs320*normalslave(0,2);
        lhs(11,21)=clhs321*normalslave(0,2);
        lhs(11,22)=clhs322*normalslave(0,2);
        lhs(11,23)=clhs323*normalslave(0,2);
        lhs(11,24)=clhs10*clhs251;
        lhs(11,25)=0;
        lhs(11,26)=0;
        lhs(11,27)=0;
        lhs(12,0)=clhs23*clhs324;
        lhs(12,1)=clhs23*clhs325;
        lhs(12,2)=clhs23*clhs326;
        lhs(12,3)=clhs23*clhs327;
        lhs(12,4)=clhs23*clhs328;
        lhs(12,5)=clhs23*clhs329;
        lhs(12,6)=clhs23*clhs330;
        lhs(12,7)=clhs23*clhs331;
        lhs(12,8)=clhs23*clhs332;
        lhs(12,9)=clhs23*clhs333;
        lhs(12,10)=clhs23*clhs334;
        lhs(12,11)=clhs23*clhs335;
        lhs(12,12)=-clhs336*normalslave(0,0);
        lhs(12,13)=-clhs337*normalslave(0,0);
        lhs(12,14)=-clhs338*normalslave(0,0);
        lhs(12,15)=-clhs339*normalslave(0,0);
        lhs(12,16)=-clhs340*normalslave(0,0);
        lhs(12,17)=-clhs341*normalslave(0,0);
        lhs(12,18)=-clhs342*normalslave(0,0);
        lhs(12,19)=-clhs343*normalslave(0,0);
        lhs(12,20)=-clhs344*normalslave(0,0);
        lhs(12,21)=-clhs345*normalslave(0,0);
        lhs(12,22)=-clhs346*normalslave(0,0);
        lhs(12,23)=-clhs347*normalslave(0,0);
        lhs(12,24)=-clhs23*clhs249;
        lhs(12,25)=0;
        lhs(12,26)=0;
        lhs(12,27)=0;
        lhs(13,0)=clhs23*clhs348;
        lhs(13,1)=clhs23*clhs349;
        lhs(13,2)=clhs23*clhs350;
        lhs(13,3)=clhs23*clhs351;
        lhs(13,4)=clhs23*clhs352;
        lhs(13,5)=clhs23*clhs353;
        lhs(13,6)=clhs23*clhs354;
        lhs(13,7)=clhs23*clhs355;
        lhs(13,8)=clhs23*clhs356;
        lhs(13,9)=clhs23*clhs357;
        lhs(13,10)=clhs23*clhs358;
        lhs(13,11)=clhs23*clhs359;
        lhs(13,12)=-clhs336*normalslave(0,1);
        lhs(13,13)=-clhs337*normalslave(0,1);
        lhs(13,14)=-clhs338*normalslave(0,1);
        lhs(13,15)=-clhs339*normalslave(0,1);
        lhs(13,16)=-clhs340*normalslave(0,1);
        lhs(13,17)=-clhs341*normalslave(0,1);
        lhs(13,18)=-clhs342*normalslave(0,1);
        lhs(13,19)=-clhs343*normalslave(0,1);
        lhs(13,20)=-clhs344*normalslave(0,1);
        lhs(13,21)=-clhs345*normalslave(0,1);
        lhs(13,22)=-clhs346*normalslave(0,1);
        lhs(13,23)=-clhs347*normalslave(0,1);
        lhs(13,24)=-clhs23*clhs250;
        lhs(13,25)=0;
        lhs(13,26)=0;
        lhs(13,27)=0;
        lhs(14,0)=clhs23*clhs360;
        lhs(14,1)=clhs23*clhs361;
        lhs(14,2)=clhs23*clhs362;
        lhs(14,3)=clhs23*clhs363;
        lhs(14,4)=clhs23*clhs364;
        lhs(14,5)=clhs23*clhs365;
        lhs(14,6)=clhs23*clhs366;
        lhs(14,7)=clhs23*clhs367;
        lhs(14,8)=clhs23*clhs368;
        lhs(14,9)=clhs23*clhs369;
        lhs(14,10)=clhs23*clhs370;
        lhs(14,11)=clhs23*clhs371;
        lhs(14,12)=-clhs336*normalslave(0,2);
        lhs(14,13)=-clhs337*normalslave(0,2);
        lhs(14,14)=-clhs338*normalslave(0,2);
        lhs(14,15)=-clhs339*normalslave(0,2);
        lhs(14,16)=-clhs340*normalslave(0,2);
        lhs(14,17)=-clhs341*normalslave(0,2);
        lhs(14,18)=-clhs342*normalslave(0,2);
        lhs(14,19)=-clhs343*normalslave(0,2);
        lhs(14,20)=-clhs344*normalslave(0,2);
        lhs(14,21)=-clhs345*normalslave(0,2);
        lhs(14,22)=-clhs346*normalslave(0,2);
        lhs(14,23)=-clhs347*normalslave(0,2);
        lhs(14,24)=-clhs23*clhs251;
        lhs(14,25)=0;
        lhs(14,26)=0;
        lhs(14,27)=0;
        lhs(15,0)=clhs25*clhs324;
        lhs(15,1)=clhs25*clhs325;
        lhs(15,2)=clhs25*clhs326;
        lhs(15,3)=clhs25*clhs327;
        lhs(15,4)=clhs25*clhs328;
        lhs(15,5)=clhs25*clhs329;
        lhs(15,6)=clhs25*clhs330;
        lhs(15,7)=clhs25*clhs331;
        lhs(15,8)=clhs25*clhs332;
        lhs(15,9)=clhs25*clhs333;
        lhs(15,10)=clhs25*clhs334;
        lhs(15,11)=clhs25*clhs335;
        lhs(15,12)=-clhs372*normalslave(0,0);
        lhs(15,13)=-clhs373*normalslave(0,0);
        lhs(15,14)=-clhs374*normalslave(0,0);
        lhs(15,15)=-clhs375*normalslave(0,0);
        lhs(15,16)=-clhs376*normalslave(0,0);
        lhs(15,17)=-clhs377*normalslave(0,0);
        lhs(15,18)=-clhs378*normalslave(0,0);
        lhs(15,19)=-clhs379*normalslave(0,0);
        lhs(15,20)=-clhs380*normalslave(0,0);
        lhs(15,21)=-clhs381*normalslave(0,0);
        lhs(15,22)=-clhs382*normalslave(0,0);
        lhs(15,23)=-clhs383*normalslave(0,0);
        lhs(15,24)=-clhs249*clhs25;
        lhs(15,25)=0;
        lhs(15,26)=0;
        lhs(15,27)=0;
        lhs(16,0)=clhs25*clhs348;
        lhs(16,1)=clhs25*clhs349;
        lhs(16,2)=clhs25*clhs350;
        lhs(16,3)=clhs25*clhs351;
        lhs(16,4)=clhs25*clhs352;
        lhs(16,5)=clhs25*clhs353;
        lhs(16,6)=clhs25*clhs354;
        lhs(16,7)=clhs25*clhs355;
        lhs(16,8)=clhs25*clhs356;
        lhs(16,9)=clhs25*clhs357;
        lhs(16,10)=clhs25*clhs358;
        lhs(16,11)=clhs25*clhs359;
        lhs(16,12)=-clhs372*normalslave(0,1);
        lhs(16,13)=-clhs373*normalslave(0,1);
        lhs(16,14)=-clhs374*normalslave(0,1);
        lhs(16,15)=-clhs375*normalslave(0,1);
        lhs(16,16)=-clhs376*normalslave(0,1);
        lhs(16,17)=-clhs377*normalslave(0,1);
        lhs(16,18)=-clhs378*normalslave(0,1);
        lhs(16,19)=-clhs379*normalslave(0,1);
        lhs(16,20)=-clhs380*normalslave(0,1);
        lhs(16,21)=-clhs381*normalslave(0,1);
        lhs(16,22)=-clhs382*normalslave(0,1);
        lhs(16,23)=-clhs383*normalslave(0,1);
        lhs(16,24)=-clhs25*clhs250;
        lhs(16,25)=0;
        lhs(16,26)=0;
        lhs(16,27)=0;
        lhs(17,0)=clhs25*clhs360;
        lhs(17,1)=clhs25*clhs361;
        lhs(17,2)=clhs25*clhs362;
        lhs(17,3)=clhs25*clhs363;
        lhs(17,4)=clhs25*clhs364;
        lhs(17,5)=clhs25*clhs365;
        lhs(17,6)=clhs25*clhs366;
        lhs(17,7)=clhs25*clhs367;
        lhs(17,8)=clhs25*clhs368;
        lhs(17,9)=clhs25*clhs369;
        lhs(17,10)=clhs25*clhs370;
        lhs(17,11)=clhs25*clhs371;
        lhs(17,12)=-clhs372*normalslave(0,2);
        lhs(17,13)=-clhs373*normalslave(0,2);
        lhs(17,14)=-clhs374*normalslave(0,2);
        lhs(17,15)=-clhs375*normalslave(0,2);
        lhs(17,16)=-clhs376*normalslave(0,2);
        lhs(17,17)=-clhs377*normalslave(0,2);
        lhs(17,18)=-clhs378*normalslave(0,2);
        lhs(17,19)=-clhs379*normalslave(0,2);
        lhs(17,20)=-clhs380*normalslave(0,2);
        lhs(17,21)=-clhs381*normalslave(0,2);
        lhs(17,22)=-clhs382*normalslave(0,2);
        lhs(17,23)=-clhs383*normalslave(0,2);
        lhs(17,24)=-clhs25*clhs251;
        lhs(17,25)=0;
        lhs(17,26)=0;
        lhs(17,27)=0;
        lhs(18,0)=clhs27*clhs324;
        lhs(18,1)=clhs27*clhs325;
        lhs(18,2)=clhs27*clhs326;
        lhs(18,3)=clhs27*clhs327;
        lhs(18,4)=clhs27*clhs328;
        lhs(18,5)=clhs27*clhs329;
        lhs(18,6)=clhs27*clhs330;
        lhs(18,7)=clhs27*clhs331;
        lhs(18,8)=clhs27*clhs332;
        lhs(18,9)=clhs27*clhs333;
        lhs(18,10)=clhs27*clhs334;
        lhs(18,11)=clhs27*clhs335;
        lhs(18,12)=-clhs384*normalslave(0,0);
        lhs(18,13)=-clhs385*normalslave(0,0);
        lhs(18,14)=-clhs386*normalslave(0,0);
        lhs(18,15)=-clhs387*normalslave(0,0);
        lhs(18,16)=-clhs388*normalslave(0,0);
        lhs(18,17)=-clhs389*normalslave(0,0);
        lhs(18,18)=-clhs390*normalslave(0,0);
        lhs(18,19)=-clhs391*normalslave(0,0);
        lhs(18,20)=-clhs392*normalslave(0,0);
        lhs(18,21)=-clhs393*normalslave(0,0);
        lhs(18,22)=-clhs394*normalslave(0,0);
        lhs(18,23)=-clhs395*normalslave(0,0);
        lhs(18,24)=-clhs249*clhs27;
        lhs(18,25)=0;
        lhs(18,26)=0;
        lhs(18,27)=0;
        lhs(19,0)=clhs27*clhs348;
        lhs(19,1)=clhs27*clhs349;
        lhs(19,2)=clhs27*clhs350;
        lhs(19,3)=clhs27*clhs351;
        lhs(19,4)=clhs27*clhs352;
        lhs(19,5)=clhs27*clhs353;
        lhs(19,6)=clhs27*clhs354;
        lhs(19,7)=clhs27*clhs355;
        lhs(19,8)=clhs27*clhs356;
        lhs(19,9)=clhs27*clhs357;
        lhs(19,10)=clhs27*clhs358;
        lhs(19,11)=clhs27*clhs359;
        lhs(19,12)=-clhs384*normalslave(0,1);
        lhs(19,13)=-clhs385*normalslave(0,1);
        lhs(19,14)=-clhs386*normalslave(0,1);
        lhs(19,15)=-clhs387*normalslave(0,1);
        lhs(19,16)=-clhs388*normalslave(0,1);
        lhs(19,17)=-clhs389*normalslave(0,1);
        lhs(19,18)=-clhs390*normalslave(0,1);
        lhs(19,19)=-clhs391*normalslave(0,1);
        lhs(19,20)=-clhs392*normalslave(0,1);
        lhs(19,21)=-clhs393*normalslave(0,1);
        lhs(19,22)=-clhs394*normalslave(0,1);
        lhs(19,23)=-clhs395*normalslave(0,1);
        lhs(19,24)=-clhs250*clhs27;
        lhs(19,25)=0;
        lhs(19,26)=0;
        lhs(19,27)=0;
        lhs(20,0)=clhs27*clhs360;
        lhs(20,1)=clhs27*clhs361;
        lhs(20,2)=clhs27*clhs362;
        lhs(20,3)=clhs27*clhs363;
        lhs(20,4)=clhs27*clhs364;
        lhs(20,5)=clhs27*clhs365;
        lhs(20,6)=clhs27*clhs366;
        lhs(20,7)=clhs27*clhs367;
        lhs(20,8)=clhs27*clhs368;
        lhs(20,9)=clhs27*clhs369;
        lhs(20,10)=clhs27*clhs370;
        lhs(20,11)=clhs27*clhs371;
        lhs(20,12)=-clhs384*normalslave(0,2);
        lhs(20,13)=-clhs385*normalslave(0,2);
        lhs(20,14)=-clhs386*normalslave(0,2);
        lhs(20,15)=-clhs387*normalslave(0,2);
        lhs(20,16)=-clhs388*normalslave(0,2);
        lhs(20,17)=-clhs389*normalslave(0,2);
        lhs(20,18)=-clhs390*normalslave(0,2);
        lhs(20,19)=-clhs391*normalslave(0,2);
        lhs(20,20)=-clhs392*normalslave(0,2);
        lhs(20,21)=-clhs393*normalslave(0,2);
        lhs(20,22)=-clhs394*normalslave(0,2);
        lhs(20,23)=-clhs395*normalslave(0,2);
        lhs(20,24)=-clhs251*clhs27;
        lhs(20,25)=0;
        lhs(20,26)=0;
        lhs(20,27)=0;
        lhs(21,0)=clhs29*clhs324;
        lhs(21,1)=clhs29*clhs325;
        lhs(21,2)=clhs29*clhs326;
        lhs(21,3)=clhs29*clhs327;
        lhs(21,4)=clhs29*clhs328;
        lhs(21,5)=clhs29*clhs329;
        lhs(21,6)=clhs29*clhs330;
        lhs(21,7)=clhs29*clhs331;
        lhs(21,8)=clhs29*clhs332;
        lhs(21,9)=clhs29*clhs333;
        lhs(21,10)=clhs29*clhs334;
        lhs(21,11)=clhs29*clhs335;
        lhs(21,12)=-clhs396*normalslave(0,0);
        lhs(21,13)=-clhs397*normalslave(0,0);
        lhs(21,14)=-clhs398*normalslave(0,0);
        lhs(21,15)=-clhs399*normalslave(0,0);
        lhs(21,16)=-clhs400*normalslave(0,0);
        lhs(21,17)=-clhs401*normalslave(0,0);
        lhs(21,18)=-clhs402*normalslave(0,0);
        lhs(21,19)=-clhs403*normalslave(0,0);
        lhs(21,20)=-clhs404*normalslave(0,0);
        lhs(21,21)=-clhs405*normalslave(0,0);
        lhs(21,22)=-clhs406*normalslave(0,0);
        lhs(21,23)=-clhs407*normalslave(0,0);
        lhs(21,24)=-clhs249*clhs29;
        lhs(21,25)=0;
        lhs(21,26)=0;
        lhs(21,27)=0;
        lhs(22,0)=clhs29*clhs348;
        lhs(22,1)=clhs29*clhs349;
        lhs(22,2)=clhs29*clhs350;
        lhs(22,3)=clhs29*clhs351;
        lhs(22,4)=clhs29*clhs352;
        lhs(22,5)=clhs29*clhs353;
        lhs(22,6)=clhs29*clhs354;
        lhs(22,7)=clhs29*clhs355;
        lhs(22,8)=clhs29*clhs356;
        lhs(22,9)=clhs29*clhs357;
        lhs(22,10)=clhs29*clhs358;
        lhs(22,11)=clhs29*clhs359;
        lhs(22,12)=-clhs396*normalslave(0,1);
        lhs(22,13)=-clhs397*normalslave(0,1);
        lhs(22,14)=-clhs398*normalslave(0,1);
        lhs(22,15)=-clhs399*normalslave(0,1);
        lhs(22,16)=-clhs400*normalslave(0,1);
        lhs(22,17)=-clhs401*normalslave(0,1);
        lhs(22,18)=-clhs402*normalslave(0,1);
        lhs(22,19)=-clhs403*normalslave(0,1);
        lhs(22,20)=-clhs404*normalslave(0,1);
        lhs(22,21)=-clhs405*normalslave(0,1);
        lhs(22,22)=-clhs406*normalslave(0,1);
        lhs(22,23)=-clhs407*normalslave(0,1);
        lhs(22,24)=-clhs250*clhs29;
        lhs(22,25)=0;
        lhs(22,26)=0;
        lhs(22,27)=0;
        lhs(23,0)=clhs29*clhs360;
        lhs(23,1)=clhs29*clhs361;
        lhs(23,2)=clhs29*clhs362;
        lhs(23,3)=clhs29*clhs363;
        lhs(23,4)=clhs29*clhs364;
        lhs(23,5)=clhs29*clhs365;
        lhs(23,6)=clhs29*clhs366;
        lhs(23,7)=clhs29*clhs367;
        lhs(23,8)=clhs29*clhs368;
        lhs(23,9)=clhs29*clhs369;
        lhs(23,10)=clhs29*clhs370;
        lhs(23,11)=clhs29*clhs371;
        lhs(23,12)=-clhs396*normalslave(0,2);
        lhs(23,13)=-clhs397*normalslave(0,2);
        lhs(23,14)=-clhs398*normalslave(0,2);
        lhs(23,15)=-clhs399*normalslave(0,2);
        lhs(23,16)=-clhs400*normalslave(0,2);
        lhs(23,17)=-clhs401*normalslave(0,2);
        lhs(23,18)=-clhs402*normalslave(0,2);
        lhs(23,19)=-clhs403*normalslave(0,2);
        lhs(23,20)=-clhs404*normalslave(0,2);
        lhs(23,21)=-clhs405*normalslave(0,2);
        lhs(23,22)=-clhs406*normalslave(0,2);
        lhs(23,23)=-clhs407*normalslave(0,2);
        lhs(23,24)=-clhs251*clhs29;
        lhs(23,25)=0;
        lhs(23,26)=0;
        lhs(23,27)=0;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs44*scale_factor;
        lhs(24,2)=clhs51*scale_factor;
        lhs(24,3)=clhs58*scale_factor;
        lhs(24,4)=clhs65*scale_factor;
        lhs(24,5)=clhs72*scale_factor;
        lhs(24,6)=clhs79*scale_factor;
        lhs(24,7)=clhs86*scale_factor;
        lhs(24,8)=clhs93*scale_factor;
        lhs(24,9)=clhs100*scale_factor;
        lhs(24,10)=clhs107*scale_factor;
        lhs(24,11)=clhs114*scale_factor;
        lhs(24,12)=-clhs125*scale_factor;
        lhs(24,13)=-clhs136*scale_factor;
        lhs(24,14)=-clhs147*scale_factor;
        lhs(24,15)=-clhs158*scale_factor;
        lhs(24,16)=-clhs169*scale_factor;
        lhs(24,17)=-clhs180*scale_factor;
        lhs(24,18)=-clhs191*scale_factor;
        lhs(24,19)=-clhs202*scale_factor;
        lhs(24,20)=-clhs213*scale_factor;
        lhs(24,21)=-clhs224*scale_factor;
        lhs(24,22)=-clhs235*scale_factor;
        lhs(24,23)=-clhs246*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs408;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs408;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs408;
    }
    else if (rActiveInactive == 9 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(3,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(3,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(3,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(3,0)*penalty_parameter;
        const double clhs32 =     X1(0,0) + u1(0,0);
        const double clhs33 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs34 =     X1(1,0) + u1(1,0);
        const double clhs35 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs36 =     X1(2,0) + u1(2,0);
        const double clhs37 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs38 =     X1(3,0) + u1(3,0);
        const double clhs39 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs40 =     X1(0,1) + u1(0,1);
        const double clhs41 =     X1(1,1) + u1(1,1);
        const double clhs42 =     X1(2,1) + u1(2,1);
        const double clhs43 =     X1(3,1) + u1(3,1);
        const double clhs44 =     X1(0,2) + u1(0,2);
        const double clhs45 =     X1(1,2) + u1(1,2);
        const double clhs46 =     X1(2,2) + u1(2,2);
        const double clhs47 =     X1(3,2) + u1(3,2);
        const double clhs48 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs32*clhs33 + clhs34*clhs35 + clhs36*clhs37 + clhs38*clhs39) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs33*clhs40 + clhs35*clhs41 + clhs37*clhs42 + clhs39*clhs43 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs44 + clhs35*clhs45 + clhs37*clhs46 + clhs39*clhs47));
        const double clhs49 =     clhs48*normalslave(0,0);
        const double clhs50 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs51 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs52 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs53 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs32*clhs50 + clhs34*clhs51 + clhs36*clhs52 + clhs38*clhs53) + normalslave(3,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs40*clhs50 + clhs41*clhs51 + clhs42*clhs52 + clhs43*clhs53) + normalslave(3,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs44*clhs50 + clhs45*clhs51 + clhs46*clhs52 + clhs47*clhs53));
        const double clhs55 =     clhs54*normalslave(3,0);
        const double clhs56 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs57 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs60 =     normalslave(0,0)*(clhs16*clhs56 + clhs17*clhs57 + clhs18*clhs58 + clhs19*clhs59) + normalslave(0,1)*(clhs0 + clhs1*clhs56 + clhs3*clhs57 + clhs58*clhs6 + clhs59*clhs9) + normalslave(0,2)*(clhs12*clhs56 + clhs13*clhs57 + clhs14*clhs58 + clhs15*clhs59);
        const double clhs61 =     clhs60*normalslave(0,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs65 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs66 =     normalslave(3,0)*(clhs16*clhs62 + clhs17*clhs63 + clhs18*clhs64 + clhs19*clhs65) + normalslave(3,1)*(clhs1*clhs62 + clhs22 + clhs3*clhs63 + clhs6*clhs64 + clhs65*clhs9) + normalslave(3,2)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64 + clhs15*clhs65);
        const double clhs67 =     clhs66*normalslave(3,0)*penalty_parameter;
        const double clhs68 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs69 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs70 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs71 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs72 =     normalslave(0,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(0,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(0,2)*(clhs0 + clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71);
        const double clhs73 =     clhs72*normalslave(0,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs75 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs76 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs77 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs78 =     normalslave(3,0)*(clhs16*clhs74 + clhs17*clhs75 + clhs18*clhs76 + clhs19*clhs77) + normalslave(3,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs6*clhs76 + clhs77*clhs9) + normalslave(3,2)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76 + clhs15*clhs77 + clhs22);
        const double clhs79 =     clhs78*normalslave(3,0)*penalty_parameter;
        const double clhs80 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs81 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs82 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs83 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs84 =     normalslave(0,0)*(clhs16*clhs80 + clhs17*clhs81 + clhs18*clhs82 + clhs19*clhs83 + clhs4) + normalslave(0,1)*(clhs1*clhs80 + clhs3*clhs81 + clhs6*clhs82 + clhs83*clhs9) + normalslave(0,2)*(clhs12*clhs80 + clhs13*clhs81 + clhs14*clhs82 + clhs15*clhs83);
        const double clhs85 =     clhs84*normalslave(0,0)*penalty_parameter;
        const double clhs86 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs87 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs90 =     normalslave(3,0)*(clhs16*clhs86 + clhs17*clhs87 + clhs18*clhs88 + clhs19*clhs89 + clhs24) + normalslave(3,1)*(clhs1*clhs86 + clhs3*clhs87 + clhs6*clhs88 + clhs89*clhs9) + normalslave(3,2)*(clhs12*clhs86 + clhs13*clhs87 + clhs14*clhs88 + clhs15*clhs89);
        const double clhs91 =     clhs90*normalslave(3,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs93 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs94 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs95 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs96 =     normalslave(0,0)*(clhs16*clhs92 + clhs17*clhs93 + clhs18*clhs94 + clhs19*clhs95) + normalslave(0,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs4 + clhs6*clhs94 + clhs9*clhs95) + normalslave(0,2)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs15*clhs95);
        const double clhs97 =     clhs96*normalslave(0,0)*penalty_parameter;
        const double clhs98 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs99 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs100 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs101 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs102 =     normalslave(3,0)*(clhs100*clhs18 + clhs101*clhs19 + clhs16*clhs98 + clhs17*clhs99) + normalslave(3,1)*(clhs1*clhs98 + clhs100*clhs6 + clhs101*clhs9 + clhs24 + clhs3*clhs99) + normalslave(3,2)*(clhs100*clhs14 + clhs101*clhs15 + clhs12*clhs98 + clhs13*clhs99);
        const double clhs103 =     clhs102*normalslave(3,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs105 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs106 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs107 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs108 =     normalslave(0,0)*(clhs104*clhs16 + clhs105*clhs17 + clhs106*clhs18 + clhs107*clhs19) + normalslave(0,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs107*clhs9) + normalslave(0,2)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14 + clhs107*clhs15 + clhs4);
        const double clhs109 =     clhs108*normalslave(0,0)*penalty_parameter;
        const double clhs110 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs111 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs112 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs113 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs114 =     normalslave(3,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(3,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(3,2)*(clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15 + clhs24);
        const double clhs115 =     clhs114*normalslave(3,0)*penalty_parameter;
        const double clhs116 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs117 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs118 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs119 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs120 =     normalslave(0,0)*(clhs116*clhs16 + clhs117*clhs17 + clhs118*clhs18 + clhs119*clhs19 + clhs7) + normalslave(0,1)*(clhs1*clhs116 + clhs117*clhs3 + clhs118*clhs6 + clhs119*clhs9) + normalslave(0,2)*(clhs116*clhs12 + clhs117*clhs13 + clhs118*clhs14 + clhs119*clhs15);
        const double clhs121 =     clhs120*normalslave(0,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs123 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs124 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs125 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs126 =     normalslave(3,0)*(clhs122*clhs16 + clhs123*clhs17 + clhs124*clhs18 + clhs125*clhs19 + clhs26) + normalslave(3,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6 + clhs125*clhs9) + normalslave(3,2)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14 + clhs125*clhs15);
        const double clhs127 =     clhs126*normalslave(3,0)*penalty_parameter;
        const double clhs128 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs129 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs130 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs131 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs132 =     normalslave(0,0)*(clhs128*clhs16 + clhs129*clhs17 + clhs130*clhs18 + clhs131*clhs19) + normalslave(0,1)*(clhs1*clhs128 + clhs129*clhs3 + clhs130*clhs6 + clhs131*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs128 + clhs129*clhs13 + clhs130*clhs14 + clhs131*clhs15);
        const double clhs133 =     clhs132*normalslave(0,0)*penalty_parameter;
        const double clhs134 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs135 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs136 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs137 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs138 =     normalslave(3,0)*(clhs134*clhs16 + clhs135*clhs17 + clhs136*clhs18 + clhs137*clhs19) + normalslave(3,1)*(clhs1*clhs134 + clhs135*clhs3 + clhs136*clhs6 + clhs137*clhs9 + clhs26) + normalslave(3,2)*(clhs12*clhs134 + clhs13*clhs135 + clhs136*clhs14 + clhs137*clhs15);
        const double clhs139 =     clhs138*normalslave(3,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs141 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs142 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs143 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs144 =     normalslave(0,0)*(clhs140*clhs16 + clhs141*clhs17 + clhs142*clhs18 + clhs143*clhs19) + normalslave(0,1)*(clhs1*clhs140 + clhs141*clhs3 + clhs142*clhs6 + clhs143*clhs9) + normalslave(0,2)*(clhs12*clhs140 + clhs13*clhs141 + clhs14*clhs142 + clhs143*clhs15 + clhs7);
        const double clhs145 =     clhs144*normalslave(0,0)*penalty_parameter;
        const double clhs146 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs147 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs148 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs149 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs150 =     normalslave(3,0)*(clhs146*clhs16 + clhs147*clhs17 + clhs148*clhs18 + clhs149*clhs19) + normalslave(3,1)*(clhs1*clhs146 + clhs147*clhs3 + clhs148*clhs6 + clhs149*clhs9) + normalslave(3,2)*(clhs12*clhs146 + clhs13*clhs147 + clhs14*clhs148 + clhs149*clhs15 + clhs26);
        const double clhs151 =     clhs150*normalslave(3,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs153 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs154 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs155 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs156 =     normalslave(0,0)*(clhs10 + clhs152*clhs16 + clhs153*clhs17 + clhs154*clhs18 + clhs155*clhs19) + normalslave(0,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs155*clhs9) + normalslave(0,2)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154 + clhs15*clhs155);
        const double clhs157 =     clhs156*normalslave(0,0)*penalty_parameter;
        const double clhs158 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs159 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs160 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs161 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs162 =     normalslave(3,0)*(clhs158*clhs16 + clhs159*clhs17 + clhs160*clhs18 + clhs161*clhs19 + clhs28) + normalslave(3,1)*(clhs1*clhs158 + clhs159*clhs3 + clhs160*clhs6 + clhs161*clhs9) + normalslave(3,2)*(clhs12*clhs158 + clhs13*clhs159 + clhs14*clhs160 + clhs15*clhs161);
        const double clhs163 =     clhs162*normalslave(3,0)*penalty_parameter;
        const double clhs164 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs165 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs166 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs167 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs168 =     normalslave(0,0)*(clhs16*clhs164 + clhs165*clhs17 + clhs166*clhs18 + clhs167*clhs19) + normalslave(0,1)*(clhs1*clhs164 + clhs10 + clhs165*clhs3 + clhs166*clhs6 + clhs167*clhs9) + normalslave(0,2)*(clhs12*clhs164 + clhs13*clhs165 + clhs14*clhs166 + clhs15*clhs167);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs171 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs172 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs173 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs174 =     normalslave(3,0)*(clhs16*clhs170 + clhs17*clhs171 + clhs172*clhs18 + clhs173*clhs19) + normalslave(3,1)*(clhs1*clhs170 + clhs171*clhs3 + clhs172*clhs6 + clhs173*clhs9 + clhs28) + normalslave(3,2)*(clhs12*clhs170 + clhs13*clhs171 + clhs14*clhs172 + clhs15*clhs173);
        const double clhs175 =     clhs174*normalslave(3,0)*penalty_parameter;
        const double clhs176 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs177 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs178 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs179 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs180 =     normalslave(0,0)*(clhs16*clhs176 + clhs17*clhs177 + clhs178*clhs18 + clhs179*clhs19) + normalslave(0,1)*(clhs1*clhs176 + clhs177*clhs3 + clhs178*clhs6 + clhs179*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs176 + clhs13*clhs177 + clhs14*clhs178 + clhs15*clhs179);
        const double clhs181 =     clhs180*normalslave(0,0)*penalty_parameter;
        const double clhs182 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs183 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs184 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs185 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs186 =     normalslave(3,0)*(clhs16*clhs182 + clhs17*clhs183 + clhs18*clhs184 + clhs185*clhs19) + normalslave(3,1)*(clhs1*clhs182 + clhs183*clhs3 + clhs184*clhs6 + clhs185*clhs9) + normalslave(3,2)*(clhs12*clhs182 + clhs13*clhs183 + clhs14*clhs184 + clhs15*clhs185 + clhs28);
        const double clhs187 =     clhs186*normalslave(3,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs189 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs190 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs191 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs192 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs193 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs194 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs195 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs197 =     normalslave(0,0)*(-clhs16*clhs188 - clhs17*clhs194 - clhs18*clhs195 - clhs19*clhs196 + clhs190*clhs32 + clhs191*clhs34 + clhs192*clhs36 + clhs193*clhs38 + clhs33) + normalslave(0,1)*(-clhs1*clhs188 + clhs190*clhs40 + clhs191*clhs41 + clhs192*clhs42 + clhs193*clhs43 - clhs194*clhs3 - clhs195*clhs6 - clhs196*clhs9) + normalslave(0,2)*(-clhs12*clhs188 - clhs13*clhs194 - clhs14*clhs195 - clhs15*clhs196 + clhs190*clhs44 + clhs191*clhs45 + clhs192*clhs46 + clhs193*clhs47);
        const double clhs198 =     clhs197*normalslave(0,0)*penalty_parameter;
        const double clhs199 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs200 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs201 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs202 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs203 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs204 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs205 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs206 =     normalslave(3,0)*(-clhs16*clhs189 - clhs17*clhs203 - clhs18*clhs204 - clhs19*clhs205 + clhs199*clhs32 + clhs200*clhs34 + clhs201*clhs36 + clhs202*clhs38 + clhs50) + normalslave(3,1)*(-clhs1*clhs189 + clhs199*clhs40 + clhs200*clhs41 + clhs201*clhs42 + clhs202*clhs43 - clhs203*clhs3 - clhs204*clhs6 - clhs205*clhs9) + normalslave(3,2)*(-clhs12*clhs189 - clhs13*clhs203 - clhs14*clhs204 - clhs15*clhs205 + clhs199*clhs44 + clhs200*clhs45 + clhs201*clhs46 + clhs202*clhs47);
        const double clhs207 =     clhs206*normalslave(3,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs210 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs211 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs216 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs217 =     normalslave(0,0)*(-clhs16*clhs208 - clhs17*clhs214 - clhs18*clhs215 - clhs19*clhs216 + clhs210*clhs32 + clhs211*clhs34 + clhs212*clhs36 + clhs213*clhs38) + normalslave(0,1)*(-clhs1*clhs208 + clhs210*clhs40 + clhs211*clhs41 + clhs212*clhs42 + clhs213*clhs43 - clhs214*clhs3 - clhs215*clhs6 - clhs216*clhs9 + clhs33) + normalslave(0,2)*(-clhs12*clhs208 - clhs13*clhs214 - clhs14*clhs215 - clhs15*clhs216 + clhs210*clhs44 + clhs211*clhs45 + clhs212*clhs46 + clhs213*clhs47);
        const double clhs218 =     clhs217*normalslave(0,0)*penalty_parameter;
        const double clhs219 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs221 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs224 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs226 =     normalslave(3,0)*(-clhs16*clhs209 - clhs17*clhs223 - clhs18*clhs224 - clhs19*clhs225 + clhs219*clhs32 + clhs220*clhs34 + clhs221*clhs36 + clhs222*clhs38) + normalslave(3,1)*(-clhs1*clhs209 + clhs219*clhs40 + clhs220*clhs41 + clhs221*clhs42 + clhs222*clhs43 - clhs223*clhs3 - clhs224*clhs6 - clhs225*clhs9 + clhs50) + normalslave(3,2)*(-clhs12*clhs209 - clhs13*clhs223 - clhs14*clhs224 - clhs15*clhs225 + clhs219*clhs44 + clhs220*clhs45 + clhs221*clhs46 + clhs222*clhs47);
        const double clhs227 =     clhs226*normalslave(3,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs229 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs231 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs232 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs233 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs234 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs235 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs236 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs237 =     normalslave(0,0)*(-clhs16*clhs228 - clhs17*clhs234 - clhs18*clhs235 - clhs19*clhs236 + clhs230*clhs32 + clhs231*clhs34 + clhs232*clhs36 + clhs233*clhs38) + normalslave(0,1)*(-clhs1*clhs228 + clhs230*clhs40 + clhs231*clhs41 + clhs232*clhs42 + clhs233*clhs43 - clhs234*clhs3 - clhs235*clhs6 - clhs236*clhs9) + normalslave(0,2)*(-clhs12*clhs228 - clhs13*clhs234 - clhs14*clhs235 - clhs15*clhs236 + clhs230*clhs44 + clhs231*clhs45 + clhs232*clhs46 + clhs233*clhs47 + clhs33);
        const double clhs238 =     clhs237*normalslave(0,0)*penalty_parameter;
        const double clhs239 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs240 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs241 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs242 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs243 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs244 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs246 =     normalslave(3,0)*(-clhs16*clhs229 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs239*clhs32 + clhs240*clhs34 + clhs241*clhs36 + clhs242*clhs38) + normalslave(3,1)*(-clhs1*clhs229 + clhs239*clhs40 + clhs240*clhs41 + clhs241*clhs42 + clhs242*clhs43 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(3,2)*(-clhs12*clhs229 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs44 + clhs240*clhs45 + clhs241*clhs46 + clhs242*clhs47 + clhs50);
        const double clhs247 =     clhs246*normalslave(3,0)*penalty_parameter;
        const double clhs248 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs249 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs250 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs251 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs254 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs257 =     normalslave(0,0)*(-clhs16*clhs248 - clhs17*clhs254 - clhs18*clhs255 - clhs19*clhs256 + clhs250*clhs32 + clhs251*clhs34 + clhs252*clhs36 + clhs253*clhs38 + clhs35) + normalslave(0,1)*(-clhs1*clhs248 + clhs250*clhs40 + clhs251*clhs41 + clhs252*clhs42 + clhs253*clhs43 - clhs254*clhs3 - clhs255*clhs6 - clhs256*clhs9) + normalslave(0,2)*(-clhs12*clhs248 - clhs13*clhs254 - clhs14*clhs255 - clhs15*clhs256 + clhs250*clhs44 + clhs251*clhs45 + clhs252*clhs46 + clhs253*clhs47);
        const double clhs258 =     clhs257*normalslave(0,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs262 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs264 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs265 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs266 =     normalslave(3,0)*(-clhs16*clhs249 - clhs17*clhs263 - clhs18*clhs264 - clhs19*clhs265 + clhs259*clhs32 + clhs260*clhs34 + clhs261*clhs36 + clhs262*clhs38 + clhs51) + normalslave(3,1)*(-clhs1*clhs249 + clhs259*clhs40 + clhs260*clhs41 + clhs261*clhs42 + clhs262*clhs43 - clhs263*clhs3 - clhs264*clhs6 - clhs265*clhs9) + normalslave(3,2)*(-clhs12*clhs249 - clhs13*clhs263 - clhs14*clhs264 - clhs15*clhs265 + clhs259*clhs44 + clhs260*clhs45 + clhs261*clhs46 + clhs262*clhs47);
        const double clhs267 =     clhs266*normalslave(3,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs269 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs270 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs271 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs272 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs273 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs276 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs277 =     normalslave(0,0)*(-clhs16*clhs268 - clhs17*clhs274 - clhs18*clhs275 - clhs19*clhs276 + clhs270*clhs32 + clhs271*clhs34 + clhs272*clhs36 + clhs273*clhs38) + normalslave(0,1)*(-clhs1*clhs268 + clhs270*clhs40 + clhs271*clhs41 + clhs272*clhs42 + clhs273*clhs43 - clhs274*clhs3 - clhs275*clhs6 - clhs276*clhs9 + clhs35) + normalslave(0,2)*(-clhs12*clhs268 - clhs13*clhs274 - clhs14*clhs275 - clhs15*clhs276 + clhs270*clhs44 + clhs271*clhs45 + clhs272*clhs46 + clhs273*clhs47);
        const double clhs278 =     clhs277*normalslave(0,0)*penalty_parameter;
        const double clhs279 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs280 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs281 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs282 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs283 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs284 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs285 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs286 =     normalslave(3,0)*(-clhs16*clhs269 - clhs17*clhs283 - clhs18*clhs284 - clhs19*clhs285 + clhs279*clhs32 + clhs280*clhs34 + clhs281*clhs36 + clhs282*clhs38) + normalslave(3,1)*(-clhs1*clhs269 + clhs279*clhs40 + clhs280*clhs41 + clhs281*clhs42 + clhs282*clhs43 - clhs283*clhs3 - clhs284*clhs6 - clhs285*clhs9 + clhs51) + normalslave(3,2)*(-clhs12*clhs269 - clhs13*clhs283 - clhs14*clhs284 - clhs15*clhs285 + clhs279*clhs44 + clhs280*clhs45 + clhs281*clhs46 + clhs282*clhs47);
        const double clhs287 =     clhs286*normalslave(3,0)*penalty_parameter;
        const double clhs288 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs289 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs290 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs291 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs292 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs293 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs294 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs295 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs296 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs297 =     normalslave(0,0)*(-clhs16*clhs288 - clhs17*clhs294 - clhs18*clhs295 - clhs19*clhs296 + clhs290*clhs32 + clhs291*clhs34 + clhs292*clhs36 + clhs293*clhs38) + normalslave(0,1)*(-clhs1*clhs288 + clhs290*clhs40 + clhs291*clhs41 + clhs292*clhs42 + clhs293*clhs43 - clhs294*clhs3 - clhs295*clhs6 - clhs296*clhs9) + normalslave(0,2)*(-clhs12*clhs288 - clhs13*clhs294 - clhs14*clhs295 - clhs15*clhs296 + clhs290*clhs44 + clhs291*clhs45 + clhs292*clhs46 + clhs293*clhs47 + clhs35);
        const double clhs298 =     clhs297*normalslave(0,0)*penalty_parameter;
        const double clhs299 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs305 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs306 =     normalslave(3,0)*(-clhs16*clhs289 - clhs17*clhs303 - clhs18*clhs304 - clhs19*clhs305 + clhs299*clhs32 + clhs300*clhs34 + clhs301*clhs36 + clhs302*clhs38) + normalslave(3,1)*(-clhs1*clhs289 + clhs299*clhs40 - clhs3*clhs303 + clhs300*clhs41 + clhs301*clhs42 + clhs302*clhs43 - clhs304*clhs6 - clhs305*clhs9) + normalslave(3,2)*(-clhs12*clhs289 - clhs13*clhs303 - clhs14*clhs304 - clhs15*clhs305 + clhs299*clhs44 + clhs300*clhs45 + clhs301*clhs46 + clhs302*clhs47 + clhs51);
        const double clhs307 =     clhs306*normalslave(3,0)*penalty_parameter;
        const double clhs308 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs309 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs310 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs311 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs312 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs313 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs314 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs315 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs316 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs317 =     normalslave(0,0)*(-clhs16*clhs308 - clhs17*clhs314 - clhs18*clhs315 - clhs19*clhs316 + clhs310*clhs32 + clhs311*clhs34 + clhs312*clhs36 + clhs313*clhs38 + clhs37) + normalslave(0,1)*(-clhs1*clhs308 - clhs3*clhs314 + clhs310*clhs40 + clhs311*clhs41 + clhs312*clhs42 + clhs313*clhs43 - clhs315*clhs6 - clhs316*clhs9) + normalslave(0,2)*(-clhs12*clhs308 - clhs13*clhs314 - clhs14*clhs315 - clhs15*clhs316 + clhs310*clhs44 + clhs311*clhs45 + clhs312*clhs46 + clhs313*clhs47);
        const double clhs318 =     clhs317*normalslave(0,0)*penalty_parameter;
        const double clhs319 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs320 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs321 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs322 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs324 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs325 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs326 =     normalslave(3,0)*(-clhs16*clhs309 - clhs17*clhs323 - clhs18*clhs324 - clhs19*clhs325 + clhs319*clhs32 + clhs320*clhs34 + clhs321*clhs36 + clhs322*clhs38 + clhs52) + normalslave(3,1)*(-clhs1*clhs309 - clhs3*clhs323 + clhs319*clhs40 + clhs320*clhs41 + clhs321*clhs42 + clhs322*clhs43 - clhs324*clhs6 - clhs325*clhs9) + normalslave(3,2)*(-clhs12*clhs309 - clhs13*clhs323 - clhs14*clhs324 - clhs15*clhs325 + clhs319*clhs44 + clhs320*clhs45 + clhs321*clhs46 + clhs322*clhs47);
        const double clhs327 =     clhs326*normalslave(3,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs329 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs330 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs331 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs332 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs333 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs334 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs335 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs336 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs337 =     normalslave(0,0)*(-clhs16*clhs328 - clhs17*clhs334 - clhs18*clhs335 - clhs19*clhs336 + clhs32*clhs330 + clhs331*clhs34 + clhs332*clhs36 + clhs333*clhs38) + normalslave(0,1)*(-clhs1*clhs328 - clhs3*clhs334 + clhs330*clhs40 + clhs331*clhs41 + clhs332*clhs42 + clhs333*clhs43 - clhs335*clhs6 - clhs336*clhs9 + clhs37) + normalslave(0,2)*(-clhs12*clhs328 - clhs13*clhs334 - clhs14*clhs335 - clhs15*clhs336 + clhs330*clhs44 + clhs331*clhs45 + clhs332*clhs46 + clhs333*clhs47);
        const double clhs338 =     clhs337*normalslave(0,0)*penalty_parameter;
        const double clhs339 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs340 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs341 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs342 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs343 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs344 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs345 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs346 =     normalslave(3,0)*(-clhs16*clhs329 - clhs17*clhs343 - clhs18*clhs344 - clhs19*clhs345 + clhs32*clhs339 + clhs34*clhs340 + clhs341*clhs36 + clhs342*clhs38) + normalslave(3,1)*(-clhs1*clhs329 - clhs3*clhs343 + clhs339*clhs40 + clhs340*clhs41 + clhs341*clhs42 + clhs342*clhs43 - clhs344*clhs6 - clhs345*clhs9 + clhs52) + normalslave(3,2)*(-clhs12*clhs329 - clhs13*clhs343 - clhs14*clhs344 - clhs15*clhs345 + clhs339*clhs44 + clhs340*clhs45 + clhs341*clhs46 + clhs342*clhs47);
        const double clhs347 =     clhs346*normalslave(3,0)*penalty_parameter;
        const double clhs348 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs349 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs350 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs351 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs352 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs353 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs354 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs355 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs356 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs357 =     normalslave(0,0)*(-clhs16*clhs348 - clhs17*clhs354 - clhs18*clhs355 - clhs19*clhs356 + clhs32*clhs350 + clhs34*clhs351 + clhs352*clhs36 + clhs353*clhs38) + normalslave(0,1)*(-clhs1*clhs348 - clhs3*clhs354 + clhs350*clhs40 + clhs351*clhs41 + clhs352*clhs42 + clhs353*clhs43 - clhs355*clhs6 - clhs356*clhs9) + normalslave(0,2)*(-clhs12*clhs348 - clhs13*clhs354 - clhs14*clhs355 - clhs15*clhs356 + clhs350*clhs44 + clhs351*clhs45 + clhs352*clhs46 + clhs353*clhs47 + clhs37);
        const double clhs358 =     clhs357*normalslave(0,0)*penalty_parameter;
        const double clhs359 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs360 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs361 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs362 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs363 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs364 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs365 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs366 =     normalslave(3,0)*(-clhs16*clhs349 - clhs17*clhs363 - clhs18*clhs364 - clhs19*clhs365 + clhs32*clhs359 + clhs34*clhs360 + clhs36*clhs361 + clhs362*clhs38) + normalslave(3,1)*(-clhs1*clhs349 - clhs3*clhs363 + clhs359*clhs40 + clhs360*clhs41 + clhs361*clhs42 + clhs362*clhs43 - clhs364*clhs6 - clhs365*clhs9) + normalslave(3,2)*(-clhs12*clhs349 - clhs13*clhs363 - clhs14*clhs364 - clhs15*clhs365 + clhs359*clhs44 + clhs360*clhs45 + clhs361*clhs46 + clhs362*clhs47 + clhs52);
        const double clhs367 =     clhs366*normalslave(3,0)*penalty_parameter;
        const double clhs368 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs369 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs370 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs371 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs372 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs373 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs374 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs375 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs376 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs377 =     normalslave(0,0)*(-clhs16*clhs368 - clhs17*clhs374 - clhs18*clhs375 - clhs19*clhs376 + clhs32*clhs370 + clhs34*clhs371 + clhs36*clhs372 + clhs373*clhs38 + clhs39) + normalslave(0,1)*(-clhs1*clhs368 - clhs3*clhs374 + clhs370*clhs40 + clhs371*clhs41 + clhs372*clhs42 + clhs373*clhs43 - clhs375*clhs6 - clhs376*clhs9) + normalslave(0,2)*(-clhs12*clhs368 - clhs13*clhs374 - clhs14*clhs375 - clhs15*clhs376 + clhs370*clhs44 + clhs371*clhs45 + clhs372*clhs46 + clhs373*clhs47);
        const double clhs378 =     clhs377*normalslave(0,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs380 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs381 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs382 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs383 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs384 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs385 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs386 =     normalslave(3,0)*(-clhs16*clhs369 - clhs17*clhs383 - clhs18*clhs384 - clhs19*clhs385 + clhs32*clhs379 + clhs34*clhs380 + clhs36*clhs381 + clhs38*clhs382 + clhs53) + normalslave(3,1)*(-clhs1*clhs369 - clhs3*clhs383 + clhs379*clhs40 + clhs380*clhs41 + clhs381*clhs42 + clhs382*clhs43 - clhs384*clhs6 - clhs385*clhs9) + normalslave(3,2)*(-clhs12*clhs369 - clhs13*clhs383 - clhs14*clhs384 - clhs15*clhs385 + clhs379*clhs44 + clhs380*clhs45 + clhs381*clhs46 + clhs382*clhs47);
        const double clhs387 =     clhs386*normalslave(3,0)*penalty_parameter;
        const double clhs388 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs389 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs390 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs391 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs392 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs393 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs394 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs395 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs396 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs397 =     normalslave(0,0)*(-clhs16*clhs388 - clhs17*clhs394 - clhs18*clhs395 - clhs19*clhs396 + clhs32*clhs390 + clhs34*clhs391 + clhs36*clhs392 + clhs38*clhs393) + normalslave(0,1)*(-clhs1*clhs388 - clhs3*clhs394 + clhs39 + clhs390*clhs40 + clhs391*clhs41 + clhs392*clhs42 + clhs393*clhs43 - clhs395*clhs6 - clhs396*clhs9) + normalslave(0,2)*(-clhs12*clhs388 - clhs13*clhs394 - clhs14*clhs395 - clhs15*clhs396 + clhs390*clhs44 + clhs391*clhs45 + clhs392*clhs46 + clhs393*clhs47);
        const double clhs398 =     clhs397*normalslave(0,0)*penalty_parameter;
        const double clhs399 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs400 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs401 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs402 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs403 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs404 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs405 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs406 =     normalslave(3,0)*(-clhs16*clhs389 - clhs17*clhs403 - clhs18*clhs404 - clhs19*clhs405 + clhs32*clhs399 + clhs34*clhs400 + clhs36*clhs401 + clhs38*clhs402) + normalslave(3,1)*(-clhs1*clhs389 - clhs3*clhs403 + clhs399*clhs40 + clhs400*clhs41 + clhs401*clhs42 + clhs402*clhs43 - clhs404*clhs6 - clhs405*clhs9 + clhs53) + normalslave(3,2)*(-clhs12*clhs389 - clhs13*clhs403 - clhs14*clhs404 - clhs15*clhs405 + clhs399*clhs44 + clhs400*clhs45 + clhs401*clhs46 + clhs402*clhs47);
        const double clhs407 =     clhs406*normalslave(3,0)*penalty_parameter;
        const double clhs408 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs409 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs410 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs411 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs412 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs413 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs414 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs415 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs416 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs417 =     normalslave(0,0)*(-clhs16*clhs408 - clhs17*clhs414 - clhs18*clhs415 - clhs19*clhs416 + clhs32*clhs410 + clhs34*clhs411 + clhs36*clhs412 + clhs38*clhs413) + normalslave(0,1)*(-clhs1*clhs408 - clhs3*clhs414 + clhs40*clhs410 + clhs41*clhs411 + clhs412*clhs42 + clhs413*clhs43 - clhs415*clhs6 - clhs416*clhs9) + normalslave(0,2)*(-clhs12*clhs408 - clhs13*clhs414 - clhs14*clhs415 - clhs15*clhs416 + clhs39 + clhs410*clhs44 + clhs411*clhs45 + clhs412*clhs46 + clhs413*clhs47);
        const double clhs418 =     clhs417*normalslave(0,0)*penalty_parameter;
        const double clhs419 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs420 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs421 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs422 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs423 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs424 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs425 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs426 =     normalslave(3,0)*(-clhs16*clhs409 - clhs17*clhs423 - clhs18*clhs424 - clhs19*clhs425 + clhs32*clhs419 + clhs34*clhs420 + clhs36*clhs421 + clhs38*clhs422) + normalslave(3,1)*(-clhs1*clhs409 - clhs3*clhs423 + clhs40*clhs419 + clhs41*clhs420 + clhs42*clhs421 + clhs422*clhs43 - clhs424*clhs6 - clhs425*clhs9) + normalslave(3,2)*(-clhs12*clhs409 - clhs13*clhs423 - clhs14*clhs424 - clhs15*clhs425 + clhs419*clhs44 + clhs420*clhs45 + clhs421*clhs46 + clhs422*clhs47 + clhs53);
        const double clhs427 =     clhs426*normalslave(3,0)*penalty_parameter;
        const double clhs428 =     normalslave(0,0)*scale_factor;
        const double clhs429 =     normalslave(3,0)*scale_factor;
        const double clhs430 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs431 =     clhs30*normalslave(3,1)*penalty_parameter;
        const double clhs432 =     clhs48*normalslave(0,1);
        const double clhs433 =     clhs54*normalslave(3,1);
        const double clhs434 =     clhs60*normalslave(0,1)*penalty_parameter;
        const double clhs435 =     clhs66*normalslave(3,1)*penalty_parameter;
        const double clhs436 =     clhs72*normalslave(0,1)*penalty_parameter;
        const double clhs437 =     clhs78*normalslave(3,1)*penalty_parameter;
        const double clhs438 =     clhs84*normalslave(0,1)*penalty_parameter;
        const double clhs439 =     clhs90*normalslave(3,1)*penalty_parameter;
        const double clhs440 =     clhs96*normalslave(0,1)*penalty_parameter;
        const double clhs441 =     clhs102*normalslave(3,1)*penalty_parameter;
        const double clhs442 =     clhs108*normalslave(0,1)*penalty_parameter;
        const double clhs443 =     clhs114*normalslave(3,1)*penalty_parameter;
        const double clhs444 =     clhs120*normalslave(0,1)*penalty_parameter;
        const double clhs445 =     clhs126*normalslave(3,1)*penalty_parameter;
        const double clhs446 =     clhs132*normalslave(0,1)*penalty_parameter;
        const double clhs447 =     clhs138*normalslave(3,1)*penalty_parameter;
        const double clhs448 =     clhs144*normalslave(0,1)*penalty_parameter;
        const double clhs449 =     clhs150*normalslave(3,1)*penalty_parameter;
        const double clhs450 =     clhs156*normalslave(0,1)*penalty_parameter;
        const double clhs451 =     clhs162*normalslave(3,1)*penalty_parameter;
        const double clhs452 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs453 =     clhs174*normalslave(3,1)*penalty_parameter;
        const double clhs454 =     clhs180*normalslave(0,1)*penalty_parameter;
        const double clhs455 =     clhs186*normalslave(3,1)*penalty_parameter;
        const double clhs456 =     clhs197*normalslave(0,1)*penalty_parameter;
        const double clhs457 =     clhs206*normalslave(3,1)*penalty_parameter;
        const double clhs458 =     clhs217*normalslave(0,1)*penalty_parameter;
        const double clhs459 =     clhs226*normalslave(3,1)*penalty_parameter;
        const double clhs460 =     clhs237*normalslave(0,1)*penalty_parameter;
        const double clhs461 =     clhs246*normalslave(3,1)*penalty_parameter;
        const double clhs462 =     clhs257*normalslave(0,1)*penalty_parameter;
        const double clhs463 =     clhs266*normalslave(3,1)*penalty_parameter;
        const double clhs464 =     clhs277*normalslave(0,1)*penalty_parameter;
        const double clhs465 =     clhs286*normalslave(3,1)*penalty_parameter;
        const double clhs466 =     clhs297*normalslave(0,1)*penalty_parameter;
        const double clhs467 =     clhs306*normalslave(3,1)*penalty_parameter;
        const double clhs468 =     clhs317*normalslave(0,1)*penalty_parameter;
        const double clhs469 =     clhs326*normalslave(3,1)*penalty_parameter;
        const double clhs470 =     clhs337*normalslave(0,1)*penalty_parameter;
        const double clhs471 =     clhs346*normalslave(3,1)*penalty_parameter;
        const double clhs472 =     clhs357*normalslave(0,1)*penalty_parameter;
        const double clhs473 =     clhs366*normalslave(3,1)*penalty_parameter;
        const double clhs474 =     clhs377*normalslave(0,1)*penalty_parameter;
        const double clhs475 =     clhs386*normalslave(3,1)*penalty_parameter;
        const double clhs476 =     clhs397*normalslave(0,1)*penalty_parameter;
        const double clhs477 =     clhs406*normalslave(3,1)*penalty_parameter;
        const double clhs478 =     clhs417*normalslave(0,1)*penalty_parameter;
        const double clhs479 =     clhs426*normalslave(3,1)*penalty_parameter;
        const double clhs480 =     normalslave(0,1)*scale_factor;
        const double clhs481 =     normalslave(3,1)*scale_factor;
        const double clhs482 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs483 =     clhs30*normalslave(3,2)*penalty_parameter;
        const double clhs484 =     clhs48*normalslave(0,2);
        const double clhs485 =     clhs54*normalslave(3,2);
        const double clhs486 =     clhs60*normalslave(0,2)*penalty_parameter;
        const double clhs487 =     clhs66*normalslave(3,2)*penalty_parameter;
        const double clhs488 =     clhs72*normalslave(0,2)*penalty_parameter;
        const double clhs489 =     clhs78*normalslave(3,2)*penalty_parameter;
        const double clhs490 =     clhs84*normalslave(0,2)*penalty_parameter;
        const double clhs491 =     clhs90*normalslave(3,2)*penalty_parameter;
        const double clhs492 =     clhs96*normalslave(0,2)*penalty_parameter;
        const double clhs493 =     clhs102*normalslave(3,2)*penalty_parameter;
        const double clhs494 =     clhs108*normalslave(0,2)*penalty_parameter;
        const double clhs495 =     clhs114*normalslave(3,2)*penalty_parameter;
        const double clhs496 =     clhs120*normalslave(0,2)*penalty_parameter;
        const double clhs497 =     clhs126*normalslave(3,2)*penalty_parameter;
        const double clhs498 =     clhs132*normalslave(0,2)*penalty_parameter;
        const double clhs499 =     clhs138*normalslave(3,2)*penalty_parameter;
        const double clhs500 =     clhs144*normalslave(0,2)*penalty_parameter;
        const double clhs501 =     clhs150*normalslave(3,2)*penalty_parameter;
        const double clhs502 =     clhs156*normalslave(0,2)*penalty_parameter;
        const double clhs503 =     clhs162*normalslave(3,2)*penalty_parameter;
        const double clhs504 =     clhs168*normalslave(0,2)*penalty_parameter;
        const double clhs505 =     clhs174*normalslave(3,2)*penalty_parameter;
        const double clhs506 =     clhs180*normalslave(0,2)*penalty_parameter;
        const double clhs507 =     clhs186*normalslave(3,2)*penalty_parameter;
        const double clhs508 =     clhs197*normalslave(0,2)*penalty_parameter;
        const double clhs509 =     clhs206*normalslave(3,2)*penalty_parameter;
        const double clhs510 =     clhs217*normalslave(0,2)*penalty_parameter;
        const double clhs511 =     clhs226*normalslave(3,2)*penalty_parameter;
        const double clhs512 =     clhs237*normalslave(0,2)*penalty_parameter;
        const double clhs513 =     clhs246*normalslave(3,2)*penalty_parameter;
        const double clhs514 =     clhs257*normalslave(0,2)*penalty_parameter;
        const double clhs515 =     clhs266*normalslave(3,2)*penalty_parameter;
        const double clhs516 =     clhs277*normalslave(0,2)*penalty_parameter;
        const double clhs517 =     clhs286*normalslave(3,2)*penalty_parameter;
        const double clhs518 =     clhs297*normalslave(0,2)*penalty_parameter;
        const double clhs519 =     clhs306*normalslave(3,2)*penalty_parameter;
        const double clhs520 =     clhs317*normalslave(0,2)*penalty_parameter;
        const double clhs521 =     clhs326*normalslave(3,2)*penalty_parameter;
        const double clhs522 =     clhs337*normalslave(0,2)*penalty_parameter;
        const double clhs523 =     clhs346*normalslave(3,2)*penalty_parameter;
        const double clhs524 =     clhs357*normalslave(0,2)*penalty_parameter;
        const double clhs525 =     clhs366*normalslave(3,2)*penalty_parameter;
        const double clhs526 =     clhs377*normalslave(0,2)*penalty_parameter;
        const double clhs527 =     clhs386*normalslave(3,2)*penalty_parameter;
        const double clhs528 =     clhs397*normalslave(0,2)*penalty_parameter;
        const double clhs529 =     clhs406*normalslave(3,2)*penalty_parameter;
        const double clhs530 =     clhs417*normalslave(0,2)*penalty_parameter;
        const double clhs531 =     clhs426*normalslave(3,2)*penalty_parameter;
        const double clhs532 =     normalslave(0,2)*scale_factor;
        const double clhs533 =     normalslave(3,2)*scale_factor;
        const double clhs534 =     clhs20*normalslave(0,0);
        const double clhs535 =     clhs30*normalslave(3,0);
        const double clhs536 =     clhs60*normalslave(0,0);
        const double clhs537 =     clhs66*normalslave(3,0);
        const double clhs538 =     clhs72*normalslave(0,0);
        const double clhs539 =     clhs78*normalslave(3,0);
        const double clhs540 =     clhs84*normalslave(0,0);
        const double clhs541 =     clhs90*normalslave(3,0);
        const double clhs542 =     clhs96*normalslave(0,0);
        const double clhs543 =     clhs102*normalslave(3,0);
        const double clhs544 =     clhs108*normalslave(0,0);
        const double clhs545 =     clhs114*normalslave(3,0);
        const double clhs546 =     clhs120*normalslave(0,0);
        const double clhs547 =     clhs126*normalslave(3,0);
        const double clhs548 =     clhs132*normalslave(0,0);
        const double clhs549 =     clhs138*normalslave(3,0);
        const double clhs550 =     clhs144*normalslave(0,0);
        const double clhs551 =     clhs150*normalslave(3,0);
        const double clhs552 =     clhs156*normalslave(0,0);
        const double clhs553 =     clhs162*normalslave(3,0);
        const double clhs554 =     clhs168*normalslave(0,0);
        const double clhs555 =     clhs174*normalslave(3,0);
        const double clhs556 =     clhs180*normalslave(0,0);
        const double clhs557 =     clhs186*normalslave(3,0);
        const double clhs558 =     clhs20*normalslave(0,1);
        const double clhs559 =     clhs30*normalslave(3,1);
        const double clhs560 =     clhs60*normalslave(0,1);
        const double clhs561 =     clhs66*normalslave(3,1);
        const double clhs562 =     clhs72*normalslave(0,1);
        const double clhs563 =     clhs78*normalslave(3,1);
        const double clhs564 =     clhs84*normalslave(0,1);
        const double clhs565 =     clhs90*normalslave(3,1);
        const double clhs566 =     clhs96*normalslave(0,1);
        const double clhs567 =     clhs102*normalslave(3,1);
        const double clhs568 =     clhs108*normalslave(0,1);
        const double clhs569 =     clhs114*normalslave(3,1);
        const double clhs570 =     clhs120*normalslave(0,1);
        const double clhs571 =     clhs126*normalslave(3,1);
        const double clhs572 =     clhs132*normalslave(0,1);
        const double clhs573 =     clhs138*normalslave(3,1);
        const double clhs574 =     clhs144*normalslave(0,1);
        const double clhs575 =     clhs150*normalslave(3,1);
        const double clhs576 =     clhs156*normalslave(0,1);
        const double clhs577 =     clhs162*normalslave(3,1);
        const double clhs578 =     clhs168*normalslave(0,1);
        const double clhs579 =     clhs174*normalslave(3,1);
        const double clhs580 =     clhs180*normalslave(0,1);
        const double clhs581 =     clhs186*normalslave(3,1);
        const double clhs582 =     clhs20*normalslave(0,2);
        const double clhs583 =     clhs30*normalslave(3,2);
        const double clhs584 =     clhs60*normalslave(0,2);
        const double clhs585 =     clhs66*normalslave(3,2);
        const double clhs586 =     clhs72*normalslave(0,2);
        const double clhs587 =     clhs78*normalslave(3,2);
        const double clhs588 =     clhs84*normalslave(0,2);
        const double clhs589 =     clhs90*normalslave(3,2);
        const double clhs590 =     clhs96*normalslave(0,2);
        const double clhs591 =     clhs102*normalslave(3,2);
        const double clhs592 =     clhs108*normalslave(0,2);
        const double clhs593 =     clhs114*normalslave(3,2);
        const double clhs594 =     clhs120*normalslave(0,2);
        const double clhs595 =     clhs126*normalslave(3,2);
        const double clhs596 =     clhs132*normalslave(0,2);
        const double clhs597 =     clhs138*normalslave(3,2);
        const double clhs598 =     clhs144*normalslave(0,2);
        const double clhs599 =     clhs150*normalslave(3,2);
        const double clhs600 =     clhs156*normalslave(0,2);
        const double clhs601 =     clhs162*normalslave(3,2);
        const double clhs602 =     clhs168*normalslave(0,2);
        const double clhs603 =     clhs174*normalslave(3,2);
        const double clhs604 =     clhs180*normalslave(0,2);
        const double clhs605 =     clhs186*normalslave(3,2);
        const double clhs606 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs49 - clhs22*clhs31 + clhs23*clhs55;
        lhs(0,1)=-clhs0*clhs61 - clhs22*clhs67 + clhs49*clhs56 + clhs55*clhs62;
        lhs(0,2)=-clhs0*clhs73 - clhs22*clhs79 + clhs49*clhs68 + clhs55*clhs74;
        lhs(0,3)=-clhs0*clhs85 - clhs22*clhs91 + clhs49*clhs80 + clhs55*clhs86;
        lhs(0,4)=-clhs0*clhs97 - clhs103*clhs22 + clhs49*clhs92 + clhs55*clhs98;
        lhs(0,5)=-clhs0*clhs109 + clhs104*clhs49 + clhs110*clhs55 - clhs115*clhs22;
        lhs(0,6)=-clhs0*clhs121 + clhs116*clhs49 + clhs122*clhs55 - clhs127*clhs22;
        lhs(0,7)=-clhs0*clhs133 + clhs128*clhs49 + clhs134*clhs55 - clhs139*clhs22;
        lhs(0,8)=-clhs0*clhs145 + clhs140*clhs49 + clhs146*clhs55 - clhs151*clhs22;
        lhs(0,9)=-clhs0*clhs157 + clhs152*clhs49 + clhs158*clhs55 - clhs163*clhs22;
        lhs(0,10)=-clhs0*clhs169 + clhs164*clhs49 + clhs170*clhs55 - clhs175*clhs22;
        lhs(0,11)=-clhs0*clhs181 + clhs176*clhs49 + clhs182*clhs55 - clhs187*clhs22;
        lhs(0,12)=clhs0*clhs198 + clhs188*clhs49 + clhs189*clhs55 + clhs207*clhs22;
        lhs(0,13)=clhs0*clhs218 + clhs208*clhs49 + clhs209*clhs55 + clhs22*clhs227;
        lhs(0,14)=clhs0*clhs238 + clhs22*clhs247 + clhs228*clhs49 + clhs229*clhs55;
        lhs(0,15)=clhs0*clhs258 + clhs22*clhs267 + clhs248*clhs49 + clhs249*clhs55;
        lhs(0,16)=clhs0*clhs278 + clhs22*clhs287 + clhs268*clhs49 + clhs269*clhs55;
        lhs(0,17)=clhs0*clhs298 + clhs22*clhs307 + clhs288*clhs49 + clhs289*clhs55;
        lhs(0,18)=clhs0*clhs318 + clhs22*clhs327 + clhs308*clhs49 + clhs309*clhs55;
        lhs(0,19)=clhs0*clhs338 + clhs22*clhs347 + clhs328*clhs49 + clhs329*clhs55;
        lhs(0,20)=clhs0*clhs358 + clhs22*clhs367 + clhs348*clhs49 + clhs349*clhs55;
        lhs(0,21)=clhs0*clhs378 + clhs22*clhs387 + clhs368*clhs49 + clhs369*clhs55;
        lhs(0,22)=clhs0*clhs398 + clhs22*clhs407 + clhs388*clhs49 + clhs389*clhs55;
        lhs(0,23)=clhs0*clhs418 + clhs22*clhs427 + clhs408*clhs49 + clhs409*clhs55;
        lhs(0,24)=clhs0*clhs428;
        lhs(0,25)=0;
        lhs(0,26)=0;
        lhs(0,27)=clhs22*clhs429;
        lhs(1,0)=-clhs0*clhs430 + clhs2*clhs432 - clhs22*clhs431 + clhs23*clhs433;
        lhs(1,1)=-clhs0*clhs434 - clhs22*clhs435 + clhs432*clhs56 + clhs433*clhs62;
        lhs(1,2)=-clhs0*clhs436 - clhs22*clhs437 + clhs432*clhs68 + clhs433*clhs74;
        lhs(1,3)=-clhs0*clhs438 - clhs22*clhs439 + clhs432*clhs80 + clhs433*clhs86;
        lhs(1,4)=-clhs0*clhs440 - clhs22*clhs441 + clhs432*clhs92 + clhs433*clhs98;
        lhs(1,5)=-clhs0*clhs442 + clhs104*clhs432 + clhs110*clhs433 - clhs22*clhs443;
        lhs(1,6)=-clhs0*clhs444 + clhs116*clhs432 + clhs122*clhs433 - clhs22*clhs445;
        lhs(1,7)=-clhs0*clhs446 + clhs128*clhs432 + clhs134*clhs433 - clhs22*clhs447;
        lhs(1,8)=-clhs0*clhs448 + clhs140*clhs432 + clhs146*clhs433 - clhs22*clhs449;
        lhs(1,9)=-clhs0*clhs450 + clhs152*clhs432 + clhs158*clhs433 - clhs22*clhs451;
        lhs(1,10)=-clhs0*clhs452 + clhs164*clhs432 + clhs170*clhs433 - clhs22*clhs453;
        lhs(1,11)=-clhs0*clhs454 + clhs176*clhs432 + clhs182*clhs433 - clhs22*clhs455;
        lhs(1,12)=clhs0*clhs456 + clhs188*clhs432 + clhs189*clhs433 + clhs22*clhs457;
        lhs(1,13)=clhs0*clhs458 + clhs208*clhs432 + clhs209*clhs433 + clhs22*clhs459;
        lhs(1,14)=clhs0*clhs460 + clhs22*clhs461 + clhs228*clhs432 + clhs229*clhs433;
        lhs(1,15)=clhs0*clhs462 + clhs22*clhs463 + clhs248*clhs432 + clhs249*clhs433;
        lhs(1,16)=clhs0*clhs464 + clhs22*clhs465 + clhs268*clhs432 + clhs269*clhs433;
        lhs(1,17)=clhs0*clhs466 + clhs22*clhs467 + clhs288*clhs432 + clhs289*clhs433;
        lhs(1,18)=clhs0*clhs468 + clhs22*clhs469 + clhs308*clhs432 + clhs309*clhs433;
        lhs(1,19)=clhs0*clhs470 + clhs22*clhs471 + clhs328*clhs432 + clhs329*clhs433;
        lhs(1,20)=clhs0*clhs472 + clhs22*clhs473 + clhs348*clhs432 + clhs349*clhs433;
        lhs(1,21)=clhs0*clhs474 + clhs22*clhs475 + clhs368*clhs432 + clhs369*clhs433;
        lhs(1,22)=clhs0*clhs476 + clhs22*clhs477 + clhs388*clhs432 + clhs389*clhs433;
        lhs(1,23)=clhs0*clhs478 + clhs22*clhs479 + clhs408*clhs432 + clhs409*clhs433;
        lhs(1,24)=clhs0*clhs480;
        lhs(1,25)=0;
        lhs(1,26)=0;
        lhs(1,27)=clhs22*clhs481;
        lhs(2,0)=-clhs0*clhs482 + clhs2*clhs484 - clhs22*clhs483 + clhs23*clhs485;
        lhs(2,1)=-clhs0*clhs486 - clhs22*clhs487 + clhs484*clhs56 + clhs485*clhs62;
        lhs(2,2)=-clhs0*clhs488 - clhs22*clhs489 + clhs484*clhs68 + clhs485*clhs74;
        lhs(2,3)=-clhs0*clhs490 - clhs22*clhs491 + clhs484*clhs80 + clhs485*clhs86;
        lhs(2,4)=-clhs0*clhs492 - clhs22*clhs493 + clhs484*clhs92 + clhs485*clhs98;
        lhs(2,5)=-clhs0*clhs494 + clhs104*clhs484 + clhs110*clhs485 - clhs22*clhs495;
        lhs(2,6)=-clhs0*clhs496 + clhs116*clhs484 + clhs122*clhs485 - clhs22*clhs497;
        lhs(2,7)=-clhs0*clhs498 + clhs128*clhs484 + clhs134*clhs485 - clhs22*clhs499;
        lhs(2,8)=-clhs0*clhs500 + clhs140*clhs484 + clhs146*clhs485 - clhs22*clhs501;
        lhs(2,9)=-clhs0*clhs502 + clhs152*clhs484 + clhs158*clhs485 - clhs22*clhs503;
        lhs(2,10)=-clhs0*clhs504 + clhs164*clhs484 + clhs170*clhs485 - clhs22*clhs505;
        lhs(2,11)=-clhs0*clhs506 + clhs176*clhs484 + clhs182*clhs485 - clhs22*clhs507;
        lhs(2,12)=clhs0*clhs508 + clhs188*clhs484 + clhs189*clhs485 + clhs22*clhs509;
        lhs(2,13)=clhs0*clhs510 + clhs208*clhs484 + clhs209*clhs485 + clhs22*clhs511;
        lhs(2,14)=clhs0*clhs512 + clhs22*clhs513 + clhs228*clhs484 + clhs229*clhs485;
        lhs(2,15)=clhs0*clhs514 + clhs22*clhs515 + clhs248*clhs484 + clhs249*clhs485;
        lhs(2,16)=clhs0*clhs516 + clhs22*clhs517 + clhs268*clhs484 + clhs269*clhs485;
        lhs(2,17)=clhs0*clhs518 + clhs22*clhs519 + clhs288*clhs484 + clhs289*clhs485;
        lhs(2,18)=clhs0*clhs520 + clhs22*clhs521 + clhs308*clhs484 + clhs309*clhs485;
        lhs(2,19)=clhs0*clhs522 + clhs22*clhs523 + clhs328*clhs484 + clhs329*clhs485;
        lhs(2,20)=clhs0*clhs524 + clhs22*clhs525 + clhs348*clhs484 + clhs349*clhs485;
        lhs(2,21)=clhs0*clhs526 + clhs22*clhs527 + clhs368*clhs484 + clhs369*clhs485;
        lhs(2,22)=clhs0*clhs528 + clhs22*clhs529 + clhs388*clhs484 + clhs389*clhs485;
        lhs(2,23)=clhs0*clhs530 + clhs22*clhs531 + clhs408*clhs484 + clhs409*clhs485;
        lhs(2,24)=clhs0*clhs532;
        lhs(2,25)=0;
        lhs(2,26)=0;
        lhs(2,27)=clhs22*clhs533;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs55 + clhs49*clhs5;
        lhs(3,1)=-clhs24*clhs67 - clhs4*clhs61 + clhs49*clhs57 + clhs55*clhs63;
        lhs(3,2)=-clhs24*clhs79 - clhs4*clhs73 + clhs49*clhs69 + clhs55*clhs75;
        lhs(3,3)=-clhs24*clhs91 - clhs4*clhs85 + clhs49*clhs81 + clhs55*clhs87;
        lhs(3,4)=-clhs103*clhs24 - clhs4*clhs97 + clhs49*clhs93 + clhs55*clhs99;
        lhs(3,5)=clhs105*clhs49 - clhs109*clhs4 + clhs111*clhs55 - clhs115*clhs24;
        lhs(3,6)=clhs117*clhs49 - clhs121*clhs4 + clhs123*clhs55 - clhs127*clhs24;
        lhs(3,7)=clhs129*clhs49 - clhs133*clhs4 + clhs135*clhs55 - clhs139*clhs24;
        lhs(3,8)=clhs141*clhs49 - clhs145*clhs4 + clhs147*clhs55 - clhs151*clhs24;
        lhs(3,9)=clhs153*clhs49 - clhs157*clhs4 + clhs159*clhs55 - clhs163*clhs24;
        lhs(3,10)=clhs165*clhs49 - clhs169*clhs4 + clhs171*clhs55 - clhs175*clhs24;
        lhs(3,11)=clhs177*clhs49 - clhs181*clhs4 + clhs183*clhs55 - clhs187*clhs24;
        lhs(3,12)=clhs194*clhs49 + clhs198*clhs4 + clhs203*clhs55 + clhs207*clhs24;
        lhs(3,13)=clhs214*clhs49 + clhs218*clhs4 + clhs223*clhs55 + clhs227*clhs24;
        lhs(3,14)=clhs234*clhs49 + clhs238*clhs4 + clhs24*clhs247 + clhs243*clhs55;
        lhs(3,15)=clhs24*clhs267 + clhs254*clhs49 + clhs258*clhs4 + clhs263*clhs55;
        lhs(3,16)=clhs24*clhs287 + clhs274*clhs49 + clhs278*clhs4 + clhs283*clhs55;
        lhs(3,17)=clhs24*clhs307 + clhs294*clhs49 + clhs298*clhs4 + clhs303*clhs55;
        lhs(3,18)=clhs24*clhs327 + clhs314*clhs49 + clhs318*clhs4 + clhs323*clhs55;
        lhs(3,19)=clhs24*clhs347 + clhs334*clhs49 + clhs338*clhs4 + clhs343*clhs55;
        lhs(3,20)=clhs24*clhs367 + clhs354*clhs49 + clhs358*clhs4 + clhs363*clhs55;
        lhs(3,21)=clhs24*clhs387 + clhs374*clhs49 + clhs378*clhs4 + clhs383*clhs55;
        lhs(3,22)=clhs24*clhs407 + clhs394*clhs49 + clhs398*clhs4 + clhs403*clhs55;
        lhs(3,23)=clhs24*clhs427 + clhs4*clhs418 + clhs414*clhs49 + clhs423*clhs55;
        lhs(3,24)=clhs4*clhs428;
        lhs(3,25)=0;
        lhs(3,26)=0;
        lhs(3,27)=clhs24*clhs429;
        lhs(4,0)=-clhs24*clhs431 + clhs25*clhs433 - clhs4*clhs430 + clhs432*clhs5;
        lhs(4,1)=-clhs24*clhs435 - clhs4*clhs434 + clhs432*clhs57 + clhs433*clhs63;
        lhs(4,2)=-clhs24*clhs437 - clhs4*clhs436 + clhs432*clhs69 + clhs433*clhs75;
        lhs(4,3)=-clhs24*clhs439 - clhs4*clhs438 + clhs432*clhs81 + clhs433*clhs87;
        lhs(4,4)=-clhs24*clhs441 - clhs4*clhs440 + clhs432*clhs93 + clhs433*clhs99;
        lhs(4,5)=clhs105*clhs432 + clhs111*clhs433 - clhs24*clhs443 - clhs4*clhs442;
        lhs(4,6)=clhs117*clhs432 + clhs123*clhs433 - clhs24*clhs445 - clhs4*clhs444;
        lhs(4,7)=clhs129*clhs432 + clhs135*clhs433 - clhs24*clhs447 - clhs4*clhs446;
        lhs(4,8)=clhs141*clhs432 + clhs147*clhs433 - clhs24*clhs449 - clhs4*clhs448;
        lhs(4,9)=clhs153*clhs432 + clhs159*clhs433 - clhs24*clhs451 - clhs4*clhs450;
        lhs(4,10)=clhs165*clhs432 + clhs171*clhs433 - clhs24*clhs453 - clhs4*clhs452;
        lhs(4,11)=clhs177*clhs432 + clhs183*clhs433 - clhs24*clhs455 - clhs4*clhs454;
        lhs(4,12)=clhs194*clhs432 + clhs203*clhs433 + clhs24*clhs457 + clhs4*clhs456;
        lhs(4,13)=clhs214*clhs432 + clhs223*clhs433 + clhs24*clhs459 + clhs4*clhs458;
        lhs(4,14)=clhs234*clhs432 + clhs24*clhs461 + clhs243*clhs433 + clhs4*clhs460;
        lhs(4,15)=clhs24*clhs463 + clhs254*clhs432 + clhs263*clhs433 + clhs4*clhs462;
        lhs(4,16)=clhs24*clhs465 + clhs274*clhs432 + clhs283*clhs433 + clhs4*clhs464;
        lhs(4,17)=clhs24*clhs467 + clhs294*clhs432 + clhs303*clhs433 + clhs4*clhs466;
        lhs(4,18)=clhs24*clhs469 + clhs314*clhs432 + clhs323*clhs433 + clhs4*clhs468;
        lhs(4,19)=clhs24*clhs471 + clhs334*clhs432 + clhs343*clhs433 + clhs4*clhs470;
        lhs(4,20)=clhs24*clhs473 + clhs354*clhs432 + clhs363*clhs433 + clhs4*clhs472;
        lhs(4,21)=clhs24*clhs475 + clhs374*clhs432 + clhs383*clhs433 + clhs4*clhs474;
        lhs(4,22)=clhs24*clhs477 + clhs394*clhs432 + clhs4*clhs476 + clhs403*clhs433;
        lhs(4,23)=clhs24*clhs479 + clhs4*clhs478 + clhs414*clhs432 + clhs423*clhs433;
        lhs(4,24)=clhs4*clhs480;
        lhs(4,25)=0;
        lhs(4,26)=0;
        lhs(4,27)=clhs24*clhs481;
        lhs(5,0)=-clhs24*clhs483 + clhs25*clhs485 - clhs4*clhs482 + clhs484*clhs5;
        lhs(5,1)=-clhs24*clhs487 - clhs4*clhs486 + clhs484*clhs57 + clhs485*clhs63;
        lhs(5,2)=-clhs24*clhs489 - clhs4*clhs488 + clhs484*clhs69 + clhs485*clhs75;
        lhs(5,3)=-clhs24*clhs491 - clhs4*clhs490 + clhs484*clhs81 + clhs485*clhs87;
        lhs(5,4)=-clhs24*clhs493 - clhs4*clhs492 + clhs484*clhs93 + clhs485*clhs99;
        lhs(5,5)=clhs105*clhs484 + clhs111*clhs485 - clhs24*clhs495 - clhs4*clhs494;
        lhs(5,6)=clhs117*clhs484 + clhs123*clhs485 - clhs24*clhs497 - clhs4*clhs496;
        lhs(5,7)=clhs129*clhs484 + clhs135*clhs485 - clhs24*clhs499 - clhs4*clhs498;
        lhs(5,8)=clhs141*clhs484 + clhs147*clhs485 - clhs24*clhs501 - clhs4*clhs500;
        lhs(5,9)=clhs153*clhs484 + clhs159*clhs485 - clhs24*clhs503 - clhs4*clhs502;
        lhs(5,10)=clhs165*clhs484 + clhs171*clhs485 - clhs24*clhs505 - clhs4*clhs504;
        lhs(5,11)=clhs177*clhs484 + clhs183*clhs485 - clhs24*clhs507 - clhs4*clhs506;
        lhs(5,12)=clhs194*clhs484 + clhs203*clhs485 + clhs24*clhs509 + clhs4*clhs508;
        lhs(5,13)=clhs214*clhs484 + clhs223*clhs485 + clhs24*clhs511 + clhs4*clhs510;
        lhs(5,14)=clhs234*clhs484 + clhs24*clhs513 + clhs243*clhs485 + clhs4*clhs512;
        lhs(5,15)=clhs24*clhs515 + clhs254*clhs484 + clhs263*clhs485 + clhs4*clhs514;
        lhs(5,16)=clhs24*clhs517 + clhs274*clhs484 + clhs283*clhs485 + clhs4*clhs516;
        lhs(5,17)=clhs24*clhs519 + clhs294*clhs484 + clhs303*clhs485 + clhs4*clhs518;
        lhs(5,18)=clhs24*clhs521 + clhs314*clhs484 + clhs323*clhs485 + clhs4*clhs520;
        lhs(5,19)=clhs24*clhs523 + clhs334*clhs484 + clhs343*clhs485 + clhs4*clhs522;
        lhs(5,20)=clhs24*clhs525 + clhs354*clhs484 + clhs363*clhs485 + clhs4*clhs524;
        lhs(5,21)=clhs24*clhs527 + clhs374*clhs484 + clhs383*clhs485 + clhs4*clhs526;
        lhs(5,22)=clhs24*clhs529 + clhs394*clhs484 + clhs4*clhs528 + clhs403*clhs485;
        lhs(5,23)=clhs24*clhs531 + clhs4*clhs530 + clhs414*clhs484 + clhs423*clhs485;
        lhs(5,24)=clhs4*clhs532;
        lhs(5,25)=0;
        lhs(5,26)=0;
        lhs(5,27)=clhs24*clhs533;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs55 + clhs49*clhs8;
        lhs(6,1)=-clhs26*clhs67 + clhs49*clhs58 + clhs55*clhs64 - clhs61*clhs7;
        lhs(6,2)=-clhs26*clhs79 + clhs49*clhs70 + clhs55*clhs76 - clhs7*clhs73;
        lhs(6,3)=-clhs26*clhs91 + clhs49*clhs82 + clhs55*clhs88 - clhs7*clhs85;
        lhs(6,4)=clhs100*clhs55 - clhs103*clhs26 + clhs49*clhs94 - clhs7*clhs97;
        lhs(6,5)=clhs106*clhs49 - clhs109*clhs7 + clhs112*clhs55 - clhs115*clhs26;
        lhs(6,6)=clhs118*clhs49 - clhs121*clhs7 + clhs124*clhs55 - clhs127*clhs26;
        lhs(6,7)=clhs130*clhs49 - clhs133*clhs7 + clhs136*clhs55 - clhs139*clhs26;
        lhs(6,8)=clhs142*clhs49 - clhs145*clhs7 + clhs148*clhs55 - clhs151*clhs26;
        lhs(6,9)=clhs154*clhs49 - clhs157*clhs7 + clhs160*clhs55 - clhs163*clhs26;
        lhs(6,10)=clhs166*clhs49 - clhs169*clhs7 + clhs172*clhs55 - clhs175*clhs26;
        lhs(6,11)=clhs178*clhs49 - clhs181*clhs7 + clhs184*clhs55 - clhs187*clhs26;
        lhs(6,12)=clhs195*clhs49 + clhs198*clhs7 + clhs204*clhs55 + clhs207*clhs26;
        lhs(6,13)=clhs215*clhs49 + clhs218*clhs7 + clhs224*clhs55 + clhs227*clhs26;
        lhs(6,14)=clhs235*clhs49 + clhs238*clhs7 + clhs244*clhs55 + clhs247*clhs26;
        lhs(6,15)=clhs255*clhs49 + clhs258*clhs7 + clhs26*clhs267 + clhs264*clhs55;
        lhs(6,16)=clhs26*clhs287 + clhs275*clhs49 + clhs278*clhs7 + clhs284*clhs55;
        lhs(6,17)=clhs26*clhs307 + clhs295*clhs49 + clhs298*clhs7 + clhs304*clhs55;
        lhs(6,18)=clhs26*clhs327 + clhs315*clhs49 + clhs318*clhs7 + clhs324*clhs55;
        lhs(6,19)=clhs26*clhs347 + clhs335*clhs49 + clhs338*clhs7 + clhs344*clhs55;
        lhs(6,20)=clhs26*clhs367 + clhs355*clhs49 + clhs358*clhs7 + clhs364*clhs55;
        lhs(6,21)=clhs26*clhs387 + clhs375*clhs49 + clhs378*clhs7 + clhs384*clhs55;
        lhs(6,22)=clhs26*clhs407 + clhs395*clhs49 + clhs398*clhs7 + clhs404*clhs55;
        lhs(6,23)=clhs26*clhs427 + clhs415*clhs49 + clhs418*clhs7 + clhs424*clhs55;
        lhs(6,24)=clhs428*clhs7;
        lhs(6,25)=0;
        lhs(6,26)=0;
        lhs(6,27)=clhs26*clhs429;
        lhs(7,0)=-clhs26*clhs431 + clhs27*clhs433 - clhs430*clhs7 + clhs432*clhs8;
        lhs(7,1)=-clhs26*clhs435 + clhs432*clhs58 + clhs433*clhs64 - clhs434*clhs7;
        lhs(7,2)=-clhs26*clhs437 + clhs432*clhs70 + clhs433*clhs76 - clhs436*clhs7;
        lhs(7,3)=-clhs26*clhs439 + clhs432*clhs82 + clhs433*clhs88 - clhs438*clhs7;
        lhs(7,4)=clhs100*clhs433 - clhs26*clhs441 + clhs432*clhs94 - clhs440*clhs7;
        lhs(7,5)=clhs106*clhs432 + clhs112*clhs433 - clhs26*clhs443 - clhs442*clhs7;
        lhs(7,6)=clhs118*clhs432 + clhs124*clhs433 - clhs26*clhs445 - clhs444*clhs7;
        lhs(7,7)=clhs130*clhs432 + clhs136*clhs433 - clhs26*clhs447 - clhs446*clhs7;
        lhs(7,8)=clhs142*clhs432 + clhs148*clhs433 - clhs26*clhs449 - clhs448*clhs7;
        lhs(7,9)=clhs154*clhs432 + clhs160*clhs433 - clhs26*clhs451 - clhs450*clhs7;
        lhs(7,10)=clhs166*clhs432 + clhs172*clhs433 - clhs26*clhs453 - clhs452*clhs7;
        lhs(7,11)=clhs178*clhs432 + clhs184*clhs433 - clhs26*clhs455 - clhs454*clhs7;
        lhs(7,12)=clhs195*clhs432 + clhs204*clhs433 + clhs26*clhs457 + clhs456*clhs7;
        lhs(7,13)=clhs215*clhs432 + clhs224*clhs433 + clhs26*clhs459 + clhs458*clhs7;
        lhs(7,14)=clhs235*clhs432 + clhs244*clhs433 + clhs26*clhs461 + clhs460*clhs7;
        lhs(7,15)=clhs255*clhs432 + clhs26*clhs463 + clhs264*clhs433 + clhs462*clhs7;
        lhs(7,16)=clhs26*clhs465 + clhs275*clhs432 + clhs284*clhs433 + clhs464*clhs7;
        lhs(7,17)=clhs26*clhs467 + clhs295*clhs432 + clhs304*clhs433 + clhs466*clhs7;
        lhs(7,18)=clhs26*clhs469 + clhs315*clhs432 + clhs324*clhs433 + clhs468*clhs7;
        lhs(7,19)=clhs26*clhs471 + clhs335*clhs432 + clhs344*clhs433 + clhs470*clhs7;
        lhs(7,20)=clhs26*clhs473 + clhs355*clhs432 + clhs364*clhs433 + clhs472*clhs7;
        lhs(7,21)=clhs26*clhs475 + clhs375*clhs432 + clhs384*clhs433 + clhs474*clhs7;
        lhs(7,22)=clhs26*clhs477 + clhs395*clhs432 + clhs404*clhs433 + clhs476*clhs7;
        lhs(7,23)=clhs26*clhs479 + clhs415*clhs432 + clhs424*clhs433 + clhs478*clhs7;
        lhs(7,24)=clhs480*clhs7;
        lhs(7,25)=0;
        lhs(7,26)=0;
        lhs(7,27)=clhs26*clhs481;
        lhs(8,0)=-clhs26*clhs483 + clhs27*clhs485 - clhs482*clhs7 + clhs484*clhs8;
        lhs(8,1)=-clhs26*clhs487 + clhs484*clhs58 + clhs485*clhs64 - clhs486*clhs7;
        lhs(8,2)=-clhs26*clhs489 + clhs484*clhs70 + clhs485*clhs76 - clhs488*clhs7;
        lhs(8,3)=-clhs26*clhs491 + clhs484*clhs82 + clhs485*clhs88 - clhs490*clhs7;
        lhs(8,4)=clhs100*clhs485 - clhs26*clhs493 + clhs484*clhs94 - clhs492*clhs7;
        lhs(8,5)=clhs106*clhs484 + clhs112*clhs485 - clhs26*clhs495 - clhs494*clhs7;
        lhs(8,6)=clhs118*clhs484 + clhs124*clhs485 - clhs26*clhs497 - clhs496*clhs7;
        lhs(8,7)=clhs130*clhs484 + clhs136*clhs485 - clhs26*clhs499 - clhs498*clhs7;
        lhs(8,8)=clhs142*clhs484 + clhs148*clhs485 - clhs26*clhs501 - clhs500*clhs7;
        lhs(8,9)=clhs154*clhs484 + clhs160*clhs485 - clhs26*clhs503 - clhs502*clhs7;
        lhs(8,10)=clhs166*clhs484 + clhs172*clhs485 - clhs26*clhs505 - clhs504*clhs7;
        lhs(8,11)=clhs178*clhs484 + clhs184*clhs485 - clhs26*clhs507 - clhs506*clhs7;
        lhs(8,12)=clhs195*clhs484 + clhs204*clhs485 + clhs26*clhs509 + clhs508*clhs7;
        lhs(8,13)=clhs215*clhs484 + clhs224*clhs485 + clhs26*clhs511 + clhs510*clhs7;
        lhs(8,14)=clhs235*clhs484 + clhs244*clhs485 + clhs26*clhs513 + clhs512*clhs7;
        lhs(8,15)=clhs255*clhs484 + clhs26*clhs515 + clhs264*clhs485 + clhs514*clhs7;
        lhs(8,16)=clhs26*clhs517 + clhs275*clhs484 + clhs284*clhs485 + clhs516*clhs7;
        lhs(8,17)=clhs26*clhs519 + clhs295*clhs484 + clhs304*clhs485 + clhs518*clhs7;
        lhs(8,18)=clhs26*clhs521 + clhs315*clhs484 + clhs324*clhs485 + clhs520*clhs7;
        lhs(8,19)=clhs26*clhs523 + clhs335*clhs484 + clhs344*clhs485 + clhs522*clhs7;
        lhs(8,20)=clhs26*clhs525 + clhs355*clhs484 + clhs364*clhs485 + clhs524*clhs7;
        lhs(8,21)=clhs26*clhs527 + clhs375*clhs484 + clhs384*clhs485 + clhs526*clhs7;
        lhs(8,22)=clhs26*clhs529 + clhs395*clhs484 + clhs404*clhs485 + clhs528*clhs7;
        lhs(8,23)=clhs26*clhs531 + clhs415*clhs484 + clhs424*clhs485 + clhs530*clhs7;
        lhs(8,24)=clhs532*clhs7;
        lhs(8,25)=0;
        lhs(8,26)=0;
        lhs(8,27)=clhs26*clhs533;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs49 - clhs28*clhs31 + clhs29*clhs55;
        lhs(9,1)=-clhs10*clhs61 - clhs28*clhs67 + clhs49*clhs59 + clhs55*clhs65;
        lhs(9,2)=-clhs10*clhs73 - clhs28*clhs79 + clhs49*clhs71 + clhs55*clhs77;
        lhs(9,3)=-clhs10*clhs85 - clhs28*clhs91 + clhs49*clhs83 + clhs55*clhs89;
        lhs(9,4)=-clhs10*clhs97 + clhs101*clhs55 - clhs103*clhs28 + clhs49*clhs95;
        lhs(9,5)=-clhs10*clhs109 + clhs107*clhs49 + clhs113*clhs55 - clhs115*clhs28;
        lhs(9,6)=-clhs10*clhs121 + clhs119*clhs49 + clhs125*clhs55 - clhs127*clhs28;
        lhs(9,7)=-clhs10*clhs133 + clhs131*clhs49 + clhs137*clhs55 - clhs139*clhs28;
        lhs(9,8)=-clhs10*clhs145 + clhs143*clhs49 + clhs149*clhs55 - clhs151*clhs28;
        lhs(9,9)=-clhs10*clhs157 + clhs155*clhs49 + clhs161*clhs55 - clhs163*clhs28;
        lhs(9,10)=-clhs10*clhs169 + clhs167*clhs49 + clhs173*clhs55 - clhs175*clhs28;
        lhs(9,11)=-clhs10*clhs181 + clhs179*clhs49 + clhs185*clhs55 - clhs187*clhs28;
        lhs(9,12)=clhs10*clhs198 + clhs196*clhs49 + clhs205*clhs55 + clhs207*clhs28;
        lhs(9,13)=clhs10*clhs218 + clhs216*clhs49 + clhs225*clhs55 + clhs227*clhs28;
        lhs(9,14)=clhs10*clhs238 + clhs236*clhs49 + clhs245*clhs55 + clhs247*clhs28;
        lhs(9,15)=clhs10*clhs258 + clhs256*clhs49 + clhs265*clhs55 + clhs267*clhs28;
        lhs(9,16)=clhs10*clhs278 + clhs276*clhs49 + clhs28*clhs287 + clhs285*clhs55;
        lhs(9,17)=clhs10*clhs298 + clhs28*clhs307 + clhs296*clhs49 + clhs305*clhs55;
        lhs(9,18)=clhs10*clhs318 + clhs28*clhs327 + clhs316*clhs49 + clhs325*clhs55;
        lhs(9,19)=clhs10*clhs338 + clhs28*clhs347 + clhs336*clhs49 + clhs345*clhs55;
        lhs(9,20)=clhs10*clhs358 + clhs28*clhs367 + clhs356*clhs49 + clhs365*clhs55;
        lhs(9,21)=clhs10*clhs378 + clhs28*clhs387 + clhs376*clhs49 + clhs385*clhs55;
        lhs(9,22)=clhs10*clhs398 + clhs28*clhs407 + clhs396*clhs49 + clhs405*clhs55;
        lhs(9,23)=clhs10*clhs418 + clhs28*clhs427 + clhs416*clhs49 + clhs425*clhs55;
        lhs(9,24)=clhs10*clhs428;
        lhs(9,25)=0;
        lhs(9,26)=0;
        lhs(9,27)=clhs28*clhs429;
        lhs(10,0)=-clhs10*clhs430 + clhs11*clhs432 - clhs28*clhs431 + clhs29*clhs433;
        lhs(10,1)=-clhs10*clhs434 - clhs28*clhs435 + clhs432*clhs59 + clhs433*clhs65;
        lhs(10,2)=-clhs10*clhs436 - clhs28*clhs437 + clhs432*clhs71 + clhs433*clhs77;
        lhs(10,3)=-clhs10*clhs438 - clhs28*clhs439 + clhs432*clhs83 + clhs433*clhs89;
        lhs(10,4)=-clhs10*clhs440 + clhs101*clhs433 - clhs28*clhs441 + clhs432*clhs95;
        lhs(10,5)=-clhs10*clhs442 + clhs107*clhs432 + clhs113*clhs433 - clhs28*clhs443;
        lhs(10,6)=-clhs10*clhs444 + clhs119*clhs432 + clhs125*clhs433 - clhs28*clhs445;
        lhs(10,7)=-clhs10*clhs446 + clhs131*clhs432 + clhs137*clhs433 - clhs28*clhs447;
        lhs(10,8)=-clhs10*clhs448 + clhs143*clhs432 + clhs149*clhs433 - clhs28*clhs449;
        lhs(10,9)=-clhs10*clhs450 + clhs155*clhs432 + clhs161*clhs433 - clhs28*clhs451;
        lhs(10,10)=-clhs10*clhs452 + clhs167*clhs432 + clhs173*clhs433 - clhs28*clhs453;
        lhs(10,11)=-clhs10*clhs454 + clhs179*clhs432 + clhs185*clhs433 - clhs28*clhs455;
        lhs(10,12)=clhs10*clhs456 + clhs196*clhs432 + clhs205*clhs433 + clhs28*clhs457;
        lhs(10,13)=clhs10*clhs458 + clhs216*clhs432 + clhs225*clhs433 + clhs28*clhs459;
        lhs(10,14)=clhs10*clhs460 + clhs236*clhs432 + clhs245*clhs433 + clhs28*clhs461;
        lhs(10,15)=clhs10*clhs462 + clhs256*clhs432 + clhs265*clhs433 + clhs28*clhs463;
        lhs(10,16)=clhs10*clhs464 + clhs276*clhs432 + clhs28*clhs465 + clhs285*clhs433;
        lhs(10,17)=clhs10*clhs466 + clhs28*clhs467 + clhs296*clhs432 + clhs305*clhs433;
        lhs(10,18)=clhs10*clhs468 + clhs28*clhs469 + clhs316*clhs432 + clhs325*clhs433;
        lhs(10,19)=clhs10*clhs470 + clhs28*clhs471 + clhs336*clhs432 + clhs345*clhs433;
        lhs(10,20)=clhs10*clhs472 + clhs28*clhs473 + clhs356*clhs432 + clhs365*clhs433;
        lhs(10,21)=clhs10*clhs474 + clhs28*clhs475 + clhs376*clhs432 + clhs385*clhs433;
        lhs(10,22)=clhs10*clhs476 + clhs28*clhs477 + clhs396*clhs432 + clhs405*clhs433;
        lhs(10,23)=clhs10*clhs478 + clhs28*clhs479 + clhs416*clhs432 + clhs425*clhs433;
        lhs(10,24)=clhs10*clhs480;
        lhs(10,25)=0;
        lhs(10,26)=0;
        lhs(10,27)=clhs28*clhs481;
        lhs(11,0)=-clhs10*clhs482 + clhs11*clhs484 - clhs28*clhs483 + clhs29*clhs485;
        lhs(11,1)=-clhs10*clhs486 - clhs28*clhs487 + clhs484*clhs59 + clhs485*clhs65;
        lhs(11,2)=-clhs10*clhs488 - clhs28*clhs489 + clhs484*clhs71 + clhs485*clhs77;
        lhs(11,3)=-clhs10*clhs490 - clhs28*clhs491 + clhs484*clhs83 + clhs485*clhs89;
        lhs(11,4)=-clhs10*clhs492 + clhs101*clhs485 - clhs28*clhs493 + clhs484*clhs95;
        lhs(11,5)=-clhs10*clhs494 + clhs107*clhs484 + clhs113*clhs485 - clhs28*clhs495;
        lhs(11,6)=-clhs10*clhs496 + clhs119*clhs484 + clhs125*clhs485 - clhs28*clhs497;
        lhs(11,7)=-clhs10*clhs498 + clhs131*clhs484 + clhs137*clhs485 - clhs28*clhs499;
        lhs(11,8)=-clhs10*clhs500 + clhs143*clhs484 + clhs149*clhs485 - clhs28*clhs501;
        lhs(11,9)=-clhs10*clhs502 + clhs155*clhs484 + clhs161*clhs485 - clhs28*clhs503;
        lhs(11,10)=-clhs10*clhs504 + clhs167*clhs484 + clhs173*clhs485 - clhs28*clhs505;
        lhs(11,11)=-clhs10*clhs506 + clhs179*clhs484 + clhs185*clhs485 - clhs28*clhs507;
        lhs(11,12)=clhs10*clhs508 + clhs196*clhs484 + clhs205*clhs485 + clhs28*clhs509;
        lhs(11,13)=clhs10*clhs510 + clhs216*clhs484 + clhs225*clhs485 + clhs28*clhs511;
        lhs(11,14)=clhs10*clhs512 + clhs236*clhs484 + clhs245*clhs485 + clhs28*clhs513;
        lhs(11,15)=clhs10*clhs514 + clhs256*clhs484 + clhs265*clhs485 + clhs28*clhs515;
        lhs(11,16)=clhs10*clhs516 + clhs276*clhs484 + clhs28*clhs517 + clhs285*clhs485;
        lhs(11,17)=clhs10*clhs518 + clhs28*clhs519 + clhs296*clhs484 + clhs305*clhs485;
        lhs(11,18)=clhs10*clhs520 + clhs28*clhs521 + clhs316*clhs484 + clhs325*clhs485;
        lhs(11,19)=clhs10*clhs522 + clhs28*clhs523 + clhs336*clhs484 + clhs345*clhs485;
        lhs(11,20)=clhs10*clhs524 + clhs28*clhs525 + clhs356*clhs484 + clhs365*clhs485;
        lhs(11,21)=clhs10*clhs526 + clhs28*clhs527 + clhs376*clhs484 + clhs385*clhs485;
        lhs(11,22)=clhs10*clhs528 + clhs28*clhs529 + clhs396*clhs484 + clhs405*clhs485;
        lhs(11,23)=clhs10*clhs530 + clhs28*clhs531 + clhs416*clhs484 + clhs425*clhs485;
        lhs(11,24)=clhs10*clhs532;
        lhs(11,25)=0;
        lhs(11,26)=0;
        lhs(11,27)=clhs28*clhs533;
        lhs(12,0)=penalty_parameter*(clhs33*clhs534 + clhs50*clhs535);
        lhs(12,1)=penalty_parameter*(clhs33*clhs536 + clhs50*clhs537);
        lhs(12,2)=penalty_parameter*(clhs33*clhs538 + clhs50*clhs539);
        lhs(12,3)=penalty_parameter*(clhs33*clhs540 + clhs50*clhs541);
        lhs(12,4)=penalty_parameter*(clhs33*clhs542 + clhs50*clhs543);
        lhs(12,5)=penalty_parameter*(clhs33*clhs544 + clhs50*clhs545);
        lhs(12,6)=penalty_parameter*(clhs33*clhs546 + clhs50*clhs547);
        lhs(12,7)=penalty_parameter*(clhs33*clhs548 + clhs50*clhs549);
        lhs(12,8)=penalty_parameter*(clhs33*clhs550 + clhs50*clhs551);
        lhs(12,9)=penalty_parameter*(clhs33*clhs552 + clhs50*clhs553);
        lhs(12,10)=penalty_parameter*(clhs33*clhs554 + clhs50*clhs555);
        lhs(12,11)=penalty_parameter*(clhs33*clhs556 + clhs50*clhs557);
        lhs(12,12)=-clhs190*clhs49 - clhs198*clhs33 - clhs199*clhs55 - clhs207*clhs50;
        lhs(12,13)=-clhs210*clhs49 - clhs218*clhs33 - clhs219*clhs55 - clhs227*clhs50;
        lhs(12,14)=-clhs230*clhs49 - clhs238*clhs33 - clhs239*clhs55 - clhs247*clhs50;
        lhs(12,15)=-clhs250*clhs49 - clhs258*clhs33 - clhs259*clhs55 - clhs267*clhs50;
        lhs(12,16)=-clhs270*clhs49 - clhs278*clhs33 - clhs279*clhs55 - clhs287*clhs50;
        lhs(12,17)=-clhs290*clhs49 - clhs298*clhs33 - clhs299*clhs55 - clhs307*clhs50;
        lhs(12,18)=-clhs310*clhs49 - clhs318*clhs33 - clhs319*clhs55 - clhs327*clhs50;
        lhs(12,19)=-clhs33*clhs338 - clhs330*clhs49 - clhs339*clhs55 - clhs347*clhs50;
        lhs(12,20)=-clhs33*clhs358 - clhs350*clhs49 - clhs359*clhs55 - clhs367*clhs50;
        lhs(12,21)=-clhs33*clhs378 - clhs370*clhs49 - clhs379*clhs55 - clhs387*clhs50;
        lhs(12,22)=-clhs33*clhs398 - clhs390*clhs49 - clhs399*clhs55 - clhs407*clhs50;
        lhs(12,23)=-clhs33*clhs418 - clhs410*clhs49 - clhs419*clhs55 - clhs427*clhs50;
        lhs(12,24)=-clhs33*clhs428;
        lhs(12,25)=0;
        lhs(12,26)=0;
        lhs(12,27)=-clhs429*clhs50;
        lhs(13,0)=penalty_parameter*(clhs33*clhs558 + clhs50*clhs559);
        lhs(13,1)=penalty_parameter*(clhs33*clhs560 + clhs50*clhs561);
        lhs(13,2)=penalty_parameter*(clhs33*clhs562 + clhs50*clhs563);
        lhs(13,3)=penalty_parameter*(clhs33*clhs564 + clhs50*clhs565);
        lhs(13,4)=penalty_parameter*(clhs33*clhs566 + clhs50*clhs567);
        lhs(13,5)=penalty_parameter*(clhs33*clhs568 + clhs50*clhs569);
        lhs(13,6)=penalty_parameter*(clhs33*clhs570 + clhs50*clhs571);
        lhs(13,7)=penalty_parameter*(clhs33*clhs572 + clhs50*clhs573);
        lhs(13,8)=penalty_parameter*(clhs33*clhs574 + clhs50*clhs575);
        lhs(13,9)=penalty_parameter*(clhs33*clhs576 + clhs50*clhs577);
        lhs(13,10)=penalty_parameter*(clhs33*clhs578 + clhs50*clhs579);
        lhs(13,11)=penalty_parameter*(clhs33*clhs580 + clhs50*clhs581);
        lhs(13,12)=-clhs190*clhs432 - clhs199*clhs433 - clhs33*clhs456 - clhs457*clhs50;
        lhs(13,13)=-clhs210*clhs432 - clhs219*clhs433 - clhs33*clhs458 - clhs459*clhs50;
        lhs(13,14)=-clhs230*clhs432 - clhs239*clhs433 - clhs33*clhs460 - clhs461*clhs50;
        lhs(13,15)=-clhs250*clhs432 - clhs259*clhs433 - clhs33*clhs462 - clhs463*clhs50;
        lhs(13,16)=-clhs270*clhs432 - clhs279*clhs433 - clhs33*clhs464 - clhs465*clhs50;
        lhs(13,17)=-clhs290*clhs432 - clhs299*clhs433 - clhs33*clhs466 - clhs467*clhs50;
        lhs(13,18)=-clhs310*clhs432 - clhs319*clhs433 - clhs33*clhs468 - clhs469*clhs50;
        lhs(13,19)=-clhs33*clhs470 - clhs330*clhs432 - clhs339*clhs433 - clhs471*clhs50;
        lhs(13,20)=-clhs33*clhs472 - clhs350*clhs432 - clhs359*clhs433 - clhs473*clhs50;
        lhs(13,21)=-clhs33*clhs474 - clhs370*clhs432 - clhs379*clhs433 - clhs475*clhs50;
        lhs(13,22)=-clhs33*clhs476 - clhs390*clhs432 - clhs399*clhs433 - clhs477*clhs50;
        lhs(13,23)=-clhs33*clhs478 - clhs410*clhs432 - clhs419*clhs433 - clhs479*clhs50;
        lhs(13,24)=-clhs33*clhs480;
        lhs(13,25)=0;
        lhs(13,26)=0;
        lhs(13,27)=-clhs481*clhs50;
        lhs(14,0)=penalty_parameter*(clhs33*clhs582 + clhs50*clhs583);
        lhs(14,1)=penalty_parameter*(clhs33*clhs584 + clhs50*clhs585);
        lhs(14,2)=penalty_parameter*(clhs33*clhs586 + clhs50*clhs587);
        lhs(14,3)=penalty_parameter*(clhs33*clhs588 + clhs50*clhs589);
        lhs(14,4)=penalty_parameter*(clhs33*clhs590 + clhs50*clhs591);
        lhs(14,5)=penalty_parameter*(clhs33*clhs592 + clhs50*clhs593);
        lhs(14,6)=penalty_parameter*(clhs33*clhs594 + clhs50*clhs595);
        lhs(14,7)=penalty_parameter*(clhs33*clhs596 + clhs50*clhs597);
        lhs(14,8)=penalty_parameter*(clhs33*clhs598 + clhs50*clhs599);
        lhs(14,9)=penalty_parameter*(clhs33*clhs600 + clhs50*clhs601);
        lhs(14,10)=penalty_parameter*(clhs33*clhs602 + clhs50*clhs603);
        lhs(14,11)=penalty_parameter*(clhs33*clhs604 + clhs50*clhs605);
        lhs(14,12)=-clhs190*clhs484 - clhs199*clhs485 - clhs33*clhs508 - clhs50*clhs509;
        lhs(14,13)=-clhs210*clhs484 - clhs219*clhs485 - clhs33*clhs510 - clhs50*clhs511;
        lhs(14,14)=-clhs230*clhs484 - clhs239*clhs485 - clhs33*clhs512 - clhs50*clhs513;
        lhs(14,15)=-clhs250*clhs484 - clhs259*clhs485 - clhs33*clhs514 - clhs50*clhs515;
        lhs(14,16)=-clhs270*clhs484 - clhs279*clhs485 - clhs33*clhs516 - clhs50*clhs517;
        lhs(14,17)=-clhs290*clhs484 - clhs299*clhs485 - clhs33*clhs518 - clhs50*clhs519;
        lhs(14,18)=-clhs310*clhs484 - clhs319*clhs485 - clhs33*clhs520 - clhs50*clhs521;
        lhs(14,19)=-clhs33*clhs522 - clhs330*clhs484 - clhs339*clhs485 - clhs50*clhs523;
        lhs(14,20)=-clhs33*clhs524 - clhs350*clhs484 - clhs359*clhs485 - clhs50*clhs525;
        lhs(14,21)=-clhs33*clhs526 - clhs370*clhs484 - clhs379*clhs485 - clhs50*clhs527;
        lhs(14,22)=-clhs33*clhs528 - clhs390*clhs484 - clhs399*clhs485 - clhs50*clhs529;
        lhs(14,23)=-clhs33*clhs530 - clhs410*clhs484 - clhs419*clhs485 - clhs50*clhs531;
        lhs(14,24)=-clhs33*clhs532;
        lhs(14,25)=0;
        lhs(14,26)=0;
        lhs(14,27)=-clhs50*clhs533;
        lhs(15,0)=penalty_parameter*(clhs35*clhs534 + clhs51*clhs535);
        lhs(15,1)=penalty_parameter*(clhs35*clhs536 + clhs51*clhs537);
        lhs(15,2)=penalty_parameter*(clhs35*clhs538 + clhs51*clhs539);
        lhs(15,3)=penalty_parameter*(clhs35*clhs540 + clhs51*clhs541);
        lhs(15,4)=penalty_parameter*(clhs35*clhs542 + clhs51*clhs543);
        lhs(15,5)=penalty_parameter*(clhs35*clhs544 + clhs51*clhs545);
        lhs(15,6)=penalty_parameter*(clhs35*clhs546 + clhs51*clhs547);
        lhs(15,7)=penalty_parameter*(clhs35*clhs548 + clhs51*clhs549);
        lhs(15,8)=penalty_parameter*(clhs35*clhs550 + clhs51*clhs551);
        lhs(15,9)=penalty_parameter*(clhs35*clhs552 + clhs51*clhs553);
        lhs(15,10)=penalty_parameter*(clhs35*clhs554 + clhs51*clhs555);
        lhs(15,11)=penalty_parameter*(clhs35*clhs556 + clhs51*clhs557);
        lhs(15,12)=-clhs191*clhs49 - clhs198*clhs35 - clhs200*clhs55 - clhs207*clhs51;
        lhs(15,13)=-clhs211*clhs49 - clhs218*clhs35 - clhs220*clhs55 - clhs227*clhs51;
        lhs(15,14)=-clhs231*clhs49 - clhs238*clhs35 - clhs240*clhs55 - clhs247*clhs51;
        lhs(15,15)=-clhs251*clhs49 - clhs258*clhs35 - clhs260*clhs55 - clhs267*clhs51;
        lhs(15,16)=-clhs271*clhs49 - clhs278*clhs35 - clhs280*clhs55 - clhs287*clhs51;
        lhs(15,17)=-clhs291*clhs49 - clhs298*clhs35 - clhs300*clhs55 - clhs307*clhs51;
        lhs(15,18)=-clhs311*clhs49 - clhs318*clhs35 - clhs320*clhs55 - clhs327*clhs51;
        lhs(15,19)=-clhs331*clhs49 - clhs338*clhs35 - clhs340*clhs55 - clhs347*clhs51;
        lhs(15,20)=-clhs35*clhs358 - clhs351*clhs49 - clhs360*clhs55 - clhs367*clhs51;
        lhs(15,21)=-clhs35*clhs378 - clhs371*clhs49 - clhs380*clhs55 - clhs387*clhs51;
        lhs(15,22)=-clhs35*clhs398 - clhs391*clhs49 - clhs400*clhs55 - clhs407*clhs51;
        lhs(15,23)=-clhs35*clhs418 - clhs411*clhs49 - clhs420*clhs55 - clhs427*clhs51;
        lhs(15,24)=-clhs35*clhs428;
        lhs(15,25)=0;
        lhs(15,26)=0;
        lhs(15,27)=-clhs429*clhs51;
        lhs(16,0)=penalty_parameter*(clhs35*clhs558 + clhs51*clhs559);
        lhs(16,1)=penalty_parameter*(clhs35*clhs560 + clhs51*clhs561);
        lhs(16,2)=penalty_parameter*(clhs35*clhs562 + clhs51*clhs563);
        lhs(16,3)=penalty_parameter*(clhs35*clhs564 + clhs51*clhs565);
        lhs(16,4)=penalty_parameter*(clhs35*clhs566 + clhs51*clhs567);
        lhs(16,5)=penalty_parameter*(clhs35*clhs568 + clhs51*clhs569);
        lhs(16,6)=penalty_parameter*(clhs35*clhs570 + clhs51*clhs571);
        lhs(16,7)=penalty_parameter*(clhs35*clhs572 + clhs51*clhs573);
        lhs(16,8)=penalty_parameter*(clhs35*clhs574 + clhs51*clhs575);
        lhs(16,9)=penalty_parameter*(clhs35*clhs576 + clhs51*clhs577);
        lhs(16,10)=penalty_parameter*(clhs35*clhs578 + clhs51*clhs579);
        lhs(16,11)=penalty_parameter*(clhs35*clhs580 + clhs51*clhs581);
        lhs(16,12)=-clhs191*clhs432 - clhs200*clhs433 - clhs35*clhs456 - clhs457*clhs51;
        lhs(16,13)=-clhs211*clhs432 - clhs220*clhs433 - clhs35*clhs458 - clhs459*clhs51;
        lhs(16,14)=-clhs231*clhs432 - clhs240*clhs433 - clhs35*clhs460 - clhs461*clhs51;
        lhs(16,15)=-clhs251*clhs432 - clhs260*clhs433 - clhs35*clhs462 - clhs463*clhs51;
        lhs(16,16)=-clhs271*clhs432 - clhs280*clhs433 - clhs35*clhs464 - clhs465*clhs51;
        lhs(16,17)=-clhs291*clhs432 - clhs300*clhs433 - clhs35*clhs466 - clhs467*clhs51;
        lhs(16,18)=-clhs311*clhs432 - clhs320*clhs433 - clhs35*clhs468 - clhs469*clhs51;
        lhs(16,19)=-clhs331*clhs432 - clhs340*clhs433 - clhs35*clhs470 - clhs471*clhs51;
        lhs(16,20)=-clhs35*clhs472 - clhs351*clhs432 - clhs360*clhs433 - clhs473*clhs51;
        lhs(16,21)=-clhs35*clhs474 - clhs371*clhs432 - clhs380*clhs433 - clhs475*clhs51;
        lhs(16,22)=-clhs35*clhs476 - clhs391*clhs432 - clhs400*clhs433 - clhs477*clhs51;
        lhs(16,23)=-clhs35*clhs478 - clhs411*clhs432 - clhs420*clhs433 - clhs479*clhs51;
        lhs(16,24)=-clhs35*clhs480;
        lhs(16,25)=0;
        lhs(16,26)=0;
        lhs(16,27)=-clhs481*clhs51;
        lhs(17,0)=penalty_parameter*(clhs35*clhs582 + clhs51*clhs583);
        lhs(17,1)=penalty_parameter*(clhs35*clhs584 + clhs51*clhs585);
        lhs(17,2)=penalty_parameter*(clhs35*clhs586 + clhs51*clhs587);
        lhs(17,3)=penalty_parameter*(clhs35*clhs588 + clhs51*clhs589);
        lhs(17,4)=penalty_parameter*(clhs35*clhs590 + clhs51*clhs591);
        lhs(17,5)=penalty_parameter*(clhs35*clhs592 + clhs51*clhs593);
        lhs(17,6)=penalty_parameter*(clhs35*clhs594 + clhs51*clhs595);
        lhs(17,7)=penalty_parameter*(clhs35*clhs596 + clhs51*clhs597);
        lhs(17,8)=penalty_parameter*(clhs35*clhs598 + clhs51*clhs599);
        lhs(17,9)=penalty_parameter*(clhs35*clhs600 + clhs51*clhs601);
        lhs(17,10)=penalty_parameter*(clhs35*clhs602 + clhs51*clhs603);
        lhs(17,11)=penalty_parameter*(clhs35*clhs604 + clhs51*clhs605);
        lhs(17,12)=-clhs191*clhs484 - clhs200*clhs485 - clhs35*clhs508 - clhs509*clhs51;
        lhs(17,13)=-clhs211*clhs484 - clhs220*clhs485 - clhs35*clhs510 - clhs51*clhs511;
        lhs(17,14)=-clhs231*clhs484 - clhs240*clhs485 - clhs35*clhs512 - clhs51*clhs513;
        lhs(17,15)=-clhs251*clhs484 - clhs260*clhs485 - clhs35*clhs514 - clhs51*clhs515;
        lhs(17,16)=-clhs271*clhs484 - clhs280*clhs485 - clhs35*clhs516 - clhs51*clhs517;
        lhs(17,17)=-clhs291*clhs484 - clhs300*clhs485 - clhs35*clhs518 - clhs51*clhs519;
        lhs(17,18)=-clhs311*clhs484 - clhs320*clhs485 - clhs35*clhs520 - clhs51*clhs521;
        lhs(17,19)=-clhs331*clhs484 - clhs340*clhs485 - clhs35*clhs522 - clhs51*clhs523;
        lhs(17,20)=-clhs35*clhs524 - clhs351*clhs484 - clhs360*clhs485 - clhs51*clhs525;
        lhs(17,21)=-clhs35*clhs526 - clhs371*clhs484 - clhs380*clhs485 - clhs51*clhs527;
        lhs(17,22)=-clhs35*clhs528 - clhs391*clhs484 - clhs400*clhs485 - clhs51*clhs529;
        lhs(17,23)=-clhs35*clhs530 - clhs411*clhs484 - clhs420*clhs485 - clhs51*clhs531;
        lhs(17,24)=-clhs35*clhs532;
        lhs(17,25)=0;
        lhs(17,26)=0;
        lhs(17,27)=-clhs51*clhs533;
        lhs(18,0)=penalty_parameter*(clhs37*clhs534 + clhs52*clhs535);
        lhs(18,1)=penalty_parameter*(clhs37*clhs536 + clhs52*clhs537);
        lhs(18,2)=penalty_parameter*(clhs37*clhs538 + clhs52*clhs539);
        lhs(18,3)=penalty_parameter*(clhs37*clhs540 + clhs52*clhs541);
        lhs(18,4)=penalty_parameter*(clhs37*clhs542 + clhs52*clhs543);
        lhs(18,5)=penalty_parameter*(clhs37*clhs544 + clhs52*clhs545);
        lhs(18,6)=penalty_parameter*(clhs37*clhs546 + clhs52*clhs547);
        lhs(18,7)=penalty_parameter*(clhs37*clhs548 + clhs52*clhs549);
        lhs(18,8)=penalty_parameter*(clhs37*clhs550 + clhs52*clhs551);
        lhs(18,9)=penalty_parameter*(clhs37*clhs552 + clhs52*clhs553);
        lhs(18,10)=penalty_parameter*(clhs37*clhs554 + clhs52*clhs555);
        lhs(18,11)=penalty_parameter*(clhs37*clhs556 + clhs52*clhs557);
        lhs(18,12)=-clhs192*clhs49 - clhs198*clhs37 - clhs201*clhs55 - clhs207*clhs52;
        lhs(18,13)=-clhs212*clhs49 - clhs218*clhs37 - clhs221*clhs55 - clhs227*clhs52;
        lhs(18,14)=-clhs232*clhs49 - clhs238*clhs37 - clhs241*clhs55 - clhs247*clhs52;
        lhs(18,15)=-clhs252*clhs49 - clhs258*clhs37 - clhs261*clhs55 - clhs267*clhs52;
        lhs(18,16)=-clhs272*clhs49 - clhs278*clhs37 - clhs281*clhs55 - clhs287*clhs52;
        lhs(18,17)=-clhs292*clhs49 - clhs298*clhs37 - clhs301*clhs55 - clhs307*clhs52;
        lhs(18,18)=-clhs312*clhs49 - clhs318*clhs37 - clhs321*clhs55 - clhs327*clhs52;
        lhs(18,19)=-clhs332*clhs49 - clhs338*clhs37 - clhs341*clhs55 - clhs347*clhs52;
        lhs(18,20)=-clhs352*clhs49 - clhs358*clhs37 - clhs361*clhs55 - clhs367*clhs52;
        lhs(18,21)=-clhs37*clhs378 - clhs372*clhs49 - clhs381*clhs55 - clhs387*clhs52;
        lhs(18,22)=-clhs37*clhs398 - clhs392*clhs49 - clhs401*clhs55 - clhs407*clhs52;
        lhs(18,23)=-clhs37*clhs418 - clhs412*clhs49 - clhs421*clhs55 - clhs427*clhs52;
        lhs(18,24)=-clhs37*clhs428;
        lhs(18,25)=0;
        lhs(18,26)=0;
        lhs(18,27)=-clhs429*clhs52;
        lhs(19,0)=penalty_parameter*(clhs37*clhs558 + clhs52*clhs559);
        lhs(19,1)=penalty_parameter*(clhs37*clhs560 + clhs52*clhs561);
        lhs(19,2)=penalty_parameter*(clhs37*clhs562 + clhs52*clhs563);
        lhs(19,3)=penalty_parameter*(clhs37*clhs564 + clhs52*clhs565);
        lhs(19,4)=penalty_parameter*(clhs37*clhs566 + clhs52*clhs567);
        lhs(19,5)=penalty_parameter*(clhs37*clhs568 + clhs52*clhs569);
        lhs(19,6)=penalty_parameter*(clhs37*clhs570 + clhs52*clhs571);
        lhs(19,7)=penalty_parameter*(clhs37*clhs572 + clhs52*clhs573);
        lhs(19,8)=penalty_parameter*(clhs37*clhs574 + clhs52*clhs575);
        lhs(19,9)=penalty_parameter*(clhs37*clhs576 + clhs52*clhs577);
        lhs(19,10)=penalty_parameter*(clhs37*clhs578 + clhs52*clhs579);
        lhs(19,11)=penalty_parameter*(clhs37*clhs580 + clhs52*clhs581);
        lhs(19,12)=-clhs192*clhs432 - clhs201*clhs433 - clhs37*clhs456 - clhs457*clhs52;
        lhs(19,13)=-clhs212*clhs432 - clhs221*clhs433 - clhs37*clhs458 - clhs459*clhs52;
        lhs(19,14)=-clhs232*clhs432 - clhs241*clhs433 - clhs37*clhs460 - clhs461*clhs52;
        lhs(19,15)=-clhs252*clhs432 - clhs261*clhs433 - clhs37*clhs462 - clhs463*clhs52;
        lhs(19,16)=-clhs272*clhs432 - clhs281*clhs433 - clhs37*clhs464 - clhs465*clhs52;
        lhs(19,17)=-clhs292*clhs432 - clhs301*clhs433 - clhs37*clhs466 - clhs467*clhs52;
        lhs(19,18)=-clhs312*clhs432 - clhs321*clhs433 - clhs37*clhs468 - clhs469*clhs52;
        lhs(19,19)=-clhs332*clhs432 - clhs341*clhs433 - clhs37*clhs470 - clhs471*clhs52;
        lhs(19,20)=-clhs352*clhs432 - clhs361*clhs433 - clhs37*clhs472 - clhs473*clhs52;
        lhs(19,21)=-clhs37*clhs474 - clhs372*clhs432 - clhs381*clhs433 - clhs475*clhs52;
        lhs(19,22)=-clhs37*clhs476 - clhs392*clhs432 - clhs401*clhs433 - clhs477*clhs52;
        lhs(19,23)=-clhs37*clhs478 - clhs412*clhs432 - clhs421*clhs433 - clhs479*clhs52;
        lhs(19,24)=-clhs37*clhs480;
        lhs(19,25)=0;
        lhs(19,26)=0;
        lhs(19,27)=-clhs481*clhs52;
        lhs(20,0)=penalty_parameter*(clhs37*clhs582 + clhs52*clhs583);
        lhs(20,1)=penalty_parameter*(clhs37*clhs584 + clhs52*clhs585);
        lhs(20,2)=penalty_parameter*(clhs37*clhs586 + clhs52*clhs587);
        lhs(20,3)=penalty_parameter*(clhs37*clhs588 + clhs52*clhs589);
        lhs(20,4)=penalty_parameter*(clhs37*clhs590 + clhs52*clhs591);
        lhs(20,5)=penalty_parameter*(clhs37*clhs592 + clhs52*clhs593);
        lhs(20,6)=penalty_parameter*(clhs37*clhs594 + clhs52*clhs595);
        lhs(20,7)=penalty_parameter*(clhs37*clhs596 + clhs52*clhs597);
        lhs(20,8)=penalty_parameter*(clhs37*clhs598 + clhs52*clhs599);
        lhs(20,9)=penalty_parameter*(clhs37*clhs600 + clhs52*clhs601);
        lhs(20,10)=penalty_parameter*(clhs37*clhs602 + clhs52*clhs603);
        lhs(20,11)=penalty_parameter*(clhs37*clhs604 + clhs52*clhs605);
        lhs(20,12)=-clhs192*clhs484 - clhs201*clhs485 - clhs37*clhs508 - clhs509*clhs52;
        lhs(20,13)=-clhs212*clhs484 - clhs221*clhs485 - clhs37*clhs510 - clhs511*clhs52;
        lhs(20,14)=-clhs232*clhs484 - clhs241*clhs485 - clhs37*clhs512 - clhs513*clhs52;
        lhs(20,15)=-clhs252*clhs484 - clhs261*clhs485 - clhs37*clhs514 - clhs515*clhs52;
        lhs(20,16)=-clhs272*clhs484 - clhs281*clhs485 - clhs37*clhs516 - clhs517*clhs52;
        lhs(20,17)=-clhs292*clhs484 - clhs301*clhs485 - clhs37*clhs518 - clhs519*clhs52;
        lhs(20,18)=-clhs312*clhs484 - clhs321*clhs485 - clhs37*clhs520 - clhs52*clhs521;
        lhs(20,19)=-clhs332*clhs484 - clhs341*clhs485 - clhs37*clhs522 - clhs52*clhs523;
        lhs(20,20)=-clhs352*clhs484 - clhs361*clhs485 - clhs37*clhs524 - clhs52*clhs525;
        lhs(20,21)=-clhs37*clhs526 - clhs372*clhs484 - clhs381*clhs485 - clhs52*clhs527;
        lhs(20,22)=-clhs37*clhs528 - clhs392*clhs484 - clhs401*clhs485 - clhs52*clhs529;
        lhs(20,23)=-clhs37*clhs530 - clhs412*clhs484 - clhs421*clhs485 - clhs52*clhs531;
        lhs(20,24)=-clhs37*clhs532;
        lhs(20,25)=0;
        lhs(20,26)=0;
        lhs(20,27)=-clhs52*clhs533;
        lhs(21,0)=penalty_parameter*(clhs39*clhs534 + clhs53*clhs535);
        lhs(21,1)=penalty_parameter*(clhs39*clhs536 + clhs53*clhs537);
        lhs(21,2)=penalty_parameter*(clhs39*clhs538 + clhs53*clhs539);
        lhs(21,3)=penalty_parameter*(clhs39*clhs540 + clhs53*clhs541);
        lhs(21,4)=penalty_parameter*(clhs39*clhs542 + clhs53*clhs543);
        lhs(21,5)=penalty_parameter*(clhs39*clhs544 + clhs53*clhs545);
        lhs(21,6)=penalty_parameter*(clhs39*clhs546 + clhs53*clhs547);
        lhs(21,7)=penalty_parameter*(clhs39*clhs548 + clhs53*clhs549);
        lhs(21,8)=penalty_parameter*(clhs39*clhs550 + clhs53*clhs551);
        lhs(21,9)=penalty_parameter*(clhs39*clhs552 + clhs53*clhs553);
        lhs(21,10)=penalty_parameter*(clhs39*clhs554 + clhs53*clhs555);
        lhs(21,11)=penalty_parameter*(clhs39*clhs556 + clhs53*clhs557);
        lhs(21,12)=-clhs193*clhs49 - clhs198*clhs39 - clhs202*clhs55 - clhs207*clhs53;
        lhs(21,13)=-clhs213*clhs49 - clhs218*clhs39 - clhs222*clhs55 - clhs227*clhs53;
        lhs(21,14)=-clhs233*clhs49 - clhs238*clhs39 - clhs242*clhs55 - clhs247*clhs53;
        lhs(21,15)=-clhs253*clhs49 - clhs258*clhs39 - clhs262*clhs55 - clhs267*clhs53;
        lhs(21,16)=-clhs273*clhs49 - clhs278*clhs39 - clhs282*clhs55 - clhs287*clhs53;
        lhs(21,17)=-clhs293*clhs49 - clhs298*clhs39 - clhs302*clhs55 - clhs307*clhs53;
        lhs(21,18)=-clhs313*clhs49 - clhs318*clhs39 - clhs322*clhs55 - clhs327*clhs53;
        lhs(21,19)=-clhs333*clhs49 - clhs338*clhs39 - clhs342*clhs55 - clhs347*clhs53;
        lhs(21,20)=-clhs353*clhs49 - clhs358*clhs39 - clhs362*clhs55 - clhs367*clhs53;
        lhs(21,21)=-clhs373*clhs49 - clhs378*clhs39 - clhs382*clhs55 - clhs387*clhs53;
        lhs(21,22)=-clhs39*clhs398 - clhs393*clhs49 - clhs402*clhs55 - clhs407*clhs53;
        lhs(21,23)=-clhs39*clhs418 - clhs413*clhs49 - clhs422*clhs55 - clhs427*clhs53;
        lhs(21,24)=-clhs39*clhs428;
        lhs(21,25)=0;
        lhs(21,26)=0;
        lhs(21,27)=-clhs429*clhs53;
        lhs(22,0)=penalty_parameter*(clhs39*clhs558 + clhs53*clhs559);
        lhs(22,1)=penalty_parameter*(clhs39*clhs560 + clhs53*clhs561);
        lhs(22,2)=penalty_parameter*(clhs39*clhs562 + clhs53*clhs563);
        lhs(22,3)=penalty_parameter*(clhs39*clhs564 + clhs53*clhs565);
        lhs(22,4)=penalty_parameter*(clhs39*clhs566 + clhs53*clhs567);
        lhs(22,5)=penalty_parameter*(clhs39*clhs568 + clhs53*clhs569);
        lhs(22,6)=penalty_parameter*(clhs39*clhs570 + clhs53*clhs571);
        lhs(22,7)=penalty_parameter*(clhs39*clhs572 + clhs53*clhs573);
        lhs(22,8)=penalty_parameter*(clhs39*clhs574 + clhs53*clhs575);
        lhs(22,9)=penalty_parameter*(clhs39*clhs576 + clhs53*clhs577);
        lhs(22,10)=penalty_parameter*(clhs39*clhs578 + clhs53*clhs579);
        lhs(22,11)=penalty_parameter*(clhs39*clhs580 + clhs53*clhs581);
        lhs(22,12)=-clhs193*clhs432 - clhs202*clhs433 - clhs39*clhs456 - clhs457*clhs53;
        lhs(22,13)=-clhs213*clhs432 - clhs222*clhs433 - clhs39*clhs458 - clhs459*clhs53;
        lhs(22,14)=-clhs233*clhs432 - clhs242*clhs433 - clhs39*clhs460 - clhs461*clhs53;
        lhs(22,15)=-clhs253*clhs432 - clhs262*clhs433 - clhs39*clhs462 - clhs463*clhs53;
        lhs(22,16)=-clhs273*clhs432 - clhs282*clhs433 - clhs39*clhs464 - clhs465*clhs53;
        lhs(22,17)=-clhs293*clhs432 - clhs302*clhs433 - clhs39*clhs466 - clhs467*clhs53;
        lhs(22,18)=-clhs313*clhs432 - clhs322*clhs433 - clhs39*clhs468 - clhs469*clhs53;
        lhs(22,19)=-clhs333*clhs432 - clhs342*clhs433 - clhs39*clhs470 - clhs471*clhs53;
        lhs(22,20)=-clhs353*clhs432 - clhs362*clhs433 - clhs39*clhs472 - clhs473*clhs53;
        lhs(22,21)=-clhs373*clhs432 - clhs382*clhs433 - clhs39*clhs474 - clhs475*clhs53;
        lhs(22,22)=-clhs39*clhs476 - clhs393*clhs432 - clhs402*clhs433 - clhs477*clhs53;
        lhs(22,23)=-clhs39*clhs478 - clhs413*clhs432 - clhs422*clhs433 - clhs479*clhs53;
        lhs(22,24)=-clhs39*clhs480;
        lhs(22,25)=0;
        lhs(22,26)=0;
        lhs(22,27)=-clhs481*clhs53;
        lhs(23,0)=penalty_parameter*(clhs39*clhs582 + clhs53*clhs583);
        lhs(23,1)=penalty_parameter*(clhs39*clhs584 + clhs53*clhs585);
        lhs(23,2)=penalty_parameter*(clhs39*clhs586 + clhs53*clhs587);
        lhs(23,3)=penalty_parameter*(clhs39*clhs588 + clhs53*clhs589);
        lhs(23,4)=penalty_parameter*(clhs39*clhs590 + clhs53*clhs591);
        lhs(23,5)=penalty_parameter*(clhs39*clhs592 + clhs53*clhs593);
        lhs(23,6)=penalty_parameter*(clhs39*clhs594 + clhs53*clhs595);
        lhs(23,7)=penalty_parameter*(clhs39*clhs596 + clhs53*clhs597);
        lhs(23,8)=penalty_parameter*(clhs39*clhs598 + clhs53*clhs599);
        lhs(23,9)=penalty_parameter*(clhs39*clhs600 + clhs53*clhs601);
        lhs(23,10)=penalty_parameter*(clhs39*clhs602 + clhs53*clhs603);
        lhs(23,11)=penalty_parameter*(clhs39*clhs604 + clhs53*clhs605);
        lhs(23,12)=-clhs193*clhs484 - clhs202*clhs485 - clhs39*clhs508 - clhs509*clhs53;
        lhs(23,13)=-clhs213*clhs484 - clhs222*clhs485 - clhs39*clhs510 - clhs511*clhs53;
        lhs(23,14)=-clhs233*clhs484 - clhs242*clhs485 - clhs39*clhs512 - clhs513*clhs53;
        lhs(23,15)=-clhs253*clhs484 - clhs262*clhs485 - clhs39*clhs514 - clhs515*clhs53;
        lhs(23,16)=-clhs273*clhs484 - clhs282*clhs485 - clhs39*clhs516 - clhs517*clhs53;
        lhs(23,17)=-clhs293*clhs484 - clhs302*clhs485 - clhs39*clhs518 - clhs519*clhs53;
        lhs(23,18)=-clhs313*clhs484 - clhs322*clhs485 - clhs39*clhs520 - clhs521*clhs53;
        lhs(23,19)=-clhs333*clhs484 - clhs342*clhs485 - clhs39*clhs522 - clhs523*clhs53;
        lhs(23,20)=-clhs353*clhs484 - clhs362*clhs485 - clhs39*clhs524 - clhs525*clhs53;
        lhs(23,21)=-clhs373*clhs484 - clhs382*clhs485 - clhs39*clhs526 - clhs527*clhs53;
        lhs(23,22)=-clhs39*clhs528 - clhs393*clhs484 - clhs402*clhs485 - clhs529*clhs53;
        lhs(23,23)=-clhs39*clhs530 - clhs413*clhs484 - clhs422*clhs485 - clhs53*clhs531;
        lhs(23,24)=-clhs39*clhs532;
        lhs(23,25)=0;
        lhs(23,26)=0;
        lhs(23,27)=-clhs53*clhs533;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs60*scale_factor;
        lhs(24,2)=clhs72*scale_factor;
        lhs(24,3)=clhs84*scale_factor;
        lhs(24,4)=clhs96*scale_factor;
        lhs(24,5)=clhs108*scale_factor;
        lhs(24,6)=clhs120*scale_factor;
        lhs(24,7)=clhs132*scale_factor;
        lhs(24,8)=clhs144*scale_factor;
        lhs(24,9)=clhs156*scale_factor;
        lhs(24,10)=clhs168*scale_factor;
        lhs(24,11)=clhs180*scale_factor;
        lhs(24,12)=-clhs197*scale_factor;
        lhs(24,13)=-clhs217*scale_factor;
        lhs(24,14)=-clhs237*scale_factor;
        lhs(24,15)=-clhs257*scale_factor;
        lhs(24,16)=-clhs277*scale_factor;
        lhs(24,17)=-clhs297*scale_factor;
        lhs(24,18)=-clhs317*scale_factor;
        lhs(24,19)=-clhs337*scale_factor;
        lhs(24,20)=-clhs357*scale_factor;
        lhs(24,21)=-clhs377*scale_factor;
        lhs(24,22)=-clhs397*scale_factor;
        lhs(24,23)=-clhs417*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs606;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs606;
        lhs(26,27)=0;
        lhs(27,0)=clhs30*scale_factor;
        lhs(27,1)=clhs66*scale_factor;
        lhs(27,2)=clhs78*scale_factor;
        lhs(27,3)=clhs90*scale_factor;
        lhs(27,4)=clhs102*scale_factor;
        lhs(27,5)=clhs114*scale_factor;
        lhs(27,6)=clhs126*scale_factor;
        lhs(27,7)=clhs138*scale_factor;
        lhs(27,8)=clhs150*scale_factor;
        lhs(27,9)=clhs162*scale_factor;
        lhs(27,10)=clhs174*scale_factor;
        lhs(27,11)=clhs186*scale_factor;
        lhs(27,12)=-clhs206*scale_factor;
        lhs(27,13)=-clhs226*scale_factor;
        lhs(27,14)=-clhs246*scale_factor;
        lhs(27,15)=-clhs266*scale_factor;
        lhs(27,16)=-clhs286*scale_factor;
        lhs(27,17)=-clhs306*scale_factor;
        lhs(27,18)=-clhs326*scale_factor;
        lhs(27,19)=-clhs346*scale_factor;
        lhs(27,20)=-clhs366*scale_factor;
        lhs(27,21)=-clhs386*scale_factor;
        lhs(27,22)=-clhs406*scale_factor;
        lhs(27,23)=-clhs426*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 5 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(2,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(2,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(2,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(2,0)*penalty_parameter;
        const double clhs32 =     X1(0,0) + u1(0,0);
        const double clhs33 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs34 =     X1(1,0) + u1(1,0);
        const double clhs35 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs36 =     X1(2,0) + u1(2,0);
        const double clhs37 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs38 =     X1(3,0) + u1(3,0);
        const double clhs39 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs40 =     X1(0,1) + u1(0,1);
        const double clhs41 =     X1(1,1) + u1(1,1);
        const double clhs42 =     X1(2,1) + u1(2,1);
        const double clhs43 =     X1(3,1) + u1(3,1);
        const double clhs44 =     X1(0,2) + u1(0,2);
        const double clhs45 =     X1(1,2) + u1(1,2);
        const double clhs46 =     X1(2,2) + u1(2,2);
        const double clhs47 =     X1(3,2) + u1(3,2);
        const double clhs48 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs32*clhs33 + clhs34*clhs35 + clhs36*clhs37 + clhs38*clhs39) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs33*clhs40 + clhs35*clhs41 + clhs37*clhs42 + clhs39*clhs43 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs44 + clhs35*clhs45 + clhs37*clhs46 + clhs39*clhs47));
        const double clhs49 =     clhs48*normalslave(0,0);
        const double clhs50 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs51 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs52 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs53 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs32*clhs50 + clhs34*clhs51 + clhs36*clhs52 + clhs38*clhs53) + normalslave(2,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs40*clhs50 + clhs41*clhs51 + clhs42*clhs52 + clhs43*clhs53) + normalslave(2,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs44*clhs50 + clhs45*clhs51 + clhs46*clhs52 + clhs47*clhs53));
        const double clhs55 =     clhs54*normalslave(2,0);
        const double clhs56 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs57 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs60 =     normalslave(0,0)*(clhs16*clhs56 + clhs17*clhs57 + clhs18*clhs58 + clhs19*clhs59) + normalslave(0,1)*(clhs0 + clhs1*clhs56 + clhs3*clhs57 + clhs58*clhs6 + clhs59*clhs9) + normalslave(0,2)*(clhs12*clhs56 + clhs13*clhs57 + clhs14*clhs58 + clhs15*clhs59);
        const double clhs61 =     clhs60*normalslave(0,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs65 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs66 =     normalslave(2,0)*(clhs16*clhs62 + clhs17*clhs63 + clhs18*clhs64 + clhs19*clhs65) + normalslave(2,1)*(clhs1*clhs62 + clhs22 + clhs3*clhs63 + clhs6*clhs64 + clhs65*clhs9) + normalslave(2,2)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64 + clhs15*clhs65);
        const double clhs67 =     clhs66*normalslave(2,0)*penalty_parameter;
        const double clhs68 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs69 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs70 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs71 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs72 =     normalslave(0,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(0,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(0,2)*(clhs0 + clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71);
        const double clhs73 =     clhs72*normalslave(0,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs75 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs76 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs77 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs78 =     normalslave(2,0)*(clhs16*clhs74 + clhs17*clhs75 + clhs18*clhs76 + clhs19*clhs77) + normalslave(2,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs6*clhs76 + clhs77*clhs9) + normalslave(2,2)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76 + clhs15*clhs77 + clhs22);
        const double clhs79 =     clhs78*normalslave(2,0)*penalty_parameter;
        const double clhs80 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs81 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs82 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs83 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs84 =     normalslave(0,0)*(clhs16*clhs80 + clhs17*clhs81 + clhs18*clhs82 + clhs19*clhs83 + clhs4) + normalslave(0,1)*(clhs1*clhs80 + clhs3*clhs81 + clhs6*clhs82 + clhs83*clhs9) + normalslave(0,2)*(clhs12*clhs80 + clhs13*clhs81 + clhs14*clhs82 + clhs15*clhs83);
        const double clhs85 =     clhs84*normalslave(0,0)*penalty_parameter;
        const double clhs86 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs87 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs90 =     normalslave(2,0)*(clhs16*clhs86 + clhs17*clhs87 + clhs18*clhs88 + clhs19*clhs89 + clhs24) + normalslave(2,1)*(clhs1*clhs86 + clhs3*clhs87 + clhs6*clhs88 + clhs89*clhs9) + normalslave(2,2)*(clhs12*clhs86 + clhs13*clhs87 + clhs14*clhs88 + clhs15*clhs89);
        const double clhs91 =     clhs90*normalslave(2,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs93 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs94 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs95 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs96 =     normalslave(0,0)*(clhs16*clhs92 + clhs17*clhs93 + clhs18*clhs94 + clhs19*clhs95) + normalslave(0,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs4 + clhs6*clhs94 + clhs9*clhs95) + normalslave(0,2)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs15*clhs95);
        const double clhs97 =     clhs96*normalslave(0,0)*penalty_parameter;
        const double clhs98 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs99 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs100 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs101 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs102 =     normalslave(2,0)*(clhs100*clhs18 + clhs101*clhs19 + clhs16*clhs98 + clhs17*clhs99) + normalslave(2,1)*(clhs1*clhs98 + clhs100*clhs6 + clhs101*clhs9 + clhs24 + clhs3*clhs99) + normalslave(2,2)*(clhs100*clhs14 + clhs101*clhs15 + clhs12*clhs98 + clhs13*clhs99);
        const double clhs103 =     clhs102*normalslave(2,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs105 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs106 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs107 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs108 =     normalslave(0,0)*(clhs104*clhs16 + clhs105*clhs17 + clhs106*clhs18 + clhs107*clhs19) + normalslave(0,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs107*clhs9) + normalslave(0,2)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14 + clhs107*clhs15 + clhs4);
        const double clhs109 =     clhs108*normalslave(0,0)*penalty_parameter;
        const double clhs110 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs111 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs112 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs113 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs114 =     normalslave(2,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(2,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(2,2)*(clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15 + clhs24);
        const double clhs115 =     clhs114*normalslave(2,0)*penalty_parameter;
        const double clhs116 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs117 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs118 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs119 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs120 =     normalslave(0,0)*(clhs116*clhs16 + clhs117*clhs17 + clhs118*clhs18 + clhs119*clhs19 + clhs7) + normalslave(0,1)*(clhs1*clhs116 + clhs117*clhs3 + clhs118*clhs6 + clhs119*clhs9) + normalslave(0,2)*(clhs116*clhs12 + clhs117*clhs13 + clhs118*clhs14 + clhs119*clhs15);
        const double clhs121 =     clhs120*normalslave(0,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs123 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs124 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs125 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs126 =     normalslave(2,0)*(clhs122*clhs16 + clhs123*clhs17 + clhs124*clhs18 + clhs125*clhs19 + clhs26) + normalslave(2,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6 + clhs125*clhs9) + normalslave(2,2)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14 + clhs125*clhs15);
        const double clhs127 =     clhs126*normalslave(2,0)*penalty_parameter;
        const double clhs128 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs129 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs130 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs131 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs132 =     normalslave(0,0)*(clhs128*clhs16 + clhs129*clhs17 + clhs130*clhs18 + clhs131*clhs19) + normalslave(0,1)*(clhs1*clhs128 + clhs129*clhs3 + clhs130*clhs6 + clhs131*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs128 + clhs129*clhs13 + clhs130*clhs14 + clhs131*clhs15);
        const double clhs133 =     clhs132*normalslave(0,0)*penalty_parameter;
        const double clhs134 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs135 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs136 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs137 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs138 =     normalslave(2,0)*(clhs134*clhs16 + clhs135*clhs17 + clhs136*clhs18 + clhs137*clhs19) + normalslave(2,1)*(clhs1*clhs134 + clhs135*clhs3 + clhs136*clhs6 + clhs137*clhs9 + clhs26) + normalslave(2,2)*(clhs12*clhs134 + clhs13*clhs135 + clhs136*clhs14 + clhs137*clhs15);
        const double clhs139 =     clhs138*normalslave(2,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs141 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs142 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs143 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs144 =     normalslave(0,0)*(clhs140*clhs16 + clhs141*clhs17 + clhs142*clhs18 + clhs143*clhs19) + normalslave(0,1)*(clhs1*clhs140 + clhs141*clhs3 + clhs142*clhs6 + clhs143*clhs9) + normalslave(0,2)*(clhs12*clhs140 + clhs13*clhs141 + clhs14*clhs142 + clhs143*clhs15 + clhs7);
        const double clhs145 =     clhs144*normalslave(0,0)*penalty_parameter;
        const double clhs146 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs147 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs148 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs149 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs150 =     normalslave(2,0)*(clhs146*clhs16 + clhs147*clhs17 + clhs148*clhs18 + clhs149*clhs19) + normalslave(2,1)*(clhs1*clhs146 + clhs147*clhs3 + clhs148*clhs6 + clhs149*clhs9) + normalslave(2,2)*(clhs12*clhs146 + clhs13*clhs147 + clhs14*clhs148 + clhs149*clhs15 + clhs26);
        const double clhs151 =     clhs150*normalslave(2,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs153 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs154 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs155 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs156 =     normalslave(0,0)*(clhs10 + clhs152*clhs16 + clhs153*clhs17 + clhs154*clhs18 + clhs155*clhs19) + normalslave(0,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs155*clhs9) + normalslave(0,2)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154 + clhs15*clhs155);
        const double clhs157 =     clhs156*normalslave(0,0)*penalty_parameter;
        const double clhs158 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs159 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs160 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs161 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs162 =     normalslave(2,0)*(clhs158*clhs16 + clhs159*clhs17 + clhs160*clhs18 + clhs161*clhs19 + clhs28) + normalslave(2,1)*(clhs1*clhs158 + clhs159*clhs3 + clhs160*clhs6 + clhs161*clhs9) + normalslave(2,2)*(clhs12*clhs158 + clhs13*clhs159 + clhs14*clhs160 + clhs15*clhs161);
        const double clhs163 =     clhs162*normalslave(2,0)*penalty_parameter;
        const double clhs164 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs165 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs166 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs167 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs168 =     normalslave(0,0)*(clhs16*clhs164 + clhs165*clhs17 + clhs166*clhs18 + clhs167*clhs19) + normalslave(0,1)*(clhs1*clhs164 + clhs10 + clhs165*clhs3 + clhs166*clhs6 + clhs167*clhs9) + normalslave(0,2)*(clhs12*clhs164 + clhs13*clhs165 + clhs14*clhs166 + clhs15*clhs167);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs171 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs172 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs173 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs174 =     normalslave(2,0)*(clhs16*clhs170 + clhs17*clhs171 + clhs172*clhs18 + clhs173*clhs19) + normalslave(2,1)*(clhs1*clhs170 + clhs171*clhs3 + clhs172*clhs6 + clhs173*clhs9 + clhs28) + normalslave(2,2)*(clhs12*clhs170 + clhs13*clhs171 + clhs14*clhs172 + clhs15*clhs173);
        const double clhs175 =     clhs174*normalslave(2,0)*penalty_parameter;
        const double clhs176 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs177 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs178 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs179 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs180 =     normalslave(0,0)*(clhs16*clhs176 + clhs17*clhs177 + clhs178*clhs18 + clhs179*clhs19) + normalslave(0,1)*(clhs1*clhs176 + clhs177*clhs3 + clhs178*clhs6 + clhs179*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs176 + clhs13*clhs177 + clhs14*clhs178 + clhs15*clhs179);
        const double clhs181 =     clhs180*normalslave(0,0)*penalty_parameter;
        const double clhs182 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs183 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs184 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs185 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs186 =     normalslave(2,0)*(clhs16*clhs182 + clhs17*clhs183 + clhs18*clhs184 + clhs185*clhs19) + normalslave(2,1)*(clhs1*clhs182 + clhs183*clhs3 + clhs184*clhs6 + clhs185*clhs9) + normalslave(2,2)*(clhs12*clhs182 + clhs13*clhs183 + clhs14*clhs184 + clhs15*clhs185 + clhs28);
        const double clhs187 =     clhs186*normalslave(2,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs189 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs190 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs191 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs192 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs193 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs194 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs195 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs197 =     normalslave(0,0)*(-clhs16*clhs188 - clhs17*clhs194 - clhs18*clhs195 - clhs19*clhs196 + clhs190*clhs32 + clhs191*clhs34 + clhs192*clhs36 + clhs193*clhs38 + clhs33) + normalslave(0,1)*(-clhs1*clhs188 + clhs190*clhs40 + clhs191*clhs41 + clhs192*clhs42 + clhs193*clhs43 - clhs194*clhs3 - clhs195*clhs6 - clhs196*clhs9) + normalslave(0,2)*(-clhs12*clhs188 - clhs13*clhs194 - clhs14*clhs195 - clhs15*clhs196 + clhs190*clhs44 + clhs191*clhs45 + clhs192*clhs46 + clhs193*clhs47);
        const double clhs198 =     clhs197*normalslave(0,0)*penalty_parameter;
        const double clhs199 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs200 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs201 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs202 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs203 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs204 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs205 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs206 =     normalslave(2,0)*(-clhs16*clhs189 - clhs17*clhs203 - clhs18*clhs204 - clhs19*clhs205 + clhs199*clhs32 + clhs200*clhs34 + clhs201*clhs36 + clhs202*clhs38 + clhs50) + normalslave(2,1)*(-clhs1*clhs189 + clhs199*clhs40 + clhs200*clhs41 + clhs201*clhs42 + clhs202*clhs43 - clhs203*clhs3 - clhs204*clhs6 - clhs205*clhs9) + normalslave(2,2)*(-clhs12*clhs189 - clhs13*clhs203 - clhs14*clhs204 - clhs15*clhs205 + clhs199*clhs44 + clhs200*clhs45 + clhs201*clhs46 + clhs202*clhs47);
        const double clhs207 =     clhs206*normalslave(2,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs210 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs211 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs216 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs217 =     normalslave(0,0)*(-clhs16*clhs208 - clhs17*clhs214 - clhs18*clhs215 - clhs19*clhs216 + clhs210*clhs32 + clhs211*clhs34 + clhs212*clhs36 + clhs213*clhs38) + normalslave(0,1)*(-clhs1*clhs208 + clhs210*clhs40 + clhs211*clhs41 + clhs212*clhs42 + clhs213*clhs43 - clhs214*clhs3 - clhs215*clhs6 - clhs216*clhs9 + clhs33) + normalslave(0,2)*(-clhs12*clhs208 - clhs13*clhs214 - clhs14*clhs215 - clhs15*clhs216 + clhs210*clhs44 + clhs211*clhs45 + clhs212*clhs46 + clhs213*clhs47);
        const double clhs218 =     clhs217*normalslave(0,0)*penalty_parameter;
        const double clhs219 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs221 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs224 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs226 =     normalslave(2,0)*(-clhs16*clhs209 - clhs17*clhs223 - clhs18*clhs224 - clhs19*clhs225 + clhs219*clhs32 + clhs220*clhs34 + clhs221*clhs36 + clhs222*clhs38) + normalslave(2,1)*(-clhs1*clhs209 + clhs219*clhs40 + clhs220*clhs41 + clhs221*clhs42 + clhs222*clhs43 - clhs223*clhs3 - clhs224*clhs6 - clhs225*clhs9 + clhs50) + normalslave(2,2)*(-clhs12*clhs209 - clhs13*clhs223 - clhs14*clhs224 - clhs15*clhs225 + clhs219*clhs44 + clhs220*clhs45 + clhs221*clhs46 + clhs222*clhs47);
        const double clhs227 =     clhs226*normalslave(2,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs229 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs231 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs232 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs233 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs234 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs235 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs236 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs237 =     normalslave(0,0)*(-clhs16*clhs228 - clhs17*clhs234 - clhs18*clhs235 - clhs19*clhs236 + clhs230*clhs32 + clhs231*clhs34 + clhs232*clhs36 + clhs233*clhs38) + normalslave(0,1)*(-clhs1*clhs228 + clhs230*clhs40 + clhs231*clhs41 + clhs232*clhs42 + clhs233*clhs43 - clhs234*clhs3 - clhs235*clhs6 - clhs236*clhs9) + normalslave(0,2)*(-clhs12*clhs228 - clhs13*clhs234 - clhs14*clhs235 - clhs15*clhs236 + clhs230*clhs44 + clhs231*clhs45 + clhs232*clhs46 + clhs233*clhs47 + clhs33);
        const double clhs238 =     clhs237*normalslave(0,0)*penalty_parameter;
        const double clhs239 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs240 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs241 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs242 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs243 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs244 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs246 =     normalslave(2,0)*(-clhs16*clhs229 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs239*clhs32 + clhs240*clhs34 + clhs241*clhs36 + clhs242*clhs38) + normalslave(2,1)*(-clhs1*clhs229 + clhs239*clhs40 + clhs240*clhs41 + clhs241*clhs42 + clhs242*clhs43 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(2,2)*(-clhs12*clhs229 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs44 + clhs240*clhs45 + clhs241*clhs46 + clhs242*clhs47 + clhs50);
        const double clhs247 =     clhs246*normalslave(2,0)*penalty_parameter;
        const double clhs248 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs249 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs250 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs251 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs254 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs257 =     normalslave(0,0)*(-clhs16*clhs248 - clhs17*clhs254 - clhs18*clhs255 - clhs19*clhs256 + clhs250*clhs32 + clhs251*clhs34 + clhs252*clhs36 + clhs253*clhs38 + clhs35) + normalslave(0,1)*(-clhs1*clhs248 + clhs250*clhs40 + clhs251*clhs41 + clhs252*clhs42 + clhs253*clhs43 - clhs254*clhs3 - clhs255*clhs6 - clhs256*clhs9) + normalslave(0,2)*(-clhs12*clhs248 - clhs13*clhs254 - clhs14*clhs255 - clhs15*clhs256 + clhs250*clhs44 + clhs251*clhs45 + clhs252*clhs46 + clhs253*clhs47);
        const double clhs258 =     clhs257*normalslave(0,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs262 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs264 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs265 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs266 =     normalslave(2,0)*(-clhs16*clhs249 - clhs17*clhs263 - clhs18*clhs264 - clhs19*clhs265 + clhs259*clhs32 + clhs260*clhs34 + clhs261*clhs36 + clhs262*clhs38 + clhs51) + normalslave(2,1)*(-clhs1*clhs249 + clhs259*clhs40 + clhs260*clhs41 + clhs261*clhs42 + clhs262*clhs43 - clhs263*clhs3 - clhs264*clhs6 - clhs265*clhs9) + normalslave(2,2)*(-clhs12*clhs249 - clhs13*clhs263 - clhs14*clhs264 - clhs15*clhs265 + clhs259*clhs44 + clhs260*clhs45 + clhs261*clhs46 + clhs262*clhs47);
        const double clhs267 =     clhs266*normalslave(2,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs269 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs270 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs271 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs272 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs273 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs276 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs277 =     normalslave(0,0)*(-clhs16*clhs268 - clhs17*clhs274 - clhs18*clhs275 - clhs19*clhs276 + clhs270*clhs32 + clhs271*clhs34 + clhs272*clhs36 + clhs273*clhs38) + normalslave(0,1)*(-clhs1*clhs268 + clhs270*clhs40 + clhs271*clhs41 + clhs272*clhs42 + clhs273*clhs43 - clhs274*clhs3 - clhs275*clhs6 - clhs276*clhs9 + clhs35) + normalslave(0,2)*(-clhs12*clhs268 - clhs13*clhs274 - clhs14*clhs275 - clhs15*clhs276 + clhs270*clhs44 + clhs271*clhs45 + clhs272*clhs46 + clhs273*clhs47);
        const double clhs278 =     clhs277*normalslave(0,0)*penalty_parameter;
        const double clhs279 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs280 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs281 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs282 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs283 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs284 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs285 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs286 =     normalslave(2,0)*(-clhs16*clhs269 - clhs17*clhs283 - clhs18*clhs284 - clhs19*clhs285 + clhs279*clhs32 + clhs280*clhs34 + clhs281*clhs36 + clhs282*clhs38) + normalslave(2,1)*(-clhs1*clhs269 + clhs279*clhs40 + clhs280*clhs41 + clhs281*clhs42 + clhs282*clhs43 - clhs283*clhs3 - clhs284*clhs6 - clhs285*clhs9 + clhs51) + normalslave(2,2)*(-clhs12*clhs269 - clhs13*clhs283 - clhs14*clhs284 - clhs15*clhs285 + clhs279*clhs44 + clhs280*clhs45 + clhs281*clhs46 + clhs282*clhs47);
        const double clhs287 =     clhs286*normalslave(2,0)*penalty_parameter;
        const double clhs288 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs289 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs290 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs291 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs292 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs293 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs294 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs295 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs296 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs297 =     normalslave(0,0)*(-clhs16*clhs288 - clhs17*clhs294 - clhs18*clhs295 - clhs19*clhs296 + clhs290*clhs32 + clhs291*clhs34 + clhs292*clhs36 + clhs293*clhs38) + normalslave(0,1)*(-clhs1*clhs288 + clhs290*clhs40 + clhs291*clhs41 + clhs292*clhs42 + clhs293*clhs43 - clhs294*clhs3 - clhs295*clhs6 - clhs296*clhs9) + normalslave(0,2)*(-clhs12*clhs288 - clhs13*clhs294 - clhs14*clhs295 - clhs15*clhs296 + clhs290*clhs44 + clhs291*clhs45 + clhs292*clhs46 + clhs293*clhs47 + clhs35);
        const double clhs298 =     clhs297*normalslave(0,0)*penalty_parameter;
        const double clhs299 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs305 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs306 =     normalslave(2,0)*(-clhs16*clhs289 - clhs17*clhs303 - clhs18*clhs304 - clhs19*clhs305 + clhs299*clhs32 + clhs300*clhs34 + clhs301*clhs36 + clhs302*clhs38) + normalslave(2,1)*(-clhs1*clhs289 + clhs299*clhs40 - clhs3*clhs303 + clhs300*clhs41 + clhs301*clhs42 + clhs302*clhs43 - clhs304*clhs6 - clhs305*clhs9) + normalslave(2,2)*(-clhs12*clhs289 - clhs13*clhs303 - clhs14*clhs304 - clhs15*clhs305 + clhs299*clhs44 + clhs300*clhs45 + clhs301*clhs46 + clhs302*clhs47 + clhs51);
        const double clhs307 =     clhs306*normalslave(2,0)*penalty_parameter;
        const double clhs308 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs309 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs310 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs311 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs312 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs313 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs314 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs315 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs316 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs317 =     normalslave(0,0)*(-clhs16*clhs308 - clhs17*clhs314 - clhs18*clhs315 - clhs19*clhs316 + clhs310*clhs32 + clhs311*clhs34 + clhs312*clhs36 + clhs313*clhs38 + clhs37) + normalslave(0,1)*(-clhs1*clhs308 - clhs3*clhs314 + clhs310*clhs40 + clhs311*clhs41 + clhs312*clhs42 + clhs313*clhs43 - clhs315*clhs6 - clhs316*clhs9) + normalslave(0,2)*(-clhs12*clhs308 - clhs13*clhs314 - clhs14*clhs315 - clhs15*clhs316 + clhs310*clhs44 + clhs311*clhs45 + clhs312*clhs46 + clhs313*clhs47);
        const double clhs318 =     clhs317*normalslave(0,0)*penalty_parameter;
        const double clhs319 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs320 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs321 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs322 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs324 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs325 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs326 =     normalslave(2,0)*(-clhs16*clhs309 - clhs17*clhs323 - clhs18*clhs324 - clhs19*clhs325 + clhs319*clhs32 + clhs320*clhs34 + clhs321*clhs36 + clhs322*clhs38 + clhs52) + normalslave(2,1)*(-clhs1*clhs309 - clhs3*clhs323 + clhs319*clhs40 + clhs320*clhs41 + clhs321*clhs42 + clhs322*clhs43 - clhs324*clhs6 - clhs325*clhs9) + normalslave(2,2)*(-clhs12*clhs309 - clhs13*clhs323 - clhs14*clhs324 - clhs15*clhs325 + clhs319*clhs44 + clhs320*clhs45 + clhs321*clhs46 + clhs322*clhs47);
        const double clhs327 =     clhs326*normalslave(2,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs329 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs330 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs331 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs332 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs333 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs334 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs335 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs336 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs337 =     normalslave(0,0)*(-clhs16*clhs328 - clhs17*clhs334 - clhs18*clhs335 - clhs19*clhs336 + clhs32*clhs330 + clhs331*clhs34 + clhs332*clhs36 + clhs333*clhs38) + normalslave(0,1)*(-clhs1*clhs328 - clhs3*clhs334 + clhs330*clhs40 + clhs331*clhs41 + clhs332*clhs42 + clhs333*clhs43 - clhs335*clhs6 - clhs336*clhs9 + clhs37) + normalslave(0,2)*(-clhs12*clhs328 - clhs13*clhs334 - clhs14*clhs335 - clhs15*clhs336 + clhs330*clhs44 + clhs331*clhs45 + clhs332*clhs46 + clhs333*clhs47);
        const double clhs338 =     clhs337*normalslave(0,0)*penalty_parameter;
        const double clhs339 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs340 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs341 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs342 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs343 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs344 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs345 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs346 =     normalslave(2,0)*(-clhs16*clhs329 - clhs17*clhs343 - clhs18*clhs344 - clhs19*clhs345 + clhs32*clhs339 + clhs34*clhs340 + clhs341*clhs36 + clhs342*clhs38) + normalslave(2,1)*(-clhs1*clhs329 - clhs3*clhs343 + clhs339*clhs40 + clhs340*clhs41 + clhs341*clhs42 + clhs342*clhs43 - clhs344*clhs6 - clhs345*clhs9 + clhs52) + normalslave(2,2)*(-clhs12*clhs329 - clhs13*clhs343 - clhs14*clhs344 - clhs15*clhs345 + clhs339*clhs44 + clhs340*clhs45 + clhs341*clhs46 + clhs342*clhs47);
        const double clhs347 =     clhs346*normalslave(2,0)*penalty_parameter;
        const double clhs348 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs349 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs350 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs351 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs352 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs353 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs354 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs355 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs356 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs357 =     normalslave(0,0)*(-clhs16*clhs348 - clhs17*clhs354 - clhs18*clhs355 - clhs19*clhs356 + clhs32*clhs350 + clhs34*clhs351 + clhs352*clhs36 + clhs353*clhs38) + normalslave(0,1)*(-clhs1*clhs348 - clhs3*clhs354 + clhs350*clhs40 + clhs351*clhs41 + clhs352*clhs42 + clhs353*clhs43 - clhs355*clhs6 - clhs356*clhs9) + normalslave(0,2)*(-clhs12*clhs348 - clhs13*clhs354 - clhs14*clhs355 - clhs15*clhs356 + clhs350*clhs44 + clhs351*clhs45 + clhs352*clhs46 + clhs353*clhs47 + clhs37);
        const double clhs358 =     clhs357*normalslave(0,0)*penalty_parameter;
        const double clhs359 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs360 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs361 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs362 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs363 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs364 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs365 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs366 =     normalslave(2,0)*(-clhs16*clhs349 - clhs17*clhs363 - clhs18*clhs364 - clhs19*clhs365 + clhs32*clhs359 + clhs34*clhs360 + clhs36*clhs361 + clhs362*clhs38) + normalslave(2,1)*(-clhs1*clhs349 - clhs3*clhs363 + clhs359*clhs40 + clhs360*clhs41 + clhs361*clhs42 + clhs362*clhs43 - clhs364*clhs6 - clhs365*clhs9) + normalslave(2,2)*(-clhs12*clhs349 - clhs13*clhs363 - clhs14*clhs364 - clhs15*clhs365 + clhs359*clhs44 + clhs360*clhs45 + clhs361*clhs46 + clhs362*clhs47 + clhs52);
        const double clhs367 =     clhs366*normalslave(2,0)*penalty_parameter;
        const double clhs368 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs369 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs370 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs371 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs372 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs373 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs374 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs375 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs376 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs377 =     normalslave(0,0)*(-clhs16*clhs368 - clhs17*clhs374 - clhs18*clhs375 - clhs19*clhs376 + clhs32*clhs370 + clhs34*clhs371 + clhs36*clhs372 + clhs373*clhs38 + clhs39) + normalslave(0,1)*(-clhs1*clhs368 - clhs3*clhs374 + clhs370*clhs40 + clhs371*clhs41 + clhs372*clhs42 + clhs373*clhs43 - clhs375*clhs6 - clhs376*clhs9) + normalslave(0,2)*(-clhs12*clhs368 - clhs13*clhs374 - clhs14*clhs375 - clhs15*clhs376 + clhs370*clhs44 + clhs371*clhs45 + clhs372*clhs46 + clhs373*clhs47);
        const double clhs378 =     clhs377*normalslave(0,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs380 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs381 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs382 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs383 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs384 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs385 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs386 =     normalslave(2,0)*(-clhs16*clhs369 - clhs17*clhs383 - clhs18*clhs384 - clhs19*clhs385 + clhs32*clhs379 + clhs34*clhs380 + clhs36*clhs381 + clhs38*clhs382 + clhs53) + normalslave(2,1)*(-clhs1*clhs369 - clhs3*clhs383 + clhs379*clhs40 + clhs380*clhs41 + clhs381*clhs42 + clhs382*clhs43 - clhs384*clhs6 - clhs385*clhs9) + normalslave(2,2)*(-clhs12*clhs369 - clhs13*clhs383 - clhs14*clhs384 - clhs15*clhs385 + clhs379*clhs44 + clhs380*clhs45 + clhs381*clhs46 + clhs382*clhs47);
        const double clhs387 =     clhs386*normalslave(2,0)*penalty_parameter;
        const double clhs388 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs389 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs390 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs391 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs392 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs393 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs394 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs395 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs396 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs397 =     normalslave(0,0)*(-clhs16*clhs388 - clhs17*clhs394 - clhs18*clhs395 - clhs19*clhs396 + clhs32*clhs390 + clhs34*clhs391 + clhs36*clhs392 + clhs38*clhs393) + normalslave(0,1)*(-clhs1*clhs388 - clhs3*clhs394 + clhs39 + clhs390*clhs40 + clhs391*clhs41 + clhs392*clhs42 + clhs393*clhs43 - clhs395*clhs6 - clhs396*clhs9) + normalslave(0,2)*(-clhs12*clhs388 - clhs13*clhs394 - clhs14*clhs395 - clhs15*clhs396 + clhs390*clhs44 + clhs391*clhs45 + clhs392*clhs46 + clhs393*clhs47);
        const double clhs398 =     clhs397*normalslave(0,0)*penalty_parameter;
        const double clhs399 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs400 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs401 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs402 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs403 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs404 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs405 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs406 =     normalslave(2,0)*(-clhs16*clhs389 - clhs17*clhs403 - clhs18*clhs404 - clhs19*clhs405 + clhs32*clhs399 + clhs34*clhs400 + clhs36*clhs401 + clhs38*clhs402) + normalslave(2,1)*(-clhs1*clhs389 - clhs3*clhs403 + clhs399*clhs40 + clhs400*clhs41 + clhs401*clhs42 + clhs402*clhs43 - clhs404*clhs6 - clhs405*clhs9 + clhs53) + normalslave(2,2)*(-clhs12*clhs389 - clhs13*clhs403 - clhs14*clhs404 - clhs15*clhs405 + clhs399*clhs44 + clhs400*clhs45 + clhs401*clhs46 + clhs402*clhs47);
        const double clhs407 =     clhs406*normalslave(2,0)*penalty_parameter;
        const double clhs408 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs409 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs410 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs411 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs412 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs413 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs414 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs415 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs416 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs417 =     normalslave(0,0)*(-clhs16*clhs408 - clhs17*clhs414 - clhs18*clhs415 - clhs19*clhs416 + clhs32*clhs410 + clhs34*clhs411 + clhs36*clhs412 + clhs38*clhs413) + normalslave(0,1)*(-clhs1*clhs408 - clhs3*clhs414 + clhs40*clhs410 + clhs41*clhs411 + clhs412*clhs42 + clhs413*clhs43 - clhs415*clhs6 - clhs416*clhs9) + normalslave(0,2)*(-clhs12*clhs408 - clhs13*clhs414 - clhs14*clhs415 - clhs15*clhs416 + clhs39 + clhs410*clhs44 + clhs411*clhs45 + clhs412*clhs46 + clhs413*clhs47);
        const double clhs418 =     clhs417*normalslave(0,0)*penalty_parameter;
        const double clhs419 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs420 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs421 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs422 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs423 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs424 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs425 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs426 =     normalslave(2,0)*(-clhs16*clhs409 - clhs17*clhs423 - clhs18*clhs424 - clhs19*clhs425 + clhs32*clhs419 + clhs34*clhs420 + clhs36*clhs421 + clhs38*clhs422) + normalslave(2,1)*(-clhs1*clhs409 - clhs3*clhs423 + clhs40*clhs419 + clhs41*clhs420 + clhs42*clhs421 + clhs422*clhs43 - clhs424*clhs6 - clhs425*clhs9) + normalslave(2,2)*(-clhs12*clhs409 - clhs13*clhs423 - clhs14*clhs424 - clhs15*clhs425 + clhs419*clhs44 + clhs420*clhs45 + clhs421*clhs46 + clhs422*clhs47 + clhs53);
        const double clhs427 =     clhs426*normalslave(2,0)*penalty_parameter;
        const double clhs428 =     normalslave(0,0)*scale_factor;
        const double clhs429 =     normalslave(2,0)*scale_factor;
        const double clhs430 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs431 =     clhs30*normalslave(2,1)*penalty_parameter;
        const double clhs432 =     clhs48*normalslave(0,1);
        const double clhs433 =     clhs54*normalslave(2,1);
        const double clhs434 =     clhs60*normalslave(0,1)*penalty_parameter;
        const double clhs435 =     clhs66*normalslave(2,1)*penalty_parameter;
        const double clhs436 =     clhs72*normalslave(0,1)*penalty_parameter;
        const double clhs437 =     clhs78*normalslave(2,1)*penalty_parameter;
        const double clhs438 =     clhs84*normalslave(0,1)*penalty_parameter;
        const double clhs439 =     clhs90*normalslave(2,1)*penalty_parameter;
        const double clhs440 =     clhs96*normalslave(0,1)*penalty_parameter;
        const double clhs441 =     clhs102*normalslave(2,1)*penalty_parameter;
        const double clhs442 =     clhs108*normalslave(0,1)*penalty_parameter;
        const double clhs443 =     clhs114*normalslave(2,1)*penalty_parameter;
        const double clhs444 =     clhs120*normalslave(0,1)*penalty_parameter;
        const double clhs445 =     clhs126*normalslave(2,1)*penalty_parameter;
        const double clhs446 =     clhs132*normalslave(0,1)*penalty_parameter;
        const double clhs447 =     clhs138*normalslave(2,1)*penalty_parameter;
        const double clhs448 =     clhs144*normalslave(0,1)*penalty_parameter;
        const double clhs449 =     clhs150*normalslave(2,1)*penalty_parameter;
        const double clhs450 =     clhs156*normalslave(0,1)*penalty_parameter;
        const double clhs451 =     clhs162*normalslave(2,1)*penalty_parameter;
        const double clhs452 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs453 =     clhs174*normalslave(2,1)*penalty_parameter;
        const double clhs454 =     clhs180*normalslave(0,1)*penalty_parameter;
        const double clhs455 =     clhs186*normalslave(2,1)*penalty_parameter;
        const double clhs456 =     clhs197*normalslave(0,1)*penalty_parameter;
        const double clhs457 =     clhs206*normalslave(2,1)*penalty_parameter;
        const double clhs458 =     clhs217*normalslave(0,1)*penalty_parameter;
        const double clhs459 =     clhs226*normalslave(2,1)*penalty_parameter;
        const double clhs460 =     clhs237*normalslave(0,1)*penalty_parameter;
        const double clhs461 =     clhs246*normalslave(2,1)*penalty_parameter;
        const double clhs462 =     clhs257*normalslave(0,1)*penalty_parameter;
        const double clhs463 =     clhs266*normalslave(2,1)*penalty_parameter;
        const double clhs464 =     clhs277*normalslave(0,1)*penalty_parameter;
        const double clhs465 =     clhs286*normalslave(2,1)*penalty_parameter;
        const double clhs466 =     clhs297*normalslave(0,1)*penalty_parameter;
        const double clhs467 =     clhs306*normalslave(2,1)*penalty_parameter;
        const double clhs468 =     clhs317*normalslave(0,1)*penalty_parameter;
        const double clhs469 =     clhs326*normalslave(2,1)*penalty_parameter;
        const double clhs470 =     clhs337*normalslave(0,1)*penalty_parameter;
        const double clhs471 =     clhs346*normalslave(2,1)*penalty_parameter;
        const double clhs472 =     clhs357*normalslave(0,1)*penalty_parameter;
        const double clhs473 =     clhs366*normalslave(2,1)*penalty_parameter;
        const double clhs474 =     clhs377*normalslave(0,1)*penalty_parameter;
        const double clhs475 =     clhs386*normalslave(2,1)*penalty_parameter;
        const double clhs476 =     clhs397*normalslave(0,1)*penalty_parameter;
        const double clhs477 =     clhs406*normalslave(2,1)*penalty_parameter;
        const double clhs478 =     clhs417*normalslave(0,1)*penalty_parameter;
        const double clhs479 =     clhs426*normalslave(2,1)*penalty_parameter;
        const double clhs480 =     normalslave(0,1)*scale_factor;
        const double clhs481 =     normalslave(2,1)*scale_factor;
        const double clhs482 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs483 =     clhs30*normalslave(2,2)*penalty_parameter;
        const double clhs484 =     clhs48*normalslave(0,2);
        const double clhs485 =     clhs54*normalslave(2,2);
        const double clhs486 =     clhs60*normalslave(0,2)*penalty_parameter;
        const double clhs487 =     clhs66*normalslave(2,2)*penalty_parameter;
        const double clhs488 =     clhs72*normalslave(0,2)*penalty_parameter;
        const double clhs489 =     clhs78*normalslave(2,2)*penalty_parameter;
        const double clhs490 =     clhs84*normalslave(0,2)*penalty_parameter;
        const double clhs491 =     clhs90*normalslave(2,2)*penalty_parameter;
        const double clhs492 =     clhs96*normalslave(0,2)*penalty_parameter;
        const double clhs493 =     clhs102*normalslave(2,2)*penalty_parameter;
        const double clhs494 =     clhs108*normalslave(0,2)*penalty_parameter;
        const double clhs495 =     clhs114*normalslave(2,2)*penalty_parameter;
        const double clhs496 =     clhs120*normalslave(0,2)*penalty_parameter;
        const double clhs497 =     clhs126*normalslave(2,2)*penalty_parameter;
        const double clhs498 =     clhs132*normalslave(0,2)*penalty_parameter;
        const double clhs499 =     clhs138*normalslave(2,2)*penalty_parameter;
        const double clhs500 =     clhs144*normalslave(0,2)*penalty_parameter;
        const double clhs501 =     clhs150*normalslave(2,2)*penalty_parameter;
        const double clhs502 =     clhs156*normalslave(0,2)*penalty_parameter;
        const double clhs503 =     clhs162*normalslave(2,2)*penalty_parameter;
        const double clhs504 =     clhs168*normalslave(0,2)*penalty_parameter;
        const double clhs505 =     clhs174*normalslave(2,2)*penalty_parameter;
        const double clhs506 =     clhs180*normalslave(0,2)*penalty_parameter;
        const double clhs507 =     clhs186*normalslave(2,2)*penalty_parameter;
        const double clhs508 =     clhs197*normalslave(0,2)*penalty_parameter;
        const double clhs509 =     clhs206*normalslave(2,2)*penalty_parameter;
        const double clhs510 =     clhs217*normalslave(0,2)*penalty_parameter;
        const double clhs511 =     clhs226*normalslave(2,2)*penalty_parameter;
        const double clhs512 =     clhs237*normalslave(0,2)*penalty_parameter;
        const double clhs513 =     clhs246*normalslave(2,2)*penalty_parameter;
        const double clhs514 =     clhs257*normalslave(0,2)*penalty_parameter;
        const double clhs515 =     clhs266*normalslave(2,2)*penalty_parameter;
        const double clhs516 =     clhs277*normalslave(0,2)*penalty_parameter;
        const double clhs517 =     clhs286*normalslave(2,2)*penalty_parameter;
        const double clhs518 =     clhs297*normalslave(0,2)*penalty_parameter;
        const double clhs519 =     clhs306*normalslave(2,2)*penalty_parameter;
        const double clhs520 =     clhs317*normalslave(0,2)*penalty_parameter;
        const double clhs521 =     clhs326*normalslave(2,2)*penalty_parameter;
        const double clhs522 =     clhs337*normalslave(0,2)*penalty_parameter;
        const double clhs523 =     clhs346*normalslave(2,2)*penalty_parameter;
        const double clhs524 =     clhs357*normalslave(0,2)*penalty_parameter;
        const double clhs525 =     clhs366*normalslave(2,2)*penalty_parameter;
        const double clhs526 =     clhs377*normalslave(0,2)*penalty_parameter;
        const double clhs527 =     clhs386*normalslave(2,2)*penalty_parameter;
        const double clhs528 =     clhs397*normalslave(0,2)*penalty_parameter;
        const double clhs529 =     clhs406*normalslave(2,2)*penalty_parameter;
        const double clhs530 =     clhs417*normalslave(0,2)*penalty_parameter;
        const double clhs531 =     clhs426*normalslave(2,2)*penalty_parameter;
        const double clhs532 =     normalslave(0,2)*scale_factor;
        const double clhs533 =     normalslave(2,2)*scale_factor;
        const double clhs534 =     clhs20*normalslave(0,0);
        const double clhs535 =     clhs30*normalslave(2,0);
        const double clhs536 =     clhs60*normalslave(0,0);
        const double clhs537 =     clhs66*normalslave(2,0);
        const double clhs538 =     clhs72*normalslave(0,0);
        const double clhs539 =     clhs78*normalslave(2,0);
        const double clhs540 =     clhs84*normalslave(0,0);
        const double clhs541 =     clhs90*normalslave(2,0);
        const double clhs542 =     clhs96*normalslave(0,0);
        const double clhs543 =     clhs102*normalslave(2,0);
        const double clhs544 =     clhs108*normalslave(0,0);
        const double clhs545 =     clhs114*normalslave(2,0);
        const double clhs546 =     clhs120*normalslave(0,0);
        const double clhs547 =     clhs126*normalslave(2,0);
        const double clhs548 =     clhs132*normalslave(0,0);
        const double clhs549 =     clhs138*normalslave(2,0);
        const double clhs550 =     clhs144*normalslave(0,0);
        const double clhs551 =     clhs150*normalslave(2,0);
        const double clhs552 =     clhs156*normalslave(0,0);
        const double clhs553 =     clhs162*normalslave(2,0);
        const double clhs554 =     clhs168*normalslave(0,0);
        const double clhs555 =     clhs174*normalslave(2,0);
        const double clhs556 =     clhs180*normalslave(0,0);
        const double clhs557 =     clhs186*normalslave(2,0);
        const double clhs558 =     clhs20*normalslave(0,1);
        const double clhs559 =     clhs30*normalslave(2,1);
        const double clhs560 =     clhs60*normalslave(0,1);
        const double clhs561 =     clhs66*normalslave(2,1);
        const double clhs562 =     clhs72*normalslave(0,1);
        const double clhs563 =     clhs78*normalslave(2,1);
        const double clhs564 =     clhs84*normalslave(0,1);
        const double clhs565 =     clhs90*normalslave(2,1);
        const double clhs566 =     clhs96*normalslave(0,1);
        const double clhs567 =     clhs102*normalslave(2,1);
        const double clhs568 =     clhs108*normalslave(0,1);
        const double clhs569 =     clhs114*normalslave(2,1);
        const double clhs570 =     clhs120*normalslave(0,1);
        const double clhs571 =     clhs126*normalslave(2,1);
        const double clhs572 =     clhs132*normalslave(0,1);
        const double clhs573 =     clhs138*normalslave(2,1);
        const double clhs574 =     clhs144*normalslave(0,1);
        const double clhs575 =     clhs150*normalslave(2,1);
        const double clhs576 =     clhs156*normalslave(0,1);
        const double clhs577 =     clhs162*normalslave(2,1);
        const double clhs578 =     clhs168*normalslave(0,1);
        const double clhs579 =     clhs174*normalslave(2,1);
        const double clhs580 =     clhs180*normalslave(0,1);
        const double clhs581 =     clhs186*normalslave(2,1);
        const double clhs582 =     clhs20*normalslave(0,2);
        const double clhs583 =     clhs30*normalslave(2,2);
        const double clhs584 =     clhs60*normalslave(0,2);
        const double clhs585 =     clhs66*normalslave(2,2);
        const double clhs586 =     clhs72*normalslave(0,2);
        const double clhs587 =     clhs78*normalslave(2,2);
        const double clhs588 =     clhs84*normalslave(0,2);
        const double clhs589 =     clhs90*normalslave(2,2);
        const double clhs590 =     clhs96*normalslave(0,2);
        const double clhs591 =     clhs102*normalslave(2,2);
        const double clhs592 =     clhs108*normalslave(0,2);
        const double clhs593 =     clhs114*normalslave(2,2);
        const double clhs594 =     clhs120*normalslave(0,2);
        const double clhs595 =     clhs126*normalslave(2,2);
        const double clhs596 =     clhs132*normalslave(0,2);
        const double clhs597 =     clhs138*normalslave(2,2);
        const double clhs598 =     clhs144*normalslave(0,2);
        const double clhs599 =     clhs150*normalslave(2,2);
        const double clhs600 =     clhs156*normalslave(0,2);
        const double clhs601 =     clhs162*normalslave(2,2);
        const double clhs602 =     clhs168*normalslave(0,2);
        const double clhs603 =     clhs174*normalslave(2,2);
        const double clhs604 =     clhs180*normalslave(0,2);
        const double clhs605 =     clhs186*normalslave(2,2);
        const double clhs606 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs49 - clhs22*clhs31 + clhs23*clhs55;
        lhs(0,1)=-clhs0*clhs61 - clhs22*clhs67 + clhs49*clhs56 + clhs55*clhs62;
        lhs(0,2)=-clhs0*clhs73 - clhs22*clhs79 + clhs49*clhs68 + clhs55*clhs74;
        lhs(0,3)=-clhs0*clhs85 - clhs22*clhs91 + clhs49*clhs80 + clhs55*clhs86;
        lhs(0,4)=-clhs0*clhs97 - clhs103*clhs22 + clhs49*clhs92 + clhs55*clhs98;
        lhs(0,5)=-clhs0*clhs109 + clhs104*clhs49 + clhs110*clhs55 - clhs115*clhs22;
        lhs(0,6)=-clhs0*clhs121 + clhs116*clhs49 + clhs122*clhs55 - clhs127*clhs22;
        lhs(0,7)=-clhs0*clhs133 + clhs128*clhs49 + clhs134*clhs55 - clhs139*clhs22;
        lhs(0,8)=-clhs0*clhs145 + clhs140*clhs49 + clhs146*clhs55 - clhs151*clhs22;
        lhs(0,9)=-clhs0*clhs157 + clhs152*clhs49 + clhs158*clhs55 - clhs163*clhs22;
        lhs(0,10)=-clhs0*clhs169 + clhs164*clhs49 + clhs170*clhs55 - clhs175*clhs22;
        lhs(0,11)=-clhs0*clhs181 + clhs176*clhs49 + clhs182*clhs55 - clhs187*clhs22;
        lhs(0,12)=clhs0*clhs198 + clhs188*clhs49 + clhs189*clhs55 + clhs207*clhs22;
        lhs(0,13)=clhs0*clhs218 + clhs208*clhs49 + clhs209*clhs55 + clhs22*clhs227;
        lhs(0,14)=clhs0*clhs238 + clhs22*clhs247 + clhs228*clhs49 + clhs229*clhs55;
        lhs(0,15)=clhs0*clhs258 + clhs22*clhs267 + clhs248*clhs49 + clhs249*clhs55;
        lhs(0,16)=clhs0*clhs278 + clhs22*clhs287 + clhs268*clhs49 + clhs269*clhs55;
        lhs(0,17)=clhs0*clhs298 + clhs22*clhs307 + clhs288*clhs49 + clhs289*clhs55;
        lhs(0,18)=clhs0*clhs318 + clhs22*clhs327 + clhs308*clhs49 + clhs309*clhs55;
        lhs(0,19)=clhs0*clhs338 + clhs22*clhs347 + clhs328*clhs49 + clhs329*clhs55;
        lhs(0,20)=clhs0*clhs358 + clhs22*clhs367 + clhs348*clhs49 + clhs349*clhs55;
        lhs(0,21)=clhs0*clhs378 + clhs22*clhs387 + clhs368*clhs49 + clhs369*clhs55;
        lhs(0,22)=clhs0*clhs398 + clhs22*clhs407 + clhs388*clhs49 + clhs389*clhs55;
        lhs(0,23)=clhs0*clhs418 + clhs22*clhs427 + clhs408*clhs49 + clhs409*clhs55;
        lhs(0,24)=clhs0*clhs428;
        lhs(0,25)=0;
        lhs(0,26)=clhs22*clhs429;
        lhs(0,27)=0;
        lhs(1,0)=-clhs0*clhs430 + clhs2*clhs432 - clhs22*clhs431 + clhs23*clhs433;
        lhs(1,1)=-clhs0*clhs434 - clhs22*clhs435 + clhs432*clhs56 + clhs433*clhs62;
        lhs(1,2)=-clhs0*clhs436 - clhs22*clhs437 + clhs432*clhs68 + clhs433*clhs74;
        lhs(1,3)=-clhs0*clhs438 - clhs22*clhs439 + clhs432*clhs80 + clhs433*clhs86;
        lhs(1,4)=-clhs0*clhs440 - clhs22*clhs441 + clhs432*clhs92 + clhs433*clhs98;
        lhs(1,5)=-clhs0*clhs442 + clhs104*clhs432 + clhs110*clhs433 - clhs22*clhs443;
        lhs(1,6)=-clhs0*clhs444 + clhs116*clhs432 + clhs122*clhs433 - clhs22*clhs445;
        lhs(1,7)=-clhs0*clhs446 + clhs128*clhs432 + clhs134*clhs433 - clhs22*clhs447;
        lhs(1,8)=-clhs0*clhs448 + clhs140*clhs432 + clhs146*clhs433 - clhs22*clhs449;
        lhs(1,9)=-clhs0*clhs450 + clhs152*clhs432 + clhs158*clhs433 - clhs22*clhs451;
        lhs(1,10)=-clhs0*clhs452 + clhs164*clhs432 + clhs170*clhs433 - clhs22*clhs453;
        lhs(1,11)=-clhs0*clhs454 + clhs176*clhs432 + clhs182*clhs433 - clhs22*clhs455;
        lhs(1,12)=clhs0*clhs456 + clhs188*clhs432 + clhs189*clhs433 + clhs22*clhs457;
        lhs(1,13)=clhs0*clhs458 + clhs208*clhs432 + clhs209*clhs433 + clhs22*clhs459;
        lhs(1,14)=clhs0*clhs460 + clhs22*clhs461 + clhs228*clhs432 + clhs229*clhs433;
        lhs(1,15)=clhs0*clhs462 + clhs22*clhs463 + clhs248*clhs432 + clhs249*clhs433;
        lhs(1,16)=clhs0*clhs464 + clhs22*clhs465 + clhs268*clhs432 + clhs269*clhs433;
        lhs(1,17)=clhs0*clhs466 + clhs22*clhs467 + clhs288*clhs432 + clhs289*clhs433;
        lhs(1,18)=clhs0*clhs468 + clhs22*clhs469 + clhs308*clhs432 + clhs309*clhs433;
        lhs(1,19)=clhs0*clhs470 + clhs22*clhs471 + clhs328*clhs432 + clhs329*clhs433;
        lhs(1,20)=clhs0*clhs472 + clhs22*clhs473 + clhs348*clhs432 + clhs349*clhs433;
        lhs(1,21)=clhs0*clhs474 + clhs22*clhs475 + clhs368*clhs432 + clhs369*clhs433;
        lhs(1,22)=clhs0*clhs476 + clhs22*clhs477 + clhs388*clhs432 + clhs389*clhs433;
        lhs(1,23)=clhs0*clhs478 + clhs22*clhs479 + clhs408*clhs432 + clhs409*clhs433;
        lhs(1,24)=clhs0*clhs480;
        lhs(1,25)=0;
        lhs(1,26)=clhs22*clhs481;
        lhs(1,27)=0;
        lhs(2,0)=-clhs0*clhs482 + clhs2*clhs484 - clhs22*clhs483 + clhs23*clhs485;
        lhs(2,1)=-clhs0*clhs486 - clhs22*clhs487 + clhs484*clhs56 + clhs485*clhs62;
        lhs(2,2)=-clhs0*clhs488 - clhs22*clhs489 + clhs484*clhs68 + clhs485*clhs74;
        lhs(2,3)=-clhs0*clhs490 - clhs22*clhs491 + clhs484*clhs80 + clhs485*clhs86;
        lhs(2,4)=-clhs0*clhs492 - clhs22*clhs493 + clhs484*clhs92 + clhs485*clhs98;
        lhs(2,5)=-clhs0*clhs494 + clhs104*clhs484 + clhs110*clhs485 - clhs22*clhs495;
        lhs(2,6)=-clhs0*clhs496 + clhs116*clhs484 + clhs122*clhs485 - clhs22*clhs497;
        lhs(2,7)=-clhs0*clhs498 + clhs128*clhs484 + clhs134*clhs485 - clhs22*clhs499;
        lhs(2,8)=-clhs0*clhs500 + clhs140*clhs484 + clhs146*clhs485 - clhs22*clhs501;
        lhs(2,9)=-clhs0*clhs502 + clhs152*clhs484 + clhs158*clhs485 - clhs22*clhs503;
        lhs(2,10)=-clhs0*clhs504 + clhs164*clhs484 + clhs170*clhs485 - clhs22*clhs505;
        lhs(2,11)=-clhs0*clhs506 + clhs176*clhs484 + clhs182*clhs485 - clhs22*clhs507;
        lhs(2,12)=clhs0*clhs508 + clhs188*clhs484 + clhs189*clhs485 + clhs22*clhs509;
        lhs(2,13)=clhs0*clhs510 + clhs208*clhs484 + clhs209*clhs485 + clhs22*clhs511;
        lhs(2,14)=clhs0*clhs512 + clhs22*clhs513 + clhs228*clhs484 + clhs229*clhs485;
        lhs(2,15)=clhs0*clhs514 + clhs22*clhs515 + clhs248*clhs484 + clhs249*clhs485;
        lhs(2,16)=clhs0*clhs516 + clhs22*clhs517 + clhs268*clhs484 + clhs269*clhs485;
        lhs(2,17)=clhs0*clhs518 + clhs22*clhs519 + clhs288*clhs484 + clhs289*clhs485;
        lhs(2,18)=clhs0*clhs520 + clhs22*clhs521 + clhs308*clhs484 + clhs309*clhs485;
        lhs(2,19)=clhs0*clhs522 + clhs22*clhs523 + clhs328*clhs484 + clhs329*clhs485;
        lhs(2,20)=clhs0*clhs524 + clhs22*clhs525 + clhs348*clhs484 + clhs349*clhs485;
        lhs(2,21)=clhs0*clhs526 + clhs22*clhs527 + clhs368*clhs484 + clhs369*clhs485;
        lhs(2,22)=clhs0*clhs528 + clhs22*clhs529 + clhs388*clhs484 + clhs389*clhs485;
        lhs(2,23)=clhs0*clhs530 + clhs22*clhs531 + clhs408*clhs484 + clhs409*clhs485;
        lhs(2,24)=clhs0*clhs532;
        lhs(2,25)=0;
        lhs(2,26)=clhs22*clhs533;
        lhs(2,27)=0;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs55 + clhs49*clhs5;
        lhs(3,1)=-clhs24*clhs67 - clhs4*clhs61 + clhs49*clhs57 + clhs55*clhs63;
        lhs(3,2)=-clhs24*clhs79 - clhs4*clhs73 + clhs49*clhs69 + clhs55*clhs75;
        lhs(3,3)=-clhs24*clhs91 - clhs4*clhs85 + clhs49*clhs81 + clhs55*clhs87;
        lhs(3,4)=-clhs103*clhs24 - clhs4*clhs97 + clhs49*clhs93 + clhs55*clhs99;
        lhs(3,5)=clhs105*clhs49 - clhs109*clhs4 + clhs111*clhs55 - clhs115*clhs24;
        lhs(3,6)=clhs117*clhs49 - clhs121*clhs4 + clhs123*clhs55 - clhs127*clhs24;
        lhs(3,7)=clhs129*clhs49 - clhs133*clhs4 + clhs135*clhs55 - clhs139*clhs24;
        lhs(3,8)=clhs141*clhs49 - clhs145*clhs4 + clhs147*clhs55 - clhs151*clhs24;
        lhs(3,9)=clhs153*clhs49 - clhs157*clhs4 + clhs159*clhs55 - clhs163*clhs24;
        lhs(3,10)=clhs165*clhs49 - clhs169*clhs4 + clhs171*clhs55 - clhs175*clhs24;
        lhs(3,11)=clhs177*clhs49 - clhs181*clhs4 + clhs183*clhs55 - clhs187*clhs24;
        lhs(3,12)=clhs194*clhs49 + clhs198*clhs4 + clhs203*clhs55 + clhs207*clhs24;
        lhs(3,13)=clhs214*clhs49 + clhs218*clhs4 + clhs223*clhs55 + clhs227*clhs24;
        lhs(3,14)=clhs234*clhs49 + clhs238*clhs4 + clhs24*clhs247 + clhs243*clhs55;
        lhs(3,15)=clhs24*clhs267 + clhs254*clhs49 + clhs258*clhs4 + clhs263*clhs55;
        lhs(3,16)=clhs24*clhs287 + clhs274*clhs49 + clhs278*clhs4 + clhs283*clhs55;
        lhs(3,17)=clhs24*clhs307 + clhs294*clhs49 + clhs298*clhs4 + clhs303*clhs55;
        lhs(3,18)=clhs24*clhs327 + clhs314*clhs49 + clhs318*clhs4 + clhs323*clhs55;
        lhs(3,19)=clhs24*clhs347 + clhs334*clhs49 + clhs338*clhs4 + clhs343*clhs55;
        lhs(3,20)=clhs24*clhs367 + clhs354*clhs49 + clhs358*clhs4 + clhs363*clhs55;
        lhs(3,21)=clhs24*clhs387 + clhs374*clhs49 + clhs378*clhs4 + clhs383*clhs55;
        lhs(3,22)=clhs24*clhs407 + clhs394*clhs49 + clhs398*clhs4 + clhs403*clhs55;
        lhs(3,23)=clhs24*clhs427 + clhs4*clhs418 + clhs414*clhs49 + clhs423*clhs55;
        lhs(3,24)=clhs4*clhs428;
        lhs(3,25)=0;
        lhs(3,26)=clhs24*clhs429;
        lhs(3,27)=0;
        lhs(4,0)=-clhs24*clhs431 + clhs25*clhs433 - clhs4*clhs430 + clhs432*clhs5;
        lhs(4,1)=-clhs24*clhs435 - clhs4*clhs434 + clhs432*clhs57 + clhs433*clhs63;
        lhs(4,2)=-clhs24*clhs437 - clhs4*clhs436 + clhs432*clhs69 + clhs433*clhs75;
        lhs(4,3)=-clhs24*clhs439 - clhs4*clhs438 + clhs432*clhs81 + clhs433*clhs87;
        lhs(4,4)=-clhs24*clhs441 - clhs4*clhs440 + clhs432*clhs93 + clhs433*clhs99;
        lhs(4,5)=clhs105*clhs432 + clhs111*clhs433 - clhs24*clhs443 - clhs4*clhs442;
        lhs(4,6)=clhs117*clhs432 + clhs123*clhs433 - clhs24*clhs445 - clhs4*clhs444;
        lhs(4,7)=clhs129*clhs432 + clhs135*clhs433 - clhs24*clhs447 - clhs4*clhs446;
        lhs(4,8)=clhs141*clhs432 + clhs147*clhs433 - clhs24*clhs449 - clhs4*clhs448;
        lhs(4,9)=clhs153*clhs432 + clhs159*clhs433 - clhs24*clhs451 - clhs4*clhs450;
        lhs(4,10)=clhs165*clhs432 + clhs171*clhs433 - clhs24*clhs453 - clhs4*clhs452;
        lhs(4,11)=clhs177*clhs432 + clhs183*clhs433 - clhs24*clhs455 - clhs4*clhs454;
        lhs(4,12)=clhs194*clhs432 + clhs203*clhs433 + clhs24*clhs457 + clhs4*clhs456;
        lhs(4,13)=clhs214*clhs432 + clhs223*clhs433 + clhs24*clhs459 + clhs4*clhs458;
        lhs(4,14)=clhs234*clhs432 + clhs24*clhs461 + clhs243*clhs433 + clhs4*clhs460;
        lhs(4,15)=clhs24*clhs463 + clhs254*clhs432 + clhs263*clhs433 + clhs4*clhs462;
        lhs(4,16)=clhs24*clhs465 + clhs274*clhs432 + clhs283*clhs433 + clhs4*clhs464;
        lhs(4,17)=clhs24*clhs467 + clhs294*clhs432 + clhs303*clhs433 + clhs4*clhs466;
        lhs(4,18)=clhs24*clhs469 + clhs314*clhs432 + clhs323*clhs433 + clhs4*clhs468;
        lhs(4,19)=clhs24*clhs471 + clhs334*clhs432 + clhs343*clhs433 + clhs4*clhs470;
        lhs(4,20)=clhs24*clhs473 + clhs354*clhs432 + clhs363*clhs433 + clhs4*clhs472;
        lhs(4,21)=clhs24*clhs475 + clhs374*clhs432 + clhs383*clhs433 + clhs4*clhs474;
        lhs(4,22)=clhs24*clhs477 + clhs394*clhs432 + clhs4*clhs476 + clhs403*clhs433;
        lhs(4,23)=clhs24*clhs479 + clhs4*clhs478 + clhs414*clhs432 + clhs423*clhs433;
        lhs(4,24)=clhs4*clhs480;
        lhs(4,25)=0;
        lhs(4,26)=clhs24*clhs481;
        lhs(4,27)=0;
        lhs(5,0)=-clhs24*clhs483 + clhs25*clhs485 - clhs4*clhs482 + clhs484*clhs5;
        lhs(5,1)=-clhs24*clhs487 - clhs4*clhs486 + clhs484*clhs57 + clhs485*clhs63;
        lhs(5,2)=-clhs24*clhs489 - clhs4*clhs488 + clhs484*clhs69 + clhs485*clhs75;
        lhs(5,3)=-clhs24*clhs491 - clhs4*clhs490 + clhs484*clhs81 + clhs485*clhs87;
        lhs(5,4)=-clhs24*clhs493 - clhs4*clhs492 + clhs484*clhs93 + clhs485*clhs99;
        lhs(5,5)=clhs105*clhs484 + clhs111*clhs485 - clhs24*clhs495 - clhs4*clhs494;
        lhs(5,6)=clhs117*clhs484 + clhs123*clhs485 - clhs24*clhs497 - clhs4*clhs496;
        lhs(5,7)=clhs129*clhs484 + clhs135*clhs485 - clhs24*clhs499 - clhs4*clhs498;
        lhs(5,8)=clhs141*clhs484 + clhs147*clhs485 - clhs24*clhs501 - clhs4*clhs500;
        lhs(5,9)=clhs153*clhs484 + clhs159*clhs485 - clhs24*clhs503 - clhs4*clhs502;
        lhs(5,10)=clhs165*clhs484 + clhs171*clhs485 - clhs24*clhs505 - clhs4*clhs504;
        lhs(5,11)=clhs177*clhs484 + clhs183*clhs485 - clhs24*clhs507 - clhs4*clhs506;
        lhs(5,12)=clhs194*clhs484 + clhs203*clhs485 + clhs24*clhs509 + clhs4*clhs508;
        lhs(5,13)=clhs214*clhs484 + clhs223*clhs485 + clhs24*clhs511 + clhs4*clhs510;
        lhs(5,14)=clhs234*clhs484 + clhs24*clhs513 + clhs243*clhs485 + clhs4*clhs512;
        lhs(5,15)=clhs24*clhs515 + clhs254*clhs484 + clhs263*clhs485 + clhs4*clhs514;
        lhs(5,16)=clhs24*clhs517 + clhs274*clhs484 + clhs283*clhs485 + clhs4*clhs516;
        lhs(5,17)=clhs24*clhs519 + clhs294*clhs484 + clhs303*clhs485 + clhs4*clhs518;
        lhs(5,18)=clhs24*clhs521 + clhs314*clhs484 + clhs323*clhs485 + clhs4*clhs520;
        lhs(5,19)=clhs24*clhs523 + clhs334*clhs484 + clhs343*clhs485 + clhs4*clhs522;
        lhs(5,20)=clhs24*clhs525 + clhs354*clhs484 + clhs363*clhs485 + clhs4*clhs524;
        lhs(5,21)=clhs24*clhs527 + clhs374*clhs484 + clhs383*clhs485 + clhs4*clhs526;
        lhs(5,22)=clhs24*clhs529 + clhs394*clhs484 + clhs4*clhs528 + clhs403*clhs485;
        lhs(5,23)=clhs24*clhs531 + clhs4*clhs530 + clhs414*clhs484 + clhs423*clhs485;
        lhs(5,24)=clhs4*clhs532;
        lhs(5,25)=0;
        lhs(5,26)=clhs24*clhs533;
        lhs(5,27)=0;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs55 + clhs49*clhs8;
        lhs(6,1)=-clhs26*clhs67 + clhs49*clhs58 + clhs55*clhs64 - clhs61*clhs7;
        lhs(6,2)=-clhs26*clhs79 + clhs49*clhs70 + clhs55*clhs76 - clhs7*clhs73;
        lhs(6,3)=-clhs26*clhs91 + clhs49*clhs82 + clhs55*clhs88 - clhs7*clhs85;
        lhs(6,4)=clhs100*clhs55 - clhs103*clhs26 + clhs49*clhs94 - clhs7*clhs97;
        lhs(6,5)=clhs106*clhs49 - clhs109*clhs7 + clhs112*clhs55 - clhs115*clhs26;
        lhs(6,6)=clhs118*clhs49 - clhs121*clhs7 + clhs124*clhs55 - clhs127*clhs26;
        lhs(6,7)=clhs130*clhs49 - clhs133*clhs7 + clhs136*clhs55 - clhs139*clhs26;
        lhs(6,8)=clhs142*clhs49 - clhs145*clhs7 + clhs148*clhs55 - clhs151*clhs26;
        lhs(6,9)=clhs154*clhs49 - clhs157*clhs7 + clhs160*clhs55 - clhs163*clhs26;
        lhs(6,10)=clhs166*clhs49 - clhs169*clhs7 + clhs172*clhs55 - clhs175*clhs26;
        lhs(6,11)=clhs178*clhs49 - clhs181*clhs7 + clhs184*clhs55 - clhs187*clhs26;
        lhs(6,12)=clhs195*clhs49 + clhs198*clhs7 + clhs204*clhs55 + clhs207*clhs26;
        lhs(6,13)=clhs215*clhs49 + clhs218*clhs7 + clhs224*clhs55 + clhs227*clhs26;
        lhs(6,14)=clhs235*clhs49 + clhs238*clhs7 + clhs244*clhs55 + clhs247*clhs26;
        lhs(6,15)=clhs255*clhs49 + clhs258*clhs7 + clhs26*clhs267 + clhs264*clhs55;
        lhs(6,16)=clhs26*clhs287 + clhs275*clhs49 + clhs278*clhs7 + clhs284*clhs55;
        lhs(6,17)=clhs26*clhs307 + clhs295*clhs49 + clhs298*clhs7 + clhs304*clhs55;
        lhs(6,18)=clhs26*clhs327 + clhs315*clhs49 + clhs318*clhs7 + clhs324*clhs55;
        lhs(6,19)=clhs26*clhs347 + clhs335*clhs49 + clhs338*clhs7 + clhs344*clhs55;
        lhs(6,20)=clhs26*clhs367 + clhs355*clhs49 + clhs358*clhs7 + clhs364*clhs55;
        lhs(6,21)=clhs26*clhs387 + clhs375*clhs49 + clhs378*clhs7 + clhs384*clhs55;
        lhs(6,22)=clhs26*clhs407 + clhs395*clhs49 + clhs398*clhs7 + clhs404*clhs55;
        lhs(6,23)=clhs26*clhs427 + clhs415*clhs49 + clhs418*clhs7 + clhs424*clhs55;
        lhs(6,24)=clhs428*clhs7;
        lhs(6,25)=0;
        lhs(6,26)=clhs26*clhs429;
        lhs(6,27)=0;
        lhs(7,0)=-clhs26*clhs431 + clhs27*clhs433 - clhs430*clhs7 + clhs432*clhs8;
        lhs(7,1)=-clhs26*clhs435 + clhs432*clhs58 + clhs433*clhs64 - clhs434*clhs7;
        lhs(7,2)=-clhs26*clhs437 + clhs432*clhs70 + clhs433*clhs76 - clhs436*clhs7;
        lhs(7,3)=-clhs26*clhs439 + clhs432*clhs82 + clhs433*clhs88 - clhs438*clhs7;
        lhs(7,4)=clhs100*clhs433 - clhs26*clhs441 + clhs432*clhs94 - clhs440*clhs7;
        lhs(7,5)=clhs106*clhs432 + clhs112*clhs433 - clhs26*clhs443 - clhs442*clhs7;
        lhs(7,6)=clhs118*clhs432 + clhs124*clhs433 - clhs26*clhs445 - clhs444*clhs7;
        lhs(7,7)=clhs130*clhs432 + clhs136*clhs433 - clhs26*clhs447 - clhs446*clhs7;
        lhs(7,8)=clhs142*clhs432 + clhs148*clhs433 - clhs26*clhs449 - clhs448*clhs7;
        lhs(7,9)=clhs154*clhs432 + clhs160*clhs433 - clhs26*clhs451 - clhs450*clhs7;
        lhs(7,10)=clhs166*clhs432 + clhs172*clhs433 - clhs26*clhs453 - clhs452*clhs7;
        lhs(7,11)=clhs178*clhs432 + clhs184*clhs433 - clhs26*clhs455 - clhs454*clhs7;
        lhs(7,12)=clhs195*clhs432 + clhs204*clhs433 + clhs26*clhs457 + clhs456*clhs7;
        lhs(7,13)=clhs215*clhs432 + clhs224*clhs433 + clhs26*clhs459 + clhs458*clhs7;
        lhs(7,14)=clhs235*clhs432 + clhs244*clhs433 + clhs26*clhs461 + clhs460*clhs7;
        lhs(7,15)=clhs255*clhs432 + clhs26*clhs463 + clhs264*clhs433 + clhs462*clhs7;
        lhs(7,16)=clhs26*clhs465 + clhs275*clhs432 + clhs284*clhs433 + clhs464*clhs7;
        lhs(7,17)=clhs26*clhs467 + clhs295*clhs432 + clhs304*clhs433 + clhs466*clhs7;
        lhs(7,18)=clhs26*clhs469 + clhs315*clhs432 + clhs324*clhs433 + clhs468*clhs7;
        lhs(7,19)=clhs26*clhs471 + clhs335*clhs432 + clhs344*clhs433 + clhs470*clhs7;
        lhs(7,20)=clhs26*clhs473 + clhs355*clhs432 + clhs364*clhs433 + clhs472*clhs7;
        lhs(7,21)=clhs26*clhs475 + clhs375*clhs432 + clhs384*clhs433 + clhs474*clhs7;
        lhs(7,22)=clhs26*clhs477 + clhs395*clhs432 + clhs404*clhs433 + clhs476*clhs7;
        lhs(7,23)=clhs26*clhs479 + clhs415*clhs432 + clhs424*clhs433 + clhs478*clhs7;
        lhs(7,24)=clhs480*clhs7;
        lhs(7,25)=0;
        lhs(7,26)=clhs26*clhs481;
        lhs(7,27)=0;
        lhs(8,0)=-clhs26*clhs483 + clhs27*clhs485 - clhs482*clhs7 + clhs484*clhs8;
        lhs(8,1)=-clhs26*clhs487 + clhs484*clhs58 + clhs485*clhs64 - clhs486*clhs7;
        lhs(8,2)=-clhs26*clhs489 + clhs484*clhs70 + clhs485*clhs76 - clhs488*clhs7;
        lhs(8,3)=-clhs26*clhs491 + clhs484*clhs82 + clhs485*clhs88 - clhs490*clhs7;
        lhs(8,4)=clhs100*clhs485 - clhs26*clhs493 + clhs484*clhs94 - clhs492*clhs7;
        lhs(8,5)=clhs106*clhs484 + clhs112*clhs485 - clhs26*clhs495 - clhs494*clhs7;
        lhs(8,6)=clhs118*clhs484 + clhs124*clhs485 - clhs26*clhs497 - clhs496*clhs7;
        lhs(8,7)=clhs130*clhs484 + clhs136*clhs485 - clhs26*clhs499 - clhs498*clhs7;
        lhs(8,8)=clhs142*clhs484 + clhs148*clhs485 - clhs26*clhs501 - clhs500*clhs7;
        lhs(8,9)=clhs154*clhs484 + clhs160*clhs485 - clhs26*clhs503 - clhs502*clhs7;
        lhs(8,10)=clhs166*clhs484 + clhs172*clhs485 - clhs26*clhs505 - clhs504*clhs7;
        lhs(8,11)=clhs178*clhs484 + clhs184*clhs485 - clhs26*clhs507 - clhs506*clhs7;
        lhs(8,12)=clhs195*clhs484 + clhs204*clhs485 + clhs26*clhs509 + clhs508*clhs7;
        lhs(8,13)=clhs215*clhs484 + clhs224*clhs485 + clhs26*clhs511 + clhs510*clhs7;
        lhs(8,14)=clhs235*clhs484 + clhs244*clhs485 + clhs26*clhs513 + clhs512*clhs7;
        lhs(8,15)=clhs255*clhs484 + clhs26*clhs515 + clhs264*clhs485 + clhs514*clhs7;
        lhs(8,16)=clhs26*clhs517 + clhs275*clhs484 + clhs284*clhs485 + clhs516*clhs7;
        lhs(8,17)=clhs26*clhs519 + clhs295*clhs484 + clhs304*clhs485 + clhs518*clhs7;
        lhs(8,18)=clhs26*clhs521 + clhs315*clhs484 + clhs324*clhs485 + clhs520*clhs7;
        lhs(8,19)=clhs26*clhs523 + clhs335*clhs484 + clhs344*clhs485 + clhs522*clhs7;
        lhs(8,20)=clhs26*clhs525 + clhs355*clhs484 + clhs364*clhs485 + clhs524*clhs7;
        lhs(8,21)=clhs26*clhs527 + clhs375*clhs484 + clhs384*clhs485 + clhs526*clhs7;
        lhs(8,22)=clhs26*clhs529 + clhs395*clhs484 + clhs404*clhs485 + clhs528*clhs7;
        lhs(8,23)=clhs26*clhs531 + clhs415*clhs484 + clhs424*clhs485 + clhs530*clhs7;
        lhs(8,24)=clhs532*clhs7;
        lhs(8,25)=0;
        lhs(8,26)=clhs26*clhs533;
        lhs(8,27)=0;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs49 - clhs28*clhs31 + clhs29*clhs55;
        lhs(9,1)=-clhs10*clhs61 - clhs28*clhs67 + clhs49*clhs59 + clhs55*clhs65;
        lhs(9,2)=-clhs10*clhs73 - clhs28*clhs79 + clhs49*clhs71 + clhs55*clhs77;
        lhs(9,3)=-clhs10*clhs85 - clhs28*clhs91 + clhs49*clhs83 + clhs55*clhs89;
        lhs(9,4)=-clhs10*clhs97 + clhs101*clhs55 - clhs103*clhs28 + clhs49*clhs95;
        lhs(9,5)=-clhs10*clhs109 + clhs107*clhs49 + clhs113*clhs55 - clhs115*clhs28;
        lhs(9,6)=-clhs10*clhs121 + clhs119*clhs49 + clhs125*clhs55 - clhs127*clhs28;
        lhs(9,7)=-clhs10*clhs133 + clhs131*clhs49 + clhs137*clhs55 - clhs139*clhs28;
        lhs(9,8)=-clhs10*clhs145 + clhs143*clhs49 + clhs149*clhs55 - clhs151*clhs28;
        lhs(9,9)=-clhs10*clhs157 + clhs155*clhs49 + clhs161*clhs55 - clhs163*clhs28;
        lhs(9,10)=-clhs10*clhs169 + clhs167*clhs49 + clhs173*clhs55 - clhs175*clhs28;
        lhs(9,11)=-clhs10*clhs181 + clhs179*clhs49 + clhs185*clhs55 - clhs187*clhs28;
        lhs(9,12)=clhs10*clhs198 + clhs196*clhs49 + clhs205*clhs55 + clhs207*clhs28;
        lhs(9,13)=clhs10*clhs218 + clhs216*clhs49 + clhs225*clhs55 + clhs227*clhs28;
        lhs(9,14)=clhs10*clhs238 + clhs236*clhs49 + clhs245*clhs55 + clhs247*clhs28;
        lhs(9,15)=clhs10*clhs258 + clhs256*clhs49 + clhs265*clhs55 + clhs267*clhs28;
        lhs(9,16)=clhs10*clhs278 + clhs276*clhs49 + clhs28*clhs287 + clhs285*clhs55;
        lhs(9,17)=clhs10*clhs298 + clhs28*clhs307 + clhs296*clhs49 + clhs305*clhs55;
        lhs(9,18)=clhs10*clhs318 + clhs28*clhs327 + clhs316*clhs49 + clhs325*clhs55;
        lhs(9,19)=clhs10*clhs338 + clhs28*clhs347 + clhs336*clhs49 + clhs345*clhs55;
        lhs(9,20)=clhs10*clhs358 + clhs28*clhs367 + clhs356*clhs49 + clhs365*clhs55;
        lhs(9,21)=clhs10*clhs378 + clhs28*clhs387 + clhs376*clhs49 + clhs385*clhs55;
        lhs(9,22)=clhs10*clhs398 + clhs28*clhs407 + clhs396*clhs49 + clhs405*clhs55;
        lhs(9,23)=clhs10*clhs418 + clhs28*clhs427 + clhs416*clhs49 + clhs425*clhs55;
        lhs(9,24)=clhs10*clhs428;
        lhs(9,25)=0;
        lhs(9,26)=clhs28*clhs429;
        lhs(9,27)=0;
        lhs(10,0)=-clhs10*clhs430 + clhs11*clhs432 - clhs28*clhs431 + clhs29*clhs433;
        lhs(10,1)=-clhs10*clhs434 - clhs28*clhs435 + clhs432*clhs59 + clhs433*clhs65;
        lhs(10,2)=-clhs10*clhs436 - clhs28*clhs437 + clhs432*clhs71 + clhs433*clhs77;
        lhs(10,3)=-clhs10*clhs438 - clhs28*clhs439 + clhs432*clhs83 + clhs433*clhs89;
        lhs(10,4)=-clhs10*clhs440 + clhs101*clhs433 - clhs28*clhs441 + clhs432*clhs95;
        lhs(10,5)=-clhs10*clhs442 + clhs107*clhs432 + clhs113*clhs433 - clhs28*clhs443;
        lhs(10,6)=-clhs10*clhs444 + clhs119*clhs432 + clhs125*clhs433 - clhs28*clhs445;
        lhs(10,7)=-clhs10*clhs446 + clhs131*clhs432 + clhs137*clhs433 - clhs28*clhs447;
        lhs(10,8)=-clhs10*clhs448 + clhs143*clhs432 + clhs149*clhs433 - clhs28*clhs449;
        lhs(10,9)=-clhs10*clhs450 + clhs155*clhs432 + clhs161*clhs433 - clhs28*clhs451;
        lhs(10,10)=-clhs10*clhs452 + clhs167*clhs432 + clhs173*clhs433 - clhs28*clhs453;
        lhs(10,11)=-clhs10*clhs454 + clhs179*clhs432 + clhs185*clhs433 - clhs28*clhs455;
        lhs(10,12)=clhs10*clhs456 + clhs196*clhs432 + clhs205*clhs433 + clhs28*clhs457;
        lhs(10,13)=clhs10*clhs458 + clhs216*clhs432 + clhs225*clhs433 + clhs28*clhs459;
        lhs(10,14)=clhs10*clhs460 + clhs236*clhs432 + clhs245*clhs433 + clhs28*clhs461;
        lhs(10,15)=clhs10*clhs462 + clhs256*clhs432 + clhs265*clhs433 + clhs28*clhs463;
        lhs(10,16)=clhs10*clhs464 + clhs276*clhs432 + clhs28*clhs465 + clhs285*clhs433;
        lhs(10,17)=clhs10*clhs466 + clhs28*clhs467 + clhs296*clhs432 + clhs305*clhs433;
        lhs(10,18)=clhs10*clhs468 + clhs28*clhs469 + clhs316*clhs432 + clhs325*clhs433;
        lhs(10,19)=clhs10*clhs470 + clhs28*clhs471 + clhs336*clhs432 + clhs345*clhs433;
        lhs(10,20)=clhs10*clhs472 + clhs28*clhs473 + clhs356*clhs432 + clhs365*clhs433;
        lhs(10,21)=clhs10*clhs474 + clhs28*clhs475 + clhs376*clhs432 + clhs385*clhs433;
        lhs(10,22)=clhs10*clhs476 + clhs28*clhs477 + clhs396*clhs432 + clhs405*clhs433;
        lhs(10,23)=clhs10*clhs478 + clhs28*clhs479 + clhs416*clhs432 + clhs425*clhs433;
        lhs(10,24)=clhs10*clhs480;
        lhs(10,25)=0;
        lhs(10,26)=clhs28*clhs481;
        lhs(10,27)=0;
        lhs(11,0)=-clhs10*clhs482 + clhs11*clhs484 - clhs28*clhs483 + clhs29*clhs485;
        lhs(11,1)=-clhs10*clhs486 - clhs28*clhs487 + clhs484*clhs59 + clhs485*clhs65;
        lhs(11,2)=-clhs10*clhs488 - clhs28*clhs489 + clhs484*clhs71 + clhs485*clhs77;
        lhs(11,3)=-clhs10*clhs490 - clhs28*clhs491 + clhs484*clhs83 + clhs485*clhs89;
        lhs(11,4)=-clhs10*clhs492 + clhs101*clhs485 - clhs28*clhs493 + clhs484*clhs95;
        lhs(11,5)=-clhs10*clhs494 + clhs107*clhs484 + clhs113*clhs485 - clhs28*clhs495;
        lhs(11,6)=-clhs10*clhs496 + clhs119*clhs484 + clhs125*clhs485 - clhs28*clhs497;
        lhs(11,7)=-clhs10*clhs498 + clhs131*clhs484 + clhs137*clhs485 - clhs28*clhs499;
        lhs(11,8)=-clhs10*clhs500 + clhs143*clhs484 + clhs149*clhs485 - clhs28*clhs501;
        lhs(11,9)=-clhs10*clhs502 + clhs155*clhs484 + clhs161*clhs485 - clhs28*clhs503;
        lhs(11,10)=-clhs10*clhs504 + clhs167*clhs484 + clhs173*clhs485 - clhs28*clhs505;
        lhs(11,11)=-clhs10*clhs506 + clhs179*clhs484 + clhs185*clhs485 - clhs28*clhs507;
        lhs(11,12)=clhs10*clhs508 + clhs196*clhs484 + clhs205*clhs485 + clhs28*clhs509;
        lhs(11,13)=clhs10*clhs510 + clhs216*clhs484 + clhs225*clhs485 + clhs28*clhs511;
        lhs(11,14)=clhs10*clhs512 + clhs236*clhs484 + clhs245*clhs485 + clhs28*clhs513;
        lhs(11,15)=clhs10*clhs514 + clhs256*clhs484 + clhs265*clhs485 + clhs28*clhs515;
        lhs(11,16)=clhs10*clhs516 + clhs276*clhs484 + clhs28*clhs517 + clhs285*clhs485;
        lhs(11,17)=clhs10*clhs518 + clhs28*clhs519 + clhs296*clhs484 + clhs305*clhs485;
        lhs(11,18)=clhs10*clhs520 + clhs28*clhs521 + clhs316*clhs484 + clhs325*clhs485;
        lhs(11,19)=clhs10*clhs522 + clhs28*clhs523 + clhs336*clhs484 + clhs345*clhs485;
        lhs(11,20)=clhs10*clhs524 + clhs28*clhs525 + clhs356*clhs484 + clhs365*clhs485;
        lhs(11,21)=clhs10*clhs526 + clhs28*clhs527 + clhs376*clhs484 + clhs385*clhs485;
        lhs(11,22)=clhs10*clhs528 + clhs28*clhs529 + clhs396*clhs484 + clhs405*clhs485;
        lhs(11,23)=clhs10*clhs530 + clhs28*clhs531 + clhs416*clhs484 + clhs425*clhs485;
        lhs(11,24)=clhs10*clhs532;
        lhs(11,25)=0;
        lhs(11,26)=clhs28*clhs533;
        lhs(11,27)=0;
        lhs(12,0)=penalty_parameter*(clhs33*clhs534 + clhs50*clhs535);
        lhs(12,1)=penalty_parameter*(clhs33*clhs536 + clhs50*clhs537);
        lhs(12,2)=penalty_parameter*(clhs33*clhs538 + clhs50*clhs539);
        lhs(12,3)=penalty_parameter*(clhs33*clhs540 + clhs50*clhs541);
        lhs(12,4)=penalty_parameter*(clhs33*clhs542 + clhs50*clhs543);
        lhs(12,5)=penalty_parameter*(clhs33*clhs544 + clhs50*clhs545);
        lhs(12,6)=penalty_parameter*(clhs33*clhs546 + clhs50*clhs547);
        lhs(12,7)=penalty_parameter*(clhs33*clhs548 + clhs50*clhs549);
        lhs(12,8)=penalty_parameter*(clhs33*clhs550 + clhs50*clhs551);
        lhs(12,9)=penalty_parameter*(clhs33*clhs552 + clhs50*clhs553);
        lhs(12,10)=penalty_parameter*(clhs33*clhs554 + clhs50*clhs555);
        lhs(12,11)=penalty_parameter*(clhs33*clhs556 + clhs50*clhs557);
        lhs(12,12)=-clhs190*clhs49 - clhs198*clhs33 - clhs199*clhs55 - clhs207*clhs50;
        lhs(12,13)=-clhs210*clhs49 - clhs218*clhs33 - clhs219*clhs55 - clhs227*clhs50;
        lhs(12,14)=-clhs230*clhs49 - clhs238*clhs33 - clhs239*clhs55 - clhs247*clhs50;
        lhs(12,15)=-clhs250*clhs49 - clhs258*clhs33 - clhs259*clhs55 - clhs267*clhs50;
        lhs(12,16)=-clhs270*clhs49 - clhs278*clhs33 - clhs279*clhs55 - clhs287*clhs50;
        lhs(12,17)=-clhs290*clhs49 - clhs298*clhs33 - clhs299*clhs55 - clhs307*clhs50;
        lhs(12,18)=-clhs310*clhs49 - clhs318*clhs33 - clhs319*clhs55 - clhs327*clhs50;
        lhs(12,19)=-clhs33*clhs338 - clhs330*clhs49 - clhs339*clhs55 - clhs347*clhs50;
        lhs(12,20)=-clhs33*clhs358 - clhs350*clhs49 - clhs359*clhs55 - clhs367*clhs50;
        lhs(12,21)=-clhs33*clhs378 - clhs370*clhs49 - clhs379*clhs55 - clhs387*clhs50;
        lhs(12,22)=-clhs33*clhs398 - clhs390*clhs49 - clhs399*clhs55 - clhs407*clhs50;
        lhs(12,23)=-clhs33*clhs418 - clhs410*clhs49 - clhs419*clhs55 - clhs427*clhs50;
        lhs(12,24)=-clhs33*clhs428;
        lhs(12,25)=0;
        lhs(12,26)=-clhs429*clhs50;
        lhs(12,27)=0;
        lhs(13,0)=penalty_parameter*(clhs33*clhs558 + clhs50*clhs559);
        lhs(13,1)=penalty_parameter*(clhs33*clhs560 + clhs50*clhs561);
        lhs(13,2)=penalty_parameter*(clhs33*clhs562 + clhs50*clhs563);
        lhs(13,3)=penalty_parameter*(clhs33*clhs564 + clhs50*clhs565);
        lhs(13,4)=penalty_parameter*(clhs33*clhs566 + clhs50*clhs567);
        lhs(13,5)=penalty_parameter*(clhs33*clhs568 + clhs50*clhs569);
        lhs(13,6)=penalty_parameter*(clhs33*clhs570 + clhs50*clhs571);
        lhs(13,7)=penalty_parameter*(clhs33*clhs572 + clhs50*clhs573);
        lhs(13,8)=penalty_parameter*(clhs33*clhs574 + clhs50*clhs575);
        lhs(13,9)=penalty_parameter*(clhs33*clhs576 + clhs50*clhs577);
        lhs(13,10)=penalty_parameter*(clhs33*clhs578 + clhs50*clhs579);
        lhs(13,11)=penalty_parameter*(clhs33*clhs580 + clhs50*clhs581);
        lhs(13,12)=-clhs190*clhs432 - clhs199*clhs433 - clhs33*clhs456 - clhs457*clhs50;
        lhs(13,13)=-clhs210*clhs432 - clhs219*clhs433 - clhs33*clhs458 - clhs459*clhs50;
        lhs(13,14)=-clhs230*clhs432 - clhs239*clhs433 - clhs33*clhs460 - clhs461*clhs50;
        lhs(13,15)=-clhs250*clhs432 - clhs259*clhs433 - clhs33*clhs462 - clhs463*clhs50;
        lhs(13,16)=-clhs270*clhs432 - clhs279*clhs433 - clhs33*clhs464 - clhs465*clhs50;
        lhs(13,17)=-clhs290*clhs432 - clhs299*clhs433 - clhs33*clhs466 - clhs467*clhs50;
        lhs(13,18)=-clhs310*clhs432 - clhs319*clhs433 - clhs33*clhs468 - clhs469*clhs50;
        lhs(13,19)=-clhs33*clhs470 - clhs330*clhs432 - clhs339*clhs433 - clhs471*clhs50;
        lhs(13,20)=-clhs33*clhs472 - clhs350*clhs432 - clhs359*clhs433 - clhs473*clhs50;
        lhs(13,21)=-clhs33*clhs474 - clhs370*clhs432 - clhs379*clhs433 - clhs475*clhs50;
        lhs(13,22)=-clhs33*clhs476 - clhs390*clhs432 - clhs399*clhs433 - clhs477*clhs50;
        lhs(13,23)=-clhs33*clhs478 - clhs410*clhs432 - clhs419*clhs433 - clhs479*clhs50;
        lhs(13,24)=-clhs33*clhs480;
        lhs(13,25)=0;
        lhs(13,26)=-clhs481*clhs50;
        lhs(13,27)=0;
        lhs(14,0)=penalty_parameter*(clhs33*clhs582 + clhs50*clhs583);
        lhs(14,1)=penalty_parameter*(clhs33*clhs584 + clhs50*clhs585);
        lhs(14,2)=penalty_parameter*(clhs33*clhs586 + clhs50*clhs587);
        lhs(14,3)=penalty_parameter*(clhs33*clhs588 + clhs50*clhs589);
        lhs(14,4)=penalty_parameter*(clhs33*clhs590 + clhs50*clhs591);
        lhs(14,5)=penalty_parameter*(clhs33*clhs592 + clhs50*clhs593);
        lhs(14,6)=penalty_parameter*(clhs33*clhs594 + clhs50*clhs595);
        lhs(14,7)=penalty_parameter*(clhs33*clhs596 + clhs50*clhs597);
        lhs(14,8)=penalty_parameter*(clhs33*clhs598 + clhs50*clhs599);
        lhs(14,9)=penalty_parameter*(clhs33*clhs600 + clhs50*clhs601);
        lhs(14,10)=penalty_parameter*(clhs33*clhs602 + clhs50*clhs603);
        lhs(14,11)=penalty_parameter*(clhs33*clhs604 + clhs50*clhs605);
        lhs(14,12)=-clhs190*clhs484 - clhs199*clhs485 - clhs33*clhs508 - clhs50*clhs509;
        lhs(14,13)=-clhs210*clhs484 - clhs219*clhs485 - clhs33*clhs510 - clhs50*clhs511;
        lhs(14,14)=-clhs230*clhs484 - clhs239*clhs485 - clhs33*clhs512 - clhs50*clhs513;
        lhs(14,15)=-clhs250*clhs484 - clhs259*clhs485 - clhs33*clhs514 - clhs50*clhs515;
        lhs(14,16)=-clhs270*clhs484 - clhs279*clhs485 - clhs33*clhs516 - clhs50*clhs517;
        lhs(14,17)=-clhs290*clhs484 - clhs299*clhs485 - clhs33*clhs518 - clhs50*clhs519;
        lhs(14,18)=-clhs310*clhs484 - clhs319*clhs485 - clhs33*clhs520 - clhs50*clhs521;
        lhs(14,19)=-clhs33*clhs522 - clhs330*clhs484 - clhs339*clhs485 - clhs50*clhs523;
        lhs(14,20)=-clhs33*clhs524 - clhs350*clhs484 - clhs359*clhs485 - clhs50*clhs525;
        lhs(14,21)=-clhs33*clhs526 - clhs370*clhs484 - clhs379*clhs485 - clhs50*clhs527;
        lhs(14,22)=-clhs33*clhs528 - clhs390*clhs484 - clhs399*clhs485 - clhs50*clhs529;
        lhs(14,23)=-clhs33*clhs530 - clhs410*clhs484 - clhs419*clhs485 - clhs50*clhs531;
        lhs(14,24)=-clhs33*clhs532;
        lhs(14,25)=0;
        lhs(14,26)=-clhs50*clhs533;
        lhs(14,27)=0;
        lhs(15,0)=penalty_parameter*(clhs35*clhs534 + clhs51*clhs535);
        lhs(15,1)=penalty_parameter*(clhs35*clhs536 + clhs51*clhs537);
        lhs(15,2)=penalty_parameter*(clhs35*clhs538 + clhs51*clhs539);
        lhs(15,3)=penalty_parameter*(clhs35*clhs540 + clhs51*clhs541);
        lhs(15,4)=penalty_parameter*(clhs35*clhs542 + clhs51*clhs543);
        lhs(15,5)=penalty_parameter*(clhs35*clhs544 + clhs51*clhs545);
        lhs(15,6)=penalty_parameter*(clhs35*clhs546 + clhs51*clhs547);
        lhs(15,7)=penalty_parameter*(clhs35*clhs548 + clhs51*clhs549);
        lhs(15,8)=penalty_parameter*(clhs35*clhs550 + clhs51*clhs551);
        lhs(15,9)=penalty_parameter*(clhs35*clhs552 + clhs51*clhs553);
        lhs(15,10)=penalty_parameter*(clhs35*clhs554 + clhs51*clhs555);
        lhs(15,11)=penalty_parameter*(clhs35*clhs556 + clhs51*clhs557);
        lhs(15,12)=-clhs191*clhs49 - clhs198*clhs35 - clhs200*clhs55 - clhs207*clhs51;
        lhs(15,13)=-clhs211*clhs49 - clhs218*clhs35 - clhs220*clhs55 - clhs227*clhs51;
        lhs(15,14)=-clhs231*clhs49 - clhs238*clhs35 - clhs240*clhs55 - clhs247*clhs51;
        lhs(15,15)=-clhs251*clhs49 - clhs258*clhs35 - clhs260*clhs55 - clhs267*clhs51;
        lhs(15,16)=-clhs271*clhs49 - clhs278*clhs35 - clhs280*clhs55 - clhs287*clhs51;
        lhs(15,17)=-clhs291*clhs49 - clhs298*clhs35 - clhs300*clhs55 - clhs307*clhs51;
        lhs(15,18)=-clhs311*clhs49 - clhs318*clhs35 - clhs320*clhs55 - clhs327*clhs51;
        lhs(15,19)=-clhs331*clhs49 - clhs338*clhs35 - clhs340*clhs55 - clhs347*clhs51;
        lhs(15,20)=-clhs35*clhs358 - clhs351*clhs49 - clhs360*clhs55 - clhs367*clhs51;
        lhs(15,21)=-clhs35*clhs378 - clhs371*clhs49 - clhs380*clhs55 - clhs387*clhs51;
        lhs(15,22)=-clhs35*clhs398 - clhs391*clhs49 - clhs400*clhs55 - clhs407*clhs51;
        lhs(15,23)=-clhs35*clhs418 - clhs411*clhs49 - clhs420*clhs55 - clhs427*clhs51;
        lhs(15,24)=-clhs35*clhs428;
        lhs(15,25)=0;
        lhs(15,26)=-clhs429*clhs51;
        lhs(15,27)=0;
        lhs(16,0)=penalty_parameter*(clhs35*clhs558 + clhs51*clhs559);
        lhs(16,1)=penalty_parameter*(clhs35*clhs560 + clhs51*clhs561);
        lhs(16,2)=penalty_parameter*(clhs35*clhs562 + clhs51*clhs563);
        lhs(16,3)=penalty_parameter*(clhs35*clhs564 + clhs51*clhs565);
        lhs(16,4)=penalty_parameter*(clhs35*clhs566 + clhs51*clhs567);
        lhs(16,5)=penalty_parameter*(clhs35*clhs568 + clhs51*clhs569);
        lhs(16,6)=penalty_parameter*(clhs35*clhs570 + clhs51*clhs571);
        lhs(16,7)=penalty_parameter*(clhs35*clhs572 + clhs51*clhs573);
        lhs(16,8)=penalty_parameter*(clhs35*clhs574 + clhs51*clhs575);
        lhs(16,9)=penalty_parameter*(clhs35*clhs576 + clhs51*clhs577);
        lhs(16,10)=penalty_parameter*(clhs35*clhs578 + clhs51*clhs579);
        lhs(16,11)=penalty_parameter*(clhs35*clhs580 + clhs51*clhs581);
        lhs(16,12)=-clhs191*clhs432 - clhs200*clhs433 - clhs35*clhs456 - clhs457*clhs51;
        lhs(16,13)=-clhs211*clhs432 - clhs220*clhs433 - clhs35*clhs458 - clhs459*clhs51;
        lhs(16,14)=-clhs231*clhs432 - clhs240*clhs433 - clhs35*clhs460 - clhs461*clhs51;
        lhs(16,15)=-clhs251*clhs432 - clhs260*clhs433 - clhs35*clhs462 - clhs463*clhs51;
        lhs(16,16)=-clhs271*clhs432 - clhs280*clhs433 - clhs35*clhs464 - clhs465*clhs51;
        lhs(16,17)=-clhs291*clhs432 - clhs300*clhs433 - clhs35*clhs466 - clhs467*clhs51;
        lhs(16,18)=-clhs311*clhs432 - clhs320*clhs433 - clhs35*clhs468 - clhs469*clhs51;
        lhs(16,19)=-clhs331*clhs432 - clhs340*clhs433 - clhs35*clhs470 - clhs471*clhs51;
        lhs(16,20)=-clhs35*clhs472 - clhs351*clhs432 - clhs360*clhs433 - clhs473*clhs51;
        lhs(16,21)=-clhs35*clhs474 - clhs371*clhs432 - clhs380*clhs433 - clhs475*clhs51;
        lhs(16,22)=-clhs35*clhs476 - clhs391*clhs432 - clhs400*clhs433 - clhs477*clhs51;
        lhs(16,23)=-clhs35*clhs478 - clhs411*clhs432 - clhs420*clhs433 - clhs479*clhs51;
        lhs(16,24)=-clhs35*clhs480;
        lhs(16,25)=0;
        lhs(16,26)=-clhs481*clhs51;
        lhs(16,27)=0;
        lhs(17,0)=penalty_parameter*(clhs35*clhs582 + clhs51*clhs583);
        lhs(17,1)=penalty_parameter*(clhs35*clhs584 + clhs51*clhs585);
        lhs(17,2)=penalty_parameter*(clhs35*clhs586 + clhs51*clhs587);
        lhs(17,3)=penalty_parameter*(clhs35*clhs588 + clhs51*clhs589);
        lhs(17,4)=penalty_parameter*(clhs35*clhs590 + clhs51*clhs591);
        lhs(17,5)=penalty_parameter*(clhs35*clhs592 + clhs51*clhs593);
        lhs(17,6)=penalty_parameter*(clhs35*clhs594 + clhs51*clhs595);
        lhs(17,7)=penalty_parameter*(clhs35*clhs596 + clhs51*clhs597);
        lhs(17,8)=penalty_parameter*(clhs35*clhs598 + clhs51*clhs599);
        lhs(17,9)=penalty_parameter*(clhs35*clhs600 + clhs51*clhs601);
        lhs(17,10)=penalty_parameter*(clhs35*clhs602 + clhs51*clhs603);
        lhs(17,11)=penalty_parameter*(clhs35*clhs604 + clhs51*clhs605);
        lhs(17,12)=-clhs191*clhs484 - clhs200*clhs485 - clhs35*clhs508 - clhs509*clhs51;
        lhs(17,13)=-clhs211*clhs484 - clhs220*clhs485 - clhs35*clhs510 - clhs51*clhs511;
        lhs(17,14)=-clhs231*clhs484 - clhs240*clhs485 - clhs35*clhs512 - clhs51*clhs513;
        lhs(17,15)=-clhs251*clhs484 - clhs260*clhs485 - clhs35*clhs514 - clhs51*clhs515;
        lhs(17,16)=-clhs271*clhs484 - clhs280*clhs485 - clhs35*clhs516 - clhs51*clhs517;
        lhs(17,17)=-clhs291*clhs484 - clhs300*clhs485 - clhs35*clhs518 - clhs51*clhs519;
        lhs(17,18)=-clhs311*clhs484 - clhs320*clhs485 - clhs35*clhs520 - clhs51*clhs521;
        lhs(17,19)=-clhs331*clhs484 - clhs340*clhs485 - clhs35*clhs522 - clhs51*clhs523;
        lhs(17,20)=-clhs35*clhs524 - clhs351*clhs484 - clhs360*clhs485 - clhs51*clhs525;
        lhs(17,21)=-clhs35*clhs526 - clhs371*clhs484 - clhs380*clhs485 - clhs51*clhs527;
        lhs(17,22)=-clhs35*clhs528 - clhs391*clhs484 - clhs400*clhs485 - clhs51*clhs529;
        lhs(17,23)=-clhs35*clhs530 - clhs411*clhs484 - clhs420*clhs485 - clhs51*clhs531;
        lhs(17,24)=-clhs35*clhs532;
        lhs(17,25)=0;
        lhs(17,26)=-clhs51*clhs533;
        lhs(17,27)=0;
        lhs(18,0)=penalty_parameter*(clhs37*clhs534 + clhs52*clhs535);
        lhs(18,1)=penalty_parameter*(clhs37*clhs536 + clhs52*clhs537);
        lhs(18,2)=penalty_parameter*(clhs37*clhs538 + clhs52*clhs539);
        lhs(18,3)=penalty_parameter*(clhs37*clhs540 + clhs52*clhs541);
        lhs(18,4)=penalty_parameter*(clhs37*clhs542 + clhs52*clhs543);
        lhs(18,5)=penalty_parameter*(clhs37*clhs544 + clhs52*clhs545);
        lhs(18,6)=penalty_parameter*(clhs37*clhs546 + clhs52*clhs547);
        lhs(18,7)=penalty_parameter*(clhs37*clhs548 + clhs52*clhs549);
        lhs(18,8)=penalty_parameter*(clhs37*clhs550 + clhs52*clhs551);
        lhs(18,9)=penalty_parameter*(clhs37*clhs552 + clhs52*clhs553);
        lhs(18,10)=penalty_parameter*(clhs37*clhs554 + clhs52*clhs555);
        lhs(18,11)=penalty_parameter*(clhs37*clhs556 + clhs52*clhs557);
        lhs(18,12)=-clhs192*clhs49 - clhs198*clhs37 - clhs201*clhs55 - clhs207*clhs52;
        lhs(18,13)=-clhs212*clhs49 - clhs218*clhs37 - clhs221*clhs55 - clhs227*clhs52;
        lhs(18,14)=-clhs232*clhs49 - clhs238*clhs37 - clhs241*clhs55 - clhs247*clhs52;
        lhs(18,15)=-clhs252*clhs49 - clhs258*clhs37 - clhs261*clhs55 - clhs267*clhs52;
        lhs(18,16)=-clhs272*clhs49 - clhs278*clhs37 - clhs281*clhs55 - clhs287*clhs52;
        lhs(18,17)=-clhs292*clhs49 - clhs298*clhs37 - clhs301*clhs55 - clhs307*clhs52;
        lhs(18,18)=-clhs312*clhs49 - clhs318*clhs37 - clhs321*clhs55 - clhs327*clhs52;
        lhs(18,19)=-clhs332*clhs49 - clhs338*clhs37 - clhs341*clhs55 - clhs347*clhs52;
        lhs(18,20)=-clhs352*clhs49 - clhs358*clhs37 - clhs361*clhs55 - clhs367*clhs52;
        lhs(18,21)=-clhs37*clhs378 - clhs372*clhs49 - clhs381*clhs55 - clhs387*clhs52;
        lhs(18,22)=-clhs37*clhs398 - clhs392*clhs49 - clhs401*clhs55 - clhs407*clhs52;
        lhs(18,23)=-clhs37*clhs418 - clhs412*clhs49 - clhs421*clhs55 - clhs427*clhs52;
        lhs(18,24)=-clhs37*clhs428;
        lhs(18,25)=0;
        lhs(18,26)=-clhs429*clhs52;
        lhs(18,27)=0;
        lhs(19,0)=penalty_parameter*(clhs37*clhs558 + clhs52*clhs559);
        lhs(19,1)=penalty_parameter*(clhs37*clhs560 + clhs52*clhs561);
        lhs(19,2)=penalty_parameter*(clhs37*clhs562 + clhs52*clhs563);
        lhs(19,3)=penalty_parameter*(clhs37*clhs564 + clhs52*clhs565);
        lhs(19,4)=penalty_parameter*(clhs37*clhs566 + clhs52*clhs567);
        lhs(19,5)=penalty_parameter*(clhs37*clhs568 + clhs52*clhs569);
        lhs(19,6)=penalty_parameter*(clhs37*clhs570 + clhs52*clhs571);
        lhs(19,7)=penalty_parameter*(clhs37*clhs572 + clhs52*clhs573);
        lhs(19,8)=penalty_parameter*(clhs37*clhs574 + clhs52*clhs575);
        lhs(19,9)=penalty_parameter*(clhs37*clhs576 + clhs52*clhs577);
        lhs(19,10)=penalty_parameter*(clhs37*clhs578 + clhs52*clhs579);
        lhs(19,11)=penalty_parameter*(clhs37*clhs580 + clhs52*clhs581);
        lhs(19,12)=-clhs192*clhs432 - clhs201*clhs433 - clhs37*clhs456 - clhs457*clhs52;
        lhs(19,13)=-clhs212*clhs432 - clhs221*clhs433 - clhs37*clhs458 - clhs459*clhs52;
        lhs(19,14)=-clhs232*clhs432 - clhs241*clhs433 - clhs37*clhs460 - clhs461*clhs52;
        lhs(19,15)=-clhs252*clhs432 - clhs261*clhs433 - clhs37*clhs462 - clhs463*clhs52;
        lhs(19,16)=-clhs272*clhs432 - clhs281*clhs433 - clhs37*clhs464 - clhs465*clhs52;
        lhs(19,17)=-clhs292*clhs432 - clhs301*clhs433 - clhs37*clhs466 - clhs467*clhs52;
        lhs(19,18)=-clhs312*clhs432 - clhs321*clhs433 - clhs37*clhs468 - clhs469*clhs52;
        lhs(19,19)=-clhs332*clhs432 - clhs341*clhs433 - clhs37*clhs470 - clhs471*clhs52;
        lhs(19,20)=-clhs352*clhs432 - clhs361*clhs433 - clhs37*clhs472 - clhs473*clhs52;
        lhs(19,21)=-clhs37*clhs474 - clhs372*clhs432 - clhs381*clhs433 - clhs475*clhs52;
        lhs(19,22)=-clhs37*clhs476 - clhs392*clhs432 - clhs401*clhs433 - clhs477*clhs52;
        lhs(19,23)=-clhs37*clhs478 - clhs412*clhs432 - clhs421*clhs433 - clhs479*clhs52;
        lhs(19,24)=-clhs37*clhs480;
        lhs(19,25)=0;
        lhs(19,26)=-clhs481*clhs52;
        lhs(19,27)=0;
        lhs(20,0)=penalty_parameter*(clhs37*clhs582 + clhs52*clhs583);
        lhs(20,1)=penalty_parameter*(clhs37*clhs584 + clhs52*clhs585);
        lhs(20,2)=penalty_parameter*(clhs37*clhs586 + clhs52*clhs587);
        lhs(20,3)=penalty_parameter*(clhs37*clhs588 + clhs52*clhs589);
        lhs(20,4)=penalty_parameter*(clhs37*clhs590 + clhs52*clhs591);
        lhs(20,5)=penalty_parameter*(clhs37*clhs592 + clhs52*clhs593);
        lhs(20,6)=penalty_parameter*(clhs37*clhs594 + clhs52*clhs595);
        lhs(20,7)=penalty_parameter*(clhs37*clhs596 + clhs52*clhs597);
        lhs(20,8)=penalty_parameter*(clhs37*clhs598 + clhs52*clhs599);
        lhs(20,9)=penalty_parameter*(clhs37*clhs600 + clhs52*clhs601);
        lhs(20,10)=penalty_parameter*(clhs37*clhs602 + clhs52*clhs603);
        lhs(20,11)=penalty_parameter*(clhs37*clhs604 + clhs52*clhs605);
        lhs(20,12)=-clhs192*clhs484 - clhs201*clhs485 - clhs37*clhs508 - clhs509*clhs52;
        lhs(20,13)=-clhs212*clhs484 - clhs221*clhs485 - clhs37*clhs510 - clhs511*clhs52;
        lhs(20,14)=-clhs232*clhs484 - clhs241*clhs485 - clhs37*clhs512 - clhs513*clhs52;
        lhs(20,15)=-clhs252*clhs484 - clhs261*clhs485 - clhs37*clhs514 - clhs515*clhs52;
        lhs(20,16)=-clhs272*clhs484 - clhs281*clhs485 - clhs37*clhs516 - clhs517*clhs52;
        lhs(20,17)=-clhs292*clhs484 - clhs301*clhs485 - clhs37*clhs518 - clhs519*clhs52;
        lhs(20,18)=-clhs312*clhs484 - clhs321*clhs485 - clhs37*clhs520 - clhs52*clhs521;
        lhs(20,19)=-clhs332*clhs484 - clhs341*clhs485 - clhs37*clhs522 - clhs52*clhs523;
        lhs(20,20)=-clhs352*clhs484 - clhs361*clhs485 - clhs37*clhs524 - clhs52*clhs525;
        lhs(20,21)=-clhs37*clhs526 - clhs372*clhs484 - clhs381*clhs485 - clhs52*clhs527;
        lhs(20,22)=-clhs37*clhs528 - clhs392*clhs484 - clhs401*clhs485 - clhs52*clhs529;
        lhs(20,23)=-clhs37*clhs530 - clhs412*clhs484 - clhs421*clhs485 - clhs52*clhs531;
        lhs(20,24)=-clhs37*clhs532;
        lhs(20,25)=0;
        lhs(20,26)=-clhs52*clhs533;
        lhs(20,27)=0;
        lhs(21,0)=penalty_parameter*(clhs39*clhs534 + clhs53*clhs535);
        lhs(21,1)=penalty_parameter*(clhs39*clhs536 + clhs53*clhs537);
        lhs(21,2)=penalty_parameter*(clhs39*clhs538 + clhs53*clhs539);
        lhs(21,3)=penalty_parameter*(clhs39*clhs540 + clhs53*clhs541);
        lhs(21,4)=penalty_parameter*(clhs39*clhs542 + clhs53*clhs543);
        lhs(21,5)=penalty_parameter*(clhs39*clhs544 + clhs53*clhs545);
        lhs(21,6)=penalty_parameter*(clhs39*clhs546 + clhs53*clhs547);
        lhs(21,7)=penalty_parameter*(clhs39*clhs548 + clhs53*clhs549);
        lhs(21,8)=penalty_parameter*(clhs39*clhs550 + clhs53*clhs551);
        lhs(21,9)=penalty_parameter*(clhs39*clhs552 + clhs53*clhs553);
        lhs(21,10)=penalty_parameter*(clhs39*clhs554 + clhs53*clhs555);
        lhs(21,11)=penalty_parameter*(clhs39*clhs556 + clhs53*clhs557);
        lhs(21,12)=-clhs193*clhs49 - clhs198*clhs39 - clhs202*clhs55 - clhs207*clhs53;
        lhs(21,13)=-clhs213*clhs49 - clhs218*clhs39 - clhs222*clhs55 - clhs227*clhs53;
        lhs(21,14)=-clhs233*clhs49 - clhs238*clhs39 - clhs242*clhs55 - clhs247*clhs53;
        lhs(21,15)=-clhs253*clhs49 - clhs258*clhs39 - clhs262*clhs55 - clhs267*clhs53;
        lhs(21,16)=-clhs273*clhs49 - clhs278*clhs39 - clhs282*clhs55 - clhs287*clhs53;
        lhs(21,17)=-clhs293*clhs49 - clhs298*clhs39 - clhs302*clhs55 - clhs307*clhs53;
        lhs(21,18)=-clhs313*clhs49 - clhs318*clhs39 - clhs322*clhs55 - clhs327*clhs53;
        lhs(21,19)=-clhs333*clhs49 - clhs338*clhs39 - clhs342*clhs55 - clhs347*clhs53;
        lhs(21,20)=-clhs353*clhs49 - clhs358*clhs39 - clhs362*clhs55 - clhs367*clhs53;
        lhs(21,21)=-clhs373*clhs49 - clhs378*clhs39 - clhs382*clhs55 - clhs387*clhs53;
        lhs(21,22)=-clhs39*clhs398 - clhs393*clhs49 - clhs402*clhs55 - clhs407*clhs53;
        lhs(21,23)=-clhs39*clhs418 - clhs413*clhs49 - clhs422*clhs55 - clhs427*clhs53;
        lhs(21,24)=-clhs39*clhs428;
        lhs(21,25)=0;
        lhs(21,26)=-clhs429*clhs53;
        lhs(21,27)=0;
        lhs(22,0)=penalty_parameter*(clhs39*clhs558 + clhs53*clhs559);
        lhs(22,1)=penalty_parameter*(clhs39*clhs560 + clhs53*clhs561);
        lhs(22,2)=penalty_parameter*(clhs39*clhs562 + clhs53*clhs563);
        lhs(22,3)=penalty_parameter*(clhs39*clhs564 + clhs53*clhs565);
        lhs(22,4)=penalty_parameter*(clhs39*clhs566 + clhs53*clhs567);
        lhs(22,5)=penalty_parameter*(clhs39*clhs568 + clhs53*clhs569);
        lhs(22,6)=penalty_parameter*(clhs39*clhs570 + clhs53*clhs571);
        lhs(22,7)=penalty_parameter*(clhs39*clhs572 + clhs53*clhs573);
        lhs(22,8)=penalty_parameter*(clhs39*clhs574 + clhs53*clhs575);
        lhs(22,9)=penalty_parameter*(clhs39*clhs576 + clhs53*clhs577);
        lhs(22,10)=penalty_parameter*(clhs39*clhs578 + clhs53*clhs579);
        lhs(22,11)=penalty_parameter*(clhs39*clhs580 + clhs53*clhs581);
        lhs(22,12)=-clhs193*clhs432 - clhs202*clhs433 - clhs39*clhs456 - clhs457*clhs53;
        lhs(22,13)=-clhs213*clhs432 - clhs222*clhs433 - clhs39*clhs458 - clhs459*clhs53;
        lhs(22,14)=-clhs233*clhs432 - clhs242*clhs433 - clhs39*clhs460 - clhs461*clhs53;
        lhs(22,15)=-clhs253*clhs432 - clhs262*clhs433 - clhs39*clhs462 - clhs463*clhs53;
        lhs(22,16)=-clhs273*clhs432 - clhs282*clhs433 - clhs39*clhs464 - clhs465*clhs53;
        lhs(22,17)=-clhs293*clhs432 - clhs302*clhs433 - clhs39*clhs466 - clhs467*clhs53;
        lhs(22,18)=-clhs313*clhs432 - clhs322*clhs433 - clhs39*clhs468 - clhs469*clhs53;
        lhs(22,19)=-clhs333*clhs432 - clhs342*clhs433 - clhs39*clhs470 - clhs471*clhs53;
        lhs(22,20)=-clhs353*clhs432 - clhs362*clhs433 - clhs39*clhs472 - clhs473*clhs53;
        lhs(22,21)=-clhs373*clhs432 - clhs382*clhs433 - clhs39*clhs474 - clhs475*clhs53;
        lhs(22,22)=-clhs39*clhs476 - clhs393*clhs432 - clhs402*clhs433 - clhs477*clhs53;
        lhs(22,23)=-clhs39*clhs478 - clhs413*clhs432 - clhs422*clhs433 - clhs479*clhs53;
        lhs(22,24)=-clhs39*clhs480;
        lhs(22,25)=0;
        lhs(22,26)=-clhs481*clhs53;
        lhs(22,27)=0;
        lhs(23,0)=penalty_parameter*(clhs39*clhs582 + clhs53*clhs583);
        lhs(23,1)=penalty_parameter*(clhs39*clhs584 + clhs53*clhs585);
        lhs(23,2)=penalty_parameter*(clhs39*clhs586 + clhs53*clhs587);
        lhs(23,3)=penalty_parameter*(clhs39*clhs588 + clhs53*clhs589);
        lhs(23,4)=penalty_parameter*(clhs39*clhs590 + clhs53*clhs591);
        lhs(23,5)=penalty_parameter*(clhs39*clhs592 + clhs53*clhs593);
        lhs(23,6)=penalty_parameter*(clhs39*clhs594 + clhs53*clhs595);
        lhs(23,7)=penalty_parameter*(clhs39*clhs596 + clhs53*clhs597);
        lhs(23,8)=penalty_parameter*(clhs39*clhs598 + clhs53*clhs599);
        lhs(23,9)=penalty_parameter*(clhs39*clhs600 + clhs53*clhs601);
        lhs(23,10)=penalty_parameter*(clhs39*clhs602 + clhs53*clhs603);
        lhs(23,11)=penalty_parameter*(clhs39*clhs604 + clhs53*clhs605);
        lhs(23,12)=-clhs193*clhs484 - clhs202*clhs485 - clhs39*clhs508 - clhs509*clhs53;
        lhs(23,13)=-clhs213*clhs484 - clhs222*clhs485 - clhs39*clhs510 - clhs511*clhs53;
        lhs(23,14)=-clhs233*clhs484 - clhs242*clhs485 - clhs39*clhs512 - clhs513*clhs53;
        lhs(23,15)=-clhs253*clhs484 - clhs262*clhs485 - clhs39*clhs514 - clhs515*clhs53;
        lhs(23,16)=-clhs273*clhs484 - clhs282*clhs485 - clhs39*clhs516 - clhs517*clhs53;
        lhs(23,17)=-clhs293*clhs484 - clhs302*clhs485 - clhs39*clhs518 - clhs519*clhs53;
        lhs(23,18)=-clhs313*clhs484 - clhs322*clhs485 - clhs39*clhs520 - clhs521*clhs53;
        lhs(23,19)=-clhs333*clhs484 - clhs342*clhs485 - clhs39*clhs522 - clhs523*clhs53;
        lhs(23,20)=-clhs353*clhs484 - clhs362*clhs485 - clhs39*clhs524 - clhs525*clhs53;
        lhs(23,21)=-clhs373*clhs484 - clhs382*clhs485 - clhs39*clhs526 - clhs527*clhs53;
        lhs(23,22)=-clhs39*clhs528 - clhs393*clhs484 - clhs402*clhs485 - clhs529*clhs53;
        lhs(23,23)=-clhs39*clhs530 - clhs413*clhs484 - clhs422*clhs485 - clhs53*clhs531;
        lhs(23,24)=-clhs39*clhs532;
        lhs(23,25)=0;
        lhs(23,26)=-clhs53*clhs533;
        lhs(23,27)=0;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs60*scale_factor;
        lhs(24,2)=clhs72*scale_factor;
        lhs(24,3)=clhs84*scale_factor;
        lhs(24,4)=clhs96*scale_factor;
        lhs(24,5)=clhs108*scale_factor;
        lhs(24,6)=clhs120*scale_factor;
        lhs(24,7)=clhs132*scale_factor;
        lhs(24,8)=clhs144*scale_factor;
        lhs(24,9)=clhs156*scale_factor;
        lhs(24,10)=clhs168*scale_factor;
        lhs(24,11)=clhs180*scale_factor;
        lhs(24,12)=-clhs197*scale_factor;
        lhs(24,13)=-clhs217*scale_factor;
        lhs(24,14)=-clhs237*scale_factor;
        lhs(24,15)=-clhs257*scale_factor;
        lhs(24,16)=-clhs277*scale_factor;
        lhs(24,17)=-clhs297*scale_factor;
        lhs(24,18)=-clhs317*scale_factor;
        lhs(24,19)=-clhs337*scale_factor;
        lhs(24,20)=-clhs357*scale_factor;
        lhs(24,21)=-clhs377*scale_factor;
        lhs(24,22)=-clhs397*scale_factor;
        lhs(24,23)=-clhs417*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=clhs606;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs30*scale_factor;
        lhs(26,1)=clhs66*scale_factor;
        lhs(26,2)=clhs78*scale_factor;
        lhs(26,3)=clhs90*scale_factor;
        lhs(26,4)=clhs102*scale_factor;
        lhs(26,5)=clhs114*scale_factor;
        lhs(26,6)=clhs126*scale_factor;
        lhs(26,7)=clhs138*scale_factor;
        lhs(26,8)=clhs150*scale_factor;
        lhs(26,9)=clhs162*scale_factor;
        lhs(26,10)=clhs174*scale_factor;
        lhs(26,11)=clhs186*scale_factor;
        lhs(26,12)=-clhs206*scale_factor;
        lhs(26,13)=-clhs226*scale_factor;
        lhs(26,14)=-clhs246*scale_factor;
        lhs(26,15)=-clhs266*scale_factor;
        lhs(26,16)=-clhs286*scale_factor;
        lhs(26,17)=-clhs306*scale_factor;
        lhs(26,18)=-clhs326*scale_factor;
        lhs(26,19)=-clhs346*scale_factor;
        lhs(26,20)=-clhs366*scale_factor;
        lhs(26,21)=-clhs386*scale_factor;
        lhs(26,22)=-clhs406*scale_factor;
        lhs(26,23)=-clhs426*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs606;
    }
    else if (rActiveInactive == 13 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(2,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(2,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(2,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(2,0)*penalty_parameter;
        const double clhs32 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs33 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs34 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs35 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs36 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs37 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs38 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs39 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs40 =     normalslave(3,0)*(clhs16*clhs33 + clhs17*clhs35 + clhs18*clhs37 + clhs19*clhs39 + clhs32) + normalslave(3,1)*(clhs1*clhs33 + clhs3*clhs35 + clhs37*clhs6 + clhs39*clhs9) + normalslave(3,2)*(clhs12*clhs33 + clhs13*clhs35 + clhs14*clhs37 + clhs15*clhs39);
        const double clhs41 =     clhs40*normalslave(3,0)*penalty_parameter;
        const double clhs42 =     X1(0,0) + u1(0,0);
        const double clhs43 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs44 =     X1(1,0) + u1(1,0);
        const double clhs45 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs46 =     X1(2,0) + u1(2,0);
        const double clhs47 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs48 =     X1(3,0) + u1(3,0);
        const double clhs49 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs50 =     X1(0,1) + u1(0,1);
        const double clhs51 =     X1(1,1) + u1(1,1);
        const double clhs52 =     X1(2,1) + u1(2,1);
        const double clhs53 =     X1(3,1) + u1(3,1);
        const double clhs54 =     X1(0,2) + u1(0,2);
        const double clhs55 =     X1(1,2) + u1(1,2);
        const double clhs56 =     X1(2,2) + u1(2,2);
        const double clhs57 =     X1(3,2) + u1(3,2);
        const double clhs58 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs42*clhs43 + clhs44*clhs45 + clhs46*clhs47 + clhs48*clhs49) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs43*clhs50 + clhs45*clhs51 + clhs47*clhs52 + clhs49*clhs53 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs43*clhs54 + clhs45*clhs55 + clhs47*clhs56 + clhs49*clhs57));
        const double clhs59 =     clhs58*normalslave(0,0);
        const double clhs60 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs61 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs62 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs63 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs64 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs42*clhs60 + clhs44*clhs61 + clhs46*clhs62 + clhs48*clhs63) + normalslave(2,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs50*clhs60 + clhs51*clhs61 + clhs52*clhs62 + clhs53*clhs63) + normalslave(2,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs54*clhs60 + clhs55*clhs61 + clhs56*clhs62 + clhs57*clhs63));
        const double clhs65 =     clhs64*normalslave(2,0);
        const double clhs66 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs67 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs68 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs69 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs70 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs32 - clhs17*clhs34 - clhs18*clhs36 - clhs19*clhs38 + clhs42*clhs66 + clhs44*clhs67 + clhs46*clhs68 + clhs48*clhs69) + normalslave(3,1)*(-clhs1*clhs32 - clhs3*clhs34 - clhs36*clhs6 - clhs38*clhs9 + clhs50*clhs66 + clhs51*clhs67 + clhs52*clhs68 + clhs53*clhs69) + normalslave(3,2)*(-clhs12*clhs32 - clhs13*clhs34 - clhs14*clhs36 - clhs15*clhs38 + clhs54*clhs66 + clhs55*clhs67 + clhs56*clhs68 + clhs57*clhs69));
        const double clhs71 =     clhs70*normalslave(3,0);
        const double clhs72 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs73 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs74 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs75 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs76 =     normalslave(0,0)*(clhs16*clhs72 + clhs17*clhs73 + clhs18*clhs74 + clhs19*clhs75) + normalslave(0,1)*(clhs0 + clhs1*clhs72 + clhs3*clhs73 + clhs6*clhs74 + clhs75*clhs9) + normalslave(0,2)*(clhs12*clhs72 + clhs13*clhs73 + clhs14*clhs74 + clhs15*clhs75);
        const double clhs77 =     clhs76*normalslave(0,0)*penalty_parameter;
        const double clhs78 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs79 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs80 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs81 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs82 =     normalslave(2,0)*(clhs16*clhs78 + clhs17*clhs79 + clhs18*clhs80 + clhs19*clhs81) + normalslave(2,1)*(clhs1*clhs78 + clhs22 + clhs3*clhs79 + clhs6*clhs80 + clhs81*clhs9) + normalslave(2,2)*(clhs12*clhs78 + clhs13*clhs79 + clhs14*clhs80 + clhs15*clhs81);
        const double clhs83 =     clhs82*normalslave(2,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs85 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs86 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs87 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs88 =     normalslave(3,0)*(clhs16*clhs84 + clhs17*clhs85 + clhs18*clhs86 + clhs19*clhs87) + normalslave(3,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs32 + clhs6*clhs86 + clhs87*clhs9) + normalslave(3,2)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86 + clhs15*clhs87);
        const double clhs89 =     clhs88*normalslave(3,0)*penalty_parameter;
        const double clhs90 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs91 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs92 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs93 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs94 =     normalslave(0,0)*(clhs16*clhs90 + clhs17*clhs91 + clhs18*clhs92 + clhs19*clhs93) + normalslave(0,1)*(clhs1*clhs90 + clhs3*clhs91 + clhs6*clhs92 + clhs9*clhs93) + normalslave(0,2)*(clhs0 + clhs12*clhs90 + clhs13*clhs91 + clhs14*clhs92 + clhs15*clhs93);
        const double clhs95 =     clhs94*normalslave(0,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs97 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs98 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs99 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs100 =     normalslave(2,0)*(clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(2,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(2,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99 + clhs22);
        const double clhs101 =     clhs100*normalslave(2,0)*penalty_parameter;
        const double clhs102 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs103 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs104 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs105 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs106 =     normalslave(3,0)*(clhs102*clhs16 + clhs103*clhs17 + clhs104*clhs18 + clhs105*clhs19) + normalslave(3,1)*(clhs1*clhs102 + clhs103*clhs3 + clhs104*clhs6 + clhs105*clhs9) + normalslave(3,2)*(clhs102*clhs12 + clhs103*clhs13 + clhs104*clhs14 + clhs105*clhs15 + clhs32);
        const double clhs107 =     clhs106*normalslave(3,0)*penalty_parameter;
        const double clhs108 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs109 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs110 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs111 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs112 =     normalslave(0,0)*(clhs108*clhs16 + clhs109*clhs17 + clhs110*clhs18 + clhs111*clhs19 + clhs4) + normalslave(0,1)*(clhs1*clhs108 + clhs109*clhs3 + clhs110*clhs6 + clhs111*clhs9) + normalslave(0,2)*(clhs108*clhs12 + clhs109*clhs13 + clhs110*clhs14 + clhs111*clhs15);
        const double clhs113 =     clhs112*normalslave(0,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs115 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs116 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs117 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs118 =     normalslave(2,0)*(clhs114*clhs16 + clhs115*clhs17 + clhs116*clhs18 + clhs117*clhs19 + clhs24) + normalslave(2,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6 + clhs117*clhs9) + normalslave(2,2)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14 + clhs117*clhs15);
        const double clhs119 =     clhs118*normalslave(2,0)*penalty_parameter;
        const double clhs120 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs121 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs122 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs123 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs124 =     normalslave(3,0)*(clhs120*clhs16 + clhs121*clhs17 + clhs122*clhs18 + clhs123*clhs19 + clhs34) + normalslave(3,1)*(clhs1*clhs120 + clhs121*clhs3 + clhs122*clhs6 + clhs123*clhs9) + normalslave(3,2)*(clhs12*clhs120 + clhs121*clhs13 + clhs122*clhs14 + clhs123*clhs15);
        const double clhs125 =     clhs124*normalslave(3,0)*penalty_parameter;
        const double clhs126 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs127 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs128 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs129 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs130 =     normalslave(0,0)*(clhs126*clhs16 + clhs127*clhs17 + clhs128*clhs18 + clhs129*clhs19) + normalslave(0,1)*(clhs1*clhs126 + clhs127*clhs3 + clhs128*clhs6 + clhs129*clhs9 + clhs4) + normalslave(0,2)*(clhs12*clhs126 + clhs127*clhs13 + clhs128*clhs14 + clhs129*clhs15);
        const double clhs131 =     clhs130*normalslave(0,0)*penalty_parameter;
        const double clhs132 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs133 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs134 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs135 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs136 =     normalslave(2,0)*(clhs132*clhs16 + clhs133*clhs17 + clhs134*clhs18 + clhs135*clhs19) + normalslave(2,1)*(clhs1*clhs132 + clhs133*clhs3 + clhs134*clhs6 + clhs135*clhs9 + clhs24) + normalslave(2,2)*(clhs12*clhs132 + clhs13*clhs133 + clhs134*clhs14 + clhs135*clhs15);
        const double clhs137 =     clhs136*normalslave(2,0)*penalty_parameter;
        const double clhs138 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs139 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs140 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs141 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs142 =     normalslave(3,0)*(clhs138*clhs16 + clhs139*clhs17 + clhs140*clhs18 + clhs141*clhs19) + normalslave(3,1)*(clhs1*clhs138 + clhs139*clhs3 + clhs140*clhs6 + clhs141*clhs9 + clhs34) + normalslave(3,2)*(clhs12*clhs138 + clhs13*clhs139 + clhs14*clhs140 + clhs141*clhs15);
        const double clhs143 =     clhs142*normalslave(3,0)*penalty_parameter;
        const double clhs144 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs145 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs146 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs147 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs148 =     normalslave(0,0)*(clhs144*clhs16 + clhs145*clhs17 + clhs146*clhs18 + clhs147*clhs19) + normalslave(0,1)*(clhs1*clhs144 + clhs145*clhs3 + clhs146*clhs6 + clhs147*clhs9) + normalslave(0,2)*(clhs12*clhs144 + clhs13*clhs145 + clhs14*clhs146 + clhs147*clhs15 + clhs4);
        const double clhs149 =     clhs148*normalslave(0,0)*penalty_parameter;
        const double clhs150 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs151 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs152 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs153 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs154 =     normalslave(2,0)*(clhs150*clhs16 + clhs151*clhs17 + clhs152*clhs18 + clhs153*clhs19) + normalslave(2,1)*(clhs1*clhs150 + clhs151*clhs3 + clhs152*clhs6 + clhs153*clhs9) + normalslave(2,2)*(clhs12*clhs150 + clhs13*clhs151 + clhs14*clhs152 + clhs15*clhs153 + clhs24);
        const double clhs155 =     clhs154*normalslave(2,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs157 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs158 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs159 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs160 =     normalslave(3,0)*(clhs156*clhs16 + clhs157*clhs17 + clhs158*clhs18 + clhs159*clhs19) + normalslave(3,1)*(clhs1*clhs156 + clhs157*clhs3 + clhs158*clhs6 + clhs159*clhs9) + normalslave(3,2)*(clhs12*clhs156 + clhs13*clhs157 + clhs14*clhs158 + clhs15*clhs159 + clhs34);
        const double clhs161 =     clhs160*normalslave(3,0)*penalty_parameter;
        const double clhs162 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs163 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs164 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs165 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs166 =     normalslave(0,0)*(clhs16*clhs162 + clhs163*clhs17 + clhs164*clhs18 + clhs165*clhs19 + clhs7) + normalslave(0,1)*(clhs1*clhs162 + clhs163*clhs3 + clhs164*clhs6 + clhs165*clhs9) + normalslave(0,2)*(clhs12*clhs162 + clhs13*clhs163 + clhs14*clhs164 + clhs15*clhs165);
        const double clhs167 =     clhs166*normalslave(0,0)*penalty_parameter;
        const double clhs168 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs169 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs170 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs171 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs172 =     normalslave(2,0)*(clhs16*clhs168 + clhs169*clhs17 + clhs170*clhs18 + clhs171*clhs19 + clhs26) + normalslave(2,1)*(clhs1*clhs168 + clhs169*clhs3 + clhs170*clhs6 + clhs171*clhs9) + normalslave(2,2)*(clhs12*clhs168 + clhs13*clhs169 + clhs14*clhs170 + clhs15*clhs171);
        const double clhs173 =     clhs172*normalslave(2,0)*penalty_parameter;
        const double clhs174 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs175 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs176 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs177 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs178 =     normalslave(3,0)*(clhs16*clhs174 + clhs17*clhs175 + clhs176*clhs18 + clhs177*clhs19 + clhs36) + normalslave(3,1)*(clhs1*clhs174 + clhs175*clhs3 + clhs176*clhs6 + clhs177*clhs9) + normalslave(3,2)*(clhs12*clhs174 + clhs13*clhs175 + clhs14*clhs176 + clhs15*clhs177);
        const double clhs179 =     clhs178*normalslave(3,0)*penalty_parameter;
        const double clhs180 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs181 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs182 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs183 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs184 =     normalslave(0,0)*(clhs16*clhs180 + clhs17*clhs181 + clhs18*clhs182 + clhs183*clhs19) + normalslave(0,1)*(clhs1*clhs180 + clhs181*clhs3 + clhs182*clhs6 + clhs183*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs180 + clhs13*clhs181 + clhs14*clhs182 + clhs15*clhs183);
        const double clhs185 =     clhs184*normalslave(0,0)*penalty_parameter;
        const double clhs186 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs187 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs188 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs189 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs190 =     normalslave(2,0)*(clhs16*clhs186 + clhs17*clhs187 + clhs18*clhs188 + clhs189*clhs19) + normalslave(2,1)*(clhs1*clhs186 + clhs187*clhs3 + clhs188*clhs6 + clhs189*clhs9 + clhs26) + normalslave(2,2)*(clhs12*clhs186 + clhs13*clhs187 + clhs14*clhs188 + clhs15*clhs189);
        const double clhs191 =     clhs190*normalslave(2,0)*penalty_parameter;
        const double clhs192 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs193 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs194 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs195 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs196 =     normalslave(3,0)*(clhs16*clhs192 + clhs17*clhs193 + clhs18*clhs194 + clhs19*clhs195) + normalslave(3,1)*(clhs1*clhs192 + clhs193*clhs3 + clhs194*clhs6 + clhs195*clhs9 + clhs36) + normalslave(3,2)*(clhs12*clhs192 + clhs13*clhs193 + clhs14*clhs194 + clhs15*clhs195);
        const double clhs197 =     clhs196*normalslave(3,0)*penalty_parameter;
        const double clhs198 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs199 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs200 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs201 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs202 =     normalslave(0,0)*(clhs16*clhs198 + clhs17*clhs199 + clhs18*clhs200 + clhs19*clhs201) + normalslave(0,1)*(clhs1*clhs198 + clhs199*clhs3 + clhs200*clhs6 + clhs201*clhs9) + normalslave(0,2)*(clhs12*clhs198 + clhs13*clhs199 + clhs14*clhs200 + clhs15*clhs201 + clhs7);
        const double clhs203 =     clhs202*normalslave(0,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs205 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs206 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs207 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs208 =     normalslave(2,0)*(clhs16*clhs204 + clhs17*clhs205 + clhs18*clhs206 + clhs19*clhs207) + normalslave(2,1)*(clhs1*clhs204 + clhs205*clhs3 + clhs206*clhs6 + clhs207*clhs9) + normalslave(2,2)*(clhs12*clhs204 + clhs13*clhs205 + clhs14*clhs206 + clhs15*clhs207 + clhs26);
        const double clhs209 =     clhs208*normalslave(2,0)*penalty_parameter;
        const double clhs210 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs211 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs212 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs213 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs214 =     normalslave(3,0)*(clhs16*clhs210 + clhs17*clhs211 + clhs18*clhs212 + clhs19*clhs213) + normalslave(3,1)*(clhs1*clhs210 + clhs211*clhs3 + clhs212*clhs6 + clhs213*clhs9) + normalslave(3,2)*(clhs12*clhs210 + clhs13*clhs211 + clhs14*clhs212 + clhs15*clhs213 + clhs36);
        const double clhs215 =     clhs214*normalslave(3,0)*penalty_parameter;
        const double clhs216 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs217 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs218 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs219 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs220 =     normalslave(0,0)*(clhs10 + clhs16*clhs216 + clhs17*clhs217 + clhs18*clhs218 + clhs19*clhs219) + normalslave(0,1)*(clhs1*clhs216 + clhs217*clhs3 + clhs218*clhs6 + clhs219*clhs9) + normalslave(0,2)*(clhs12*clhs216 + clhs13*clhs217 + clhs14*clhs218 + clhs15*clhs219);
        const double clhs221 =     clhs220*normalslave(0,0)*penalty_parameter;
        const double clhs222 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs223 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs224 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs225 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs226 =     normalslave(2,0)*(clhs16*clhs222 + clhs17*clhs223 + clhs18*clhs224 + clhs19*clhs225 + clhs28) + normalslave(2,1)*(clhs1*clhs222 + clhs223*clhs3 + clhs224*clhs6 + clhs225*clhs9) + normalslave(2,2)*(clhs12*clhs222 + clhs13*clhs223 + clhs14*clhs224 + clhs15*clhs225);
        const double clhs227 =     clhs226*normalslave(2,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs229 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs230 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs231 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs232 =     normalslave(3,0)*(clhs16*clhs228 + clhs17*clhs229 + clhs18*clhs230 + clhs19*clhs231 + clhs38) + normalslave(3,1)*(clhs1*clhs228 + clhs229*clhs3 + clhs230*clhs6 + clhs231*clhs9) + normalslave(3,2)*(clhs12*clhs228 + clhs13*clhs229 + clhs14*clhs230 + clhs15*clhs231);
        const double clhs233 =     clhs232*normalslave(3,0)*penalty_parameter;
        const double clhs234 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs235 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs236 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs237 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs238 =     normalslave(0,0)*(clhs16*clhs234 + clhs17*clhs235 + clhs18*clhs236 + clhs19*clhs237) + normalslave(0,1)*(clhs1*clhs234 + clhs10 + clhs235*clhs3 + clhs236*clhs6 + clhs237*clhs9) + normalslave(0,2)*(clhs12*clhs234 + clhs13*clhs235 + clhs14*clhs236 + clhs15*clhs237);
        const double clhs239 =     clhs238*normalslave(0,0)*penalty_parameter;
        const double clhs240 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs241 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs242 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs243 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs244 =     normalslave(2,0)*(clhs16*clhs240 + clhs17*clhs241 + clhs18*clhs242 + clhs19*clhs243) + normalslave(2,1)*(clhs1*clhs240 + clhs241*clhs3 + clhs242*clhs6 + clhs243*clhs9 + clhs28) + normalslave(2,2)*(clhs12*clhs240 + clhs13*clhs241 + clhs14*clhs242 + clhs15*clhs243);
        const double clhs245 =     clhs244*normalslave(2,0)*penalty_parameter;
        const double clhs246 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs247 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs248 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs249 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs250 =     normalslave(3,0)*(clhs16*clhs246 + clhs17*clhs247 + clhs18*clhs248 + clhs19*clhs249) + normalslave(3,1)*(clhs1*clhs246 + clhs247*clhs3 + clhs248*clhs6 + clhs249*clhs9 + clhs38) + normalslave(3,2)*(clhs12*clhs246 + clhs13*clhs247 + clhs14*clhs248 + clhs15*clhs249);
        const double clhs251 =     clhs250*normalslave(3,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs253 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs254 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs255 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs256 =     normalslave(0,0)*(clhs16*clhs252 + clhs17*clhs253 + clhs18*clhs254 + clhs19*clhs255) + normalslave(0,1)*(clhs1*clhs252 + clhs253*clhs3 + clhs254*clhs6 + clhs255*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs252 + clhs13*clhs253 + clhs14*clhs254 + clhs15*clhs255);
        const double clhs257 =     clhs256*normalslave(0,0)*penalty_parameter;
        const double clhs258 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs259 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs260 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs261 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs262 =     normalslave(2,0)*(clhs16*clhs258 + clhs17*clhs259 + clhs18*clhs260 + clhs19*clhs261) + normalslave(2,1)*(clhs1*clhs258 + clhs259*clhs3 + clhs260*clhs6 + clhs261*clhs9) + normalslave(2,2)*(clhs12*clhs258 + clhs13*clhs259 + clhs14*clhs260 + clhs15*clhs261 + clhs28);
        const double clhs263 =     clhs262*normalslave(2,0)*penalty_parameter;
        const double clhs264 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs265 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs266 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs267 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs268 =     normalslave(3,0)*(clhs16*clhs264 + clhs17*clhs265 + clhs18*clhs266 + clhs19*clhs267) + normalslave(3,1)*(clhs1*clhs264 + clhs265*clhs3 + clhs266*clhs6 + clhs267*clhs9) + normalslave(3,2)*(clhs12*clhs264 + clhs13*clhs265 + clhs14*clhs266 + clhs15*clhs267 + clhs38);
        const double clhs269 =     clhs268*normalslave(3,0)*penalty_parameter;
        const double clhs270 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs271 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs272 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs273 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs274 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs275 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs276 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs277 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs278 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs279 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs280 =     normalslave(0,0)*(-clhs16*clhs270 - clhs17*clhs277 - clhs18*clhs278 - clhs19*clhs279 + clhs273*clhs42 + clhs274*clhs44 + clhs275*clhs46 + clhs276*clhs48 + clhs43) + normalslave(0,1)*(-clhs1*clhs270 + clhs273*clhs50 + clhs274*clhs51 + clhs275*clhs52 + clhs276*clhs53 - clhs277*clhs3 - clhs278*clhs6 - clhs279*clhs9) + normalslave(0,2)*(-clhs12*clhs270 - clhs13*clhs277 - clhs14*clhs278 - clhs15*clhs279 + clhs273*clhs54 + clhs274*clhs55 + clhs275*clhs56 + clhs276*clhs57);
        const double clhs281 =     clhs280*normalslave(0,0)*penalty_parameter;
        const double clhs282 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs283 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs284 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs285 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs286 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs287 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs288 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs289 =     normalslave(2,0)*(-clhs16*clhs271 - clhs17*clhs286 - clhs18*clhs287 - clhs19*clhs288 + clhs282*clhs42 + clhs283*clhs44 + clhs284*clhs46 + clhs285*clhs48 + clhs60) + normalslave(2,1)*(-clhs1*clhs271 + clhs282*clhs50 + clhs283*clhs51 + clhs284*clhs52 + clhs285*clhs53 - clhs286*clhs3 - clhs287*clhs6 - clhs288*clhs9) + normalslave(2,2)*(-clhs12*clhs271 - clhs13*clhs286 - clhs14*clhs287 - clhs15*clhs288 + clhs282*clhs54 + clhs283*clhs55 + clhs284*clhs56 + clhs285*clhs57);
        const double clhs290 =     clhs289*normalslave(2,0)*penalty_parameter;
        const double clhs291 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs292 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs293 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs294 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs295 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs296 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs297 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs298 =     normalslave(3,0)*(-clhs16*clhs272 - clhs17*clhs295 - clhs18*clhs296 - clhs19*clhs297 + clhs291*clhs42 + clhs292*clhs44 + clhs293*clhs46 + clhs294*clhs48 + clhs66) + normalslave(3,1)*(-clhs1*clhs272 + clhs291*clhs50 + clhs292*clhs51 + clhs293*clhs52 + clhs294*clhs53 - clhs295*clhs3 - clhs296*clhs6 - clhs297*clhs9) + normalslave(3,2)*(-clhs12*clhs272 - clhs13*clhs295 - clhs14*clhs296 - clhs15*clhs297 + clhs291*clhs54 + clhs292*clhs55 + clhs293*clhs56 + clhs294*clhs57);
        const double clhs299 =     clhs298*normalslave(3,0)*penalty_parameter;
        const double clhs300 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs301 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs302 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs303 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs304 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs305 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs306 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs307 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs308 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs309 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs310 =     normalslave(0,0)*(-clhs16*clhs300 - clhs17*clhs307 - clhs18*clhs308 - clhs19*clhs309 + clhs303*clhs42 + clhs304*clhs44 + clhs305*clhs46 + clhs306*clhs48) + normalslave(0,1)*(-clhs1*clhs300 - clhs3*clhs307 + clhs303*clhs50 + clhs304*clhs51 + clhs305*clhs52 + clhs306*clhs53 - clhs308*clhs6 - clhs309*clhs9 + clhs43) + normalslave(0,2)*(-clhs12*clhs300 - clhs13*clhs307 - clhs14*clhs308 - clhs15*clhs309 + clhs303*clhs54 + clhs304*clhs55 + clhs305*clhs56 + clhs306*clhs57);
        const double clhs311 =     clhs310*normalslave(0,0)*penalty_parameter;
        const double clhs312 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs313 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs314 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs315 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs316 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs317 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs318 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs319 =     normalslave(2,0)*(-clhs16*clhs301 - clhs17*clhs316 - clhs18*clhs317 - clhs19*clhs318 + clhs312*clhs42 + clhs313*clhs44 + clhs314*clhs46 + clhs315*clhs48) + normalslave(2,1)*(-clhs1*clhs301 - clhs3*clhs316 + clhs312*clhs50 + clhs313*clhs51 + clhs314*clhs52 + clhs315*clhs53 - clhs317*clhs6 - clhs318*clhs9 + clhs60) + normalslave(2,2)*(-clhs12*clhs301 - clhs13*clhs316 - clhs14*clhs317 - clhs15*clhs318 + clhs312*clhs54 + clhs313*clhs55 + clhs314*clhs56 + clhs315*clhs57);
        const double clhs320 =     clhs319*normalslave(2,0)*penalty_parameter;
        const double clhs321 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs322 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs323 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs324 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs325 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs326 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs327 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs328 =     normalslave(3,0)*(-clhs16*clhs302 - clhs17*clhs325 - clhs18*clhs326 - clhs19*clhs327 + clhs321*clhs42 + clhs322*clhs44 + clhs323*clhs46 + clhs324*clhs48) + normalslave(3,1)*(-clhs1*clhs302 - clhs3*clhs325 + clhs321*clhs50 + clhs322*clhs51 + clhs323*clhs52 + clhs324*clhs53 - clhs326*clhs6 - clhs327*clhs9 + clhs66) + normalslave(3,2)*(-clhs12*clhs302 - clhs13*clhs325 - clhs14*clhs326 - clhs15*clhs327 + clhs321*clhs54 + clhs322*clhs55 + clhs323*clhs56 + clhs324*clhs57);
        const double clhs329 =     clhs328*normalslave(3,0)*penalty_parameter;
        const double clhs330 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs331 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs332 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs333 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs334 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs335 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs336 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs337 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs338 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs339 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs340 =     normalslave(0,0)*(-clhs16*clhs330 - clhs17*clhs337 - clhs18*clhs338 - clhs19*clhs339 + clhs333*clhs42 + clhs334*clhs44 + clhs335*clhs46 + clhs336*clhs48) + normalslave(0,1)*(-clhs1*clhs330 - clhs3*clhs337 + clhs333*clhs50 + clhs334*clhs51 + clhs335*clhs52 + clhs336*clhs53 - clhs338*clhs6 - clhs339*clhs9) + normalslave(0,2)*(-clhs12*clhs330 - clhs13*clhs337 - clhs14*clhs338 - clhs15*clhs339 + clhs333*clhs54 + clhs334*clhs55 + clhs335*clhs56 + clhs336*clhs57 + clhs43);
        const double clhs341 =     clhs340*normalslave(0,0)*penalty_parameter;
        const double clhs342 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs343 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs344 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs345 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs346 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs347 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs348 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs349 =     normalslave(2,0)*(-clhs16*clhs331 - clhs17*clhs346 - clhs18*clhs347 - clhs19*clhs348 + clhs342*clhs42 + clhs343*clhs44 + clhs344*clhs46 + clhs345*clhs48) + normalslave(2,1)*(-clhs1*clhs331 - clhs3*clhs346 + clhs342*clhs50 + clhs343*clhs51 + clhs344*clhs52 + clhs345*clhs53 - clhs347*clhs6 - clhs348*clhs9) + normalslave(2,2)*(-clhs12*clhs331 - clhs13*clhs346 - clhs14*clhs347 - clhs15*clhs348 + clhs342*clhs54 + clhs343*clhs55 + clhs344*clhs56 + clhs345*clhs57 + clhs60);
        const double clhs350 =     clhs349*normalslave(2,0)*penalty_parameter;
        const double clhs351 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs352 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs353 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs354 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs355 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs356 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs357 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs358 =     normalslave(3,0)*(-clhs16*clhs332 - clhs17*clhs355 - clhs18*clhs356 - clhs19*clhs357 + clhs351*clhs42 + clhs352*clhs44 + clhs353*clhs46 + clhs354*clhs48) + normalslave(3,1)*(-clhs1*clhs332 - clhs3*clhs355 + clhs351*clhs50 + clhs352*clhs51 + clhs353*clhs52 + clhs354*clhs53 - clhs356*clhs6 - clhs357*clhs9) + normalslave(3,2)*(-clhs12*clhs332 - clhs13*clhs355 - clhs14*clhs356 - clhs15*clhs357 + clhs351*clhs54 + clhs352*clhs55 + clhs353*clhs56 + clhs354*clhs57 + clhs66);
        const double clhs359 =     clhs358*normalslave(3,0)*penalty_parameter;
        const double clhs360 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs361 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs362 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs363 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs364 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs365 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs366 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs367 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs368 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs369 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs370 =     normalslave(0,0)*(-clhs16*clhs360 - clhs17*clhs367 - clhs18*clhs368 - clhs19*clhs369 + clhs363*clhs42 + clhs364*clhs44 + clhs365*clhs46 + clhs366*clhs48 + clhs45) + normalslave(0,1)*(-clhs1*clhs360 - clhs3*clhs367 + clhs363*clhs50 + clhs364*clhs51 + clhs365*clhs52 + clhs366*clhs53 - clhs368*clhs6 - clhs369*clhs9) + normalslave(0,2)*(-clhs12*clhs360 - clhs13*clhs367 - clhs14*clhs368 - clhs15*clhs369 + clhs363*clhs54 + clhs364*clhs55 + clhs365*clhs56 + clhs366*clhs57);
        const double clhs371 =     clhs370*normalslave(0,0)*penalty_parameter;
        const double clhs372 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs373 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs374 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs375 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs376 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs377 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs378 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs379 =     normalslave(2,0)*(-clhs16*clhs361 - clhs17*clhs376 - clhs18*clhs377 - clhs19*clhs378 + clhs372*clhs42 + clhs373*clhs44 + clhs374*clhs46 + clhs375*clhs48 + clhs61) + normalslave(2,1)*(-clhs1*clhs361 - clhs3*clhs376 + clhs372*clhs50 + clhs373*clhs51 + clhs374*clhs52 + clhs375*clhs53 - clhs377*clhs6 - clhs378*clhs9) + normalslave(2,2)*(-clhs12*clhs361 - clhs13*clhs376 - clhs14*clhs377 - clhs15*clhs378 + clhs372*clhs54 + clhs373*clhs55 + clhs374*clhs56 + clhs375*clhs57);
        const double clhs380 =     clhs379*normalslave(2,0)*penalty_parameter;
        const double clhs381 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs382 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs383 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs384 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs385 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs386 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs387 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs388 =     normalslave(3,0)*(-clhs16*clhs362 - clhs17*clhs385 - clhs18*clhs386 - clhs19*clhs387 + clhs381*clhs42 + clhs382*clhs44 + clhs383*clhs46 + clhs384*clhs48 + clhs67) + normalslave(3,1)*(-clhs1*clhs362 - clhs3*clhs385 + clhs381*clhs50 + clhs382*clhs51 + clhs383*clhs52 + clhs384*clhs53 - clhs386*clhs6 - clhs387*clhs9) + normalslave(3,2)*(-clhs12*clhs362 - clhs13*clhs385 - clhs14*clhs386 - clhs15*clhs387 + clhs381*clhs54 + clhs382*clhs55 + clhs383*clhs56 + clhs384*clhs57);
        const double clhs389 =     clhs388*normalslave(3,0)*penalty_parameter;
        const double clhs390 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs391 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs392 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs393 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs394 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs395 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs396 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs397 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs398 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs399 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs400 =     normalslave(0,0)*(-clhs16*clhs390 - clhs17*clhs397 - clhs18*clhs398 - clhs19*clhs399 + clhs393*clhs42 + clhs394*clhs44 + clhs395*clhs46 + clhs396*clhs48) + normalslave(0,1)*(-clhs1*clhs390 - clhs3*clhs397 + clhs393*clhs50 + clhs394*clhs51 + clhs395*clhs52 + clhs396*clhs53 - clhs398*clhs6 - clhs399*clhs9 + clhs45) + normalslave(0,2)*(-clhs12*clhs390 - clhs13*clhs397 - clhs14*clhs398 - clhs15*clhs399 + clhs393*clhs54 + clhs394*clhs55 + clhs395*clhs56 + clhs396*clhs57);
        const double clhs401 =     clhs400*normalslave(0,0)*penalty_parameter;
        const double clhs402 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs403 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs404 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs405 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs406 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs407 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs408 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs409 =     normalslave(2,0)*(-clhs16*clhs391 - clhs17*clhs406 - clhs18*clhs407 - clhs19*clhs408 + clhs402*clhs42 + clhs403*clhs44 + clhs404*clhs46 + clhs405*clhs48) + normalslave(2,1)*(-clhs1*clhs391 - clhs3*clhs406 + clhs402*clhs50 + clhs403*clhs51 + clhs404*clhs52 + clhs405*clhs53 - clhs407*clhs6 - clhs408*clhs9 + clhs61) + normalslave(2,2)*(-clhs12*clhs391 - clhs13*clhs406 - clhs14*clhs407 - clhs15*clhs408 + clhs402*clhs54 + clhs403*clhs55 + clhs404*clhs56 + clhs405*clhs57);
        const double clhs410 =     clhs409*normalslave(2,0)*penalty_parameter;
        const double clhs411 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs412 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs413 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs414 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs415 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs416 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs417 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs418 =     normalslave(3,0)*(-clhs16*clhs392 - clhs17*clhs415 - clhs18*clhs416 - clhs19*clhs417 + clhs411*clhs42 + clhs412*clhs44 + clhs413*clhs46 + clhs414*clhs48) + normalslave(3,1)*(-clhs1*clhs392 - clhs3*clhs415 + clhs411*clhs50 + clhs412*clhs51 + clhs413*clhs52 + clhs414*clhs53 - clhs416*clhs6 - clhs417*clhs9 + clhs67) + normalslave(3,2)*(-clhs12*clhs392 - clhs13*clhs415 - clhs14*clhs416 - clhs15*clhs417 + clhs411*clhs54 + clhs412*clhs55 + clhs413*clhs56 + clhs414*clhs57);
        const double clhs419 =     clhs418*normalslave(3,0)*penalty_parameter;
        const double clhs420 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs421 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs422 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs423 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs424 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs425 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs426 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs427 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs428 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs429 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs430 =     normalslave(0,0)*(-clhs16*clhs420 - clhs17*clhs427 - clhs18*clhs428 - clhs19*clhs429 + clhs42*clhs423 + clhs424*clhs44 + clhs425*clhs46 + clhs426*clhs48) + normalslave(0,1)*(-clhs1*clhs420 - clhs3*clhs427 + clhs423*clhs50 + clhs424*clhs51 + clhs425*clhs52 + clhs426*clhs53 - clhs428*clhs6 - clhs429*clhs9) + normalslave(0,2)*(-clhs12*clhs420 - clhs13*clhs427 - clhs14*clhs428 - clhs15*clhs429 + clhs423*clhs54 + clhs424*clhs55 + clhs425*clhs56 + clhs426*clhs57 + clhs45);
        const double clhs431 =     clhs430*normalslave(0,0)*penalty_parameter;
        const double clhs432 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs433 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs434 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs435 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs436 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs437 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs438 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs439 =     normalslave(2,0)*(-clhs16*clhs421 - clhs17*clhs436 - clhs18*clhs437 - clhs19*clhs438 + clhs42*clhs432 + clhs433*clhs44 + clhs434*clhs46 + clhs435*clhs48) + normalslave(2,1)*(-clhs1*clhs421 - clhs3*clhs436 + clhs432*clhs50 + clhs433*clhs51 + clhs434*clhs52 + clhs435*clhs53 - clhs437*clhs6 - clhs438*clhs9) + normalslave(2,2)*(-clhs12*clhs421 - clhs13*clhs436 - clhs14*clhs437 - clhs15*clhs438 + clhs432*clhs54 + clhs433*clhs55 + clhs434*clhs56 + clhs435*clhs57 + clhs61);
        const double clhs440 =     clhs439*normalslave(2,0)*penalty_parameter;
        const double clhs441 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs442 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs443 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs444 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs445 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs446 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs447 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs448 =     normalslave(3,0)*(-clhs16*clhs422 - clhs17*clhs445 - clhs18*clhs446 - clhs19*clhs447 + clhs42*clhs441 + clhs44*clhs442 + clhs443*clhs46 + clhs444*clhs48) + normalslave(3,1)*(-clhs1*clhs422 - clhs3*clhs445 + clhs441*clhs50 + clhs442*clhs51 + clhs443*clhs52 + clhs444*clhs53 - clhs446*clhs6 - clhs447*clhs9) + normalslave(3,2)*(-clhs12*clhs422 - clhs13*clhs445 - clhs14*clhs446 - clhs15*clhs447 + clhs441*clhs54 + clhs442*clhs55 + clhs443*clhs56 + clhs444*clhs57 + clhs67);
        const double clhs449 =     clhs448*normalslave(3,0)*penalty_parameter;
        const double clhs450 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs451 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs452 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs453 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs454 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs455 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs456 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs457 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs458 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs459 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs460 =     normalslave(0,0)*(-clhs16*clhs450 - clhs17*clhs457 - clhs18*clhs458 - clhs19*clhs459 + clhs42*clhs453 + clhs44*clhs454 + clhs455*clhs46 + clhs456*clhs48 + clhs47) + normalslave(0,1)*(-clhs1*clhs450 - clhs3*clhs457 + clhs453*clhs50 + clhs454*clhs51 + clhs455*clhs52 + clhs456*clhs53 - clhs458*clhs6 - clhs459*clhs9) + normalslave(0,2)*(-clhs12*clhs450 - clhs13*clhs457 - clhs14*clhs458 - clhs15*clhs459 + clhs453*clhs54 + clhs454*clhs55 + clhs455*clhs56 + clhs456*clhs57);
        const double clhs461 =     clhs460*normalslave(0,0)*penalty_parameter;
        const double clhs462 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs463 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs464 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs465 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs466 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs467 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs468 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs469 =     normalslave(2,0)*(-clhs16*clhs451 - clhs17*clhs466 - clhs18*clhs467 - clhs19*clhs468 + clhs42*clhs462 + clhs44*clhs463 + clhs46*clhs464 + clhs465*clhs48 + clhs62) + normalslave(2,1)*(-clhs1*clhs451 - clhs3*clhs466 + clhs462*clhs50 + clhs463*clhs51 + clhs464*clhs52 + clhs465*clhs53 - clhs467*clhs6 - clhs468*clhs9) + normalslave(2,2)*(-clhs12*clhs451 - clhs13*clhs466 - clhs14*clhs467 - clhs15*clhs468 + clhs462*clhs54 + clhs463*clhs55 + clhs464*clhs56 + clhs465*clhs57);
        const double clhs470 =     clhs469*normalslave(2,0)*penalty_parameter;
        const double clhs471 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs472 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs473 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs474 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs475 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs476 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs477 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs478 =     normalslave(3,0)*(-clhs16*clhs452 - clhs17*clhs475 - clhs18*clhs476 - clhs19*clhs477 + clhs42*clhs471 + clhs44*clhs472 + clhs46*clhs473 + clhs474*clhs48 + clhs68) + normalslave(3,1)*(-clhs1*clhs452 - clhs3*clhs475 + clhs471*clhs50 + clhs472*clhs51 + clhs473*clhs52 + clhs474*clhs53 - clhs476*clhs6 - clhs477*clhs9) + normalslave(3,2)*(-clhs12*clhs452 - clhs13*clhs475 - clhs14*clhs476 - clhs15*clhs477 + clhs471*clhs54 + clhs472*clhs55 + clhs473*clhs56 + clhs474*clhs57);
        const double clhs479 =     clhs478*normalslave(3,0)*penalty_parameter;
        const double clhs480 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs481 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs482 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs483 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs484 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs485 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs486 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs487 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs488 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs489 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs490 =     normalslave(0,0)*(-clhs16*clhs480 - clhs17*clhs487 - clhs18*clhs488 - clhs19*clhs489 + clhs42*clhs483 + clhs44*clhs484 + clhs46*clhs485 + clhs48*clhs486) + normalslave(0,1)*(-clhs1*clhs480 - clhs3*clhs487 + clhs47 + clhs483*clhs50 + clhs484*clhs51 + clhs485*clhs52 + clhs486*clhs53 - clhs488*clhs6 - clhs489*clhs9) + normalslave(0,2)*(-clhs12*clhs480 - clhs13*clhs487 - clhs14*clhs488 - clhs15*clhs489 + clhs483*clhs54 + clhs484*clhs55 + clhs485*clhs56 + clhs486*clhs57);
        const double clhs491 =     clhs490*normalslave(0,0)*penalty_parameter;
        const double clhs492 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs493 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs494 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs495 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs496 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs497 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs498 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs499 =     normalslave(2,0)*(-clhs16*clhs481 - clhs17*clhs496 - clhs18*clhs497 - clhs19*clhs498 + clhs42*clhs492 + clhs44*clhs493 + clhs46*clhs494 + clhs48*clhs495) + normalslave(2,1)*(-clhs1*clhs481 - clhs3*clhs496 + clhs492*clhs50 + clhs493*clhs51 + clhs494*clhs52 + clhs495*clhs53 - clhs497*clhs6 - clhs498*clhs9 + clhs62) + normalslave(2,2)*(-clhs12*clhs481 - clhs13*clhs496 - clhs14*clhs497 - clhs15*clhs498 + clhs492*clhs54 + clhs493*clhs55 + clhs494*clhs56 + clhs495*clhs57);
        const double clhs500 =     clhs499*normalslave(2,0)*penalty_parameter;
        const double clhs501 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs502 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs503 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs504 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs505 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs506 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs507 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs508 =     normalslave(3,0)*(-clhs16*clhs482 - clhs17*clhs505 - clhs18*clhs506 - clhs19*clhs507 + clhs42*clhs501 + clhs44*clhs502 + clhs46*clhs503 + clhs48*clhs504) + normalslave(3,1)*(-clhs1*clhs482 - clhs3*clhs505 + clhs50*clhs501 + clhs502*clhs51 + clhs503*clhs52 + clhs504*clhs53 - clhs506*clhs6 - clhs507*clhs9 + clhs68) + normalslave(3,2)*(-clhs12*clhs482 - clhs13*clhs505 - clhs14*clhs506 - clhs15*clhs507 + clhs501*clhs54 + clhs502*clhs55 + clhs503*clhs56 + clhs504*clhs57);
        const double clhs509 =     clhs508*normalslave(3,0)*penalty_parameter;
        const double clhs510 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs511 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs512 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs513 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs514 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs515 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs516 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs517 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs518 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs519 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs520 =     normalslave(0,0)*(-clhs16*clhs510 - clhs17*clhs517 - clhs18*clhs518 - clhs19*clhs519 + clhs42*clhs513 + clhs44*clhs514 + clhs46*clhs515 + clhs48*clhs516) + normalslave(0,1)*(-clhs1*clhs510 - clhs3*clhs517 + clhs50*clhs513 + clhs51*clhs514 + clhs515*clhs52 + clhs516*clhs53 - clhs518*clhs6 - clhs519*clhs9) + normalslave(0,2)*(-clhs12*clhs510 - clhs13*clhs517 - clhs14*clhs518 - clhs15*clhs519 + clhs47 + clhs513*clhs54 + clhs514*clhs55 + clhs515*clhs56 + clhs516*clhs57);
        const double clhs521 =     clhs520*normalslave(0,0)*penalty_parameter;
        const double clhs522 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs523 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs524 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs525 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs526 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs527 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs528 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs529 =     normalslave(2,0)*(-clhs16*clhs511 - clhs17*clhs526 - clhs18*clhs527 - clhs19*clhs528 + clhs42*clhs522 + clhs44*clhs523 + clhs46*clhs524 + clhs48*clhs525) + normalslave(2,1)*(-clhs1*clhs511 - clhs3*clhs526 + clhs50*clhs522 + clhs51*clhs523 + clhs52*clhs524 + clhs525*clhs53 - clhs527*clhs6 - clhs528*clhs9) + normalslave(2,2)*(-clhs12*clhs511 - clhs13*clhs526 - clhs14*clhs527 - clhs15*clhs528 + clhs522*clhs54 + clhs523*clhs55 + clhs524*clhs56 + clhs525*clhs57 + clhs62);
        const double clhs530 =     clhs529*normalslave(2,0)*penalty_parameter;
        const double clhs531 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs532 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs533 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs534 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs535 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs536 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs537 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs538 =     normalslave(3,0)*(-clhs16*clhs512 - clhs17*clhs535 - clhs18*clhs536 - clhs19*clhs537 + clhs42*clhs531 + clhs44*clhs532 + clhs46*clhs533 + clhs48*clhs534) + normalslave(3,1)*(-clhs1*clhs512 - clhs3*clhs535 + clhs50*clhs531 + clhs51*clhs532 + clhs52*clhs533 + clhs53*clhs534 - clhs536*clhs6 - clhs537*clhs9) + normalslave(3,2)*(-clhs12*clhs512 - clhs13*clhs535 - clhs14*clhs536 - clhs15*clhs537 + clhs531*clhs54 + clhs532*clhs55 + clhs533*clhs56 + clhs534*clhs57 + clhs68);
        const double clhs539 =     clhs538*normalslave(3,0)*penalty_parameter;
        const double clhs540 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs541 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs542 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs543 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs544 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs545 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs546 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs547 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs548 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs549 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs550 =     normalslave(0,0)*(-clhs16*clhs540 - clhs17*clhs547 - clhs18*clhs548 - clhs19*clhs549 + clhs42*clhs543 + clhs44*clhs544 + clhs46*clhs545 + clhs48*clhs546 + clhs49) + normalslave(0,1)*(-clhs1*clhs540 - clhs3*clhs547 + clhs50*clhs543 + clhs51*clhs544 + clhs52*clhs545 + clhs53*clhs546 - clhs548*clhs6 - clhs549*clhs9) + normalslave(0,2)*(-clhs12*clhs540 - clhs13*clhs547 - clhs14*clhs548 - clhs15*clhs549 + clhs54*clhs543 + clhs544*clhs55 + clhs545*clhs56 + clhs546*clhs57);
        const double clhs551 =     clhs550*normalslave(0,0)*penalty_parameter;
        const double clhs552 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs553 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs554 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs555 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs556 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs557 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs558 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs559 =     normalslave(2,0)*(-clhs16*clhs541 - clhs17*clhs556 - clhs18*clhs557 - clhs19*clhs558 + clhs42*clhs552 + clhs44*clhs553 + clhs46*clhs554 + clhs48*clhs555 + clhs63) + normalslave(2,1)*(-clhs1*clhs541 - clhs3*clhs556 + clhs50*clhs552 + clhs51*clhs553 + clhs52*clhs554 + clhs53*clhs555 - clhs557*clhs6 - clhs558*clhs9) + normalslave(2,2)*(-clhs12*clhs541 - clhs13*clhs556 - clhs14*clhs557 - clhs15*clhs558 + clhs54*clhs552 + clhs55*clhs553 + clhs554*clhs56 + clhs555*clhs57);
        const double clhs560 =     clhs559*normalslave(2,0)*penalty_parameter;
        const double clhs561 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs562 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs563 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs564 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs565 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs566 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs567 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs568 =     normalslave(3,0)*(-clhs16*clhs542 - clhs17*clhs565 - clhs18*clhs566 - clhs19*clhs567 + clhs42*clhs561 + clhs44*clhs562 + clhs46*clhs563 + clhs48*clhs564 + clhs69) + normalslave(3,1)*(-clhs1*clhs542 - clhs3*clhs565 + clhs50*clhs561 + clhs51*clhs562 + clhs52*clhs563 + clhs53*clhs564 - clhs566*clhs6 - clhs567*clhs9) + normalslave(3,2)*(-clhs12*clhs542 - clhs13*clhs565 - clhs14*clhs566 - clhs15*clhs567 + clhs54*clhs561 + clhs55*clhs562 + clhs56*clhs563 + clhs564*clhs57);
        const double clhs569 =     clhs568*normalslave(3,0)*penalty_parameter;
        const double clhs570 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs571 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs572 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs573 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs574 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs575 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs576 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs577 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs578 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs579 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs580 =     normalslave(0,0)*(-clhs16*clhs570 - clhs17*clhs577 - clhs18*clhs578 - clhs19*clhs579 + clhs42*clhs573 + clhs44*clhs574 + clhs46*clhs575 + clhs48*clhs576) + normalslave(0,1)*(-clhs1*clhs570 - clhs3*clhs577 + clhs49 + clhs50*clhs573 + clhs51*clhs574 + clhs52*clhs575 + clhs53*clhs576 - clhs578*clhs6 - clhs579*clhs9) + normalslave(0,2)*(-clhs12*clhs570 - clhs13*clhs577 - clhs14*clhs578 - clhs15*clhs579 + clhs54*clhs573 + clhs55*clhs574 + clhs56*clhs575 + clhs57*clhs576);
        const double clhs581 =     clhs580*normalslave(0,0)*penalty_parameter;
        const double clhs582 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs583 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs584 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs585 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs586 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs587 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs588 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs589 =     normalslave(2,0)*(-clhs16*clhs571 - clhs17*clhs586 - clhs18*clhs587 - clhs19*clhs588 + clhs42*clhs582 + clhs44*clhs583 + clhs46*clhs584 + clhs48*clhs585) + normalslave(2,1)*(-clhs1*clhs571 - clhs3*clhs586 + clhs50*clhs582 + clhs51*clhs583 + clhs52*clhs584 + clhs53*clhs585 - clhs587*clhs6 - clhs588*clhs9 + clhs63) + normalslave(2,2)*(-clhs12*clhs571 - clhs13*clhs586 - clhs14*clhs587 - clhs15*clhs588 + clhs54*clhs582 + clhs55*clhs583 + clhs56*clhs584 + clhs57*clhs585);
        const double clhs590 =     clhs589*normalslave(2,0)*penalty_parameter;
        const double clhs591 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs592 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs593 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs594 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs595 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs596 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs597 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs598 =     normalslave(3,0)*(-clhs16*clhs572 - clhs17*clhs595 - clhs18*clhs596 - clhs19*clhs597 + clhs42*clhs591 + clhs44*clhs592 + clhs46*clhs593 + clhs48*clhs594) + normalslave(3,1)*(-clhs1*clhs572 - clhs3*clhs595 + clhs50*clhs591 + clhs51*clhs592 + clhs52*clhs593 + clhs53*clhs594 - clhs596*clhs6 - clhs597*clhs9 + clhs69) + normalslave(3,2)*(-clhs12*clhs572 - clhs13*clhs595 - clhs14*clhs596 - clhs15*clhs597 + clhs54*clhs591 + clhs55*clhs592 + clhs56*clhs593 + clhs57*clhs594);
        const double clhs599 =     clhs598*normalslave(3,0)*penalty_parameter;
        const double clhs600 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs601 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs602 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs603 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs604 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs605 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs606 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs607 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs608 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs609 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs610 =     normalslave(0,0)*(-clhs16*clhs600 - clhs17*clhs607 - clhs18*clhs608 - clhs19*clhs609 + clhs42*clhs603 + clhs44*clhs604 + clhs46*clhs605 + clhs48*clhs606) + normalslave(0,1)*(-clhs1*clhs600 - clhs3*clhs607 + clhs50*clhs603 + clhs51*clhs604 + clhs52*clhs605 + clhs53*clhs606 - clhs6*clhs608 - clhs609*clhs9) + normalslave(0,2)*(-clhs12*clhs600 - clhs13*clhs607 - clhs14*clhs608 - clhs15*clhs609 + clhs49 + clhs54*clhs603 + clhs55*clhs604 + clhs56*clhs605 + clhs57*clhs606);
        const double clhs611 =     clhs610*normalslave(0,0)*penalty_parameter;
        const double clhs612 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs613 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs614 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs615 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs616 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs617 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs618 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs619 =     normalslave(2,0)*(-clhs16*clhs601 - clhs17*clhs616 - clhs18*clhs617 - clhs19*clhs618 + clhs42*clhs612 + clhs44*clhs613 + clhs46*clhs614 + clhs48*clhs615) + normalslave(2,1)*(-clhs1*clhs601 - clhs3*clhs616 + clhs50*clhs612 + clhs51*clhs613 + clhs52*clhs614 + clhs53*clhs615 - clhs6*clhs617 - clhs618*clhs9) + normalslave(2,2)*(-clhs12*clhs601 - clhs13*clhs616 - clhs14*clhs617 - clhs15*clhs618 + clhs54*clhs612 + clhs55*clhs613 + clhs56*clhs614 + clhs57*clhs615 + clhs63);
        const double clhs620 =     clhs619*normalslave(2,0)*penalty_parameter;
        const double clhs621 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs622 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs623 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs624 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs625 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs626 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs627 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs628 =     normalslave(3,0)*(-clhs16*clhs602 - clhs17*clhs625 - clhs18*clhs626 - clhs19*clhs627 + clhs42*clhs621 + clhs44*clhs622 + clhs46*clhs623 + clhs48*clhs624) + normalslave(3,1)*(-clhs1*clhs602 - clhs3*clhs625 + clhs50*clhs621 + clhs51*clhs622 + clhs52*clhs623 + clhs53*clhs624 - clhs6*clhs626 - clhs627*clhs9) + normalslave(3,2)*(-clhs12*clhs602 - clhs13*clhs625 - clhs14*clhs626 - clhs15*clhs627 + clhs54*clhs621 + clhs55*clhs622 + clhs56*clhs623 + clhs57*clhs624 + clhs69);
        const double clhs629 =     clhs628*normalslave(3,0)*penalty_parameter;
        const double clhs630 =     normalslave(0,0)*scale_factor;
        const double clhs631 =     normalslave(2,0)*scale_factor;
        const double clhs632 =     normalslave(3,0)*scale_factor;
        const double clhs633 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs634 =     clhs30*normalslave(2,1)*penalty_parameter;
        const double clhs635 =     clhs40*normalslave(3,1)*penalty_parameter;
        const double clhs636 =     clhs58*normalslave(0,1);
        const double clhs637 =     clhs64*normalslave(2,1);
        const double clhs638 =     clhs70*normalslave(3,1);
        const double clhs639 =     clhs76*normalslave(0,1)*penalty_parameter;
        const double clhs640 =     clhs82*normalslave(2,1)*penalty_parameter;
        const double clhs641 =     clhs88*normalslave(3,1)*penalty_parameter;
        const double clhs642 =     clhs94*normalslave(0,1)*penalty_parameter;
        const double clhs643 =     clhs100*normalslave(2,1)*penalty_parameter;
        const double clhs644 =     clhs106*normalslave(3,1)*penalty_parameter;
        const double clhs645 =     clhs112*normalslave(0,1)*penalty_parameter;
        const double clhs646 =     clhs118*normalslave(2,1)*penalty_parameter;
        const double clhs647 =     clhs124*normalslave(3,1)*penalty_parameter;
        const double clhs648 =     clhs130*normalslave(0,1)*penalty_parameter;
        const double clhs649 =     clhs136*normalslave(2,1)*penalty_parameter;
        const double clhs650 =     clhs142*normalslave(3,1)*penalty_parameter;
        const double clhs651 =     clhs148*normalslave(0,1)*penalty_parameter;
        const double clhs652 =     clhs154*normalslave(2,1)*penalty_parameter;
        const double clhs653 =     clhs160*normalslave(3,1)*penalty_parameter;
        const double clhs654 =     clhs166*normalslave(0,1)*penalty_parameter;
        const double clhs655 =     clhs172*normalslave(2,1)*penalty_parameter;
        const double clhs656 =     clhs178*normalslave(3,1)*penalty_parameter;
        const double clhs657 =     clhs184*normalslave(0,1)*penalty_parameter;
        const double clhs658 =     clhs190*normalslave(2,1)*penalty_parameter;
        const double clhs659 =     clhs196*normalslave(3,1)*penalty_parameter;
        const double clhs660 =     clhs202*normalslave(0,1)*penalty_parameter;
        const double clhs661 =     clhs208*normalslave(2,1)*penalty_parameter;
        const double clhs662 =     clhs214*normalslave(3,1)*penalty_parameter;
        const double clhs663 =     clhs220*normalslave(0,1)*penalty_parameter;
        const double clhs664 =     clhs226*normalslave(2,1)*penalty_parameter;
        const double clhs665 =     clhs232*normalslave(3,1)*penalty_parameter;
        const double clhs666 =     clhs238*normalslave(0,1)*penalty_parameter;
        const double clhs667 =     clhs244*normalslave(2,1)*penalty_parameter;
        const double clhs668 =     clhs250*normalslave(3,1)*penalty_parameter;
        const double clhs669 =     clhs256*normalslave(0,1)*penalty_parameter;
        const double clhs670 =     clhs262*normalslave(2,1)*penalty_parameter;
        const double clhs671 =     clhs268*normalslave(3,1)*penalty_parameter;
        const double clhs672 =     clhs280*normalslave(0,1)*penalty_parameter;
        const double clhs673 =     clhs289*normalslave(2,1)*penalty_parameter;
        const double clhs674 =     clhs298*normalslave(3,1)*penalty_parameter;
        const double clhs675 =     clhs310*normalslave(0,1)*penalty_parameter;
        const double clhs676 =     clhs319*normalslave(2,1)*penalty_parameter;
        const double clhs677 =     clhs328*normalslave(3,1)*penalty_parameter;
        const double clhs678 =     clhs340*normalslave(0,1)*penalty_parameter;
        const double clhs679 =     clhs349*normalslave(2,1)*penalty_parameter;
        const double clhs680 =     clhs358*normalslave(3,1)*penalty_parameter;
        const double clhs681 =     clhs370*normalslave(0,1)*penalty_parameter;
        const double clhs682 =     clhs379*normalslave(2,1)*penalty_parameter;
        const double clhs683 =     clhs388*normalslave(3,1)*penalty_parameter;
        const double clhs684 =     clhs400*normalslave(0,1)*penalty_parameter;
        const double clhs685 =     clhs409*normalslave(2,1)*penalty_parameter;
        const double clhs686 =     clhs418*normalslave(3,1)*penalty_parameter;
        const double clhs687 =     clhs430*normalslave(0,1)*penalty_parameter;
        const double clhs688 =     clhs439*normalslave(2,1)*penalty_parameter;
        const double clhs689 =     clhs448*normalslave(3,1)*penalty_parameter;
        const double clhs690 =     clhs460*normalslave(0,1)*penalty_parameter;
        const double clhs691 =     clhs469*normalslave(2,1)*penalty_parameter;
        const double clhs692 =     clhs478*normalslave(3,1)*penalty_parameter;
        const double clhs693 =     clhs490*normalslave(0,1)*penalty_parameter;
        const double clhs694 =     clhs499*normalslave(2,1)*penalty_parameter;
        const double clhs695 =     clhs508*normalslave(3,1)*penalty_parameter;
        const double clhs696 =     clhs520*normalslave(0,1)*penalty_parameter;
        const double clhs697 =     clhs529*normalslave(2,1)*penalty_parameter;
        const double clhs698 =     clhs538*normalslave(3,1)*penalty_parameter;
        const double clhs699 =     clhs550*normalslave(0,1)*penalty_parameter;
        const double clhs700 =     clhs559*normalslave(2,1)*penalty_parameter;
        const double clhs701 =     clhs568*normalslave(3,1)*penalty_parameter;
        const double clhs702 =     clhs580*normalslave(0,1)*penalty_parameter;
        const double clhs703 =     clhs589*normalslave(2,1)*penalty_parameter;
        const double clhs704 =     clhs598*normalslave(3,1)*penalty_parameter;
        const double clhs705 =     clhs610*normalslave(0,1)*penalty_parameter;
        const double clhs706 =     clhs619*normalslave(2,1)*penalty_parameter;
        const double clhs707 =     clhs628*normalslave(3,1)*penalty_parameter;
        const double clhs708 =     normalslave(0,1)*scale_factor;
        const double clhs709 =     normalslave(2,1)*scale_factor;
        const double clhs710 =     normalslave(3,1)*scale_factor;
        const double clhs711 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs712 =     clhs30*normalslave(2,2)*penalty_parameter;
        const double clhs713 =     clhs40*normalslave(3,2)*penalty_parameter;
        const double clhs714 =     clhs58*normalslave(0,2);
        const double clhs715 =     clhs64*normalslave(2,2);
        const double clhs716 =     clhs70*normalslave(3,2);
        const double clhs717 =     clhs76*normalslave(0,2)*penalty_parameter;
        const double clhs718 =     clhs82*normalslave(2,2)*penalty_parameter;
        const double clhs719 =     clhs88*normalslave(3,2)*penalty_parameter;
        const double clhs720 =     clhs94*normalslave(0,2)*penalty_parameter;
        const double clhs721 =     clhs100*normalslave(2,2)*penalty_parameter;
        const double clhs722 =     clhs106*normalslave(3,2)*penalty_parameter;
        const double clhs723 =     clhs112*normalslave(0,2)*penalty_parameter;
        const double clhs724 =     clhs118*normalslave(2,2)*penalty_parameter;
        const double clhs725 =     clhs124*normalslave(3,2)*penalty_parameter;
        const double clhs726 =     clhs130*normalslave(0,2)*penalty_parameter;
        const double clhs727 =     clhs136*normalslave(2,2)*penalty_parameter;
        const double clhs728 =     clhs142*normalslave(3,2)*penalty_parameter;
        const double clhs729 =     clhs148*normalslave(0,2)*penalty_parameter;
        const double clhs730 =     clhs154*normalslave(2,2)*penalty_parameter;
        const double clhs731 =     clhs160*normalslave(3,2)*penalty_parameter;
        const double clhs732 =     clhs166*normalslave(0,2)*penalty_parameter;
        const double clhs733 =     clhs172*normalslave(2,2)*penalty_parameter;
        const double clhs734 =     clhs178*normalslave(3,2)*penalty_parameter;
        const double clhs735 =     clhs184*normalslave(0,2)*penalty_parameter;
        const double clhs736 =     clhs190*normalslave(2,2)*penalty_parameter;
        const double clhs737 =     clhs196*normalslave(3,2)*penalty_parameter;
        const double clhs738 =     clhs202*normalslave(0,2)*penalty_parameter;
        const double clhs739 =     clhs208*normalslave(2,2)*penalty_parameter;
        const double clhs740 =     clhs214*normalslave(3,2)*penalty_parameter;
        const double clhs741 =     clhs220*normalslave(0,2)*penalty_parameter;
        const double clhs742 =     clhs226*normalslave(2,2)*penalty_parameter;
        const double clhs743 =     clhs232*normalslave(3,2)*penalty_parameter;
        const double clhs744 =     clhs238*normalslave(0,2)*penalty_parameter;
        const double clhs745 =     clhs244*normalslave(2,2)*penalty_parameter;
        const double clhs746 =     clhs250*normalslave(3,2)*penalty_parameter;
        const double clhs747 =     clhs256*normalslave(0,2)*penalty_parameter;
        const double clhs748 =     clhs262*normalslave(2,2)*penalty_parameter;
        const double clhs749 =     clhs268*normalslave(3,2)*penalty_parameter;
        const double clhs750 =     clhs280*normalslave(0,2)*penalty_parameter;
        const double clhs751 =     clhs289*normalslave(2,2)*penalty_parameter;
        const double clhs752 =     clhs298*normalslave(3,2)*penalty_parameter;
        const double clhs753 =     clhs310*normalslave(0,2)*penalty_parameter;
        const double clhs754 =     clhs319*normalslave(2,2)*penalty_parameter;
        const double clhs755 =     clhs328*normalslave(3,2)*penalty_parameter;
        const double clhs756 =     clhs340*normalslave(0,2)*penalty_parameter;
        const double clhs757 =     clhs349*normalslave(2,2)*penalty_parameter;
        const double clhs758 =     clhs358*normalslave(3,2)*penalty_parameter;
        const double clhs759 =     clhs370*normalslave(0,2)*penalty_parameter;
        const double clhs760 =     clhs379*normalslave(2,2)*penalty_parameter;
        const double clhs761 =     clhs388*normalslave(3,2)*penalty_parameter;
        const double clhs762 =     clhs400*normalslave(0,2)*penalty_parameter;
        const double clhs763 =     clhs409*normalslave(2,2)*penalty_parameter;
        const double clhs764 =     clhs418*normalslave(3,2)*penalty_parameter;
        const double clhs765 =     clhs430*normalslave(0,2)*penalty_parameter;
        const double clhs766 =     clhs439*normalslave(2,2)*penalty_parameter;
        const double clhs767 =     clhs448*normalslave(3,2)*penalty_parameter;
        const double clhs768 =     clhs460*normalslave(0,2)*penalty_parameter;
        const double clhs769 =     clhs469*normalslave(2,2)*penalty_parameter;
        const double clhs770 =     clhs478*normalslave(3,2)*penalty_parameter;
        const double clhs771 =     clhs490*normalslave(0,2)*penalty_parameter;
        const double clhs772 =     clhs499*normalslave(2,2)*penalty_parameter;
        const double clhs773 =     clhs508*normalslave(3,2)*penalty_parameter;
        const double clhs774 =     clhs520*normalslave(0,2)*penalty_parameter;
        const double clhs775 =     clhs529*normalslave(2,2)*penalty_parameter;
        const double clhs776 =     clhs538*normalslave(3,2)*penalty_parameter;
        const double clhs777 =     clhs550*normalslave(0,2)*penalty_parameter;
        const double clhs778 =     clhs559*normalslave(2,2)*penalty_parameter;
        const double clhs779 =     clhs568*normalslave(3,2)*penalty_parameter;
        const double clhs780 =     clhs580*normalslave(0,2)*penalty_parameter;
        const double clhs781 =     clhs589*normalslave(2,2)*penalty_parameter;
        const double clhs782 =     clhs598*normalslave(3,2)*penalty_parameter;
        const double clhs783 =     clhs610*normalslave(0,2)*penalty_parameter;
        const double clhs784 =     clhs619*normalslave(2,2)*penalty_parameter;
        const double clhs785 =     clhs628*normalslave(3,2)*penalty_parameter;
        const double clhs786 =     normalslave(0,2)*scale_factor;
        const double clhs787 =     normalslave(2,2)*scale_factor;
        const double clhs788 =     normalslave(3,2)*scale_factor;
        const double clhs789 =     clhs20*normalslave(0,0);
        const double clhs790 =     clhs30*normalslave(2,0);
        const double clhs791 =     clhs40*normalslave(3,0);
        const double clhs792 =     clhs76*normalslave(0,0);
        const double clhs793 =     clhs82*normalslave(2,0);
        const double clhs794 =     clhs88*normalslave(3,0);
        const double clhs795 =     clhs94*normalslave(0,0);
        const double clhs796 =     clhs100*normalslave(2,0);
        const double clhs797 =     clhs106*normalslave(3,0);
        const double clhs798 =     clhs112*normalslave(0,0);
        const double clhs799 =     clhs118*normalslave(2,0);
        const double clhs800 =     clhs124*normalslave(3,0);
        const double clhs801 =     clhs130*normalslave(0,0);
        const double clhs802 =     clhs136*normalslave(2,0);
        const double clhs803 =     clhs142*normalslave(3,0);
        const double clhs804 =     clhs148*normalslave(0,0);
        const double clhs805 =     clhs154*normalslave(2,0);
        const double clhs806 =     clhs160*normalslave(3,0);
        const double clhs807 =     clhs166*normalslave(0,0);
        const double clhs808 =     clhs172*normalslave(2,0);
        const double clhs809 =     clhs178*normalslave(3,0);
        const double clhs810 =     clhs184*normalslave(0,0);
        const double clhs811 =     clhs190*normalslave(2,0);
        const double clhs812 =     clhs196*normalslave(3,0);
        const double clhs813 =     clhs202*normalslave(0,0);
        const double clhs814 =     clhs208*normalslave(2,0);
        const double clhs815 =     clhs214*normalslave(3,0);
        const double clhs816 =     clhs220*normalslave(0,0);
        const double clhs817 =     clhs226*normalslave(2,0);
        const double clhs818 =     clhs232*normalslave(3,0);
        const double clhs819 =     clhs238*normalslave(0,0);
        const double clhs820 =     clhs244*normalslave(2,0);
        const double clhs821 =     clhs250*normalslave(3,0);
        const double clhs822 =     clhs256*normalslave(0,0);
        const double clhs823 =     clhs262*normalslave(2,0);
        const double clhs824 =     clhs268*normalslave(3,0);
        const double clhs825 =     clhs20*normalslave(0,1);
        const double clhs826 =     clhs30*normalslave(2,1);
        const double clhs827 =     clhs40*normalslave(3,1);
        const double clhs828 =     clhs76*normalslave(0,1);
        const double clhs829 =     clhs82*normalslave(2,1);
        const double clhs830 =     clhs88*normalslave(3,1);
        const double clhs831 =     clhs94*normalslave(0,1);
        const double clhs832 =     clhs100*normalslave(2,1);
        const double clhs833 =     clhs106*normalslave(3,1);
        const double clhs834 =     clhs112*normalslave(0,1);
        const double clhs835 =     clhs118*normalslave(2,1);
        const double clhs836 =     clhs124*normalslave(3,1);
        const double clhs837 =     clhs130*normalslave(0,1);
        const double clhs838 =     clhs136*normalslave(2,1);
        const double clhs839 =     clhs142*normalslave(3,1);
        const double clhs840 =     clhs148*normalslave(0,1);
        const double clhs841 =     clhs154*normalslave(2,1);
        const double clhs842 =     clhs160*normalslave(3,1);
        const double clhs843 =     clhs166*normalslave(0,1);
        const double clhs844 =     clhs172*normalslave(2,1);
        const double clhs845 =     clhs178*normalslave(3,1);
        const double clhs846 =     clhs184*normalslave(0,1);
        const double clhs847 =     clhs190*normalslave(2,1);
        const double clhs848 =     clhs196*normalslave(3,1);
        const double clhs849 =     clhs202*normalslave(0,1);
        const double clhs850 =     clhs208*normalslave(2,1);
        const double clhs851 =     clhs214*normalslave(3,1);
        const double clhs852 =     clhs220*normalslave(0,1);
        const double clhs853 =     clhs226*normalslave(2,1);
        const double clhs854 =     clhs232*normalslave(3,1);
        const double clhs855 =     clhs238*normalslave(0,1);
        const double clhs856 =     clhs244*normalslave(2,1);
        const double clhs857 =     clhs250*normalslave(3,1);
        const double clhs858 =     clhs256*normalslave(0,1);
        const double clhs859 =     clhs262*normalslave(2,1);
        const double clhs860 =     clhs268*normalslave(3,1);
        const double clhs861 =     clhs20*normalslave(0,2);
        const double clhs862 =     clhs30*normalslave(2,2);
        const double clhs863 =     clhs40*normalslave(3,2);
        const double clhs864 =     clhs76*normalslave(0,2);
        const double clhs865 =     clhs82*normalslave(2,2);
        const double clhs866 =     clhs88*normalslave(3,2);
        const double clhs867 =     clhs94*normalslave(0,2);
        const double clhs868 =     clhs100*normalslave(2,2);
        const double clhs869 =     clhs106*normalslave(3,2);
        const double clhs870 =     clhs112*normalslave(0,2);
        const double clhs871 =     clhs118*normalslave(2,2);
        const double clhs872 =     clhs124*normalslave(3,2);
        const double clhs873 =     clhs130*normalslave(0,2);
        const double clhs874 =     clhs136*normalslave(2,2);
        const double clhs875 =     clhs142*normalslave(3,2);
        const double clhs876 =     clhs148*normalslave(0,2);
        const double clhs877 =     clhs154*normalslave(2,2);
        const double clhs878 =     clhs160*normalslave(3,2);
        const double clhs879 =     clhs166*normalslave(0,2);
        const double clhs880 =     clhs172*normalslave(2,2);
        const double clhs881 =     clhs178*normalslave(3,2);
        const double clhs882 =     clhs184*normalslave(0,2);
        const double clhs883 =     clhs190*normalslave(2,2);
        const double clhs884 =     clhs196*normalslave(3,2);
        const double clhs885 =     clhs202*normalslave(0,2);
        const double clhs886 =     clhs208*normalslave(2,2);
        const double clhs887 =     clhs214*normalslave(3,2);
        const double clhs888 =     clhs220*normalslave(0,2);
        const double clhs889 =     clhs226*normalslave(2,2);
        const double clhs890 =     clhs232*normalslave(3,2);
        const double clhs891 =     clhs238*normalslave(0,2);
        const double clhs892 =     clhs244*normalslave(2,2);
        const double clhs893 =     clhs250*normalslave(3,2);
        const double clhs894 =     clhs256*normalslave(0,2);
        const double clhs895 =     clhs262*normalslave(2,2);
        const double clhs896 =     clhs268*normalslave(3,2);
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs59 - clhs22*clhs31 + clhs23*clhs65 - clhs32*clhs41 + clhs33*clhs71;
        lhs(0,1)=-clhs0*clhs77 - clhs22*clhs83 - clhs32*clhs89 + clhs59*clhs72 + clhs65*clhs78 + clhs71*clhs84;
        lhs(0,2)=-clhs0*clhs95 - clhs101*clhs22 + clhs102*clhs71 - clhs107*clhs32 + clhs59*clhs90 + clhs65*clhs96;
        lhs(0,3)=-clhs0*clhs113 + clhs108*clhs59 + clhs114*clhs65 - clhs119*clhs22 + clhs120*clhs71 - clhs125*clhs32;
        lhs(0,4)=-clhs0*clhs131 + clhs126*clhs59 + clhs132*clhs65 - clhs137*clhs22 + clhs138*clhs71 - clhs143*clhs32;
        lhs(0,5)=-clhs0*clhs149 + clhs144*clhs59 + clhs150*clhs65 - clhs155*clhs22 + clhs156*clhs71 - clhs161*clhs32;
        lhs(0,6)=-clhs0*clhs167 + clhs162*clhs59 + clhs168*clhs65 - clhs173*clhs22 + clhs174*clhs71 - clhs179*clhs32;
        lhs(0,7)=-clhs0*clhs185 + clhs180*clhs59 + clhs186*clhs65 - clhs191*clhs22 + clhs192*clhs71 - clhs197*clhs32;
        lhs(0,8)=-clhs0*clhs203 + clhs198*clhs59 + clhs204*clhs65 - clhs209*clhs22 + clhs210*clhs71 - clhs215*clhs32;
        lhs(0,9)=-clhs0*clhs221 + clhs216*clhs59 - clhs22*clhs227 + clhs222*clhs65 + clhs228*clhs71 - clhs233*clhs32;
        lhs(0,10)=-clhs0*clhs239 - clhs22*clhs245 + clhs234*clhs59 + clhs240*clhs65 + clhs246*clhs71 - clhs251*clhs32;
        lhs(0,11)=-clhs0*clhs257 - clhs22*clhs263 + clhs252*clhs59 + clhs258*clhs65 + clhs264*clhs71 - clhs269*clhs32;
        lhs(0,12)=clhs0*clhs281 + clhs22*clhs290 + clhs270*clhs59 + clhs271*clhs65 + clhs272*clhs71 + clhs299*clhs32;
        lhs(0,13)=clhs0*clhs311 + clhs22*clhs320 + clhs300*clhs59 + clhs301*clhs65 + clhs302*clhs71 + clhs32*clhs329;
        lhs(0,14)=clhs0*clhs341 + clhs22*clhs350 + clhs32*clhs359 + clhs330*clhs59 + clhs331*clhs65 + clhs332*clhs71;
        lhs(0,15)=clhs0*clhs371 + clhs22*clhs380 + clhs32*clhs389 + clhs360*clhs59 + clhs361*clhs65 + clhs362*clhs71;
        lhs(0,16)=clhs0*clhs401 + clhs22*clhs410 + clhs32*clhs419 + clhs390*clhs59 + clhs391*clhs65 + clhs392*clhs71;
        lhs(0,17)=clhs0*clhs431 + clhs22*clhs440 + clhs32*clhs449 + clhs420*clhs59 + clhs421*clhs65 + clhs422*clhs71;
        lhs(0,18)=clhs0*clhs461 + clhs22*clhs470 + clhs32*clhs479 + clhs450*clhs59 + clhs451*clhs65 + clhs452*clhs71;
        lhs(0,19)=clhs0*clhs491 + clhs22*clhs500 + clhs32*clhs509 + clhs480*clhs59 + clhs481*clhs65 + clhs482*clhs71;
        lhs(0,20)=clhs0*clhs521 + clhs22*clhs530 + clhs32*clhs539 + clhs510*clhs59 + clhs511*clhs65 + clhs512*clhs71;
        lhs(0,21)=clhs0*clhs551 + clhs22*clhs560 + clhs32*clhs569 + clhs540*clhs59 + clhs541*clhs65 + clhs542*clhs71;
        lhs(0,22)=clhs0*clhs581 + clhs22*clhs590 + clhs32*clhs599 + clhs570*clhs59 + clhs571*clhs65 + clhs572*clhs71;
        lhs(0,23)=clhs0*clhs611 + clhs22*clhs620 + clhs32*clhs629 + clhs59*clhs600 + clhs601*clhs65 + clhs602*clhs71;
        lhs(0,24)=clhs0*clhs630;
        lhs(0,25)=0;
        lhs(0,26)=clhs22*clhs631;
        lhs(0,27)=clhs32*clhs632;
        lhs(1,0)=-clhs0*clhs633 + clhs2*clhs636 - clhs22*clhs634 + clhs23*clhs637 - clhs32*clhs635 + clhs33*clhs638;
        lhs(1,1)=-clhs0*clhs639 - clhs22*clhs640 - clhs32*clhs641 + clhs636*clhs72 + clhs637*clhs78 + clhs638*clhs84;
        lhs(1,2)=-clhs0*clhs642 + clhs102*clhs638 - clhs22*clhs643 - clhs32*clhs644 + clhs636*clhs90 + clhs637*clhs96;
        lhs(1,3)=-clhs0*clhs645 + clhs108*clhs636 + clhs114*clhs637 + clhs120*clhs638 - clhs22*clhs646 - clhs32*clhs647;
        lhs(1,4)=-clhs0*clhs648 + clhs126*clhs636 + clhs132*clhs637 + clhs138*clhs638 - clhs22*clhs649 - clhs32*clhs650;
        lhs(1,5)=-clhs0*clhs651 + clhs144*clhs636 + clhs150*clhs637 + clhs156*clhs638 - clhs22*clhs652 - clhs32*clhs653;
        lhs(1,6)=-clhs0*clhs654 + clhs162*clhs636 + clhs168*clhs637 + clhs174*clhs638 - clhs22*clhs655 - clhs32*clhs656;
        lhs(1,7)=-clhs0*clhs657 + clhs180*clhs636 + clhs186*clhs637 + clhs192*clhs638 - clhs22*clhs658 - clhs32*clhs659;
        lhs(1,8)=-clhs0*clhs660 + clhs198*clhs636 + clhs204*clhs637 + clhs210*clhs638 - clhs22*clhs661 - clhs32*clhs662;
        lhs(1,9)=-clhs0*clhs663 + clhs216*clhs636 - clhs22*clhs664 + clhs222*clhs637 + clhs228*clhs638 - clhs32*clhs665;
        lhs(1,10)=-clhs0*clhs666 - clhs22*clhs667 + clhs234*clhs636 + clhs240*clhs637 + clhs246*clhs638 - clhs32*clhs668;
        lhs(1,11)=-clhs0*clhs669 - clhs22*clhs670 + clhs252*clhs636 + clhs258*clhs637 + clhs264*clhs638 - clhs32*clhs671;
        lhs(1,12)=clhs0*clhs672 + clhs22*clhs673 + clhs270*clhs636 + clhs271*clhs637 + clhs272*clhs638 + clhs32*clhs674;
        lhs(1,13)=clhs0*clhs675 + clhs22*clhs676 + clhs300*clhs636 + clhs301*clhs637 + clhs302*clhs638 + clhs32*clhs677;
        lhs(1,14)=clhs0*clhs678 + clhs22*clhs679 + clhs32*clhs680 + clhs330*clhs636 + clhs331*clhs637 + clhs332*clhs638;
        lhs(1,15)=clhs0*clhs681 + clhs22*clhs682 + clhs32*clhs683 + clhs360*clhs636 + clhs361*clhs637 + clhs362*clhs638;
        lhs(1,16)=clhs0*clhs684 + clhs22*clhs685 + clhs32*clhs686 + clhs390*clhs636 + clhs391*clhs637 + clhs392*clhs638;
        lhs(1,17)=clhs0*clhs687 + clhs22*clhs688 + clhs32*clhs689 + clhs420*clhs636 + clhs421*clhs637 + clhs422*clhs638;
        lhs(1,18)=clhs0*clhs690 + clhs22*clhs691 + clhs32*clhs692 + clhs450*clhs636 + clhs451*clhs637 + clhs452*clhs638;
        lhs(1,19)=clhs0*clhs693 + clhs22*clhs694 + clhs32*clhs695 + clhs480*clhs636 + clhs481*clhs637 + clhs482*clhs638;
        lhs(1,20)=clhs0*clhs696 + clhs22*clhs697 + clhs32*clhs698 + clhs510*clhs636 + clhs511*clhs637 + clhs512*clhs638;
        lhs(1,21)=clhs0*clhs699 + clhs22*clhs700 + clhs32*clhs701 + clhs540*clhs636 + clhs541*clhs637 + clhs542*clhs638;
        lhs(1,22)=clhs0*clhs702 + clhs22*clhs703 + clhs32*clhs704 + clhs570*clhs636 + clhs571*clhs637 + clhs572*clhs638;
        lhs(1,23)=clhs0*clhs705 + clhs22*clhs706 + clhs32*clhs707 + clhs600*clhs636 + clhs601*clhs637 + clhs602*clhs638;
        lhs(1,24)=clhs0*clhs708;
        lhs(1,25)=0;
        lhs(1,26)=clhs22*clhs709;
        lhs(1,27)=clhs32*clhs710;
        lhs(2,0)=-clhs0*clhs711 + clhs2*clhs714 - clhs22*clhs712 + clhs23*clhs715 - clhs32*clhs713 + clhs33*clhs716;
        lhs(2,1)=-clhs0*clhs717 - clhs22*clhs718 - clhs32*clhs719 + clhs714*clhs72 + clhs715*clhs78 + clhs716*clhs84;
        lhs(2,2)=-clhs0*clhs720 + clhs102*clhs716 - clhs22*clhs721 - clhs32*clhs722 + clhs714*clhs90 + clhs715*clhs96;
        lhs(2,3)=-clhs0*clhs723 + clhs108*clhs714 + clhs114*clhs715 + clhs120*clhs716 - clhs22*clhs724 - clhs32*clhs725;
        lhs(2,4)=-clhs0*clhs726 + clhs126*clhs714 + clhs132*clhs715 + clhs138*clhs716 - clhs22*clhs727 - clhs32*clhs728;
        lhs(2,5)=-clhs0*clhs729 + clhs144*clhs714 + clhs150*clhs715 + clhs156*clhs716 - clhs22*clhs730 - clhs32*clhs731;
        lhs(2,6)=-clhs0*clhs732 + clhs162*clhs714 + clhs168*clhs715 + clhs174*clhs716 - clhs22*clhs733 - clhs32*clhs734;
        lhs(2,7)=-clhs0*clhs735 + clhs180*clhs714 + clhs186*clhs715 + clhs192*clhs716 - clhs22*clhs736 - clhs32*clhs737;
        lhs(2,8)=-clhs0*clhs738 + clhs198*clhs714 + clhs204*clhs715 + clhs210*clhs716 - clhs22*clhs739 - clhs32*clhs740;
        lhs(2,9)=-clhs0*clhs741 + clhs216*clhs714 - clhs22*clhs742 + clhs222*clhs715 + clhs228*clhs716 - clhs32*clhs743;
        lhs(2,10)=-clhs0*clhs744 - clhs22*clhs745 + clhs234*clhs714 + clhs240*clhs715 + clhs246*clhs716 - clhs32*clhs746;
        lhs(2,11)=-clhs0*clhs747 - clhs22*clhs748 + clhs252*clhs714 + clhs258*clhs715 + clhs264*clhs716 - clhs32*clhs749;
        lhs(2,12)=clhs0*clhs750 + clhs22*clhs751 + clhs270*clhs714 + clhs271*clhs715 + clhs272*clhs716 + clhs32*clhs752;
        lhs(2,13)=clhs0*clhs753 + clhs22*clhs754 + clhs300*clhs714 + clhs301*clhs715 + clhs302*clhs716 + clhs32*clhs755;
        lhs(2,14)=clhs0*clhs756 + clhs22*clhs757 + clhs32*clhs758 + clhs330*clhs714 + clhs331*clhs715 + clhs332*clhs716;
        lhs(2,15)=clhs0*clhs759 + clhs22*clhs760 + clhs32*clhs761 + clhs360*clhs714 + clhs361*clhs715 + clhs362*clhs716;
        lhs(2,16)=clhs0*clhs762 + clhs22*clhs763 + clhs32*clhs764 + clhs390*clhs714 + clhs391*clhs715 + clhs392*clhs716;
        lhs(2,17)=clhs0*clhs765 + clhs22*clhs766 + clhs32*clhs767 + clhs420*clhs714 + clhs421*clhs715 + clhs422*clhs716;
        lhs(2,18)=clhs0*clhs768 + clhs22*clhs769 + clhs32*clhs770 + clhs450*clhs714 + clhs451*clhs715 + clhs452*clhs716;
        lhs(2,19)=clhs0*clhs771 + clhs22*clhs772 + clhs32*clhs773 + clhs480*clhs714 + clhs481*clhs715 + clhs482*clhs716;
        lhs(2,20)=clhs0*clhs774 + clhs22*clhs775 + clhs32*clhs776 + clhs510*clhs714 + clhs511*clhs715 + clhs512*clhs716;
        lhs(2,21)=clhs0*clhs777 + clhs22*clhs778 + clhs32*clhs779 + clhs540*clhs714 + clhs541*clhs715 + clhs542*clhs716;
        lhs(2,22)=clhs0*clhs780 + clhs22*clhs781 + clhs32*clhs782 + clhs570*clhs714 + clhs571*clhs715 + clhs572*clhs716;
        lhs(2,23)=clhs0*clhs783 + clhs22*clhs784 + clhs32*clhs785 + clhs600*clhs714 + clhs601*clhs715 + clhs602*clhs716;
        lhs(2,24)=clhs0*clhs786;
        lhs(2,25)=0;
        lhs(2,26)=clhs22*clhs787;
        lhs(2,27)=clhs32*clhs788;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs65 - clhs34*clhs41 + clhs35*clhs71 + clhs5*clhs59;
        lhs(3,1)=-clhs24*clhs83 - clhs34*clhs89 - clhs4*clhs77 + clhs59*clhs73 + clhs65*clhs79 + clhs71*clhs85;
        lhs(3,2)=-clhs101*clhs24 + clhs103*clhs71 - clhs107*clhs34 - clhs4*clhs95 + clhs59*clhs91 + clhs65*clhs97;
        lhs(3,3)=clhs109*clhs59 - clhs113*clhs4 + clhs115*clhs65 - clhs119*clhs24 + clhs121*clhs71 - clhs125*clhs34;
        lhs(3,4)=clhs127*clhs59 - clhs131*clhs4 + clhs133*clhs65 - clhs137*clhs24 + clhs139*clhs71 - clhs143*clhs34;
        lhs(3,5)=clhs145*clhs59 - clhs149*clhs4 + clhs151*clhs65 - clhs155*clhs24 + clhs157*clhs71 - clhs161*clhs34;
        lhs(3,6)=clhs163*clhs59 - clhs167*clhs4 + clhs169*clhs65 - clhs173*clhs24 + clhs175*clhs71 - clhs179*clhs34;
        lhs(3,7)=clhs181*clhs59 - clhs185*clhs4 + clhs187*clhs65 - clhs191*clhs24 + clhs193*clhs71 - clhs197*clhs34;
        lhs(3,8)=clhs199*clhs59 - clhs203*clhs4 + clhs205*clhs65 - clhs209*clhs24 + clhs211*clhs71 - clhs215*clhs34;
        lhs(3,9)=clhs217*clhs59 - clhs221*clhs4 + clhs223*clhs65 - clhs227*clhs24 + clhs229*clhs71 - clhs233*clhs34;
        lhs(3,10)=clhs235*clhs59 - clhs239*clhs4 - clhs24*clhs245 + clhs241*clhs65 + clhs247*clhs71 - clhs251*clhs34;
        lhs(3,11)=-clhs24*clhs263 + clhs253*clhs59 - clhs257*clhs4 + clhs259*clhs65 + clhs265*clhs71 - clhs269*clhs34;
        lhs(3,12)=clhs24*clhs290 + clhs277*clhs59 + clhs281*clhs4 + clhs286*clhs65 + clhs295*clhs71 + clhs299*clhs34;
        lhs(3,13)=clhs24*clhs320 + clhs307*clhs59 + clhs311*clhs4 + clhs316*clhs65 + clhs325*clhs71 + clhs329*clhs34;
        lhs(3,14)=clhs24*clhs350 + clhs337*clhs59 + clhs34*clhs359 + clhs341*clhs4 + clhs346*clhs65 + clhs355*clhs71;
        lhs(3,15)=clhs24*clhs380 + clhs34*clhs389 + clhs367*clhs59 + clhs371*clhs4 + clhs376*clhs65 + clhs385*clhs71;
        lhs(3,16)=clhs24*clhs410 + clhs34*clhs419 + clhs397*clhs59 + clhs4*clhs401 + clhs406*clhs65 + clhs415*clhs71;
        lhs(3,17)=clhs24*clhs440 + clhs34*clhs449 + clhs4*clhs431 + clhs427*clhs59 + clhs436*clhs65 + clhs445*clhs71;
        lhs(3,18)=clhs24*clhs470 + clhs34*clhs479 + clhs4*clhs461 + clhs457*clhs59 + clhs466*clhs65 + clhs475*clhs71;
        lhs(3,19)=clhs24*clhs500 + clhs34*clhs509 + clhs4*clhs491 + clhs487*clhs59 + clhs496*clhs65 + clhs505*clhs71;
        lhs(3,20)=clhs24*clhs530 + clhs34*clhs539 + clhs4*clhs521 + clhs517*clhs59 + clhs526*clhs65 + clhs535*clhs71;
        lhs(3,21)=clhs24*clhs560 + clhs34*clhs569 + clhs4*clhs551 + clhs547*clhs59 + clhs556*clhs65 + clhs565*clhs71;
        lhs(3,22)=clhs24*clhs590 + clhs34*clhs599 + clhs4*clhs581 + clhs577*clhs59 + clhs586*clhs65 + clhs595*clhs71;
        lhs(3,23)=clhs24*clhs620 + clhs34*clhs629 + clhs4*clhs611 + clhs59*clhs607 + clhs616*clhs65 + clhs625*clhs71;
        lhs(3,24)=clhs4*clhs630;
        lhs(3,25)=0;
        lhs(3,26)=clhs24*clhs631;
        lhs(3,27)=clhs34*clhs632;
        lhs(4,0)=-clhs24*clhs634 + clhs25*clhs637 - clhs34*clhs635 + clhs35*clhs638 - clhs4*clhs633 + clhs5*clhs636;
        lhs(4,1)=-clhs24*clhs640 - clhs34*clhs641 - clhs4*clhs639 + clhs636*clhs73 + clhs637*clhs79 + clhs638*clhs85;
        lhs(4,2)=clhs103*clhs638 - clhs24*clhs643 - clhs34*clhs644 - clhs4*clhs642 + clhs636*clhs91 + clhs637*clhs97;
        lhs(4,3)=clhs109*clhs636 + clhs115*clhs637 + clhs121*clhs638 - clhs24*clhs646 - clhs34*clhs647 - clhs4*clhs645;
        lhs(4,4)=clhs127*clhs636 + clhs133*clhs637 + clhs139*clhs638 - clhs24*clhs649 - clhs34*clhs650 - clhs4*clhs648;
        lhs(4,5)=clhs145*clhs636 + clhs151*clhs637 + clhs157*clhs638 - clhs24*clhs652 - clhs34*clhs653 - clhs4*clhs651;
        lhs(4,6)=clhs163*clhs636 + clhs169*clhs637 + clhs175*clhs638 - clhs24*clhs655 - clhs34*clhs656 - clhs4*clhs654;
        lhs(4,7)=clhs181*clhs636 + clhs187*clhs637 + clhs193*clhs638 - clhs24*clhs658 - clhs34*clhs659 - clhs4*clhs657;
        lhs(4,8)=clhs199*clhs636 + clhs205*clhs637 + clhs211*clhs638 - clhs24*clhs661 - clhs34*clhs662 - clhs4*clhs660;
        lhs(4,9)=clhs217*clhs636 + clhs223*clhs637 + clhs229*clhs638 - clhs24*clhs664 - clhs34*clhs665 - clhs4*clhs663;
        lhs(4,10)=clhs235*clhs636 - clhs24*clhs667 + clhs241*clhs637 + clhs247*clhs638 - clhs34*clhs668 - clhs4*clhs666;
        lhs(4,11)=-clhs24*clhs670 + clhs253*clhs636 + clhs259*clhs637 + clhs265*clhs638 - clhs34*clhs671 - clhs4*clhs669;
        lhs(4,12)=clhs24*clhs673 + clhs277*clhs636 + clhs286*clhs637 + clhs295*clhs638 + clhs34*clhs674 + clhs4*clhs672;
        lhs(4,13)=clhs24*clhs676 + clhs307*clhs636 + clhs316*clhs637 + clhs325*clhs638 + clhs34*clhs677 + clhs4*clhs675;
        lhs(4,14)=clhs24*clhs679 + clhs337*clhs636 + clhs34*clhs680 + clhs346*clhs637 + clhs355*clhs638 + clhs4*clhs678;
        lhs(4,15)=clhs24*clhs682 + clhs34*clhs683 + clhs367*clhs636 + clhs376*clhs637 + clhs385*clhs638 + clhs4*clhs681;
        lhs(4,16)=clhs24*clhs685 + clhs34*clhs686 + clhs397*clhs636 + clhs4*clhs684 + clhs406*clhs637 + clhs415*clhs638;
        lhs(4,17)=clhs24*clhs688 + clhs34*clhs689 + clhs4*clhs687 + clhs427*clhs636 + clhs436*clhs637 + clhs445*clhs638;
        lhs(4,18)=clhs24*clhs691 + clhs34*clhs692 + clhs4*clhs690 + clhs457*clhs636 + clhs466*clhs637 + clhs475*clhs638;
        lhs(4,19)=clhs24*clhs694 + clhs34*clhs695 + clhs4*clhs693 + clhs487*clhs636 + clhs496*clhs637 + clhs505*clhs638;
        lhs(4,20)=clhs24*clhs697 + clhs34*clhs698 + clhs4*clhs696 + clhs517*clhs636 + clhs526*clhs637 + clhs535*clhs638;
        lhs(4,21)=clhs24*clhs700 + clhs34*clhs701 + clhs4*clhs699 + clhs547*clhs636 + clhs556*clhs637 + clhs565*clhs638;
        lhs(4,22)=clhs24*clhs703 + clhs34*clhs704 + clhs4*clhs702 + clhs577*clhs636 + clhs586*clhs637 + clhs595*clhs638;
        lhs(4,23)=clhs24*clhs706 + clhs34*clhs707 + clhs4*clhs705 + clhs607*clhs636 + clhs616*clhs637 + clhs625*clhs638;
        lhs(4,24)=clhs4*clhs708;
        lhs(4,25)=0;
        lhs(4,26)=clhs24*clhs709;
        lhs(4,27)=clhs34*clhs710;
        lhs(5,0)=-clhs24*clhs712 + clhs25*clhs715 - clhs34*clhs713 + clhs35*clhs716 - clhs4*clhs711 + clhs5*clhs714;
        lhs(5,1)=-clhs24*clhs718 - clhs34*clhs719 - clhs4*clhs717 + clhs714*clhs73 + clhs715*clhs79 + clhs716*clhs85;
        lhs(5,2)=clhs103*clhs716 - clhs24*clhs721 - clhs34*clhs722 - clhs4*clhs720 + clhs714*clhs91 + clhs715*clhs97;
        lhs(5,3)=clhs109*clhs714 + clhs115*clhs715 + clhs121*clhs716 - clhs24*clhs724 - clhs34*clhs725 - clhs4*clhs723;
        lhs(5,4)=clhs127*clhs714 + clhs133*clhs715 + clhs139*clhs716 - clhs24*clhs727 - clhs34*clhs728 - clhs4*clhs726;
        lhs(5,5)=clhs145*clhs714 + clhs151*clhs715 + clhs157*clhs716 - clhs24*clhs730 - clhs34*clhs731 - clhs4*clhs729;
        lhs(5,6)=clhs163*clhs714 + clhs169*clhs715 + clhs175*clhs716 - clhs24*clhs733 - clhs34*clhs734 - clhs4*clhs732;
        lhs(5,7)=clhs181*clhs714 + clhs187*clhs715 + clhs193*clhs716 - clhs24*clhs736 - clhs34*clhs737 - clhs4*clhs735;
        lhs(5,8)=clhs199*clhs714 + clhs205*clhs715 + clhs211*clhs716 - clhs24*clhs739 - clhs34*clhs740 - clhs4*clhs738;
        lhs(5,9)=clhs217*clhs714 + clhs223*clhs715 + clhs229*clhs716 - clhs24*clhs742 - clhs34*clhs743 - clhs4*clhs741;
        lhs(5,10)=clhs235*clhs714 - clhs24*clhs745 + clhs241*clhs715 + clhs247*clhs716 - clhs34*clhs746 - clhs4*clhs744;
        lhs(5,11)=-clhs24*clhs748 + clhs253*clhs714 + clhs259*clhs715 + clhs265*clhs716 - clhs34*clhs749 - clhs4*clhs747;
        lhs(5,12)=clhs24*clhs751 + clhs277*clhs714 + clhs286*clhs715 + clhs295*clhs716 + clhs34*clhs752 + clhs4*clhs750;
        lhs(5,13)=clhs24*clhs754 + clhs307*clhs714 + clhs316*clhs715 + clhs325*clhs716 + clhs34*clhs755 + clhs4*clhs753;
        lhs(5,14)=clhs24*clhs757 + clhs337*clhs714 + clhs34*clhs758 + clhs346*clhs715 + clhs355*clhs716 + clhs4*clhs756;
        lhs(5,15)=clhs24*clhs760 + clhs34*clhs761 + clhs367*clhs714 + clhs376*clhs715 + clhs385*clhs716 + clhs4*clhs759;
        lhs(5,16)=clhs24*clhs763 + clhs34*clhs764 + clhs397*clhs714 + clhs4*clhs762 + clhs406*clhs715 + clhs415*clhs716;
        lhs(5,17)=clhs24*clhs766 + clhs34*clhs767 + clhs4*clhs765 + clhs427*clhs714 + clhs436*clhs715 + clhs445*clhs716;
        lhs(5,18)=clhs24*clhs769 + clhs34*clhs770 + clhs4*clhs768 + clhs457*clhs714 + clhs466*clhs715 + clhs475*clhs716;
        lhs(5,19)=clhs24*clhs772 + clhs34*clhs773 + clhs4*clhs771 + clhs487*clhs714 + clhs496*clhs715 + clhs505*clhs716;
        lhs(5,20)=clhs24*clhs775 + clhs34*clhs776 + clhs4*clhs774 + clhs517*clhs714 + clhs526*clhs715 + clhs535*clhs716;
        lhs(5,21)=clhs24*clhs778 + clhs34*clhs779 + clhs4*clhs777 + clhs547*clhs714 + clhs556*clhs715 + clhs565*clhs716;
        lhs(5,22)=clhs24*clhs781 + clhs34*clhs782 + clhs4*clhs780 + clhs577*clhs714 + clhs586*clhs715 + clhs595*clhs716;
        lhs(5,23)=clhs24*clhs784 + clhs34*clhs785 + clhs4*clhs783 + clhs607*clhs714 + clhs616*clhs715 + clhs625*clhs716;
        lhs(5,24)=clhs4*clhs786;
        lhs(5,25)=0;
        lhs(5,26)=clhs24*clhs787;
        lhs(5,27)=clhs34*clhs788;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs65 - clhs36*clhs41 + clhs37*clhs71 + clhs59*clhs8;
        lhs(6,1)=-clhs26*clhs83 - clhs36*clhs89 + clhs59*clhs74 + clhs65*clhs80 - clhs7*clhs77 + clhs71*clhs86;
        lhs(6,2)=-clhs101*clhs26 + clhs104*clhs71 - clhs107*clhs36 + clhs59*clhs92 + clhs65*clhs98 - clhs7*clhs95;
        lhs(6,3)=clhs110*clhs59 - clhs113*clhs7 + clhs116*clhs65 - clhs119*clhs26 + clhs122*clhs71 - clhs125*clhs36;
        lhs(6,4)=clhs128*clhs59 - clhs131*clhs7 + clhs134*clhs65 - clhs137*clhs26 + clhs140*clhs71 - clhs143*clhs36;
        lhs(6,5)=clhs146*clhs59 - clhs149*clhs7 + clhs152*clhs65 - clhs155*clhs26 + clhs158*clhs71 - clhs161*clhs36;
        lhs(6,6)=clhs164*clhs59 - clhs167*clhs7 + clhs170*clhs65 - clhs173*clhs26 + clhs176*clhs71 - clhs179*clhs36;
        lhs(6,7)=clhs182*clhs59 - clhs185*clhs7 + clhs188*clhs65 - clhs191*clhs26 + clhs194*clhs71 - clhs197*clhs36;
        lhs(6,8)=clhs200*clhs59 - clhs203*clhs7 + clhs206*clhs65 - clhs209*clhs26 + clhs212*clhs71 - clhs215*clhs36;
        lhs(6,9)=clhs218*clhs59 - clhs221*clhs7 + clhs224*clhs65 - clhs227*clhs26 + clhs230*clhs71 - clhs233*clhs36;
        lhs(6,10)=clhs236*clhs59 - clhs239*clhs7 + clhs242*clhs65 - clhs245*clhs26 + clhs248*clhs71 - clhs251*clhs36;
        lhs(6,11)=clhs254*clhs59 - clhs257*clhs7 - clhs26*clhs263 + clhs260*clhs65 + clhs266*clhs71 - clhs269*clhs36;
        lhs(6,12)=clhs26*clhs290 + clhs278*clhs59 + clhs281*clhs7 + clhs287*clhs65 + clhs296*clhs71 + clhs299*clhs36;
        lhs(6,13)=clhs26*clhs320 + clhs308*clhs59 + clhs311*clhs7 + clhs317*clhs65 + clhs326*clhs71 + clhs329*clhs36;
        lhs(6,14)=clhs26*clhs350 + clhs338*clhs59 + clhs341*clhs7 + clhs347*clhs65 + clhs356*clhs71 + clhs359*clhs36;
        lhs(6,15)=clhs26*clhs380 + clhs36*clhs389 + clhs368*clhs59 + clhs371*clhs7 + clhs377*clhs65 + clhs386*clhs71;
        lhs(6,16)=clhs26*clhs410 + clhs36*clhs419 + clhs398*clhs59 + clhs401*clhs7 + clhs407*clhs65 + clhs416*clhs71;
        lhs(6,17)=clhs26*clhs440 + clhs36*clhs449 + clhs428*clhs59 + clhs431*clhs7 + clhs437*clhs65 + clhs446*clhs71;
        lhs(6,18)=clhs26*clhs470 + clhs36*clhs479 + clhs458*clhs59 + clhs461*clhs7 + clhs467*clhs65 + clhs476*clhs71;
        lhs(6,19)=clhs26*clhs500 + clhs36*clhs509 + clhs488*clhs59 + clhs491*clhs7 + clhs497*clhs65 + clhs506*clhs71;
        lhs(6,20)=clhs26*clhs530 + clhs36*clhs539 + clhs518*clhs59 + clhs521*clhs7 + clhs527*clhs65 + clhs536*clhs71;
        lhs(6,21)=clhs26*clhs560 + clhs36*clhs569 + clhs548*clhs59 + clhs551*clhs7 + clhs557*clhs65 + clhs566*clhs71;
        lhs(6,22)=clhs26*clhs590 + clhs36*clhs599 + clhs578*clhs59 + clhs581*clhs7 + clhs587*clhs65 + clhs596*clhs71;
        lhs(6,23)=clhs26*clhs620 + clhs36*clhs629 + clhs59*clhs608 + clhs611*clhs7 + clhs617*clhs65 + clhs626*clhs71;
        lhs(6,24)=clhs630*clhs7;
        lhs(6,25)=0;
        lhs(6,26)=clhs26*clhs631;
        lhs(6,27)=clhs36*clhs632;
        lhs(7,0)=-clhs26*clhs634 + clhs27*clhs637 - clhs36*clhs635 + clhs37*clhs638 - clhs633*clhs7 + clhs636*clhs8;
        lhs(7,1)=-clhs26*clhs640 - clhs36*clhs641 + clhs636*clhs74 + clhs637*clhs80 + clhs638*clhs86 - clhs639*clhs7;
        lhs(7,2)=clhs104*clhs638 - clhs26*clhs643 - clhs36*clhs644 + clhs636*clhs92 + clhs637*clhs98 - clhs642*clhs7;
        lhs(7,3)=clhs110*clhs636 + clhs116*clhs637 + clhs122*clhs638 - clhs26*clhs646 - clhs36*clhs647 - clhs645*clhs7;
        lhs(7,4)=clhs128*clhs636 + clhs134*clhs637 + clhs140*clhs638 - clhs26*clhs649 - clhs36*clhs650 - clhs648*clhs7;
        lhs(7,5)=clhs146*clhs636 + clhs152*clhs637 + clhs158*clhs638 - clhs26*clhs652 - clhs36*clhs653 - clhs651*clhs7;
        lhs(7,6)=clhs164*clhs636 + clhs170*clhs637 + clhs176*clhs638 - clhs26*clhs655 - clhs36*clhs656 - clhs654*clhs7;
        lhs(7,7)=clhs182*clhs636 + clhs188*clhs637 + clhs194*clhs638 - clhs26*clhs658 - clhs36*clhs659 - clhs657*clhs7;
        lhs(7,8)=clhs200*clhs636 + clhs206*clhs637 + clhs212*clhs638 - clhs26*clhs661 - clhs36*clhs662 - clhs660*clhs7;
        lhs(7,9)=clhs218*clhs636 + clhs224*clhs637 + clhs230*clhs638 - clhs26*clhs664 - clhs36*clhs665 - clhs663*clhs7;
        lhs(7,10)=clhs236*clhs636 + clhs242*clhs637 + clhs248*clhs638 - clhs26*clhs667 - clhs36*clhs668 - clhs666*clhs7;
        lhs(7,11)=clhs254*clhs636 - clhs26*clhs670 + clhs260*clhs637 + clhs266*clhs638 - clhs36*clhs671 - clhs669*clhs7;
        lhs(7,12)=clhs26*clhs673 + clhs278*clhs636 + clhs287*clhs637 + clhs296*clhs638 + clhs36*clhs674 + clhs672*clhs7;
        lhs(7,13)=clhs26*clhs676 + clhs308*clhs636 + clhs317*clhs637 + clhs326*clhs638 + clhs36*clhs677 + clhs675*clhs7;
        lhs(7,14)=clhs26*clhs679 + clhs338*clhs636 + clhs347*clhs637 + clhs356*clhs638 + clhs36*clhs680 + clhs678*clhs7;
        lhs(7,15)=clhs26*clhs682 + clhs36*clhs683 + clhs368*clhs636 + clhs377*clhs637 + clhs386*clhs638 + clhs681*clhs7;
        lhs(7,16)=clhs26*clhs685 + clhs36*clhs686 + clhs398*clhs636 + clhs407*clhs637 + clhs416*clhs638 + clhs684*clhs7;
        lhs(7,17)=clhs26*clhs688 + clhs36*clhs689 + clhs428*clhs636 + clhs437*clhs637 + clhs446*clhs638 + clhs687*clhs7;
        lhs(7,18)=clhs26*clhs691 + clhs36*clhs692 + clhs458*clhs636 + clhs467*clhs637 + clhs476*clhs638 + clhs690*clhs7;
        lhs(7,19)=clhs26*clhs694 + clhs36*clhs695 + clhs488*clhs636 + clhs497*clhs637 + clhs506*clhs638 + clhs693*clhs7;
        lhs(7,20)=clhs26*clhs697 + clhs36*clhs698 + clhs518*clhs636 + clhs527*clhs637 + clhs536*clhs638 + clhs696*clhs7;
        lhs(7,21)=clhs26*clhs700 + clhs36*clhs701 + clhs548*clhs636 + clhs557*clhs637 + clhs566*clhs638 + clhs699*clhs7;
        lhs(7,22)=clhs26*clhs703 + clhs36*clhs704 + clhs578*clhs636 + clhs587*clhs637 + clhs596*clhs638 + clhs7*clhs702;
        lhs(7,23)=clhs26*clhs706 + clhs36*clhs707 + clhs608*clhs636 + clhs617*clhs637 + clhs626*clhs638 + clhs7*clhs705;
        lhs(7,24)=clhs7*clhs708;
        lhs(7,25)=0;
        lhs(7,26)=clhs26*clhs709;
        lhs(7,27)=clhs36*clhs710;
        lhs(8,0)=-clhs26*clhs712 + clhs27*clhs715 - clhs36*clhs713 + clhs37*clhs716 - clhs7*clhs711 + clhs714*clhs8;
        lhs(8,1)=-clhs26*clhs718 - clhs36*clhs719 - clhs7*clhs717 + clhs714*clhs74 + clhs715*clhs80 + clhs716*clhs86;
        lhs(8,2)=clhs104*clhs716 - clhs26*clhs721 - clhs36*clhs722 - clhs7*clhs720 + clhs714*clhs92 + clhs715*clhs98;
        lhs(8,3)=clhs110*clhs714 + clhs116*clhs715 + clhs122*clhs716 - clhs26*clhs724 - clhs36*clhs725 - clhs7*clhs723;
        lhs(8,4)=clhs128*clhs714 + clhs134*clhs715 + clhs140*clhs716 - clhs26*clhs727 - clhs36*clhs728 - clhs7*clhs726;
        lhs(8,5)=clhs146*clhs714 + clhs152*clhs715 + clhs158*clhs716 - clhs26*clhs730 - clhs36*clhs731 - clhs7*clhs729;
        lhs(8,6)=clhs164*clhs714 + clhs170*clhs715 + clhs176*clhs716 - clhs26*clhs733 - clhs36*clhs734 - clhs7*clhs732;
        lhs(8,7)=clhs182*clhs714 + clhs188*clhs715 + clhs194*clhs716 - clhs26*clhs736 - clhs36*clhs737 - clhs7*clhs735;
        lhs(8,8)=clhs200*clhs714 + clhs206*clhs715 + clhs212*clhs716 - clhs26*clhs739 - clhs36*clhs740 - clhs7*clhs738;
        lhs(8,9)=clhs218*clhs714 + clhs224*clhs715 + clhs230*clhs716 - clhs26*clhs742 - clhs36*clhs743 - clhs7*clhs741;
        lhs(8,10)=clhs236*clhs714 + clhs242*clhs715 + clhs248*clhs716 - clhs26*clhs745 - clhs36*clhs746 - clhs7*clhs744;
        lhs(8,11)=clhs254*clhs714 - clhs26*clhs748 + clhs260*clhs715 + clhs266*clhs716 - clhs36*clhs749 - clhs7*clhs747;
        lhs(8,12)=clhs26*clhs751 + clhs278*clhs714 + clhs287*clhs715 + clhs296*clhs716 + clhs36*clhs752 + clhs7*clhs750;
        lhs(8,13)=clhs26*clhs754 + clhs308*clhs714 + clhs317*clhs715 + clhs326*clhs716 + clhs36*clhs755 + clhs7*clhs753;
        lhs(8,14)=clhs26*clhs757 + clhs338*clhs714 + clhs347*clhs715 + clhs356*clhs716 + clhs36*clhs758 + clhs7*clhs756;
        lhs(8,15)=clhs26*clhs760 + clhs36*clhs761 + clhs368*clhs714 + clhs377*clhs715 + clhs386*clhs716 + clhs7*clhs759;
        lhs(8,16)=clhs26*clhs763 + clhs36*clhs764 + clhs398*clhs714 + clhs407*clhs715 + clhs416*clhs716 + clhs7*clhs762;
        lhs(8,17)=clhs26*clhs766 + clhs36*clhs767 + clhs428*clhs714 + clhs437*clhs715 + clhs446*clhs716 + clhs7*clhs765;
        lhs(8,18)=clhs26*clhs769 + clhs36*clhs770 + clhs458*clhs714 + clhs467*clhs715 + clhs476*clhs716 + clhs7*clhs768;
        lhs(8,19)=clhs26*clhs772 + clhs36*clhs773 + clhs488*clhs714 + clhs497*clhs715 + clhs506*clhs716 + clhs7*clhs771;
        lhs(8,20)=clhs26*clhs775 + clhs36*clhs776 + clhs518*clhs714 + clhs527*clhs715 + clhs536*clhs716 + clhs7*clhs774;
        lhs(8,21)=clhs26*clhs778 + clhs36*clhs779 + clhs548*clhs714 + clhs557*clhs715 + clhs566*clhs716 + clhs7*clhs777;
        lhs(8,22)=clhs26*clhs781 + clhs36*clhs782 + clhs578*clhs714 + clhs587*clhs715 + clhs596*clhs716 + clhs7*clhs780;
        lhs(8,23)=clhs26*clhs784 + clhs36*clhs785 + clhs608*clhs714 + clhs617*clhs715 + clhs626*clhs716 + clhs7*clhs783;
        lhs(8,24)=clhs7*clhs786;
        lhs(8,25)=0;
        lhs(8,26)=clhs26*clhs787;
        lhs(8,27)=clhs36*clhs788;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs59 - clhs28*clhs31 + clhs29*clhs65 - clhs38*clhs41 + clhs39*clhs71;
        lhs(9,1)=-clhs10*clhs77 - clhs28*clhs83 - clhs38*clhs89 + clhs59*clhs75 + clhs65*clhs81 + clhs71*clhs87;
        lhs(9,2)=-clhs10*clhs95 - clhs101*clhs28 + clhs105*clhs71 - clhs107*clhs38 + clhs59*clhs93 + clhs65*clhs99;
        lhs(9,3)=-clhs10*clhs113 + clhs111*clhs59 + clhs117*clhs65 - clhs119*clhs28 + clhs123*clhs71 - clhs125*clhs38;
        lhs(9,4)=-clhs10*clhs131 + clhs129*clhs59 + clhs135*clhs65 - clhs137*clhs28 + clhs141*clhs71 - clhs143*clhs38;
        lhs(9,5)=-clhs10*clhs149 + clhs147*clhs59 + clhs153*clhs65 - clhs155*clhs28 + clhs159*clhs71 - clhs161*clhs38;
        lhs(9,6)=-clhs10*clhs167 + clhs165*clhs59 + clhs171*clhs65 - clhs173*clhs28 + clhs177*clhs71 - clhs179*clhs38;
        lhs(9,7)=-clhs10*clhs185 + clhs183*clhs59 + clhs189*clhs65 - clhs191*clhs28 + clhs195*clhs71 - clhs197*clhs38;
        lhs(9,8)=-clhs10*clhs203 + clhs201*clhs59 + clhs207*clhs65 - clhs209*clhs28 + clhs213*clhs71 - clhs215*clhs38;
        lhs(9,9)=-clhs10*clhs221 + clhs219*clhs59 + clhs225*clhs65 - clhs227*clhs28 + clhs231*clhs71 - clhs233*clhs38;
        lhs(9,10)=-clhs10*clhs239 + clhs237*clhs59 + clhs243*clhs65 - clhs245*clhs28 + clhs249*clhs71 - clhs251*clhs38;
        lhs(9,11)=-clhs10*clhs257 + clhs255*clhs59 + clhs261*clhs65 - clhs263*clhs28 + clhs267*clhs71 - clhs269*clhs38;
        lhs(9,12)=clhs10*clhs281 + clhs279*clhs59 + clhs28*clhs290 + clhs288*clhs65 + clhs297*clhs71 + clhs299*clhs38;
        lhs(9,13)=clhs10*clhs311 + clhs28*clhs320 + clhs309*clhs59 + clhs318*clhs65 + clhs327*clhs71 + clhs329*clhs38;
        lhs(9,14)=clhs10*clhs341 + clhs28*clhs350 + clhs339*clhs59 + clhs348*clhs65 + clhs357*clhs71 + clhs359*clhs38;
        lhs(9,15)=clhs10*clhs371 + clhs28*clhs380 + clhs369*clhs59 + clhs378*clhs65 + clhs38*clhs389 + clhs387*clhs71;
        lhs(9,16)=clhs10*clhs401 + clhs28*clhs410 + clhs38*clhs419 + clhs399*clhs59 + clhs408*clhs65 + clhs417*clhs71;
        lhs(9,17)=clhs10*clhs431 + clhs28*clhs440 + clhs38*clhs449 + clhs429*clhs59 + clhs438*clhs65 + clhs447*clhs71;
        lhs(9,18)=clhs10*clhs461 + clhs28*clhs470 + clhs38*clhs479 + clhs459*clhs59 + clhs468*clhs65 + clhs477*clhs71;
        lhs(9,19)=clhs10*clhs491 + clhs28*clhs500 + clhs38*clhs509 + clhs489*clhs59 + clhs498*clhs65 + clhs507*clhs71;
        lhs(9,20)=clhs10*clhs521 + clhs28*clhs530 + clhs38*clhs539 + clhs519*clhs59 + clhs528*clhs65 + clhs537*clhs71;
        lhs(9,21)=clhs10*clhs551 + clhs28*clhs560 + clhs38*clhs569 + clhs549*clhs59 + clhs558*clhs65 + clhs567*clhs71;
        lhs(9,22)=clhs10*clhs581 + clhs28*clhs590 + clhs38*clhs599 + clhs579*clhs59 + clhs588*clhs65 + clhs597*clhs71;
        lhs(9,23)=clhs10*clhs611 + clhs28*clhs620 + clhs38*clhs629 + clhs59*clhs609 + clhs618*clhs65 + clhs627*clhs71;
        lhs(9,24)=clhs10*clhs630;
        lhs(9,25)=0;
        lhs(9,26)=clhs28*clhs631;
        lhs(9,27)=clhs38*clhs632;
        lhs(10,0)=-clhs10*clhs633 + clhs11*clhs636 - clhs28*clhs634 + clhs29*clhs637 - clhs38*clhs635 + clhs39*clhs638;
        lhs(10,1)=-clhs10*clhs639 - clhs28*clhs640 - clhs38*clhs641 + clhs636*clhs75 + clhs637*clhs81 + clhs638*clhs87;
        lhs(10,2)=-clhs10*clhs642 + clhs105*clhs638 - clhs28*clhs643 - clhs38*clhs644 + clhs636*clhs93 + clhs637*clhs99;
        lhs(10,3)=-clhs10*clhs645 + clhs111*clhs636 + clhs117*clhs637 + clhs123*clhs638 - clhs28*clhs646 - clhs38*clhs647;
        lhs(10,4)=-clhs10*clhs648 + clhs129*clhs636 + clhs135*clhs637 + clhs141*clhs638 - clhs28*clhs649 - clhs38*clhs650;
        lhs(10,5)=-clhs10*clhs651 + clhs147*clhs636 + clhs153*clhs637 + clhs159*clhs638 - clhs28*clhs652 - clhs38*clhs653;
        lhs(10,6)=-clhs10*clhs654 + clhs165*clhs636 + clhs171*clhs637 + clhs177*clhs638 - clhs28*clhs655 - clhs38*clhs656;
        lhs(10,7)=-clhs10*clhs657 + clhs183*clhs636 + clhs189*clhs637 + clhs195*clhs638 - clhs28*clhs658 - clhs38*clhs659;
        lhs(10,8)=-clhs10*clhs660 + clhs201*clhs636 + clhs207*clhs637 + clhs213*clhs638 - clhs28*clhs661 - clhs38*clhs662;
        lhs(10,9)=-clhs10*clhs663 + clhs219*clhs636 + clhs225*clhs637 + clhs231*clhs638 - clhs28*clhs664 - clhs38*clhs665;
        lhs(10,10)=-clhs10*clhs666 + clhs237*clhs636 + clhs243*clhs637 + clhs249*clhs638 - clhs28*clhs667 - clhs38*clhs668;
        lhs(10,11)=-clhs10*clhs669 + clhs255*clhs636 + clhs261*clhs637 + clhs267*clhs638 - clhs28*clhs670 - clhs38*clhs671;
        lhs(10,12)=clhs10*clhs672 + clhs279*clhs636 + clhs28*clhs673 + clhs288*clhs637 + clhs297*clhs638 + clhs38*clhs674;
        lhs(10,13)=clhs10*clhs675 + clhs28*clhs676 + clhs309*clhs636 + clhs318*clhs637 + clhs327*clhs638 + clhs38*clhs677;
        lhs(10,14)=clhs10*clhs678 + clhs28*clhs679 + clhs339*clhs636 + clhs348*clhs637 + clhs357*clhs638 + clhs38*clhs680;
        lhs(10,15)=clhs10*clhs681 + clhs28*clhs682 + clhs369*clhs636 + clhs378*clhs637 + clhs38*clhs683 + clhs387*clhs638;
        lhs(10,16)=clhs10*clhs684 + clhs28*clhs685 + clhs38*clhs686 + clhs399*clhs636 + clhs408*clhs637 + clhs417*clhs638;
        lhs(10,17)=clhs10*clhs687 + clhs28*clhs688 + clhs38*clhs689 + clhs429*clhs636 + clhs438*clhs637 + clhs447*clhs638;
        lhs(10,18)=clhs10*clhs690 + clhs28*clhs691 + clhs38*clhs692 + clhs459*clhs636 + clhs468*clhs637 + clhs477*clhs638;
        lhs(10,19)=clhs10*clhs693 + clhs28*clhs694 + clhs38*clhs695 + clhs489*clhs636 + clhs498*clhs637 + clhs507*clhs638;
        lhs(10,20)=clhs10*clhs696 + clhs28*clhs697 + clhs38*clhs698 + clhs519*clhs636 + clhs528*clhs637 + clhs537*clhs638;
        lhs(10,21)=clhs10*clhs699 + clhs28*clhs700 + clhs38*clhs701 + clhs549*clhs636 + clhs558*clhs637 + clhs567*clhs638;
        lhs(10,22)=clhs10*clhs702 + clhs28*clhs703 + clhs38*clhs704 + clhs579*clhs636 + clhs588*clhs637 + clhs597*clhs638;
        lhs(10,23)=clhs10*clhs705 + clhs28*clhs706 + clhs38*clhs707 + clhs609*clhs636 + clhs618*clhs637 + clhs627*clhs638;
        lhs(10,24)=clhs10*clhs708;
        lhs(10,25)=0;
        lhs(10,26)=clhs28*clhs709;
        lhs(10,27)=clhs38*clhs710;
        lhs(11,0)=-clhs10*clhs711 + clhs11*clhs714 - clhs28*clhs712 + clhs29*clhs715 - clhs38*clhs713 + clhs39*clhs716;
        lhs(11,1)=-clhs10*clhs717 - clhs28*clhs718 - clhs38*clhs719 + clhs714*clhs75 + clhs715*clhs81 + clhs716*clhs87;
        lhs(11,2)=-clhs10*clhs720 + clhs105*clhs716 - clhs28*clhs721 - clhs38*clhs722 + clhs714*clhs93 + clhs715*clhs99;
        lhs(11,3)=-clhs10*clhs723 + clhs111*clhs714 + clhs117*clhs715 + clhs123*clhs716 - clhs28*clhs724 - clhs38*clhs725;
        lhs(11,4)=-clhs10*clhs726 + clhs129*clhs714 + clhs135*clhs715 + clhs141*clhs716 - clhs28*clhs727 - clhs38*clhs728;
        lhs(11,5)=-clhs10*clhs729 + clhs147*clhs714 + clhs153*clhs715 + clhs159*clhs716 - clhs28*clhs730 - clhs38*clhs731;
        lhs(11,6)=-clhs10*clhs732 + clhs165*clhs714 + clhs171*clhs715 + clhs177*clhs716 - clhs28*clhs733 - clhs38*clhs734;
        lhs(11,7)=-clhs10*clhs735 + clhs183*clhs714 + clhs189*clhs715 + clhs195*clhs716 - clhs28*clhs736 - clhs38*clhs737;
        lhs(11,8)=-clhs10*clhs738 + clhs201*clhs714 + clhs207*clhs715 + clhs213*clhs716 - clhs28*clhs739 - clhs38*clhs740;
        lhs(11,9)=-clhs10*clhs741 + clhs219*clhs714 + clhs225*clhs715 + clhs231*clhs716 - clhs28*clhs742 - clhs38*clhs743;
        lhs(11,10)=-clhs10*clhs744 + clhs237*clhs714 + clhs243*clhs715 + clhs249*clhs716 - clhs28*clhs745 - clhs38*clhs746;
        lhs(11,11)=-clhs10*clhs747 + clhs255*clhs714 + clhs261*clhs715 + clhs267*clhs716 - clhs28*clhs748 - clhs38*clhs749;
        lhs(11,12)=clhs10*clhs750 + clhs279*clhs714 + clhs28*clhs751 + clhs288*clhs715 + clhs297*clhs716 + clhs38*clhs752;
        lhs(11,13)=clhs10*clhs753 + clhs28*clhs754 + clhs309*clhs714 + clhs318*clhs715 + clhs327*clhs716 + clhs38*clhs755;
        lhs(11,14)=clhs10*clhs756 + clhs28*clhs757 + clhs339*clhs714 + clhs348*clhs715 + clhs357*clhs716 + clhs38*clhs758;
        lhs(11,15)=clhs10*clhs759 + clhs28*clhs760 + clhs369*clhs714 + clhs378*clhs715 + clhs38*clhs761 + clhs387*clhs716;
        lhs(11,16)=clhs10*clhs762 + clhs28*clhs763 + clhs38*clhs764 + clhs399*clhs714 + clhs408*clhs715 + clhs417*clhs716;
        lhs(11,17)=clhs10*clhs765 + clhs28*clhs766 + clhs38*clhs767 + clhs429*clhs714 + clhs438*clhs715 + clhs447*clhs716;
        lhs(11,18)=clhs10*clhs768 + clhs28*clhs769 + clhs38*clhs770 + clhs459*clhs714 + clhs468*clhs715 + clhs477*clhs716;
        lhs(11,19)=clhs10*clhs771 + clhs28*clhs772 + clhs38*clhs773 + clhs489*clhs714 + clhs498*clhs715 + clhs507*clhs716;
        lhs(11,20)=clhs10*clhs774 + clhs28*clhs775 + clhs38*clhs776 + clhs519*clhs714 + clhs528*clhs715 + clhs537*clhs716;
        lhs(11,21)=clhs10*clhs777 + clhs28*clhs778 + clhs38*clhs779 + clhs549*clhs714 + clhs558*clhs715 + clhs567*clhs716;
        lhs(11,22)=clhs10*clhs780 + clhs28*clhs781 + clhs38*clhs782 + clhs579*clhs714 + clhs588*clhs715 + clhs597*clhs716;
        lhs(11,23)=clhs10*clhs783 + clhs28*clhs784 + clhs38*clhs785 + clhs609*clhs714 + clhs618*clhs715 + clhs627*clhs716;
        lhs(11,24)=clhs10*clhs786;
        lhs(11,25)=0;
        lhs(11,26)=clhs28*clhs787;
        lhs(11,27)=clhs38*clhs788;
        lhs(12,0)=penalty_parameter*(clhs43*clhs789 + clhs60*clhs790 + clhs66*clhs791);
        lhs(12,1)=penalty_parameter*(clhs43*clhs792 + clhs60*clhs793 + clhs66*clhs794);
        lhs(12,2)=penalty_parameter*(clhs43*clhs795 + clhs60*clhs796 + clhs66*clhs797);
        lhs(12,3)=penalty_parameter*(clhs43*clhs798 + clhs60*clhs799 + clhs66*clhs800);
        lhs(12,4)=penalty_parameter*(clhs43*clhs801 + clhs60*clhs802 + clhs66*clhs803);
        lhs(12,5)=penalty_parameter*(clhs43*clhs804 + clhs60*clhs805 + clhs66*clhs806);
        lhs(12,6)=penalty_parameter*(clhs43*clhs807 + clhs60*clhs808 + clhs66*clhs809);
        lhs(12,7)=penalty_parameter*(clhs43*clhs810 + clhs60*clhs811 + clhs66*clhs812);
        lhs(12,8)=penalty_parameter*(clhs43*clhs813 + clhs60*clhs814 + clhs66*clhs815);
        lhs(12,9)=penalty_parameter*(clhs43*clhs816 + clhs60*clhs817 + clhs66*clhs818);
        lhs(12,10)=penalty_parameter*(clhs43*clhs819 + clhs60*clhs820 + clhs66*clhs821);
        lhs(12,11)=penalty_parameter*(clhs43*clhs822 + clhs60*clhs823 + clhs66*clhs824);
        lhs(12,12)=-clhs273*clhs59 - clhs281*clhs43 - clhs282*clhs65 - clhs290*clhs60 - clhs291*clhs71 - clhs299*clhs66;
        lhs(12,13)=-clhs303*clhs59 - clhs311*clhs43 - clhs312*clhs65 - clhs320*clhs60 - clhs321*clhs71 - clhs329*clhs66;
        lhs(12,14)=-clhs333*clhs59 - clhs341*clhs43 - clhs342*clhs65 - clhs350*clhs60 - clhs351*clhs71 - clhs359*clhs66;
        lhs(12,15)=-clhs363*clhs59 - clhs371*clhs43 - clhs372*clhs65 - clhs380*clhs60 - clhs381*clhs71 - clhs389*clhs66;
        lhs(12,16)=-clhs393*clhs59 - clhs401*clhs43 - clhs402*clhs65 - clhs410*clhs60 - clhs411*clhs71 - clhs419*clhs66;
        lhs(12,17)=-clhs423*clhs59 - clhs43*clhs431 - clhs432*clhs65 - clhs440*clhs60 - clhs441*clhs71 - clhs449*clhs66;
        lhs(12,18)=-clhs43*clhs461 - clhs453*clhs59 - clhs462*clhs65 - clhs470*clhs60 - clhs471*clhs71 - clhs479*clhs66;
        lhs(12,19)=-clhs43*clhs491 - clhs483*clhs59 - clhs492*clhs65 - clhs500*clhs60 - clhs501*clhs71 - clhs509*clhs66;
        lhs(12,20)=-clhs43*clhs521 - clhs513*clhs59 - clhs522*clhs65 - clhs530*clhs60 - clhs531*clhs71 - clhs539*clhs66;
        lhs(12,21)=-clhs43*clhs551 - clhs543*clhs59 - clhs552*clhs65 - clhs560*clhs60 - clhs561*clhs71 - clhs569*clhs66;
        lhs(12,22)=-clhs43*clhs581 - clhs573*clhs59 - clhs582*clhs65 - clhs590*clhs60 - clhs591*clhs71 - clhs599*clhs66;
        lhs(12,23)=-clhs43*clhs611 - clhs59*clhs603 - clhs60*clhs620 - clhs612*clhs65 - clhs621*clhs71 - clhs629*clhs66;
        lhs(12,24)=-clhs43*clhs630;
        lhs(12,25)=0;
        lhs(12,26)=-clhs60*clhs631;
        lhs(12,27)=-clhs632*clhs66;
        lhs(13,0)=penalty_parameter*(clhs43*clhs825 + clhs60*clhs826 + clhs66*clhs827);
        lhs(13,1)=penalty_parameter*(clhs43*clhs828 + clhs60*clhs829 + clhs66*clhs830);
        lhs(13,2)=penalty_parameter*(clhs43*clhs831 + clhs60*clhs832 + clhs66*clhs833);
        lhs(13,3)=penalty_parameter*(clhs43*clhs834 + clhs60*clhs835 + clhs66*clhs836);
        lhs(13,4)=penalty_parameter*(clhs43*clhs837 + clhs60*clhs838 + clhs66*clhs839);
        lhs(13,5)=penalty_parameter*(clhs43*clhs840 + clhs60*clhs841 + clhs66*clhs842);
        lhs(13,6)=penalty_parameter*(clhs43*clhs843 + clhs60*clhs844 + clhs66*clhs845);
        lhs(13,7)=penalty_parameter*(clhs43*clhs846 + clhs60*clhs847 + clhs66*clhs848);
        lhs(13,8)=penalty_parameter*(clhs43*clhs849 + clhs60*clhs850 + clhs66*clhs851);
        lhs(13,9)=penalty_parameter*(clhs43*clhs852 + clhs60*clhs853 + clhs66*clhs854);
        lhs(13,10)=penalty_parameter*(clhs43*clhs855 + clhs60*clhs856 + clhs66*clhs857);
        lhs(13,11)=penalty_parameter*(clhs43*clhs858 + clhs60*clhs859 + clhs66*clhs860);
        lhs(13,12)=-clhs273*clhs636 - clhs282*clhs637 - clhs291*clhs638 - clhs43*clhs672 - clhs60*clhs673 - clhs66*clhs674;
        lhs(13,13)=-clhs303*clhs636 - clhs312*clhs637 - clhs321*clhs638 - clhs43*clhs675 - clhs60*clhs676 - clhs66*clhs677;
        lhs(13,14)=-clhs333*clhs636 - clhs342*clhs637 - clhs351*clhs638 - clhs43*clhs678 - clhs60*clhs679 - clhs66*clhs680;
        lhs(13,15)=-clhs363*clhs636 - clhs372*clhs637 - clhs381*clhs638 - clhs43*clhs681 - clhs60*clhs682 - clhs66*clhs683;
        lhs(13,16)=-clhs393*clhs636 - clhs402*clhs637 - clhs411*clhs638 - clhs43*clhs684 - clhs60*clhs685 - clhs66*clhs686;
        lhs(13,17)=-clhs423*clhs636 - clhs43*clhs687 - clhs432*clhs637 - clhs441*clhs638 - clhs60*clhs688 - clhs66*clhs689;
        lhs(13,18)=-clhs43*clhs690 - clhs453*clhs636 - clhs462*clhs637 - clhs471*clhs638 - clhs60*clhs691 - clhs66*clhs692;
        lhs(13,19)=-clhs43*clhs693 - clhs483*clhs636 - clhs492*clhs637 - clhs501*clhs638 - clhs60*clhs694 - clhs66*clhs695;
        lhs(13,20)=-clhs43*clhs696 - clhs513*clhs636 - clhs522*clhs637 - clhs531*clhs638 - clhs60*clhs697 - clhs66*clhs698;
        lhs(13,21)=-clhs43*clhs699 - clhs543*clhs636 - clhs552*clhs637 - clhs561*clhs638 - clhs60*clhs700 - clhs66*clhs701;
        lhs(13,22)=-clhs43*clhs702 - clhs573*clhs636 - clhs582*clhs637 - clhs591*clhs638 - clhs60*clhs703 - clhs66*clhs704;
        lhs(13,23)=-clhs43*clhs705 - clhs60*clhs706 - clhs603*clhs636 - clhs612*clhs637 - clhs621*clhs638 - clhs66*clhs707;
        lhs(13,24)=-clhs43*clhs708;
        lhs(13,25)=0;
        lhs(13,26)=-clhs60*clhs709;
        lhs(13,27)=-clhs66*clhs710;
        lhs(14,0)=penalty_parameter*(clhs43*clhs861 + clhs60*clhs862 + clhs66*clhs863);
        lhs(14,1)=penalty_parameter*(clhs43*clhs864 + clhs60*clhs865 + clhs66*clhs866);
        lhs(14,2)=penalty_parameter*(clhs43*clhs867 + clhs60*clhs868 + clhs66*clhs869);
        lhs(14,3)=penalty_parameter*(clhs43*clhs870 + clhs60*clhs871 + clhs66*clhs872);
        lhs(14,4)=penalty_parameter*(clhs43*clhs873 + clhs60*clhs874 + clhs66*clhs875);
        lhs(14,5)=penalty_parameter*(clhs43*clhs876 + clhs60*clhs877 + clhs66*clhs878);
        lhs(14,6)=penalty_parameter*(clhs43*clhs879 + clhs60*clhs880 + clhs66*clhs881);
        lhs(14,7)=penalty_parameter*(clhs43*clhs882 + clhs60*clhs883 + clhs66*clhs884);
        lhs(14,8)=penalty_parameter*(clhs43*clhs885 + clhs60*clhs886 + clhs66*clhs887);
        lhs(14,9)=penalty_parameter*(clhs43*clhs888 + clhs60*clhs889 + clhs66*clhs890);
        lhs(14,10)=penalty_parameter*(clhs43*clhs891 + clhs60*clhs892 + clhs66*clhs893);
        lhs(14,11)=penalty_parameter*(clhs43*clhs894 + clhs60*clhs895 + clhs66*clhs896);
        lhs(14,12)=-clhs273*clhs714 - clhs282*clhs715 - clhs291*clhs716 - clhs43*clhs750 - clhs60*clhs751 - clhs66*clhs752;
        lhs(14,13)=-clhs303*clhs714 - clhs312*clhs715 - clhs321*clhs716 - clhs43*clhs753 - clhs60*clhs754 - clhs66*clhs755;
        lhs(14,14)=-clhs333*clhs714 - clhs342*clhs715 - clhs351*clhs716 - clhs43*clhs756 - clhs60*clhs757 - clhs66*clhs758;
        lhs(14,15)=-clhs363*clhs714 - clhs372*clhs715 - clhs381*clhs716 - clhs43*clhs759 - clhs60*clhs760 - clhs66*clhs761;
        lhs(14,16)=-clhs393*clhs714 - clhs402*clhs715 - clhs411*clhs716 - clhs43*clhs762 - clhs60*clhs763 - clhs66*clhs764;
        lhs(14,17)=-clhs423*clhs714 - clhs43*clhs765 - clhs432*clhs715 - clhs441*clhs716 - clhs60*clhs766 - clhs66*clhs767;
        lhs(14,18)=-clhs43*clhs768 - clhs453*clhs714 - clhs462*clhs715 - clhs471*clhs716 - clhs60*clhs769 - clhs66*clhs770;
        lhs(14,19)=-clhs43*clhs771 - clhs483*clhs714 - clhs492*clhs715 - clhs501*clhs716 - clhs60*clhs772 - clhs66*clhs773;
        lhs(14,20)=-clhs43*clhs774 - clhs513*clhs714 - clhs522*clhs715 - clhs531*clhs716 - clhs60*clhs775 - clhs66*clhs776;
        lhs(14,21)=-clhs43*clhs777 - clhs543*clhs714 - clhs552*clhs715 - clhs561*clhs716 - clhs60*clhs778 - clhs66*clhs779;
        lhs(14,22)=-clhs43*clhs780 - clhs573*clhs714 - clhs582*clhs715 - clhs591*clhs716 - clhs60*clhs781 - clhs66*clhs782;
        lhs(14,23)=-clhs43*clhs783 - clhs60*clhs784 - clhs603*clhs714 - clhs612*clhs715 - clhs621*clhs716 - clhs66*clhs785;
        lhs(14,24)=-clhs43*clhs786;
        lhs(14,25)=0;
        lhs(14,26)=-clhs60*clhs787;
        lhs(14,27)=-clhs66*clhs788;
        lhs(15,0)=penalty_parameter*(clhs45*clhs789 + clhs61*clhs790 + clhs67*clhs791);
        lhs(15,1)=penalty_parameter*(clhs45*clhs792 + clhs61*clhs793 + clhs67*clhs794);
        lhs(15,2)=penalty_parameter*(clhs45*clhs795 + clhs61*clhs796 + clhs67*clhs797);
        lhs(15,3)=penalty_parameter*(clhs45*clhs798 + clhs61*clhs799 + clhs67*clhs800);
        lhs(15,4)=penalty_parameter*(clhs45*clhs801 + clhs61*clhs802 + clhs67*clhs803);
        lhs(15,5)=penalty_parameter*(clhs45*clhs804 + clhs61*clhs805 + clhs67*clhs806);
        lhs(15,6)=penalty_parameter*(clhs45*clhs807 + clhs61*clhs808 + clhs67*clhs809);
        lhs(15,7)=penalty_parameter*(clhs45*clhs810 + clhs61*clhs811 + clhs67*clhs812);
        lhs(15,8)=penalty_parameter*(clhs45*clhs813 + clhs61*clhs814 + clhs67*clhs815);
        lhs(15,9)=penalty_parameter*(clhs45*clhs816 + clhs61*clhs817 + clhs67*clhs818);
        lhs(15,10)=penalty_parameter*(clhs45*clhs819 + clhs61*clhs820 + clhs67*clhs821);
        lhs(15,11)=penalty_parameter*(clhs45*clhs822 + clhs61*clhs823 + clhs67*clhs824);
        lhs(15,12)=-clhs274*clhs59 - clhs281*clhs45 - clhs283*clhs65 - clhs290*clhs61 - clhs292*clhs71 - clhs299*clhs67;
        lhs(15,13)=-clhs304*clhs59 - clhs311*clhs45 - clhs313*clhs65 - clhs320*clhs61 - clhs322*clhs71 - clhs329*clhs67;
        lhs(15,14)=-clhs334*clhs59 - clhs341*clhs45 - clhs343*clhs65 - clhs350*clhs61 - clhs352*clhs71 - clhs359*clhs67;
        lhs(15,15)=-clhs364*clhs59 - clhs371*clhs45 - clhs373*clhs65 - clhs380*clhs61 - clhs382*clhs71 - clhs389*clhs67;
        lhs(15,16)=-clhs394*clhs59 - clhs401*clhs45 - clhs403*clhs65 - clhs410*clhs61 - clhs412*clhs71 - clhs419*clhs67;
        lhs(15,17)=-clhs424*clhs59 - clhs431*clhs45 - clhs433*clhs65 - clhs440*clhs61 - clhs442*clhs71 - clhs449*clhs67;
        lhs(15,18)=-clhs45*clhs461 - clhs454*clhs59 - clhs463*clhs65 - clhs470*clhs61 - clhs472*clhs71 - clhs479*clhs67;
        lhs(15,19)=-clhs45*clhs491 - clhs484*clhs59 - clhs493*clhs65 - clhs500*clhs61 - clhs502*clhs71 - clhs509*clhs67;
        lhs(15,20)=-clhs45*clhs521 - clhs514*clhs59 - clhs523*clhs65 - clhs530*clhs61 - clhs532*clhs71 - clhs539*clhs67;
        lhs(15,21)=-clhs45*clhs551 - clhs544*clhs59 - clhs553*clhs65 - clhs560*clhs61 - clhs562*clhs71 - clhs569*clhs67;
        lhs(15,22)=-clhs45*clhs581 - clhs574*clhs59 - clhs583*clhs65 - clhs590*clhs61 - clhs592*clhs71 - clhs599*clhs67;
        lhs(15,23)=-clhs45*clhs611 - clhs59*clhs604 - clhs61*clhs620 - clhs613*clhs65 - clhs622*clhs71 - clhs629*clhs67;
        lhs(15,24)=-clhs45*clhs630;
        lhs(15,25)=0;
        lhs(15,26)=-clhs61*clhs631;
        lhs(15,27)=-clhs632*clhs67;
        lhs(16,0)=penalty_parameter*(clhs45*clhs825 + clhs61*clhs826 + clhs67*clhs827);
        lhs(16,1)=penalty_parameter*(clhs45*clhs828 + clhs61*clhs829 + clhs67*clhs830);
        lhs(16,2)=penalty_parameter*(clhs45*clhs831 + clhs61*clhs832 + clhs67*clhs833);
        lhs(16,3)=penalty_parameter*(clhs45*clhs834 + clhs61*clhs835 + clhs67*clhs836);
        lhs(16,4)=penalty_parameter*(clhs45*clhs837 + clhs61*clhs838 + clhs67*clhs839);
        lhs(16,5)=penalty_parameter*(clhs45*clhs840 + clhs61*clhs841 + clhs67*clhs842);
        lhs(16,6)=penalty_parameter*(clhs45*clhs843 + clhs61*clhs844 + clhs67*clhs845);
        lhs(16,7)=penalty_parameter*(clhs45*clhs846 + clhs61*clhs847 + clhs67*clhs848);
        lhs(16,8)=penalty_parameter*(clhs45*clhs849 + clhs61*clhs850 + clhs67*clhs851);
        lhs(16,9)=penalty_parameter*(clhs45*clhs852 + clhs61*clhs853 + clhs67*clhs854);
        lhs(16,10)=penalty_parameter*(clhs45*clhs855 + clhs61*clhs856 + clhs67*clhs857);
        lhs(16,11)=penalty_parameter*(clhs45*clhs858 + clhs61*clhs859 + clhs67*clhs860);
        lhs(16,12)=-clhs274*clhs636 - clhs283*clhs637 - clhs292*clhs638 - clhs45*clhs672 - clhs61*clhs673 - clhs67*clhs674;
        lhs(16,13)=-clhs304*clhs636 - clhs313*clhs637 - clhs322*clhs638 - clhs45*clhs675 - clhs61*clhs676 - clhs67*clhs677;
        lhs(16,14)=-clhs334*clhs636 - clhs343*clhs637 - clhs352*clhs638 - clhs45*clhs678 - clhs61*clhs679 - clhs67*clhs680;
        lhs(16,15)=-clhs364*clhs636 - clhs373*clhs637 - clhs382*clhs638 - clhs45*clhs681 - clhs61*clhs682 - clhs67*clhs683;
        lhs(16,16)=-clhs394*clhs636 - clhs403*clhs637 - clhs412*clhs638 - clhs45*clhs684 - clhs61*clhs685 - clhs67*clhs686;
        lhs(16,17)=-clhs424*clhs636 - clhs433*clhs637 - clhs442*clhs638 - clhs45*clhs687 - clhs61*clhs688 - clhs67*clhs689;
        lhs(16,18)=-clhs45*clhs690 - clhs454*clhs636 - clhs463*clhs637 - clhs472*clhs638 - clhs61*clhs691 - clhs67*clhs692;
        lhs(16,19)=-clhs45*clhs693 - clhs484*clhs636 - clhs493*clhs637 - clhs502*clhs638 - clhs61*clhs694 - clhs67*clhs695;
        lhs(16,20)=-clhs45*clhs696 - clhs514*clhs636 - clhs523*clhs637 - clhs532*clhs638 - clhs61*clhs697 - clhs67*clhs698;
        lhs(16,21)=-clhs45*clhs699 - clhs544*clhs636 - clhs553*clhs637 - clhs562*clhs638 - clhs61*clhs700 - clhs67*clhs701;
        lhs(16,22)=-clhs45*clhs702 - clhs574*clhs636 - clhs583*clhs637 - clhs592*clhs638 - clhs61*clhs703 - clhs67*clhs704;
        lhs(16,23)=-clhs45*clhs705 - clhs604*clhs636 - clhs61*clhs706 - clhs613*clhs637 - clhs622*clhs638 - clhs67*clhs707;
        lhs(16,24)=-clhs45*clhs708;
        lhs(16,25)=0;
        lhs(16,26)=-clhs61*clhs709;
        lhs(16,27)=-clhs67*clhs710;
        lhs(17,0)=penalty_parameter*(clhs45*clhs861 + clhs61*clhs862 + clhs67*clhs863);
        lhs(17,1)=penalty_parameter*(clhs45*clhs864 + clhs61*clhs865 + clhs67*clhs866);
        lhs(17,2)=penalty_parameter*(clhs45*clhs867 + clhs61*clhs868 + clhs67*clhs869);
        lhs(17,3)=penalty_parameter*(clhs45*clhs870 + clhs61*clhs871 + clhs67*clhs872);
        lhs(17,4)=penalty_parameter*(clhs45*clhs873 + clhs61*clhs874 + clhs67*clhs875);
        lhs(17,5)=penalty_parameter*(clhs45*clhs876 + clhs61*clhs877 + clhs67*clhs878);
        lhs(17,6)=penalty_parameter*(clhs45*clhs879 + clhs61*clhs880 + clhs67*clhs881);
        lhs(17,7)=penalty_parameter*(clhs45*clhs882 + clhs61*clhs883 + clhs67*clhs884);
        lhs(17,8)=penalty_parameter*(clhs45*clhs885 + clhs61*clhs886 + clhs67*clhs887);
        lhs(17,9)=penalty_parameter*(clhs45*clhs888 + clhs61*clhs889 + clhs67*clhs890);
        lhs(17,10)=penalty_parameter*(clhs45*clhs891 + clhs61*clhs892 + clhs67*clhs893);
        lhs(17,11)=penalty_parameter*(clhs45*clhs894 + clhs61*clhs895 + clhs67*clhs896);
        lhs(17,12)=-clhs274*clhs714 - clhs283*clhs715 - clhs292*clhs716 - clhs45*clhs750 - clhs61*clhs751 - clhs67*clhs752;
        lhs(17,13)=-clhs304*clhs714 - clhs313*clhs715 - clhs322*clhs716 - clhs45*clhs753 - clhs61*clhs754 - clhs67*clhs755;
        lhs(17,14)=-clhs334*clhs714 - clhs343*clhs715 - clhs352*clhs716 - clhs45*clhs756 - clhs61*clhs757 - clhs67*clhs758;
        lhs(17,15)=-clhs364*clhs714 - clhs373*clhs715 - clhs382*clhs716 - clhs45*clhs759 - clhs61*clhs760 - clhs67*clhs761;
        lhs(17,16)=-clhs394*clhs714 - clhs403*clhs715 - clhs412*clhs716 - clhs45*clhs762 - clhs61*clhs763 - clhs67*clhs764;
        lhs(17,17)=-clhs424*clhs714 - clhs433*clhs715 - clhs442*clhs716 - clhs45*clhs765 - clhs61*clhs766 - clhs67*clhs767;
        lhs(17,18)=-clhs45*clhs768 - clhs454*clhs714 - clhs463*clhs715 - clhs472*clhs716 - clhs61*clhs769 - clhs67*clhs770;
        lhs(17,19)=-clhs45*clhs771 - clhs484*clhs714 - clhs493*clhs715 - clhs502*clhs716 - clhs61*clhs772 - clhs67*clhs773;
        lhs(17,20)=-clhs45*clhs774 - clhs514*clhs714 - clhs523*clhs715 - clhs532*clhs716 - clhs61*clhs775 - clhs67*clhs776;
        lhs(17,21)=-clhs45*clhs777 - clhs544*clhs714 - clhs553*clhs715 - clhs562*clhs716 - clhs61*clhs778 - clhs67*clhs779;
        lhs(17,22)=-clhs45*clhs780 - clhs574*clhs714 - clhs583*clhs715 - clhs592*clhs716 - clhs61*clhs781 - clhs67*clhs782;
        lhs(17,23)=-clhs45*clhs783 - clhs604*clhs714 - clhs61*clhs784 - clhs613*clhs715 - clhs622*clhs716 - clhs67*clhs785;
        lhs(17,24)=-clhs45*clhs786;
        lhs(17,25)=0;
        lhs(17,26)=-clhs61*clhs787;
        lhs(17,27)=-clhs67*clhs788;
        lhs(18,0)=penalty_parameter*(clhs47*clhs789 + clhs62*clhs790 + clhs68*clhs791);
        lhs(18,1)=penalty_parameter*(clhs47*clhs792 + clhs62*clhs793 + clhs68*clhs794);
        lhs(18,2)=penalty_parameter*(clhs47*clhs795 + clhs62*clhs796 + clhs68*clhs797);
        lhs(18,3)=penalty_parameter*(clhs47*clhs798 + clhs62*clhs799 + clhs68*clhs800);
        lhs(18,4)=penalty_parameter*(clhs47*clhs801 + clhs62*clhs802 + clhs68*clhs803);
        lhs(18,5)=penalty_parameter*(clhs47*clhs804 + clhs62*clhs805 + clhs68*clhs806);
        lhs(18,6)=penalty_parameter*(clhs47*clhs807 + clhs62*clhs808 + clhs68*clhs809);
        lhs(18,7)=penalty_parameter*(clhs47*clhs810 + clhs62*clhs811 + clhs68*clhs812);
        lhs(18,8)=penalty_parameter*(clhs47*clhs813 + clhs62*clhs814 + clhs68*clhs815);
        lhs(18,9)=penalty_parameter*(clhs47*clhs816 + clhs62*clhs817 + clhs68*clhs818);
        lhs(18,10)=penalty_parameter*(clhs47*clhs819 + clhs62*clhs820 + clhs68*clhs821);
        lhs(18,11)=penalty_parameter*(clhs47*clhs822 + clhs62*clhs823 + clhs68*clhs824);
        lhs(18,12)=-clhs275*clhs59 - clhs281*clhs47 - clhs284*clhs65 - clhs290*clhs62 - clhs293*clhs71 - clhs299*clhs68;
        lhs(18,13)=-clhs305*clhs59 - clhs311*clhs47 - clhs314*clhs65 - clhs320*clhs62 - clhs323*clhs71 - clhs329*clhs68;
        lhs(18,14)=-clhs335*clhs59 - clhs341*clhs47 - clhs344*clhs65 - clhs350*clhs62 - clhs353*clhs71 - clhs359*clhs68;
        lhs(18,15)=-clhs365*clhs59 - clhs371*clhs47 - clhs374*clhs65 - clhs380*clhs62 - clhs383*clhs71 - clhs389*clhs68;
        lhs(18,16)=-clhs395*clhs59 - clhs401*clhs47 - clhs404*clhs65 - clhs410*clhs62 - clhs413*clhs71 - clhs419*clhs68;
        lhs(18,17)=-clhs425*clhs59 - clhs431*clhs47 - clhs434*clhs65 - clhs440*clhs62 - clhs443*clhs71 - clhs449*clhs68;
        lhs(18,18)=-clhs455*clhs59 - clhs461*clhs47 - clhs464*clhs65 - clhs470*clhs62 - clhs473*clhs71 - clhs479*clhs68;
        lhs(18,19)=-clhs47*clhs491 - clhs485*clhs59 - clhs494*clhs65 - clhs500*clhs62 - clhs503*clhs71 - clhs509*clhs68;
        lhs(18,20)=-clhs47*clhs521 - clhs515*clhs59 - clhs524*clhs65 - clhs530*clhs62 - clhs533*clhs71 - clhs539*clhs68;
        lhs(18,21)=-clhs47*clhs551 - clhs545*clhs59 - clhs554*clhs65 - clhs560*clhs62 - clhs563*clhs71 - clhs569*clhs68;
        lhs(18,22)=-clhs47*clhs581 - clhs575*clhs59 - clhs584*clhs65 - clhs590*clhs62 - clhs593*clhs71 - clhs599*clhs68;
        lhs(18,23)=-clhs47*clhs611 - clhs59*clhs605 - clhs614*clhs65 - clhs62*clhs620 - clhs623*clhs71 - clhs629*clhs68;
        lhs(18,24)=-clhs47*clhs630;
        lhs(18,25)=0;
        lhs(18,26)=-clhs62*clhs631;
        lhs(18,27)=-clhs632*clhs68;
        lhs(19,0)=penalty_parameter*(clhs47*clhs825 + clhs62*clhs826 + clhs68*clhs827);
        lhs(19,1)=penalty_parameter*(clhs47*clhs828 + clhs62*clhs829 + clhs68*clhs830);
        lhs(19,2)=penalty_parameter*(clhs47*clhs831 + clhs62*clhs832 + clhs68*clhs833);
        lhs(19,3)=penalty_parameter*(clhs47*clhs834 + clhs62*clhs835 + clhs68*clhs836);
        lhs(19,4)=penalty_parameter*(clhs47*clhs837 + clhs62*clhs838 + clhs68*clhs839);
        lhs(19,5)=penalty_parameter*(clhs47*clhs840 + clhs62*clhs841 + clhs68*clhs842);
        lhs(19,6)=penalty_parameter*(clhs47*clhs843 + clhs62*clhs844 + clhs68*clhs845);
        lhs(19,7)=penalty_parameter*(clhs47*clhs846 + clhs62*clhs847 + clhs68*clhs848);
        lhs(19,8)=penalty_parameter*(clhs47*clhs849 + clhs62*clhs850 + clhs68*clhs851);
        lhs(19,9)=penalty_parameter*(clhs47*clhs852 + clhs62*clhs853 + clhs68*clhs854);
        lhs(19,10)=penalty_parameter*(clhs47*clhs855 + clhs62*clhs856 + clhs68*clhs857);
        lhs(19,11)=penalty_parameter*(clhs47*clhs858 + clhs62*clhs859 + clhs68*clhs860);
        lhs(19,12)=-clhs275*clhs636 - clhs284*clhs637 - clhs293*clhs638 - clhs47*clhs672 - clhs62*clhs673 - clhs674*clhs68;
        lhs(19,13)=-clhs305*clhs636 - clhs314*clhs637 - clhs323*clhs638 - clhs47*clhs675 - clhs62*clhs676 - clhs677*clhs68;
        lhs(19,14)=-clhs335*clhs636 - clhs344*clhs637 - clhs353*clhs638 - clhs47*clhs678 - clhs62*clhs679 - clhs68*clhs680;
        lhs(19,15)=-clhs365*clhs636 - clhs374*clhs637 - clhs383*clhs638 - clhs47*clhs681 - clhs62*clhs682 - clhs68*clhs683;
        lhs(19,16)=-clhs395*clhs636 - clhs404*clhs637 - clhs413*clhs638 - clhs47*clhs684 - clhs62*clhs685 - clhs68*clhs686;
        lhs(19,17)=-clhs425*clhs636 - clhs434*clhs637 - clhs443*clhs638 - clhs47*clhs687 - clhs62*clhs688 - clhs68*clhs689;
        lhs(19,18)=-clhs455*clhs636 - clhs464*clhs637 - clhs47*clhs690 - clhs473*clhs638 - clhs62*clhs691 - clhs68*clhs692;
        lhs(19,19)=-clhs47*clhs693 - clhs485*clhs636 - clhs494*clhs637 - clhs503*clhs638 - clhs62*clhs694 - clhs68*clhs695;
        lhs(19,20)=-clhs47*clhs696 - clhs515*clhs636 - clhs524*clhs637 - clhs533*clhs638 - clhs62*clhs697 - clhs68*clhs698;
        lhs(19,21)=-clhs47*clhs699 - clhs545*clhs636 - clhs554*clhs637 - clhs563*clhs638 - clhs62*clhs700 - clhs68*clhs701;
        lhs(19,22)=-clhs47*clhs702 - clhs575*clhs636 - clhs584*clhs637 - clhs593*clhs638 - clhs62*clhs703 - clhs68*clhs704;
        lhs(19,23)=-clhs47*clhs705 - clhs605*clhs636 - clhs614*clhs637 - clhs62*clhs706 - clhs623*clhs638 - clhs68*clhs707;
        lhs(19,24)=-clhs47*clhs708;
        lhs(19,25)=0;
        lhs(19,26)=-clhs62*clhs709;
        lhs(19,27)=-clhs68*clhs710;
        lhs(20,0)=penalty_parameter*(clhs47*clhs861 + clhs62*clhs862 + clhs68*clhs863);
        lhs(20,1)=penalty_parameter*(clhs47*clhs864 + clhs62*clhs865 + clhs68*clhs866);
        lhs(20,2)=penalty_parameter*(clhs47*clhs867 + clhs62*clhs868 + clhs68*clhs869);
        lhs(20,3)=penalty_parameter*(clhs47*clhs870 + clhs62*clhs871 + clhs68*clhs872);
        lhs(20,4)=penalty_parameter*(clhs47*clhs873 + clhs62*clhs874 + clhs68*clhs875);
        lhs(20,5)=penalty_parameter*(clhs47*clhs876 + clhs62*clhs877 + clhs68*clhs878);
        lhs(20,6)=penalty_parameter*(clhs47*clhs879 + clhs62*clhs880 + clhs68*clhs881);
        lhs(20,7)=penalty_parameter*(clhs47*clhs882 + clhs62*clhs883 + clhs68*clhs884);
        lhs(20,8)=penalty_parameter*(clhs47*clhs885 + clhs62*clhs886 + clhs68*clhs887);
        lhs(20,9)=penalty_parameter*(clhs47*clhs888 + clhs62*clhs889 + clhs68*clhs890);
        lhs(20,10)=penalty_parameter*(clhs47*clhs891 + clhs62*clhs892 + clhs68*clhs893);
        lhs(20,11)=penalty_parameter*(clhs47*clhs894 + clhs62*clhs895 + clhs68*clhs896);
        lhs(20,12)=-clhs275*clhs714 - clhs284*clhs715 - clhs293*clhs716 - clhs47*clhs750 - clhs62*clhs751 - clhs68*clhs752;
        lhs(20,13)=-clhs305*clhs714 - clhs314*clhs715 - clhs323*clhs716 - clhs47*clhs753 - clhs62*clhs754 - clhs68*clhs755;
        lhs(20,14)=-clhs335*clhs714 - clhs344*clhs715 - clhs353*clhs716 - clhs47*clhs756 - clhs62*clhs757 - clhs68*clhs758;
        lhs(20,15)=-clhs365*clhs714 - clhs374*clhs715 - clhs383*clhs716 - clhs47*clhs759 - clhs62*clhs760 - clhs68*clhs761;
        lhs(20,16)=-clhs395*clhs714 - clhs404*clhs715 - clhs413*clhs716 - clhs47*clhs762 - clhs62*clhs763 - clhs68*clhs764;
        lhs(20,17)=-clhs425*clhs714 - clhs434*clhs715 - clhs443*clhs716 - clhs47*clhs765 - clhs62*clhs766 - clhs68*clhs767;
        lhs(20,18)=-clhs455*clhs714 - clhs464*clhs715 - clhs47*clhs768 - clhs473*clhs716 - clhs62*clhs769 - clhs68*clhs770;
        lhs(20,19)=-clhs47*clhs771 - clhs485*clhs714 - clhs494*clhs715 - clhs503*clhs716 - clhs62*clhs772 - clhs68*clhs773;
        lhs(20,20)=-clhs47*clhs774 - clhs515*clhs714 - clhs524*clhs715 - clhs533*clhs716 - clhs62*clhs775 - clhs68*clhs776;
        lhs(20,21)=-clhs47*clhs777 - clhs545*clhs714 - clhs554*clhs715 - clhs563*clhs716 - clhs62*clhs778 - clhs68*clhs779;
        lhs(20,22)=-clhs47*clhs780 - clhs575*clhs714 - clhs584*clhs715 - clhs593*clhs716 - clhs62*clhs781 - clhs68*clhs782;
        lhs(20,23)=-clhs47*clhs783 - clhs605*clhs714 - clhs614*clhs715 - clhs62*clhs784 - clhs623*clhs716 - clhs68*clhs785;
        lhs(20,24)=-clhs47*clhs786;
        lhs(20,25)=0;
        lhs(20,26)=-clhs62*clhs787;
        lhs(20,27)=-clhs68*clhs788;
        lhs(21,0)=penalty_parameter*(clhs49*clhs789 + clhs63*clhs790 + clhs69*clhs791);
        lhs(21,1)=penalty_parameter*(clhs49*clhs792 + clhs63*clhs793 + clhs69*clhs794);
        lhs(21,2)=penalty_parameter*(clhs49*clhs795 + clhs63*clhs796 + clhs69*clhs797);
        lhs(21,3)=penalty_parameter*(clhs49*clhs798 + clhs63*clhs799 + clhs69*clhs800);
        lhs(21,4)=penalty_parameter*(clhs49*clhs801 + clhs63*clhs802 + clhs69*clhs803);
        lhs(21,5)=penalty_parameter*(clhs49*clhs804 + clhs63*clhs805 + clhs69*clhs806);
        lhs(21,6)=penalty_parameter*(clhs49*clhs807 + clhs63*clhs808 + clhs69*clhs809);
        lhs(21,7)=penalty_parameter*(clhs49*clhs810 + clhs63*clhs811 + clhs69*clhs812);
        lhs(21,8)=penalty_parameter*(clhs49*clhs813 + clhs63*clhs814 + clhs69*clhs815);
        lhs(21,9)=penalty_parameter*(clhs49*clhs816 + clhs63*clhs817 + clhs69*clhs818);
        lhs(21,10)=penalty_parameter*(clhs49*clhs819 + clhs63*clhs820 + clhs69*clhs821);
        lhs(21,11)=penalty_parameter*(clhs49*clhs822 + clhs63*clhs823 + clhs69*clhs824);
        lhs(21,12)=-clhs276*clhs59 - clhs281*clhs49 - clhs285*clhs65 - clhs290*clhs63 - clhs294*clhs71 - clhs299*clhs69;
        lhs(21,13)=-clhs306*clhs59 - clhs311*clhs49 - clhs315*clhs65 - clhs320*clhs63 - clhs324*clhs71 - clhs329*clhs69;
        lhs(21,14)=-clhs336*clhs59 - clhs341*clhs49 - clhs345*clhs65 - clhs350*clhs63 - clhs354*clhs71 - clhs359*clhs69;
        lhs(21,15)=-clhs366*clhs59 - clhs371*clhs49 - clhs375*clhs65 - clhs380*clhs63 - clhs384*clhs71 - clhs389*clhs69;
        lhs(21,16)=-clhs396*clhs59 - clhs401*clhs49 - clhs405*clhs65 - clhs410*clhs63 - clhs414*clhs71 - clhs419*clhs69;
        lhs(21,17)=-clhs426*clhs59 - clhs431*clhs49 - clhs435*clhs65 - clhs440*clhs63 - clhs444*clhs71 - clhs449*clhs69;
        lhs(21,18)=-clhs456*clhs59 - clhs461*clhs49 - clhs465*clhs65 - clhs470*clhs63 - clhs474*clhs71 - clhs479*clhs69;
        lhs(21,19)=-clhs486*clhs59 - clhs49*clhs491 - clhs495*clhs65 - clhs500*clhs63 - clhs504*clhs71 - clhs509*clhs69;
        lhs(21,20)=-clhs49*clhs521 - clhs516*clhs59 - clhs525*clhs65 - clhs530*clhs63 - clhs534*clhs71 - clhs539*clhs69;
        lhs(21,21)=-clhs49*clhs551 - clhs546*clhs59 - clhs555*clhs65 - clhs560*clhs63 - clhs564*clhs71 - clhs569*clhs69;
        lhs(21,22)=-clhs49*clhs581 - clhs576*clhs59 - clhs585*clhs65 - clhs590*clhs63 - clhs594*clhs71 - clhs599*clhs69;
        lhs(21,23)=-clhs49*clhs611 - clhs59*clhs606 - clhs615*clhs65 - clhs620*clhs63 - clhs624*clhs71 - clhs629*clhs69;
        lhs(21,24)=-clhs49*clhs630;
        lhs(21,25)=0;
        lhs(21,26)=-clhs63*clhs631;
        lhs(21,27)=-clhs632*clhs69;
        lhs(22,0)=penalty_parameter*(clhs49*clhs825 + clhs63*clhs826 + clhs69*clhs827);
        lhs(22,1)=penalty_parameter*(clhs49*clhs828 + clhs63*clhs829 + clhs69*clhs830);
        lhs(22,2)=penalty_parameter*(clhs49*clhs831 + clhs63*clhs832 + clhs69*clhs833);
        lhs(22,3)=penalty_parameter*(clhs49*clhs834 + clhs63*clhs835 + clhs69*clhs836);
        lhs(22,4)=penalty_parameter*(clhs49*clhs837 + clhs63*clhs838 + clhs69*clhs839);
        lhs(22,5)=penalty_parameter*(clhs49*clhs840 + clhs63*clhs841 + clhs69*clhs842);
        lhs(22,6)=penalty_parameter*(clhs49*clhs843 + clhs63*clhs844 + clhs69*clhs845);
        lhs(22,7)=penalty_parameter*(clhs49*clhs846 + clhs63*clhs847 + clhs69*clhs848);
        lhs(22,8)=penalty_parameter*(clhs49*clhs849 + clhs63*clhs850 + clhs69*clhs851);
        lhs(22,9)=penalty_parameter*(clhs49*clhs852 + clhs63*clhs853 + clhs69*clhs854);
        lhs(22,10)=penalty_parameter*(clhs49*clhs855 + clhs63*clhs856 + clhs69*clhs857);
        lhs(22,11)=penalty_parameter*(clhs49*clhs858 + clhs63*clhs859 + clhs69*clhs860);
        lhs(22,12)=-clhs276*clhs636 - clhs285*clhs637 - clhs294*clhs638 - clhs49*clhs672 - clhs63*clhs673 - clhs674*clhs69;
        lhs(22,13)=-clhs306*clhs636 - clhs315*clhs637 - clhs324*clhs638 - clhs49*clhs675 - clhs63*clhs676 - clhs677*clhs69;
        lhs(22,14)=-clhs336*clhs636 - clhs345*clhs637 - clhs354*clhs638 - clhs49*clhs678 - clhs63*clhs679 - clhs680*clhs69;
        lhs(22,15)=-clhs366*clhs636 - clhs375*clhs637 - clhs384*clhs638 - clhs49*clhs681 - clhs63*clhs682 - clhs683*clhs69;
        lhs(22,16)=-clhs396*clhs636 - clhs405*clhs637 - clhs414*clhs638 - clhs49*clhs684 - clhs63*clhs685 - clhs686*clhs69;
        lhs(22,17)=-clhs426*clhs636 - clhs435*clhs637 - clhs444*clhs638 - clhs49*clhs687 - clhs63*clhs688 - clhs689*clhs69;
        lhs(22,18)=-clhs456*clhs636 - clhs465*clhs637 - clhs474*clhs638 - clhs49*clhs690 - clhs63*clhs691 - clhs69*clhs692;
        lhs(22,19)=-clhs486*clhs636 - clhs49*clhs693 - clhs495*clhs637 - clhs504*clhs638 - clhs63*clhs694 - clhs69*clhs695;
        lhs(22,20)=-clhs49*clhs696 - clhs516*clhs636 - clhs525*clhs637 - clhs534*clhs638 - clhs63*clhs697 - clhs69*clhs698;
        lhs(22,21)=-clhs49*clhs699 - clhs546*clhs636 - clhs555*clhs637 - clhs564*clhs638 - clhs63*clhs700 - clhs69*clhs701;
        lhs(22,22)=-clhs49*clhs702 - clhs576*clhs636 - clhs585*clhs637 - clhs594*clhs638 - clhs63*clhs703 - clhs69*clhs704;
        lhs(22,23)=-clhs49*clhs705 - clhs606*clhs636 - clhs615*clhs637 - clhs624*clhs638 - clhs63*clhs706 - clhs69*clhs707;
        lhs(22,24)=-clhs49*clhs708;
        lhs(22,25)=0;
        lhs(22,26)=-clhs63*clhs709;
        lhs(22,27)=-clhs69*clhs710;
        lhs(23,0)=penalty_parameter*(clhs49*clhs861 + clhs63*clhs862 + clhs69*clhs863);
        lhs(23,1)=penalty_parameter*(clhs49*clhs864 + clhs63*clhs865 + clhs69*clhs866);
        lhs(23,2)=penalty_parameter*(clhs49*clhs867 + clhs63*clhs868 + clhs69*clhs869);
        lhs(23,3)=penalty_parameter*(clhs49*clhs870 + clhs63*clhs871 + clhs69*clhs872);
        lhs(23,4)=penalty_parameter*(clhs49*clhs873 + clhs63*clhs874 + clhs69*clhs875);
        lhs(23,5)=penalty_parameter*(clhs49*clhs876 + clhs63*clhs877 + clhs69*clhs878);
        lhs(23,6)=penalty_parameter*(clhs49*clhs879 + clhs63*clhs880 + clhs69*clhs881);
        lhs(23,7)=penalty_parameter*(clhs49*clhs882 + clhs63*clhs883 + clhs69*clhs884);
        lhs(23,8)=penalty_parameter*(clhs49*clhs885 + clhs63*clhs886 + clhs69*clhs887);
        lhs(23,9)=penalty_parameter*(clhs49*clhs888 + clhs63*clhs889 + clhs69*clhs890);
        lhs(23,10)=penalty_parameter*(clhs49*clhs891 + clhs63*clhs892 + clhs69*clhs893);
        lhs(23,11)=penalty_parameter*(clhs49*clhs894 + clhs63*clhs895 + clhs69*clhs896);
        lhs(23,12)=-clhs276*clhs714 - clhs285*clhs715 - clhs294*clhs716 - clhs49*clhs750 - clhs63*clhs751 - clhs69*clhs752;
        lhs(23,13)=-clhs306*clhs714 - clhs315*clhs715 - clhs324*clhs716 - clhs49*clhs753 - clhs63*clhs754 - clhs69*clhs755;
        lhs(23,14)=-clhs336*clhs714 - clhs345*clhs715 - clhs354*clhs716 - clhs49*clhs756 - clhs63*clhs757 - clhs69*clhs758;
        lhs(23,15)=-clhs366*clhs714 - clhs375*clhs715 - clhs384*clhs716 - clhs49*clhs759 - clhs63*clhs760 - clhs69*clhs761;
        lhs(23,16)=-clhs396*clhs714 - clhs405*clhs715 - clhs414*clhs716 - clhs49*clhs762 - clhs63*clhs763 - clhs69*clhs764;
        lhs(23,17)=-clhs426*clhs714 - clhs435*clhs715 - clhs444*clhs716 - clhs49*clhs765 - clhs63*clhs766 - clhs69*clhs767;
        lhs(23,18)=-clhs456*clhs714 - clhs465*clhs715 - clhs474*clhs716 - clhs49*clhs768 - clhs63*clhs769 - clhs69*clhs770;
        lhs(23,19)=-clhs486*clhs714 - clhs49*clhs771 - clhs495*clhs715 - clhs504*clhs716 - clhs63*clhs772 - clhs69*clhs773;
        lhs(23,20)=-clhs49*clhs774 - clhs516*clhs714 - clhs525*clhs715 - clhs534*clhs716 - clhs63*clhs775 - clhs69*clhs776;
        lhs(23,21)=-clhs49*clhs777 - clhs546*clhs714 - clhs555*clhs715 - clhs564*clhs716 - clhs63*clhs778 - clhs69*clhs779;
        lhs(23,22)=-clhs49*clhs780 - clhs576*clhs714 - clhs585*clhs715 - clhs594*clhs716 - clhs63*clhs781 - clhs69*clhs782;
        lhs(23,23)=-clhs49*clhs783 - clhs606*clhs714 - clhs615*clhs715 - clhs624*clhs716 - clhs63*clhs784 - clhs69*clhs785;
        lhs(23,24)=-clhs49*clhs786;
        lhs(23,25)=0;
        lhs(23,26)=-clhs63*clhs787;
        lhs(23,27)=-clhs69*clhs788;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs76*scale_factor;
        lhs(24,2)=clhs94*scale_factor;
        lhs(24,3)=clhs112*scale_factor;
        lhs(24,4)=clhs130*scale_factor;
        lhs(24,5)=clhs148*scale_factor;
        lhs(24,6)=clhs166*scale_factor;
        lhs(24,7)=clhs184*scale_factor;
        lhs(24,8)=clhs202*scale_factor;
        lhs(24,9)=clhs220*scale_factor;
        lhs(24,10)=clhs238*scale_factor;
        lhs(24,11)=clhs256*scale_factor;
        lhs(24,12)=-clhs280*scale_factor;
        lhs(24,13)=-clhs310*scale_factor;
        lhs(24,14)=-clhs340*scale_factor;
        lhs(24,15)=-clhs370*scale_factor;
        lhs(24,16)=-clhs400*scale_factor;
        lhs(24,17)=-clhs430*scale_factor;
        lhs(24,18)=-clhs460*scale_factor;
        lhs(24,19)=-clhs490*scale_factor;
        lhs(24,20)=-clhs520*scale_factor;
        lhs(24,21)=-clhs550*scale_factor;
        lhs(24,22)=-clhs580*scale_factor;
        lhs(24,23)=-clhs610*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=0;
        lhs(25,1)=0;
        lhs(25,2)=0;
        lhs(25,3)=0;
        lhs(25,4)=0;
        lhs(25,5)=0;
        lhs(25,6)=0;
        lhs(25,7)=0;
        lhs(25,8)=0;
        lhs(25,9)=0;
        lhs(25,10)=0;
        lhs(25,11)=0;
        lhs(25,12)=0;
        lhs(25,13)=0;
        lhs(25,14)=0;
        lhs(25,15)=0;
        lhs(25,16)=0;
        lhs(25,17)=0;
        lhs(25,18)=0;
        lhs(25,19)=0;
        lhs(25,20)=0;
        lhs(25,21)=0;
        lhs(25,22)=0;
        lhs(25,23)=0;
        lhs(25,24)=0;
        lhs(25,25)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs30*scale_factor;
        lhs(26,1)=clhs82*scale_factor;
        lhs(26,2)=clhs100*scale_factor;
        lhs(26,3)=clhs118*scale_factor;
        lhs(26,4)=clhs136*scale_factor;
        lhs(26,5)=clhs154*scale_factor;
        lhs(26,6)=clhs172*scale_factor;
        lhs(26,7)=clhs190*scale_factor;
        lhs(26,8)=clhs208*scale_factor;
        lhs(26,9)=clhs226*scale_factor;
        lhs(26,10)=clhs244*scale_factor;
        lhs(26,11)=clhs262*scale_factor;
        lhs(26,12)=-clhs289*scale_factor;
        lhs(26,13)=-clhs319*scale_factor;
        lhs(26,14)=-clhs349*scale_factor;
        lhs(26,15)=-clhs379*scale_factor;
        lhs(26,16)=-clhs409*scale_factor;
        lhs(26,17)=-clhs439*scale_factor;
        lhs(26,18)=-clhs469*scale_factor;
        lhs(26,19)=-clhs499*scale_factor;
        lhs(26,20)=-clhs529*scale_factor;
        lhs(26,21)=-clhs559*scale_factor;
        lhs(26,22)=-clhs589*scale_factor;
        lhs(26,23)=-clhs619*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=clhs40*scale_factor;
        lhs(27,1)=clhs88*scale_factor;
        lhs(27,2)=clhs106*scale_factor;
        lhs(27,3)=clhs124*scale_factor;
        lhs(27,4)=clhs142*scale_factor;
        lhs(27,5)=clhs160*scale_factor;
        lhs(27,6)=clhs178*scale_factor;
        lhs(27,7)=clhs196*scale_factor;
        lhs(27,8)=clhs214*scale_factor;
        lhs(27,9)=clhs232*scale_factor;
        lhs(27,10)=clhs250*scale_factor;
        lhs(27,11)=clhs268*scale_factor;
        lhs(27,12)=-clhs298*scale_factor;
        lhs(27,13)=-clhs328*scale_factor;
        lhs(27,14)=-clhs358*scale_factor;
        lhs(27,15)=-clhs388*scale_factor;
        lhs(27,16)=-clhs418*scale_factor;
        lhs(27,17)=-clhs448*scale_factor;
        lhs(27,18)=-clhs478*scale_factor;
        lhs(27,19)=-clhs508*scale_factor;
        lhs(27,20)=-clhs538*scale_factor;
        lhs(27,21)=-clhs568*scale_factor;
        lhs(27,22)=-clhs598*scale_factor;
        lhs(27,23)=-clhs628*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 3 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(1,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(1,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(1,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(1,0)*penalty_parameter;
        const double clhs32 =     X1(0,0) + u1(0,0);
        const double clhs33 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs34 =     X1(1,0) + u1(1,0);
        const double clhs35 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs36 =     X1(2,0) + u1(2,0);
        const double clhs37 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs38 =     X1(3,0) + u1(3,0);
        const double clhs39 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs40 =     X1(0,1) + u1(0,1);
        const double clhs41 =     X1(1,1) + u1(1,1);
        const double clhs42 =     X1(2,1) + u1(2,1);
        const double clhs43 =     X1(3,1) + u1(3,1);
        const double clhs44 =     X1(0,2) + u1(0,2);
        const double clhs45 =     X1(1,2) + u1(1,2);
        const double clhs46 =     X1(2,2) + u1(2,2);
        const double clhs47 =     X1(3,2) + u1(3,2);
        const double clhs48 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs32*clhs33 + clhs34*clhs35 + clhs36*clhs37 + clhs38*clhs39) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs33*clhs40 + clhs35*clhs41 + clhs37*clhs42 + clhs39*clhs43 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs33*clhs44 + clhs35*clhs45 + clhs37*clhs46 + clhs39*clhs47));
        const double clhs49 =     clhs48*normalslave(0,0);
        const double clhs50 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs51 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs52 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs53 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs32*clhs50 + clhs34*clhs51 + clhs36*clhs52 + clhs38*clhs53) + normalslave(1,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs40*clhs50 + clhs41*clhs51 + clhs42*clhs52 + clhs43*clhs53) + normalslave(1,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs44*clhs50 + clhs45*clhs51 + clhs46*clhs52 + clhs47*clhs53));
        const double clhs55 =     clhs54*normalslave(1,0);
        const double clhs56 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs57 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs58 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs59 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs60 =     normalslave(0,0)*(clhs16*clhs56 + clhs17*clhs57 + clhs18*clhs58 + clhs19*clhs59) + normalslave(0,1)*(clhs0 + clhs1*clhs56 + clhs3*clhs57 + clhs58*clhs6 + clhs59*clhs9) + normalslave(0,2)*(clhs12*clhs56 + clhs13*clhs57 + clhs14*clhs58 + clhs15*clhs59);
        const double clhs61 =     clhs60*normalslave(0,0)*penalty_parameter;
        const double clhs62 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs63 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs64 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs65 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs66 =     normalslave(1,0)*(clhs16*clhs62 + clhs17*clhs63 + clhs18*clhs64 + clhs19*clhs65) + normalslave(1,1)*(clhs1*clhs62 + clhs22 + clhs3*clhs63 + clhs6*clhs64 + clhs65*clhs9) + normalslave(1,2)*(clhs12*clhs62 + clhs13*clhs63 + clhs14*clhs64 + clhs15*clhs65);
        const double clhs67 =     clhs66*normalslave(1,0)*penalty_parameter;
        const double clhs68 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs69 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs70 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs71 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs72 =     normalslave(0,0)*(clhs16*clhs68 + clhs17*clhs69 + clhs18*clhs70 + clhs19*clhs71) + normalslave(0,1)*(clhs1*clhs68 + clhs3*clhs69 + clhs6*clhs70 + clhs71*clhs9) + normalslave(0,2)*(clhs0 + clhs12*clhs68 + clhs13*clhs69 + clhs14*clhs70 + clhs15*clhs71);
        const double clhs73 =     clhs72*normalslave(0,0)*penalty_parameter;
        const double clhs74 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs75 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs76 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs77 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs78 =     normalslave(1,0)*(clhs16*clhs74 + clhs17*clhs75 + clhs18*clhs76 + clhs19*clhs77) + normalslave(1,1)*(clhs1*clhs74 + clhs3*clhs75 + clhs6*clhs76 + clhs77*clhs9) + normalslave(1,2)*(clhs12*clhs74 + clhs13*clhs75 + clhs14*clhs76 + clhs15*clhs77 + clhs22);
        const double clhs79 =     clhs78*normalslave(1,0)*penalty_parameter;
        const double clhs80 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs81 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs82 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs83 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs84 =     normalslave(0,0)*(clhs16*clhs80 + clhs17*clhs81 + clhs18*clhs82 + clhs19*clhs83 + clhs4) + normalslave(0,1)*(clhs1*clhs80 + clhs3*clhs81 + clhs6*clhs82 + clhs83*clhs9) + normalslave(0,2)*(clhs12*clhs80 + clhs13*clhs81 + clhs14*clhs82 + clhs15*clhs83);
        const double clhs85 =     clhs84*normalslave(0,0)*penalty_parameter;
        const double clhs86 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs87 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs88 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs89 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs90 =     normalslave(1,0)*(clhs16*clhs86 + clhs17*clhs87 + clhs18*clhs88 + clhs19*clhs89 + clhs24) + normalslave(1,1)*(clhs1*clhs86 + clhs3*clhs87 + clhs6*clhs88 + clhs89*clhs9) + normalslave(1,2)*(clhs12*clhs86 + clhs13*clhs87 + clhs14*clhs88 + clhs15*clhs89);
        const double clhs91 =     clhs90*normalslave(1,0)*penalty_parameter;
        const double clhs92 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs93 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs94 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs95 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs96 =     normalslave(0,0)*(clhs16*clhs92 + clhs17*clhs93 + clhs18*clhs94 + clhs19*clhs95) + normalslave(0,1)*(clhs1*clhs92 + clhs3*clhs93 + clhs4 + clhs6*clhs94 + clhs9*clhs95) + normalslave(0,2)*(clhs12*clhs92 + clhs13*clhs93 + clhs14*clhs94 + clhs15*clhs95);
        const double clhs97 =     clhs96*normalslave(0,0)*penalty_parameter;
        const double clhs98 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs99 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs100 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs101 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs102 =     normalslave(1,0)*(clhs100*clhs18 + clhs101*clhs19 + clhs16*clhs98 + clhs17*clhs99) + normalslave(1,1)*(clhs1*clhs98 + clhs100*clhs6 + clhs101*clhs9 + clhs24 + clhs3*clhs99) + normalslave(1,2)*(clhs100*clhs14 + clhs101*clhs15 + clhs12*clhs98 + clhs13*clhs99);
        const double clhs103 =     clhs102*normalslave(1,0)*penalty_parameter;
        const double clhs104 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs105 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs106 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs107 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs108 =     normalslave(0,0)*(clhs104*clhs16 + clhs105*clhs17 + clhs106*clhs18 + clhs107*clhs19) + normalslave(0,1)*(clhs1*clhs104 + clhs105*clhs3 + clhs106*clhs6 + clhs107*clhs9) + normalslave(0,2)*(clhs104*clhs12 + clhs105*clhs13 + clhs106*clhs14 + clhs107*clhs15 + clhs4);
        const double clhs109 =     clhs108*normalslave(0,0)*penalty_parameter;
        const double clhs110 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs111 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs112 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs113 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs114 =     normalslave(1,0)*(clhs110*clhs16 + clhs111*clhs17 + clhs112*clhs18 + clhs113*clhs19) + normalslave(1,1)*(clhs1*clhs110 + clhs111*clhs3 + clhs112*clhs6 + clhs113*clhs9) + normalslave(1,2)*(clhs110*clhs12 + clhs111*clhs13 + clhs112*clhs14 + clhs113*clhs15 + clhs24);
        const double clhs115 =     clhs114*normalslave(1,0)*penalty_parameter;
        const double clhs116 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs117 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs118 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs119 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs120 =     normalslave(0,0)*(clhs116*clhs16 + clhs117*clhs17 + clhs118*clhs18 + clhs119*clhs19 + clhs7) + normalslave(0,1)*(clhs1*clhs116 + clhs117*clhs3 + clhs118*clhs6 + clhs119*clhs9) + normalslave(0,2)*(clhs116*clhs12 + clhs117*clhs13 + clhs118*clhs14 + clhs119*clhs15);
        const double clhs121 =     clhs120*normalslave(0,0)*penalty_parameter;
        const double clhs122 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs123 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs124 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs125 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs126 =     normalslave(1,0)*(clhs122*clhs16 + clhs123*clhs17 + clhs124*clhs18 + clhs125*clhs19 + clhs26) + normalslave(1,1)*(clhs1*clhs122 + clhs123*clhs3 + clhs124*clhs6 + clhs125*clhs9) + normalslave(1,2)*(clhs12*clhs122 + clhs123*clhs13 + clhs124*clhs14 + clhs125*clhs15);
        const double clhs127 =     clhs126*normalslave(1,0)*penalty_parameter;
        const double clhs128 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs129 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs130 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs131 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs132 =     normalslave(0,0)*(clhs128*clhs16 + clhs129*clhs17 + clhs130*clhs18 + clhs131*clhs19) + normalslave(0,1)*(clhs1*clhs128 + clhs129*clhs3 + clhs130*clhs6 + clhs131*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs128 + clhs129*clhs13 + clhs130*clhs14 + clhs131*clhs15);
        const double clhs133 =     clhs132*normalslave(0,0)*penalty_parameter;
        const double clhs134 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs135 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs136 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs137 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs138 =     normalslave(1,0)*(clhs134*clhs16 + clhs135*clhs17 + clhs136*clhs18 + clhs137*clhs19) + normalslave(1,1)*(clhs1*clhs134 + clhs135*clhs3 + clhs136*clhs6 + clhs137*clhs9 + clhs26) + normalslave(1,2)*(clhs12*clhs134 + clhs13*clhs135 + clhs136*clhs14 + clhs137*clhs15);
        const double clhs139 =     clhs138*normalslave(1,0)*penalty_parameter;
        const double clhs140 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs141 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs142 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs143 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs144 =     normalslave(0,0)*(clhs140*clhs16 + clhs141*clhs17 + clhs142*clhs18 + clhs143*clhs19) + normalslave(0,1)*(clhs1*clhs140 + clhs141*clhs3 + clhs142*clhs6 + clhs143*clhs9) + normalslave(0,2)*(clhs12*clhs140 + clhs13*clhs141 + clhs14*clhs142 + clhs143*clhs15 + clhs7);
        const double clhs145 =     clhs144*normalslave(0,0)*penalty_parameter;
        const double clhs146 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs147 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs148 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs149 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs150 =     normalslave(1,0)*(clhs146*clhs16 + clhs147*clhs17 + clhs148*clhs18 + clhs149*clhs19) + normalslave(1,1)*(clhs1*clhs146 + clhs147*clhs3 + clhs148*clhs6 + clhs149*clhs9) + normalslave(1,2)*(clhs12*clhs146 + clhs13*clhs147 + clhs14*clhs148 + clhs149*clhs15 + clhs26);
        const double clhs151 =     clhs150*normalslave(1,0)*penalty_parameter;
        const double clhs152 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs153 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs154 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs155 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs156 =     normalslave(0,0)*(clhs10 + clhs152*clhs16 + clhs153*clhs17 + clhs154*clhs18 + clhs155*clhs19) + normalslave(0,1)*(clhs1*clhs152 + clhs153*clhs3 + clhs154*clhs6 + clhs155*clhs9) + normalslave(0,2)*(clhs12*clhs152 + clhs13*clhs153 + clhs14*clhs154 + clhs15*clhs155);
        const double clhs157 =     clhs156*normalslave(0,0)*penalty_parameter;
        const double clhs158 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs159 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs160 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs161 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs162 =     normalslave(1,0)*(clhs158*clhs16 + clhs159*clhs17 + clhs160*clhs18 + clhs161*clhs19 + clhs28) + normalslave(1,1)*(clhs1*clhs158 + clhs159*clhs3 + clhs160*clhs6 + clhs161*clhs9) + normalslave(1,2)*(clhs12*clhs158 + clhs13*clhs159 + clhs14*clhs160 + clhs15*clhs161);
        const double clhs163 =     clhs162*normalslave(1,0)*penalty_parameter;
        const double clhs164 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs165 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs166 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs167 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs168 =     normalslave(0,0)*(clhs16*clhs164 + clhs165*clhs17 + clhs166*clhs18 + clhs167*clhs19) + normalslave(0,1)*(clhs1*clhs164 + clhs10 + clhs165*clhs3 + clhs166*clhs6 + clhs167*clhs9) + normalslave(0,2)*(clhs12*clhs164 + clhs13*clhs165 + clhs14*clhs166 + clhs15*clhs167);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs171 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs172 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs173 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs174 =     normalslave(1,0)*(clhs16*clhs170 + clhs17*clhs171 + clhs172*clhs18 + clhs173*clhs19) + normalslave(1,1)*(clhs1*clhs170 + clhs171*clhs3 + clhs172*clhs6 + clhs173*clhs9 + clhs28) + normalslave(1,2)*(clhs12*clhs170 + clhs13*clhs171 + clhs14*clhs172 + clhs15*clhs173);
        const double clhs175 =     clhs174*normalslave(1,0)*penalty_parameter;
        const double clhs176 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs177 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs178 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs179 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs180 =     normalslave(0,0)*(clhs16*clhs176 + clhs17*clhs177 + clhs178*clhs18 + clhs179*clhs19) + normalslave(0,1)*(clhs1*clhs176 + clhs177*clhs3 + clhs178*clhs6 + clhs179*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs176 + clhs13*clhs177 + clhs14*clhs178 + clhs15*clhs179);
        const double clhs181 =     clhs180*normalslave(0,0)*penalty_parameter;
        const double clhs182 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs183 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs184 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs185 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs186 =     normalslave(1,0)*(clhs16*clhs182 + clhs17*clhs183 + clhs18*clhs184 + clhs185*clhs19) + normalslave(1,1)*(clhs1*clhs182 + clhs183*clhs3 + clhs184*clhs6 + clhs185*clhs9) + normalslave(1,2)*(clhs12*clhs182 + clhs13*clhs183 + clhs14*clhs184 + clhs15*clhs185 + clhs28);
        const double clhs187 =     clhs186*normalslave(1,0)*penalty_parameter;
        const double clhs188 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs189 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs190 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs191 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs192 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs193 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs194 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs195 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs197 =     normalslave(0,0)*(-clhs16*clhs188 - clhs17*clhs194 - clhs18*clhs195 - clhs19*clhs196 + clhs190*clhs32 + clhs191*clhs34 + clhs192*clhs36 + clhs193*clhs38 + clhs33) + normalslave(0,1)*(-clhs1*clhs188 + clhs190*clhs40 + clhs191*clhs41 + clhs192*clhs42 + clhs193*clhs43 - clhs194*clhs3 - clhs195*clhs6 - clhs196*clhs9) + normalslave(0,2)*(-clhs12*clhs188 - clhs13*clhs194 - clhs14*clhs195 - clhs15*clhs196 + clhs190*clhs44 + clhs191*clhs45 + clhs192*clhs46 + clhs193*clhs47);
        const double clhs198 =     clhs197*normalslave(0,0)*penalty_parameter;
        const double clhs199 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs200 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs201 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs202 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs203 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs204 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs205 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs206 =     normalslave(1,0)*(-clhs16*clhs189 - clhs17*clhs203 - clhs18*clhs204 - clhs19*clhs205 + clhs199*clhs32 + clhs200*clhs34 + clhs201*clhs36 + clhs202*clhs38 + clhs50) + normalslave(1,1)*(-clhs1*clhs189 + clhs199*clhs40 + clhs200*clhs41 + clhs201*clhs42 + clhs202*clhs43 - clhs203*clhs3 - clhs204*clhs6 - clhs205*clhs9) + normalslave(1,2)*(-clhs12*clhs189 - clhs13*clhs203 - clhs14*clhs204 - clhs15*clhs205 + clhs199*clhs44 + clhs200*clhs45 + clhs201*clhs46 + clhs202*clhs47);
        const double clhs207 =     clhs206*normalslave(1,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs210 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs211 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs215 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs216 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs217 =     normalslave(0,0)*(-clhs16*clhs208 - clhs17*clhs214 - clhs18*clhs215 - clhs19*clhs216 + clhs210*clhs32 + clhs211*clhs34 + clhs212*clhs36 + clhs213*clhs38) + normalslave(0,1)*(-clhs1*clhs208 + clhs210*clhs40 + clhs211*clhs41 + clhs212*clhs42 + clhs213*clhs43 - clhs214*clhs3 - clhs215*clhs6 - clhs216*clhs9 + clhs33) + normalslave(0,2)*(-clhs12*clhs208 - clhs13*clhs214 - clhs14*clhs215 - clhs15*clhs216 + clhs210*clhs44 + clhs211*clhs45 + clhs212*clhs46 + clhs213*clhs47);
        const double clhs218 =     clhs217*normalslave(0,0)*penalty_parameter;
        const double clhs219 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs220 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs221 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs224 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs226 =     normalslave(1,0)*(-clhs16*clhs209 - clhs17*clhs223 - clhs18*clhs224 - clhs19*clhs225 + clhs219*clhs32 + clhs220*clhs34 + clhs221*clhs36 + clhs222*clhs38) + normalslave(1,1)*(-clhs1*clhs209 + clhs219*clhs40 + clhs220*clhs41 + clhs221*clhs42 + clhs222*clhs43 - clhs223*clhs3 - clhs224*clhs6 - clhs225*clhs9 + clhs50) + normalslave(1,2)*(-clhs12*clhs209 - clhs13*clhs223 - clhs14*clhs224 - clhs15*clhs225 + clhs219*clhs44 + clhs220*clhs45 + clhs221*clhs46 + clhs222*clhs47);
        const double clhs227 =     clhs226*normalslave(1,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs229 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs230 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs231 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs232 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs233 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs234 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs235 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs236 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs237 =     normalslave(0,0)*(-clhs16*clhs228 - clhs17*clhs234 - clhs18*clhs235 - clhs19*clhs236 + clhs230*clhs32 + clhs231*clhs34 + clhs232*clhs36 + clhs233*clhs38) + normalslave(0,1)*(-clhs1*clhs228 + clhs230*clhs40 + clhs231*clhs41 + clhs232*clhs42 + clhs233*clhs43 - clhs234*clhs3 - clhs235*clhs6 - clhs236*clhs9) + normalslave(0,2)*(-clhs12*clhs228 - clhs13*clhs234 - clhs14*clhs235 - clhs15*clhs236 + clhs230*clhs44 + clhs231*clhs45 + clhs232*clhs46 + clhs233*clhs47 + clhs33);
        const double clhs238 =     clhs237*normalslave(0,0)*penalty_parameter;
        const double clhs239 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs240 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs241 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs242 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs243 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs244 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs245 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs246 =     normalslave(1,0)*(-clhs16*clhs229 - clhs17*clhs243 - clhs18*clhs244 - clhs19*clhs245 + clhs239*clhs32 + clhs240*clhs34 + clhs241*clhs36 + clhs242*clhs38) + normalslave(1,1)*(-clhs1*clhs229 + clhs239*clhs40 + clhs240*clhs41 + clhs241*clhs42 + clhs242*clhs43 - clhs243*clhs3 - clhs244*clhs6 - clhs245*clhs9) + normalslave(1,2)*(-clhs12*clhs229 - clhs13*clhs243 - clhs14*clhs244 - clhs15*clhs245 + clhs239*clhs44 + clhs240*clhs45 + clhs241*clhs46 + clhs242*clhs47 + clhs50);
        const double clhs247 =     clhs246*normalslave(1,0)*penalty_parameter;
        const double clhs248 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs249 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs250 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs251 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs252 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs253 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs254 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs255 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs256 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs257 =     normalslave(0,0)*(-clhs16*clhs248 - clhs17*clhs254 - clhs18*clhs255 - clhs19*clhs256 + clhs250*clhs32 + clhs251*clhs34 + clhs252*clhs36 + clhs253*clhs38 + clhs35) + normalslave(0,1)*(-clhs1*clhs248 + clhs250*clhs40 + clhs251*clhs41 + clhs252*clhs42 + clhs253*clhs43 - clhs254*clhs3 - clhs255*clhs6 - clhs256*clhs9) + normalslave(0,2)*(-clhs12*clhs248 - clhs13*clhs254 - clhs14*clhs255 - clhs15*clhs256 + clhs250*clhs44 + clhs251*clhs45 + clhs252*clhs46 + clhs253*clhs47);
        const double clhs258 =     clhs257*normalslave(0,0)*penalty_parameter;
        const double clhs259 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs260 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs261 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs262 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs263 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs264 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs265 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs266 =     normalslave(1,0)*(-clhs16*clhs249 - clhs17*clhs263 - clhs18*clhs264 - clhs19*clhs265 + clhs259*clhs32 + clhs260*clhs34 + clhs261*clhs36 + clhs262*clhs38 + clhs51) + normalslave(1,1)*(-clhs1*clhs249 + clhs259*clhs40 + clhs260*clhs41 + clhs261*clhs42 + clhs262*clhs43 - clhs263*clhs3 - clhs264*clhs6 - clhs265*clhs9) + normalslave(1,2)*(-clhs12*clhs249 - clhs13*clhs263 - clhs14*clhs264 - clhs15*clhs265 + clhs259*clhs44 + clhs260*clhs45 + clhs261*clhs46 + clhs262*clhs47);
        const double clhs267 =     clhs266*normalslave(1,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs269 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs270 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs271 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs272 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs273 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs274 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs275 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs276 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs277 =     normalslave(0,0)*(-clhs16*clhs268 - clhs17*clhs274 - clhs18*clhs275 - clhs19*clhs276 + clhs270*clhs32 + clhs271*clhs34 + clhs272*clhs36 + clhs273*clhs38) + normalslave(0,1)*(-clhs1*clhs268 + clhs270*clhs40 + clhs271*clhs41 + clhs272*clhs42 + clhs273*clhs43 - clhs274*clhs3 - clhs275*clhs6 - clhs276*clhs9 + clhs35) + normalslave(0,2)*(-clhs12*clhs268 - clhs13*clhs274 - clhs14*clhs275 - clhs15*clhs276 + clhs270*clhs44 + clhs271*clhs45 + clhs272*clhs46 + clhs273*clhs47);
        const double clhs278 =     clhs277*normalslave(0,0)*penalty_parameter;
        const double clhs279 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs280 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs281 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs282 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs283 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs284 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs285 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs286 =     normalslave(1,0)*(-clhs16*clhs269 - clhs17*clhs283 - clhs18*clhs284 - clhs19*clhs285 + clhs279*clhs32 + clhs280*clhs34 + clhs281*clhs36 + clhs282*clhs38) + normalslave(1,1)*(-clhs1*clhs269 + clhs279*clhs40 + clhs280*clhs41 + clhs281*clhs42 + clhs282*clhs43 - clhs283*clhs3 - clhs284*clhs6 - clhs285*clhs9 + clhs51) + normalslave(1,2)*(-clhs12*clhs269 - clhs13*clhs283 - clhs14*clhs284 - clhs15*clhs285 + clhs279*clhs44 + clhs280*clhs45 + clhs281*clhs46 + clhs282*clhs47);
        const double clhs287 =     clhs286*normalslave(1,0)*penalty_parameter;
        const double clhs288 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs289 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs290 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs291 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs292 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs293 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs294 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs295 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs296 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs297 =     normalslave(0,0)*(-clhs16*clhs288 - clhs17*clhs294 - clhs18*clhs295 - clhs19*clhs296 + clhs290*clhs32 + clhs291*clhs34 + clhs292*clhs36 + clhs293*clhs38) + normalslave(0,1)*(-clhs1*clhs288 + clhs290*clhs40 + clhs291*clhs41 + clhs292*clhs42 + clhs293*clhs43 - clhs294*clhs3 - clhs295*clhs6 - clhs296*clhs9) + normalslave(0,2)*(-clhs12*clhs288 - clhs13*clhs294 - clhs14*clhs295 - clhs15*clhs296 + clhs290*clhs44 + clhs291*clhs45 + clhs292*clhs46 + clhs293*clhs47 + clhs35);
        const double clhs298 =     clhs297*normalslave(0,0)*penalty_parameter;
        const double clhs299 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs300 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs301 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs302 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs303 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs304 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs305 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs306 =     normalslave(1,0)*(-clhs16*clhs289 - clhs17*clhs303 - clhs18*clhs304 - clhs19*clhs305 + clhs299*clhs32 + clhs300*clhs34 + clhs301*clhs36 + clhs302*clhs38) + normalslave(1,1)*(-clhs1*clhs289 + clhs299*clhs40 - clhs3*clhs303 + clhs300*clhs41 + clhs301*clhs42 + clhs302*clhs43 - clhs304*clhs6 - clhs305*clhs9) + normalslave(1,2)*(-clhs12*clhs289 - clhs13*clhs303 - clhs14*clhs304 - clhs15*clhs305 + clhs299*clhs44 + clhs300*clhs45 + clhs301*clhs46 + clhs302*clhs47 + clhs51);
        const double clhs307 =     clhs306*normalslave(1,0)*penalty_parameter;
        const double clhs308 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs309 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs310 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs311 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs312 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs313 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs314 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs315 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs316 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs317 =     normalslave(0,0)*(-clhs16*clhs308 - clhs17*clhs314 - clhs18*clhs315 - clhs19*clhs316 + clhs310*clhs32 + clhs311*clhs34 + clhs312*clhs36 + clhs313*clhs38 + clhs37) + normalslave(0,1)*(-clhs1*clhs308 - clhs3*clhs314 + clhs310*clhs40 + clhs311*clhs41 + clhs312*clhs42 + clhs313*clhs43 - clhs315*clhs6 - clhs316*clhs9) + normalslave(0,2)*(-clhs12*clhs308 - clhs13*clhs314 - clhs14*clhs315 - clhs15*clhs316 + clhs310*clhs44 + clhs311*clhs45 + clhs312*clhs46 + clhs313*clhs47);
        const double clhs318 =     clhs317*normalslave(0,0)*penalty_parameter;
        const double clhs319 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs320 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs321 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs322 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs323 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs324 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs325 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs326 =     normalslave(1,0)*(-clhs16*clhs309 - clhs17*clhs323 - clhs18*clhs324 - clhs19*clhs325 + clhs319*clhs32 + clhs320*clhs34 + clhs321*clhs36 + clhs322*clhs38 + clhs52) + normalslave(1,1)*(-clhs1*clhs309 - clhs3*clhs323 + clhs319*clhs40 + clhs320*clhs41 + clhs321*clhs42 + clhs322*clhs43 - clhs324*clhs6 - clhs325*clhs9) + normalslave(1,2)*(-clhs12*clhs309 - clhs13*clhs323 - clhs14*clhs324 - clhs15*clhs325 + clhs319*clhs44 + clhs320*clhs45 + clhs321*clhs46 + clhs322*clhs47);
        const double clhs327 =     clhs326*normalslave(1,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs329 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs330 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs331 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs332 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs333 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs334 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs335 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs336 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs337 =     normalslave(0,0)*(-clhs16*clhs328 - clhs17*clhs334 - clhs18*clhs335 - clhs19*clhs336 + clhs32*clhs330 + clhs331*clhs34 + clhs332*clhs36 + clhs333*clhs38) + normalslave(0,1)*(-clhs1*clhs328 - clhs3*clhs334 + clhs330*clhs40 + clhs331*clhs41 + clhs332*clhs42 + clhs333*clhs43 - clhs335*clhs6 - clhs336*clhs9 + clhs37) + normalslave(0,2)*(-clhs12*clhs328 - clhs13*clhs334 - clhs14*clhs335 - clhs15*clhs336 + clhs330*clhs44 + clhs331*clhs45 + clhs332*clhs46 + clhs333*clhs47);
        const double clhs338 =     clhs337*normalslave(0,0)*penalty_parameter;
        const double clhs339 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs340 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs341 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs342 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs343 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs344 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs345 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs346 =     normalslave(1,0)*(-clhs16*clhs329 - clhs17*clhs343 - clhs18*clhs344 - clhs19*clhs345 + clhs32*clhs339 + clhs34*clhs340 + clhs341*clhs36 + clhs342*clhs38) + normalslave(1,1)*(-clhs1*clhs329 - clhs3*clhs343 + clhs339*clhs40 + clhs340*clhs41 + clhs341*clhs42 + clhs342*clhs43 - clhs344*clhs6 - clhs345*clhs9 + clhs52) + normalslave(1,2)*(-clhs12*clhs329 - clhs13*clhs343 - clhs14*clhs344 - clhs15*clhs345 + clhs339*clhs44 + clhs340*clhs45 + clhs341*clhs46 + clhs342*clhs47);
        const double clhs347 =     clhs346*normalslave(1,0)*penalty_parameter;
        const double clhs348 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs349 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs350 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs351 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs352 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs353 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs354 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs355 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs356 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs357 =     normalslave(0,0)*(-clhs16*clhs348 - clhs17*clhs354 - clhs18*clhs355 - clhs19*clhs356 + clhs32*clhs350 + clhs34*clhs351 + clhs352*clhs36 + clhs353*clhs38) + normalslave(0,1)*(-clhs1*clhs348 - clhs3*clhs354 + clhs350*clhs40 + clhs351*clhs41 + clhs352*clhs42 + clhs353*clhs43 - clhs355*clhs6 - clhs356*clhs9) + normalslave(0,2)*(-clhs12*clhs348 - clhs13*clhs354 - clhs14*clhs355 - clhs15*clhs356 + clhs350*clhs44 + clhs351*clhs45 + clhs352*clhs46 + clhs353*clhs47 + clhs37);
        const double clhs358 =     clhs357*normalslave(0,0)*penalty_parameter;
        const double clhs359 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs360 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs361 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs362 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs363 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs364 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs365 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs366 =     normalslave(1,0)*(-clhs16*clhs349 - clhs17*clhs363 - clhs18*clhs364 - clhs19*clhs365 + clhs32*clhs359 + clhs34*clhs360 + clhs36*clhs361 + clhs362*clhs38) + normalslave(1,1)*(-clhs1*clhs349 - clhs3*clhs363 + clhs359*clhs40 + clhs360*clhs41 + clhs361*clhs42 + clhs362*clhs43 - clhs364*clhs6 - clhs365*clhs9) + normalslave(1,2)*(-clhs12*clhs349 - clhs13*clhs363 - clhs14*clhs364 - clhs15*clhs365 + clhs359*clhs44 + clhs360*clhs45 + clhs361*clhs46 + clhs362*clhs47 + clhs52);
        const double clhs367 =     clhs366*normalslave(1,0)*penalty_parameter;
        const double clhs368 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs369 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs370 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs371 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs372 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs373 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs374 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs375 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs376 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs377 =     normalslave(0,0)*(-clhs16*clhs368 - clhs17*clhs374 - clhs18*clhs375 - clhs19*clhs376 + clhs32*clhs370 + clhs34*clhs371 + clhs36*clhs372 + clhs373*clhs38 + clhs39) + normalslave(0,1)*(-clhs1*clhs368 - clhs3*clhs374 + clhs370*clhs40 + clhs371*clhs41 + clhs372*clhs42 + clhs373*clhs43 - clhs375*clhs6 - clhs376*clhs9) + normalslave(0,2)*(-clhs12*clhs368 - clhs13*clhs374 - clhs14*clhs375 - clhs15*clhs376 + clhs370*clhs44 + clhs371*clhs45 + clhs372*clhs46 + clhs373*clhs47);
        const double clhs378 =     clhs377*normalslave(0,0)*penalty_parameter;
        const double clhs379 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs380 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs381 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs382 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs383 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs384 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs385 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs386 =     normalslave(1,0)*(-clhs16*clhs369 - clhs17*clhs383 - clhs18*clhs384 - clhs19*clhs385 + clhs32*clhs379 + clhs34*clhs380 + clhs36*clhs381 + clhs38*clhs382 + clhs53) + normalslave(1,1)*(-clhs1*clhs369 - clhs3*clhs383 + clhs379*clhs40 + clhs380*clhs41 + clhs381*clhs42 + clhs382*clhs43 - clhs384*clhs6 - clhs385*clhs9) + normalslave(1,2)*(-clhs12*clhs369 - clhs13*clhs383 - clhs14*clhs384 - clhs15*clhs385 + clhs379*clhs44 + clhs380*clhs45 + clhs381*clhs46 + clhs382*clhs47);
        const double clhs387 =     clhs386*normalslave(1,0)*penalty_parameter;
        const double clhs388 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs389 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs390 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs391 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs392 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs393 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs394 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs395 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs396 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs397 =     normalslave(0,0)*(-clhs16*clhs388 - clhs17*clhs394 - clhs18*clhs395 - clhs19*clhs396 + clhs32*clhs390 + clhs34*clhs391 + clhs36*clhs392 + clhs38*clhs393) + normalslave(0,1)*(-clhs1*clhs388 - clhs3*clhs394 + clhs39 + clhs390*clhs40 + clhs391*clhs41 + clhs392*clhs42 + clhs393*clhs43 - clhs395*clhs6 - clhs396*clhs9) + normalslave(0,2)*(-clhs12*clhs388 - clhs13*clhs394 - clhs14*clhs395 - clhs15*clhs396 + clhs390*clhs44 + clhs391*clhs45 + clhs392*clhs46 + clhs393*clhs47);
        const double clhs398 =     clhs397*normalslave(0,0)*penalty_parameter;
        const double clhs399 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs400 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs401 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs402 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs403 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs404 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs405 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs406 =     normalslave(1,0)*(-clhs16*clhs389 - clhs17*clhs403 - clhs18*clhs404 - clhs19*clhs405 + clhs32*clhs399 + clhs34*clhs400 + clhs36*clhs401 + clhs38*clhs402) + normalslave(1,1)*(-clhs1*clhs389 - clhs3*clhs403 + clhs399*clhs40 + clhs400*clhs41 + clhs401*clhs42 + clhs402*clhs43 - clhs404*clhs6 - clhs405*clhs9 + clhs53) + normalslave(1,2)*(-clhs12*clhs389 - clhs13*clhs403 - clhs14*clhs404 - clhs15*clhs405 + clhs399*clhs44 + clhs400*clhs45 + clhs401*clhs46 + clhs402*clhs47);
        const double clhs407 =     clhs406*normalslave(1,0)*penalty_parameter;
        const double clhs408 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs409 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs410 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs411 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs412 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs413 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs414 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs415 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs416 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs417 =     normalslave(0,0)*(-clhs16*clhs408 - clhs17*clhs414 - clhs18*clhs415 - clhs19*clhs416 + clhs32*clhs410 + clhs34*clhs411 + clhs36*clhs412 + clhs38*clhs413) + normalslave(0,1)*(-clhs1*clhs408 - clhs3*clhs414 + clhs40*clhs410 + clhs41*clhs411 + clhs412*clhs42 + clhs413*clhs43 - clhs415*clhs6 - clhs416*clhs9) + normalslave(0,2)*(-clhs12*clhs408 - clhs13*clhs414 - clhs14*clhs415 - clhs15*clhs416 + clhs39 + clhs410*clhs44 + clhs411*clhs45 + clhs412*clhs46 + clhs413*clhs47);
        const double clhs418 =     clhs417*normalslave(0,0)*penalty_parameter;
        const double clhs419 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs420 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs421 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs422 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs423 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs424 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs425 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs426 =     normalslave(1,0)*(-clhs16*clhs409 - clhs17*clhs423 - clhs18*clhs424 - clhs19*clhs425 + clhs32*clhs419 + clhs34*clhs420 + clhs36*clhs421 + clhs38*clhs422) + normalslave(1,1)*(-clhs1*clhs409 - clhs3*clhs423 + clhs40*clhs419 + clhs41*clhs420 + clhs42*clhs421 + clhs422*clhs43 - clhs424*clhs6 - clhs425*clhs9) + normalslave(1,2)*(-clhs12*clhs409 - clhs13*clhs423 - clhs14*clhs424 - clhs15*clhs425 + clhs419*clhs44 + clhs420*clhs45 + clhs421*clhs46 + clhs422*clhs47 + clhs53);
        const double clhs427 =     clhs426*normalslave(1,0)*penalty_parameter;
        const double clhs428 =     normalslave(0,0)*scale_factor;
        const double clhs429 =     normalslave(1,0)*scale_factor;
        const double clhs430 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs431 =     clhs30*normalslave(1,1)*penalty_parameter;
        const double clhs432 =     clhs48*normalslave(0,1);
        const double clhs433 =     clhs54*normalslave(1,1);
        const double clhs434 =     clhs60*normalslave(0,1)*penalty_parameter;
        const double clhs435 =     clhs66*normalslave(1,1)*penalty_parameter;
        const double clhs436 =     clhs72*normalslave(0,1)*penalty_parameter;
        const double clhs437 =     clhs78*normalslave(1,1)*penalty_parameter;
        const double clhs438 =     clhs84*normalslave(0,1)*penalty_parameter;
        const double clhs439 =     clhs90*normalslave(1,1)*penalty_parameter;
        const double clhs440 =     clhs96*normalslave(0,1)*penalty_parameter;
        const double clhs441 =     clhs102*normalslave(1,1)*penalty_parameter;
        const double clhs442 =     clhs108*normalslave(0,1)*penalty_parameter;
        const double clhs443 =     clhs114*normalslave(1,1)*penalty_parameter;
        const double clhs444 =     clhs120*normalslave(0,1)*penalty_parameter;
        const double clhs445 =     clhs126*normalslave(1,1)*penalty_parameter;
        const double clhs446 =     clhs132*normalslave(0,1)*penalty_parameter;
        const double clhs447 =     clhs138*normalslave(1,1)*penalty_parameter;
        const double clhs448 =     clhs144*normalslave(0,1)*penalty_parameter;
        const double clhs449 =     clhs150*normalslave(1,1)*penalty_parameter;
        const double clhs450 =     clhs156*normalslave(0,1)*penalty_parameter;
        const double clhs451 =     clhs162*normalslave(1,1)*penalty_parameter;
        const double clhs452 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs453 =     clhs174*normalslave(1,1)*penalty_parameter;
        const double clhs454 =     clhs180*normalslave(0,1)*penalty_parameter;
        const double clhs455 =     clhs186*normalslave(1,1)*penalty_parameter;
        const double clhs456 =     clhs197*normalslave(0,1)*penalty_parameter;
        const double clhs457 =     clhs206*normalslave(1,1)*penalty_parameter;
        const double clhs458 =     clhs217*normalslave(0,1)*penalty_parameter;
        const double clhs459 =     clhs226*normalslave(1,1)*penalty_parameter;
        const double clhs460 =     clhs237*normalslave(0,1)*penalty_parameter;
        const double clhs461 =     clhs246*normalslave(1,1)*penalty_parameter;
        const double clhs462 =     clhs257*normalslave(0,1)*penalty_parameter;
        const double clhs463 =     clhs266*normalslave(1,1)*penalty_parameter;
        const double clhs464 =     clhs277*normalslave(0,1)*penalty_parameter;
        const double clhs465 =     clhs286*normalslave(1,1)*penalty_parameter;
        const double clhs466 =     clhs297*normalslave(0,1)*penalty_parameter;
        const double clhs467 =     clhs306*normalslave(1,1)*penalty_parameter;
        const double clhs468 =     clhs317*normalslave(0,1)*penalty_parameter;
        const double clhs469 =     clhs326*normalslave(1,1)*penalty_parameter;
        const double clhs470 =     clhs337*normalslave(0,1)*penalty_parameter;
        const double clhs471 =     clhs346*normalslave(1,1)*penalty_parameter;
        const double clhs472 =     clhs357*normalslave(0,1)*penalty_parameter;
        const double clhs473 =     clhs366*normalslave(1,1)*penalty_parameter;
        const double clhs474 =     clhs377*normalslave(0,1)*penalty_parameter;
        const double clhs475 =     clhs386*normalslave(1,1)*penalty_parameter;
        const double clhs476 =     clhs397*normalslave(0,1)*penalty_parameter;
        const double clhs477 =     clhs406*normalslave(1,1)*penalty_parameter;
        const double clhs478 =     clhs417*normalslave(0,1)*penalty_parameter;
        const double clhs479 =     clhs426*normalslave(1,1)*penalty_parameter;
        const double clhs480 =     normalslave(0,1)*scale_factor;
        const double clhs481 =     normalslave(1,1)*scale_factor;
        const double clhs482 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs483 =     clhs30*normalslave(1,2)*penalty_parameter;
        const double clhs484 =     clhs48*normalslave(0,2);
        const double clhs485 =     clhs54*normalslave(1,2);
        const double clhs486 =     clhs60*normalslave(0,2)*penalty_parameter;
        const double clhs487 =     clhs66*normalslave(1,2)*penalty_parameter;
        const double clhs488 =     clhs72*normalslave(0,2)*penalty_parameter;
        const double clhs489 =     clhs78*normalslave(1,2)*penalty_parameter;
        const double clhs490 =     clhs84*normalslave(0,2)*penalty_parameter;
        const double clhs491 =     clhs90*normalslave(1,2)*penalty_parameter;
        const double clhs492 =     clhs96*normalslave(0,2)*penalty_parameter;
        const double clhs493 =     clhs102*normalslave(1,2)*penalty_parameter;
        const double clhs494 =     clhs108*normalslave(0,2)*penalty_parameter;
        const double clhs495 =     clhs114*normalslave(1,2)*penalty_parameter;
        const double clhs496 =     clhs120*normalslave(0,2)*penalty_parameter;
        const double clhs497 =     clhs126*normalslave(1,2)*penalty_parameter;
        const double clhs498 =     clhs132*normalslave(0,2)*penalty_parameter;
        const double clhs499 =     clhs138*normalslave(1,2)*penalty_parameter;
        const double clhs500 =     clhs144*normalslave(0,2)*penalty_parameter;
        const double clhs501 =     clhs150*normalslave(1,2)*penalty_parameter;
        const double clhs502 =     clhs156*normalslave(0,2)*penalty_parameter;
        const double clhs503 =     clhs162*normalslave(1,2)*penalty_parameter;
        const double clhs504 =     clhs168*normalslave(0,2)*penalty_parameter;
        const double clhs505 =     clhs174*normalslave(1,2)*penalty_parameter;
        const double clhs506 =     clhs180*normalslave(0,2)*penalty_parameter;
        const double clhs507 =     clhs186*normalslave(1,2)*penalty_parameter;
        const double clhs508 =     clhs197*normalslave(0,2)*penalty_parameter;
        const double clhs509 =     clhs206*normalslave(1,2)*penalty_parameter;
        const double clhs510 =     clhs217*normalslave(0,2)*penalty_parameter;
        const double clhs511 =     clhs226*normalslave(1,2)*penalty_parameter;
        const double clhs512 =     clhs237*normalslave(0,2)*penalty_parameter;
        const double clhs513 =     clhs246*normalslave(1,2)*penalty_parameter;
        const double clhs514 =     clhs257*normalslave(0,2)*penalty_parameter;
        const double clhs515 =     clhs266*normalslave(1,2)*penalty_parameter;
        const double clhs516 =     clhs277*normalslave(0,2)*penalty_parameter;
        const double clhs517 =     clhs286*normalslave(1,2)*penalty_parameter;
        const double clhs518 =     clhs297*normalslave(0,2)*penalty_parameter;
        const double clhs519 =     clhs306*normalslave(1,2)*penalty_parameter;
        const double clhs520 =     clhs317*normalslave(0,2)*penalty_parameter;
        const double clhs521 =     clhs326*normalslave(1,2)*penalty_parameter;
        const double clhs522 =     clhs337*normalslave(0,2)*penalty_parameter;
        const double clhs523 =     clhs346*normalslave(1,2)*penalty_parameter;
        const double clhs524 =     clhs357*normalslave(0,2)*penalty_parameter;
        const double clhs525 =     clhs366*normalslave(1,2)*penalty_parameter;
        const double clhs526 =     clhs377*normalslave(0,2)*penalty_parameter;
        const double clhs527 =     clhs386*normalslave(1,2)*penalty_parameter;
        const double clhs528 =     clhs397*normalslave(0,2)*penalty_parameter;
        const double clhs529 =     clhs406*normalslave(1,2)*penalty_parameter;
        const double clhs530 =     clhs417*normalslave(0,2)*penalty_parameter;
        const double clhs531 =     clhs426*normalslave(1,2)*penalty_parameter;
        const double clhs532 =     normalslave(0,2)*scale_factor;
        const double clhs533 =     normalslave(1,2)*scale_factor;
        const double clhs534 =     clhs20*normalslave(0,0);
        const double clhs535 =     clhs30*normalslave(1,0);
        const double clhs536 =     clhs60*normalslave(0,0);
        const double clhs537 =     clhs66*normalslave(1,0);
        const double clhs538 =     clhs72*normalslave(0,0);
        const double clhs539 =     clhs78*normalslave(1,0);
        const double clhs540 =     clhs84*normalslave(0,0);
        const double clhs541 =     clhs90*normalslave(1,0);
        const double clhs542 =     clhs96*normalslave(0,0);
        const double clhs543 =     clhs102*normalslave(1,0);
        const double clhs544 =     clhs108*normalslave(0,0);
        const double clhs545 =     clhs114*normalslave(1,0);
        const double clhs546 =     clhs120*normalslave(0,0);
        const double clhs547 =     clhs126*normalslave(1,0);
        const double clhs548 =     clhs132*normalslave(0,0);
        const double clhs549 =     clhs138*normalslave(1,0);
        const double clhs550 =     clhs144*normalslave(0,0);
        const double clhs551 =     clhs150*normalslave(1,0);
        const double clhs552 =     clhs156*normalslave(0,0);
        const double clhs553 =     clhs162*normalslave(1,0);
        const double clhs554 =     clhs168*normalslave(0,0);
        const double clhs555 =     clhs174*normalslave(1,0);
        const double clhs556 =     clhs180*normalslave(0,0);
        const double clhs557 =     clhs186*normalslave(1,0);
        const double clhs558 =     clhs20*normalslave(0,1);
        const double clhs559 =     clhs30*normalslave(1,1);
        const double clhs560 =     clhs60*normalslave(0,1);
        const double clhs561 =     clhs66*normalslave(1,1);
        const double clhs562 =     clhs72*normalslave(0,1);
        const double clhs563 =     clhs78*normalslave(1,1);
        const double clhs564 =     clhs84*normalslave(0,1);
        const double clhs565 =     clhs90*normalslave(1,1);
        const double clhs566 =     clhs96*normalslave(0,1);
        const double clhs567 =     clhs102*normalslave(1,1);
        const double clhs568 =     clhs108*normalslave(0,1);
        const double clhs569 =     clhs114*normalslave(1,1);
        const double clhs570 =     clhs120*normalslave(0,1);
        const double clhs571 =     clhs126*normalslave(1,1);
        const double clhs572 =     clhs132*normalslave(0,1);
        const double clhs573 =     clhs138*normalslave(1,1);
        const double clhs574 =     clhs144*normalslave(0,1);
        const double clhs575 =     clhs150*normalslave(1,1);
        const double clhs576 =     clhs156*normalslave(0,1);
        const double clhs577 =     clhs162*normalslave(1,1);
        const double clhs578 =     clhs168*normalslave(0,1);
        const double clhs579 =     clhs174*normalslave(1,1);
        const double clhs580 =     clhs180*normalslave(0,1);
        const double clhs581 =     clhs186*normalslave(1,1);
        const double clhs582 =     clhs20*normalslave(0,2);
        const double clhs583 =     clhs30*normalslave(1,2);
        const double clhs584 =     clhs60*normalslave(0,2);
        const double clhs585 =     clhs66*normalslave(1,2);
        const double clhs586 =     clhs72*normalslave(0,2);
        const double clhs587 =     clhs78*normalslave(1,2);
        const double clhs588 =     clhs84*normalslave(0,2);
        const double clhs589 =     clhs90*normalslave(1,2);
        const double clhs590 =     clhs96*normalslave(0,2);
        const double clhs591 =     clhs102*normalslave(1,2);
        const double clhs592 =     clhs108*normalslave(0,2);
        const double clhs593 =     clhs114*normalslave(1,2);
        const double clhs594 =     clhs120*normalslave(0,2);
        const double clhs595 =     clhs126*normalslave(1,2);
        const double clhs596 =     clhs132*normalslave(0,2);
        const double clhs597 =     clhs138*normalslave(1,2);
        const double clhs598 =     clhs144*normalslave(0,2);
        const double clhs599 =     clhs150*normalslave(1,2);
        const double clhs600 =     clhs156*normalslave(0,2);
        const double clhs601 =     clhs162*normalslave(1,2);
        const double clhs602 =     clhs168*normalslave(0,2);
        const double clhs603 =     clhs174*normalslave(1,2);
        const double clhs604 =     clhs180*normalslave(0,2);
        const double clhs605 =     clhs186*normalslave(1,2);
        const double clhs606 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs49 - clhs22*clhs31 + clhs23*clhs55;
        lhs(0,1)=-clhs0*clhs61 - clhs22*clhs67 + clhs49*clhs56 + clhs55*clhs62;
        lhs(0,2)=-clhs0*clhs73 - clhs22*clhs79 + clhs49*clhs68 + clhs55*clhs74;
        lhs(0,3)=-clhs0*clhs85 - clhs22*clhs91 + clhs49*clhs80 + clhs55*clhs86;
        lhs(0,4)=-clhs0*clhs97 - clhs103*clhs22 + clhs49*clhs92 + clhs55*clhs98;
        lhs(0,5)=-clhs0*clhs109 + clhs104*clhs49 + clhs110*clhs55 - clhs115*clhs22;
        lhs(0,6)=-clhs0*clhs121 + clhs116*clhs49 + clhs122*clhs55 - clhs127*clhs22;
        lhs(0,7)=-clhs0*clhs133 + clhs128*clhs49 + clhs134*clhs55 - clhs139*clhs22;
        lhs(0,8)=-clhs0*clhs145 + clhs140*clhs49 + clhs146*clhs55 - clhs151*clhs22;
        lhs(0,9)=-clhs0*clhs157 + clhs152*clhs49 + clhs158*clhs55 - clhs163*clhs22;
        lhs(0,10)=-clhs0*clhs169 + clhs164*clhs49 + clhs170*clhs55 - clhs175*clhs22;
        lhs(0,11)=-clhs0*clhs181 + clhs176*clhs49 + clhs182*clhs55 - clhs187*clhs22;
        lhs(0,12)=clhs0*clhs198 + clhs188*clhs49 + clhs189*clhs55 + clhs207*clhs22;
        lhs(0,13)=clhs0*clhs218 + clhs208*clhs49 + clhs209*clhs55 + clhs22*clhs227;
        lhs(0,14)=clhs0*clhs238 + clhs22*clhs247 + clhs228*clhs49 + clhs229*clhs55;
        lhs(0,15)=clhs0*clhs258 + clhs22*clhs267 + clhs248*clhs49 + clhs249*clhs55;
        lhs(0,16)=clhs0*clhs278 + clhs22*clhs287 + clhs268*clhs49 + clhs269*clhs55;
        lhs(0,17)=clhs0*clhs298 + clhs22*clhs307 + clhs288*clhs49 + clhs289*clhs55;
        lhs(0,18)=clhs0*clhs318 + clhs22*clhs327 + clhs308*clhs49 + clhs309*clhs55;
        lhs(0,19)=clhs0*clhs338 + clhs22*clhs347 + clhs328*clhs49 + clhs329*clhs55;
        lhs(0,20)=clhs0*clhs358 + clhs22*clhs367 + clhs348*clhs49 + clhs349*clhs55;
        lhs(0,21)=clhs0*clhs378 + clhs22*clhs387 + clhs368*clhs49 + clhs369*clhs55;
        lhs(0,22)=clhs0*clhs398 + clhs22*clhs407 + clhs388*clhs49 + clhs389*clhs55;
        lhs(0,23)=clhs0*clhs418 + clhs22*clhs427 + clhs408*clhs49 + clhs409*clhs55;
        lhs(0,24)=clhs0*clhs428;
        lhs(0,25)=clhs22*clhs429;
        lhs(0,26)=0;
        lhs(0,27)=0;
        lhs(1,0)=-clhs0*clhs430 + clhs2*clhs432 - clhs22*clhs431 + clhs23*clhs433;
        lhs(1,1)=-clhs0*clhs434 - clhs22*clhs435 + clhs432*clhs56 + clhs433*clhs62;
        lhs(1,2)=-clhs0*clhs436 - clhs22*clhs437 + clhs432*clhs68 + clhs433*clhs74;
        lhs(1,3)=-clhs0*clhs438 - clhs22*clhs439 + clhs432*clhs80 + clhs433*clhs86;
        lhs(1,4)=-clhs0*clhs440 - clhs22*clhs441 + clhs432*clhs92 + clhs433*clhs98;
        lhs(1,5)=-clhs0*clhs442 + clhs104*clhs432 + clhs110*clhs433 - clhs22*clhs443;
        lhs(1,6)=-clhs0*clhs444 + clhs116*clhs432 + clhs122*clhs433 - clhs22*clhs445;
        lhs(1,7)=-clhs0*clhs446 + clhs128*clhs432 + clhs134*clhs433 - clhs22*clhs447;
        lhs(1,8)=-clhs0*clhs448 + clhs140*clhs432 + clhs146*clhs433 - clhs22*clhs449;
        lhs(1,9)=-clhs0*clhs450 + clhs152*clhs432 + clhs158*clhs433 - clhs22*clhs451;
        lhs(1,10)=-clhs0*clhs452 + clhs164*clhs432 + clhs170*clhs433 - clhs22*clhs453;
        lhs(1,11)=-clhs0*clhs454 + clhs176*clhs432 + clhs182*clhs433 - clhs22*clhs455;
        lhs(1,12)=clhs0*clhs456 + clhs188*clhs432 + clhs189*clhs433 + clhs22*clhs457;
        lhs(1,13)=clhs0*clhs458 + clhs208*clhs432 + clhs209*clhs433 + clhs22*clhs459;
        lhs(1,14)=clhs0*clhs460 + clhs22*clhs461 + clhs228*clhs432 + clhs229*clhs433;
        lhs(1,15)=clhs0*clhs462 + clhs22*clhs463 + clhs248*clhs432 + clhs249*clhs433;
        lhs(1,16)=clhs0*clhs464 + clhs22*clhs465 + clhs268*clhs432 + clhs269*clhs433;
        lhs(1,17)=clhs0*clhs466 + clhs22*clhs467 + clhs288*clhs432 + clhs289*clhs433;
        lhs(1,18)=clhs0*clhs468 + clhs22*clhs469 + clhs308*clhs432 + clhs309*clhs433;
        lhs(1,19)=clhs0*clhs470 + clhs22*clhs471 + clhs328*clhs432 + clhs329*clhs433;
        lhs(1,20)=clhs0*clhs472 + clhs22*clhs473 + clhs348*clhs432 + clhs349*clhs433;
        lhs(1,21)=clhs0*clhs474 + clhs22*clhs475 + clhs368*clhs432 + clhs369*clhs433;
        lhs(1,22)=clhs0*clhs476 + clhs22*clhs477 + clhs388*clhs432 + clhs389*clhs433;
        lhs(1,23)=clhs0*clhs478 + clhs22*clhs479 + clhs408*clhs432 + clhs409*clhs433;
        lhs(1,24)=clhs0*clhs480;
        lhs(1,25)=clhs22*clhs481;
        lhs(1,26)=0;
        lhs(1,27)=0;
        lhs(2,0)=-clhs0*clhs482 + clhs2*clhs484 - clhs22*clhs483 + clhs23*clhs485;
        lhs(2,1)=-clhs0*clhs486 - clhs22*clhs487 + clhs484*clhs56 + clhs485*clhs62;
        lhs(2,2)=-clhs0*clhs488 - clhs22*clhs489 + clhs484*clhs68 + clhs485*clhs74;
        lhs(2,3)=-clhs0*clhs490 - clhs22*clhs491 + clhs484*clhs80 + clhs485*clhs86;
        lhs(2,4)=-clhs0*clhs492 - clhs22*clhs493 + clhs484*clhs92 + clhs485*clhs98;
        lhs(2,5)=-clhs0*clhs494 + clhs104*clhs484 + clhs110*clhs485 - clhs22*clhs495;
        lhs(2,6)=-clhs0*clhs496 + clhs116*clhs484 + clhs122*clhs485 - clhs22*clhs497;
        lhs(2,7)=-clhs0*clhs498 + clhs128*clhs484 + clhs134*clhs485 - clhs22*clhs499;
        lhs(2,8)=-clhs0*clhs500 + clhs140*clhs484 + clhs146*clhs485 - clhs22*clhs501;
        lhs(2,9)=-clhs0*clhs502 + clhs152*clhs484 + clhs158*clhs485 - clhs22*clhs503;
        lhs(2,10)=-clhs0*clhs504 + clhs164*clhs484 + clhs170*clhs485 - clhs22*clhs505;
        lhs(2,11)=-clhs0*clhs506 + clhs176*clhs484 + clhs182*clhs485 - clhs22*clhs507;
        lhs(2,12)=clhs0*clhs508 + clhs188*clhs484 + clhs189*clhs485 + clhs22*clhs509;
        lhs(2,13)=clhs0*clhs510 + clhs208*clhs484 + clhs209*clhs485 + clhs22*clhs511;
        lhs(2,14)=clhs0*clhs512 + clhs22*clhs513 + clhs228*clhs484 + clhs229*clhs485;
        lhs(2,15)=clhs0*clhs514 + clhs22*clhs515 + clhs248*clhs484 + clhs249*clhs485;
        lhs(2,16)=clhs0*clhs516 + clhs22*clhs517 + clhs268*clhs484 + clhs269*clhs485;
        lhs(2,17)=clhs0*clhs518 + clhs22*clhs519 + clhs288*clhs484 + clhs289*clhs485;
        lhs(2,18)=clhs0*clhs520 + clhs22*clhs521 + clhs308*clhs484 + clhs309*clhs485;
        lhs(2,19)=clhs0*clhs522 + clhs22*clhs523 + clhs328*clhs484 + clhs329*clhs485;
        lhs(2,20)=clhs0*clhs524 + clhs22*clhs525 + clhs348*clhs484 + clhs349*clhs485;
        lhs(2,21)=clhs0*clhs526 + clhs22*clhs527 + clhs368*clhs484 + clhs369*clhs485;
        lhs(2,22)=clhs0*clhs528 + clhs22*clhs529 + clhs388*clhs484 + clhs389*clhs485;
        lhs(2,23)=clhs0*clhs530 + clhs22*clhs531 + clhs408*clhs484 + clhs409*clhs485;
        lhs(2,24)=clhs0*clhs532;
        lhs(2,25)=clhs22*clhs533;
        lhs(2,26)=0;
        lhs(2,27)=0;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs55 + clhs49*clhs5;
        lhs(3,1)=-clhs24*clhs67 - clhs4*clhs61 + clhs49*clhs57 + clhs55*clhs63;
        lhs(3,2)=-clhs24*clhs79 - clhs4*clhs73 + clhs49*clhs69 + clhs55*clhs75;
        lhs(3,3)=-clhs24*clhs91 - clhs4*clhs85 + clhs49*clhs81 + clhs55*clhs87;
        lhs(3,4)=-clhs103*clhs24 - clhs4*clhs97 + clhs49*clhs93 + clhs55*clhs99;
        lhs(3,5)=clhs105*clhs49 - clhs109*clhs4 + clhs111*clhs55 - clhs115*clhs24;
        lhs(3,6)=clhs117*clhs49 - clhs121*clhs4 + clhs123*clhs55 - clhs127*clhs24;
        lhs(3,7)=clhs129*clhs49 - clhs133*clhs4 + clhs135*clhs55 - clhs139*clhs24;
        lhs(3,8)=clhs141*clhs49 - clhs145*clhs4 + clhs147*clhs55 - clhs151*clhs24;
        lhs(3,9)=clhs153*clhs49 - clhs157*clhs4 + clhs159*clhs55 - clhs163*clhs24;
        lhs(3,10)=clhs165*clhs49 - clhs169*clhs4 + clhs171*clhs55 - clhs175*clhs24;
        lhs(3,11)=clhs177*clhs49 - clhs181*clhs4 + clhs183*clhs55 - clhs187*clhs24;
        lhs(3,12)=clhs194*clhs49 + clhs198*clhs4 + clhs203*clhs55 + clhs207*clhs24;
        lhs(3,13)=clhs214*clhs49 + clhs218*clhs4 + clhs223*clhs55 + clhs227*clhs24;
        lhs(3,14)=clhs234*clhs49 + clhs238*clhs4 + clhs24*clhs247 + clhs243*clhs55;
        lhs(3,15)=clhs24*clhs267 + clhs254*clhs49 + clhs258*clhs4 + clhs263*clhs55;
        lhs(3,16)=clhs24*clhs287 + clhs274*clhs49 + clhs278*clhs4 + clhs283*clhs55;
        lhs(3,17)=clhs24*clhs307 + clhs294*clhs49 + clhs298*clhs4 + clhs303*clhs55;
        lhs(3,18)=clhs24*clhs327 + clhs314*clhs49 + clhs318*clhs4 + clhs323*clhs55;
        lhs(3,19)=clhs24*clhs347 + clhs334*clhs49 + clhs338*clhs4 + clhs343*clhs55;
        lhs(3,20)=clhs24*clhs367 + clhs354*clhs49 + clhs358*clhs4 + clhs363*clhs55;
        lhs(3,21)=clhs24*clhs387 + clhs374*clhs49 + clhs378*clhs4 + clhs383*clhs55;
        lhs(3,22)=clhs24*clhs407 + clhs394*clhs49 + clhs398*clhs4 + clhs403*clhs55;
        lhs(3,23)=clhs24*clhs427 + clhs4*clhs418 + clhs414*clhs49 + clhs423*clhs55;
        lhs(3,24)=clhs4*clhs428;
        lhs(3,25)=clhs24*clhs429;
        lhs(3,26)=0;
        lhs(3,27)=0;
        lhs(4,0)=-clhs24*clhs431 + clhs25*clhs433 - clhs4*clhs430 + clhs432*clhs5;
        lhs(4,1)=-clhs24*clhs435 - clhs4*clhs434 + clhs432*clhs57 + clhs433*clhs63;
        lhs(4,2)=-clhs24*clhs437 - clhs4*clhs436 + clhs432*clhs69 + clhs433*clhs75;
        lhs(4,3)=-clhs24*clhs439 - clhs4*clhs438 + clhs432*clhs81 + clhs433*clhs87;
        lhs(4,4)=-clhs24*clhs441 - clhs4*clhs440 + clhs432*clhs93 + clhs433*clhs99;
        lhs(4,5)=clhs105*clhs432 + clhs111*clhs433 - clhs24*clhs443 - clhs4*clhs442;
        lhs(4,6)=clhs117*clhs432 + clhs123*clhs433 - clhs24*clhs445 - clhs4*clhs444;
        lhs(4,7)=clhs129*clhs432 + clhs135*clhs433 - clhs24*clhs447 - clhs4*clhs446;
        lhs(4,8)=clhs141*clhs432 + clhs147*clhs433 - clhs24*clhs449 - clhs4*clhs448;
        lhs(4,9)=clhs153*clhs432 + clhs159*clhs433 - clhs24*clhs451 - clhs4*clhs450;
        lhs(4,10)=clhs165*clhs432 + clhs171*clhs433 - clhs24*clhs453 - clhs4*clhs452;
        lhs(4,11)=clhs177*clhs432 + clhs183*clhs433 - clhs24*clhs455 - clhs4*clhs454;
        lhs(4,12)=clhs194*clhs432 + clhs203*clhs433 + clhs24*clhs457 + clhs4*clhs456;
        lhs(4,13)=clhs214*clhs432 + clhs223*clhs433 + clhs24*clhs459 + clhs4*clhs458;
        lhs(4,14)=clhs234*clhs432 + clhs24*clhs461 + clhs243*clhs433 + clhs4*clhs460;
        lhs(4,15)=clhs24*clhs463 + clhs254*clhs432 + clhs263*clhs433 + clhs4*clhs462;
        lhs(4,16)=clhs24*clhs465 + clhs274*clhs432 + clhs283*clhs433 + clhs4*clhs464;
        lhs(4,17)=clhs24*clhs467 + clhs294*clhs432 + clhs303*clhs433 + clhs4*clhs466;
        lhs(4,18)=clhs24*clhs469 + clhs314*clhs432 + clhs323*clhs433 + clhs4*clhs468;
        lhs(4,19)=clhs24*clhs471 + clhs334*clhs432 + clhs343*clhs433 + clhs4*clhs470;
        lhs(4,20)=clhs24*clhs473 + clhs354*clhs432 + clhs363*clhs433 + clhs4*clhs472;
        lhs(4,21)=clhs24*clhs475 + clhs374*clhs432 + clhs383*clhs433 + clhs4*clhs474;
        lhs(4,22)=clhs24*clhs477 + clhs394*clhs432 + clhs4*clhs476 + clhs403*clhs433;
        lhs(4,23)=clhs24*clhs479 + clhs4*clhs478 + clhs414*clhs432 + clhs423*clhs433;
        lhs(4,24)=clhs4*clhs480;
        lhs(4,25)=clhs24*clhs481;
        lhs(4,26)=0;
        lhs(4,27)=0;
        lhs(5,0)=-clhs24*clhs483 + clhs25*clhs485 - clhs4*clhs482 + clhs484*clhs5;
        lhs(5,1)=-clhs24*clhs487 - clhs4*clhs486 + clhs484*clhs57 + clhs485*clhs63;
        lhs(5,2)=-clhs24*clhs489 - clhs4*clhs488 + clhs484*clhs69 + clhs485*clhs75;
        lhs(5,3)=-clhs24*clhs491 - clhs4*clhs490 + clhs484*clhs81 + clhs485*clhs87;
        lhs(5,4)=-clhs24*clhs493 - clhs4*clhs492 + clhs484*clhs93 + clhs485*clhs99;
        lhs(5,5)=clhs105*clhs484 + clhs111*clhs485 - clhs24*clhs495 - clhs4*clhs494;
        lhs(5,6)=clhs117*clhs484 + clhs123*clhs485 - clhs24*clhs497 - clhs4*clhs496;
        lhs(5,7)=clhs129*clhs484 + clhs135*clhs485 - clhs24*clhs499 - clhs4*clhs498;
        lhs(5,8)=clhs141*clhs484 + clhs147*clhs485 - clhs24*clhs501 - clhs4*clhs500;
        lhs(5,9)=clhs153*clhs484 + clhs159*clhs485 - clhs24*clhs503 - clhs4*clhs502;
        lhs(5,10)=clhs165*clhs484 + clhs171*clhs485 - clhs24*clhs505 - clhs4*clhs504;
        lhs(5,11)=clhs177*clhs484 + clhs183*clhs485 - clhs24*clhs507 - clhs4*clhs506;
        lhs(5,12)=clhs194*clhs484 + clhs203*clhs485 + clhs24*clhs509 + clhs4*clhs508;
        lhs(5,13)=clhs214*clhs484 + clhs223*clhs485 + clhs24*clhs511 + clhs4*clhs510;
        lhs(5,14)=clhs234*clhs484 + clhs24*clhs513 + clhs243*clhs485 + clhs4*clhs512;
        lhs(5,15)=clhs24*clhs515 + clhs254*clhs484 + clhs263*clhs485 + clhs4*clhs514;
        lhs(5,16)=clhs24*clhs517 + clhs274*clhs484 + clhs283*clhs485 + clhs4*clhs516;
        lhs(5,17)=clhs24*clhs519 + clhs294*clhs484 + clhs303*clhs485 + clhs4*clhs518;
        lhs(5,18)=clhs24*clhs521 + clhs314*clhs484 + clhs323*clhs485 + clhs4*clhs520;
        lhs(5,19)=clhs24*clhs523 + clhs334*clhs484 + clhs343*clhs485 + clhs4*clhs522;
        lhs(5,20)=clhs24*clhs525 + clhs354*clhs484 + clhs363*clhs485 + clhs4*clhs524;
        lhs(5,21)=clhs24*clhs527 + clhs374*clhs484 + clhs383*clhs485 + clhs4*clhs526;
        lhs(5,22)=clhs24*clhs529 + clhs394*clhs484 + clhs4*clhs528 + clhs403*clhs485;
        lhs(5,23)=clhs24*clhs531 + clhs4*clhs530 + clhs414*clhs484 + clhs423*clhs485;
        lhs(5,24)=clhs4*clhs532;
        lhs(5,25)=clhs24*clhs533;
        lhs(5,26)=0;
        lhs(5,27)=0;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs55 + clhs49*clhs8;
        lhs(6,1)=-clhs26*clhs67 + clhs49*clhs58 + clhs55*clhs64 - clhs61*clhs7;
        lhs(6,2)=-clhs26*clhs79 + clhs49*clhs70 + clhs55*clhs76 - clhs7*clhs73;
        lhs(6,3)=-clhs26*clhs91 + clhs49*clhs82 + clhs55*clhs88 - clhs7*clhs85;
        lhs(6,4)=clhs100*clhs55 - clhs103*clhs26 + clhs49*clhs94 - clhs7*clhs97;
        lhs(6,5)=clhs106*clhs49 - clhs109*clhs7 + clhs112*clhs55 - clhs115*clhs26;
        lhs(6,6)=clhs118*clhs49 - clhs121*clhs7 + clhs124*clhs55 - clhs127*clhs26;
        lhs(6,7)=clhs130*clhs49 - clhs133*clhs7 + clhs136*clhs55 - clhs139*clhs26;
        lhs(6,8)=clhs142*clhs49 - clhs145*clhs7 + clhs148*clhs55 - clhs151*clhs26;
        lhs(6,9)=clhs154*clhs49 - clhs157*clhs7 + clhs160*clhs55 - clhs163*clhs26;
        lhs(6,10)=clhs166*clhs49 - clhs169*clhs7 + clhs172*clhs55 - clhs175*clhs26;
        lhs(6,11)=clhs178*clhs49 - clhs181*clhs7 + clhs184*clhs55 - clhs187*clhs26;
        lhs(6,12)=clhs195*clhs49 + clhs198*clhs7 + clhs204*clhs55 + clhs207*clhs26;
        lhs(6,13)=clhs215*clhs49 + clhs218*clhs7 + clhs224*clhs55 + clhs227*clhs26;
        lhs(6,14)=clhs235*clhs49 + clhs238*clhs7 + clhs244*clhs55 + clhs247*clhs26;
        lhs(6,15)=clhs255*clhs49 + clhs258*clhs7 + clhs26*clhs267 + clhs264*clhs55;
        lhs(6,16)=clhs26*clhs287 + clhs275*clhs49 + clhs278*clhs7 + clhs284*clhs55;
        lhs(6,17)=clhs26*clhs307 + clhs295*clhs49 + clhs298*clhs7 + clhs304*clhs55;
        lhs(6,18)=clhs26*clhs327 + clhs315*clhs49 + clhs318*clhs7 + clhs324*clhs55;
        lhs(6,19)=clhs26*clhs347 + clhs335*clhs49 + clhs338*clhs7 + clhs344*clhs55;
        lhs(6,20)=clhs26*clhs367 + clhs355*clhs49 + clhs358*clhs7 + clhs364*clhs55;
        lhs(6,21)=clhs26*clhs387 + clhs375*clhs49 + clhs378*clhs7 + clhs384*clhs55;
        lhs(6,22)=clhs26*clhs407 + clhs395*clhs49 + clhs398*clhs7 + clhs404*clhs55;
        lhs(6,23)=clhs26*clhs427 + clhs415*clhs49 + clhs418*clhs7 + clhs424*clhs55;
        lhs(6,24)=clhs428*clhs7;
        lhs(6,25)=clhs26*clhs429;
        lhs(6,26)=0;
        lhs(6,27)=0;
        lhs(7,0)=-clhs26*clhs431 + clhs27*clhs433 - clhs430*clhs7 + clhs432*clhs8;
        lhs(7,1)=-clhs26*clhs435 + clhs432*clhs58 + clhs433*clhs64 - clhs434*clhs7;
        lhs(7,2)=-clhs26*clhs437 + clhs432*clhs70 + clhs433*clhs76 - clhs436*clhs7;
        lhs(7,3)=-clhs26*clhs439 + clhs432*clhs82 + clhs433*clhs88 - clhs438*clhs7;
        lhs(7,4)=clhs100*clhs433 - clhs26*clhs441 + clhs432*clhs94 - clhs440*clhs7;
        lhs(7,5)=clhs106*clhs432 + clhs112*clhs433 - clhs26*clhs443 - clhs442*clhs7;
        lhs(7,6)=clhs118*clhs432 + clhs124*clhs433 - clhs26*clhs445 - clhs444*clhs7;
        lhs(7,7)=clhs130*clhs432 + clhs136*clhs433 - clhs26*clhs447 - clhs446*clhs7;
        lhs(7,8)=clhs142*clhs432 + clhs148*clhs433 - clhs26*clhs449 - clhs448*clhs7;
        lhs(7,9)=clhs154*clhs432 + clhs160*clhs433 - clhs26*clhs451 - clhs450*clhs7;
        lhs(7,10)=clhs166*clhs432 + clhs172*clhs433 - clhs26*clhs453 - clhs452*clhs7;
        lhs(7,11)=clhs178*clhs432 + clhs184*clhs433 - clhs26*clhs455 - clhs454*clhs7;
        lhs(7,12)=clhs195*clhs432 + clhs204*clhs433 + clhs26*clhs457 + clhs456*clhs7;
        lhs(7,13)=clhs215*clhs432 + clhs224*clhs433 + clhs26*clhs459 + clhs458*clhs7;
        lhs(7,14)=clhs235*clhs432 + clhs244*clhs433 + clhs26*clhs461 + clhs460*clhs7;
        lhs(7,15)=clhs255*clhs432 + clhs26*clhs463 + clhs264*clhs433 + clhs462*clhs7;
        lhs(7,16)=clhs26*clhs465 + clhs275*clhs432 + clhs284*clhs433 + clhs464*clhs7;
        lhs(7,17)=clhs26*clhs467 + clhs295*clhs432 + clhs304*clhs433 + clhs466*clhs7;
        lhs(7,18)=clhs26*clhs469 + clhs315*clhs432 + clhs324*clhs433 + clhs468*clhs7;
        lhs(7,19)=clhs26*clhs471 + clhs335*clhs432 + clhs344*clhs433 + clhs470*clhs7;
        lhs(7,20)=clhs26*clhs473 + clhs355*clhs432 + clhs364*clhs433 + clhs472*clhs7;
        lhs(7,21)=clhs26*clhs475 + clhs375*clhs432 + clhs384*clhs433 + clhs474*clhs7;
        lhs(7,22)=clhs26*clhs477 + clhs395*clhs432 + clhs404*clhs433 + clhs476*clhs7;
        lhs(7,23)=clhs26*clhs479 + clhs415*clhs432 + clhs424*clhs433 + clhs478*clhs7;
        lhs(7,24)=clhs480*clhs7;
        lhs(7,25)=clhs26*clhs481;
        lhs(7,26)=0;
        lhs(7,27)=0;
        lhs(8,0)=-clhs26*clhs483 + clhs27*clhs485 - clhs482*clhs7 + clhs484*clhs8;
        lhs(8,1)=-clhs26*clhs487 + clhs484*clhs58 + clhs485*clhs64 - clhs486*clhs7;
        lhs(8,2)=-clhs26*clhs489 + clhs484*clhs70 + clhs485*clhs76 - clhs488*clhs7;
        lhs(8,3)=-clhs26*clhs491 + clhs484*clhs82 + clhs485*clhs88 - clhs490*clhs7;
        lhs(8,4)=clhs100*clhs485 - clhs26*clhs493 + clhs484*clhs94 - clhs492*clhs7;
        lhs(8,5)=clhs106*clhs484 + clhs112*clhs485 - clhs26*clhs495 - clhs494*clhs7;
        lhs(8,6)=clhs118*clhs484 + clhs124*clhs485 - clhs26*clhs497 - clhs496*clhs7;
        lhs(8,7)=clhs130*clhs484 + clhs136*clhs485 - clhs26*clhs499 - clhs498*clhs7;
        lhs(8,8)=clhs142*clhs484 + clhs148*clhs485 - clhs26*clhs501 - clhs500*clhs7;
        lhs(8,9)=clhs154*clhs484 + clhs160*clhs485 - clhs26*clhs503 - clhs502*clhs7;
        lhs(8,10)=clhs166*clhs484 + clhs172*clhs485 - clhs26*clhs505 - clhs504*clhs7;
        lhs(8,11)=clhs178*clhs484 + clhs184*clhs485 - clhs26*clhs507 - clhs506*clhs7;
        lhs(8,12)=clhs195*clhs484 + clhs204*clhs485 + clhs26*clhs509 + clhs508*clhs7;
        lhs(8,13)=clhs215*clhs484 + clhs224*clhs485 + clhs26*clhs511 + clhs510*clhs7;
        lhs(8,14)=clhs235*clhs484 + clhs244*clhs485 + clhs26*clhs513 + clhs512*clhs7;
        lhs(8,15)=clhs255*clhs484 + clhs26*clhs515 + clhs264*clhs485 + clhs514*clhs7;
        lhs(8,16)=clhs26*clhs517 + clhs275*clhs484 + clhs284*clhs485 + clhs516*clhs7;
        lhs(8,17)=clhs26*clhs519 + clhs295*clhs484 + clhs304*clhs485 + clhs518*clhs7;
        lhs(8,18)=clhs26*clhs521 + clhs315*clhs484 + clhs324*clhs485 + clhs520*clhs7;
        lhs(8,19)=clhs26*clhs523 + clhs335*clhs484 + clhs344*clhs485 + clhs522*clhs7;
        lhs(8,20)=clhs26*clhs525 + clhs355*clhs484 + clhs364*clhs485 + clhs524*clhs7;
        lhs(8,21)=clhs26*clhs527 + clhs375*clhs484 + clhs384*clhs485 + clhs526*clhs7;
        lhs(8,22)=clhs26*clhs529 + clhs395*clhs484 + clhs404*clhs485 + clhs528*clhs7;
        lhs(8,23)=clhs26*clhs531 + clhs415*clhs484 + clhs424*clhs485 + clhs530*clhs7;
        lhs(8,24)=clhs532*clhs7;
        lhs(8,25)=clhs26*clhs533;
        lhs(8,26)=0;
        lhs(8,27)=0;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs49 - clhs28*clhs31 + clhs29*clhs55;
        lhs(9,1)=-clhs10*clhs61 - clhs28*clhs67 + clhs49*clhs59 + clhs55*clhs65;
        lhs(9,2)=-clhs10*clhs73 - clhs28*clhs79 + clhs49*clhs71 + clhs55*clhs77;
        lhs(9,3)=-clhs10*clhs85 - clhs28*clhs91 + clhs49*clhs83 + clhs55*clhs89;
        lhs(9,4)=-clhs10*clhs97 + clhs101*clhs55 - clhs103*clhs28 + clhs49*clhs95;
        lhs(9,5)=-clhs10*clhs109 + clhs107*clhs49 + clhs113*clhs55 - clhs115*clhs28;
        lhs(9,6)=-clhs10*clhs121 + clhs119*clhs49 + clhs125*clhs55 - clhs127*clhs28;
        lhs(9,7)=-clhs10*clhs133 + clhs131*clhs49 + clhs137*clhs55 - clhs139*clhs28;
        lhs(9,8)=-clhs10*clhs145 + clhs143*clhs49 + clhs149*clhs55 - clhs151*clhs28;
        lhs(9,9)=-clhs10*clhs157 + clhs155*clhs49 + clhs161*clhs55 - clhs163*clhs28;
        lhs(9,10)=-clhs10*clhs169 + clhs167*clhs49 + clhs173*clhs55 - clhs175*clhs28;
        lhs(9,11)=-clhs10*clhs181 + clhs179*clhs49 + clhs185*clhs55 - clhs187*clhs28;
        lhs(9,12)=clhs10*clhs198 + clhs196*clhs49 + clhs205*clhs55 + clhs207*clhs28;
        lhs(9,13)=clhs10*clhs218 + clhs216*clhs49 + clhs225*clhs55 + clhs227*clhs28;
        lhs(9,14)=clhs10*clhs238 + clhs236*clhs49 + clhs245*clhs55 + clhs247*clhs28;
        lhs(9,15)=clhs10*clhs258 + clhs256*clhs49 + clhs265*clhs55 + clhs267*clhs28;
        lhs(9,16)=clhs10*clhs278 + clhs276*clhs49 + clhs28*clhs287 + clhs285*clhs55;
        lhs(9,17)=clhs10*clhs298 + clhs28*clhs307 + clhs296*clhs49 + clhs305*clhs55;
        lhs(9,18)=clhs10*clhs318 + clhs28*clhs327 + clhs316*clhs49 + clhs325*clhs55;
        lhs(9,19)=clhs10*clhs338 + clhs28*clhs347 + clhs336*clhs49 + clhs345*clhs55;
        lhs(9,20)=clhs10*clhs358 + clhs28*clhs367 + clhs356*clhs49 + clhs365*clhs55;
        lhs(9,21)=clhs10*clhs378 + clhs28*clhs387 + clhs376*clhs49 + clhs385*clhs55;
        lhs(9,22)=clhs10*clhs398 + clhs28*clhs407 + clhs396*clhs49 + clhs405*clhs55;
        lhs(9,23)=clhs10*clhs418 + clhs28*clhs427 + clhs416*clhs49 + clhs425*clhs55;
        lhs(9,24)=clhs10*clhs428;
        lhs(9,25)=clhs28*clhs429;
        lhs(9,26)=0;
        lhs(9,27)=0;
        lhs(10,0)=-clhs10*clhs430 + clhs11*clhs432 - clhs28*clhs431 + clhs29*clhs433;
        lhs(10,1)=-clhs10*clhs434 - clhs28*clhs435 + clhs432*clhs59 + clhs433*clhs65;
        lhs(10,2)=-clhs10*clhs436 - clhs28*clhs437 + clhs432*clhs71 + clhs433*clhs77;
        lhs(10,3)=-clhs10*clhs438 - clhs28*clhs439 + clhs432*clhs83 + clhs433*clhs89;
        lhs(10,4)=-clhs10*clhs440 + clhs101*clhs433 - clhs28*clhs441 + clhs432*clhs95;
        lhs(10,5)=-clhs10*clhs442 + clhs107*clhs432 + clhs113*clhs433 - clhs28*clhs443;
        lhs(10,6)=-clhs10*clhs444 + clhs119*clhs432 + clhs125*clhs433 - clhs28*clhs445;
        lhs(10,7)=-clhs10*clhs446 + clhs131*clhs432 + clhs137*clhs433 - clhs28*clhs447;
        lhs(10,8)=-clhs10*clhs448 + clhs143*clhs432 + clhs149*clhs433 - clhs28*clhs449;
        lhs(10,9)=-clhs10*clhs450 + clhs155*clhs432 + clhs161*clhs433 - clhs28*clhs451;
        lhs(10,10)=-clhs10*clhs452 + clhs167*clhs432 + clhs173*clhs433 - clhs28*clhs453;
        lhs(10,11)=-clhs10*clhs454 + clhs179*clhs432 + clhs185*clhs433 - clhs28*clhs455;
        lhs(10,12)=clhs10*clhs456 + clhs196*clhs432 + clhs205*clhs433 + clhs28*clhs457;
        lhs(10,13)=clhs10*clhs458 + clhs216*clhs432 + clhs225*clhs433 + clhs28*clhs459;
        lhs(10,14)=clhs10*clhs460 + clhs236*clhs432 + clhs245*clhs433 + clhs28*clhs461;
        lhs(10,15)=clhs10*clhs462 + clhs256*clhs432 + clhs265*clhs433 + clhs28*clhs463;
        lhs(10,16)=clhs10*clhs464 + clhs276*clhs432 + clhs28*clhs465 + clhs285*clhs433;
        lhs(10,17)=clhs10*clhs466 + clhs28*clhs467 + clhs296*clhs432 + clhs305*clhs433;
        lhs(10,18)=clhs10*clhs468 + clhs28*clhs469 + clhs316*clhs432 + clhs325*clhs433;
        lhs(10,19)=clhs10*clhs470 + clhs28*clhs471 + clhs336*clhs432 + clhs345*clhs433;
        lhs(10,20)=clhs10*clhs472 + clhs28*clhs473 + clhs356*clhs432 + clhs365*clhs433;
        lhs(10,21)=clhs10*clhs474 + clhs28*clhs475 + clhs376*clhs432 + clhs385*clhs433;
        lhs(10,22)=clhs10*clhs476 + clhs28*clhs477 + clhs396*clhs432 + clhs405*clhs433;
        lhs(10,23)=clhs10*clhs478 + clhs28*clhs479 + clhs416*clhs432 + clhs425*clhs433;
        lhs(10,24)=clhs10*clhs480;
        lhs(10,25)=clhs28*clhs481;
        lhs(10,26)=0;
        lhs(10,27)=0;
        lhs(11,0)=-clhs10*clhs482 + clhs11*clhs484 - clhs28*clhs483 + clhs29*clhs485;
        lhs(11,1)=-clhs10*clhs486 - clhs28*clhs487 + clhs484*clhs59 + clhs485*clhs65;
        lhs(11,2)=-clhs10*clhs488 - clhs28*clhs489 + clhs484*clhs71 + clhs485*clhs77;
        lhs(11,3)=-clhs10*clhs490 - clhs28*clhs491 + clhs484*clhs83 + clhs485*clhs89;
        lhs(11,4)=-clhs10*clhs492 + clhs101*clhs485 - clhs28*clhs493 + clhs484*clhs95;
        lhs(11,5)=-clhs10*clhs494 + clhs107*clhs484 + clhs113*clhs485 - clhs28*clhs495;
        lhs(11,6)=-clhs10*clhs496 + clhs119*clhs484 + clhs125*clhs485 - clhs28*clhs497;
        lhs(11,7)=-clhs10*clhs498 + clhs131*clhs484 + clhs137*clhs485 - clhs28*clhs499;
        lhs(11,8)=-clhs10*clhs500 + clhs143*clhs484 + clhs149*clhs485 - clhs28*clhs501;
        lhs(11,9)=-clhs10*clhs502 + clhs155*clhs484 + clhs161*clhs485 - clhs28*clhs503;
        lhs(11,10)=-clhs10*clhs504 + clhs167*clhs484 + clhs173*clhs485 - clhs28*clhs505;
        lhs(11,11)=-clhs10*clhs506 + clhs179*clhs484 + clhs185*clhs485 - clhs28*clhs507;
        lhs(11,12)=clhs10*clhs508 + clhs196*clhs484 + clhs205*clhs485 + clhs28*clhs509;
        lhs(11,13)=clhs10*clhs510 + clhs216*clhs484 + clhs225*clhs485 + clhs28*clhs511;
        lhs(11,14)=clhs10*clhs512 + clhs236*clhs484 + clhs245*clhs485 + clhs28*clhs513;
        lhs(11,15)=clhs10*clhs514 + clhs256*clhs484 + clhs265*clhs485 + clhs28*clhs515;
        lhs(11,16)=clhs10*clhs516 + clhs276*clhs484 + clhs28*clhs517 + clhs285*clhs485;
        lhs(11,17)=clhs10*clhs518 + clhs28*clhs519 + clhs296*clhs484 + clhs305*clhs485;
        lhs(11,18)=clhs10*clhs520 + clhs28*clhs521 + clhs316*clhs484 + clhs325*clhs485;
        lhs(11,19)=clhs10*clhs522 + clhs28*clhs523 + clhs336*clhs484 + clhs345*clhs485;
        lhs(11,20)=clhs10*clhs524 + clhs28*clhs525 + clhs356*clhs484 + clhs365*clhs485;
        lhs(11,21)=clhs10*clhs526 + clhs28*clhs527 + clhs376*clhs484 + clhs385*clhs485;
        lhs(11,22)=clhs10*clhs528 + clhs28*clhs529 + clhs396*clhs484 + clhs405*clhs485;
        lhs(11,23)=clhs10*clhs530 + clhs28*clhs531 + clhs416*clhs484 + clhs425*clhs485;
        lhs(11,24)=clhs10*clhs532;
        lhs(11,25)=clhs28*clhs533;
        lhs(11,26)=0;
        lhs(11,27)=0;
        lhs(12,0)=penalty_parameter*(clhs33*clhs534 + clhs50*clhs535);
        lhs(12,1)=penalty_parameter*(clhs33*clhs536 + clhs50*clhs537);
        lhs(12,2)=penalty_parameter*(clhs33*clhs538 + clhs50*clhs539);
        lhs(12,3)=penalty_parameter*(clhs33*clhs540 + clhs50*clhs541);
        lhs(12,4)=penalty_parameter*(clhs33*clhs542 + clhs50*clhs543);
        lhs(12,5)=penalty_parameter*(clhs33*clhs544 + clhs50*clhs545);
        lhs(12,6)=penalty_parameter*(clhs33*clhs546 + clhs50*clhs547);
        lhs(12,7)=penalty_parameter*(clhs33*clhs548 + clhs50*clhs549);
        lhs(12,8)=penalty_parameter*(clhs33*clhs550 + clhs50*clhs551);
        lhs(12,9)=penalty_parameter*(clhs33*clhs552 + clhs50*clhs553);
        lhs(12,10)=penalty_parameter*(clhs33*clhs554 + clhs50*clhs555);
        lhs(12,11)=penalty_parameter*(clhs33*clhs556 + clhs50*clhs557);
        lhs(12,12)=-clhs190*clhs49 - clhs198*clhs33 - clhs199*clhs55 - clhs207*clhs50;
        lhs(12,13)=-clhs210*clhs49 - clhs218*clhs33 - clhs219*clhs55 - clhs227*clhs50;
        lhs(12,14)=-clhs230*clhs49 - clhs238*clhs33 - clhs239*clhs55 - clhs247*clhs50;
        lhs(12,15)=-clhs250*clhs49 - clhs258*clhs33 - clhs259*clhs55 - clhs267*clhs50;
        lhs(12,16)=-clhs270*clhs49 - clhs278*clhs33 - clhs279*clhs55 - clhs287*clhs50;
        lhs(12,17)=-clhs290*clhs49 - clhs298*clhs33 - clhs299*clhs55 - clhs307*clhs50;
        lhs(12,18)=-clhs310*clhs49 - clhs318*clhs33 - clhs319*clhs55 - clhs327*clhs50;
        lhs(12,19)=-clhs33*clhs338 - clhs330*clhs49 - clhs339*clhs55 - clhs347*clhs50;
        lhs(12,20)=-clhs33*clhs358 - clhs350*clhs49 - clhs359*clhs55 - clhs367*clhs50;
        lhs(12,21)=-clhs33*clhs378 - clhs370*clhs49 - clhs379*clhs55 - clhs387*clhs50;
        lhs(12,22)=-clhs33*clhs398 - clhs390*clhs49 - clhs399*clhs55 - clhs407*clhs50;
        lhs(12,23)=-clhs33*clhs418 - clhs410*clhs49 - clhs419*clhs55 - clhs427*clhs50;
        lhs(12,24)=-clhs33*clhs428;
        lhs(12,25)=-clhs429*clhs50;
        lhs(12,26)=0;
        lhs(12,27)=0;
        lhs(13,0)=penalty_parameter*(clhs33*clhs558 + clhs50*clhs559);
        lhs(13,1)=penalty_parameter*(clhs33*clhs560 + clhs50*clhs561);
        lhs(13,2)=penalty_parameter*(clhs33*clhs562 + clhs50*clhs563);
        lhs(13,3)=penalty_parameter*(clhs33*clhs564 + clhs50*clhs565);
        lhs(13,4)=penalty_parameter*(clhs33*clhs566 + clhs50*clhs567);
        lhs(13,5)=penalty_parameter*(clhs33*clhs568 + clhs50*clhs569);
        lhs(13,6)=penalty_parameter*(clhs33*clhs570 + clhs50*clhs571);
        lhs(13,7)=penalty_parameter*(clhs33*clhs572 + clhs50*clhs573);
        lhs(13,8)=penalty_parameter*(clhs33*clhs574 + clhs50*clhs575);
        lhs(13,9)=penalty_parameter*(clhs33*clhs576 + clhs50*clhs577);
        lhs(13,10)=penalty_parameter*(clhs33*clhs578 + clhs50*clhs579);
        lhs(13,11)=penalty_parameter*(clhs33*clhs580 + clhs50*clhs581);
        lhs(13,12)=-clhs190*clhs432 - clhs199*clhs433 - clhs33*clhs456 - clhs457*clhs50;
        lhs(13,13)=-clhs210*clhs432 - clhs219*clhs433 - clhs33*clhs458 - clhs459*clhs50;
        lhs(13,14)=-clhs230*clhs432 - clhs239*clhs433 - clhs33*clhs460 - clhs461*clhs50;
        lhs(13,15)=-clhs250*clhs432 - clhs259*clhs433 - clhs33*clhs462 - clhs463*clhs50;
        lhs(13,16)=-clhs270*clhs432 - clhs279*clhs433 - clhs33*clhs464 - clhs465*clhs50;
        lhs(13,17)=-clhs290*clhs432 - clhs299*clhs433 - clhs33*clhs466 - clhs467*clhs50;
        lhs(13,18)=-clhs310*clhs432 - clhs319*clhs433 - clhs33*clhs468 - clhs469*clhs50;
        lhs(13,19)=-clhs33*clhs470 - clhs330*clhs432 - clhs339*clhs433 - clhs471*clhs50;
        lhs(13,20)=-clhs33*clhs472 - clhs350*clhs432 - clhs359*clhs433 - clhs473*clhs50;
        lhs(13,21)=-clhs33*clhs474 - clhs370*clhs432 - clhs379*clhs433 - clhs475*clhs50;
        lhs(13,22)=-clhs33*clhs476 - clhs390*clhs432 - clhs399*clhs433 - clhs477*clhs50;
        lhs(13,23)=-clhs33*clhs478 - clhs410*clhs432 - clhs419*clhs433 - clhs479*clhs50;
        lhs(13,24)=-clhs33*clhs480;
        lhs(13,25)=-clhs481*clhs50;
        lhs(13,26)=0;
        lhs(13,27)=0;
        lhs(14,0)=penalty_parameter*(clhs33*clhs582 + clhs50*clhs583);
        lhs(14,1)=penalty_parameter*(clhs33*clhs584 + clhs50*clhs585);
        lhs(14,2)=penalty_parameter*(clhs33*clhs586 + clhs50*clhs587);
        lhs(14,3)=penalty_parameter*(clhs33*clhs588 + clhs50*clhs589);
        lhs(14,4)=penalty_parameter*(clhs33*clhs590 + clhs50*clhs591);
        lhs(14,5)=penalty_parameter*(clhs33*clhs592 + clhs50*clhs593);
        lhs(14,6)=penalty_parameter*(clhs33*clhs594 + clhs50*clhs595);
        lhs(14,7)=penalty_parameter*(clhs33*clhs596 + clhs50*clhs597);
        lhs(14,8)=penalty_parameter*(clhs33*clhs598 + clhs50*clhs599);
        lhs(14,9)=penalty_parameter*(clhs33*clhs600 + clhs50*clhs601);
        lhs(14,10)=penalty_parameter*(clhs33*clhs602 + clhs50*clhs603);
        lhs(14,11)=penalty_parameter*(clhs33*clhs604 + clhs50*clhs605);
        lhs(14,12)=-clhs190*clhs484 - clhs199*clhs485 - clhs33*clhs508 - clhs50*clhs509;
        lhs(14,13)=-clhs210*clhs484 - clhs219*clhs485 - clhs33*clhs510 - clhs50*clhs511;
        lhs(14,14)=-clhs230*clhs484 - clhs239*clhs485 - clhs33*clhs512 - clhs50*clhs513;
        lhs(14,15)=-clhs250*clhs484 - clhs259*clhs485 - clhs33*clhs514 - clhs50*clhs515;
        lhs(14,16)=-clhs270*clhs484 - clhs279*clhs485 - clhs33*clhs516 - clhs50*clhs517;
        lhs(14,17)=-clhs290*clhs484 - clhs299*clhs485 - clhs33*clhs518 - clhs50*clhs519;
        lhs(14,18)=-clhs310*clhs484 - clhs319*clhs485 - clhs33*clhs520 - clhs50*clhs521;
        lhs(14,19)=-clhs33*clhs522 - clhs330*clhs484 - clhs339*clhs485 - clhs50*clhs523;
        lhs(14,20)=-clhs33*clhs524 - clhs350*clhs484 - clhs359*clhs485 - clhs50*clhs525;
        lhs(14,21)=-clhs33*clhs526 - clhs370*clhs484 - clhs379*clhs485 - clhs50*clhs527;
        lhs(14,22)=-clhs33*clhs528 - clhs390*clhs484 - clhs399*clhs485 - clhs50*clhs529;
        lhs(14,23)=-clhs33*clhs530 - clhs410*clhs484 - clhs419*clhs485 - clhs50*clhs531;
        lhs(14,24)=-clhs33*clhs532;
        lhs(14,25)=-clhs50*clhs533;
        lhs(14,26)=0;
        lhs(14,27)=0;
        lhs(15,0)=penalty_parameter*(clhs35*clhs534 + clhs51*clhs535);
        lhs(15,1)=penalty_parameter*(clhs35*clhs536 + clhs51*clhs537);
        lhs(15,2)=penalty_parameter*(clhs35*clhs538 + clhs51*clhs539);
        lhs(15,3)=penalty_parameter*(clhs35*clhs540 + clhs51*clhs541);
        lhs(15,4)=penalty_parameter*(clhs35*clhs542 + clhs51*clhs543);
        lhs(15,5)=penalty_parameter*(clhs35*clhs544 + clhs51*clhs545);
        lhs(15,6)=penalty_parameter*(clhs35*clhs546 + clhs51*clhs547);
        lhs(15,7)=penalty_parameter*(clhs35*clhs548 + clhs51*clhs549);
        lhs(15,8)=penalty_parameter*(clhs35*clhs550 + clhs51*clhs551);
        lhs(15,9)=penalty_parameter*(clhs35*clhs552 + clhs51*clhs553);
        lhs(15,10)=penalty_parameter*(clhs35*clhs554 + clhs51*clhs555);
        lhs(15,11)=penalty_parameter*(clhs35*clhs556 + clhs51*clhs557);
        lhs(15,12)=-clhs191*clhs49 - clhs198*clhs35 - clhs200*clhs55 - clhs207*clhs51;
        lhs(15,13)=-clhs211*clhs49 - clhs218*clhs35 - clhs220*clhs55 - clhs227*clhs51;
        lhs(15,14)=-clhs231*clhs49 - clhs238*clhs35 - clhs240*clhs55 - clhs247*clhs51;
        lhs(15,15)=-clhs251*clhs49 - clhs258*clhs35 - clhs260*clhs55 - clhs267*clhs51;
        lhs(15,16)=-clhs271*clhs49 - clhs278*clhs35 - clhs280*clhs55 - clhs287*clhs51;
        lhs(15,17)=-clhs291*clhs49 - clhs298*clhs35 - clhs300*clhs55 - clhs307*clhs51;
        lhs(15,18)=-clhs311*clhs49 - clhs318*clhs35 - clhs320*clhs55 - clhs327*clhs51;
        lhs(15,19)=-clhs331*clhs49 - clhs338*clhs35 - clhs340*clhs55 - clhs347*clhs51;
        lhs(15,20)=-clhs35*clhs358 - clhs351*clhs49 - clhs360*clhs55 - clhs367*clhs51;
        lhs(15,21)=-clhs35*clhs378 - clhs371*clhs49 - clhs380*clhs55 - clhs387*clhs51;
        lhs(15,22)=-clhs35*clhs398 - clhs391*clhs49 - clhs400*clhs55 - clhs407*clhs51;
        lhs(15,23)=-clhs35*clhs418 - clhs411*clhs49 - clhs420*clhs55 - clhs427*clhs51;
        lhs(15,24)=-clhs35*clhs428;
        lhs(15,25)=-clhs429*clhs51;
        lhs(15,26)=0;
        lhs(15,27)=0;
        lhs(16,0)=penalty_parameter*(clhs35*clhs558 + clhs51*clhs559);
        lhs(16,1)=penalty_parameter*(clhs35*clhs560 + clhs51*clhs561);
        lhs(16,2)=penalty_parameter*(clhs35*clhs562 + clhs51*clhs563);
        lhs(16,3)=penalty_parameter*(clhs35*clhs564 + clhs51*clhs565);
        lhs(16,4)=penalty_parameter*(clhs35*clhs566 + clhs51*clhs567);
        lhs(16,5)=penalty_parameter*(clhs35*clhs568 + clhs51*clhs569);
        lhs(16,6)=penalty_parameter*(clhs35*clhs570 + clhs51*clhs571);
        lhs(16,7)=penalty_parameter*(clhs35*clhs572 + clhs51*clhs573);
        lhs(16,8)=penalty_parameter*(clhs35*clhs574 + clhs51*clhs575);
        lhs(16,9)=penalty_parameter*(clhs35*clhs576 + clhs51*clhs577);
        lhs(16,10)=penalty_parameter*(clhs35*clhs578 + clhs51*clhs579);
        lhs(16,11)=penalty_parameter*(clhs35*clhs580 + clhs51*clhs581);
        lhs(16,12)=-clhs191*clhs432 - clhs200*clhs433 - clhs35*clhs456 - clhs457*clhs51;
        lhs(16,13)=-clhs211*clhs432 - clhs220*clhs433 - clhs35*clhs458 - clhs459*clhs51;
        lhs(16,14)=-clhs231*clhs432 - clhs240*clhs433 - clhs35*clhs460 - clhs461*clhs51;
        lhs(16,15)=-clhs251*clhs432 - clhs260*clhs433 - clhs35*clhs462 - clhs463*clhs51;
        lhs(16,16)=-clhs271*clhs432 - clhs280*clhs433 - clhs35*clhs464 - clhs465*clhs51;
        lhs(16,17)=-clhs291*clhs432 - clhs300*clhs433 - clhs35*clhs466 - clhs467*clhs51;
        lhs(16,18)=-clhs311*clhs432 - clhs320*clhs433 - clhs35*clhs468 - clhs469*clhs51;
        lhs(16,19)=-clhs331*clhs432 - clhs340*clhs433 - clhs35*clhs470 - clhs471*clhs51;
        lhs(16,20)=-clhs35*clhs472 - clhs351*clhs432 - clhs360*clhs433 - clhs473*clhs51;
        lhs(16,21)=-clhs35*clhs474 - clhs371*clhs432 - clhs380*clhs433 - clhs475*clhs51;
        lhs(16,22)=-clhs35*clhs476 - clhs391*clhs432 - clhs400*clhs433 - clhs477*clhs51;
        lhs(16,23)=-clhs35*clhs478 - clhs411*clhs432 - clhs420*clhs433 - clhs479*clhs51;
        lhs(16,24)=-clhs35*clhs480;
        lhs(16,25)=-clhs481*clhs51;
        lhs(16,26)=0;
        lhs(16,27)=0;
        lhs(17,0)=penalty_parameter*(clhs35*clhs582 + clhs51*clhs583);
        lhs(17,1)=penalty_parameter*(clhs35*clhs584 + clhs51*clhs585);
        lhs(17,2)=penalty_parameter*(clhs35*clhs586 + clhs51*clhs587);
        lhs(17,3)=penalty_parameter*(clhs35*clhs588 + clhs51*clhs589);
        lhs(17,4)=penalty_parameter*(clhs35*clhs590 + clhs51*clhs591);
        lhs(17,5)=penalty_parameter*(clhs35*clhs592 + clhs51*clhs593);
        lhs(17,6)=penalty_parameter*(clhs35*clhs594 + clhs51*clhs595);
        lhs(17,7)=penalty_parameter*(clhs35*clhs596 + clhs51*clhs597);
        lhs(17,8)=penalty_parameter*(clhs35*clhs598 + clhs51*clhs599);
        lhs(17,9)=penalty_parameter*(clhs35*clhs600 + clhs51*clhs601);
        lhs(17,10)=penalty_parameter*(clhs35*clhs602 + clhs51*clhs603);
        lhs(17,11)=penalty_parameter*(clhs35*clhs604 + clhs51*clhs605);
        lhs(17,12)=-clhs191*clhs484 - clhs200*clhs485 - clhs35*clhs508 - clhs509*clhs51;
        lhs(17,13)=-clhs211*clhs484 - clhs220*clhs485 - clhs35*clhs510 - clhs51*clhs511;
        lhs(17,14)=-clhs231*clhs484 - clhs240*clhs485 - clhs35*clhs512 - clhs51*clhs513;
        lhs(17,15)=-clhs251*clhs484 - clhs260*clhs485 - clhs35*clhs514 - clhs51*clhs515;
        lhs(17,16)=-clhs271*clhs484 - clhs280*clhs485 - clhs35*clhs516 - clhs51*clhs517;
        lhs(17,17)=-clhs291*clhs484 - clhs300*clhs485 - clhs35*clhs518 - clhs51*clhs519;
        lhs(17,18)=-clhs311*clhs484 - clhs320*clhs485 - clhs35*clhs520 - clhs51*clhs521;
        lhs(17,19)=-clhs331*clhs484 - clhs340*clhs485 - clhs35*clhs522 - clhs51*clhs523;
        lhs(17,20)=-clhs35*clhs524 - clhs351*clhs484 - clhs360*clhs485 - clhs51*clhs525;
        lhs(17,21)=-clhs35*clhs526 - clhs371*clhs484 - clhs380*clhs485 - clhs51*clhs527;
        lhs(17,22)=-clhs35*clhs528 - clhs391*clhs484 - clhs400*clhs485 - clhs51*clhs529;
        lhs(17,23)=-clhs35*clhs530 - clhs411*clhs484 - clhs420*clhs485 - clhs51*clhs531;
        lhs(17,24)=-clhs35*clhs532;
        lhs(17,25)=-clhs51*clhs533;
        lhs(17,26)=0;
        lhs(17,27)=0;
        lhs(18,0)=penalty_parameter*(clhs37*clhs534 + clhs52*clhs535);
        lhs(18,1)=penalty_parameter*(clhs37*clhs536 + clhs52*clhs537);
        lhs(18,2)=penalty_parameter*(clhs37*clhs538 + clhs52*clhs539);
        lhs(18,3)=penalty_parameter*(clhs37*clhs540 + clhs52*clhs541);
        lhs(18,4)=penalty_parameter*(clhs37*clhs542 + clhs52*clhs543);
        lhs(18,5)=penalty_parameter*(clhs37*clhs544 + clhs52*clhs545);
        lhs(18,6)=penalty_parameter*(clhs37*clhs546 + clhs52*clhs547);
        lhs(18,7)=penalty_parameter*(clhs37*clhs548 + clhs52*clhs549);
        lhs(18,8)=penalty_parameter*(clhs37*clhs550 + clhs52*clhs551);
        lhs(18,9)=penalty_parameter*(clhs37*clhs552 + clhs52*clhs553);
        lhs(18,10)=penalty_parameter*(clhs37*clhs554 + clhs52*clhs555);
        lhs(18,11)=penalty_parameter*(clhs37*clhs556 + clhs52*clhs557);
        lhs(18,12)=-clhs192*clhs49 - clhs198*clhs37 - clhs201*clhs55 - clhs207*clhs52;
        lhs(18,13)=-clhs212*clhs49 - clhs218*clhs37 - clhs221*clhs55 - clhs227*clhs52;
        lhs(18,14)=-clhs232*clhs49 - clhs238*clhs37 - clhs241*clhs55 - clhs247*clhs52;
        lhs(18,15)=-clhs252*clhs49 - clhs258*clhs37 - clhs261*clhs55 - clhs267*clhs52;
        lhs(18,16)=-clhs272*clhs49 - clhs278*clhs37 - clhs281*clhs55 - clhs287*clhs52;
        lhs(18,17)=-clhs292*clhs49 - clhs298*clhs37 - clhs301*clhs55 - clhs307*clhs52;
        lhs(18,18)=-clhs312*clhs49 - clhs318*clhs37 - clhs321*clhs55 - clhs327*clhs52;
        lhs(18,19)=-clhs332*clhs49 - clhs338*clhs37 - clhs341*clhs55 - clhs347*clhs52;
        lhs(18,20)=-clhs352*clhs49 - clhs358*clhs37 - clhs361*clhs55 - clhs367*clhs52;
        lhs(18,21)=-clhs37*clhs378 - clhs372*clhs49 - clhs381*clhs55 - clhs387*clhs52;
        lhs(18,22)=-clhs37*clhs398 - clhs392*clhs49 - clhs401*clhs55 - clhs407*clhs52;
        lhs(18,23)=-clhs37*clhs418 - clhs412*clhs49 - clhs421*clhs55 - clhs427*clhs52;
        lhs(18,24)=-clhs37*clhs428;
        lhs(18,25)=-clhs429*clhs52;
        lhs(18,26)=0;
        lhs(18,27)=0;
        lhs(19,0)=penalty_parameter*(clhs37*clhs558 + clhs52*clhs559);
        lhs(19,1)=penalty_parameter*(clhs37*clhs560 + clhs52*clhs561);
        lhs(19,2)=penalty_parameter*(clhs37*clhs562 + clhs52*clhs563);
        lhs(19,3)=penalty_parameter*(clhs37*clhs564 + clhs52*clhs565);
        lhs(19,4)=penalty_parameter*(clhs37*clhs566 + clhs52*clhs567);
        lhs(19,5)=penalty_parameter*(clhs37*clhs568 + clhs52*clhs569);
        lhs(19,6)=penalty_parameter*(clhs37*clhs570 + clhs52*clhs571);
        lhs(19,7)=penalty_parameter*(clhs37*clhs572 + clhs52*clhs573);
        lhs(19,8)=penalty_parameter*(clhs37*clhs574 + clhs52*clhs575);
        lhs(19,9)=penalty_parameter*(clhs37*clhs576 + clhs52*clhs577);
        lhs(19,10)=penalty_parameter*(clhs37*clhs578 + clhs52*clhs579);
        lhs(19,11)=penalty_parameter*(clhs37*clhs580 + clhs52*clhs581);
        lhs(19,12)=-clhs192*clhs432 - clhs201*clhs433 - clhs37*clhs456 - clhs457*clhs52;
        lhs(19,13)=-clhs212*clhs432 - clhs221*clhs433 - clhs37*clhs458 - clhs459*clhs52;
        lhs(19,14)=-clhs232*clhs432 - clhs241*clhs433 - clhs37*clhs460 - clhs461*clhs52;
        lhs(19,15)=-clhs252*clhs432 - clhs261*clhs433 - clhs37*clhs462 - clhs463*clhs52;
        lhs(19,16)=-clhs272*clhs432 - clhs281*clhs433 - clhs37*clhs464 - clhs465*clhs52;
        lhs(19,17)=-clhs292*clhs432 - clhs301*clhs433 - clhs37*clhs466 - clhs467*clhs52;
        lhs(19,18)=-clhs312*clhs432 - clhs321*clhs433 - clhs37*clhs468 - clhs469*clhs52;
        lhs(19,19)=-clhs332*clhs432 - clhs341*clhs433 - clhs37*clhs470 - clhs471*clhs52;
        lhs(19,20)=-clhs352*clhs432 - clhs361*clhs433 - clhs37*clhs472 - clhs473*clhs52;
        lhs(19,21)=-clhs37*clhs474 - clhs372*clhs432 - clhs381*clhs433 - clhs475*clhs52;
        lhs(19,22)=-clhs37*clhs476 - clhs392*clhs432 - clhs401*clhs433 - clhs477*clhs52;
        lhs(19,23)=-clhs37*clhs478 - clhs412*clhs432 - clhs421*clhs433 - clhs479*clhs52;
        lhs(19,24)=-clhs37*clhs480;
        lhs(19,25)=-clhs481*clhs52;
        lhs(19,26)=0;
        lhs(19,27)=0;
        lhs(20,0)=penalty_parameter*(clhs37*clhs582 + clhs52*clhs583);
        lhs(20,1)=penalty_parameter*(clhs37*clhs584 + clhs52*clhs585);
        lhs(20,2)=penalty_parameter*(clhs37*clhs586 + clhs52*clhs587);
        lhs(20,3)=penalty_parameter*(clhs37*clhs588 + clhs52*clhs589);
        lhs(20,4)=penalty_parameter*(clhs37*clhs590 + clhs52*clhs591);
        lhs(20,5)=penalty_parameter*(clhs37*clhs592 + clhs52*clhs593);
        lhs(20,6)=penalty_parameter*(clhs37*clhs594 + clhs52*clhs595);
        lhs(20,7)=penalty_parameter*(clhs37*clhs596 + clhs52*clhs597);
        lhs(20,8)=penalty_parameter*(clhs37*clhs598 + clhs52*clhs599);
        lhs(20,9)=penalty_parameter*(clhs37*clhs600 + clhs52*clhs601);
        lhs(20,10)=penalty_parameter*(clhs37*clhs602 + clhs52*clhs603);
        lhs(20,11)=penalty_parameter*(clhs37*clhs604 + clhs52*clhs605);
        lhs(20,12)=-clhs192*clhs484 - clhs201*clhs485 - clhs37*clhs508 - clhs509*clhs52;
        lhs(20,13)=-clhs212*clhs484 - clhs221*clhs485 - clhs37*clhs510 - clhs511*clhs52;
        lhs(20,14)=-clhs232*clhs484 - clhs241*clhs485 - clhs37*clhs512 - clhs513*clhs52;
        lhs(20,15)=-clhs252*clhs484 - clhs261*clhs485 - clhs37*clhs514 - clhs515*clhs52;
        lhs(20,16)=-clhs272*clhs484 - clhs281*clhs485 - clhs37*clhs516 - clhs517*clhs52;
        lhs(20,17)=-clhs292*clhs484 - clhs301*clhs485 - clhs37*clhs518 - clhs519*clhs52;
        lhs(20,18)=-clhs312*clhs484 - clhs321*clhs485 - clhs37*clhs520 - clhs52*clhs521;
        lhs(20,19)=-clhs332*clhs484 - clhs341*clhs485 - clhs37*clhs522 - clhs52*clhs523;
        lhs(20,20)=-clhs352*clhs484 - clhs361*clhs485 - clhs37*clhs524 - clhs52*clhs525;
        lhs(20,21)=-clhs37*clhs526 - clhs372*clhs484 - clhs381*clhs485 - clhs52*clhs527;
        lhs(20,22)=-clhs37*clhs528 - clhs392*clhs484 - clhs401*clhs485 - clhs52*clhs529;
        lhs(20,23)=-clhs37*clhs530 - clhs412*clhs484 - clhs421*clhs485 - clhs52*clhs531;
        lhs(20,24)=-clhs37*clhs532;
        lhs(20,25)=-clhs52*clhs533;
        lhs(20,26)=0;
        lhs(20,27)=0;
        lhs(21,0)=penalty_parameter*(clhs39*clhs534 + clhs53*clhs535);
        lhs(21,1)=penalty_parameter*(clhs39*clhs536 + clhs53*clhs537);
        lhs(21,2)=penalty_parameter*(clhs39*clhs538 + clhs53*clhs539);
        lhs(21,3)=penalty_parameter*(clhs39*clhs540 + clhs53*clhs541);
        lhs(21,4)=penalty_parameter*(clhs39*clhs542 + clhs53*clhs543);
        lhs(21,5)=penalty_parameter*(clhs39*clhs544 + clhs53*clhs545);
        lhs(21,6)=penalty_parameter*(clhs39*clhs546 + clhs53*clhs547);
        lhs(21,7)=penalty_parameter*(clhs39*clhs548 + clhs53*clhs549);
        lhs(21,8)=penalty_parameter*(clhs39*clhs550 + clhs53*clhs551);
        lhs(21,9)=penalty_parameter*(clhs39*clhs552 + clhs53*clhs553);
        lhs(21,10)=penalty_parameter*(clhs39*clhs554 + clhs53*clhs555);
        lhs(21,11)=penalty_parameter*(clhs39*clhs556 + clhs53*clhs557);
        lhs(21,12)=-clhs193*clhs49 - clhs198*clhs39 - clhs202*clhs55 - clhs207*clhs53;
        lhs(21,13)=-clhs213*clhs49 - clhs218*clhs39 - clhs222*clhs55 - clhs227*clhs53;
        lhs(21,14)=-clhs233*clhs49 - clhs238*clhs39 - clhs242*clhs55 - clhs247*clhs53;
        lhs(21,15)=-clhs253*clhs49 - clhs258*clhs39 - clhs262*clhs55 - clhs267*clhs53;
        lhs(21,16)=-clhs273*clhs49 - clhs278*clhs39 - clhs282*clhs55 - clhs287*clhs53;
        lhs(21,17)=-clhs293*clhs49 - clhs298*clhs39 - clhs302*clhs55 - clhs307*clhs53;
        lhs(21,18)=-clhs313*clhs49 - clhs318*clhs39 - clhs322*clhs55 - clhs327*clhs53;
        lhs(21,19)=-clhs333*clhs49 - clhs338*clhs39 - clhs342*clhs55 - clhs347*clhs53;
        lhs(21,20)=-clhs353*clhs49 - clhs358*clhs39 - clhs362*clhs55 - clhs367*clhs53;
        lhs(21,21)=-clhs373*clhs49 - clhs378*clhs39 - clhs382*clhs55 - clhs387*clhs53;
        lhs(21,22)=-clhs39*clhs398 - clhs393*clhs49 - clhs402*clhs55 - clhs407*clhs53;
        lhs(21,23)=-clhs39*clhs418 - clhs413*clhs49 - clhs422*clhs55 - clhs427*clhs53;
        lhs(21,24)=-clhs39*clhs428;
        lhs(21,25)=-clhs429*clhs53;
        lhs(21,26)=0;
        lhs(21,27)=0;
        lhs(22,0)=penalty_parameter*(clhs39*clhs558 + clhs53*clhs559);
        lhs(22,1)=penalty_parameter*(clhs39*clhs560 + clhs53*clhs561);
        lhs(22,2)=penalty_parameter*(clhs39*clhs562 + clhs53*clhs563);
        lhs(22,3)=penalty_parameter*(clhs39*clhs564 + clhs53*clhs565);
        lhs(22,4)=penalty_parameter*(clhs39*clhs566 + clhs53*clhs567);
        lhs(22,5)=penalty_parameter*(clhs39*clhs568 + clhs53*clhs569);
        lhs(22,6)=penalty_parameter*(clhs39*clhs570 + clhs53*clhs571);
        lhs(22,7)=penalty_parameter*(clhs39*clhs572 + clhs53*clhs573);
        lhs(22,8)=penalty_parameter*(clhs39*clhs574 + clhs53*clhs575);
        lhs(22,9)=penalty_parameter*(clhs39*clhs576 + clhs53*clhs577);
        lhs(22,10)=penalty_parameter*(clhs39*clhs578 + clhs53*clhs579);
        lhs(22,11)=penalty_parameter*(clhs39*clhs580 + clhs53*clhs581);
        lhs(22,12)=-clhs193*clhs432 - clhs202*clhs433 - clhs39*clhs456 - clhs457*clhs53;
        lhs(22,13)=-clhs213*clhs432 - clhs222*clhs433 - clhs39*clhs458 - clhs459*clhs53;
        lhs(22,14)=-clhs233*clhs432 - clhs242*clhs433 - clhs39*clhs460 - clhs461*clhs53;
        lhs(22,15)=-clhs253*clhs432 - clhs262*clhs433 - clhs39*clhs462 - clhs463*clhs53;
        lhs(22,16)=-clhs273*clhs432 - clhs282*clhs433 - clhs39*clhs464 - clhs465*clhs53;
        lhs(22,17)=-clhs293*clhs432 - clhs302*clhs433 - clhs39*clhs466 - clhs467*clhs53;
        lhs(22,18)=-clhs313*clhs432 - clhs322*clhs433 - clhs39*clhs468 - clhs469*clhs53;
        lhs(22,19)=-clhs333*clhs432 - clhs342*clhs433 - clhs39*clhs470 - clhs471*clhs53;
        lhs(22,20)=-clhs353*clhs432 - clhs362*clhs433 - clhs39*clhs472 - clhs473*clhs53;
        lhs(22,21)=-clhs373*clhs432 - clhs382*clhs433 - clhs39*clhs474 - clhs475*clhs53;
        lhs(22,22)=-clhs39*clhs476 - clhs393*clhs432 - clhs402*clhs433 - clhs477*clhs53;
        lhs(22,23)=-clhs39*clhs478 - clhs413*clhs432 - clhs422*clhs433 - clhs479*clhs53;
        lhs(22,24)=-clhs39*clhs480;
        lhs(22,25)=-clhs481*clhs53;
        lhs(22,26)=0;
        lhs(22,27)=0;
        lhs(23,0)=penalty_parameter*(clhs39*clhs582 + clhs53*clhs583);
        lhs(23,1)=penalty_parameter*(clhs39*clhs584 + clhs53*clhs585);
        lhs(23,2)=penalty_parameter*(clhs39*clhs586 + clhs53*clhs587);
        lhs(23,3)=penalty_parameter*(clhs39*clhs588 + clhs53*clhs589);
        lhs(23,4)=penalty_parameter*(clhs39*clhs590 + clhs53*clhs591);
        lhs(23,5)=penalty_parameter*(clhs39*clhs592 + clhs53*clhs593);
        lhs(23,6)=penalty_parameter*(clhs39*clhs594 + clhs53*clhs595);
        lhs(23,7)=penalty_parameter*(clhs39*clhs596 + clhs53*clhs597);
        lhs(23,8)=penalty_parameter*(clhs39*clhs598 + clhs53*clhs599);
        lhs(23,9)=penalty_parameter*(clhs39*clhs600 + clhs53*clhs601);
        lhs(23,10)=penalty_parameter*(clhs39*clhs602 + clhs53*clhs603);
        lhs(23,11)=penalty_parameter*(clhs39*clhs604 + clhs53*clhs605);
        lhs(23,12)=-clhs193*clhs484 - clhs202*clhs485 - clhs39*clhs508 - clhs509*clhs53;
        lhs(23,13)=-clhs213*clhs484 - clhs222*clhs485 - clhs39*clhs510 - clhs511*clhs53;
        lhs(23,14)=-clhs233*clhs484 - clhs242*clhs485 - clhs39*clhs512 - clhs513*clhs53;
        lhs(23,15)=-clhs253*clhs484 - clhs262*clhs485 - clhs39*clhs514 - clhs515*clhs53;
        lhs(23,16)=-clhs273*clhs484 - clhs282*clhs485 - clhs39*clhs516 - clhs517*clhs53;
        lhs(23,17)=-clhs293*clhs484 - clhs302*clhs485 - clhs39*clhs518 - clhs519*clhs53;
        lhs(23,18)=-clhs313*clhs484 - clhs322*clhs485 - clhs39*clhs520 - clhs521*clhs53;
        lhs(23,19)=-clhs333*clhs484 - clhs342*clhs485 - clhs39*clhs522 - clhs523*clhs53;
        lhs(23,20)=-clhs353*clhs484 - clhs362*clhs485 - clhs39*clhs524 - clhs525*clhs53;
        lhs(23,21)=-clhs373*clhs484 - clhs382*clhs485 - clhs39*clhs526 - clhs527*clhs53;
        lhs(23,22)=-clhs39*clhs528 - clhs393*clhs484 - clhs402*clhs485 - clhs529*clhs53;
        lhs(23,23)=-clhs39*clhs530 - clhs413*clhs484 - clhs422*clhs485 - clhs53*clhs531;
        lhs(23,24)=-clhs39*clhs532;
        lhs(23,25)=-clhs53*clhs533;
        lhs(23,26)=0;
        lhs(23,27)=0;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs60*scale_factor;
        lhs(24,2)=clhs72*scale_factor;
        lhs(24,3)=clhs84*scale_factor;
        lhs(24,4)=clhs96*scale_factor;
        lhs(24,5)=clhs108*scale_factor;
        lhs(24,6)=clhs120*scale_factor;
        lhs(24,7)=clhs132*scale_factor;
        lhs(24,8)=clhs144*scale_factor;
        lhs(24,9)=clhs156*scale_factor;
        lhs(24,10)=clhs168*scale_factor;
        lhs(24,11)=clhs180*scale_factor;
        lhs(24,12)=-clhs197*scale_factor;
        lhs(24,13)=-clhs217*scale_factor;
        lhs(24,14)=-clhs237*scale_factor;
        lhs(24,15)=-clhs257*scale_factor;
        lhs(24,16)=-clhs277*scale_factor;
        lhs(24,17)=-clhs297*scale_factor;
        lhs(24,18)=-clhs317*scale_factor;
        lhs(24,19)=-clhs337*scale_factor;
        lhs(24,20)=-clhs357*scale_factor;
        lhs(24,21)=-clhs377*scale_factor;
        lhs(24,22)=-clhs397*scale_factor;
        lhs(24,23)=-clhs417*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs30*scale_factor;
        lhs(25,1)=clhs66*scale_factor;
        lhs(25,2)=clhs78*scale_factor;
        lhs(25,3)=clhs90*scale_factor;
        lhs(25,4)=clhs102*scale_factor;
        lhs(25,5)=clhs114*scale_factor;
        lhs(25,6)=clhs126*scale_factor;
        lhs(25,7)=clhs138*scale_factor;
        lhs(25,8)=clhs150*scale_factor;
        lhs(25,9)=clhs162*scale_factor;
        lhs(25,10)=clhs174*scale_factor;
        lhs(25,11)=clhs186*scale_factor;
        lhs(25,12)=-clhs206*scale_factor;
        lhs(25,13)=-clhs226*scale_factor;
        lhs(25,14)=-clhs246*scale_factor;
        lhs(25,15)=-clhs266*scale_factor;
        lhs(25,16)=-clhs286*scale_factor;
        lhs(25,17)=-clhs306*scale_factor;
        lhs(25,18)=-clhs326*scale_factor;
        lhs(25,19)=-clhs346*scale_factor;
        lhs(25,20)=-clhs366*scale_factor;
        lhs(25,21)=-clhs386*scale_factor;
        lhs(25,22)=-clhs406*scale_factor;
        lhs(25,23)=-clhs426*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=clhs606;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=clhs606;
    }
    else if (rActiveInactive == 11 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(1,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(1,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(1,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(1,0)*penalty_parameter;
        const double clhs32 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs33 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs34 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs35 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs36 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs37 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs38 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs39 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs40 =     normalslave(3,0)*(clhs16*clhs33 + clhs17*clhs35 + clhs18*clhs37 + clhs19*clhs39 + clhs32) + normalslave(3,1)*(clhs1*clhs33 + clhs3*clhs35 + clhs37*clhs6 + clhs39*clhs9) + normalslave(3,2)*(clhs12*clhs33 + clhs13*clhs35 + clhs14*clhs37 + clhs15*clhs39);
        const double clhs41 =     clhs40*normalslave(3,0)*penalty_parameter;
        const double clhs42 =     X1(0,0) + u1(0,0);
        const double clhs43 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs44 =     X1(1,0) + u1(1,0);
        const double clhs45 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs46 =     X1(2,0) + u1(2,0);
        const double clhs47 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs48 =     X1(3,0) + u1(3,0);
        const double clhs49 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs50 =     X1(0,1) + u1(0,1);
        const double clhs51 =     X1(1,1) + u1(1,1);
        const double clhs52 =     X1(2,1) + u1(2,1);
        const double clhs53 =     X1(3,1) + u1(3,1);
        const double clhs54 =     X1(0,2) + u1(0,2);
        const double clhs55 =     X1(1,2) + u1(1,2);
        const double clhs56 =     X1(2,2) + u1(2,2);
        const double clhs57 =     X1(3,2) + u1(3,2);
        const double clhs58 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs42*clhs43 + clhs44*clhs45 + clhs46*clhs47 + clhs48*clhs49) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs43*clhs50 + clhs45*clhs51 + clhs47*clhs52 + clhs49*clhs53 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs43*clhs54 + clhs45*clhs55 + clhs47*clhs56 + clhs49*clhs57));
        const double clhs59 =     clhs58*normalslave(0,0);
        const double clhs60 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs61 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs62 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs63 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs64 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs42*clhs60 + clhs44*clhs61 + clhs46*clhs62 + clhs48*clhs63) + normalslave(1,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs50*clhs60 + clhs51*clhs61 + clhs52*clhs62 + clhs53*clhs63) + normalslave(1,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs54*clhs60 + clhs55*clhs61 + clhs56*clhs62 + clhs57*clhs63));
        const double clhs65 =     clhs64*normalslave(1,0);
        const double clhs66 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs67 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs68 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs69 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs70 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs32 - clhs17*clhs34 - clhs18*clhs36 - clhs19*clhs38 + clhs42*clhs66 + clhs44*clhs67 + clhs46*clhs68 + clhs48*clhs69) + normalslave(3,1)*(-clhs1*clhs32 - clhs3*clhs34 - clhs36*clhs6 - clhs38*clhs9 + clhs50*clhs66 + clhs51*clhs67 + clhs52*clhs68 + clhs53*clhs69) + normalslave(3,2)*(-clhs12*clhs32 - clhs13*clhs34 - clhs14*clhs36 - clhs15*clhs38 + clhs54*clhs66 + clhs55*clhs67 + clhs56*clhs68 + clhs57*clhs69));
        const double clhs71 =     clhs70*normalslave(3,0);
        const double clhs72 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs73 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs74 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs75 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs76 =     normalslave(0,0)*(clhs16*clhs72 + clhs17*clhs73 + clhs18*clhs74 + clhs19*clhs75) + normalslave(0,1)*(clhs0 + clhs1*clhs72 + clhs3*clhs73 + clhs6*clhs74 + clhs75*clhs9) + normalslave(0,2)*(clhs12*clhs72 + clhs13*clhs73 + clhs14*clhs74 + clhs15*clhs75);
        const double clhs77 =     clhs76*normalslave(0,0)*penalty_parameter;
        const double clhs78 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs79 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs80 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs81 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs82 =     normalslave(1,0)*(clhs16*clhs78 + clhs17*clhs79 + clhs18*clhs80 + clhs19*clhs81) + normalslave(1,1)*(clhs1*clhs78 + clhs22 + clhs3*clhs79 + clhs6*clhs80 + clhs81*clhs9) + normalslave(1,2)*(clhs12*clhs78 + clhs13*clhs79 + clhs14*clhs80 + clhs15*clhs81);
        const double clhs83 =     clhs82*normalslave(1,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs85 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs86 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs87 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs88 =     normalslave(3,0)*(clhs16*clhs84 + clhs17*clhs85 + clhs18*clhs86 + clhs19*clhs87) + normalslave(3,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs32 + clhs6*clhs86 + clhs87*clhs9) + normalslave(3,2)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86 + clhs15*clhs87);
        const double clhs89 =     clhs88*normalslave(3,0)*penalty_parameter;
        const double clhs90 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs91 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs92 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs93 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs94 =     normalslave(0,0)*(clhs16*clhs90 + clhs17*clhs91 + clhs18*clhs92 + clhs19*clhs93) + normalslave(0,1)*(clhs1*clhs90 + clhs3*clhs91 + clhs6*clhs92 + clhs9*clhs93) + normalslave(0,2)*(clhs0 + clhs12*clhs90 + clhs13*clhs91 + clhs14*clhs92 + clhs15*clhs93);
        const double clhs95 =     clhs94*normalslave(0,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs97 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs98 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs99 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs100 =     normalslave(1,0)*(clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(1,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(1,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99 + clhs22);
        const double clhs101 =     clhs100*normalslave(1,0)*penalty_parameter;
        const double clhs102 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs103 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs104 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs105 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs106 =     normalslave(3,0)*(clhs102*clhs16 + clhs103*clhs17 + clhs104*clhs18 + clhs105*clhs19) + normalslave(3,1)*(clhs1*clhs102 + clhs103*clhs3 + clhs104*clhs6 + clhs105*clhs9) + normalslave(3,2)*(clhs102*clhs12 + clhs103*clhs13 + clhs104*clhs14 + clhs105*clhs15 + clhs32);
        const double clhs107 =     clhs106*normalslave(3,0)*penalty_parameter;
        const double clhs108 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs109 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs110 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs111 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs112 =     normalslave(0,0)*(clhs108*clhs16 + clhs109*clhs17 + clhs110*clhs18 + clhs111*clhs19 + clhs4) + normalslave(0,1)*(clhs1*clhs108 + clhs109*clhs3 + clhs110*clhs6 + clhs111*clhs9) + normalslave(0,2)*(clhs108*clhs12 + clhs109*clhs13 + clhs110*clhs14 + clhs111*clhs15);
        const double clhs113 =     clhs112*normalslave(0,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs115 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs116 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs117 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs118 =     normalslave(1,0)*(clhs114*clhs16 + clhs115*clhs17 + clhs116*clhs18 + clhs117*clhs19 + clhs24) + normalslave(1,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6 + clhs117*clhs9) + normalslave(1,2)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14 + clhs117*clhs15);
        const double clhs119 =     clhs118*normalslave(1,0)*penalty_parameter;
        const double clhs120 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs121 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs122 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs123 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs124 =     normalslave(3,0)*(clhs120*clhs16 + clhs121*clhs17 + clhs122*clhs18 + clhs123*clhs19 + clhs34) + normalslave(3,1)*(clhs1*clhs120 + clhs121*clhs3 + clhs122*clhs6 + clhs123*clhs9) + normalslave(3,2)*(clhs12*clhs120 + clhs121*clhs13 + clhs122*clhs14 + clhs123*clhs15);
        const double clhs125 =     clhs124*normalslave(3,0)*penalty_parameter;
        const double clhs126 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs127 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs128 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs129 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs130 =     normalslave(0,0)*(clhs126*clhs16 + clhs127*clhs17 + clhs128*clhs18 + clhs129*clhs19) + normalslave(0,1)*(clhs1*clhs126 + clhs127*clhs3 + clhs128*clhs6 + clhs129*clhs9 + clhs4) + normalslave(0,2)*(clhs12*clhs126 + clhs127*clhs13 + clhs128*clhs14 + clhs129*clhs15);
        const double clhs131 =     clhs130*normalslave(0,0)*penalty_parameter;
        const double clhs132 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs133 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs134 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs135 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs136 =     normalslave(1,0)*(clhs132*clhs16 + clhs133*clhs17 + clhs134*clhs18 + clhs135*clhs19) + normalslave(1,1)*(clhs1*clhs132 + clhs133*clhs3 + clhs134*clhs6 + clhs135*clhs9 + clhs24) + normalslave(1,2)*(clhs12*clhs132 + clhs13*clhs133 + clhs134*clhs14 + clhs135*clhs15);
        const double clhs137 =     clhs136*normalslave(1,0)*penalty_parameter;
        const double clhs138 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs139 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs140 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs141 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs142 =     normalslave(3,0)*(clhs138*clhs16 + clhs139*clhs17 + clhs140*clhs18 + clhs141*clhs19) + normalslave(3,1)*(clhs1*clhs138 + clhs139*clhs3 + clhs140*clhs6 + clhs141*clhs9 + clhs34) + normalslave(3,2)*(clhs12*clhs138 + clhs13*clhs139 + clhs14*clhs140 + clhs141*clhs15);
        const double clhs143 =     clhs142*normalslave(3,0)*penalty_parameter;
        const double clhs144 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs145 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs146 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs147 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs148 =     normalslave(0,0)*(clhs144*clhs16 + clhs145*clhs17 + clhs146*clhs18 + clhs147*clhs19) + normalslave(0,1)*(clhs1*clhs144 + clhs145*clhs3 + clhs146*clhs6 + clhs147*clhs9) + normalslave(0,2)*(clhs12*clhs144 + clhs13*clhs145 + clhs14*clhs146 + clhs147*clhs15 + clhs4);
        const double clhs149 =     clhs148*normalslave(0,0)*penalty_parameter;
        const double clhs150 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs151 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs152 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs153 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs154 =     normalslave(1,0)*(clhs150*clhs16 + clhs151*clhs17 + clhs152*clhs18 + clhs153*clhs19) + normalslave(1,1)*(clhs1*clhs150 + clhs151*clhs3 + clhs152*clhs6 + clhs153*clhs9) + normalslave(1,2)*(clhs12*clhs150 + clhs13*clhs151 + clhs14*clhs152 + clhs15*clhs153 + clhs24);
        const double clhs155 =     clhs154*normalslave(1,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs157 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs158 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs159 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs160 =     normalslave(3,0)*(clhs156*clhs16 + clhs157*clhs17 + clhs158*clhs18 + clhs159*clhs19) + normalslave(3,1)*(clhs1*clhs156 + clhs157*clhs3 + clhs158*clhs6 + clhs159*clhs9) + normalslave(3,2)*(clhs12*clhs156 + clhs13*clhs157 + clhs14*clhs158 + clhs15*clhs159 + clhs34);
        const double clhs161 =     clhs160*normalslave(3,0)*penalty_parameter;
        const double clhs162 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs163 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs164 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs165 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs166 =     normalslave(0,0)*(clhs16*clhs162 + clhs163*clhs17 + clhs164*clhs18 + clhs165*clhs19 + clhs7) + normalslave(0,1)*(clhs1*clhs162 + clhs163*clhs3 + clhs164*clhs6 + clhs165*clhs9) + normalslave(0,2)*(clhs12*clhs162 + clhs13*clhs163 + clhs14*clhs164 + clhs15*clhs165);
        const double clhs167 =     clhs166*normalslave(0,0)*penalty_parameter;
        const double clhs168 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs169 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs170 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs171 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs172 =     normalslave(1,0)*(clhs16*clhs168 + clhs169*clhs17 + clhs170*clhs18 + clhs171*clhs19 + clhs26) + normalslave(1,1)*(clhs1*clhs168 + clhs169*clhs3 + clhs170*clhs6 + clhs171*clhs9) + normalslave(1,2)*(clhs12*clhs168 + clhs13*clhs169 + clhs14*clhs170 + clhs15*clhs171);
        const double clhs173 =     clhs172*normalslave(1,0)*penalty_parameter;
        const double clhs174 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs175 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs176 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs177 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs178 =     normalslave(3,0)*(clhs16*clhs174 + clhs17*clhs175 + clhs176*clhs18 + clhs177*clhs19 + clhs36) + normalslave(3,1)*(clhs1*clhs174 + clhs175*clhs3 + clhs176*clhs6 + clhs177*clhs9) + normalslave(3,2)*(clhs12*clhs174 + clhs13*clhs175 + clhs14*clhs176 + clhs15*clhs177);
        const double clhs179 =     clhs178*normalslave(3,0)*penalty_parameter;
        const double clhs180 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs181 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs182 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs183 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs184 =     normalslave(0,0)*(clhs16*clhs180 + clhs17*clhs181 + clhs18*clhs182 + clhs183*clhs19) + normalslave(0,1)*(clhs1*clhs180 + clhs181*clhs3 + clhs182*clhs6 + clhs183*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs180 + clhs13*clhs181 + clhs14*clhs182 + clhs15*clhs183);
        const double clhs185 =     clhs184*normalslave(0,0)*penalty_parameter;
        const double clhs186 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs187 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs188 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs189 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs190 =     normalslave(1,0)*(clhs16*clhs186 + clhs17*clhs187 + clhs18*clhs188 + clhs189*clhs19) + normalslave(1,1)*(clhs1*clhs186 + clhs187*clhs3 + clhs188*clhs6 + clhs189*clhs9 + clhs26) + normalslave(1,2)*(clhs12*clhs186 + clhs13*clhs187 + clhs14*clhs188 + clhs15*clhs189);
        const double clhs191 =     clhs190*normalslave(1,0)*penalty_parameter;
        const double clhs192 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs193 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs194 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs195 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs196 =     normalslave(3,0)*(clhs16*clhs192 + clhs17*clhs193 + clhs18*clhs194 + clhs19*clhs195) + normalslave(3,1)*(clhs1*clhs192 + clhs193*clhs3 + clhs194*clhs6 + clhs195*clhs9 + clhs36) + normalslave(3,2)*(clhs12*clhs192 + clhs13*clhs193 + clhs14*clhs194 + clhs15*clhs195);
        const double clhs197 =     clhs196*normalslave(3,0)*penalty_parameter;
        const double clhs198 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs199 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs200 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs201 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs202 =     normalslave(0,0)*(clhs16*clhs198 + clhs17*clhs199 + clhs18*clhs200 + clhs19*clhs201) + normalslave(0,1)*(clhs1*clhs198 + clhs199*clhs3 + clhs200*clhs6 + clhs201*clhs9) + normalslave(0,2)*(clhs12*clhs198 + clhs13*clhs199 + clhs14*clhs200 + clhs15*clhs201 + clhs7);
        const double clhs203 =     clhs202*normalslave(0,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs205 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs206 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs207 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs208 =     normalslave(1,0)*(clhs16*clhs204 + clhs17*clhs205 + clhs18*clhs206 + clhs19*clhs207) + normalslave(1,1)*(clhs1*clhs204 + clhs205*clhs3 + clhs206*clhs6 + clhs207*clhs9) + normalslave(1,2)*(clhs12*clhs204 + clhs13*clhs205 + clhs14*clhs206 + clhs15*clhs207 + clhs26);
        const double clhs209 =     clhs208*normalslave(1,0)*penalty_parameter;
        const double clhs210 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs211 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs212 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs213 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs214 =     normalslave(3,0)*(clhs16*clhs210 + clhs17*clhs211 + clhs18*clhs212 + clhs19*clhs213) + normalslave(3,1)*(clhs1*clhs210 + clhs211*clhs3 + clhs212*clhs6 + clhs213*clhs9) + normalslave(3,2)*(clhs12*clhs210 + clhs13*clhs211 + clhs14*clhs212 + clhs15*clhs213 + clhs36);
        const double clhs215 =     clhs214*normalslave(3,0)*penalty_parameter;
        const double clhs216 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs217 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs218 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs219 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs220 =     normalslave(0,0)*(clhs10 + clhs16*clhs216 + clhs17*clhs217 + clhs18*clhs218 + clhs19*clhs219) + normalslave(0,1)*(clhs1*clhs216 + clhs217*clhs3 + clhs218*clhs6 + clhs219*clhs9) + normalslave(0,2)*(clhs12*clhs216 + clhs13*clhs217 + clhs14*clhs218 + clhs15*clhs219);
        const double clhs221 =     clhs220*normalslave(0,0)*penalty_parameter;
        const double clhs222 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs223 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs224 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs225 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs226 =     normalslave(1,0)*(clhs16*clhs222 + clhs17*clhs223 + clhs18*clhs224 + clhs19*clhs225 + clhs28) + normalslave(1,1)*(clhs1*clhs222 + clhs223*clhs3 + clhs224*clhs6 + clhs225*clhs9) + normalslave(1,2)*(clhs12*clhs222 + clhs13*clhs223 + clhs14*clhs224 + clhs15*clhs225);
        const double clhs227 =     clhs226*normalslave(1,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs229 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs230 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs231 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs232 =     normalslave(3,0)*(clhs16*clhs228 + clhs17*clhs229 + clhs18*clhs230 + clhs19*clhs231 + clhs38) + normalslave(3,1)*(clhs1*clhs228 + clhs229*clhs3 + clhs230*clhs6 + clhs231*clhs9) + normalslave(3,2)*(clhs12*clhs228 + clhs13*clhs229 + clhs14*clhs230 + clhs15*clhs231);
        const double clhs233 =     clhs232*normalslave(3,0)*penalty_parameter;
        const double clhs234 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs235 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs236 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs237 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs238 =     normalslave(0,0)*(clhs16*clhs234 + clhs17*clhs235 + clhs18*clhs236 + clhs19*clhs237) + normalslave(0,1)*(clhs1*clhs234 + clhs10 + clhs235*clhs3 + clhs236*clhs6 + clhs237*clhs9) + normalslave(0,2)*(clhs12*clhs234 + clhs13*clhs235 + clhs14*clhs236 + clhs15*clhs237);
        const double clhs239 =     clhs238*normalslave(0,0)*penalty_parameter;
        const double clhs240 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs241 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs242 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs243 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs244 =     normalslave(1,0)*(clhs16*clhs240 + clhs17*clhs241 + clhs18*clhs242 + clhs19*clhs243) + normalslave(1,1)*(clhs1*clhs240 + clhs241*clhs3 + clhs242*clhs6 + clhs243*clhs9 + clhs28) + normalslave(1,2)*(clhs12*clhs240 + clhs13*clhs241 + clhs14*clhs242 + clhs15*clhs243);
        const double clhs245 =     clhs244*normalslave(1,0)*penalty_parameter;
        const double clhs246 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs247 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs248 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs249 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs250 =     normalslave(3,0)*(clhs16*clhs246 + clhs17*clhs247 + clhs18*clhs248 + clhs19*clhs249) + normalslave(3,1)*(clhs1*clhs246 + clhs247*clhs3 + clhs248*clhs6 + clhs249*clhs9 + clhs38) + normalslave(3,2)*(clhs12*clhs246 + clhs13*clhs247 + clhs14*clhs248 + clhs15*clhs249);
        const double clhs251 =     clhs250*normalslave(3,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs253 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs254 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs255 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs256 =     normalslave(0,0)*(clhs16*clhs252 + clhs17*clhs253 + clhs18*clhs254 + clhs19*clhs255) + normalslave(0,1)*(clhs1*clhs252 + clhs253*clhs3 + clhs254*clhs6 + clhs255*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs252 + clhs13*clhs253 + clhs14*clhs254 + clhs15*clhs255);
        const double clhs257 =     clhs256*normalslave(0,0)*penalty_parameter;
        const double clhs258 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs259 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs260 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs261 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs262 =     normalslave(1,0)*(clhs16*clhs258 + clhs17*clhs259 + clhs18*clhs260 + clhs19*clhs261) + normalslave(1,1)*(clhs1*clhs258 + clhs259*clhs3 + clhs260*clhs6 + clhs261*clhs9) + normalslave(1,2)*(clhs12*clhs258 + clhs13*clhs259 + clhs14*clhs260 + clhs15*clhs261 + clhs28);
        const double clhs263 =     clhs262*normalslave(1,0)*penalty_parameter;
        const double clhs264 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs265 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs266 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs267 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs268 =     normalslave(3,0)*(clhs16*clhs264 + clhs17*clhs265 + clhs18*clhs266 + clhs19*clhs267) + normalslave(3,1)*(clhs1*clhs264 + clhs265*clhs3 + clhs266*clhs6 + clhs267*clhs9) + normalslave(3,2)*(clhs12*clhs264 + clhs13*clhs265 + clhs14*clhs266 + clhs15*clhs267 + clhs38);
        const double clhs269 =     clhs268*normalslave(3,0)*penalty_parameter;
        const double clhs270 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs271 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs272 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs273 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs274 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs275 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs276 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs277 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs278 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs279 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs280 =     normalslave(0,0)*(-clhs16*clhs270 - clhs17*clhs277 - clhs18*clhs278 - clhs19*clhs279 + clhs273*clhs42 + clhs274*clhs44 + clhs275*clhs46 + clhs276*clhs48 + clhs43) + normalslave(0,1)*(-clhs1*clhs270 + clhs273*clhs50 + clhs274*clhs51 + clhs275*clhs52 + clhs276*clhs53 - clhs277*clhs3 - clhs278*clhs6 - clhs279*clhs9) + normalslave(0,2)*(-clhs12*clhs270 - clhs13*clhs277 - clhs14*clhs278 - clhs15*clhs279 + clhs273*clhs54 + clhs274*clhs55 + clhs275*clhs56 + clhs276*clhs57);
        const double clhs281 =     clhs280*normalslave(0,0)*penalty_parameter;
        const double clhs282 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs283 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs284 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs285 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs286 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs287 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs288 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs289 =     normalslave(1,0)*(-clhs16*clhs271 - clhs17*clhs286 - clhs18*clhs287 - clhs19*clhs288 + clhs282*clhs42 + clhs283*clhs44 + clhs284*clhs46 + clhs285*clhs48 + clhs60) + normalslave(1,1)*(-clhs1*clhs271 + clhs282*clhs50 + clhs283*clhs51 + clhs284*clhs52 + clhs285*clhs53 - clhs286*clhs3 - clhs287*clhs6 - clhs288*clhs9) + normalslave(1,2)*(-clhs12*clhs271 - clhs13*clhs286 - clhs14*clhs287 - clhs15*clhs288 + clhs282*clhs54 + clhs283*clhs55 + clhs284*clhs56 + clhs285*clhs57);
        const double clhs290 =     clhs289*normalslave(1,0)*penalty_parameter;
        const double clhs291 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs292 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs293 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs294 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs295 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs296 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs297 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs298 =     normalslave(3,0)*(-clhs16*clhs272 - clhs17*clhs295 - clhs18*clhs296 - clhs19*clhs297 + clhs291*clhs42 + clhs292*clhs44 + clhs293*clhs46 + clhs294*clhs48 + clhs66) + normalslave(3,1)*(-clhs1*clhs272 + clhs291*clhs50 + clhs292*clhs51 + clhs293*clhs52 + clhs294*clhs53 - clhs295*clhs3 - clhs296*clhs6 - clhs297*clhs9) + normalslave(3,2)*(-clhs12*clhs272 - clhs13*clhs295 - clhs14*clhs296 - clhs15*clhs297 + clhs291*clhs54 + clhs292*clhs55 + clhs293*clhs56 + clhs294*clhs57);
        const double clhs299 =     clhs298*normalslave(3,0)*penalty_parameter;
        const double clhs300 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs301 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs302 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs303 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs304 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs305 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs306 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs307 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs308 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs309 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs310 =     normalslave(0,0)*(-clhs16*clhs300 - clhs17*clhs307 - clhs18*clhs308 - clhs19*clhs309 + clhs303*clhs42 + clhs304*clhs44 + clhs305*clhs46 + clhs306*clhs48) + normalslave(0,1)*(-clhs1*clhs300 - clhs3*clhs307 + clhs303*clhs50 + clhs304*clhs51 + clhs305*clhs52 + clhs306*clhs53 - clhs308*clhs6 - clhs309*clhs9 + clhs43) + normalslave(0,2)*(-clhs12*clhs300 - clhs13*clhs307 - clhs14*clhs308 - clhs15*clhs309 + clhs303*clhs54 + clhs304*clhs55 + clhs305*clhs56 + clhs306*clhs57);
        const double clhs311 =     clhs310*normalslave(0,0)*penalty_parameter;
        const double clhs312 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs313 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs314 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs315 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs316 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs317 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs318 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs319 =     normalslave(1,0)*(-clhs16*clhs301 - clhs17*clhs316 - clhs18*clhs317 - clhs19*clhs318 + clhs312*clhs42 + clhs313*clhs44 + clhs314*clhs46 + clhs315*clhs48) + normalslave(1,1)*(-clhs1*clhs301 - clhs3*clhs316 + clhs312*clhs50 + clhs313*clhs51 + clhs314*clhs52 + clhs315*clhs53 - clhs317*clhs6 - clhs318*clhs9 + clhs60) + normalslave(1,2)*(-clhs12*clhs301 - clhs13*clhs316 - clhs14*clhs317 - clhs15*clhs318 + clhs312*clhs54 + clhs313*clhs55 + clhs314*clhs56 + clhs315*clhs57);
        const double clhs320 =     clhs319*normalslave(1,0)*penalty_parameter;
        const double clhs321 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs322 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs323 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs324 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs325 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs326 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs327 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs328 =     normalslave(3,0)*(-clhs16*clhs302 - clhs17*clhs325 - clhs18*clhs326 - clhs19*clhs327 + clhs321*clhs42 + clhs322*clhs44 + clhs323*clhs46 + clhs324*clhs48) + normalslave(3,1)*(-clhs1*clhs302 - clhs3*clhs325 + clhs321*clhs50 + clhs322*clhs51 + clhs323*clhs52 + clhs324*clhs53 - clhs326*clhs6 - clhs327*clhs9 + clhs66) + normalslave(3,2)*(-clhs12*clhs302 - clhs13*clhs325 - clhs14*clhs326 - clhs15*clhs327 + clhs321*clhs54 + clhs322*clhs55 + clhs323*clhs56 + clhs324*clhs57);
        const double clhs329 =     clhs328*normalslave(3,0)*penalty_parameter;
        const double clhs330 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs331 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs332 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs333 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs334 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs335 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs336 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs337 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs338 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs339 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs340 =     normalslave(0,0)*(-clhs16*clhs330 - clhs17*clhs337 - clhs18*clhs338 - clhs19*clhs339 + clhs333*clhs42 + clhs334*clhs44 + clhs335*clhs46 + clhs336*clhs48) + normalslave(0,1)*(-clhs1*clhs330 - clhs3*clhs337 + clhs333*clhs50 + clhs334*clhs51 + clhs335*clhs52 + clhs336*clhs53 - clhs338*clhs6 - clhs339*clhs9) + normalslave(0,2)*(-clhs12*clhs330 - clhs13*clhs337 - clhs14*clhs338 - clhs15*clhs339 + clhs333*clhs54 + clhs334*clhs55 + clhs335*clhs56 + clhs336*clhs57 + clhs43);
        const double clhs341 =     clhs340*normalslave(0,0)*penalty_parameter;
        const double clhs342 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs343 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs344 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs345 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs346 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs347 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs348 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs349 =     normalslave(1,0)*(-clhs16*clhs331 - clhs17*clhs346 - clhs18*clhs347 - clhs19*clhs348 + clhs342*clhs42 + clhs343*clhs44 + clhs344*clhs46 + clhs345*clhs48) + normalslave(1,1)*(-clhs1*clhs331 - clhs3*clhs346 + clhs342*clhs50 + clhs343*clhs51 + clhs344*clhs52 + clhs345*clhs53 - clhs347*clhs6 - clhs348*clhs9) + normalslave(1,2)*(-clhs12*clhs331 - clhs13*clhs346 - clhs14*clhs347 - clhs15*clhs348 + clhs342*clhs54 + clhs343*clhs55 + clhs344*clhs56 + clhs345*clhs57 + clhs60);
        const double clhs350 =     clhs349*normalslave(1,0)*penalty_parameter;
        const double clhs351 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs352 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs353 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs354 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs355 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs356 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs357 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs358 =     normalslave(3,0)*(-clhs16*clhs332 - clhs17*clhs355 - clhs18*clhs356 - clhs19*clhs357 + clhs351*clhs42 + clhs352*clhs44 + clhs353*clhs46 + clhs354*clhs48) + normalslave(3,1)*(-clhs1*clhs332 - clhs3*clhs355 + clhs351*clhs50 + clhs352*clhs51 + clhs353*clhs52 + clhs354*clhs53 - clhs356*clhs6 - clhs357*clhs9) + normalslave(3,2)*(-clhs12*clhs332 - clhs13*clhs355 - clhs14*clhs356 - clhs15*clhs357 + clhs351*clhs54 + clhs352*clhs55 + clhs353*clhs56 + clhs354*clhs57 + clhs66);
        const double clhs359 =     clhs358*normalslave(3,0)*penalty_parameter;
        const double clhs360 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs361 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs362 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs363 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs364 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs365 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs366 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs367 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs368 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs369 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs370 =     normalslave(0,0)*(-clhs16*clhs360 - clhs17*clhs367 - clhs18*clhs368 - clhs19*clhs369 + clhs363*clhs42 + clhs364*clhs44 + clhs365*clhs46 + clhs366*clhs48 + clhs45) + normalslave(0,1)*(-clhs1*clhs360 - clhs3*clhs367 + clhs363*clhs50 + clhs364*clhs51 + clhs365*clhs52 + clhs366*clhs53 - clhs368*clhs6 - clhs369*clhs9) + normalslave(0,2)*(-clhs12*clhs360 - clhs13*clhs367 - clhs14*clhs368 - clhs15*clhs369 + clhs363*clhs54 + clhs364*clhs55 + clhs365*clhs56 + clhs366*clhs57);
        const double clhs371 =     clhs370*normalslave(0,0)*penalty_parameter;
        const double clhs372 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs373 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs374 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs375 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs376 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs377 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs378 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs379 =     normalslave(1,0)*(-clhs16*clhs361 - clhs17*clhs376 - clhs18*clhs377 - clhs19*clhs378 + clhs372*clhs42 + clhs373*clhs44 + clhs374*clhs46 + clhs375*clhs48 + clhs61) + normalslave(1,1)*(-clhs1*clhs361 - clhs3*clhs376 + clhs372*clhs50 + clhs373*clhs51 + clhs374*clhs52 + clhs375*clhs53 - clhs377*clhs6 - clhs378*clhs9) + normalslave(1,2)*(-clhs12*clhs361 - clhs13*clhs376 - clhs14*clhs377 - clhs15*clhs378 + clhs372*clhs54 + clhs373*clhs55 + clhs374*clhs56 + clhs375*clhs57);
        const double clhs380 =     clhs379*normalslave(1,0)*penalty_parameter;
        const double clhs381 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs382 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs383 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs384 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs385 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs386 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs387 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs388 =     normalslave(3,0)*(-clhs16*clhs362 - clhs17*clhs385 - clhs18*clhs386 - clhs19*clhs387 + clhs381*clhs42 + clhs382*clhs44 + clhs383*clhs46 + clhs384*clhs48 + clhs67) + normalslave(3,1)*(-clhs1*clhs362 - clhs3*clhs385 + clhs381*clhs50 + clhs382*clhs51 + clhs383*clhs52 + clhs384*clhs53 - clhs386*clhs6 - clhs387*clhs9) + normalslave(3,2)*(-clhs12*clhs362 - clhs13*clhs385 - clhs14*clhs386 - clhs15*clhs387 + clhs381*clhs54 + clhs382*clhs55 + clhs383*clhs56 + clhs384*clhs57);
        const double clhs389 =     clhs388*normalslave(3,0)*penalty_parameter;
        const double clhs390 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs391 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs392 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs393 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs394 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs395 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs396 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs397 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs398 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs399 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs400 =     normalslave(0,0)*(-clhs16*clhs390 - clhs17*clhs397 - clhs18*clhs398 - clhs19*clhs399 + clhs393*clhs42 + clhs394*clhs44 + clhs395*clhs46 + clhs396*clhs48) + normalslave(0,1)*(-clhs1*clhs390 - clhs3*clhs397 + clhs393*clhs50 + clhs394*clhs51 + clhs395*clhs52 + clhs396*clhs53 - clhs398*clhs6 - clhs399*clhs9 + clhs45) + normalslave(0,2)*(-clhs12*clhs390 - clhs13*clhs397 - clhs14*clhs398 - clhs15*clhs399 + clhs393*clhs54 + clhs394*clhs55 + clhs395*clhs56 + clhs396*clhs57);
        const double clhs401 =     clhs400*normalslave(0,0)*penalty_parameter;
        const double clhs402 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs403 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs404 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs405 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs406 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs407 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs408 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs409 =     normalslave(1,0)*(-clhs16*clhs391 - clhs17*clhs406 - clhs18*clhs407 - clhs19*clhs408 + clhs402*clhs42 + clhs403*clhs44 + clhs404*clhs46 + clhs405*clhs48) + normalslave(1,1)*(-clhs1*clhs391 - clhs3*clhs406 + clhs402*clhs50 + clhs403*clhs51 + clhs404*clhs52 + clhs405*clhs53 - clhs407*clhs6 - clhs408*clhs9 + clhs61) + normalslave(1,2)*(-clhs12*clhs391 - clhs13*clhs406 - clhs14*clhs407 - clhs15*clhs408 + clhs402*clhs54 + clhs403*clhs55 + clhs404*clhs56 + clhs405*clhs57);
        const double clhs410 =     clhs409*normalslave(1,0)*penalty_parameter;
        const double clhs411 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs412 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs413 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs414 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs415 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs416 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs417 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs418 =     normalslave(3,0)*(-clhs16*clhs392 - clhs17*clhs415 - clhs18*clhs416 - clhs19*clhs417 + clhs411*clhs42 + clhs412*clhs44 + clhs413*clhs46 + clhs414*clhs48) + normalslave(3,1)*(-clhs1*clhs392 - clhs3*clhs415 + clhs411*clhs50 + clhs412*clhs51 + clhs413*clhs52 + clhs414*clhs53 - clhs416*clhs6 - clhs417*clhs9 + clhs67) + normalslave(3,2)*(-clhs12*clhs392 - clhs13*clhs415 - clhs14*clhs416 - clhs15*clhs417 + clhs411*clhs54 + clhs412*clhs55 + clhs413*clhs56 + clhs414*clhs57);
        const double clhs419 =     clhs418*normalslave(3,0)*penalty_parameter;
        const double clhs420 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs421 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs422 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs423 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs424 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs425 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs426 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs427 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs428 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs429 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs430 =     normalslave(0,0)*(-clhs16*clhs420 - clhs17*clhs427 - clhs18*clhs428 - clhs19*clhs429 + clhs42*clhs423 + clhs424*clhs44 + clhs425*clhs46 + clhs426*clhs48) + normalslave(0,1)*(-clhs1*clhs420 - clhs3*clhs427 + clhs423*clhs50 + clhs424*clhs51 + clhs425*clhs52 + clhs426*clhs53 - clhs428*clhs6 - clhs429*clhs9) + normalslave(0,2)*(-clhs12*clhs420 - clhs13*clhs427 - clhs14*clhs428 - clhs15*clhs429 + clhs423*clhs54 + clhs424*clhs55 + clhs425*clhs56 + clhs426*clhs57 + clhs45);
        const double clhs431 =     clhs430*normalslave(0,0)*penalty_parameter;
        const double clhs432 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs433 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs434 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs435 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs436 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs437 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs438 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs439 =     normalslave(1,0)*(-clhs16*clhs421 - clhs17*clhs436 - clhs18*clhs437 - clhs19*clhs438 + clhs42*clhs432 + clhs433*clhs44 + clhs434*clhs46 + clhs435*clhs48) + normalslave(1,1)*(-clhs1*clhs421 - clhs3*clhs436 + clhs432*clhs50 + clhs433*clhs51 + clhs434*clhs52 + clhs435*clhs53 - clhs437*clhs6 - clhs438*clhs9) + normalslave(1,2)*(-clhs12*clhs421 - clhs13*clhs436 - clhs14*clhs437 - clhs15*clhs438 + clhs432*clhs54 + clhs433*clhs55 + clhs434*clhs56 + clhs435*clhs57 + clhs61);
        const double clhs440 =     clhs439*normalslave(1,0)*penalty_parameter;
        const double clhs441 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs442 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs443 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs444 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs445 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs446 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs447 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs448 =     normalslave(3,0)*(-clhs16*clhs422 - clhs17*clhs445 - clhs18*clhs446 - clhs19*clhs447 + clhs42*clhs441 + clhs44*clhs442 + clhs443*clhs46 + clhs444*clhs48) + normalslave(3,1)*(-clhs1*clhs422 - clhs3*clhs445 + clhs441*clhs50 + clhs442*clhs51 + clhs443*clhs52 + clhs444*clhs53 - clhs446*clhs6 - clhs447*clhs9) + normalslave(3,2)*(-clhs12*clhs422 - clhs13*clhs445 - clhs14*clhs446 - clhs15*clhs447 + clhs441*clhs54 + clhs442*clhs55 + clhs443*clhs56 + clhs444*clhs57 + clhs67);
        const double clhs449 =     clhs448*normalslave(3,0)*penalty_parameter;
        const double clhs450 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs451 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs452 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs453 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs454 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs455 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs456 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs457 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs458 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs459 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs460 =     normalslave(0,0)*(-clhs16*clhs450 - clhs17*clhs457 - clhs18*clhs458 - clhs19*clhs459 + clhs42*clhs453 + clhs44*clhs454 + clhs455*clhs46 + clhs456*clhs48 + clhs47) + normalslave(0,1)*(-clhs1*clhs450 - clhs3*clhs457 + clhs453*clhs50 + clhs454*clhs51 + clhs455*clhs52 + clhs456*clhs53 - clhs458*clhs6 - clhs459*clhs9) + normalslave(0,2)*(-clhs12*clhs450 - clhs13*clhs457 - clhs14*clhs458 - clhs15*clhs459 + clhs453*clhs54 + clhs454*clhs55 + clhs455*clhs56 + clhs456*clhs57);
        const double clhs461 =     clhs460*normalslave(0,0)*penalty_parameter;
        const double clhs462 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs463 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs464 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs465 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs466 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs467 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs468 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs469 =     normalslave(1,0)*(-clhs16*clhs451 - clhs17*clhs466 - clhs18*clhs467 - clhs19*clhs468 + clhs42*clhs462 + clhs44*clhs463 + clhs46*clhs464 + clhs465*clhs48 + clhs62) + normalslave(1,1)*(-clhs1*clhs451 - clhs3*clhs466 + clhs462*clhs50 + clhs463*clhs51 + clhs464*clhs52 + clhs465*clhs53 - clhs467*clhs6 - clhs468*clhs9) + normalslave(1,2)*(-clhs12*clhs451 - clhs13*clhs466 - clhs14*clhs467 - clhs15*clhs468 + clhs462*clhs54 + clhs463*clhs55 + clhs464*clhs56 + clhs465*clhs57);
        const double clhs470 =     clhs469*normalslave(1,0)*penalty_parameter;
        const double clhs471 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs472 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs473 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs474 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs475 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs476 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs477 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs478 =     normalslave(3,0)*(-clhs16*clhs452 - clhs17*clhs475 - clhs18*clhs476 - clhs19*clhs477 + clhs42*clhs471 + clhs44*clhs472 + clhs46*clhs473 + clhs474*clhs48 + clhs68) + normalslave(3,1)*(-clhs1*clhs452 - clhs3*clhs475 + clhs471*clhs50 + clhs472*clhs51 + clhs473*clhs52 + clhs474*clhs53 - clhs476*clhs6 - clhs477*clhs9) + normalslave(3,2)*(-clhs12*clhs452 - clhs13*clhs475 - clhs14*clhs476 - clhs15*clhs477 + clhs471*clhs54 + clhs472*clhs55 + clhs473*clhs56 + clhs474*clhs57);
        const double clhs479 =     clhs478*normalslave(3,0)*penalty_parameter;
        const double clhs480 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs481 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs482 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs483 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs484 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs485 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs486 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs487 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs488 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs489 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs490 =     normalslave(0,0)*(-clhs16*clhs480 - clhs17*clhs487 - clhs18*clhs488 - clhs19*clhs489 + clhs42*clhs483 + clhs44*clhs484 + clhs46*clhs485 + clhs48*clhs486) + normalslave(0,1)*(-clhs1*clhs480 - clhs3*clhs487 + clhs47 + clhs483*clhs50 + clhs484*clhs51 + clhs485*clhs52 + clhs486*clhs53 - clhs488*clhs6 - clhs489*clhs9) + normalslave(0,2)*(-clhs12*clhs480 - clhs13*clhs487 - clhs14*clhs488 - clhs15*clhs489 + clhs483*clhs54 + clhs484*clhs55 + clhs485*clhs56 + clhs486*clhs57);
        const double clhs491 =     clhs490*normalslave(0,0)*penalty_parameter;
        const double clhs492 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs493 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs494 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs495 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs496 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs497 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs498 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs499 =     normalslave(1,0)*(-clhs16*clhs481 - clhs17*clhs496 - clhs18*clhs497 - clhs19*clhs498 + clhs42*clhs492 + clhs44*clhs493 + clhs46*clhs494 + clhs48*clhs495) + normalslave(1,1)*(-clhs1*clhs481 - clhs3*clhs496 + clhs492*clhs50 + clhs493*clhs51 + clhs494*clhs52 + clhs495*clhs53 - clhs497*clhs6 - clhs498*clhs9 + clhs62) + normalslave(1,2)*(-clhs12*clhs481 - clhs13*clhs496 - clhs14*clhs497 - clhs15*clhs498 + clhs492*clhs54 + clhs493*clhs55 + clhs494*clhs56 + clhs495*clhs57);
        const double clhs500 =     clhs499*normalslave(1,0)*penalty_parameter;
        const double clhs501 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs502 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs503 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs504 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs505 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs506 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs507 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs508 =     normalslave(3,0)*(-clhs16*clhs482 - clhs17*clhs505 - clhs18*clhs506 - clhs19*clhs507 + clhs42*clhs501 + clhs44*clhs502 + clhs46*clhs503 + clhs48*clhs504) + normalslave(3,1)*(-clhs1*clhs482 - clhs3*clhs505 + clhs50*clhs501 + clhs502*clhs51 + clhs503*clhs52 + clhs504*clhs53 - clhs506*clhs6 - clhs507*clhs9 + clhs68) + normalslave(3,2)*(-clhs12*clhs482 - clhs13*clhs505 - clhs14*clhs506 - clhs15*clhs507 + clhs501*clhs54 + clhs502*clhs55 + clhs503*clhs56 + clhs504*clhs57);
        const double clhs509 =     clhs508*normalslave(3,0)*penalty_parameter;
        const double clhs510 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs511 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs512 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs513 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs514 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs515 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs516 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs517 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs518 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs519 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs520 =     normalslave(0,0)*(-clhs16*clhs510 - clhs17*clhs517 - clhs18*clhs518 - clhs19*clhs519 + clhs42*clhs513 + clhs44*clhs514 + clhs46*clhs515 + clhs48*clhs516) + normalslave(0,1)*(-clhs1*clhs510 - clhs3*clhs517 + clhs50*clhs513 + clhs51*clhs514 + clhs515*clhs52 + clhs516*clhs53 - clhs518*clhs6 - clhs519*clhs9) + normalslave(0,2)*(-clhs12*clhs510 - clhs13*clhs517 - clhs14*clhs518 - clhs15*clhs519 + clhs47 + clhs513*clhs54 + clhs514*clhs55 + clhs515*clhs56 + clhs516*clhs57);
        const double clhs521 =     clhs520*normalslave(0,0)*penalty_parameter;
        const double clhs522 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs523 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs524 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs525 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs526 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs527 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs528 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs529 =     normalslave(1,0)*(-clhs16*clhs511 - clhs17*clhs526 - clhs18*clhs527 - clhs19*clhs528 + clhs42*clhs522 + clhs44*clhs523 + clhs46*clhs524 + clhs48*clhs525) + normalslave(1,1)*(-clhs1*clhs511 - clhs3*clhs526 + clhs50*clhs522 + clhs51*clhs523 + clhs52*clhs524 + clhs525*clhs53 - clhs527*clhs6 - clhs528*clhs9) + normalslave(1,2)*(-clhs12*clhs511 - clhs13*clhs526 - clhs14*clhs527 - clhs15*clhs528 + clhs522*clhs54 + clhs523*clhs55 + clhs524*clhs56 + clhs525*clhs57 + clhs62);
        const double clhs530 =     clhs529*normalslave(1,0)*penalty_parameter;
        const double clhs531 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs532 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs533 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs534 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs535 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs536 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs537 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs538 =     normalslave(3,0)*(-clhs16*clhs512 - clhs17*clhs535 - clhs18*clhs536 - clhs19*clhs537 + clhs42*clhs531 + clhs44*clhs532 + clhs46*clhs533 + clhs48*clhs534) + normalslave(3,1)*(-clhs1*clhs512 - clhs3*clhs535 + clhs50*clhs531 + clhs51*clhs532 + clhs52*clhs533 + clhs53*clhs534 - clhs536*clhs6 - clhs537*clhs9) + normalslave(3,2)*(-clhs12*clhs512 - clhs13*clhs535 - clhs14*clhs536 - clhs15*clhs537 + clhs531*clhs54 + clhs532*clhs55 + clhs533*clhs56 + clhs534*clhs57 + clhs68);
        const double clhs539 =     clhs538*normalslave(3,0)*penalty_parameter;
        const double clhs540 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs541 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs542 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs543 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs544 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs545 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs546 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs547 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs548 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs549 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs550 =     normalslave(0,0)*(-clhs16*clhs540 - clhs17*clhs547 - clhs18*clhs548 - clhs19*clhs549 + clhs42*clhs543 + clhs44*clhs544 + clhs46*clhs545 + clhs48*clhs546 + clhs49) + normalslave(0,1)*(-clhs1*clhs540 - clhs3*clhs547 + clhs50*clhs543 + clhs51*clhs544 + clhs52*clhs545 + clhs53*clhs546 - clhs548*clhs6 - clhs549*clhs9) + normalslave(0,2)*(-clhs12*clhs540 - clhs13*clhs547 - clhs14*clhs548 - clhs15*clhs549 + clhs54*clhs543 + clhs544*clhs55 + clhs545*clhs56 + clhs546*clhs57);
        const double clhs551 =     clhs550*normalslave(0,0)*penalty_parameter;
        const double clhs552 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs553 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs554 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs555 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs556 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs557 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs558 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs559 =     normalslave(1,0)*(-clhs16*clhs541 - clhs17*clhs556 - clhs18*clhs557 - clhs19*clhs558 + clhs42*clhs552 + clhs44*clhs553 + clhs46*clhs554 + clhs48*clhs555 + clhs63) + normalslave(1,1)*(-clhs1*clhs541 - clhs3*clhs556 + clhs50*clhs552 + clhs51*clhs553 + clhs52*clhs554 + clhs53*clhs555 - clhs557*clhs6 - clhs558*clhs9) + normalslave(1,2)*(-clhs12*clhs541 - clhs13*clhs556 - clhs14*clhs557 - clhs15*clhs558 + clhs54*clhs552 + clhs55*clhs553 + clhs554*clhs56 + clhs555*clhs57);
        const double clhs560 =     clhs559*normalslave(1,0)*penalty_parameter;
        const double clhs561 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs562 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs563 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs564 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs565 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs566 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs567 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs568 =     normalslave(3,0)*(-clhs16*clhs542 - clhs17*clhs565 - clhs18*clhs566 - clhs19*clhs567 + clhs42*clhs561 + clhs44*clhs562 + clhs46*clhs563 + clhs48*clhs564 + clhs69) + normalslave(3,1)*(-clhs1*clhs542 - clhs3*clhs565 + clhs50*clhs561 + clhs51*clhs562 + clhs52*clhs563 + clhs53*clhs564 - clhs566*clhs6 - clhs567*clhs9) + normalslave(3,2)*(-clhs12*clhs542 - clhs13*clhs565 - clhs14*clhs566 - clhs15*clhs567 + clhs54*clhs561 + clhs55*clhs562 + clhs56*clhs563 + clhs564*clhs57);
        const double clhs569 =     clhs568*normalslave(3,0)*penalty_parameter;
        const double clhs570 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs571 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs572 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs573 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs574 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs575 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs576 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs577 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs578 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs579 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs580 =     normalslave(0,0)*(-clhs16*clhs570 - clhs17*clhs577 - clhs18*clhs578 - clhs19*clhs579 + clhs42*clhs573 + clhs44*clhs574 + clhs46*clhs575 + clhs48*clhs576) + normalslave(0,1)*(-clhs1*clhs570 - clhs3*clhs577 + clhs49 + clhs50*clhs573 + clhs51*clhs574 + clhs52*clhs575 + clhs53*clhs576 - clhs578*clhs6 - clhs579*clhs9) + normalslave(0,2)*(-clhs12*clhs570 - clhs13*clhs577 - clhs14*clhs578 - clhs15*clhs579 + clhs54*clhs573 + clhs55*clhs574 + clhs56*clhs575 + clhs57*clhs576);
        const double clhs581 =     clhs580*normalslave(0,0)*penalty_parameter;
        const double clhs582 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs583 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs584 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs585 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs586 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs587 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs588 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs589 =     normalslave(1,0)*(-clhs16*clhs571 - clhs17*clhs586 - clhs18*clhs587 - clhs19*clhs588 + clhs42*clhs582 + clhs44*clhs583 + clhs46*clhs584 + clhs48*clhs585) + normalslave(1,1)*(-clhs1*clhs571 - clhs3*clhs586 + clhs50*clhs582 + clhs51*clhs583 + clhs52*clhs584 + clhs53*clhs585 - clhs587*clhs6 - clhs588*clhs9 + clhs63) + normalslave(1,2)*(-clhs12*clhs571 - clhs13*clhs586 - clhs14*clhs587 - clhs15*clhs588 + clhs54*clhs582 + clhs55*clhs583 + clhs56*clhs584 + clhs57*clhs585);
        const double clhs590 =     clhs589*normalslave(1,0)*penalty_parameter;
        const double clhs591 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs592 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs593 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs594 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs595 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs596 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs597 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs598 =     normalslave(3,0)*(-clhs16*clhs572 - clhs17*clhs595 - clhs18*clhs596 - clhs19*clhs597 + clhs42*clhs591 + clhs44*clhs592 + clhs46*clhs593 + clhs48*clhs594) + normalslave(3,1)*(-clhs1*clhs572 - clhs3*clhs595 + clhs50*clhs591 + clhs51*clhs592 + clhs52*clhs593 + clhs53*clhs594 - clhs596*clhs6 - clhs597*clhs9 + clhs69) + normalslave(3,2)*(-clhs12*clhs572 - clhs13*clhs595 - clhs14*clhs596 - clhs15*clhs597 + clhs54*clhs591 + clhs55*clhs592 + clhs56*clhs593 + clhs57*clhs594);
        const double clhs599 =     clhs598*normalslave(3,0)*penalty_parameter;
        const double clhs600 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs601 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs602 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs603 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs604 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs605 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs606 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs607 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs608 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs609 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs610 =     normalslave(0,0)*(-clhs16*clhs600 - clhs17*clhs607 - clhs18*clhs608 - clhs19*clhs609 + clhs42*clhs603 + clhs44*clhs604 + clhs46*clhs605 + clhs48*clhs606) + normalslave(0,1)*(-clhs1*clhs600 - clhs3*clhs607 + clhs50*clhs603 + clhs51*clhs604 + clhs52*clhs605 + clhs53*clhs606 - clhs6*clhs608 - clhs609*clhs9) + normalslave(0,2)*(-clhs12*clhs600 - clhs13*clhs607 - clhs14*clhs608 - clhs15*clhs609 + clhs49 + clhs54*clhs603 + clhs55*clhs604 + clhs56*clhs605 + clhs57*clhs606);
        const double clhs611 =     clhs610*normalslave(0,0)*penalty_parameter;
        const double clhs612 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs613 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs614 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs615 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs616 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs617 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs618 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs619 =     normalslave(1,0)*(-clhs16*clhs601 - clhs17*clhs616 - clhs18*clhs617 - clhs19*clhs618 + clhs42*clhs612 + clhs44*clhs613 + clhs46*clhs614 + clhs48*clhs615) + normalslave(1,1)*(-clhs1*clhs601 - clhs3*clhs616 + clhs50*clhs612 + clhs51*clhs613 + clhs52*clhs614 + clhs53*clhs615 - clhs6*clhs617 - clhs618*clhs9) + normalslave(1,2)*(-clhs12*clhs601 - clhs13*clhs616 - clhs14*clhs617 - clhs15*clhs618 + clhs54*clhs612 + clhs55*clhs613 + clhs56*clhs614 + clhs57*clhs615 + clhs63);
        const double clhs620 =     clhs619*normalslave(1,0)*penalty_parameter;
        const double clhs621 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs622 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs623 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs624 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs625 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs626 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs627 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs628 =     normalslave(3,0)*(-clhs16*clhs602 - clhs17*clhs625 - clhs18*clhs626 - clhs19*clhs627 + clhs42*clhs621 + clhs44*clhs622 + clhs46*clhs623 + clhs48*clhs624) + normalslave(3,1)*(-clhs1*clhs602 - clhs3*clhs625 + clhs50*clhs621 + clhs51*clhs622 + clhs52*clhs623 + clhs53*clhs624 - clhs6*clhs626 - clhs627*clhs9) + normalslave(3,2)*(-clhs12*clhs602 - clhs13*clhs625 - clhs14*clhs626 - clhs15*clhs627 + clhs54*clhs621 + clhs55*clhs622 + clhs56*clhs623 + clhs57*clhs624 + clhs69);
        const double clhs629 =     clhs628*normalslave(3,0)*penalty_parameter;
        const double clhs630 =     normalslave(0,0)*scale_factor;
        const double clhs631 =     normalslave(1,0)*scale_factor;
        const double clhs632 =     normalslave(3,0)*scale_factor;
        const double clhs633 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs634 =     clhs30*normalslave(1,1)*penalty_parameter;
        const double clhs635 =     clhs40*normalslave(3,1)*penalty_parameter;
        const double clhs636 =     clhs58*normalslave(0,1);
        const double clhs637 =     clhs64*normalslave(1,1);
        const double clhs638 =     clhs70*normalslave(3,1);
        const double clhs639 =     clhs76*normalslave(0,1)*penalty_parameter;
        const double clhs640 =     clhs82*normalslave(1,1)*penalty_parameter;
        const double clhs641 =     clhs88*normalslave(3,1)*penalty_parameter;
        const double clhs642 =     clhs94*normalslave(0,1)*penalty_parameter;
        const double clhs643 =     clhs100*normalslave(1,1)*penalty_parameter;
        const double clhs644 =     clhs106*normalslave(3,1)*penalty_parameter;
        const double clhs645 =     clhs112*normalslave(0,1)*penalty_parameter;
        const double clhs646 =     clhs118*normalslave(1,1)*penalty_parameter;
        const double clhs647 =     clhs124*normalslave(3,1)*penalty_parameter;
        const double clhs648 =     clhs130*normalslave(0,1)*penalty_parameter;
        const double clhs649 =     clhs136*normalslave(1,1)*penalty_parameter;
        const double clhs650 =     clhs142*normalslave(3,1)*penalty_parameter;
        const double clhs651 =     clhs148*normalslave(0,1)*penalty_parameter;
        const double clhs652 =     clhs154*normalslave(1,1)*penalty_parameter;
        const double clhs653 =     clhs160*normalslave(3,1)*penalty_parameter;
        const double clhs654 =     clhs166*normalslave(0,1)*penalty_parameter;
        const double clhs655 =     clhs172*normalslave(1,1)*penalty_parameter;
        const double clhs656 =     clhs178*normalslave(3,1)*penalty_parameter;
        const double clhs657 =     clhs184*normalslave(0,1)*penalty_parameter;
        const double clhs658 =     clhs190*normalslave(1,1)*penalty_parameter;
        const double clhs659 =     clhs196*normalslave(3,1)*penalty_parameter;
        const double clhs660 =     clhs202*normalslave(0,1)*penalty_parameter;
        const double clhs661 =     clhs208*normalslave(1,1)*penalty_parameter;
        const double clhs662 =     clhs214*normalslave(3,1)*penalty_parameter;
        const double clhs663 =     clhs220*normalslave(0,1)*penalty_parameter;
        const double clhs664 =     clhs226*normalslave(1,1)*penalty_parameter;
        const double clhs665 =     clhs232*normalslave(3,1)*penalty_parameter;
        const double clhs666 =     clhs238*normalslave(0,1)*penalty_parameter;
        const double clhs667 =     clhs244*normalslave(1,1)*penalty_parameter;
        const double clhs668 =     clhs250*normalslave(3,1)*penalty_parameter;
        const double clhs669 =     clhs256*normalslave(0,1)*penalty_parameter;
        const double clhs670 =     clhs262*normalslave(1,1)*penalty_parameter;
        const double clhs671 =     clhs268*normalslave(3,1)*penalty_parameter;
        const double clhs672 =     clhs280*normalslave(0,1)*penalty_parameter;
        const double clhs673 =     clhs289*normalslave(1,1)*penalty_parameter;
        const double clhs674 =     clhs298*normalslave(3,1)*penalty_parameter;
        const double clhs675 =     clhs310*normalslave(0,1)*penalty_parameter;
        const double clhs676 =     clhs319*normalslave(1,1)*penalty_parameter;
        const double clhs677 =     clhs328*normalslave(3,1)*penalty_parameter;
        const double clhs678 =     clhs340*normalslave(0,1)*penalty_parameter;
        const double clhs679 =     clhs349*normalslave(1,1)*penalty_parameter;
        const double clhs680 =     clhs358*normalslave(3,1)*penalty_parameter;
        const double clhs681 =     clhs370*normalslave(0,1)*penalty_parameter;
        const double clhs682 =     clhs379*normalslave(1,1)*penalty_parameter;
        const double clhs683 =     clhs388*normalslave(3,1)*penalty_parameter;
        const double clhs684 =     clhs400*normalslave(0,1)*penalty_parameter;
        const double clhs685 =     clhs409*normalslave(1,1)*penalty_parameter;
        const double clhs686 =     clhs418*normalslave(3,1)*penalty_parameter;
        const double clhs687 =     clhs430*normalslave(0,1)*penalty_parameter;
        const double clhs688 =     clhs439*normalslave(1,1)*penalty_parameter;
        const double clhs689 =     clhs448*normalslave(3,1)*penalty_parameter;
        const double clhs690 =     clhs460*normalslave(0,1)*penalty_parameter;
        const double clhs691 =     clhs469*normalslave(1,1)*penalty_parameter;
        const double clhs692 =     clhs478*normalslave(3,1)*penalty_parameter;
        const double clhs693 =     clhs490*normalslave(0,1)*penalty_parameter;
        const double clhs694 =     clhs499*normalslave(1,1)*penalty_parameter;
        const double clhs695 =     clhs508*normalslave(3,1)*penalty_parameter;
        const double clhs696 =     clhs520*normalslave(0,1)*penalty_parameter;
        const double clhs697 =     clhs529*normalslave(1,1)*penalty_parameter;
        const double clhs698 =     clhs538*normalslave(3,1)*penalty_parameter;
        const double clhs699 =     clhs550*normalslave(0,1)*penalty_parameter;
        const double clhs700 =     clhs559*normalslave(1,1)*penalty_parameter;
        const double clhs701 =     clhs568*normalslave(3,1)*penalty_parameter;
        const double clhs702 =     clhs580*normalslave(0,1)*penalty_parameter;
        const double clhs703 =     clhs589*normalslave(1,1)*penalty_parameter;
        const double clhs704 =     clhs598*normalslave(3,1)*penalty_parameter;
        const double clhs705 =     clhs610*normalslave(0,1)*penalty_parameter;
        const double clhs706 =     clhs619*normalslave(1,1)*penalty_parameter;
        const double clhs707 =     clhs628*normalslave(3,1)*penalty_parameter;
        const double clhs708 =     normalslave(0,1)*scale_factor;
        const double clhs709 =     normalslave(1,1)*scale_factor;
        const double clhs710 =     normalslave(3,1)*scale_factor;
        const double clhs711 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs712 =     clhs30*normalslave(1,2)*penalty_parameter;
        const double clhs713 =     clhs40*normalslave(3,2)*penalty_parameter;
        const double clhs714 =     clhs58*normalslave(0,2);
        const double clhs715 =     clhs64*normalslave(1,2);
        const double clhs716 =     clhs70*normalslave(3,2);
        const double clhs717 =     clhs76*normalslave(0,2)*penalty_parameter;
        const double clhs718 =     clhs82*normalslave(1,2)*penalty_parameter;
        const double clhs719 =     clhs88*normalslave(3,2)*penalty_parameter;
        const double clhs720 =     clhs94*normalslave(0,2)*penalty_parameter;
        const double clhs721 =     clhs100*normalslave(1,2)*penalty_parameter;
        const double clhs722 =     clhs106*normalslave(3,2)*penalty_parameter;
        const double clhs723 =     clhs112*normalslave(0,2)*penalty_parameter;
        const double clhs724 =     clhs118*normalslave(1,2)*penalty_parameter;
        const double clhs725 =     clhs124*normalslave(3,2)*penalty_parameter;
        const double clhs726 =     clhs130*normalslave(0,2)*penalty_parameter;
        const double clhs727 =     clhs136*normalslave(1,2)*penalty_parameter;
        const double clhs728 =     clhs142*normalslave(3,2)*penalty_parameter;
        const double clhs729 =     clhs148*normalslave(0,2)*penalty_parameter;
        const double clhs730 =     clhs154*normalslave(1,2)*penalty_parameter;
        const double clhs731 =     clhs160*normalslave(3,2)*penalty_parameter;
        const double clhs732 =     clhs166*normalslave(0,2)*penalty_parameter;
        const double clhs733 =     clhs172*normalslave(1,2)*penalty_parameter;
        const double clhs734 =     clhs178*normalslave(3,2)*penalty_parameter;
        const double clhs735 =     clhs184*normalslave(0,2)*penalty_parameter;
        const double clhs736 =     clhs190*normalslave(1,2)*penalty_parameter;
        const double clhs737 =     clhs196*normalslave(3,2)*penalty_parameter;
        const double clhs738 =     clhs202*normalslave(0,2)*penalty_parameter;
        const double clhs739 =     clhs208*normalslave(1,2)*penalty_parameter;
        const double clhs740 =     clhs214*normalslave(3,2)*penalty_parameter;
        const double clhs741 =     clhs220*normalslave(0,2)*penalty_parameter;
        const double clhs742 =     clhs226*normalslave(1,2)*penalty_parameter;
        const double clhs743 =     clhs232*normalslave(3,2)*penalty_parameter;
        const double clhs744 =     clhs238*normalslave(0,2)*penalty_parameter;
        const double clhs745 =     clhs244*normalslave(1,2)*penalty_parameter;
        const double clhs746 =     clhs250*normalslave(3,2)*penalty_parameter;
        const double clhs747 =     clhs256*normalslave(0,2)*penalty_parameter;
        const double clhs748 =     clhs262*normalslave(1,2)*penalty_parameter;
        const double clhs749 =     clhs268*normalslave(3,2)*penalty_parameter;
        const double clhs750 =     clhs280*normalslave(0,2)*penalty_parameter;
        const double clhs751 =     clhs289*normalslave(1,2)*penalty_parameter;
        const double clhs752 =     clhs298*normalslave(3,2)*penalty_parameter;
        const double clhs753 =     clhs310*normalslave(0,2)*penalty_parameter;
        const double clhs754 =     clhs319*normalslave(1,2)*penalty_parameter;
        const double clhs755 =     clhs328*normalslave(3,2)*penalty_parameter;
        const double clhs756 =     clhs340*normalslave(0,2)*penalty_parameter;
        const double clhs757 =     clhs349*normalslave(1,2)*penalty_parameter;
        const double clhs758 =     clhs358*normalslave(3,2)*penalty_parameter;
        const double clhs759 =     clhs370*normalslave(0,2)*penalty_parameter;
        const double clhs760 =     clhs379*normalslave(1,2)*penalty_parameter;
        const double clhs761 =     clhs388*normalslave(3,2)*penalty_parameter;
        const double clhs762 =     clhs400*normalslave(0,2)*penalty_parameter;
        const double clhs763 =     clhs409*normalslave(1,2)*penalty_parameter;
        const double clhs764 =     clhs418*normalslave(3,2)*penalty_parameter;
        const double clhs765 =     clhs430*normalslave(0,2)*penalty_parameter;
        const double clhs766 =     clhs439*normalslave(1,2)*penalty_parameter;
        const double clhs767 =     clhs448*normalslave(3,2)*penalty_parameter;
        const double clhs768 =     clhs460*normalslave(0,2)*penalty_parameter;
        const double clhs769 =     clhs469*normalslave(1,2)*penalty_parameter;
        const double clhs770 =     clhs478*normalslave(3,2)*penalty_parameter;
        const double clhs771 =     clhs490*normalslave(0,2)*penalty_parameter;
        const double clhs772 =     clhs499*normalslave(1,2)*penalty_parameter;
        const double clhs773 =     clhs508*normalslave(3,2)*penalty_parameter;
        const double clhs774 =     clhs520*normalslave(0,2)*penalty_parameter;
        const double clhs775 =     clhs529*normalslave(1,2)*penalty_parameter;
        const double clhs776 =     clhs538*normalslave(3,2)*penalty_parameter;
        const double clhs777 =     clhs550*normalslave(0,2)*penalty_parameter;
        const double clhs778 =     clhs559*normalslave(1,2)*penalty_parameter;
        const double clhs779 =     clhs568*normalslave(3,2)*penalty_parameter;
        const double clhs780 =     clhs580*normalslave(0,2)*penalty_parameter;
        const double clhs781 =     clhs589*normalslave(1,2)*penalty_parameter;
        const double clhs782 =     clhs598*normalslave(3,2)*penalty_parameter;
        const double clhs783 =     clhs610*normalslave(0,2)*penalty_parameter;
        const double clhs784 =     clhs619*normalslave(1,2)*penalty_parameter;
        const double clhs785 =     clhs628*normalslave(3,2)*penalty_parameter;
        const double clhs786 =     normalslave(0,2)*scale_factor;
        const double clhs787 =     normalslave(1,2)*scale_factor;
        const double clhs788 =     normalslave(3,2)*scale_factor;
        const double clhs789 =     clhs20*normalslave(0,0);
        const double clhs790 =     clhs30*normalslave(1,0);
        const double clhs791 =     clhs40*normalslave(3,0);
        const double clhs792 =     clhs76*normalslave(0,0);
        const double clhs793 =     clhs82*normalslave(1,0);
        const double clhs794 =     clhs88*normalslave(3,0);
        const double clhs795 =     clhs94*normalslave(0,0);
        const double clhs796 =     clhs100*normalslave(1,0);
        const double clhs797 =     clhs106*normalslave(3,0);
        const double clhs798 =     clhs112*normalslave(0,0);
        const double clhs799 =     clhs118*normalslave(1,0);
        const double clhs800 =     clhs124*normalslave(3,0);
        const double clhs801 =     clhs130*normalslave(0,0);
        const double clhs802 =     clhs136*normalslave(1,0);
        const double clhs803 =     clhs142*normalslave(3,0);
        const double clhs804 =     clhs148*normalslave(0,0);
        const double clhs805 =     clhs154*normalslave(1,0);
        const double clhs806 =     clhs160*normalslave(3,0);
        const double clhs807 =     clhs166*normalslave(0,0);
        const double clhs808 =     clhs172*normalslave(1,0);
        const double clhs809 =     clhs178*normalslave(3,0);
        const double clhs810 =     clhs184*normalslave(0,0);
        const double clhs811 =     clhs190*normalslave(1,0);
        const double clhs812 =     clhs196*normalslave(3,0);
        const double clhs813 =     clhs202*normalslave(0,0);
        const double clhs814 =     clhs208*normalslave(1,0);
        const double clhs815 =     clhs214*normalslave(3,0);
        const double clhs816 =     clhs220*normalslave(0,0);
        const double clhs817 =     clhs226*normalslave(1,0);
        const double clhs818 =     clhs232*normalslave(3,0);
        const double clhs819 =     clhs238*normalslave(0,0);
        const double clhs820 =     clhs244*normalslave(1,0);
        const double clhs821 =     clhs250*normalslave(3,0);
        const double clhs822 =     clhs256*normalslave(0,0);
        const double clhs823 =     clhs262*normalslave(1,0);
        const double clhs824 =     clhs268*normalslave(3,0);
        const double clhs825 =     clhs20*normalslave(0,1);
        const double clhs826 =     clhs30*normalslave(1,1);
        const double clhs827 =     clhs40*normalslave(3,1);
        const double clhs828 =     clhs76*normalslave(0,1);
        const double clhs829 =     clhs82*normalslave(1,1);
        const double clhs830 =     clhs88*normalslave(3,1);
        const double clhs831 =     clhs94*normalslave(0,1);
        const double clhs832 =     clhs100*normalslave(1,1);
        const double clhs833 =     clhs106*normalslave(3,1);
        const double clhs834 =     clhs112*normalslave(0,1);
        const double clhs835 =     clhs118*normalslave(1,1);
        const double clhs836 =     clhs124*normalslave(3,1);
        const double clhs837 =     clhs130*normalslave(0,1);
        const double clhs838 =     clhs136*normalslave(1,1);
        const double clhs839 =     clhs142*normalslave(3,1);
        const double clhs840 =     clhs148*normalslave(0,1);
        const double clhs841 =     clhs154*normalslave(1,1);
        const double clhs842 =     clhs160*normalslave(3,1);
        const double clhs843 =     clhs166*normalslave(0,1);
        const double clhs844 =     clhs172*normalslave(1,1);
        const double clhs845 =     clhs178*normalslave(3,1);
        const double clhs846 =     clhs184*normalslave(0,1);
        const double clhs847 =     clhs190*normalslave(1,1);
        const double clhs848 =     clhs196*normalslave(3,1);
        const double clhs849 =     clhs202*normalslave(0,1);
        const double clhs850 =     clhs208*normalslave(1,1);
        const double clhs851 =     clhs214*normalslave(3,1);
        const double clhs852 =     clhs220*normalslave(0,1);
        const double clhs853 =     clhs226*normalslave(1,1);
        const double clhs854 =     clhs232*normalslave(3,1);
        const double clhs855 =     clhs238*normalslave(0,1);
        const double clhs856 =     clhs244*normalslave(1,1);
        const double clhs857 =     clhs250*normalslave(3,1);
        const double clhs858 =     clhs256*normalslave(0,1);
        const double clhs859 =     clhs262*normalslave(1,1);
        const double clhs860 =     clhs268*normalslave(3,1);
        const double clhs861 =     clhs20*normalslave(0,2);
        const double clhs862 =     clhs30*normalslave(1,2);
        const double clhs863 =     clhs40*normalslave(3,2);
        const double clhs864 =     clhs76*normalslave(0,2);
        const double clhs865 =     clhs82*normalslave(1,2);
        const double clhs866 =     clhs88*normalslave(3,2);
        const double clhs867 =     clhs94*normalslave(0,2);
        const double clhs868 =     clhs100*normalslave(1,2);
        const double clhs869 =     clhs106*normalslave(3,2);
        const double clhs870 =     clhs112*normalslave(0,2);
        const double clhs871 =     clhs118*normalslave(1,2);
        const double clhs872 =     clhs124*normalslave(3,2);
        const double clhs873 =     clhs130*normalslave(0,2);
        const double clhs874 =     clhs136*normalslave(1,2);
        const double clhs875 =     clhs142*normalslave(3,2);
        const double clhs876 =     clhs148*normalslave(0,2);
        const double clhs877 =     clhs154*normalslave(1,2);
        const double clhs878 =     clhs160*normalslave(3,2);
        const double clhs879 =     clhs166*normalslave(0,2);
        const double clhs880 =     clhs172*normalslave(1,2);
        const double clhs881 =     clhs178*normalslave(3,2);
        const double clhs882 =     clhs184*normalslave(0,2);
        const double clhs883 =     clhs190*normalslave(1,2);
        const double clhs884 =     clhs196*normalslave(3,2);
        const double clhs885 =     clhs202*normalslave(0,2);
        const double clhs886 =     clhs208*normalslave(1,2);
        const double clhs887 =     clhs214*normalslave(3,2);
        const double clhs888 =     clhs220*normalslave(0,2);
        const double clhs889 =     clhs226*normalslave(1,2);
        const double clhs890 =     clhs232*normalslave(3,2);
        const double clhs891 =     clhs238*normalslave(0,2);
        const double clhs892 =     clhs244*normalslave(1,2);
        const double clhs893 =     clhs250*normalslave(3,2);
        const double clhs894 =     clhs256*normalslave(0,2);
        const double clhs895 =     clhs262*normalslave(1,2);
        const double clhs896 =     clhs268*normalslave(3,2);
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs59 - clhs22*clhs31 + clhs23*clhs65 - clhs32*clhs41 + clhs33*clhs71;
        lhs(0,1)=-clhs0*clhs77 - clhs22*clhs83 - clhs32*clhs89 + clhs59*clhs72 + clhs65*clhs78 + clhs71*clhs84;
        lhs(0,2)=-clhs0*clhs95 - clhs101*clhs22 + clhs102*clhs71 - clhs107*clhs32 + clhs59*clhs90 + clhs65*clhs96;
        lhs(0,3)=-clhs0*clhs113 + clhs108*clhs59 + clhs114*clhs65 - clhs119*clhs22 + clhs120*clhs71 - clhs125*clhs32;
        lhs(0,4)=-clhs0*clhs131 + clhs126*clhs59 + clhs132*clhs65 - clhs137*clhs22 + clhs138*clhs71 - clhs143*clhs32;
        lhs(0,5)=-clhs0*clhs149 + clhs144*clhs59 + clhs150*clhs65 - clhs155*clhs22 + clhs156*clhs71 - clhs161*clhs32;
        lhs(0,6)=-clhs0*clhs167 + clhs162*clhs59 + clhs168*clhs65 - clhs173*clhs22 + clhs174*clhs71 - clhs179*clhs32;
        lhs(0,7)=-clhs0*clhs185 + clhs180*clhs59 + clhs186*clhs65 - clhs191*clhs22 + clhs192*clhs71 - clhs197*clhs32;
        lhs(0,8)=-clhs0*clhs203 + clhs198*clhs59 + clhs204*clhs65 - clhs209*clhs22 + clhs210*clhs71 - clhs215*clhs32;
        lhs(0,9)=-clhs0*clhs221 + clhs216*clhs59 - clhs22*clhs227 + clhs222*clhs65 + clhs228*clhs71 - clhs233*clhs32;
        lhs(0,10)=-clhs0*clhs239 - clhs22*clhs245 + clhs234*clhs59 + clhs240*clhs65 + clhs246*clhs71 - clhs251*clhs32;
        lhs(0,11)=-clhs0*clhs257 - clhs22*clhs263 + clhs252*clhs59 + clhs258*clhs65 + clhs264*clhs71 - clhs269*clhs32;
        lhs(0,12)=clhs0*clhs281 + clhs22*clhs290 + clhs270*clhs59 + clhs271*clhs65 + clhs272*clhs71 + clhs299*clhs32;
        lhs(0,13)=clhs0*clhs311 + clhs22*clhs320 + clhs300*clhs59 + clhs301*clhs65 + clhs302*clhs71 + clhs32*clhs329;
        lhs(0,14)=clhs0*clhs341 + clhs22*clhs350 + clhs32*clhs359 + clhs330*clhs59 + clhs331*clhs65 + clhs332*clhs71;
        lhs(0,15)=clhs0*clhs371 + clhs22*clhs380 + clhs32*clhs389 + clhs360*clhs59 + clhs361*clhs65 + clhs362*clhs71;
        lhs(0,16)=clhs0*clhs401 + clhs22*clhs410 + clhs32*clhs419 + clhs390*clhs59 + clhs391*clhs65 + clhs392*clhs71;
        lhs(0,17)=clhs0*clhs431 + clhs22*clhs440 + clhs32*clhs449 + clhs420*clhs59 + clhs421*clhs65 + clhs422*clhs71;
        lhs(0,18)=clhs0*clhs461 + clhs22*clhs470 + clhs32*clhs479 + clhs450*clhs59 + clhs451*clhs65 + clhs452*clhs71;
        lhs(0,19)=clhs0*clhs491 + clhs22*clhs500 + clhs32*clhs509 + clhs480*clhs59 + clhs481*clhs65 + clhs482*clhs71;
        lhs(0,20)=clhs0*clhs521 + clhs22*clhs530 + clhs32*clhs539 + clhs510*clhs59 + clhs511*clhs65 + clhs512*clhs71;
        lhs(0,21)=clhs0*clhs551 + clhs22*clhs560 + clhs32*clhs569 + clhs540*clhs59 + clhs541*clhs65 + clhs542*clhs71;
        lhs(0,22)=clhs0*clhs581 + clhs22*clhs590 + clhs32*clhs599 + clhs570*clhs59 + clhs571*clhs65 + clhs572*clhs71;
        lhs(0,23)=clhs0*clhs611 + clhs22*clhs620 + clhs32*clhs629 + clhs59*clhs600 + clhs601*clhs65 + clhs602*clhs71;
        lhs(0,24)=clhs0*clhs630;
        lhs(0,25)=clhs22*clhs631;
        lhs(0,26)=0;
        lhs(0,27)=clhs32*clhs632;
        lhs(1,0)=-clhs0*clhs633 + clhs2*clhs636 - clhs22*clhs634 + clhs23*clhs637 - clhs32*clhs635 + clhs33*clhs638;
        lhs(1,1)=-clhs0*clhs639 - clhs22*clhs640 - clhs32*clhs641 + clhs636*clhs72 + clhs637*clhs78 + clhs638*clhs84;
        lhs(1,2)=-clhs0*clhs642 + clhs102*clhs638 - clhs22*clhs643 - clhs32*clhs644 + clhs636*clhs90 + clhs637*clhs96;
        lhs(1,3)=-clhs0*clhs645 + clhs108*clhs636 + clhs114*clhs637 + clhs120*clhs638 - clhs22*clhs646 - clhs32*clhs647;
        lhs(1,4)=-clhs0*clhs648 + clhs126*clhs636 + clhs132*clhs637 + clhs138*clhs638 - clhs22*clhs649 - clhs32*clhs650;
        lhs(1,5)=-clhs0*clhs651 + clhs144*clhs636 + clhs150*clhs637 + clhs156*clhs638 - clhs22*clhs652 - clhs32*clhs653;
        lhs(1,6)=-clhs0*clhs654 + clhs162*clhs636 + clhs168*clhs637 + clhs174*clhs638 - clhs22*clhs655 - clhs32*clhs656;
        lhs(1,7)=-clhs0*clhs657 + clhs180*clhs636 + clhs186*clhs637 + clhs192*clhs638 - clhs22*clhs658 - clhs32*clhs659;
        lhs(1,8)=-clhs0*clhs660 + clhs198*clhs636 + clhs204*clhs637 + clhs210*clhs638 - clhs22*clhs661 - clhs32*clhs662;
        lhs(1,9)=-clhs0*clhs663 + clhs216*clhs636 - clhs22*clhs664 + clhs222*clhs637 + clhs228*clhs638 - clhs32*clhs665;
        lhs(1,10)=-clhs0*clhs666 - clhs22*clhs667 + clhs234*clhs636 + clhs240*clhs637 + clhs246*clhs638 - clhs32*clhs668;
        lhs(1,11)=-clhs0*clhs669 - clhs22*clhs670 + clhs252*clhs636 + clhs258*clhs637 + clhs264*clhs638 - clhs32*clhs671;
        lhs(1,12)=clhs0*clhs672 + clhs22*clhs673 + clhs270*clhs636 + clhs271*clhs637 + clhs272*clhs638 + clhs32*clhs674;
        lhs(1,13)=clhs0*clhs675 + clhs22*clhs676 + clhs300*clhs636 + clhs301*clhs637 + clhs302*clhs638 + clhs32*clhs677;
        lhs(1,14)=clhs0*clhs678 + clhs22*clhs679 + clhs32*clhs680 + clhs330*clhs636 + clhs331*clhs637 + clhs332*clhs638;
        lhs(1,15)=clhs0*clhs681 + clhs22*clhs682 + clhs32*clhs683 + clhs360*clhs636 + clhs361*clhs637 + clhs362*clhs638;
        lhs(1,16)=clhs0*clhs684 + clhs22*clhs685 + clhs32*clhs686 + clhs390*clhs636 + clhs391*clhs637 + clhs392*clhs638;
        lhs(1,17)=clhs0*clhs687 + clhs22*clhs688 + clhs32*clhs689 + clhs420*clhs636 + clhs421*clhs637 + clhs422*clhs638;
        lhs(1,18)=clhs0*clhs690 + clhs22*clhs691 + clhs32*clhs692 + clhs450*clhs636 + clhs451*clhs637 + clhs452*clhs638;
        lhs(1,19)=clhs0*clhs693 + clhs22*clhs694 + clhs32*clhs695 + clhs480*clhs636 + clhs481*clhs637 + clhs482*clhs638;
        lhs(1,20)=clhs0*clhs696 + clhs22*clhs697 + clhs32*clhs698 + clhs510*clhs636 + clhs511*clhs637 + clhs512*clhs638;
        lhs(1,21)=clhs0*clhs699 + clhs22*clhs700 + clhs32*clhs701 + clhs540*clhs636 + clhs541*clhs637 + clhs542*clhs638;
        lhs(1,22)=clhs0*clhs702 + clhs22*clhs703 + clhs32*clhs704 + clhs570*clhs636 + clhs571*clhs637 + clhs572*clhs638;
        lhs(1,23)=clhs0*clhs705 + clhs22*clhs706 + clhs32*clhs707 + clhs600*clhs636 + clhs601*clhs637 + clhs602*clhs638;
        lhs(1,24)=clhs0*clhs708;
        lhs(1,25)=clhs22*clhs709;
        lhs(1,26)=0;
        lhs(1,27)=clhs32*clhs710;
        lhs(2,0)=-clhs0*clhs711 + clhs2*clhs714 - clhs22*clhs712 + clhs23*clhs715 - clhs32*clhs713 + clhs33*clhs716;
        lhs(2,1)=-clhs0*clhs717 - clhs22*clhs718 - clhs32*clhs719 + clhs714*clhs72 + clhs715*clhs78 + clhs716*clhs84;
        lhs(2,2)=-clhs0*clhs720 + clhs102*clhs716 - clhs22*clhs721 - clhs32*clhs722 + clhs714*clhs90 + clhs715*clhs96;
        lhs(2,3)=-clhs0*clhs723 + clhs108*clhs714 + clhs114*clhs715 + clhs120*clhs716 - clhs22*clhs724 - clhs32*clhs725;
        lhs(2,4)=-clhs0*clhs726 + clhs126*clhs714 + clhs132*clhs715 + clhs138*clhs716 - clhs22*clhs727 - clhs32*clhs728;
        lhs(2,5)=-clhs0*clhs729 + clhs144*clhs714 + clhs150*clhs715 + clhs156*clhs716 - clhs22*clhs730 - clhs32*clhs731;
        lhs(2,6)=-clhs0*clhs732 + clhs162*clhs714 + clhs168*clhs715 + clhs174*clhs716 - clhs22*clhs733 - clhs32*clhs734;
        lhs(2,7)=-clhs0*clhs735 + clhs180*clhs714 + clhs186*clhs715 + clhs192*clhs716 - clhs22*clhs736 - clhs32*clhs737;
        lhs(2,8)=-clhs0*clhs738 + clhs198*clhs714 + clhs204*clhs715 + clhs210*clhs716 - clhs22*clhs739 - clhs32*clhs740;
        lhs(2,9)=-clhs0*clhs741 + clhs216*clhs714 - clhs22*clhs742 + clhs222*clhs715 + clhs228*clhs716 - clhs32*clhs743;
        lhs(2,10)=-clhs0*clhs744 - clhs22*clhs745 + clhs234*clhs714 + clhs240*clhs715 + clhs246*clhs716 - clhs32*clhs746;
        lhs(2,11)=-clhs0*clhs747 - clhs22*clhs748 + clhs252*clhs714 + clhs258*clhs715 + clhs264*clhs716 - clhs32*clhs749;
        lhs(2,12)=clhs0*clhs750 + clhs22*clhs751 + clhs270*clhs714 + clhs271*clhs715 + clhs272*clhs716 + clhs32*clhs752;
        lhs(2,13)=clhs0*clhs753 + clhs22*clhs754 + clhs300*clhs714 + clhs301*clhs715 + clhs302*clhs716 + clhs32*clhs755;
        lhs(2,14)=clhs0*clhs756 + clhs22*clhs757 + clhs32*clhs758 + clhs330*clhs714 + clhs331*clhs715 + clhs332*clhs716;
        lhs(2,15)=clhs0*clhs759 + clhs22*clhs760 + clhs32*clhs761 + clhs360*clhs714 + clhs361*clhs715 + clhs362*clhs716;
        lhs(2,16)=clhs0*clhs762 + clhs22*clhs763 + clhs32*clhs764 + clhs390*clhs714 + clhs391*clhs715 + clhs392*clhs716;
        lhs(2,17)=clhs0*clhs765 + clhs22*clhs766 + clhs32*clhs767 + clhs420*clhs714 + clhs421*clhs715 + clhs422*clhs716;
        lhs(2,18)=clhs0*clhs768 + clhs22*clhs769 + clhs32*clhs770 + clhs450*clhs714 + clhs451*clhs715 + clhs452*clhs716;
        lhs(2,19)=clhs0*clhs771 + clhs22*clhs772 + clhs32*clhs773 + clhs480*clhs714 + clhs481*clhs715 + clhs482*clhs716;
        lhs(2,20)=clhs0*clhs774 + clhs22*clhs775 + clhs32*clhs776 + clhs510*clhs714 + clhs511*clhs715 + clhs512*clhs716;
        lhs(2,21)=clhs0*clhs777 + clhs22*clhs778 + clhs32*clhs779 + clhs540*clhs714 + clhs541*clhs715 + clhs542*clhs716;
        lhs(2,22)=clhs0*clhs780 + clhs22*clhs781 + clhs32*clhs782 + clhs570*clhs714 + clhs571*clhs715 + clhs572*clhs716;
        lhs(2,23)=clhs0*clhs783 + clhs22*clhs784 + clhs32*clhs785 + clhs600*clhs714 + clhs601*clhs715 + clhs602*clhs716;
        lhs(2,24)=clhs0*clhs786;
        lhs(2,25)=clhs22*clhs787;
        lhs(2,26)=0;
        lhs(2,27)=clhs32*clhs788;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs65 - clhs34*clhs41 + clhs35*clhs71 + clhs5*clhs59;
        lhs(3,1)=-clhs24*clhs83 - clhs34*clhs89 - clhs4*clhs77 + clhs59*clhs73 + clhs65*clhs79 + clhs71*clhs85;
        lhs(3,2)=-clhs101*clhs24 + clhs103*clhs71 - clhs107*clhs34 - clhs4*clhs95 + clhs59*clhs91 + clhs65*clhs97;
        lhs(3,3)=clhs109*clhs59 - clhs113*clhs4 + clhs115*clhs65 - clhs119*clhs24 + clhs121*clhs71 - clhs125*clhs34;
        lhs(3,4)=clhs127*clhs59 - clhs131*clhs4 + clhs133*clhs65 - clhs137*clhs24 + clhs139*clhs71 - clhs143*clhs34;
        lhs(3,5)=clhs145*clhs59 - clhs149*clhs4 + clhs151*clhs65 - clhs155*clhs24 + clhs157*clhs71 - clhs161*clhs34;
        lhs(3,6)=clhs163*clhs59 - clhs167*clhs4 + clhs169*clhs65 - clhs173*clhs24 + clhs175*clhs71 - clhs179*clhs34;
        lhs(3,7)=clhs181*clhs59 - clhs185*clhs4 + clhs187*clhs65 - clhs191*clhs24 + clhs193*clhs71 - clhs197*clhs34;
        lhs(3,8)=clhs199*clhs59 - clhs203*clhs4 + clhs205*clhs65 - clhs209*clhs24 + clhs211*clhs71 - clhs215*clhs34;
        lhs(3,9)=clhs217*clhs59 - clhs221*clhs4 + clhs223*clhs65 - clhs227*clhs24 + clhs229*clhs71 - clhs233*clhs34;
        lhs(3,10)=clhs235*clhs59 - clhs239*clhs4 - clhs24*clhs245 + clhs241*clhs65 + clhs247*clhs71 - clhs251*clhs34;
        lhs(3,11)=-clhs24*clhs263 + clhs253*clhs59 - clhs257*clhs4 + clhs259*clhs65 + clhs265*clhs71 - clhs269*clhs34;
        lhs(3,12)=clhs24*clhs290 + clhs277*clhs59 + clhs281*clhs4 + clhs286*clhs65 + clhs295*clhs71 + clhs299*clhs34;
        lhs(3,13)=clhs24*clhs320 + clhs307*clhs59 + clhs311*clhs4 + clhs316*clhs65 + clhs325*clhs71 + clhs329*clhs34;
        lhs(3,14)=clhs24*clhs350 + clhs337*clhs59 + clhs34*clhs359 + clhs341*clhs4 + clhs346*clhs65 + clhs355*clhs71;
        lhs(3,15)=clhs24*clhs380 + clhs34*clhs389 + clhs367*clhs59 + clhs371*clhs4 + clhs376*clhs65 + clhs385*clhs71;
        lhs(3,16)=clhs24*clhs410 + clhs34*clhs419 + clhs397*clhs59 + clhs4*clhs401 + clhs406*clhs65 + clhs415*clhs71;
        lhs(3,17)=clhs24*clhs440 + clhs34*clhs449 + clhs4*clhs431 + clhs427*clhs59 + clhs436*clhs65 + clhs445*clhs71;
        lhs(3,18)=clhs24*clhs470 + clhs34*clhs479 + clhs4*clhs461 + clhs457*clhs59 + clhs466*clhs65 + clhs475*clhs71;
        lhs(3,19)=clhs24*clhs500 + clhs34*clhs509 + clhs4*clhs491 + clhs487*clhs59 + clhs496*clhs65 + clhs505*clhs71;
        lhs(3,20)=clhs24*clhs530 + clhs34*clhs539 + clhs4*clhs521 + clhs517*clhs59 + clhs526*clhs65 + clhs535*clhs71;
        lhs(3,21)=clhs24*clhs560 + clhs34*clhs569 + clhs4*clhs551 + clhs547*clhs59 + clhs556*clhs65 + clhs565*clhs71;
        lhs(3,22)=clhs24*clhs590 + clhs34*clhs599 + clhs4*clhs581 + clhs577*clhs59 + clhs586*clhs65 + clhs595*clhs71;
        lhs(3,23)=clhs24*clhs620 + clhs34*clhs629 + clhs4*clhs611 + clhs59*clhs607 + clhs616*clhs65 + clhs625*clhs71;
        lhs(3,24)=clhs4*clhs630;
        lhs(3,25)=clhs24*clhs631;
        lhs(3,26)=0;
        lhs(3,27)=clhs34*clhs632;
        lhs(4,0)=-clhs24*clhs634 + clhs25*clhs637 - clhs34*clhs635 + clhs35*clhs638 - clhs4*clhs633 + clhs5*clhs636;
        lhs(4,1)=-clhs24*clhs640 - clhs34*clhs641 - clhs4*clhs639 + clhs636*clhs73 + clhs637*clhs79 + clhs638*clhs85;
        lhs(4,2)=clhs103*clhs638 - clhs24*clhs643 - clhs34*clhs644 - clhs4*clhs642 + clhs636*clhs91 + clhs637*clhs97;
        lhs(4,3)=clhs109*clhs636 + clhs115*clhs637 + clhs121*clhs638 - clhs24*clhs646 - clhs34*clhs647 - clhs4*clhs645;
        lhs(4,4)=clhs127*clhs636 + clhs133*clhs637 + clhs139*clhs638 - clhs24*clhs649 - clhs34*clhs650 - clhs4*clhs648;
        lhs(4,5)=clhs145*clhs636 + clhs151*clhs637 + clhs157*clhs638 - clhs24*clhs652 - clhs34*clhs653 - clhs4*clhs651;
        lhs(4,6)=clhs163*clhs636 + clhs169*clhs637 + clhs175*clhs638 - clhs24*clhs655 - clhs34*clhs656 - clhs4*clhs654;
        lhs(4,7)=clhs181*clhs636 + clhs187*clhs637 + clhs193*clhs638 - clhs24*clhs658 - clhs34*clhs659 - clhs4*clhs657;
        lhs(4,8)=clhs199*clhs636 + clhs205*clhs637 + clhs211*clhs638 - clhs24*clhs661 - clhs34*clhs662 - clhs4*clhs660;
        lhs(4,9)=clhs217*clhs636 + clhs223*clhs637 + clhs229*clhs638 - clhs24*clhs664 - clhs34*clhs665 - clhs4*clhs663;
        lhs(4,10)=clhs235*clhs636 - clhs24*clhs667 + clhs241*clhs637 + clhs247*clhs638 - clhs34*clhs668 - clhs4*clhs666;
        lhs(4,11)=-clhs24*clhs670 + clhs253*clhs636 + clhs259*clhs637 + clhs265*clhs638 - clhs34*clhs671 - clhs4*clhs669;
        lhs(4,12)=clhs24*clhs673 + clhs277*clhs636 + clhs286*clhs637 + clhs295*clhs638 + clhs34*clhs674 + clhs4*clhs672;
        lhs(4,13)=clhs24*clhs676 + clhs307*clhs636 + clhs316*clhs637 + clhs325*clhs638 + clhs34*clhs677 + clhs4*clhs675;
        lhs(4,14)=clhs24*clhs679 + clhs337*clhs636 + clhs34*clhs680 + clhs346*clhs637 + clhs355*clhs638 + clhs4*clhs678;
        lhs(4,15)=clhs24*clhs682 + clhs34*clhs683 + clhs367*clhs636 + clhs376*clhs637 + clhs385*clhs638 + clhs4*clhs681;
        lhs(4,16)=clhs24*clhs685 + clhs34*clhs686 + clhs397*clhs636 + clhs4*clhs684 + clhs406*clhs637 + clhs415*clhs638;
        lhs(4,17)=clhs24*clhs688 + clhs34*clhs689 + clhs4*clhs687 + clhs427*clhs636 + clhs436*clhs637 + clhs445*clhs638;
        lhs(4,18)=clhs24*clhs691 + clhs34*clhs692 + clhs4*clhs690 + clhs457*clhs636 + clhs466*clhs637 + clhs475*clhs638;
        lhs(4,19)=clhs24*clhs694 + clhs34*clhs695 + clhs4*clhs693 + clhs487*clhs636 + clhs496*clhs637 + clhs505*clhs638;
        lhs(4,20)=clhs24*clhs697 + clhs34*clhs698 + clhs4*clhs696 + clhs517*clhs636 + clhs526*clhs637 + clhs535*clhs638;
        lhs(4,21)=clhs24*clhs700 + clhs34*clhs701 + clhs4*clhs699 + clhs547*clhs636 + clhs556*clhs637 + clhs565*clhs638;
        lhs(4,22)=clhs24*clhs703 + clhs34*clhs704 + clhs4*clhs702 + clhs577*clhs636 + clhs586*clhs637 + clhs595*clhs638;
        lhs(4,23)=clhs24*clhs706 + clhs34*clhs707 + clhs4*clhs705 + clhs607*clhs636 + clhs616*clhs637 + clhs625*clhs638;
        lhs(4,24)=clhs4*clhs708;
        lhs(4,25)=clhs24*clhs709;
        lhs(4,26)=0;
        lhs(4,27)=clhs34*clhs710;
        lhs(5,0)=-clhs24*clhs712 + clhs25*clhs715 - clhs34*clhs713 + clhs35*clhs716 - clhs4*clhs711 + clhs5*clhs714;
        lhs(5,1)=-clhs24*clhs718 - clhs34*clhs719 - clhs4*clhs717 + clhs714*clhs73 + clhs715*clhs79 + clhs716*clhs85;
        lhs(5,2)=clhs103*clhs716 - clhs24*clhs721 - clhs34*clhs722 - clhs4*clhs720 + clhs714*clhs91 + clhs715*clhs97;
        lhs(5,3)=clhs109*clhs714 + clhs115*clhs715 + clhs121*clhs716 - clhs24*clhs724 - clhs34*clhs725 - clhs4*clhs723;
        lhs(5,4)=clhs127*clhs714 + clhs133*clhs715 + clhs139*clhs716 - clhs24*clhs727 - clhs34*clhs728 - clhs4*clhs726;
        lhs(5,5)=clhs145*clhs714 + clhs151*clhs715 + clhs157*clhs716 - clhs24*clhs730 - clhs34*clhs731 - clhs4*clhs729;
        lhs(5,6)=clhs163*clhs714 + clhs169*clhs715 + clhs175*clhs716 - clhs24*clhs733 - clhs34*clhs734 - clhs4*clhs732;
        lhs(5,7)=clhs181*clhs714 + clhs187*clhs715 + clhs193*clhs716 - clhs24*clhs736 - clhs34*clhs737 - clhs4*clhs735;
        lhs(5,8)=clhs199*clhs714 + clhs205*clhs715 + clhs211*clhs716 - clhs24*clhs739 - clhs34*clhs740 - clhs4*clhs738;
        lhs(5,9)=clhs217*clhs714 + clhs223*clhs715 + clhs229*clhs716 - clhs24*clhs742 - clhs34*clhs743 - clhs4*clhs741;
        lhs(5,10)=clhs235*clhs714 - clhs24*clhs745 + clhs241*clhs715 + clhs247*clhs716 - clhs34*clhs746 - clhs4*clhs744;
        lhs(5,11)=-clhs24*clhs748 + clhs253*clhs714 + clhs259*clhs715 + clhs265*clhs716 - clhs34*clhs749 - clhs4*clhs747;
        lhs(5,12)=clhs24*clhs751 + clhs277*clhs714 + clhs286*clhs715 + clhs295*clhs716 + clhs34*clhs752 + clhs4*clhs750;
        lhs(5,13)=clhs24*clhs754 + clhs307*clhs714 + clhs316*clhs715 + clhs325*clhs716 + clhs34*clhs755 + clhs4*clhs753;
        lhs(5,14)=clhs24*clhs757 + clhs337*clhs714 + clhs34*clhs758 + clhs346*clhs715 + clhs355*clhs716 + clhs4*clhs756;
        lhs(5,15)=clhs24*clhs760 + clhs34*clhs761 + clhs367*clhs714 + clhs376*clhs715 + clhs385*clhs716 + clhs4*clhs759;
        lhs(5,16)=clhs24*clhs763 + clhs34*clhs764 + clhs397*clhs714 + clhs4*clhs762 + clhs406*clhs715 + clhs415*clhs716;
        lhs(5,17)=clhs24*clhs766 + clhs34*clhs767 + clhs4*clhs765 + clhs427*clhs714 + clhs436*clhs715 + clhs445*clhs716;
        lhs(5,18)=clhs24*clhs769 + clhs34*clhs770 + clhs4*clhs768 + clhs457*clhs714 + clhs466*clhs715 + clhs475*clhs716;
        lhs(5,19)=clhs24*clhs772 + clhs34*clhs773 + clhs4*clhs771 + clhs487*clhs714 + clhs496*clhs715 + clhs505*clhs716;
        lhs(5,20)=clhs24*clhs775 + clhs34*clhs776 + clhs4*clhs774 + clhs517*clhs714 + clhs526*clhs715 + clhs535*clhs716;
        lhs(5,21)=clhs24*clhs778 + clhs34*clhs779 + clhs4*clhs777 + clhs547*clhs714 + clhs556*clhs715 + clhs565*clhs716;
        lhs(5,22)=clhs24*clhs781 + clhs34*clhs782 + clhs4*clhs780 + clhs577*clhs714 + clhs586*clhs715 + clhs595*clhs716;
        lhs(5,23)=clhs24*clhs784 + clhs34*clhs785 + clhs4*clhs783 + clhs607*clhs714 + clhs616*clhs715 + clhs625*clhs716;
        lhs(5,24)=clhs4*clhs786;
        lhs(5,25)=clhs24*clhs787;
        lhs(5,26)=0;
        lhs(5,27)=clhs34*clhs788;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs65 - clhs36*clhs41 + clhs37*clhs71 + clhs59*clhs8;
        lhs(6,1)=-clhs26*clhs83 - clhs36*clhs89 + clhs59*clhs74 + clhs65*clhs80 - clhs7*clhs77 + clhs71*clhs86;
        lhs(6,2)=-clhs101*clhs26 + clhs104*clhs71 - clhs107*clhs36 + clhs59*clhs92 + clhs65*clhs98 - clhs7*clhs95;
        lhs(6,3)=clhs110*clhs59 - clhs113*clhs7 + clhs116*clhs65 - clhs119*clhs26 + clhs122*clhs71 - clhs125*clhs36;
        lhs(6,4)=clhs128*clhs59 - clhs131*clhs7 + clhs134*clhs65 - clhs137*clhs26 + clhs140*clhs71 - clhs143*clhs36;
        lhs(6,5)=clhs146*clhs59 - clhs149*clhs7 + clhs152*clhs65 - clhs155*clhs26 + clhs158*clhs71 - clhs161*clhs36;
        lhs(6,6)=clhs164*clhs59 - clhs167*clhs7 + clhs170*clhs65 - clhs173*clhs26 + clhs176*clhs71 - clhs179*clhs36;
        lhs(6,7)=clhs182*clhs59 - clhs185*clhs7 + clhs188*clhs65 - clhs191*clhs26 + clhs194*clhs71 - clhs197*clhs36;
        lhs(6,8)=clhs200*clhs59 - clhs203*clhs7 + clhs206*clhs65 - clhs209*clhs26 + clhs212*clhs71 - clhs215*clhs36;
        lhs(6,9)=clhs218*clhs59 - clhs221*clhs7 + clhs224*clhs65 - clhs227*clhs26 + clhs230*clhs71 - clhs233*clhs36;
        lhs(6,10)=clhs236*clhs59 - clhs239*clhs7 + clhs242*clhs65 - clhs245*clhs26 + clhs248*clhs71 - clhs251*clhs36;
        lhs(6,11)=clhs254*clhs59 - clhs257*clhs7 - clhs26*clhs263 + clhs260*clhs65 + clhs266*clhs71 - clhs269*clhs36;
        lhs(6,12)=clhs26*clhs290 + clhs278*clhs59 + clhs281*clhs7 + clhs287*clhs65 + clhs296*clhs71 + clhs299*clhs36;
        lhs(6,13)=clhs26*clhs320 + clhs308*clhs59 + clhs311*clhs7 + clhs317*clhs65 + clhs326*clhs71 + clhs329*clhs36;
        lhs(6,14)=clhs26*clhs350 + clhs338*clhs59 + clhs341*clhs7 + clhs347*clhs65 + clhs356*clhs71 + clhs359*clhs36;
        lhs(6,15)=clhs26*clhs380 + clhs36*clhs389 + clhs368*clhs59 + clhs371*clhs7 + clhs377*clhs65 + clhs386*clhs71;
        lhs(6,16)=clhs26*clhs410 + clhs36*clhs419 + clhs398*clhs59 + clhs401*clhs7 + clhs407*clhs65 + clhs416*clhs71;
        lhs(6,17)=clhs26*clhs440 + clhs36*clhs449 + clhs428*clhs59 + clhs431*clhs7 + clhs437*clhs65 + clhs446*clhs71;
        lhs(6,18)=clhs26*clhs470 + clhs36*clhs479 + clhs458*clhs59 + clhs461*clhs7 + clhs467*clhs65 + clhs476*clhs71;
        lhs(6,19)=clhs26*clhs500 + clhs36*clhs509 + clhs488*clhs59 + clhs491*clhs7 + clhs497*clhs65 + clhs506*clhs71;
        lhs(6,20)=clhs26*clhs530 + clhs36*clhs539 + clhs518*clhs59 + clhs521*clhs7 + clhs527*clhs65 + clhs536*clhs71;
        lhs(6,21)=clhs26*clhs560 + clhs36*clhs569 + clhs548*clhs59 + clhs551*clhs7 + clhs557*clhs65 + clhs566*clhs71;
        lhs(6,22)=clhs26*clhs590 + clhs36*clhs599 + clhs578*clhs59 + clhs581*clhs7 + clhs587*clhs65 + clhs596*clhs71;
        lhs(6,23)=clhs26*clhs620 + clhs36*clhs629 + clhs59*clhs608 + clhs611*clhs7 + clhs617*clhs65 + clhs626*clhs71;
        lhs(6,24)=clhs630*clhs7;
        lhs(6,25)=clhs26*clhs631;
        lhs(6,26)=0;
        lhs(6,27)=clhs36*clhs632;
        lhs(7,0)=-clhs26*clhs634 + clhs27*clhs637 - clhs36*clhs635 + clhs37*clhs638 - clhs633*clhs7 + clhs636*clhs8;
        lhs(7,1)=-clhs26*clhs640 - clhs36*clhs641 + clhs636*clhs74 + clhs637*clhs80 + clhs638*clhs86 - clhs639*clhs7;
        lhs(7,2)=clhs104*clhs638 - clhs26*clhs643 - clhs36*clhs644 + clhs636*clhs92 + clhs637*clhs98 - clhs642*clhs7;
        lhs(7,3)=clhs110*clhs636 + clhs116*clhs637 + clhs122*clhs638 - clhs26*clhs646 - clhs36*clhs647 - clhs645*clhs7;
        lhs(7,4)=clhs128*clhs636 + clhs134*clhs637 + clhs140*clhs638 - clhs26*clhs649 - clhs36*clhs650 - clhs648*clhs7;
        lhs(7,5)=clhs146*clhs636 + clhs152*clhs637 + clhs158*clhs638 - clhs26*clhs652 - clhs36*clhs653 - clhs651*clhs7;
        lhs(7,6)=clhs164*clhs636 + clhs170*clhs637 + clhs176*clhs638 - clhs26*clhs655 - clhs36*clhs656 - clhs654*clhs7;
        lhs(7,7)=clhs182*clhs636 + clhs188*clhs637 + clhs194*clhs638 - clhs26*clhs658 - clhs36*clhs659 - clhs657*clhs7;
        lhs(7,8)=clhs200*clhs636 + clhs206*clhs637 + clhs212*clhs638 - clhs26*clhs661 - clhs36*clhs662 - clhs660*clhs7;
        lhs(7,9)=clhs218*clhs636 + clhs224*clhs637 + clhs230*clhs638 - clhs26*clhs664 - clhs36*clhs665 - clhs663*clhs7;
        lhs(7,10)=clhs236*clhs636 + clhs242*clhs637 + clhs248*clhs638 - clhs26*clhs667 - clhs36*clhs668 - clhs666*clhs7;
        lhs(7,11)=clhs254*clhs636 - clhs26*clhs670 + clhs260*clhs637 + clhs266*clhs638 - clhs36*clhs671 - clhs669*clhs7;
        lhs(7,12)=clhs26*clhs673 + clhs278*clhs636 + clhs287*clhs637 + clhs296*clhs638 + clhs36*clhs674 + clhs672*clhs7;
        lhs(7,13)=clhs26*clhs676 + clhs308*clhs636 + clhs317*clhs637 + clhs326*clhs638 + clhs36*clhs677 + clhs675*clhs7;
        lhs(7,14)=clhs26*clhs679 + clhs338*clhs636 + clhs347*clhs637 + clhs356*clhs638 + clhs36*clhs680 + clhs678*clhs7;
        lhs(7,15)=clhs26*clhs682 + clhs36*clhs683 + clhs368*clhs636 + clhs377*clhs637 + clhs386*clhs638 + clhs681*clhs7;
        lhs(7,16)=clhs26*clhs685 + clhs36*clhs686 + clhs398*clhs636 + clhs407*clhs637 + clhs416*clhs638 + clhs684*clhs7;
        lhs(7,17)=clhs26*clhs688 + clhs36*clhs689 + clhs428*clhs636 + clhs437*clhs637 + clhs446*clhs638 + clhs687*clhs7;
        lhs(7,18)=clhs26*clhs691 + clhs36*clhs692 + clhs458*clhs636 + clhs467*clhs637 + clhs476*clhs638 + clhs690*clhs7;
        lhs(7,19)=clhs26*clhs694 + clhs36*clhs695 + clhs488*clhs636 + clhs497*clhs637 + clhs506*clhs638 + clhs693*clhs7;
        lhs(7,20)=clhs26*clhs697 + clhs36*clhs698 + clhs518*clhs636 + clhs527*clhs637 + clhs536*clhs638 + clhs696*clhs7;
        lhs(7,21)=clhs26*clhs700 + clhs36*clhs701 + clhs548*clhs636 + clhs557*clhs637 + clhs566*clhs638 + clhs699*clhs7;
        lhs(7,22)=clhs26*clhs703 + clhs36*clhs704 + clhs578*clhs636 + clhs587*clhs637 + clhs596*clhs638 + clhs7*clhs702;
        lhs(7,23)=clhs26*clhs706 + clhs36*clhs707 + clhs608*clhs636 + clhs617*clhs637 + clhs626*clhs638 + clhs7*clhs705;
        lhs(7,24)=clhs7*clhs708;
        lhs(7,25)=clhs26*clhs709;
        lhs(7,26)=0;
        lhs(7,27)=clhs36*clhs710;
        lhs(8,0)=-clhs26*clhs712 + clhs27*clhs715 - clhs36*clhs713 + clhs37*clhs716 - clhs7*clhs711 + clhs714*clhs8;
        lhs(8,1)=-clhs26*clhs718 - clhs36*clhs719 - clhs7*clhs717 + clhs714*clhs74 + clhs715*clhs80 + clhs716*clhs86;
        lhs(8,2)=clhs104*clhs716 - clhs26*clhs721 - clhs36*clhs722 - clhs7*clhs720 + clhs714*clhs92 + clhs715*clhs98;
        lhs(8,3)=clhs110*clhs714 + clhs116*clhs715 + clhs122*clhs716 - clhs26*clhs724 - clhs36*clhs725 - clhs7*clhs723;
        lhs(8,4)=clhs128*clhs714 + clhs134*clhs715 + clhs140*clhs716 - clhs26*clhs727 - clhs36*clhs728 - clhs7*clhs726;
        lhs(8,5)=clhs146*clhs714 + clhs152*clhs715 + clhs158*clhs716 - clhs26*clhs730 - clhs36*clhs731 - clhs7*clhs729;
        lhs(8,6)=clhs164*clhs714 + clhs170*clhs715 + clhs176*clhs716 - clhs26*clhs733 - clhs36*clhs734 - clhs7*clhs732;
        lhs(8,7)=clhs182*clhs714 + clhs188*clhs715 + clhs194*clhs716 - clhs26*clhs736 - clhs36*clhs737 - clhs7*clhs735;
        lhs(8,8)=clhs200*clhs714 + clhs206*clhs715 + clhs212*clhs716 - clhs26*clhs739 - clhs36*clhs740 - clhs7*clhs738;
        lhs(8,9)=clhs218*clhs714 + clhs224*clhs715 + clhs230*clhs716 - clhs26*clhs742 - clhs36*clhs743 - clhs7*clhs741;
        lhs(8,10)=clhs236*clhs714 + clhs242*clhs715 + clhs248*clhs716 - clhs26*clhs745 - clhs36*clhs746 - clhs7*clhs744;
        lhs(8,11)=clhs254*clhs714 - clhs26*clhs748 + clhs260*clhs715 + clhs266*clhs716 - clhs36*clhs749 - clhs7*clhs747;
        lhs(8,12)=clhs26*clhs751 + clhs278*clhs714 + clhs287*clhs715 + clhs296*clhs716 + clhs36*clhs752 + clhs7*clhs750;
        lhs(8,13)=clhs26*clhs754 + clhs308*clhs714 + clhs317*clhs715 + clhs326*clhs716 + clhs36*clhs755 + clhs7*clhs753;
        lhs(8,14)=clhs26*clhs757 + clhs338*clhs714 + clhs347*clhs715 + clhs356*clhs716 + clhs36*clhs758 + clhs7*clhs756;
        lhs(8,15)=clhs26*clhs760 + clhs36*clhs761 + clhs368*clhs714 + clhs377*clhs715 + clhs386*clhs716 + clhs7*clhs759;
        lhs(8,16)=clhs26*clhs763 + clhs36*clhs764 + clhs398*clhs714 + clhs407*clhs715 + clhs416*clhs716 + clhs7*clhs762;
        lhs(8,17)=clhs26*clhs766 + clhs36*clhs767 + clhs428*clhs714 + clhs437*clhs715 + clhs446*clhs716 + clhs7*clhs765;
        lhs(8,18)=clhs26*clhs769 + clhs36*clhs770 + clhs458*clhs714 + clhs467*clhs715 + clhs476*clhs716 + clhs7*clhs768;
        lhs(8,19)=clhs26*clhs772 + clhs36*clhs773 + clhs488*clhs714 + clhs497*clhs715 + clhs506*clhs716 + clhs7*clhs771;
        lhs(8,20)=clhs26*clhs775 + clhs36*clhs776 + clhs518*clhs714 + clhs527*clhs715 + clhs536*clhs716 + clhs7*clhs774;
        lhs(8,21)=clhs26*clhs778 + clhs36*clhs779 + clhs548*clhs714 + clhs557*clhs715 + clhs566*clhs716 + clhs7*clhs777;
        lhs(8,22)=clhs26*clhs781 + clhs36*clhs782 + clhs578*clhs714 + clhs587*clhs715 + clhs596*clhs716 + clhs7*clhs780;
        lhs(8,23)=clhs26*clhs784 + clhs36*clhs785 + clhs608*clhs714 + clhs617*clhs715 + clhs626*clhs716 + clhs7*clhs783;
        lhs(8,24)=clhs7*clhs786;
        lhs(8,25)=clhs26*clhs787;
        lhs(8,26)=0;
        lhs(8,27)=clhs36*clhs788;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs59 - clhs28*clhs31 + clhs29*clhs65 - clhs38*clhs41 + clhs39*clhs71;
        lhs(9,1)=-clhs10*clhs77 - clhs28*clhs83 - clhs38*clhs89 + clhs59*clhs75 + clhs65*clhs81 + clhs71*clhs87;
        lhs(9,2)=-clhs10*clhs95 - clhs101*clhs28 + clhs105*clhs71 - clhs107*clhs38 + clhs59*clhs93 + clhs65*clhs99;
        lhs(9,3)=-clhs10*clhs113 + clhs111*clhs59 + clhs117*clhs65 - clhs119*clhs28 + clhs123*clhs71 - clhs125*clhs38;
        lhs(9,4)=-clhs10*clhs131 + clhs129*clhs59 + clhs135*clhs65 - clhs137*clhs28 + clhs141*clhs71 - clhs143*clhs38;
        lhs(9,5)=-clhs10*clhs149 + clhs147*clhs59 + clhs153*clhs65 - clhs155*clhs28 + clhs159*clhs71 - clhs161*clhs38;
        lhs(9,6)=-clhs10*clhs167 + clhs165*clhs59 + clhs171*clhs65 - clhs173*clhs28 + clhs177*clhs71 - clhs179*clhs38;
        lhs(9,7)=-clhs10*clhs185 + clhs183*clhs59 + clhs189*clhs65 - clhs191*clhs28 + clhs195*clhs71 - clhs197*clhs38;
        lhs(9,8)=-clhs10*clhs203 + clhs201*clhs59 + clhs207*clhs65 - clhs209*clhs28 + clhs213*clhs71 - clhs215*clhs38;
        lhs(9,9)=-clhs10*clhs221 + clhs219*clhs59 + clhs225*clhs65 - clhs227*clhs28 + clhs231*clhs71 - clhs233*clhs38;
        lhs(9,10)=-clhs10*clhs239 + clhs237*clhs59 + clhs243*clhs65 - clhs245*clhs28 + clhs249*clhs71 - clhs251*clhs38;
        lhs(9,11)=-clhs10*clhs257 + clhs255*clhs59 + clhs261*clhs65 - clhs263*clhs28 + clhs267*clhs71 - clhs269*clhs38;
        lhs(9,12)=clhs10*clhs281 + clhs279*clhs59 + clhs28*clhs290 + clhs288*clhs65 + clhs297*clhs71 + clhs299*clhs38;
        lhs(9,13)=clhs10*clhs311 + clhs28*clhs320 + clhs309*clhs59 + clhs318*clhs65 + clhs327*clhs71 + clhs329*clhs38;
        lhs(9,14)=clhs10*clhs341 + clhs28*clhs350 + clhs339*clhs59 + clhs348*clhs65 + clhs357*clhs71 + clhs359*clhs38;
        lhs(9,15)=clhs10*clhs371 + clhs28*clhs380 + clhs369*clhs59 + clhs378*clhs65 + clhs38*clhs389 + clhs387*clhs71;
        lhs(9,16)=clhs10*clhs401 + clhs28*clhs410 + clhs38*clhs419 + clhs399*clhs59 + clhs408*clhs65 + clhs417*clhs71;
        lhs(9,17)=clhs10*clhs431 + clhs28*clhs440 + clhs38*clhs449 + clhs429*clhs59 + clhs438*clhs65 + clhs447*clhs71;
        lhs(9,18)=clhs10*clhs461 + clhs28*clhs470 + clhs38*clhs479 + clhs459*clhs59 + clhs468*clhs65 + clhs477*clhs71;
        lhs(9,19)=clhs10*clhs491 + clhs28*clhs500 + clhs38*clhs509 + clhs489*clhs59 + clhs498*clhs65 + clhs507*clhs71;
        lhs(9,20)=clhs10*clhs521 + clhs28*clhs530 + clhs38*clhs539 + clhs519*clhs59 + clhs528*clhs65 + clhs537*clhs71;
        lhs(9,21)=clhs10*clhs551 + clhs28*clhs560 + clhs38*clhs569 + clhs549*clhs59 + clhs558*clhs65 + clhs567*clhs71;
        lhs(9,22)=clhs10*clhs581 + clhs28*clhs590 + clhs38*clhs599 + clhs579*clhs59 + clhs588*clhs65 + clhs597*clhs71;
        lhs(9,23)=clhs10*clhs611 + clhs28*clhs620 + clhs38*clhs629 + clhs59*clhs609 + clhs618*clhs65 + clhs627*clhs71;
        lhs(9,24)=clhs10*clhs630;
        lhs(9,25)=clhs28*clhs631;
        lhs(9,26)=0;
        lhs(9,27)=clhs38*clhs632;
        lhs(10,0)=-clhs10*clhs633 + clhs11*clhs636 - clhs28*clhs634 + clhs29*clhs637 - clhs38*clhs635 + clhs39*clhs638;
        lhs(10,1)=-clhs10*clhs639 - clhs28*clhs640 - clhs38*clhs641 + clhs636*clhs75 + clhs637*clhs81 + clhs638*clhs87;
        lhs(10,2)=-clhs10*clhs642 + clhs105*clhs638 - clhs28*clhs643 - clhs38*clhs644 + clhs636*clhs93 + clhs637*clhs99;
        lhs(10,3)=-clhs10*clhs645 + clhs111*clhs636 + clhs117*clhs637 + clhs123*clhs638 - clhs28*clhs646 - clhs38*clhs647;
        lhs(10,4)=-clhs10*clhs648 + clhs129*clhs636 + clhs135*clhs637 + clhs141*clhs638 - clhs28*clhs649 - clhs38*clhs650;
        lhs(10,5)=-clhs10*clhs651 + clhs147*clhs636 + clhs153*clhs637 + clhs159*clhs638 - clhs28*clhs652 - clhs38*clhs653;
        lhs(10,6)=-clhs10*clhs654 + clhs165*clhs636 + clhs171*clhs637 + clhs177*clhs638 - clhs28*clhs655 - clhs38*clhs656;
        lhs(10,7)=-clhs10*clhs657 + clhs183*clhs636 + clhs189*clhs637 + clhs195*clhs638 - clhs28*clhs658 - clhs38*clhs659;
        lhs(10,8)=-clhs10*clhs660 + clhs201*clhs636 + clhs207*clhs637 + clhs213*clhs638 - clhs28*clhs661 - clhs38*clhs662;
        lhs(10,9)=-clhs10*clhs663 + clhs219*clhs636 + clhs225*clhs637 + clhs231*clhs638 - clhs28*clhs664 - clhs38*clhs665;
        lhs(10,10)=-clhs10*clhs666 + clhs237*clhs636 + clhs243*clhs637 + clhs249*clhs638 - clhs28*clhs667 - clhs38*clhs668;
        lhs(10,11)=-clhs10*clhs669 + clhs255*clhs636 + clhs261*clhs637 + clhs267*clhs638 - clhs28*clhs670 - clhs38*clhs671;
        lhs(10,12)=clhs10*clhs672 + clhs279*clhs636 + clhs28*clhs673 + clhs288*clhs637 + clhs297*clhs638 + clhs38*clhs674;
        lhs(10,13)=clhs10*clhs675 + clhs28*clhs676 + clhs309*clhs636 + clhs318*clhs637 + clhs327*clhs638 + clhs38*clhs677;
        lhs(10,14)=clhs10*clhs678 + clhs28*clhs679 + clhs339*clhs636 + clhs348*clhs637 + clhs357*clhs638 + clhs38*clhs680;
        lhs(10,15)=clhs10*clhs681 + clhs28*clhs682 + clhs369*clhs636 + clhs378*clhs637 + clhs38*clhs683 + clhs387*clhs638;
        lhs(10,16)=clhs10*clhs684 + clhs28*clhs685 + clhs38*clhs686 + clhs399*clhs636 + clhs408*clhs637 + clhs417*clhs638;
        lhs(10,17)=clhs10*clhs687 + clhs28*clhs688 + clhs38*clhs689 + clhs429*clhs636 + clhs438*clhs637 + clhs447*clhs638;
        lhs(10,18)=clhs10*clhs690 + clhs28*clhs691 + clhs38*clhs692 + clhs459*clhs636 + clhs468*clhs637 + clhs477*clhs638;
        lhs(10,19)=clhs10*clhs693 + clhs28*clhs694 + clhs38*clhs695 + clhs489*clhs636 + clhs498*clhs637 + clhs507*clhs638;
        lhs(10,20)=clhs10*clhs696 + clhs28*clhs697 + clhs38*clhs698 + clhs519*clhs636 + clhs528*clhs637 + clhs537*clhs638;
        lhs(10,21)=clhs10*clhs699 + clhs28*clhs700 + clhs38*clhs701 + clhs549*clhs636 + clhs558*clhs637 + clhs567*clhs638;
        lhs(10,22)=clhs10*clhs702 + clhs28*clhs703 + clhs38*clhs704 + clhs579*clhs636 + clhs588*clhs637 + clhs597*clhs638;
        lhs(10,23)=clhs10*clhs705 + clhs28*clhs706 + clhs38*clhs707 + clhs609*clhs636 + clhs618*clhs637 + clhs627*clhs638;
        lhs(10,24)=clhs10*clhs708;
        lhs(10,25)=clhs28*clhs709;
        lhs(10,26)=0;
        lhs(10,27)=clhs38*clhs710;
        lhs(11,0)=-clhs10*clhs711 + clhs11*clhs714 - clhs28*clhs712 + clhs29*clhs715 - clhs38*clhs713 + clhs39*clhs716;
        lhs(11,1)=-clhs10*clhs717 - clhs28*clhs718 - clhs38*clhs719 + clhs714*clhs75 + clhs715*clhs81 + clhs716*clhs87;
        lhs(11,2)=-clhs10*clhs720 + clhs105*clhs716 - clhs28*clhs721 - clhs38*clhs722 + clhs714*clhs93 + clhs715*clhs99;
        lhs(11,3)=-clhs10*clhs723 + clhs111*clhs714 + clhs117*clhs715 + clhs123*clhs716 - clhs28*clhs724 - clhs38*clhs725;
        lhs(11,4)=-clhs10*clhs726 + clhs129*clhs714 + clhs135*clhs715 + clhs141*clhs716 - clhs28*clhs727 - clhs38*clhs728;
        lhs(11,5)=-clhs10*clhs729 + clhs147*clhs714 + clhs153*clhs715 + clhs159*clhs716 - clhs28*clhs730 - clhs38*clhs731;
        lhs(11,6)=-clhs10*clhs732 + clhs165*clhs714 + clhs171*clhs715 + clhs177*clhs716 - clhs28*clhs733 - clhs38*clhs734;
        lhs(11,7)=-clhs10*clhs735 + clhs183*clhs714 + clhs189*clhs715 + clhs195*clhs716 - clhs28*clhs736 - clhs38*clhs737;
        lhs(11,8)=-clhs10*clhs738 + clhs201*clhs714 + clhs207*clhs715 + clhs213*clhs716 - clhs28*clhs739 - clhs38*clhs740;
        lhs(11,9)=-clhs10*clhs741 + clhs219*clhs714 + clhs225*clhs715 + clhs231*clhs716 - clhs28*clhs742 - clhs38*clhs743;
        lhs(11,10)=-clhs10*clhs744 + clhs237*clhs714 + clhs243*clhs715 + clhs249*clhs716 - clhs28*clhs745 - clhs38*clhs746;
        lhs(11,11)=-clhs10*clhs747 + clhs255*clhs714 + clhs261*clhs715 + clhs267*clhs716 - clhs28*clhs748 - clhs38*clhs749;
        lhs(11,12)=clhs10*clhs750 + clhs279*clhs714 + clhs28*clhs751 + clhs288*clhs715 + clhs297*clhs716 + clhs38*clhs752;
        lhs(11,13)=clhs10*clhs753 + clhs28*clhs754 + clhs309*clhs714 + clhs318*clhs715 + clhs327*clhs716 + clhs38*clhs755;
        lhs(11,14)=clhs10*clhs756 + clhs28*clhs757 + clhs339*clhs714 + clhs348*clhs715 + clhs357*clhs716 + clhs38*clhs758;
        lhs(11,15)=clhs10*clhs759 + clhs28*clhs760 + clhs369*clhs714 + clhs378*clhs715 + clhs38*clhs761 + clhs387*clhs716;
        lhs(11,16)=clhs10*clhs762 + clhs28*clhs763 + clhs38*clhs764 + clhs399*clhs714 + clhs408*clhs715 + clhs417*clhs716;
        lhs(11,17)=clhs10*clhs765 + clhs28*clhs766 + clhs38*clhs767 + clhs429*clhs714 + clhs438*clhs715 + clhs447*clhs716;
        lhs(11,18)=clhs10*clhs768 + clhs28*clhs769 + clhs38*clhs770 + clhs459*clhs714 + clhs468*clhs715 + clhs477*clhs716;
        lhs(11,19)=clhs10*clhs771 + clhs28*clhs772 + clhs38*clhs773 + clhs489*clhs714 + clhs498*clhs715 + clhs507*clhs716;
        lhs(11,20)=clhs10*clhs774 + clhs28*clhs775 + clhs38*clhs776 + clhs519*clhs714 + clhs528*clhs715 + clhs537*clhs716;
        lhs(11,21)=clhs10*clhs777 + clhs28*clhs778 + clhs38*clhs779 + clhs549*clhs714 + clhs558*clhs715 + clhs567*clhs716;
        lhs(11,22)=clhs10*clhs780 + clhs28*clhs781 + clhs38*clhs782 + clhs579*clhs714 + clhs588*clhs715 + clhs597*clhs716;
        lhs(11,23)=clhs10*clhs783 + clhs28*clhs784 + clhs38*clhs785 + clhs609*clhs714 + clhs618*clhs715 + clhs627*clhs716;
        lhs(11,24)=clhs10*clhs786;
        lhs(11,25)=clhs28*clhs787;
        lhs(11,26)=0;
        lhs(11,27)=clhs38*clhs788;
        lhs(12,0)=penalty_parameter*(clhs43*clhs789 + clhs60*clhs790 + clhs66*clhs791);
        lhs(12,1)=penalty_parameter*(clhs43*clhs792 + clhs60*clhs793 + clhs66*clhs794);
        lhs(12,2)=penalty_parameter*(clhs43*clhs795 + clhs60*clhs796 + clhs66*clhs797);
        lhs(12,3)=penalty_parameter*(clhs43*clhs798 + clhs60*clhs799 + clhs66*clhs800);
        lhs(12,4)=penalty_parameter*(clhs43*clhs801 + clhs60*clhs802 + clhs66*clhs803);
        lhs(12,5)=penalty_parameter*(clhs43*clhs804 + clhs60*clhs805 + clhs66*clhs806);
        lhs(12,6)=penalty_parameter*(clhs43*clhs807 + clhs60*clhs808 + clhs66*clhs809);
        lhs(12,7)=penalty_parameter*(clhs43*clhs810 + clhs60*clhs811 + clhs66*clhs812);
        lhs(12,8)=penalty_parameter*(clhs43*clhs813 + clhs60*clhs814 + clhs66*clhs815);
        lhs(12,9)=penalty_parameter*(clhs43*clhs816 + clhs60*clhs817 + clhs66*clhs818);
        lhs(12,10)=penalty_parameter*(clhs43*clhs819 + clhs60*clhs820 + clhs66*clhs821);
        lhs(12,11)=penalty_parameter*(clhs43*clhs822 + clhs60*clhs823 + clhs66*clhs824);
        lhs(12,12)=-clhs273*clhs59 - clhs281*clhs43 - clhs282*clhs65 - clhs290*clhs60 - clhs291*clhs71 - clhs299*clhs66;
        lhs(12,13)=-clhs303*clhs59 - clhs311*clhs43 - clhs312*clhs65 - clhs320*clhs60 - clhs321*clhs71 - clhs329*clhs66;
        lhs(12,14)=-clhs333*clhs59 - clhs341*clhs43 - clhs342*clhs65 - clhs350*clhs60 - clhs351*clhs71 - clhs359*clhs66;
        lhs(12,15)=-clhs363*clhs59 - clhs371*clhs43 - clhs372*clhs65 - clhs380*clhs60 - clhs381*clhs71 - clhs389*clhs66;
        lhs(12,16)=-clhs393*clhs59 - clhs401*clhs43 - clhs402*clhs65 - clhs410*clhs60 - clhs411*clhs71 - clhs419*clhs66;
        lhs(12,17)=-clhs423*clhs59 - clhs43*clhs431 - clhs432*clhs65 - clhs440*clhs60 - clhs441*clhs71 - clhs449*clhs66;
        lhs(12,18)=-clhs43*clhs461 - clhs453*clhs59 - clhs462*clhs65 - clhs470*clhs60 - clhs471*clhs71 - clhs479*clhs66;
        lhs(12,19)=-clhs43*clhs491 - clhs483*clhs59 - clhs492*clhs65 - clhs500*clhs60 - clhs501*clhs71 - clhs509*clhs66;
        lhs(12,20)=-clhs43*clhs521 - clhs513*clhs59 - clhs522*clhs65 - clhs530*clhs60 - clhs531*clhs71 - clhs539*clhs66;
        lhs(12,21)=-clhs43*clhs551 - clhs543*clhs59 - clhs552*clhs65 - clhs560*clhs60 - clhs561*clhs71 - clhs569*clhs66;
        lhs(12,22)=-clhs43*clhs581 - clhs573*clhs59 - clhs582*clhs65 - clhs590*clhs60 - clhs591*clhs71 - clhs599*clhs66;
        lhs(12,23)=-clhs43*clhs611 - clhs59*clhs603 - clhs60*clhs620 - clhs612*clhs65 - clhs621*clhs71 - clhs629*clhs66;
        lhs(12,24)=-clhs43*clhs630;
        lhs(12,25)=-clhs60*clhs631;
        lhs(12,26)=0;
        lhs(12,27)=-clhs632*clhs66;
        lhs(13,0)=penalty_parameter*(clhs43*clhs825 + clhs60*clhs826 + clhs66*clhs827);
        lhs(13,1)=penalty_parameter*(clhs43*clhs828 + clhs60*clhs829 + clhs66*clhs830);
        lhs(13,2)=penalty_parameter*(clhs43*clhs831 + clhs60*clhs832 + clhs66*clhs833);
        lhs(13,3)=penalty_parameter*(clhs43*clhs834 + clhs60*clhs835 + clhs66*clhs836);
        lhs(13,4)=penalty_parameter*(clhs43*clhs837 + clhs60*clhs838 + clhs66*clhs839);
        lhs(13,5)=penalty_parameter*(clhs43*clhs840 + clhs60*clhs841 + clhs66*clhs842);
        lhs(13,6)=penalty_parameter*(clhs43*clhs843 + clhs60*clhs844 + clhs66*clhs845);
        lhs(13,7)=penalty_parameter*(clhs43*clhs846 + clhs60*clhs847 + clhs66*clhs848);
        lhs(13,8)=penalty_parameter*(clhs43*clhs849 + clhs60*clhs850 + clhs66*clhs851);
        lhs(13,9)=penalty_parameter*(clhs43*clhs852 + clhs60*clhs853 + clhs66*clhs854);
        lhs(13,10)=penalty_parameter*(clhs43*clhs855 + clhs60*clhs856 + clhs66*clhs857);
        lhs(13,11)=penalty_parameter*(clhs43*clhs858 + clhs60*clhs859 + clhs66*clhs860);
        lhs(13,12)=-clhs273*clhs636 - clhs282*clhs637 - clhs291*clhs638 - clhs43*clhs672 - clhs60*clhs673 - clhs66*clhs674;
        lhs(13,13)=-clhs303*clhs636 - clhs312*clhs637 - clhs321*clhs638 - clhs43*clhs675 - clhs60*clhs676 - clhs66*clhs677;
        lhs(13,14)=-clhs333*clhs636 - clhs342*clhs637 - clhs351*clhs638 - clhs43*clhs678 - clhs60*clhs679 - clhs66*clhs680;
        lhs(13,15)=-clhs363*clhs636 - clhs372*clhs637 - clhs381*clhs638 - clhs43*clhs681 - clhs60*clhs682 - clhs66*clhs683;
        lhs(13,16)=-clhs393*clhs636 - clhs402*clhs637 - clhs411*clhs638 - clhs43*clhs684 - clhs60*clhs685 - clhs66*clhs686;
        lhs(13,17)=-clhs423*clhs636 - clhs43*clhs687 - clhs432*clhs637 - clhs441*clhs638 - clhs60*clhs688 - clhs66*clhs689;
        lhs(13,18)=-clhs43*clhs690 - clhs453*clhs636 - clhs462*clhs637 - clhs471*clhs638 - clhs60*clhs691 - clhs66*clhs692;
        lhs(13,19)=-clhs43*clhs693 - clhs483*clhs636 - clhs492*clhs637 - clhs501*clhs638 - clhs60*clhs694 - clhs66*clhs695;
        lhs(13,20)=-clhs43*clhs696 - clhs513*clhs636 - clhs522*clhs637 - clhs531*clhs638 - clhs60*clhs697 - clhs66*clhs698;
        lhs(13,21)=-clhs43*clhs699 - clhs543*clhs636 - clhs552*clhs637 - clhs561*clhs638 - clhs60*clhs700 - clhs66*clhs701;
        lhs(13,22)=-clhs43*clhs702 - clhs573*clhs636 - clhs582*clhs637 - clhs591*clhs638 - clhs60*clhs703 - clhs66*clhs704;
        lhs(13,23)=-clhs43*clhs705 - clhs60*clhs706 - clhs603*clhs636 - clhs612*clhs637 - clhs621*clhs638 - clhs66*clhs707;
        lhs(13,24)=-clhs43*clhs708;
        lhs(13,25)=-clhs60*clhs709;
        lhs(13,26)=0;
        lhs(13,27)=-clhs66*clhs710;
        lhs(14,0)=penalty_parameter*(clhs43*clhs861 + clhs60*clhs862 + clhs66*clhs863);
        lhs(14,1)=penalty_parameter*(clhs43*clhs864 + clhs60*clhs865 + clhs66*clhs866);
        lhs(14,2)=penalty_parameter*(clhs43*clhs867 + clhs60*clhs868 + clhs66*clhs869);
        lhs(14,3)=penalty_parameter*(clhs43*clhs870 + clhs60*clhs871 + clhs66*clhs872);
        lhs(14,4)=penalty_parameter*(clhs43*clhs873 + clhs60*clhs874 + clhs66*clhs875);
        lhs(14,5)=penalty_parameter*(clhs43*clhs876 + clhs60*clhs877 + clhs66*clhs878);
        lhs(14,6)=penalty_parameter*(clhs43*clhs879 + clhs60*clhs880 + clhs66*clhs881);
        lhs(14,7)=penalty_parameter*(clhs43*clhs882 + clhs60*clhs883 + clhs66*clhs884);
        lhs(14,8)=penalty_parameter*(clhs43*clhs885 + clhs60*clhs886 + clhs66*clhs887);
        lhs(14,9)=penalty_parameter*(clhs43*clhs888 + clhs60*clhs889 + clhs66*clhs890);
        lhs(14,10)=penalty_parameter*(clhs43*clhs891 + clhs60*clhs892 + clhs66*clhs893);
        lhs(14,11)=penalty_parameter*(clhs43*clhs894 + clhs60*clhs895 + clhs66*clhs896);
        lhs(14,12)=-clhs273*clhs714 - clhs282*clhs715 - clhs291*clhs716 - clhs43*clhs750 - clhs60*clhs751 - clhs66*clhs752;
        lhs(14,13)=-clhs303*clhs714 - clhs312*clhs715 - clhs321*clhs716 - clhs43*clhs753 - clhs60*clhs754 - clhs66*clhs755;
        lhs(14,14)=-clhs333*clhs714 - clhs342*clhs715 - clhs351*clhs716 - clhs43*clhs756 - clhs60*clhs757 - clhs66*clhs758;
        lhs(14,15)=-clhs363*clhs714 - clhs372*clhs715 - clhs381*clhs716 - clhs43*clhs759 - clhs60*clhs760 - clhs66*clhs761;
        lhs(14,16)=-clhs393*clhs714 - clhs402*clhs715 - clhs411*clhs716 - clhs43*clhs762 - clhs60*clhs763 - clhs66*clhs764;
        lhs(14,17)=-clhs423*clhs714 - clhs43*clhs765 - clhs432*clhs715 - clhs441*clhs716 - clhs60*clhs766 - clhs66*clhs767;
        lhs(14,18)=-clhs43*clhs768 - clhs453*clhs714 - clhs462*clhs715 - clhs471*clhs716 - clhs60*clhs769 - clhs66*clhs770;
        lhs(14,19)=-clhs43*clhs771 - clhs483*clhs714 - clhs492*clhs715 - clhs501*clhs716 - clhs60*clhs772 - clhs66*clhs773;
        lhs(14,20)=-clhs43*clhs774 - clhs513*clhs714 - clhs522*clhs715 - clhs531*clhs716 - clhs60*clhs775 - clhs66*clhs776;
        lhs(14,21)=-clhs43*clhs777 - clhs543*clhs714 - clhs552*clhs715 - clhs561*clhs716 - clhs60*clhs778 - clhs66*clhs779;
        lhs(14,22)=-clhs43*clhs780 - clhs573*clhs714 - clhs582*clhs715 - clhs591*clhs716 - clhs60*clhs781 - clhs66*clhs782;
        lhs(14,23)=-clhs43*clhs783 - clhs60*clhs784 - clhs603*clhs714 - clhs612*clhs715 - clhs621*clhs716 - clhs66*clhs785;
        lhs(14,24)=-clhs43*clhs786;
        lhs(14,25)=-clhs60*clhs787;
        lhs(14,26)=0;
        lhs(14,27)=-clhs66*clhs788;
        lhs(15,0)=penalty_parameter*(clhs45*clhs789 + clhs61*clhs790 + clhs67*clhs791);
        lhs(15,1)=penalty_parameter*(clhs45*clhs792 + clhs61*clhs793 + clhs67*clhs794);
        lhs(15,2)=penalty_parameter*(clhs45*clhs795 + clhs61*clhs796 + clhs67*clhs797);
        lhs(15,3)=penalty_parameter*(clhs45*clhs798 + clhs61*clhs799 + clhs67*clhs800);
        lhs(15,4)=penalty_parameter*(clhs45*clhs801 + clhs61*clhs802 + clhs67*clhs803);
        lhs(15,5)=penalty_parameter*(clhs45*clhs804 + clhs61*clhs805 + clhs67*clhs806);
        lhs(15,6)=penalty_parameter*(clhs45*clhs807 + clhs61*clhs808 + clhs67*clhs809);
        lhs(15,7)=penalty_parameter*(clhs45*clhs810 + clhs61*clhs811 + clhs67*clhs812);
        lhs(15,8)=penalty_parameter*(clhs45*clhs813 + clhs61*clhs814 + clhs67*clhs815);
        lhs(15,9)=penalty_parameter*(clhs45*clhs816 + clhs61*clhs817 + clhs67*clhs818);
        lhs(15,10)=penalty_parameter*(clhs45*clhs819 + clhs61*clhs820 + clhs67*clhs821);
        lhs(15,11)=penalty_parameter*(clhs45*clhs822 + clhs61*clhs823 + clhs67*clhs824);
        lhs(15,12)=-clhs274*clhs59 - clhs281*clhs45 - clhs283*clhs65 - clhs290*clhs61 - clhs292*clhs71 - clhs299*clhs67;
        lhs(15,13)=-clhs304*clhs59 - clhs311*clhs45 - clhs313*clhs65 - clhs320*clhs61 - clhs322*clhs71 - clhs329*clhs67;
        lhs(15,14)=-clhs334*clhs59 - clhs341*clhs45 - clhs343*clhs65 - clhs350*clhs61 - clhs352*clhs71 - clhs359*clhs67;
        lhs(15,15)=-clhs364*clhs59 - clhs371*clhs45 - clhs373*clhs65 - clhs380*clhs61 - clhs382*clhs71 - clhs389*clhs67;
        lhs(15,16)=-clhs394*clhs59 - clhs401*clhs45 - clhs403*clhs65 - clhs410*clhs61 - clhs412*clhs71 - clhs419*clhs67;
        lhs(15,17)=-clhs424*clhs59 - clhs431*clhs45 - clhs433*clhs65 - clhs440*clhs61 - clhs442*clhs71 - clhs449*clhs67;
        lhs(15,18)=-clhs45*clhs461 - clhs454*clhs59 - clhs463*clhs65 - clhs470*clhs61 - clhs472*clhs71 - clhs479*clhs67;
        lhs(15,19)=-clhs45*clhs491 - clhs484*clhs59 - clhs493*clhs65 - clhs500*clhs61 - clhs502*clhs71 - clhs509*clhs67;
        lhs(15,20)=-clhs45*clhs521 - clhs514*clhs59 - clhs523*clhs65 - clhs530*clhs61 - clhs532*clhs71 - clhs539*clhs67;
        lhs(15,21)=-clhs45*clhs551 - clhs544*clhs59 - clhs553*clhs65 - clhs560*clhs61 - clhs562*clhs71 - clhs569*clhs67;
        lhs(15,22)=-clhs45*clhs581 - clhs574*clhs59 - clhs583*clhs65 - clhs590*clhs61 - clhs592*clhs71 - clhs599*clhs67;
        lhs(15,23)=-clhs45*clhs611 - clhs59*clhs604 - clhs61*clhs620 - clhs613*clhs65 - clhs622*clhs71 - clhs629*clhs67;
        lhs(15,24)=-clhs45*clhs630;
        lhs(15,25)=-clhs61*clhs631;
        lhs(15,26)=0;
        lhs(15,27)=-clhs632*clhs67;
        lhs(16,0)=penalty_parameter*(clhs45*clhs825 + clhs61*clhs826 + clhs67*clhs827);
        lhs(16,1)=penalty_parameter*(clhs45*clhs828 + clhs61*clhs829 + clhs67*clhs830);
        lhs(16,2)=penalty_parameter*(clhs45*clhs831 + clhs61*clhs832 + clhs67*clhs833);
        lhs(16,3)=penalty_parameter*(clhs45*clhs834 + clhs61*clhs835 + clhs67*clhs836);
        lhs(16,4)=penalty_parameter*(clhs45*clhs837 + clhs61*clhs838 + clhs67*clhs839);
        lhs(16,5)=penalty_parameter*(clhs45*clhs840 + clhs61*clhs841 + clhs67*clhs842);
        lhs(16,6)=penalty_parameter*(clhs45*clhs843 + clhs61*clhs844 + clhs67*clhs845);
        lhs(16,7)=penalty_parameter*(clhs45*clhs846 + clhs61*clhs847 + clhs67*clhs848);
        lhs(16,8)=penalty_parameter*(clhs45*clhs849 + clhs61*clhs850 + clhs67*clhs851);
        lhs(16,9)=penalty_parameter*(clhs45*clhs852 + clhs61*clhs853 + clhs67*clhs854);
        lhs(16,10)=penalty_parameter*(clhs45*clhs855 + clhs61*clhs856 + clhs67*clhs857);
        lhs(16,11)=penalty_parameter*(clhs45*clhs858 + clhs61*clhs859 + clhs67*clhs860);
        lhs(16,12)=-clhs274*clhs636 - clhs283*clhs637 - clhs292*clhs638 - clhs45*clhs672 - clhs61*clhs673 - clhs67*clhs674;
        lhs(16,13)=-clhs304*clhs636 - clhs313*clhs637 - clhs322*clhs638 - clhs45*clhs675 - clhs61*clhs676 - clhs67*clhs677;
        lhs(16,14)=-clhs334*clhs636 - clhs343*clhs637 - clhs352*clhs638 - clhs45*clhs678 - clhs61*clhs679 - clhs67*clhs680;
        lhs(16,15)=-clhs364*clhs636 - clhs373*clhs637 - clhs382*clhs638 - clhs45*clhs681 - clhs61*clhs682 - clhs67*clhs683;
        lhs(16,16)=-clhs394*clhs636 - clhs403*clhs637 - clhs412*clhs638 - clhs45*clhs684 - clhs61*clhs685 - clhs67*clhs686;
        lhs(16,17)=-clhs424*clhs636 - clhs433*clhs637 - clhs442*clhs638 - clhs45*clhs687 - clhs61*clhs688 - clhs67*clhs689;
        lhs(16,18)=-clhs45*clhs690 - clhs454*clhs636 - clhs463*clhs637 - clhs472*clhs638 - clhs61*clhs691 - clhs67*clhs692;
        lhs(16,19)=-clhs45*clhs693 - clhs484*clhs636 - clhs493*clhs637 - clhs502*clhs638 - clhs61*clhs694 - clhs67*clhs695;
        lhs(16,20)=-clhs45*clhs696 - clhs514*clhs636 - clhs523*clhs637 - clhs532*clhs638 - clhs61*clhs697 - clhs67*clhs698;
        lhs(16,21)=-clhs45*clhs699 - clhs544*clhs636 - clhs553*clhs637 - clhs562*clhs638 - clhs61*clhs700 - clhs67*clhs701;
        lhs(16,22)=-clhs45*clhs702 - clhs574*clhs636 - clhs583*clhs637 - clhs592*clhs638 - clhs61*clhs703 - clhs67*clhs704;
        lhs(16,23)=-clhs45*clhs705 - clhs604*clhs636 - clhs61*clhs706 - clhs613*clhs637 - clhs622*clhs638 - clhs67*clhs707;
        lhs(16,24)=-clhs45*clhs708;
        lhs(16,25)=-clhs61*clhs709;
        lhs(16,26)=0;
        lhs(16,27)=-clhs67*clhs710;
        lhs(17,0)=penalty_parameter*(clhs45*clhs861 + clhs61*clhs862 + clhs67*clhs863);
        lhs(17,1)=penalty_parameter*(clhs45*clhs864 + clhs61*clhs865 + clhs67*clhs866);
        lhs(17,2)=penalty_parameter*(clhs45*clhs867 + clhs61*clhs868 + clhs67*clhs869);
        lhs(17,3)=penalty_parameter*(clhs45*clhs870 + clhs61*clhs871 + clhs67*clhs872);
        lhs(17,4)=penalty_parameter*(clhs45*clhs873 + clhs61*clhs874 + clhs67*clhs875);
        lhs(17,5)=penalty_parameter*(clhs45*clhs876 + clhs61*clhs877 + clhs67*clhs878);
        lhs(17,6)=penalty_parameter*(clhs45*clhs879 + clhs61*clhs880 + clhs67*clhs881);
        lhs(17,7)=penalty_parameter*(clhs45*clhs882 + clhs61*clhs883 + clhs67*clhs884);
        lhs(17,8)=penalty_parameter*(clhs45*clhs885 + clhs61*clhs886 + clhs67*clhs887);
        lhs(17,9)=penalty_parameter*(clhs45*clhs888 + clhs61*clhs889 + clhs67*clhs890);
        lhs(17,10)=penalty_parameter*(clhs45*clhs891 + clhs61*clhs892 + clhs67*clhs893);
        lhs(17,11)=penalty_parameter*(clhs45*clhs894 + clhs61*clhs895 + clhs67*clhs896);
        lhs(17,12)=-clhs274*clhs714 - clhs283*clhs715 - clhs292*clhs716 - clhs45*clhs750 - clhs61*clhs751 - clhs67*clhs752;
        lhs(17,13)=-clhs304*clhs714 - clhs313*clhs715 - clhs322*clhs716 - clhs45*clhs753 - clhs61*clhs754 - clhs67*clhs755;
        lhs(17,14)=-clhs334*clhs714 - clhs343*clhs715 - clhs352*clhs716 - clhs45*clhs756 - clhs61*clhs757 - clhs67*clhs758;
        lhs(17,15)=-clhs364*clhs714 - clhs373*clhs715 - clhs382*clhs716 - clhs45*clhs759 - clhs61*clhs760 - clhs67*clhs761;
        lhs(17,16)=-clhs394*clhs714 - clhs403*clhs715 - clhs412*clhs716 - clhs45*clhs762 - clhs61*clhs763 - clhs67*clhs764;
        lhs(17,17)=-clhs424*clhs714 - clhs433*clhs715 - clhs442*clhs716 - clhs45*clhs765 - clhs61*clhs766 - clhs67*clhs767;
        lhs(17,18)=-clhs45*clhs768 - clhs454*clhs714 - clhs463*clhs715 - clhs472*clhs716 - clhs61*clhs769 - clhs67*clhs770;
        lhs(17,19)=-clhs45*clhs771 - clhs484*clhs714 - clhs493*clhs715 - clhs502*clhs716 - clhs61*clhs772 - clhs67*clhs773;
        lhs(17,20)=-clhs45*clhs774 - clhs514*clhs714 - clhs523*clhs715 - clhs532*clhs716 - clhs61*clhs775 - clhs67*clhs776;
        lhs(17,21)=-clhs45*clhs777 - clhs544*clhs714 - clhs553*clhs715 - clhs562*clhs716 - clhs61*clhs778 - clhs67*clhs779;
        lhs(17,22)=-clhs45*clhs780 - clhs574*clhs714 - clhs583*clhs715 - clhs592*clhs716 - clhs61*clhs781 - clhs67*clhs782;
        lhs(17,23)=-clhs45*clhs783 - clhs604*clhs714 - clhs61*clhs784 - clhs613*clhs715 - clhs622*clhs716 - clhs67*clhs785;
        lhs(17,24)=-clhs45*clhs786;
        lhs(17,25)=-clhs61*clhs787;
        lhs(17,26)=0;
        lhs(17,27)=-clhs67*clhs788;
        lhs(18,0)=penalty_parameter*(clhs47*clhs789 + clhs62*clhs790 + clhs68*clhs791);
        lhs(18,1)=penalty_parameter*(clhs47*clhs792 + clhs62*clhs793 + clhs68*clhs794);
        lhs(18,2)=penalty_parameter*(clhs47*clhs795 + clhs62*clhs796 + clhs68*clhs797);
        lhs(18,3)=penalty_parameter*(clhs47*clhs798 + clhs62*clhs799 + clhs68*clhs800);
        lhs(18,4)=penalty_parameter*(clhs47*clhs801 + clhs62*clhs802 + clhs68*clhs803);
        lhs(18,5)=penalty_parameter*(clhs47*clhs804 + clhs62*clhs805 + clhs68*clhs806);
        lhs(18,6)=penalty_parameter*(clhs47*clhs807 + clhs62*clhs808 + clhs68*clhs809);
        lhs(18,7)=penalty_parameter*(clhs47*clhs810 + clhs62*clhs811 + clhs68*clhs812);
        lhs(18,8)=penalty_parameter*(clhs47*clhs813 + clhs62*clhs814 + clhs68*clhs815);
        lhs(18,9)=penalty_parameter*(clhs47*clhs816 + clhs62*clhs817 + clhs68*clhs818);
        lhs(18,10)=penalty_parameter*(clhs47*clhs819 + clhs62*clhs820 + clhs68*clhs821);
        lhs(18,11)=penalty_parameter*(clhs47*clhs822 + clhs62*clhs823 + clhs68*clhs824);
        lhs(18,12)=-clhs275*clhs59 - clhs281*clhs47 - clhs284*clhs65 - clhs290*clhs62 - clhs293*clhs71 - clhs299*clhs68;
        lhs(18,13)=-clhs305*clhs59 - clhs311*clhs47 - clhs314*clhs65 - clhs320*clhs62 - clhs323*clhs71 - clhs329*clhs68;
        lhs(18,14)=-clhs335*clhs59 - clhs341*clhs47 - clhs344*clhs65 - clhs350*clhs62 - clhs353*clhs71 - clhs359*clhs68;
        lhs(18,15)=-clhs365*clhs59 - clhs371*clhs47 - clhs374*clhs65 - clhs380*clhs62 - clhs383*clhs71 - clhs389*clhs68;
        lhs(18,16)=-clhs395*clhs59 - clhs401*clhs47 - clhs404*clhs65 - clhs410*clhs62 - clhs413*clhs71 - clhs419*clhs68;
        lhs(18,17)=-clhs425*clhs59 - clhs431*clhs47 - clhs434*clhs65 - clhs440*clhs62 - clhs443*clhs71 - clhs449*clhs68;
        lhs(18,18)=-clhs455*clhs59 - clhs461*clhs47 - clhs464*clhs65 - clhs470*clhs62 - clhs473*clhs71 - clhs479*clhs68;
        lhs(18,19)=-clhs47*clhs491 - clhs485*clhs59 - clhs494*clhs65 - clhs500*clhs62 - clhs503*clhs71 - clhs509*clhs68;
        lhs(18,20)=-clhs47*clhs521 - clhs515*clhs59 - clhs524*clhs65 - clhs530*clhs62 - clhs533*clhs71 - clhs539*clhs68;
        lhs(18,21)=-clhs47*clhs551 - clhs545*clhs59 - clhs554*clhs65 - clhs560*clhs62 - clhs563*clhs71 - clhs569*clhs68;
        lhs(18,22)=-clhs47*clhs581 - clhs575*clhs59 - clhs584*clhs65 - clhs590*clhs62 - clhs593*clhs71 - clhs599*clhs68;
        lhs(18,23)=-clhs47*clhs611 - clhs59*clhs605 - clhs614*clhs65 - clhs62*clhs620 - clhs623*clhs71 - clhs629*clhs68;
        lhs(18,24)=-clhs47*clhs630;
        lhs(18,25)=-clhs62*clhs631;
        lhs(18,26)=0;
        lhs(18,27)=-clhs632*clhs68;
        lhs(19,0)=penalty_parameter*(clhs47*clhs825 + clhs62*clhs826 + clhs68*clhs827);
        lhs(19,1)=penalty_parameter*(clhs47*clhs828 + clhs62*clhs829 + clhs68*clhs830);
        lhs(19,2)=penalty_parameter*(clhs47*clhs831 + clhs62*clhs832 + clhs68*clhs833);
        lhs(19,3)=penalty_parameter*(clhs47*clhs834 + clhs62*clhs835 + clhs68*clhs836);
        lhs(19,4)=penalty_parameter*(clhs47*clhs837 + clhs62*clhs838 + clhs68*clhs839);
        lhs(19,5)=penalty_parameter*(clhs47*clhs840 + clhs62*clhs841 + clhs68*clhs842);
        lhs(19,6)=penalty_parameter*(clhs47*clhs843 + clhs62*clhs844 + clhs68*clhs845);
        lhs(19,7)=penalty_parameter*(clhs47*clhs846 + clhs62*clhs847 + clhs68*clhs848);
        lhs(19,8)=penalty_parameter*(clhs47*clhs849 + clhs62*clhs850 + clhs68*clhs851);
        lhs(19,9)=penalty_parameter*(clhs47*clhs852 + clhs62*clhs853 + clhs68*clhs854);
        lhs(19,10)=penalty_parameter*(clhs47*clhs855 + clhs62*clhs856 + clhs68*clhs857);
        lhs(19,11)=penalty_parameter*(clhs47*clhs858 + clhs62*clhs859 + clhs68*clhs860);
        lhs(19,12)=-clhs275*clhs636 - clhs284*clhs637 - clhs293*clhs638 - clhs47*clhs672 - clhs62*clhs673 - clhs674*clhs68;
        lhs(19,13)=-clhs305*clhs636 - clhs314*clhs637 - clhs323*clhs638 - clhs47*clhs675 - clhs62*clhs676 - clhs677*clhs68;
        lhs(19,14)=-clhs335*clhs636 - clhs344*clhs637 - clhs353*clhs638 - clhs47*clhs678 - clhs62*clhs679 - clhs68*clhs680;
        lhs(19,15)=-clhs365*clhs636 - clhs374*clhs637 - clhs383*clhs638 - clhs47*clhs681 - clhs62*clhs682 - clhs68*clhs683;
        lhs(19,16)=-clhs395*clhs636 - clhs404*clhs637 - clhs413*clhs638 - clhs47*clhs684 - clhs62*clhs685 - clhs68*clhs686;
        lhs(19,17)=-clhs425*clhs636 - clhs434*clhs637 - clhs443*clhs638 - clhs47*clhs687 - clhs62*clhs688 - clhs68*clhs689;
        lhs(19,18)=-clhs455*clhs636 - clhs464*clhs637 - clhs47*clhs690 - clhs473*clhs638 - clhs62*clhs691 - clhs68*clhs692;
        lhs(19,19)=-clhs47*clhs693 - clhs485*clhs636 - clhs494*clhs637 - clhs503*clhs638 - clhs62*clhs694 - clhs68*clhs695;
        lhs(19,20)=-clhs47*clhs696 - clhs515*clhs636 - clhs524*clhs637 - clhs533*clhs638 - clhs62*clhs697 - clhs68*clhs698;
        lhs(19,21)=-clhs47*clhs699 - clhs545*clhs636 - clhs554*clhs637 - clhs563*clhs638 - clhs62*clhs700 - clhs68*clhs701;
        lhs(19,22)=-clhs47*clhs702 - clhs575*clhs636 - clhs584*clhs637 - clhs593*clhs638 - clhs62*clhs703 - clhs68*clhs704;
        lhs(19,23)=-clhs47*clhs705 - clhs605*clhs636 - clhs614*clhs637 - clhs62*clhs706 - clhs623*clhs638 - clhs68*clhs707;
        lhs(19,24)=-clhs47*clhs708;
        lhs(19,25)=-clhs62*clhs709;
        lhs(19,26)=0;
        lhs(19,27)=-clhs68*clhs710;
        lhs(20,0)=penalty_parameter*(clhs47*clhs861 + clhs62*clhs862 + clhs68*clhs863);
        lhs(20,1)=penalty_parameter*(clhs47*clhs864 + clhs62*clhs865 + clhs68*clhs866);
        lhs(20,2)=penalty_parameter*(clhs47*clhs867 + clhs62*clhs868 + clhs68*clhs869);
        lhs(20,3)=penalty_parameter*(clhs47*clhs870 + clhs62*clhs871 + clhs68*clhs872);
        lhs(20,4)=penalty_parameter*(clhs47*clhs873 + clhs62*clhs874 + clhs68*clhs875);
        lhs(20,5)=penalty_parameter*(clhs47*clhs876 + clhs62*clhs877 + clhs68*clhs878);
        lhs(20,6)=penalty_parameter*(clhs47*clhs879 + clhs62*clhs880 + clhs68*clhs881);
        lhs(20,7)=penalty_parameter*(clhs47*clhs882 + clhs62*clhs883 + clhs68*clhs884);
        lhs(20,8)=penalty_parameter*(clhs47*clhs885 + clhs62*clhs886 + clhs68*clhs887);
        lhs(20,9)=penalty_parameter*(clhs47*clhs888 + clhs62*clhs889 + clhs68*clhs890);
        lhs(20,10)=penalty_parameter*(clhs47*clhs891 + clhs62*clhs892 + clhs68*clhs893);
        lhs(20,11)=penalty_parameter*(clhs47*clhs894 + clhs62*clhs895 + clhs68*clhs896);
        lhs(20,12)=-clhs275*clhs714 - clhs284*clhs715 - clhs293*clhs716 - clhs47*clhs750 - clhs62*clhs751 - clhs68*clhs752;
        lhs(20,13)=-clhs305*clhs714 - clhs314*clhs715 - clhs323*clhs716 - clhs47*clhs753 - clhs62*clhs754 - clhs68*clhs755;
        lhs(20,14)=-clhs335*clhs714 - clhs344*clhs715 - clhs353*clhs716 - clhs47*clhs756 - clhs62*clhs757 - clhs68*clhs758;
        lhs(20,15)=-clhs365*clhs714 - clhs374*clhs715 - clhs383*clhs716 - clhs47*clhs759 - clhs62*clhs760 - clhs68*clhs761;
        lhs(20,16)=-clhs395*clhs714 - clhs404*clhs715 - clhs413*clhs716 - clhs47*clhs762 - clhs62*clhs763 - clhs68*clhs764;
        lhs(20,17)=-clhs425*clhs714 - clhs434*clhs715 - clhs443*clhs716 - clhs47*clhs765 - clhs62*clhs766 - clhs68*clhs767;
        lhs(20,18)=-clhs455*clhs714 - clhs464*clhs715 - clhs47*clhs768 - clhs473*clhs716 - clhs62*clhs769 - clhs68*clhs770;
        lhs(20,19)=-clhs47*clhs771 - clhs485*clhs714 - clhs494*clhs715 - clhs503*clhs716 - clhs62*clhs772 - clhs68*clhs773;
        lhs(20,20)=-clhs47*clhs774 - clhs515*clhs714 - clhs524*clhs715 - clhs533*clhs716 - clhs62*clhs775 - clhs68*clhs776;
        lhs(20,21)=-clhs47*clhs777 - clhs545*clhs714 - clhs554*clhs715 - clhs563*clhs716 - clhs62*clhs778 - clhs68*clhs779;
        lhs(20,22)=-clhs47*clhs780 - clhs575*clhs714 - clhs584*clhs715 - clhs593*clhs716 - clhs62*clhs781 - clhs68*clhs782;
        lhs(20,23)=-clhs47*clhs783 - clhs605*clhs714 - clhs614*clhs715 - clhs62*clhs784 - clhs623*clhs716 - clhs68*clhs785;
        lhs(20,24)=-clhs47*clhs786;
        lhs(20,25)=-clhs62*clhs787;
        lhs(20,26)=0;
        lhs(20,27)=-clhs68*clhs788;
        lhs(21,0)=penalty_parameter*(clhs49*clhs789 + clhs63*clhs790 + clhs69*clhs791);
        lhs(21,1)=penalty_parameter*(clhs49*clhs792 + clhs63*clhs793 + clhs69*clhs794);
        lhs(21,2)=penalty_parameter*(clhs49*clhs795 + clhs63*clhs796 + clhs69*clhs797);
        lhs(21,3)=penalty_parameter*(clhs49*clhs798 + clhs63*clhs799 + clhs69*clhs800);
        lhs(21,4)=penalty_parameter*(clhs49*clhs801 + clhs63*clhs802 + clhs69*clhs803);
        lhs(21,5)=penalty_parameter*(clhs49*clhs804 + clhs63*clhs805 + clhs69*clhs806);
        lhs(21,6)=penalty_parameter*(clhs49*clhs807 + clhs63*clhs808 + clhs69*clhs809);
        lhs(21,7)=penalty_parameter*(clhs49*clhs810 + clhs63*clhs811 + clhs69*clhs812);
        lhs(21,8)=penalty_parameter*(clhs49*clhs813 + clhs63*clhs814 + clhs69*clhs815);
        lhs(21,9)=penalty_parameter*(clhs49*clhs816 + clhs63*clhs817 + clhs69*clhs818);
        lhs(21,10)=penalty_parameter*(clhs49*clhs819 + clhs63*clhs820 + clhs69*clhs821);
        lhs(21,11)=penalty_parameter*(clhs49*clhs822 + clhs63*clhs823 + clhs69*clhs824);
        lhs(21,12)=-clhs276*clhs59 - clhs281*clhs49 - clhs285*clhs65 - clhs290*clhs63 - clhs294*clhs71 - clhs299*clhs69;
        lhs(21,13)=-clhs306*clhs59 - clhs311*clhs49 - clhs315*clhs65 - clhs320*clhs63 - clhs324*clhs71 - clhs329*clhs69;
        lhs(21,14)=-clhs336*clhs59 - clhs341*clhs49 - clhs345*clhs65 - clhs350*clhs63 - clhs354*clhs71 - clhs359*clhs69;
        lhs(21,15)=-clhs366*clhs59 - clhs371*clhs49 - clhs375*clhs65 - clhs380*clhs63 - clhs384*clhs71 - clhs389*clhs69;
        lhs(21,16)=-clhs396*clhs59 - clhs401*clhs49 - clhs405*clhs65 - clhs410*clhs63 - clhs414*clhs71 - clhs419*clhs69;
        lhs(21,17)=-clhs426*clhs59 - clhs431*clhs49 - clhs435*clhs65 - clhs440*clhs63 - clhs444*clhs71 - clhs449*clhs69;
        lhs(21,18)=-clhs456*clhs59 - clhs461*clhs49 - clhs465*clhs65 - clhs470*clhs63 - clhs474*clhs71 - clhs479*clhs69;
        lhs(21,19)=-clhs486*clhs59 - clhs49*clhs491 - clhs495*clhs65 - clhs500*clhs63 - clhs504*clhs71 - clhs509*clhs69;
        lhs(21,20)=-clhs49*clhs521 - clhs516*clhs59 - clhs525*clhs65 - clhs530*clhs63 - clhs534*clhs71 - clhs539*clhs69;
        lhs(21,21)=-clhs49*clhs551 - clhs546*clhs59 - clhs555*clhs65 - clhs560*clhs63 - clhs564*clhs71 - clhs569*clhs69;
        lhs(21,22)=-clhs49*clhs581 - clhs576*clhs59 - clhs585*clhs65 - clhs590*clhs63 - clhs594*clhs71 - clhs599*clhs69;
        lhs(21,23)=-clhs49*clhs611 - clhs59*clhs606 - clhs615*clhs65 - clhs620*clhs63 - clhs624*clhs71 - clhs629*clhs69;
        lhs(21,24)=-clhs49*clhs630;
        lhs(21,25)=-clhs63*clhs631;
        lhs(21,26)=0;
        lhs(21,27)=-clhs632*clhs69;
        lhs(22,0)=penalty_parameter*(clhs49*clhs825 + clhs63*clhs826 + clhs69*clhs827);
        lhs(22,1)=penalty_parameter*(clhs49*clhs828 + clhs63*clhs829 + clhs69*clhs830);
        lhs(22,2)=penalty_parameter*(clhs49*clhs831 + clhs63*clhs832 + clhs69*clhs833);
        lhs(22,3)=penalty_parameter*(clhs49*clhs834 + clhs63*clhs835 + clhs69*clhs836);
        lhs(22,4)=penalty_parameter*(clhs49*clhs837 + clhs63*clhs838 + clhs69*clhs839);
        lhs(22,5)=penalty_parameter*(clhs49*clhs840 + clhs63*clhs841 + clhs69*clhs842);
        lhs(22,6)=penalty_parameter*(clhs49*clhs843 + clhs63*clhs844 + clhs69*clhs845);
        lhs(22,7)=penalty_parameter*(clhs49*clhs846 + clhs63*clhs847 + clhs69*clhs848);
        lhs(22,8)=penalty_parameter*(clhs49*clhs849 + clhs63*clhs850 + clhs69*clhs851);
        lhs(22,9)=penalty_parameter*(clhs49*clhs852 + clhs63*clhs853 + clhs69*clhs854);
        lhs(22,10)=penalty_parameter*(clhs49*clhs855 + clhs63*clhs856 + clhs69*clhs857);
        lhs(22,11)=penalty_parameter*(clhs49*clhs858 + clhs63*clhs859 + clhs69*clhs860);
        lhs(22,12)=-clhs276*clhs636 - clhs285*clhs637 - clhs294*clhs638 - clhs49*clhs672 - clhs63*clhs673 - clhs674*clhs69;
        lhs(22,13)=-clhs306*clhs636 - clhs315*clhs637 - clhs324*clhs638 - clhs49*clhs675 - clhs63*clhs676 - clhs677*clhs69;
        lhs(22,14)=-clhs336*clhs636 - clhs345*clhs637 - clhs354*clhs638 - clhs49*clhs678 - clhs63*clhs679 - clhs680*clhs69;
        lhs(22,15)=-clhs366*clhs636 - clhs375*clhs637 - clhs384*clhs638 - clhs49*clhs681 - clhs63*clhs682 - clhs683*clhs69;
        lhs(22,16)=-clhs396*clhs636 - clhs405*clhs637 - clhs414*clhs638 - clhs49*clhs684 - clhs63*clhs685 - clhs686*clhs69;
        lhs(22,17)=-clhs426*clhs636 - clhs435*clhs637 - clhs444*clhs638 - clhs49*clhs687 - clhs63*clhs688 - clhs689*clhs69;
        lhs(22,18)=-clhs456*clhs636 - clhs465*clhs637 - clhs474*clhs638 - clhs49*clhs690 - clhs63*clhs691 - clhs69*clhs692;
        lhs(22,19)=-clhs486*clhs636 - clhs49*clhs693 - clhs495*clhs637 - clhs504*clhs638 - clhs63*clhs694 - clhs69*clhs695;
        lhs(22,20)=-clhs49*clhs696 - clhs516*clhs636 - clhs525*clhs637 - clhs534*clhs638 - clhs63*clhs697 - clhs69*clhs698;
        lhs(22,21)=-clhs49*clhs699 - clhs546*clhs636 - clhs555*clhs637 - clhs564*clhs638 - clhs63*clhs700 - clhs69*clhs701;
        lhs(22,22)=-clhs49*clhs702 - clhs576*clhs636 - clhs585*clhs637 - clhs594*clhs638 - clhs63*clhs703 - clhs69*clhs704;
        lhs(22,23)=-clhs49*clhs705 - clhs606*clhs636 - clhs615*clhs637 - clhs624*clhs638 - clhs63*clhs706 - clhs69*clhs707;
        lhs(22,24)=-clhs49*clhs708;
        lhs(22,25)=-clhs63*clhs709;
        lhs(22,26)=0;
        lhs(22,27)=-clhs69*clhs710;
        lhs(23,0)=penalty_parameter*(clhs49*clhs861 + clhs63*clhs862 + clhs69*clhs863);
        lhs(23,1)=penalty_parameter*(clhs49*clhs864 + clhs63*clhs865 + clhs69*clhs866);
        lhs(23,2)=penalty_parameter*(clhs49*clhs867 + clhs63*clhs868 + clhs69*clhs869);
        lhs(23,3)=penalty_parameter*(clhs49*clhs870 + clhs63*clhs871 + clhs69*clhs872);
        lhs(23,4)=penalty_parameter*(clhs49*clhs873 + clhs63*clhs874 + clhs69*clhs875);
        lhs(23,5)=penalty_parameter*(clhs49*clhs876 + clhs63*clhs877 + clhs69*clhs878);
        lhs(23,6)=penalty_parameter*(clhs49*clhs879 + clhs63*clhs880 + clhs69*clhs881);
        lhs(23,7)=penalty_parameter*(clhs49*clhs882 + clhs63*clhs883 + clhs69*clhs884);
        lhs(23,8)=penalty_parameter*(clhs49*clhs885 + clhs63*clhs886 + clhs69*clhs887);
        lhs(23,9)=penalty_parameter*(clhs49*clhs888 + clhs63*clhs889 + clhs69*clhs890);
        lhs(23,10)=penalty_parameter*(clhs49*clhs891 + clhs63*clhs892 + clhs69*clhs893);
        lhs(23,11)=penalty_parameter*(clhs49*clhs894 + clhs63*clhs895 + clhs69*clhs896);
        lhs(23,12)=-clhs276*clhs714 - clhs285*clhs715 - clhs294*clhs716 - clhs49*clhs750 - clhs63*clhs751 - clhs69*clhs752;
        lhs(23,13)=-clhs306*clhs714 - clhs315*clhs715 - clhs324*clhs716 - clhs49*clhs753 - clhs63*clhs754 - clhs69*clhs755;
        lhs(23,14)=-clhs336*clhs714 - clhs345*clhs715 - clhs354*clhs716 - clhs49*clhs756 - clhs63*clhs757 - clhs69*clhs758;
        lhs(23,15)=-clhs366*clhs714 - clhs375*clhs715 - clhs384*clhs716 - clhs49*clhs759 - clhs63*clhs760 - clhs69*clhs761;
        lhs(23,16)=-clhs396*clhs714 - clhs405*clhs715 - clhs414*clhs716 - clhs49*clhs762 - clhs63*clhs763 - clhs69*clhs764;
        lhs(23,17)=-clhs426*clhs714 - clhs435*clhs715 - clhs444*clhs716 - clhs49*clhs765 - clhs63*clhs766 - clhs69*clhs767;
        lhs(23,18)=-clhs456*clhs714 - clhs465*clhs715 - clhs474*clhs716 - clhs49*clhs768 - clhs63*clhs769 - clhs69*clhs770;
        lhs(23,19)=-clhs486*clhs714 - clhs49*clhs771 - clhs495*clhs715 - clhs504*clhs716 - clhs63*clhs772 - clhs69*clhs773;
        lhs(23,20)=-clhs49*clhs774 - clhs516*clhs714 - clhs525*clhs715 - clhs534*clhs716 - clhs63*clhs775 - clhs69*clhs776;
        lhs(23,21)=-clhs49*clhs777 - clhs546*clhs714 - clhs555*clhs715 - clhs564*clhs716 - clhs63*clhs778 - clhs69*clhs779;
        lhs(23,22)=-clhs49*clhs780 - clhs576*clhs714 - clhs585*clhs715 - clhs594*clhs716 - clhs63*clhs781 - clhs69*clhs782;
        lhs(23,23)=-clhs49*clhs783 - clhs606*clhs714 - clhs615*clhs715 - clhs624*clhs716 - clhs63*clhs784 - clhs69*clhs785;
        lhs(23,24)=-clhs49*clhs786;
        lhs(23,25)=-clhs63*clhs787;
        lhs(23,26)=0;
        lhs(23,27)=-clhs69*clhs788;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs76*scale_factor;
        lhs(24,2)=clhs94*scale_factor;
        lhs(24,3)=clhs112*scale_factor;
        lhs(24,4)=clhs130*scale_factor;
        lhs(24,5)=clhs148*scale_factor;
        lhs(24,6)=clhs166*scale_factor;
        lhs(24,7)=clhs184*scale_factor;
        lhs(24,8)=clhs202*scale_factor;
        lhs(24,9)=clhs220*scale_factor;
        lhs(24,10)=clhs238*scale_factor;
        lhs(24,11)=clhs256*scale_factor;
        lhs(24,12)=-clhs280*scale_factor;
        lhs(24,13)=-clhs310*scale_factor;
        lhs(24,14)=-clhs340*scale_factor;
        lhs(24,15)=-clhs370*scale_factor;
        lhs(24,16)=-clhs400*scale_factor;
        lhs(24,17)=-clhs430*scale_factor;
        lhs(24,18)=-clhs460*scale_factor;
        lhs(24,19)=-clhs490*scale_factor;
        lhs(24,20)=-clhs520*scale_factor;
        lhs(24,21)=-clhs550*scale_factor;
        lhs(24,22)=-clhs580*scale_factor;
        lhs(24,23)=-clhs610*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs30*scale_factor;
        lhs(25,1)=clhs82*scale_factor;
        lhs(25,2)=clhs100*scale_factor;
        lhs(25,3)=clhs118*scale_factor;
        lhs(25,4)=clhs136*scale_factor;
        lhs(25,5)=clhs154*scale_factor;
        lhs(25,6)=clhs172*scale_factor;
        lhs(25,7)=clhs190*scale_factor;
        lhs(25,8)=clhs208*scale_factor;
        lhs(25,9)=clhs226*scale_factor;
        lhs(25,10)=clhs244*scale_factor;
        lhs(25,11)=clhs262*scale_factor;
        lhs(25,12)=-clhs289*scale_factor;
        lhs(25,13)=-clhs319*scale_factor;
        lhs(25,14)=-clhs349*scale_factor;
        lhs(25,15)=-clhs379*scale_factor;
        lhs(25,16)=-clhs409*scale_factor;
        lhs(25,17)=-clhs439*scale_factor;
        lhs(25,18)=-clhs469*scale_factor;
        lhs(25,19)=-clhs499*scale_factor;
        lhs(25,20)=-clhs529*scale_factor;
        lhs(25,21)=-clhs559*scale_factor;
        lhs(25,22)=-clhs589*scale_factor;
        lhs(25,23)=-clhs619*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=0;
        lhs(26,1)=0;
        lhs(26,2)=0;
        lhs(26,3)=0;
        lhs(26,4)=0;
        lhs(26,5)=0;
        lhs(26,6)=0;
        lhs(26,7)=0;
        lhs(26,8)=0;
        lhs(26,9)=0;
        lhs(26,10)=0;
        lhs(26,11)=0;
        lhs(26,12)=0;
        lhs(26,13)=0;
        lhs(26,14)=0;
        lhs(26,15)=0;
        lhs(26,16)=0;
        lhs(26,17)=0;
        lhs(26,18)=0;
        lhs(26,19)=0;
        lhs(26,20)=0;
        lhs(26,21)=0;
        lhs(26,22)=0;
        lhs(26,23)=0;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        lhs(26,27)=0;
        lhs(27,0)=clhs40*scale_factor;
        lhs(27,1)=clhs88*scale_factor;
        lhs(27,2)=clhs106*scale_factor;
        lhs(27,3)=clhs124*scale_factor;
        lhs(27,4)=clhs142*scale_factor;
        lhs(27,5)=clhs160*scale_factor;
        lhs(27,6)=clhs178*scale_factor;
        lhs(27,7)=clhs196*scale_factor;
        lhs(27,8)=clhs214*scale_factor;
        lhs(27,9)=clhs232*scale_factor;
        lhs(27,10)=clhs250*scale_factor;
        lhs(27,11)=clhs268*scale_factor;
        lhs(27,12)=-clhs298*scale_factor;
        lhs(27,13)=-clhs328*scale_factor;
        lhs(27,14)=-clhs358*scale_factor;
        lhs(27,15)=-clhs388*scale_factor;
        lhs(27,16)=-clhs418*scale_factor;
        lhs(27,17)=-clhs448*scale_factor;
        lhs(27,18)=-clhs478*scale_factor;
        lhs(27,19)=-clhs508*scale_factor;
        lhs(27,20)=-clhs538*scale_factor;
        lhs(27,21)=-clhs568*scale_factor;
        lhs(27,22)=-clhs598*scale_factor;
        lhs(27,23)=-clhs628*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }
    else if (rActiveInactive == 7 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(1,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(1,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(1,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(1,0)*penalty_parameter;
        const double clhs32 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs33 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs34 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs35 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs36 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs37 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs38 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs39 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs40 =     normalslave(2,0)*(clhs16*clhs33 + clhs17*clhs35 + clhs18*clhs37 + clhs19*clhs39 + clhs32) + normalslave(2,1)*(clhs1*clhs33 + clhs3*clhs35 + clhs37*clhs6 + clhs39*clhs9) + normalslave(2,2)*(clhs12*clhs33 + clhs13*clhs35 + clhs14*clhs37 + clhs15*clhs39);
        const double clhs41 =     clhs40*normalslave(2,0)*penalty_parameter;
        const double clhs42 =     X1(0,0) + u1(0,0);
        const double clhs43 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs44 =     X1(1,0) + u1(1,0);
        const double clhs45 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs46 =     X1(2,0) + u1(2,0);
        const double clhs47 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs48 =     X1(3,0) + u1(3,0);
        const double clhs49 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs50 =     X1(0,1) + u1(0,1);
        const double clhs51 =     X1(1,1) + u1(1,1);
        const double clhs52 =     X1(2,1) + u1(2,1);
        const double clhs53 =     X1(3,1) + u1(3,1);
        const double clhs54 =     X1(0,2) + u1(0,2);
        const double clhs55 =     X1(1,2) + u1(1,2);
        const double clhs56 =     X1(2,2) + u1(2,2);
        const double clhs57 =     X1(3,2) + u1(3,2);
        const double clhs58 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs42*clhs43 + clhs44*clhs45 + clhs46*clhs47 + clhs48*clhs49) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs43*clhs50 + clhs45*clhs51 + clhs47*clhs52 + clhs49*clhs53 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs43*clhs54 + clhs45*clhs55 + clhs47*clhs56 + clhs49*clhs57));
        const double clhs59 =     clhs58*normalslave(0,0);
        const double clhs60 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs61 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs62 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs63 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs64 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs42*clhs60 + clhs44*clhs61 + clhs46*clhs62 + clhs48*clhs63) + normalslave(1,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs50*clhs60 + clhs51*clhs61 + clhs52*clhs62 + clhs53*clhs63) + normalslave(1,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs54*clhs60 + clhs55*clhs61 + clhs56*clhs62 + clhs57*clhs63));
        const double clhs65 =     clhs64*normalslave(1,0);
        const double clhs66 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs67 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs68 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs69 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs70 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs16*clhs32 - clhs17*clhs34 - clhs18*clhs36 - clhs19*clhs38 + clhs42*clhs66 + clhs44*clhs67 + clhs46*clhs68 + clhs48*clhs69) + normalslave(2,1)*(-clhs1*clhs32 - clhs3*clhs34 - clhs36*clhs6 - clhs38*clhs9 + clhs50*clhs66 + clhs51*clhs67 + clhs52*clhs68 + clhs53*clhs69) + normalslave(2,2)*(-clhs12*clhs32 - clhs13*clhs34 - clhs14*clhs36 - clhs15*clhs38 + clhs54*clhs66 + clhs55*clhs67 + clhs56*clhs68 + clhs57*clhs69));
        const double clhs71 =     clhs70*normalslave(2,0);
        const double clhs72 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs73 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs74 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs75 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs76 =     normalslave(0,0)*(clhs16*clhs72 + clhs17*clhs73 + clhs18*clhs74 + clhs19*clhs75) + normalslave(0,1)*(clhs0 + clhs1*clhs72 + clhs3*clhs73 + clhs6*clhs74 + clhs75*clhs9) + normalslave(0,2)*(clhs12*clhs72 + clhs13*clhs73 + clhs14*clhs74 + clhs15*clhs75);
        const double clhs77 =     clhs76*normalslave(0,0)*penalty_parameter;
        const double clhs78 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs79 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs80 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs81 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs82 =     normalslave(1,0)*(clhs16*clhs78 + clhs17*clhs79 + clhs18*clhs80 + clhs19*clhs81) + normalslave(1,1)*(clhs1*clhs78 + clhs22 + clhs3*clhs79 + clhs6*clhs80 + clhs81*clhs9) + normalslave(1,2)*(clhs12*clhs78 + clhs13*clhs79 + clhs14*clhs80 + clhs15*clhs81);
        const double clhs83 =     clhs82*normalslave(1,0)*penalty_parameter;
        const double clhs84 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs85 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs86 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs87 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs88 =     normalslave(2,0)*(clhs16*clhs84 + clhs17*clhs85 + clhs18*clhs86 + clhs19*clhs87) + normalslave(2,1)*(clhs1*clhs84 + clhs3*clhs85 + clhs32 + clhs6*clhs86 + clhs87*clhs9) + normalslave(2,2)*(clhs12*clhs84 + clhs13*clhs85 + clhs14*clhs86 + clhs15*clhs87);
        const double clhs89 =     clhs88*normalslave(2,0)*penalty_parameter;
        const double clhs90 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs91 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs92 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs93 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs94 =     normalslave(0,0)*(clhs16*clhs90 + clhs17*clhs91 + clhs18*clhs92 + clhs19*clhs93) + normalslave(0,1)*(clhs1*clhs90 + clhs3*clhs91 + clhs6*clhs92 + clhs9*clhs93) + normalslave(0,2)*(clhs0 + clhs12*clhs90 + clhs13*clhs91 + clhs14*clhs92 + clhs15*clhs93);
        const double clhs95 =     clhs94*normalslave(0,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs97 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs98 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs99 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs100 =     normalslave(1,0)*(clhs16*clhs96 + clhs17*clhs97 + clhs18*clhs98 + clhs19*clhs99) + normalslave(1,1)*(clhs1*clhs96 + clhs3*clhs97 + clhs6*clhs98 + clhs9*clhs99) + normalslave(1,2)*(clhs12*clhs96 + clhs13*clhs97 + clhs14*clhs98 + clhs15*clhs99 + clhs22);
        const double clhs101 =     clhs100*normalslave(1,0)*penalty_parameter;
        const double clhs102 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs103 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs104 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs105 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs106 =     normalslave(2,0)*(clhs102*clhs16 + clhs103*clhs17 + clhs104*clhs18 + clhs105*clhs19) + normalslave(2,1)*(clhs1*clhs102 + clhs103*clhs3 + clhs104*clhs6 + clhs105*clhs9) + normalslave(2,2)*(clhs102*clhs12 + clhs103*clhs13 + clhs104*clhs14 + clhs105*clhs15 + clhs32);
        const double clhs107 =     clhs106*normalslave(2,0)*penalty_parameter;
        const double clhs108 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs109 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs110 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs111 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs112 =     normalslave(0,0)*(clhs108*clhs16 + clhs109*clhs17 + clhs110*clhs18 + clhs111*clhs19 + clhs4) + normalslave(0,1)*(clhs1*clhs108 + clhs109*clhs3 + clhs110*clhs6 + clhs111*clhs9) + normalslave(0,2)*(clhs108*clhs12 + clhs109*clhs13 + clhs110*clhs14 + clhs111*clhs15);
        const double clhs113 =     clhs112*normalslave(0,0)*penalty_parameter;
        const double clhs114 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs115 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs116 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs117 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs118 =     normalslave(1,0)*(clhs114*clhs16 + clhs115*clhs17 + clhs116*clhs18 + clhs117*clhs19 + clhs24) + normalslave(1,1)*(clhs1*clhs114 + clhs115*clhs3 + clhs116*clhs6 + clhs117*clhs9) + normalslave(1,2)*(clhs114*clhs12 + clhs115*clhs13 + clhs116*clhs14 + clhs117*clhs15);
        const double clhs119 =     clhs118*normalslave(1,0)*penalty_parameter;
        const double clhs120 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs121 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs122 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs123 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs124 =     normalslave(2,0)*(clhs120*clhs16 + clhs121*clhs17 + clhs122*clhs18 + clhs123*clhs19 + clhs34) + normalslave(2,1)*(clhs1*clhs120 + clhs121*clhs3 + clhs122*clhs6 + clhs123*clhs9) + normalslave(2,2)*(clhs12*clhs120 + clhs121*clhs13 + clhs122*clhs14 + clhs123*clhs15);
        const double clhs125 =     clhs124*normalslave(2,0)*penalty_parameter;
        const double clhs126 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs127 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs128 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs129 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs130 =     normalslave(0,0)*(clhs126*clhs16 + clhs127*clhs17 + clhs128*clhs18 + clhs129*clhs19) + normalslave(0,1)*(clhs1*clhs126 + clhs127*clhs3 + clhs128*clhs6 + clhs129*clhs9 + clhs4) + normalslave(0,2)*(clhs12*clhs126 + clhs127*clhs13 + clhs128*clhs14 + clhs129*clhs15);
        const double clhs131 =     clhs130*normalslave(0,0)*penalty_parameter;
        const double clhs132 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs133 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs134 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs135 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs136 =     normalslave(1,0)*(clhs132*clhs16 + clhs133*clhs17 + clhs134*clhs18 + clhs135*clhs19) + normalslave(1,1)*(clhs1*clhs132 + clhs133*clhs3 + clhs134*clhs6 + clhs135*clhs9 + clhs24) + normalslave(1,2)*(clhs12*clhs132 + clhs13*clhs133 + clhs134*clhs14 + clhs135*clhs15);
        const double clhs137 =     clhs136*normalslave(1,0)*penalty_parameter;
        const double clhs138 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs139 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs140 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs141 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs142 =     normalslave(2,0)*(clhs138*clhs16 + clhs139*clhs17 + clhs140*clhs18 + clhs141*clhs19) + normalslave(2,1)*(clhs1*clhs138 + clhs139*clhs3 + clhs140*clhs6 + clhs141*clhs9 + clhs34) + normalslave(2,2)*(clhs12*clhs138 + clhs13*clhs139 + clhs14*clhs140 + clhs141*clhs15);
        const double clhs143 =     clhs142*normalslave(2,0)*penalty_parameter;
        const double clhs144 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs145 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs146 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs147 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs148 =     normalslave(0,0)*(clhs144*clhs16 + clhs145*clhs17 + clhs146*clhs18 + clhs147*clhs19) + normalslave(0,1)*(clhs1*clhs144 + clhs145*clhs3 + clhs146*clhs6 + clhs147*clhs9) + normalslave(0,2)*(clhs12*clhs144 + clhs13*clhs145 + clhs14*clhs146 + clhs147*clhs15 + clhs4);
        const double clhs149 =     clhs148*normalslave(0,0)*penalty_parameter;
        const double clhs150 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs151 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs152 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs153 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs154 =     normalslave(1,0)*(clhs150*clhs16 + clhs151*clhs17 + clhs152*clhs18 + clhs153*clhs19) + normalslave(1,1)*(clhs1*clhs150 + clhs151*clhs3 + clhs152*clhs6 + clhs153*clhs9) + normalslave(1,2)*(clhs12*clhs150 + clhs13*clhs151 + clhs14*clhs152 + clhs15*clhs153 + clhs24);
        const double clhs155 =     clhs154*normalslave(1,0)*penalty_parameter;
        const double clhs156 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs157 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs158 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs159 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs160 =     normalslave(2,0)*(clhs156*clhs16 + clhs157*clhs17 + clhs158*clhs18 + clhs159*clhs19) + normalslave(2,1)*(clhs1*clhs156 + clhs157*clhs3 + clhs158*clhs6 + clhs159*clhs9) + normalslave(2,2)*(clhs12*clhs156 + clhs13*clhs157 + clhs14*clhs158 + clhs15*clhs159 + clhs34);
        const double clhs161 =     clhs160*normalslave(2,0)*penalty_parameter;
        const double clhs162 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs163 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs164 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs165 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs166 =     normalslave(0,0)*(clhs16*clhs162 + clhs163*clhs17 + clhs164*clhs18 + clhs165*clhs19 + clhs7) + normalslave(0,1)*(clhs1*clhs162 + clhs163*clhs3 + clhs164*clhs6 + clhs165*clhs9) + normalslave(0,2)*(clhs12*clhs162 + clhs13*clhs163 + clhs14*clhs164 + clhs15*clhs165);
        const double clhs167 =     clhs166*normalslave(0,0)*penalty_parameter;
        const double clhs168 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs169 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs170 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs171 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs172 =     normalslave(1,0)*(clhs16*clhs168 + clhs169*clhs17 + clhs170*clhs18 + clhs171*clhs19 + clhs26) + normalslave(1,1)*(clhs1*clhs168 + clhs169*clhs3 + clhs170*clhs6 + clhs171*clhs9) + normalslave(1,2)*(clhs12*clhs168 + clhs13*clhs169 + clhs14*clhs170 + clhs15*clhs171);
        const double clhs173 =     clhs172*normalslave(1,0)*penalty_parameter;
        const double clhs174 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs175 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs176 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs177 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs178 =     normalslave(2,0)*(clhs16*clhs174 + clhs17*clhs175 + clhs176*clhs18 + clhs177*clhs19 + clhs36) + normalslave(2,1)*(clhs1*clhs174 + clhs175*clhs3 + clhs176*clhs6 + clhs177*clhs9) + normalslave(2,2)*(clhs12*clhs174 + clhs13*clhs175 + clhs14*clhs176 + clhs15*clhs177);
        const double clhs179 =     clhs178*normalslave(2,0)*penalty_parameter;
        const double clhs180 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs181 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs182 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs183 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs184 =     normalslave(0,0)*(clhs16*clhs180 + clhs17*clhs181 + clhs18*clhs182 + clhs183*clhs19) + normalslave(0,1)*(clhs1*clhs180 + clhs181*clhs3 + clhs182*clhs6 + clhs183*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs180 + clhs13*clhs181 + clhs14*clhs182 + clhs15*clhs183);
        const double clhs185 =     clhs184*normalslave(0,0)*penalty_parameter;
        const double clhs186 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs187 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs188 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs189 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs190 =     normalslave(1,0)*(clhs16*clhs186 + clhs17*clhs187 + clhs18*clhs188 + clhs189*clhs19) + normalslave(1,1)*(clhs1*clhs186 + clhs187*clhs3 + clhs188*clhs6 + clhs189*clhs9 + clhs26) + normalslave(1,2)*(clhs12*clhs186 + clhs13*clhs187 + clhs14*clhs188 + clhs15*clhs189);
        const double clhs191 =     clhs190*normalslave(1,0)*penalty_parameter;
        const double clhs192 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs193 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs194 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs195 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs196 =     normalslave(2,0)*(clhs16*clhs192 + clhs17*clhs193 + clhs18*clhs194 + clhs19*clhs195) + normalslave(2,1)*(clhs1*clhs192 + clhs193*clhs3 + clhs194*clhs6 + clhs195*clhs9 + clhs36) + normalslave(2,2)*(clhs12*clhs192 + clhs13*clhs193 + clhs14*clhs194 + clhs15*clhs195);
        const double clhs197 =     clhs196*normalslave(2,0)*penalty_parameter;
        const double clhs198 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs199 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs200 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs201 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs202 =     normalslave(0,0)*(clhs16*clhs198 + clhs17*clhs199 + clhs18*clhs200 + clhs19*clhs201) + normalslave(0,1)*(clhs1*clhs198 + clhs199*clhs3 + clhs200*clhs6 + clhs201*clhs9) + normalslave(0,2)*(clhs12*clhs198 + clhs13*clhs199 + clhs14*clhs200 + clhs15*clhs201 + clhs7);
        const double clhs203 =     clhs202*normalslave(0,0)*penalty_parameter;
        const double clhs204 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs205 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs206 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs207 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs208 =     normalslave(1,0)*(clhs16*clhs204 + clhs17*clhs205 + clhs18*clhs206 + clhs19*clhs207) + normalslave(1,1)*(clhs1*clhs204 + clhs205*clhs3 + clhs206*clhs6 + clhs207*clhs9) + normalslave(1,2)*(clhs12*clhs204 + clhs13*clhs205 + clhs14*clhs206 + clhs15*clhs207 + clhs26);
        const double clhs209 =     clhs208*normalslave(1,0)*penalty_parameter;
        const double clhs210 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs211 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs212 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs213 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs214 =     normalslave(2,0)*(clhs16*clhs210 + clhs17*clhs211 + clhs18*clhs212 + clhs19*clhs213) + normalslave(2,1)*(clhs1*clhs210 + clhs211*clhs3 + clhs212*clhs6 + clhs213*clhs9) + normalslave(2,2)*(clhs12*clhs210 + clhs13*clhs211 + clhs14*clhs212 + clhs15*clhs213 + clhs36);
        const double clhs215 =     clhs214*normalslave(2,0)*penalty_parameter;
        const double clhs216 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs217 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs218 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs219 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs220 =     normalslave(0,0)*(clhs10 + clhs16*clhs216 + clhs17*clhs217 + clhs18*clhs218 + clhs19*clhs219) + normalslave(0,1)*(clhs1*clhs216 + clhs217*clhs3 + clhs218*clhs6 + clhs219*clhs9) + normalslave(0,2)*(clhs12*clhs216 + clhs13*clhs217 + clhs14*clhs218 + clhs15*clhs219);
        const double clhs221 =     clhs220*normalslave(0,0)*penalty_parameter;
        const double clhs222 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs223 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs224 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs225 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs226 =     normalslave(1,0)*(clhs16*clhs222 + clhs17*clhs223 + clhs18*clhs224 + clhs19*clhs225 + clhs28) + normalslave(1,1)*(clhs1*clhs222 + clhs223*clhs3 + clhs224*clhs6 + clhs225*clhs9) + normalslave(1,2)*(clhs12*clhs222 + clhs13*clhs223 + clhs14*clhs224 + clhs15*clhs225);
        const double clhs227 =     clhs226*normalslave(1,0)*penalty_parameter;
        const double clhs228 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs229 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs230 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs231 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs232 =     normalslave(2,0)*(clhs16*clhs228 + clhs17*clhs229 + clhs18*clhs230 + clhs19*clhs231 + clhs38) + normalslave(2,1)*(clhs1*clhs228 + clhs229*clhs3 + clhs230*clhs6 + clhs231*clhs9) + normalslave(2,2)*(clhs12*clhs228 + clhs13*clhs229 + clhs14*clhs230 + clhs15*clhs231);
        const double clhs233 =     clhs232*normalslave(2,0)*penalty_parameter;
        const double clhs234 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs235 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs236 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs237 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs238 =     normalslave(0,0)*(clhs16*clhs234 + clhs17*clhs235 + clhs18*clhs236 + clhs19*clhs237) + normalslave(0,1)*(clhs1*clhs234 + clhs10 + clhs235*clhs3 + clhs236*clhs6 + clhs237*clhs9) + normalslave(0,2)*(clhs12*clhs234 + clhs13*clhs235 + clhs14*clhs236 + clhs15*clhs237);
        const double clhs239 =     clhs238*normalslave(0,0)*penalty_parameter;
        const double clhs240 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs241 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs242 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs243 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs244 =     normalslave(1,0)*(clhs16*clhs240 + clhs17*clhs241 + clhs18*clhs242 + clhs19*clhs243) + normalslave(1,1)*(clhs1*clhs240 + clhs241*clhs3 + clhs242*clhs6 + clhs243*clhs9 + clhs28) + normalslave(1,2)*(clhs12*clhs240 + clhs13*clhs241 + clhs14*clhs242 + clhs15*clhs243);
        const double clhs245 =     clhs244*normalslave(1,0)*penalty_parameter;
        const double clhs246 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs247 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs248 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs249 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs250 =     normalslave(2,0)*(clhs16*clhs246 + clhs17*clhs247 + clhs18*clhs248 + clhs19*clhs249) + normalslave(2,1)*(clhs1*clhs246 + clhs247*clhs3 + clhs248*clhs6 + clhs249*clhs9 + clhs38) + normalslave(2,2)*(clhs12*clhs246 + clhs13*clhs247 + clhs14*clhs248 + clhs15*clhs249);
        const double clhs251 =     clhs250*normalslave(2,0)*penalty_parameter;
        const double clhs252 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs253 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs254 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs255 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs256 =     normalslave(0,0)*(clhs16*clhs252 + clhs17*clhs253 + clhs18*clhs254 + clhs19*clhs255) + normalslave(0,1)*(clhs1*clhs252 + clhs253*clhs3 + clhs254*clhs6 + clhs255*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs252 + clhs13*clhs253 + clhs14*clhs254 + clhs15*clhs255);
        const double clhs257 =     clhs256*normalslave(0,0)*penalty_parameter;
        const double clhs258 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs259 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs260 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs261 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs262 =     normalslave(1,0)*(clhs16*clhs258 + clhs17*clhs259 + clhs18*clhs260 + clhs19*clhs261) + normalslave(1,1)*(clhs1*clhs258 + clhs259*clhs3 + clhs260*clhs6 + clhs261*clhs9) + normalslave(1,2)*(clhs12*clhs258 + clhs13*clhs259 + clhs14*clhs260 + clhs15*clhs261 + clhs28);
        const double clhs263 =     clhs262*normalslave(1,0)*penalty_parameter;
        const double clhs264 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs265 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs266 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs267 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs268 =     normalslave(2,0)*(clhs16*clhs264 + clhs17*clhs265 + clhs18*clhs266 + clhs19*clhs267) + normalslave(2,1)*(clhs1*clhs264 + clhs265*clhs3 + clhs266*clhs6 + clhs267*clhs9) + normalslave(2,2)*(clhs12*clhs264 + clhs13*clhs265 + clhs14*clhs266 + clhs15*clhs267 + clhs38);
        const double clhs269 =     clhs268*normalslave(2,0)*penalty_parameter;
        const double clhs270 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs271 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs272 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs273 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs274 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs275 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs276 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs277 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs278 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs279 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs280 =     normalslave(0,0)*(-clhs16*clhs270 - clhs17*clhs277 - clhs18*clhs278 - clhs19*clhs279 + clhs273*clhs42 + clhs274*clhs44 + clhs275*clhs46 + clhs276*clhs48 + clhs43) + normalslave(0,1)*(-clhs1*clhs270 + clhs273*clhs50 + clhs274*clhs51 + clhs275*clhs52 + clhs276*clhs53 - clhs277*clhs3 - clhs278*clhs6 - clhs279*clhs9) + normalslave(0,2)*(-clhs12*clhs270 - clhs13*clhs277 - clhs14*clhs278 - clhs15*clhs279 + clhs273*clhs54 + clhs274*clhs55 + clhs275*clhs56 + clhs276*clhs57);
        const double clhs281 =     clhs280*normalslave(0,0)*penalty_parameter;
        const double clhs282 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs283 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs284 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs285 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs286 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs287 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs288 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs289 =     normalslave(1,0)*(-clhs16*clhs271 - clhs17*clhs286 - clhs18*clhs287 - clhs19*clhs288 + clhs282*clhs42 + clhs283*clhs44 + clhs284*clhs46 + clhs285*clhs48 + clhs60) + normalslave(1,1)*(-clhs1*clhs271 + clhs282*clhs50 + clhs283*clhs51 + clhs284*clhs52 + clhs285*clhs53 - clhs286*clhs3 - clhs287*clhs6 - clhs288*clhs9) + normalslave(1,2)*(-clhs12*clhs271 - clhs13*clhs286 - clhs14*clhs287 - clhs15*clhs288 + clhs282*clhs54 + clhs283*clhs55 + clhs284*clhs56 + clhs285*clhs57);
        const double clhs290 =     clhs289*normalslave(1,0)*penalty_parameter;
        const double clhs291 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs292 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs293 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs294 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs295 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs296 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs297 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs298 =     normalslave(2,0)*(-clhs16*clhs272 - clhs17*clhs295 - clhs18*clhs296 - clhs19*clhs297 + clhs291*clhs42 + clhs292*clhs44 + clhs293*clhs46 + clhs294*clhs48 + clhs66) + normalslave(2,1)*(-clhs1*clhs272 + clhs291*clhs50 + clhs292*clhs51 + clhs293*clhs52 + clhs294*clhs53 - clhs295*clhs3 - clhs296*clhs6 - clhs297*clhs9) + normalslave(2,2)*(-clhs12*clhs272 - clhs13*clhs295 - clhs14*clhs296 - clhs15*clhs297 + clhs291*clhs54 + clhs292*clhs55 + clhs293*clhs56 + clhs294*clhs57);
        const double clhs299 =     clhs298*normalslave(2,0)*penalty_parameter;
        const double clhs300 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs301 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs302 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs303 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs304 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs305 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs306 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs307 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs308 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs309 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs310 =     normalslave(0,0)*(-clhs16*clhs300 - clhs17*clhs307 - clhs18*clhs308 - clhs19*clhs309 + clhs303*clhs42 + clhs304*clhs44 + clhs305*clhs46 + clhs306*clhs48) + normalslave(0,1)*(-clhs1*clhs300 - clhs3*clhs307 + clhs303*clhs50 + clhs304*clhs51 + clhs305*clhs52 + clhs306*clhs53 - clhs308*clhs6 - clhs309*clhs9 + clhs43) + normalslave(0,2)*(-clhs12*clhs300 - clhs13*clhs307 - clhs14*clhs308 - clhs15*clhs309 + clhs303*clhs54 + clhs304*clhs55 + clhs305*clhs56 + clhs306*clhs57);
        const double clhs311 =     clhs310*normalslave(0,0)*penalty_parameter;
        const double clhs312 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs313 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs314 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs315 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs316 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs317 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs318 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs319 =     normalslave(1,0)*(-clhs16*clhs301 - clhs17*clhs316 - clhs18*clhs317 - clhs19*clhs318 + clhs312*clhs42 + clhs313*clhs44 + clhs314*clhs46 + clhs315*clhs48) + normalslave(1,1)*(-clhs1*clhs301 - clhs3*clhs316 + clhs312*clhs50 + clhs313*clhs51 + clhs314*clhs52 + clhs315*clhs53 - clhs317*clhs6 - clhs318*clhs9 + clhs60) + normalslave(1,2)*(-clhs12*clhs301 - clhs13*clhs316 - clhs14*clhs317 - clhs15*clhs318 + clhs312*clhs54 + clhs313*clhs55 + clhs314*clhs56 + clhs315*clhs57);
        const double clhs320 =     clhs319*normalslave(1,0)*penalty_parameter;
        const double clhs321 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs322 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs323 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs324 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs325 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs326 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs327 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs328 =     normalslave(2,0)*(-clhs16*clhs302 - clhs17*clhs325 - clhs18*clhs326 - clhs19*clhs327 + clhs321*clhs42 + clhs322*clhs44 + clhs323*clhs46 + clhs324*clhs48) + normalslave(2,1)*(-clhs1*clhs302 - clhs3*clhs325 + clhs321*clhs50 + clhs322*clhs51 + clhs323*clhs52 + clhs324*clhs53 - clhs326*clhs6 - clhs327*clhs9 + clhs66) + normalslave(2,2)*(-clhs12*clhs302 - clhs13*clhs325 - clhs14*clhs326 - clhs15*clhs327 + clhs321*clhs54 + clhs322*clhs55 + clhs323*clhs56 + clhs324*clhs57);
        const double clhs329 =     clhs328*normalslave(2,0)*penalty_parameter;
        const double clhs330 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs331 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs332 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs333 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs334 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs335 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs336 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs337 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs338 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs339 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs340 =     normalslave(0,0)*(-clhs16*clhs330 - clhs17*clhs337 - clhs18*clhs338 - clhs19*clhs339 + clhs333*clhs42 + clhs334*clhs44 + clhs335*clhs46 + clhs336*clhs48) + normalslave(0,1)*(-clhs1*clhs330 - clhs3*clhs337 + clhs333*clhs50 + clhs334*clhs51 + clhs335*clhs52 + clhs336*clhs53 - clhs338*clhs6 - clhs339*clhs9) + normalslave(0,2)*(-clhs12*clhs330 - clhs13*clhs337 - clhs14*clhs338 - clhs15*clhs339 + clhs333*clhs54 + clhs334*clhs55 + clhs335*clhs56 + clhs336*clhs57 + clhs43);
        const double clhs341 =     clhs340*normalslave(0,0)*penalty_parameter;
        const double clhs342 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs343 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs344 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs345 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs346 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs347 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs348 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs349 =     normalslave(1,0)*(-clhs16*clhs331 - clhs17*clhs346 - clhs18*clhs347 - clhs19*clhs348 + clhs342*clhs42 + clhs343*clhs44 + clhs344*clhs46 + clhs345*clhs48) + normalslave(1,1)*(-clhs1*clhs331 - clhs3*clhs346 + clhs342*clhs50 + clhs343*clhs51 + clhs344*clhs52 + clhs345*clhs53 - clhs347*clhs6 - clhs348*clhs9) + normalslave(1,2)*(-clhs12*clhs331 - clhs13*clhs346 - clhs14*clhs347 - clhs15*clhs348 + clhs342*clhs54 + clhs343*clhs55 + clhs344*clhs56 + clhs345*clhs57 + clhs60);
        const double clhs350 =     clhs349*normalslave(1,0)*penalty_parameter;
        const double clhs351 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs352 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs353 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs354 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs355 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs356 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs357 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs358 =     normalslave(2,0)*(-clhs16*clhs332 - clhs17*clhs355 - clhs18*clhs356 - clhs19*clhs357 + clhs351*clhs42 + clhs352*clhs44 + clhs353*clhs46 + clhs354*clhs48) + normalslave(2,1)*(-clhs1*clhs332 - clhs3*clhs355 + clhs351*clhs50 + clhs352*clhs51 + clhs353*clhs52 + clhs354*clhs53 - clhs356*clhs6 - clhs357*clhs9) + normalslave(2,2)*(-clhs12*clhs332 - clhs13*clhs355 - clhs14*clhs356 - clhs15*clhs357 + clhs351*clhs54 + clhs352*clhs55 + clhs353*clhs56 + clhs354*clhs57 + clhs66);
        const double clhs359 =     clhs358*normalslave(2,0)*penalty_parameter;
        const double clhs360 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs361 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs362 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs363 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs364 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs365 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs366 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs367 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs368 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs369 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs370 =     normalslave(0,0)*(-clhs16*clhs360 - clhs17*clhs367 - clhs18*clhs368 - clhs19*clhs369 + clhs363*clhs42 + clhs364*clhs44 + clhs365*clhs46 + clhs366*clhs48 + clhs45) + normalslave(0,1)*(-clhs1*clhs360 - clhs3*clhs367 + clhs363*clhs50 + clhs364*clhs51 + clhs365*clhs52 + clhs366*clhs53 - clhs368*clhs6 - clhs369*clhs9) + normalslave(0,2)*(-clhs12*clhs360 - clhs13*clhs367 - clhs14*clhs368 - clhs15*clhs369 + clhs363*clhs54 + clhs364*clhs55 + clhs365*clhs56 + clhs366*clhs57);
        const double clhs371 =     clhs370*normalslave(0,0)*penalty_parameter;
        const double clhs372 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs373 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs374 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs375 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs376 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs377 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs378 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs379 =     normalslave(1,0)*(-clhs16*clhs361 - clhs17*clhs376 - clhs18*clhs377 - clhs19*clhs378 + clhs372*clhs42 + clhs373*clhs44 + clhs374*clhs46 + clhs375*clhs48 + clhs61) + normalslave(1,1)*(-clhs1*clhs361 - clhs3*clhs376 + clhs372*clhs50 + clhs373*clhs51 + clhs374*clhs52 + clhs375*clhs53 - clhs377*clhs6 - clhs378*clhs9) + normalslave(1,2)*(-clhs12*clhs361 - clhs13*clhs376 - clhs14*clhs377 - clhs15*clhs378 + clhs372*clhs54 + clhs373*clhs55 + clhs374*clhs56 + clhs375*clhs57);
        const double clhs380 =     clhs379*normalslave(1,0)*penalty_parameter;
        const double clhs381 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs382 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs383 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs384 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs385 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs386 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs387 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs388 =     normalslave(2,0)*(-clhs16*clhs362 - clhs17*clhs385 - clhs18*clhs386 - clhs19*clhs387 + clhs381*clhs42 + clhs382*clhs44 + clhs383*clhs46 + clhs384*clhs48 + clhs67) + normalslave(2,1)*(-clhs1*clhs362 - clhs3*clhs385 + clhs381*clhs50 + clhs382*clhs51 + clhs383*clhs52 + clhs384*clhs53 - clhs386*clhs6 - clhs387*clhs9) + normalslave(2,2)*(-clhs12*clhs362 - clhs13*clhs385 - clhs14*clhs386 - clhs15*clhs387 + clhs381*clhs54 + clhs382*clhs55 + clhs383*clhs56 + clhs384*clhs57);
        const double clhs389 =     clhs388*normalslave(2,0)*penalty_parameter;
        const double clhs390 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs391 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs392 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs393 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs394 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs395 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs396 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs397 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs398 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs399 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs400 =     normalslave(0,0)*(-clhs16*clhs390 - clhs17*clhs397 - clhs18*clhs398 - clhs19*clhs399 + clhs393*clhs42 + clhs394*clhs44 + clhs395*clhs46 + clhs396*clhs48) + normalslave(0,1)*(-clhs1*clhs390 - clhs3*clhs397 + clhs393*clhs50 + clhs394*clhs51 + clhs395*clhs52 + clhs396*clhs53 - clhs398*clhs6 - clhs399*clhs9 + clhs45) + normalslave(0,2)*(-clhs12*clhs390 - clhs13*clhs397 - clhs14*clhs398 - clhs15*clhs399 + clhs393*clhs54 + clhs394*clhs55 + clhs395*clhs56 + clhs396*clhs57);
        const double clhs401 =     clhs400*normalslave(0,0)*penalty_parameter;
        const double clhs402 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs403 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs404 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs405 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs406 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs407 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs408 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs409 =     normalslave(1,0)*(-clhs16*clhs391 - clhs17*clhs406 - clhs18*clhs407 - clhs19*clhs408 + clhs402*clhs42 + clhs403*clhs44 + clhs404*clhs46 + clhs405*clhs48) + normalslave(1,1)*(-clhs1*clhs391 - clhs3*clhs406 + clhs402*clhs50 + clhs403*clhs51 + clhs404*clhs52 + clhs405*clhs53 - clhs407*clhs6 - clhs408*clhs9 + clhs61) + normalslave(1,2)*(-clhs12*clhs391 - clhs13*clhs406 - clhs14*clhs407 - clhs15*clhs408 + clhs402*clhs54 + clhs403*clhs55 + clhs404*clhs56 + clhs405*clhs57);
        const double clhs410 =     clhs409*normalslave(1,0)*penalty_parameter;
        const double clhs411 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs412 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs413 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs414 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs415 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs416 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs417 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs418 =     normalslave(2,0)*(-clhs16*clhs392 - clhs17*clhs415 - clhs18*clhs416 - clhs19*clhs417 + clhs411*clhs42 + clhs412*clhs44 + clhs413*clhs46 + clhs414*clhs48) + normalslave(2,1)*(-clhs1*clhs392 - clhs3*clhs415 + clhs411*clhs50 + clhs412*clhs51 + clhs413*clhs52 + clhs414*clhs53 - clhs416*clhs6 - clhs417*clhs9 + clhs67) + normalslave(2,2)*(-clhs12*clhs392 - clhs13*clhs415 - clhs14*clhs416 - clhs15*clhs417 + clhs411*clhs54 + clhs412*clhs55 + clhs413*clhs56 + clhs414*clhs57);
        const double clhs419 =     clhs418*normalslave(2,0)*penalty_parameter;
        const double clhs420 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs421 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs422 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs423 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs424 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs425 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs426 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs427 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs428 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs429 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs430 =     normalslave(0,0)*(-clhs16*clhs420 - clhs17*clhs427 - clhs18*clhs428 - clhs19*clhs429 + clhs42*clhs423 + clhs424*clhs44 + clhs425*clhs46 + clhs426*clhs48) + normalslave(0,1)*(-clhs1*clhs420 - clhs3*clhs427 + clhs423*clhs50 + clhs424*clhs51 + clhs425*clhs52 + clhs426*clhs53 - clhs428*clhs6 - clhs429*clhs9) + normalslave(0,2)*(-clhs12*clhs420 - clhs13*clhs427 - clhs14*clhs428 - clhs15*clhs429 + clhs423*clhs54 + clhs424*clhs55 + clhs425*clhs56 + clhs426*clhs57 + clhs45);
        const double clhs431 =     clhs430*normalslave(0,0)*penalty_parameter;
        const double clhs432 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs433 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs434 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs435 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs436 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs437 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs438 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs439 =     normalslave(1,0)*(-clhs16*clhs421 - clhs17*clhs436 - clhs18*clhs437 - clhs19*clhs438 + clhs42*clhs432 + clhs433*clhs44 + clhs434*clhs46 + clhs435*clhs48) + normalslave(1,1)*(-clhs1*clhs421 - clhs3*clhs436 + clhs432*clhs50 + clhs433*clhs51 + clhs434*clhs52 + clhs435*clhs53 - clhs437*clhs6 - clhs438*clhs9) + normalslave(1,2)*(-clhs12*clhs421 - clhs13*clhs436 - clhs14*clhs437 - clhs15*clhs438 + clhs432*clhs54 + clhs433*clhs55 + clhs434*clhs56 + clhs435*clhs57 + clhs61);
        const double clhs440 =     clhs439*normalslave(1,0)*penalty_parameter;
        const double clhs441 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs442 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs443 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs444 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs445 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs446 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs447 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs448 =     normalslave(2,0)*(-clhs16*clhs422 - clhs17*clhs445 - clhs18*clhs446 - clhs19*clhs447 + clhs42*clhs441 + clhs44*clhs442 + clhs443*clhs46 + clhs444*clhs48) + normalslave(2,1)*(-clhs1*clhs422 - clhs3*clhs445 + clhs441*clhs50 + clhs442*clhs51 + clhs443*clhs52 + clhs444*clhs53 - clhs446*clhs6 - clhs447*clhs9) + normalslave(2,2)*(-clhs12*clhs422 - clhs13*clhs445 - clhs14*clhs446 - clhs15*clhs447 + clhs441*clhs54 + clhs442*clhs55 + clhs443*clhs56 + clhs444*clhs57 + clhs67);
        const double clhs449 =     clhs448*normalslave(2,0)*penalty_parameter;
        const double clhs450 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs451 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs452 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs453 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs454 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs455 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs456 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs457 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs458 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs459 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs460 =     normalslave(0,0)*(-clhs16*clhs450 - clhs17*clhs457 - clhs18*clhs458 - clhs19*clhs459 + clhs42*clhs453 + clhs44*clhs454 + clhs455*clhs46 + clhs456*clhs48 + clhs47) + normalslave(0,1)*(-clhs1*clhs450 - clhs3*clhs457 + clhs453*clhs50 + clhs454*clhs51 + clhs455*clhs52 + clhs456*clhs53 - clhs458*clhs6 - clhs459*clhs9) + normalslave(0,2)*(-clhs12*clhs450 - clhs13*clhs457 - clhs14*clhs458 - clhs15*clhs459 + clhs453*clhs54 + clhs454*clhs55 + clhs455*clhs56 + clhs456*clhs57);
        const double clhs461 =     clhs460*normalslave(0,0)*penalty_parameter;
        const double clhs462 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs463 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs464 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs465 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs466 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs467 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs468 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs469 =     normalslave(1,0)*(-clhs16*clhs451 - clhs17*clhs466 - clhs18*clhs467 - clhs19*clhs468 + clhs42*clhs462 + clhs44*clhs463 + clhs46*clhs464 + clhs465*clhs48 + clhs62) + normalslave(1,1)*(-clhs1*clhs451 - clhs3*clhs466 + clhs462*clhs50 + clhs463*clhs51 + clhs464*clhs52 + clhs465*clhs53 - clhs467*clhs6 - clhs468*clhs9) + normalslave(1,2)*(-clhs12*clhs451 - clhs13*clhs466 - clhs14*clhs467 - clhs15*clhs468 + clhs462*clhs54 + clhs463*clhs55 + clhs464*clhs56 + clhs465*clhs57);
        const double clhs470 =     clhs469*normalslave(1,0)*penalty_parameter;
        const double clhs471 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs472 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs473 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs474 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs475 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs476 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs477 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs478 =     normalslave(2,0)*(-clhs16*clhs452 - clhs17*clhs475 - clhs18*clhs476 - clhs19*clhs477 + clhs42*clhs471 + clhs44*clhs472 + clhs46*clhs473 + clhs474*clhs48 + clhs68) + normalslave(2,1)*(-clhs1*clhs452 - clhs3*clhs475 + clhs471*clhs50 + clhs472*clhs51 + clhs473*clhs52 + clhs474*clhs53 - clhs476*clhs6 - clhs477*clhs9) + normalslave(2,2)*(-clhs12*clhs452 - clhs13*clhs475 - clhs14*clhs476 - clhs15*clhs477 + clhs471*clhs54 + clhs472*clhs55 + clhs473*clhs56 + clhs474*clhs57);
        const double clhs479 =     clhs478*normalslave(2,0)*penalty_parameter;
        const double clhs480 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs481 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs482 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs483 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs484 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs485 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs486 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs487 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs488 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs489 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs490 =     normalslave(0,0)*(-clhs16*clhs480 - clhs17*clhs487 - clhs18*clhs488 - clhs19*clhs489 + clhs42*clhs483 + clhs44*clhs484 + clhs46*clhs485 + clhs48*clhs486) + normalslave(0,1)*(-clhs1*clhs480 - clhs3*clhs487 + clhs47 + clhs483*clhs50 + clhs484*clhs51 + clhs485*clhs52 + clhs486*clhs53 - clhs488*clhs6 - clhs489*clhs9) + normalslave(0,2)*(-clhs12*clhs480 - clhs13*clhs487 - clhs14*clhs488 - clhs15*clhs489 + clhs483*clhs54 + clhs484*clhs55 + clhs485*clhs56 + clhs486*clhs57);
        const double clhs491 =     clhs490*normalslave(0,0)*penalty_parameter;
        const double clhs492 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs493 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs494 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs495 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs496 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs497 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs498 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs499 =     normalslave(1,0)*(-clhs16*clhs481 - clhs17*clhs496 - clhs18*clhs497 - clhs19*clhs498 + clhs42*clhs492 + clhs44*clhs493 + clhs46*clhs494 + clhs48*clhs495) + normalslave(1,1)*(-clhs1*clhs481 - clhs3*clhs496 + clhs492*clhs50 + clhs493*clhs51 + clhs494*clhs52 + clhs495*clhs53 - clhs497*clhs6 - clhs498*clhs9 + clhs62) + normalslave(1,2)*(-clhs12*clhs481 - clhs13*clhs496 - clhs14*clhs497 - clhs15*clhs498 + clhs492*clhs54 + clhs493*clhs55 + clhs494*clhs56 + clhs495*clhs57);
        const double clhs500 =     clhs499*normalslave(1,0)*penalty_parameter;
        const double clhs501 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs502 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs503 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs504 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs505 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs506 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs507 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs508 =     normalslave(2,0)*(-clhs16*clhs482 - clhs17*clhs505 - clhs18*clhs506 - clhs19*clhs507 + clhs42*clhs501 + clhs44*clhs502 + clhs46*clhs503 + clhs48*clhs504) + normalslave(2,1)*(-clhs1*clhs482 - clhs3*clhs505 + clhs50*clhs501 + clhs502*clhs51 + clhs503*clhs52 + clhs504*clhs53 - clhs506*clhs6 - clhs507*clhs9 + clhs68) + normalslave(2,2)*(-clhs12*clhs482 - clhs13*clhs505 - clhs14*clhs506 - clhs15*clhs507 + clhs501*clhs54 + clhs502*clhs55 + clhs503*clhs56 + clhs504*clhs57);
        const double clhs509 =     clhs508*normalslave(2,0)*penalty_parameter;
        const double clhs510 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs511 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs512 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs513 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs514 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs515 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs516 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs517 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs518 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs519 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs520 =     normalslave(0,0)*(-clhs16*clhs510 - clhs17*clhs517 - clhs18*clhs518 - clhs19*clhs519 + clhs42*clhs513 + clhs44*clhs514 + clhs46*clhs515 + clhs48*clhs516) + normalslave(0,1)*(-clhs1*clhs510 - clhs3*clhs517 + clhs50*clhs513 + clhs51*clhs514 + clhs515*clhs52 + clhs516*clhs53 - clhs518*clhs6 - clhs519*clhs9) + normalslave(0,2)*(-clhs12*clhs510 - clhs13*clhs517 - clhs14*clhs518 - clhs15*clhs519 + clhs47 + clhs513*clhs54 + clhs514*clhs55 + clhs515*clhs56 + clhs516*clhs57);
        const double clhs521 =     clhs520*normalslave(0,0)*penalty_parameter;
        const double clhs522 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs523 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs524 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs525 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs526 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs527 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs528 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs529 =     normalslave(1,0)*(-clhs16*clhs511 - clhs17*clhs526 - clhs18*clhs527 - clhs19*clhs528 + clhs42*clhs522 + clhs44*clhs523 + clhs46*clhs524 + clhs48*clhs525) + normalslave(1,1)*(-clhs1*clhs511 - clhs3*clhs526 + clhs50*clhs522 + clhs51*clhs523 + clhs52*clhs524 + clhs525*clhs53 - clhs527*clhs6 - clhs528*clhs9) + normalslave(1,2)*(-clhs12*clhs511 - clhs13*clhs526 - clhs14*clhs527 - clhs15*clhs528 + clhs522*clhs54 + clhs523*clhs55 + clhs524*clhs56 + clhs525*clhs57 + clhs62);
        const double clhs530 =     clhs529*normalslave(1,0)*penalty_parameter;
        const double clhs531 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs532 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs533 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs534 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs535 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs536 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs537 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs538 =     normalslave(2,0)*(-clhs16*clhs512 - clhs17*clhs535 - clhs18*clhs536 - clhs19*clhs537 + clhs42*clhs531 + clhs44*clhs532 + clhs46*clhs533 + clhs48*clhs534) + normalslave(2,1)*(-clhs1*clhs512 - clhs3*clhs535 + clhs50*clhs531 + clhs51*clhs532 + clhs52*clhs533 + clhs53*clhs534 - clhs536*clhs6 - clhs537*clhs9) + normalslave(2,2)*(-clhs12*clhs512 - clhs13*clhs535 - clhs14*clhs536 - clhs15*clhs537 + clhs531*clhs54 + clhs532*clhs55 + clhs533*clhs56 + clhs534*clhs57 + clhs68);
        const double clhs539 =     clhs538*normalslave(2,0)*penalty_parameter;
        const double clhs540 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs541 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs542 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs543 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs544 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs545 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs546 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs547 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs548 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs549 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs550 =     normalslave(0,0)*(-clhs16*clhs540 - clhs17*clhs547 - clhs18*clhs548 - clhs19*clhs549 + clhs42*clhs543 + clhs44*clhs544 + clhs46*clhs545 + clhs48*clhs546 + clhs49) + normalslave(0,1)*(-clhs1*clhs540 - clhs3*clhs547 + clhs50*clhs543 + clhs51*clhs544 + clhs52*clhs545 + clhs53*clhs546 - clhs548*clhs6 - clhs549*clhs9) + normalslave(0,2)*(-clhs12*clhs540 - clhs13*clhs547 - clhs14*clhs548 - clhs15*clhs549 + clhs54*clhs543 + clhs544*clhs55 + clhs545*clhs56 + clhs546*clhs57);
        const double clhs551 =     clhs550*normalslave(0,0)*penalty_parameter;
        const double clhs552 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs553 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs554 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs555 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs556 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs557 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs558 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs559 =     normalslave(1,0)*(-clhs16*clhs541 - clhs17*clhs556 - clhs18*clhs557 - clhs19*clhs558 + clhs42*clhs552 + clhs44*clhs553 + clhs46*clhs554 + clhs48*clhs555 + clhs63) + normalslave(1,1)*(-clhs1*clhs541 - clhs3*clhs556 + clhs50*clhs552 + clhs51*clhs553 + clhs52*clhs554 + clhs53*clhs555 - clhs557*clhs6 - clhs558*clhs9) + normalslave(1,2)*(-clhs12*clhs541 - clhs13*clhs556 - clhs14*clhs557 - clhs15*clhs558 + clhs54*clhs552 + clhs55*clhs553 + clhs554*clhs56 + clhs555*clhs57);
        const double clhs560 =     clhs559*normalslave(1,0)*penalty_parameter;
        const double clhs561 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs562 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs563 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs564 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs565 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs566 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs567 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs568 =     normalslave(2,0)*(-clhs16*clhs542 - clhs17*clhs565 - clhs18*clhs566 - clhs19*clhs567 + clhs42*clhs561 + clhs44*clhs562 + clhs46*clhs563 + clhs48*clhs564 + clhs69) + normalslave(2,1)*(-clhs1*clhs542 - clhs3*clhs565 + clhs50*clhs561 + clhs51*clhs562 + clhs52*clhs563 + clhs53*clhs564 - clhs566*clhs6 - clhs567*clhs9) + normalslave(2,2)*(-clhs12*clhs542 - clhs13*clhs565 - clhs14*clhs566 - clhs15*clhs567 + clhs54*clhs561 + clhs55*clhs562 + clhs56*clhs563 + clhs564*clhs57);
        const double clhs569 =     clhs568*normalslave(2,0)*penalty_parameter;
        const double clhs570 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs571 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs572 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs573 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs574 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs575 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs576 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs577 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs578 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs579 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs580 =     normalslave(0,0)*(-clhs16*clhs570 - clhs17*clhs577 - clhs18*clhs578 - clhs19*clhs579 + clhs42*clhs573 + clhs44*clhs574 + clhs46*clhs575 + clhs48*clhs576) + normalslave(0,1)*(-clhs1*clhs570 - clhs3*clhs577 + clhs49 + clhs50*clhs573 + clhs51*clhs574 + clhs52*clhs575 + clhs53*clhs576 - clhs578*clhs6 - clhs579*clhs9) + normalslave(0,2)*(-clhs12*clhs570 - clhs13*clhs577 - clhs14*clhs578 - clhs15*clhs579 + clhs54*clhs573 + clhs55*clhs574 + clhs56*clhs575 + clhs57*clhs576);
        const double clhs581 =     clhs580*normalslave(0,0)*penalty_parameter;
        const double clhs582 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs583 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs584 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs585 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs586 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs587 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs588 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs589 =     normalslave(1,0)*(-clhs16*clhs571 - clhs17*clhs586 - clhs18*clhs587 - clhs19*clhs588 + clhs42*clhs582 + clhs44*clhs583 + clhs46*clhs584 + clhs48*clhs585) + normalslave(1,1)*(-clhs1*clhs571 - clhs3*clhs586 + clhs50*clhs582 + clhs51*clhs583 + clhs52*clhs584 + clhs53*clhs585 - clhs587*clhs6 - clhs588*clhs9 + clhs63) + normalslave(1,2)*(-clhs12*clhs571 - clhs13*clhs586 - clhs14*clhs587 - clhs15*clhs588 + clhs54*clhs582 + clhs55*clhs583 + clhs56*clhs584 + clhs57*clhs585);
        const double clhs590 =     clhs589*normalslave(1,0)*penalty_parameter;
        const double clhs591 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs592 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs593 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs594 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs595 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs596 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs597 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs598 =     normalslave(2,0)*(-clhs16*clhs572 - clhs17*clhs595 - clhs18*clhs596 - clhs19*clhs597 + clhs42*clhs591 + clhs44*clhs592 + clhs46*clhs593 + clhs48*clhs594) + normalslave(2,1)*(-clhs1*clhs572 - clhs3*clhs595 + clhs50*clhs591 + clhs51*clhs592 + clhs52*clhs593 + clhs53*clhs594 - clhs596*clhs6 - clhs597*clhs9 + clhs69) + normalslave(2,2)*(-clhs12*clhs572 - clhs13*clhs595 - clhs14*clhs596 - clhs15*clhs597 + clhs54*clhs591 + clhs55*clhs592 + clhs56*clhs593 + clhs57*clhs594);
        const double clhs599 =     clhs598*normalslave(2,0)*penalty_parameter;
        const double clhs600 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs601 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs602 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs603 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs604 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs605 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs606 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs607 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs608 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs609 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs610 =     normalslave(0,0)*(-clhs16*clhs600 - clhs17*clhs607 - clhs18*clhs608 - clhs19*clhs609 + clhs42*clhs603 + clhs44*clhs604 + clhs46*clhs605 + clhs48*clhs606) + normalslave(0,1)*(-clhs1*clhs600 - clhs3*clhs607 + clhs50*clhs603 + clhs51*clhs604 + clhs52*clhs605 + clhs53*clhs606 - clhs6*clhs608 - clhs609*clhs9) + normalslave(0,2)*(-clhs12*clhs600 - clhs13*clhs607 - clhs14*clhs608 - clhs15*clhs609 + clhs49 + clhs54*clhs603 + clhs55*clhs604 + clhs56*clhs605 + clhs57*clhs606);
        const double clhs611 =     clhs610*normalslave(0,0)*penalty_parameter;
        const double clhs612 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs613 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs614 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs615 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs616 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs617 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs618 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs619 =     normalslave(1,0)*(-clhs16*clhs601 - clhs17*clhs616 - clhs18*clhs617 - clhs19*clhs618 + clhs42*clhs612 + clhs44*clhs613 + clhs46*clhs614 + clhs48*clhs615) + normalslave(1,1)*(-clhs1*clhs601 - clhs3*clhs616 + clhs50*clhs612 + clhs51*clhs613 + clhs52*clhs614 + clhs53*clhs615 - clhs6*clhs617 - clhs618*clhs9) + normalslave(1,2)*(-clhs12*clhs601 - clhs13*clhs616 - clhs14*clhs617 - clhs15*clhs618 + clhs54*clhs612 + clhs55*clhs613 + clhs56*clhs614 + clhs57*clhs615 + clhs63);
        const double clhs620 =     clhs619*normalslave(1,0)*penalty_parameter;
        const double clhs621 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs622 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs623 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs624 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs625 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs626 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs627 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs628 =     normalslave(2,0)*(-clhs16*clhs602 - clhs17*clhs625 - clhs18*clhs626 - clhs19*clhs627 + clhs42*clhs621 + clhs44*clhs622 + clhs46*clhs623 + clhs48*clhs624) + normalslave(2,1)*(-clhs1*clhs602 - clhs3*clhs625 + clhs50*clhs621 + clhs51*clhs622 + clhs52*clhs623 + clhs53*clhs624 - clhs6*clhs626 - clhs627*clhs9) + normalslave(2,2)*(-clhs12*clhs602 - clhs13*clhs625 - clhs14*clhs626 - clhs15*clhs627 + clhs54*clhs621 + clhs55*clhs622 + clhs56*clhs623 + clhs57*clhs624 + clhs69);
        const double clhs629 =     clhs628*normalslave(2,0)*penalty_parameter;
        const double clhs630 =     normalslave(0,0)*scale_factor;
        const double clhs631 =     normalslave(1,0)*scale_factor;
        const double clhs632 =     normalslave(2,0)*scale_factor;
        const double clhs633 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs634 =     clhs30*normalslave(1,1)*penalty_parameter;
        const double clhs635 =     clhs40*normalslave(2,1)*penalty_parameter;
        const double clhs636 =     clhs58*normalslave(0,1);
        const double clhs637 =     clhs64*normalslave(1,1);
        const double clhs638 =     clhs70*normalslave(2,1);
        const double clhs639 =     clhs76*normalslave(0,1)*penalty_parameter;
        const double clhs640 =     clhs82*normalslave(1,1)*penalty_parameter;
        const double clhs641 =     clhs88*normalslave(2,1)*penalty_parameter;
        const double clhs642 =     clhs94*normalslave(0,1)*penalty_parameter;
        const double clhs643 =     clhs100*normalslave(1,1)*penalty_parameter;
        const double clhs644 =     clhs106*normalslave(2,1)*penalty_parameter;
        const double clhs645 =     clhs112*normalslave(0,1)*penalty_parameter;
        const double clhs646 =     clhs118*normalslave(1,1)*penalty_parameter;
        const double clhs647 =     clhs124*normalslave(2,1)*penalty_parameter;
        const double clhs648 =     clhs130*normalslave(0,1)*penalty_parameter;
        const double clhs649 =     clhs136*normalslave(1,1)*penalty_parameter;
        const double clhs650 =     clhs142*normalslave(2,1)*penalty_parameter;
        const double clhs651 =     clhs148*normalslave(0,1)*penalty_parameter;
        const double clhs652 =     clhs154*normalslave(1,1)*penalty_parameter;
        const double clhs653 =     clhs160*normalslave(2,1)*penalty_parameter;
        const double clhs654 =     clhs166*normalslave(0,1)*penalty_parameter;
        const double clhs655 =     clhs172*normalslave(1,1)*penalty_parameter;
        const double clhs656 =     clhs178*normalslave(2,1)*penalty_parameter;
        const double clhs657 =     clhs184*normalslave(0,1)*penalty_parameter;
        const double clhs658 =     clhs190*normalslave(1,1)*penalty_parameter;
        const double clhs659 =     clhs196*normalslave(2,1)*penalty_parameter;
        const double clhs660 =     clhs202*normalslave(0,1)*penalty_parameter;
        const double clhs661 =     clhs208*normalslave(1,1)*penalty_parameter;
        const double clhs662 =     clhs214*normalslave(2,1)*penalty_parameter;
        const double clhs663 =     clhs220*normalslave(0,1)*penalty_parameter;
        const double clhs664 =     clhs226*normalslave(1,1)*penalty_parameter;
        const double clhs665 =     clhs232*normalslave(2,1)*penalty_parameter;
        const double clhs666 =     clhs238*normalslave(0,1)*penalty_parameter;
        const double clhs667 =     clhs244*normalslave(1,1)*penalty_parameter;
        const double clhs668 =     clhs250*normalslave(2,1)*penalty_parameter;
        const double clhs669 =     clhs256*normalslave(0,1)*penalty_parameter;
        const double clhs670 =     clhs262*normalslave(1,1)*penalty_parameter;
        const double clhs671 =     clhs268*normalslave(2,1)*penalty_parameter;
        const double clhs672 =     clhs280*normalslave(0,1)*penalty_parameter;
        const double clhs673 =     clhs289*normalslave(1,1)*penalty_parameter;
        const double clhs674 =     clhs298*normalslave(2,1)*penalty_parameter;
        const double clhs675 =     clhs310*normalslave(0,1)*penalty_parameter;
        const double clhs676 =     clhs319*normalslave(1,1)*penalty_parameter;
        const double clhs677 =     clhs328*normalslave(2,1)*penalty_parameter;
        const double clhs678 =     clhs340*normalslave(0,1)*penalty_parameter;
        const double clhs679 =     clhs349*normalslave(1,1)*penalty_parameter;
        const double clhs680 =     clhs358*normalslave(2,1)*penalty_parameter;
        const double clhs681 =     clhs370*normalslave(0,1)*penalty_parameter;
        const double clhs682 =     clhs379*normalslave(1,1)*penalty_parameter;
        const double clhs683 =     clhs388*normalslave(2,1)*penalty_parameter;
        const double clhs684 =     clhs400*normalslave(0,1)*penalty_parameter;
        const double clhs685 =     clhs409*normalslave(1,1)*penalty_parameter;
        const double clhs686 =     clhs418*normalslave(2,1)*penalty_parameter;
        const double clhs687 =     clhs430*normalslave(0,1)*penalty_parameter;
        const double clhs688 =     clhs439*normalslave(1,1)*penalty_parameter;
        const double clhs689 =     clhs448*normalslave(2,1)*penalty_parameter;
        const double clhs690 =     clhs460*normalslave(0,1)*penalty_parameter;
        const double clhs691 =     clhs469*normalslave(1,1)*penalty_parameter;
        const double clhs692 =     clhs478*normalslave(2,1)*penalty_parameter;
        const double clhs693 =     clhs490*normalslave(0,1)*penalty_parameter;
        const double clhs694 =     clhs499*normalslave(1,1)*penalty_parameter;
        const double clhs695 =     clhs508*normalslave(2,1)*penalty_parameter;
        const double clhs696 =     clhs520*normalslave(0,1)*penalty_parameter;
        const double clhs697 =     clhs529*normalslave(1,1)*penalty_parameter;
        const double clhs698 =     clhs538*normalslave(2,1)*penalty_parameter;
        const double clhs699 =     clhs550*normalslave(0,1)*penalty_parameter;
        const double clhs700 =     clhs559*normalslave(1,1)*penalty_parameter;
        const double clhs701 =     clhs568*normalslave(2,1)*penalty_parameter;
        const double clhs702 =     clhs580*normalslave(0,1)*penalty_parameter;
        const double clhs703 =     clhs589*normalslave(1,1)*penalty_parameter;
        const double clhs704 =     clhs598*normalslave(2,1)*penalty_parameter;
        const double clhs705 =     clhs610*normalslave(0,1)*penalty_parameter;
        const double clhs706 =     clhs619*normalslave(1,1)*penalty_parameter;
        const double clhs707 =     clhs628*normalslave(2,1)*penalty_parameter;
        const double clhs708 =     normalslave(0,1)*scale_factor;
        const double clhs709 =     normalslave(1,1)*scale_factor;
        const double clhs710 =     normalslave(2,1)*scale_factor;
        const double clhs711 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs712 =     clhs30*normalslave(1,2)*penalty_parameter;
        const double clhs713 =     clhs40*normalslave(2,2)*penalty_parameter;
        const double clhs714 =     clhs58*normalslave(0,2);
        const double clhs715 =     clhs64*normalslave(1,2);
        const double clhs716 =     clhs70*normalslave(2,2);
        const double clhs717 =     clhs76*normalslave(0,2)*penalty_parameter;
        const double clhs718 =     clhs82*normalslave(1,2)*penalty_parameter;
        const double clhs719 =     clhs88*normalslave(2,2)*penalty_parameter;
        const double clhs720 =     clhs94*normalslave(0,2)*penalty_parameter;
        const double clhs721 =     clhs100*normalslave(1,2)*penalty_parameter;
        const double clhs722 =     clhs106*normalslave(2,2)*penalty_parameter;
        const double clhs723 =     clhs112*normalslave(0,2)*penalty_parameter;
        const double clhs724 =     clhs118*normalslave(1,2)*penalty_parameter;
        const double clhs725 =     clhs124*normalslave(2,2)*penalty_parameter;
        const double clhs726 =     clhs130*normalslave(0,2)*penalty_parameter;
        const double clhs727 =     clhs136*normalslave(1,2)*penalty_parameter;
        const double clhs728 =     clhs142*normalslave(2,2)*penalty_parameter;
        const double clhs729 =     clhs148*normalslave(0,2)*penalty_parameter;
        const double clhs730 =     clhs154*normalslave(1,2)*penalty_parameter;
        const double clhs731 =     clhs160*normalslave(2,2)*penalty_parameter;
        const double clhs732 =     clhs166*normalslave(0,2)*penalty_parameter;
        const double clhs733 =     clhs172*normalslave(1,2)*penalty_parameter;
        const double clhs734 =     clhs178*normalslave(2,2)*penalty_parameter;
        const double clhs735 =     clhs184*normalslave(0,2)*penalty_parameter;
        const double clhs736 =     clhs190*normalslave(1,2)*penalty_parameter;
        const double clhs737 =     clhs196*normalslave(2,2)*penalty_parameter;
        const double clhs738 =     clhs202*normalslave(0,2)*penalty_parameter;
        const double clhs739 =     clhs208*normalslave(1,2)*penalty_parameter;
        const double clhs740 =     clhs214*normalslave(2,2)*penalty_parameter;
        const double clhs741 =     clhs220*normalslave(0,2)*penalty_parameter;
        const double clhs742 =     clhs226*normalslave(1,2)*penalty_parameter;
        const double clhs743 =     clhs232*normalslave(2,2)*penalty_parameter;
        const double clhs744 =     clhs238*normalslave(0,2)*penalty_parameter;
        const double clhs745 =     clhs244*normalslave(1,2)*penalty_parameter;
        const double clhs746 =     clhs250*normalslave(2,2)*penalty_parameter;
        const double clhs747 =     clhs256*normalslave(0,2)*penalty_parameter;
        const double clhs748 =     clhs262*normalslave(1,2)*penalty_parameter;
        const double clhs749 =     clhs268*normalslave(2,2)*penalty_parameter;
        const double clhs750 =     clhs280*normalslave(0,2)*penalty_parameter;
        const double clhs751 =     clhs289*normalslave(1,2)*penalty_parameter;
        const double clhs752 =     clhs298*normalslave(2,2)*penalty_parameter;
        const double clhs753 =     clhs310*normalslave(0,2)*penalty_parameter;
        const double clhs754 =     clhs319*normalslave(1,2)*penalty_parameter;
        const double clhs755 =     clhs328*normalslave(2,2)*penalty_parameter;
        const double clhs756 =     clhs340*normalslave(0,2)*penalty_parameter;
        const double clhs757 =     clhs349*normalslave(1,2)*penalty_parameter;
        const double clhs758 =     clhs358*normalslave(2,2)*penalty_parameter;
        const double clhs759 =     clhs370*normalslave(0,2)*penalty_parameter;
        const double clhs760 =     clhs379*normalslave(1,2)*penalty_parameter;
        const double clhs761 =     clhs388*normalslave(2,2)*penalty_parameter;
        const double clhs762 =     clhs400*normalslave(0,2)*penalty_parameter;
        const double clhs763 =     clhs409*normalslave(1,2)*penalty_parameter;
        const double clhs764 =     clhs418*normalslave(2,2)*penalty_parameter;
        const double clhs765 =     clhs430*normalslave(0,2)*penalty_parameter;
        const double clhs766 =     clhs439*normalslave(1,2)*penalty_parameter;
        const double clhs767 =     clhs448*normalslave(2,2)*penalty_parameter;
        const double clhs768 =     clhs460*normalslave(0,2)*penalty_parameter;
        const double clhs769 =     clhs469*normalslave(1,2)*penalty_parameter;
        const double clhs770 =     clhs478*normalslave(2,2)*penalty_parameter;
        const double clhs771 =     clhs490*normalslave(0,2)*penalty_parameter;
        const double clhs772 =     clhs499*normalslave(1,2)*penalty_parameter;
        const double clhs773 =     clhs508*normalslave(2,2)*penalty_parameter;
        const double clhs774 =     clhs520*normalslave(0,2)*penalty_parameter;
        const double clhs775 =     clhs529*normalslave(1,2)*penalty_parameter;
        const double clhs776 =     clhs538*normalslave(2,2)*penalty_parameter;
        const double clhs777 =     clhs550*normalslave(0,2)*penalty_parameter;
        const double clhs778 =     clhs559*normalslave(1,2)*penalty_parameter;
        const double clhs779 =     clhs568*normalslave(2,2)*penalty_parameter;
        const double clhs780 =     clhs580*normalslave(0,2)*penalty_parameter;
        const double clhs781 =     clhs589*normalslave(1,2)*penalty_parameter;
        const double clhs782 =     clhs598*normalslave(2,2)*penalty_parameter;
        const double clhs783 =     clhs610*normalslave(0,2)*penalty_parameter;
        const double clhs784 =     clhs619*normalslave(1,2)*penalty_parameter;
        const double clhs785 =     clhs628*normalslave(2,2)*penalty_parameter;
        const double clhs786 =     normalslave(0,2)*scale_factor;
        const double clhs787 =     normalslave(1,2)*scale_factor;
        const double clhs788 =     normalslave(2,2)*scale_factor;
        const double clhs789 =     clhs20*normalslave(0,0);
        const double clhs790 =     clhs30*normalslave(1,0);
        const double clhs791 =     clhs40*normalslave(2,0);
        const double clhs792 =     clhs76*normalslave(0,0);
        const double clhs793 =     clhs82*normalslave(1,0);
        const double clhs794 =     clhs88*normalslave(2,0);
        const double clhs795 =     clhs94*normalslave(0,0);
        const double clhs796 =     clhs100*normalslave(1,0);
        const double clhs797 =     clhs106*normalslave(2,0);
        const double clhs798 =     clhs112*normalslave(0,0);
        const double clhs799 =     clhs118*normalslave(1,0);
        const double clhs800 =     clhs124*normalslave(2,0);
        const double clhs801 =     clhs130*normalslave(0,0);
        const double clhs802 =     clhs136*normalslave(1,0);
        const double clhs803 =     clhs142*normalslave(2,0);
        const double clhs804 =     clhs148*normalslave(0,0);
        const double clhs805 =     clhs154*normalslave(1,0);
        const double clhs806 =     clhs160*normalslave(2,0);
        const double clhs807 =     clhs166*normalslave(0,0);
        const double clhs808 =     clhs172*normalslave(1,0);
        const double clhs809 =     clhs178*normalslave(2,0);
        const double clhs810 =     clhs184*normalslave(0,0);
        const double clhs811 =     clhs190*normalslave(1,0);
        const double clhs812 =     clhs196*normalslave(2,0);
        const double clhs813 =     clhs202*normalslave(0,0);
        const double clhs814 =     clhs208*normalslave(1,0);
        const double clhs815 =     clhs214*normalslave(2,0);
        const double clhs816 =     clhs220*normalslave(0,0);
        const double clhs817 =     clhs226*normalslave(1,0);
        const double clhs818 =     clhs232*normalslave(2,0);
        const double clhs819 =     clhs238*normalslave(0,0);
        const double clhs820 =     clhs244*normalslave(1,0);
        const double clhs821 =     clhs250*normalslave(2,0);
        const double clhs822 =     clhs256*normalslave(0,0);
        const double clhs823 =     clhs262*normalslave(1,0);
        const double clhs824 =     clhs268*normalslave(2,0);
        const double clhs825 =     clhs20*normalslave(0,1);
        const double clhs826 =     clhs30*normalslave(1,1);
        const double clhs827 =     clhs40*normalslave(2,1);
        const double clhs828 =     clhs76*normalslave(0,1);
        const double clhs829 =     clhs82*normalslave(1,1);
        const double clhs830 =     clhs88*normalslave(2,1);
        const double clhs831 =     clhs94*normalslave(0,1);
        const double clhs832 =     clhs100*normalslave(1,1);
        const double clhs833 =     clhs106*normalslave(2,1);
        const double clhs834 =     clhs112*normalslave(0,1);
        const double clhs835 =     clhs118*normalslave(1,1);
        const double clhs836 =     clhs124*normalslave(2,1);
        const double clhs837 =     clhs130*normalslave(0,1);
        const double clhs838 =     clhs136*normalslave(1,1);
        const double clhs839 =     clhs142*normalslave(2,1);
        const double clhs840 =     clhs148*normalslave(0,1);
        const double clhs841 =     clhs154*normalslave(1,1);
        const double clhs842 =     clhs160*normalslave(2,1);
        const double clhs843 =     clhs166*normalslave(0,1);
        const double clhs844 =     clhs172*normalslave(1,1);
        const double clhs845 =     clhs178*normalslave(2,1);
        const double clhs846 =     clhs184*normalslave(0,1);
        const double clhs847 =     clhs190*normalslave(1,1);
        const double clhs848 =     clhs196*normalslave(2,1);
        const double clhs849 =     clhs202*normalslave(0,1);
        const double clhs850 =     clhs208*normalslave(1,1);
        const double clhs851 =     clhs214*normalslave(2,1);
        const double clhs852 =     clhs220*normalslave(0,1);
        const double clhs853 =     clhs226*normalslave(1,1);
        const double clhs854 =     clhs232*normalslave(2,1);
        const double clhs855 =     clhs238*normalslave(0,1);
        const double clhs856 =     clhs244*normalslave(1,1);
        const double clhs857 =     clhs250*normalslave(2,1);
        const double clhs858 =     clhs256*normalslave(0,1);
        const double clhs859 =     clhs262*normalslave(1,1);
        const double clhs860 =     clhs268*normalslave(2,1);
        const double clhs861 =     clhs20*normalslave(0,2);
        const double clhs862 =     clhs30*normalslave(1,2);
        const double clhs863 =     clhs40*normalslave(2,2);
        const double clhs864 =     clhs76*normalslave(0,2);
        const double clhs865 =     clhs82*normalslave(1,2);
        const double clhs866 =     clhs88*normalslave(2,2);
        const double clhs867 =     clhs94*normalslave(0,2);
        const double clhs868 =     clhs100*normalslave(1,2);
        const double clhs869 =     clhs106*normalslave(2,2);
        const double clhs870 =     clhs112*normalslave(0,2);
        const double clhs871 =     clhs118*normalslave(1,2);
        const double clhs872 =     clhs124*normalslave(2,2);
        const double clhs873 =     clhs130*normalslave(0,2);
        const double clhs874 =     clhs136*normalslave(1,2);
        const double clhs875 =     clhs142*normalslave(2,2);
        const double clhs876 =     clhs148*normalslave(0,2);
        const double clhs877 =     clhs154*normalslave(1,2);
        const double clhs878 =     clhs160*normalslave(2,2);
        const double clhs879 =     clhs166*normalslave(0,2);
        const double clhs880 =     clhs172*normalslave(1,2);
        const double clhs881 =     clhs178*normalslave(2,2);
        const double clhs882 =     clhs184*normalslave(0,2);
        const double clhs883 =     clhs190*normalslave(1,2);
        const double clhs884 =     clhs196*normalslave(2,2);
        const double clhs885 =     clhs202*normalslave(0,2);
        const double clhs886 =     clhs208*normalslave(1,2);
        const double clhs887 =     clhs214*normalslave(2,2);
        const double clhs888 =     clhs220*normalslave(0,2);
        const double clhs889 =     clhs226*normalslave(1,2);
        const double clhs890 =     clhs232*normalslave(2,2);
        const double clhs891 =     clhs238*normalslave(0,2);
        const double clhs892 =     clhs244*normalslave(1,2);
        const double clhs893 =     clhs250*normalslave(2,2);
        const double clhs894 =     clhs256*normalslave(0,2);
        const double clhs895 =     clhs262*normalslave(1,2);
        const double clhs896 =     clhs268*normalslave(2,2);
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs59 - clhs22*clhs31 + clhs23*clhs65 - clhs32*clhs41 + clhs33*clhs71;
        lhs(0,1)=-clhs0*clhs77 - clhs22*clhs83 - clhs32*clhs89 + clhs59*clhs72 + clhs65*clhs78 + clhs71*clhs84;
        lhs(0,2)=-clhs0*clhs95 - clhs101*clhs22 + clhs102*clhs71 - clhs107*clhs32 + clhs59*clhs90 + clhs65*clhs96;
        lhs(0,3)=-clhs0*clhs113 + clhs108*clhs59 + clhs114*clhs65 - clhs119*clhs22 + clhs120*clhs71 - clhs125*clhs32;
        lhs(0,4)=-clhs0*clhs131 + clhs126*clhs59 + clhs132*clhs65 - clhs137*clhs22 + clhs138*clhs71 - clhs143*clhs32;
        lhs(0,5)=-clhs0*clhs149 + clhs144*clhs59 + clhs150*clhs65 - clhs155*clhs22 + clhs156*clhs71 - clhs161*clhs32;
        lhs(0,6)=-clhs0*clhs167 + clhs162*clhs59 + clhs168*clhs65 - clhs173*clhs22 + clhs174*clhs71 - clhs179*clhs32;
        lhs(0,7)=-clhs0*clhs185 + clhs180*clhs59 + clhs186*clhs65 - clhs191*clhs22 + clhs192*clhs71 - clhs197*clhs32;
        lhs(0,8)=-clhs0*clhs203 + clhs198*clhs59 + clhs204*clhs65 - clhs209*clhs22 + clhs210*clhs71 - clhs215*clhs32;
        lhs(0,9)=-clhs0*clhs221 + clhs216*clhs59 - clhs22*clhs227 + clhs222*clhs65 + clhs228*clhs71 - clhs233*clhs32;
        lhs(0,10)=-clhs0*clhs239 - clhs22*clhs245 + clhs234*clhs59 + clhs240*clhs65 + clhs246*clhs71 - clhs251*clhs32;
        lhs(0,11)=-clhs0*clhs257 - clhs22*clhs263 + clhs252*clhs59 + clhs258*clhs65 + clhs264*clhs71 - clhs269*clhs32;
        lhs(0,12)=clhs0*clhs281 + clhs22*clhs290 + clhs270*clhs59 + clhs271*clhs65 + clhs272*clhs71 + clhs299*clhs32;
        lhs(0,13)=clhs0*clhs311 + clhs22*clhs320 + clhs300*clhs59 + clhs301*clhs65 + clhs302*clhs71 + clhs32*clhs329;
        lhs(0,14)=clhs0*clhs341 + clhs22*clhs350 + clhs32*clhs359 + clhs330*clhs59 + clhs331*clhs65 + clhs332*clhs71;
        lhs(0,15)=clhs0*clhs371 + clhs22*clhs380 + clhs32*clhs389 + clhs360*clhs59 + clhs361*clhs65 + clhs362*clhs71;
        lhs(0,16)=clhs0*clhs401 + clhs22*clhs410 + clhs32*clhs419 + clhs390*clhs59 + clhs391*clhs65 + clhs392*clhs71;
        lhs(0,17)=clhs0*clhs431 + clhs22*clhs440 + clhs32*clhs449 + clhs420*clhs59 + clhs421*clhs65 + clhs422*clhs71;
        lhs(0,18)=clhs0*clhs461 + clhs22*clhs470 + clhs32*clhs479 + clhs450*clhs59 + clhs451*clhs65 + clhs452*clhs71;
        lhs(0,19)=clhs0*clhs491 + clhs22*clhs500 + clhs32*clhs509 + clhs480*clhs59 + clhs481*clhs65 + clhs482*clhs71;
        lhs(0,20)=clhs0*clhs521 + clhs22*clhs530 + clhs32*clhs539 + clhs510*clhs59 + clhs511*clhs65 + clhs512*clhs71;
        lhs(0,21)=clhs0*clhs551 + clhs22*clhs560 + clhs32*clhs569 + clhs540*clhs59 + clhs541*clhs65 + clhs542*clhs71;
        lhs(0,22)=clhs0*clhs581 + clhs22*clhs590 + clhs32*clhs599 + clhs570*clhs59 + clhs571*clhs65 + clhs572*clhs71;
        lhs(0,23)=clhs0*clhs611 + clhs22*clhs620 + clhs32*clhs629 + clhs59*clhs600 + clhs601*clhs65 + clhs602*clhs71;
        lhs(0,24)=clhs0*clhs630;
        lhs(0,25)=clhs22*clhs631;
        lhs(0,26)=clhs32*clhs632;
        lhs(0,27)=0;
        lhs(1,0)=-clhs0*clhs633 + clhs2*clhs636 - clhs22*clhs634 + clhs23*clhs637 - clhs32*clhs635 + clhs33*clhs638;
        lhs(1,1)=-clhs0*clhs639 - clhs22*clhs640 - clhs32*clhs641 + clhs636*clhs72 + clhs637*clhs78 + clhs638*clhs84;
        lhs(1,2)=-clhs0*clhs642 + clhs102*clhs638 - clhs22*clhs643 - clhs32*clhs644 + clhs636*clhs90 + clhs637*clhs96;
        lhs(1,3)=-clhs0*clhs645 + clhs108*clhs636 + clhs114*clhs637 + clhs120*clhs638 - clhs22*clhs646 - clhs32*clhs647;
        lhs(1,4)=-clhs0*clhs648 + clhs126*clhs636 + clhs132*clhs637 + clhs138*clhs638 - clhs22*clhs649 - clhs32*clhs650;
        lhs(1,5)=-clhs0*clhs651 + clhs144*clhs636 + clhs150*clhs637 + clhs156*clhs638 - clhs22*clhs652 - clhs32*clhs653;
        lhs(1,6)=-clhs0*clhs654 + clhs162*clhs636 + clhs168*clhs637 + clhs174*clhs638 - clhs22*clhs655 - clhs32*clhs656;
        lhs(1,7)=-clhs0*clhs657 + clhs180*clhs636 + clhs186*clhs637 + clhs192*clhs638 - clhs22*clhs658 - clhs32*clhs659;
        lhs(1,8)=-clhs0*clhs660 + clhs198*clhs636 + clhs204*clhs637 + clhs210*clhs638 - clhs22*clhs661 - clhs32*clhs662;
        lhs(1,9)=-clhs0*clhs663 + clhs216*clhs636 - clhs22*clhs664 + clhs222*clhs637 + clhs228*clhs638 - clhs32*clhs665;
        lhs(1,10)=-clhs0*clhs666 - clhs22*clhs667 + clhs234*clhs636 + clhs240*clhs637 + clhs246*clhs638 - clhs32*clhs668;
        lhs(1,11)=-clhs0*clhs669 - clhs22*clhs670 + clhs252*clhs636 + clhs258*clhs637 + clhs264*clhs638 - clhs32*clhs671;
        lhs(1,12)=clhs0*clhs672 + clhs22*clhs673 + clhs270*clhs636 + clhs271*clhs637 + clhs272*clhs638 + clhs32*clhs674;
        lhs(1,13)=clhs0*clhs675 + clhs22*clhs676 + clhs300*clhs636 + clhs301*clhs637 + clhs302*clhs638 + clhs32*clhs677;
        lhs(1,14)=clhs0*clhs678 + clhs22*clhs679 + clhs32*clhs680 + clhs330*clhs636 + clhs331*clhs637 + clhs332*clhs638;
        lhs(1,15)=clhs0*clhs681 + clhs22*clhs682 + clhs32*clhs683 + clhs360*clhs636 + clhs361*clhs637 + clhs362*clhs638;
        lhs(1,16)=clhs0*clhs684 + clhs22*clhs685 + clhs32*clhs686 + clhs390*clhs636 + clhs391*clhs637 + clhs392*clhs638;
        lhs(1,17)=clhs0*clhs687 + clhs22*clhs688 + clhs32*clhs689 + clhs420*clhs636 + clhs421*clhs637 + clhs422*clhs638;
        lhs(1,18)=clhs0*clhs690 + clhs22*clhs691 + clhs32*clhs692 + clhs450*clhs636 + clhs451*clhs637 + clhs452*clhs638;
        lhs(1,19)=clhs0*clhs693 + clhs22*clhs694 + clhs32*clhs695 + clhs480*clhs636 + clhs481*clhs637 + clhs482*clhs638;
        lhs(1,20)=clhs0*clhs696 + clhs22*clhs697 + clhs32*clhs698 + clhs510*clhs636 + clhs511*clhs637 + clhs512*clhs638;
        lhs(1,21)=clhs0*clhs699 + clhs22*clhs700 + clhs32*clhs701 + clhs540*clhs636 + clhs541*clhs637 + clhs542*clhs638;
        lhs(1,22)=clhs0*clhs702 + clhs22*clhs703 + clhs32*clhs704 + clhs570*clhs636 + clhs571*clhs637 + clhs572*clhs638;
        lhs(1,23)=clhs0*clhs705 + clhs22*clhs706 + clhs32*clhs707 + clhs600*clhs636 + clhs601*clhs637 + clhs602*clhs638;
        lhs(1,24)=clhs0*clhs708;
        lhs(1,25)=clhs22*clhs709;
        lhs(1,26)=clhs32*clhs710;
        lhs(1,27)=0;
        lhs(2,0)=-clhs0*clhs711 + clhs2*clhs714 - clhs22*clhs712 + clhs23*clhs715 - clhs32*clhs713 + clhs33*clhs716;
        lhs(2,1)=-clhs0*clhs717 - clhs22*clhs718 - clhs32*clhs719 + clhs714*clhs72 + clhs715*clhs78 + clhs716*clhs84;
        lhs(2,2)=-clhs0*clhs720 + clhs102*clhs716 - clhs22*clhs721 - clhs32*clhs722 + clhs714*clhs90 + clhs715*clhs96;
        lhs(2,3)=-clhs0*clhs723 + clhs108*clhs714 + clhs114*clhs715 + clhs120*clhs716 - clhs22*clhs724 - clhs32*clhs725;
        lhs(2,4)=-clhs0*clhs726 + clhs126*clhs714 + clhs132*clhs715 + clhs138*clhs716 - clhs22*clhs727 - clhs32*clhs728;
        lhs(2,5)=-clhs0*clhs729 + clhs144*clhs714 + clhs150*clhs715 + clhs156*clhs716 - clhs22*clhs730 - clhs32*clhs731;
        lhs(2,6)=-clhs0*clhs732 + clhs162*clhs714 + clhs168*clhs715 + clhs174*clhs716 - clhs22*clhs733 - clhs32*clhs734;
        lhs(2,7)=-clhs0*clhs735 + clhs180*clhs714 + clhs186*clhs715 + clhs192*clhs716 - clhs22*clhs736 - clhs32*clhs737;
        lhs(2,8)=-clhs0*clhs738 + clhs198*clhs714 + clhs204*clhs715 + clhs210*clhs716 - clhs22*clhs739 - clhs32*clhs740;
        lhs(2,9)=-clhs0*clhs741 + clhs216*clhs714 - clhs22*clhs742 + clhs222*clhs715 + clhs228*clhs716 - clhs32*clhs743;
        lhs(2,10)=-clhs0*clhs744 - clhs22*clhs745 + clhs234*clhs714 + clhs240*clhs715 + clhs246*clhs716 - clhs32*clhs746;
        lhs(2,11)=-clhs0*clhs747 - clhs22*clhs748 + clhs252*clhs714 + clhs258*clhs715 + clhs264*clhs716 - clhs32*clhs749;
        lhs(2,12)=clhs0*clhs750 + clhs22*clhs751 + clhs270*clhs714 + clhs271*clhs715 + clhs272*clhs716 + clhs32*clhs752;
        lhs(2,13)=clhs0*clhs753 + clhs22*clhs754 + clhs300*clhs714 + clhs301*clhs715 + clhs302*clhs716 + clhs32*clhs755;
        lhs(2,14)=clhs0*clhs756 + clhs22*clhs757 + clhs32*clhs758 + clhs330*clhs714 + clhs331*clhs715 + clhs332*clhs716;
        lhs(2,15)=clhs0*clhs759 + clhs22*clhs760 + clhs32*clhs761 + clhs360*clhs714 + clhs361*clhs715 + clhs362*clhs716;
        lhs(2,16)=clhs0*clhs762 + clhs22*clhs763 + clhs32*clhs764 + clhs390*clhs714 + clhs391*clhs715 + clhs392*clhs716;
        lhs(2,17)=clhs0*clhs765 + clhs22*clhs766 + clhs32*clhs767 + clhs420*clhs714 + clhs421*clhs715 + clhs422*clhs716;
        lhs(2,18)=clhs0*clhs768 + clhs22*clhs769 + clhs32*clhs770 + clhs450*clhs714 + clhs451*clhs715 + clhs452*clhs716;
        lhs(2,19)=clhs0*clhs771 + clhs22*clhs772 + clhs32*clhs773 + clhs480*clhs714 + clhs481*clhs715 + clhs482*clhs716;
        lhs(2,20)=clhs0*clhs774 + clhs22*clhs775 + clhs32*clhs776 + clhs510*clhs714 + clhs511*clhs715 + clhs512*clhs716;
        lhs(2,21)=clhs0*clhs777 + clhs22*clhs778 + clhs32*clhs779 + clhs540*clhs714 + clhs541*clhs715 + clhs542*clhs716;
        lhs(2,22)=clhs0*clhs780 + clhs22*clhs781 + clhs32*clhs782 + clhs570*clhs714 + clhs571*clhs715 + clhs572*clhs716;
        lhs(2,23)=clhs0*clhs783 + clhs22*clhs784 + clhs32*clhs785 + clhs600*clhs714 + clhs601*clhs715 + clhs602*clhs716;
        lhs(2,24)=clhs0*clhs786;
        lhs(2,25)=clhs22*clhs787;
        lhs(2,26)=clhs32*clhs788;
        lhs(2,27)=0;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs65 - clhs34*clhs41 + clhs35*clhs71 + clhs5*clhs59;
        lhs(3,1)=-clhs24*clhs83 - clhs34*clhs89 - clhs4*clhs77 + clhs59*clhs73 + clhs65*clhs79 + clhs71*clhs85;
        lhs(3,2)=-clhs101*clhs24 + clhs103*clhs71 - clhs107*clhs34 - clhs4*clhs95 + clhs59*clhs91 + clhs65*clhs97;
        lhs(3,3)=clhs109*clhs59 - clhs113*clhs4 + clhs115*clhs65 - clhs119*clhs24 + clhs121*clhs71 - clhs125*clhs34;
        lhs(3,4)=clhs127*clhs59 - clhs131*clhs4 + clhs133*clhs65 - clhs137*clhs24 + clhs139*clhs71 - clhs143*clhs34;
        lhs(3,5)=clhs145*clhs59 - clhs149*clhs4 + clhs151*clhs65 - clhs155*clhs24 + clhs157*clhs71 - clhs161*clhs34;
        lhs(3,6)=clhs163*clhs59 - clhs167*clhs4 + clhs169*clhs65 - clhs173*clhs24 + clhs175*clhs71 - clhs179*clhs34;
        lhs(3,7)=clhs181*clhs59 - clhs185*clhs4 + clhs187*clhs65 - clhs191*clhs24 + clhs193*clhs71 - clhs197*clhs34;
        lhs(3,8)=clhs199*clhs59 - clhs203*clhs4 + clhs205*clhs65 - clhs209*clhs24 + clhs211*clhs71 - clhs215*clhs34;
        lhs(3,9)=clhs217*clhs59 - clhs221*clhs4 + clhs223*clhs65 - clhs227*clhs24 + clhs229*clhs71 - clhs233*clhs34;
        lhs(3,10)=clhs235*clhs59 - clhs239*clhs4 - clhs24*clhs245 + clhs241*clhs65 + clhs247*clhs71 - clhs251*clhs34;
        lhs(3,11)=-clhs24*clhs263 + clhs253*clhs59 - clhs257*clhs4 + clhs259*clhs65 + clhs265*clhs71 - clhs269*clhs34;
        lhs(3,12)=clhs24*clhs290 + clhs277*clhs59 + clhs281*clhs4 + clhs286*clhs65 + clhs295*clhs71 + clhs299*clhs34;
        lhs(3,13)=clhs24*clhs320 + clhs307*clhs59 + clhs311*clhs4 + clhs316*clhs65 + clhs325*clhs71 + clhs329*clhs34;
        lhs(3,14)=clhs24*clhs350 + clhs337*clhs59 + clhs34*clhs359 + clhs341*clhs4 + clhs346*clhs65 + clhs355*clhs71;
        lhs(3,15)=clhs24*clhs380 + clhs34*clhs389 + clhs367*clhs59 + clhs371*clhs4 + clhs376*clhs65 + clhs385*clhs71;
        lhs(3,16)=clhs24*clhs410 + clhs34*clhs419 + clhs397*clhs59 + clhs4*clhs401 + clhs406*clhs65 + clhs415*clhs71;
        lhs(3,17)=clhs24*clhs440 + clhs34*clhs449 + clhs4*clhs431 + clhs427*clhs59 + clhs436*clhs65 + clhs445*clhs71;
        lhs(3,18)=clhs24*clhs470 + clhs34*clhs479 + clhs4*clhs461 + clhs457*clhs59 + clhs466*clhs65 + clhs475*clhs71;
        lhs(3,19)=clhs24*clhs500 + clhs34*clhs509 + clhs4*clhs491 + clhs487*clhs59 + clhs496*clhs65 + clhs505*clhs71;
        lhs(3,20)=clhs24*clhs530 + clhs34*clhs539 + clhs4*clhs521 + clhs517*clhs59 + clhs526*clhs65 + clhs535*clhs71;
        lhs(3,21)=clhs24*clhs560 + clhs34*clhs569 + clhs4*clhs551 + clhs547*clhs59 + clhs556*clhs65 + clhs565*clhs71;
        lhs(3,22)=clhs24*clhs590 + clhs34*clhs599 + clhs4*clhs581 + clhs577*clhs59 + clhs586*clhs65 + clhs595*clhs71;
        lhs(3,23)=clhs24*clhs620 + clhs34*clhs629 + clhs4*clhs611 + clhs59*clhs607 + clhs616*clhs65 + clhs625*clhs71;
        lhs(3,24)=clhs4*clhs630;
        lhs(3,25)=clhs24*clhs631;
        lhs(3,26)=clhs34*clhs632;
        lhs(3,27)=0;
        lhs(4,0)=-clhs24*clhs634 + clhs25*clhs637 - clhs34*clhs635 + clhs35*clhs638 - clhs4*clhs633 + clhs5*clhs636;
        lhs(4,1)=-clhs24*clhs640 - clhs34*clhs641 - clhs4*clhs639 + clhs636*clhs73 + clhs637*clhs79 + clhs638*clhs85;
        lhs(4,2)=clhs103*clhs638 - clhs24*clhs643 - clhs34*clhs644 - clhs4*clhs642 + clhs636*clhs91 + clhs637*clhs97;
        lhs(4,3)=clhs109*clhs636 + clhs115*clhs637 + clhs121*clhs638 - clhs24*clhs646 - clhs34*clhs647 - clhs4*clhs645;
        lhs(4,4)=clhs127*clhs636 + clhs133*clhs637 + clhs139*clhs638 - clhs24*clhs649 - clhs34*clhs650 - clhs4*clhs648;
        lhs(4,5)=clhs145*clhs636 + clhs151*clhs637 + clhs157*clhs638 - clhs24*clhs652 - clhs34*clhs653 - clhs4*clhs651;
        lhs(4,6)=clhs163*clhs636 + clhs169*clhs637 + clhs175*clhs638 - clhs24*clhs655 - clhs34*clhs656 - clhs4*clhs654;
        lhs(4,7)=clhs181*clhs636 + clhs187*clhs637 + clhs193*clhs638 - clhs24*clhs658 - clhs34*clhs659 - clhs4*clhs657;
        lhs(4,8)=clhs199*clhs636 + clhs205*clhs637 + clhs211*clhs638 - clhs24*clhs661 - clhs34*clhs662 - clhs4*clhs660;
        lhs(4,9)=clhs217*clhs636 + clhs223*clhs637 + clhs229*clhs638 - clhs24*clhs664 - clhs34*clhs665 - clhs4*clhs663;
        lhs(4,10)=clhs235*clhs636 - clhs24*clhs667 + clhs241*clhs637 + clhs247*clhs638 - clhs34*clhs668 - clhs4*clhs666;
        lhs(4,11)=-clhs24*clhs670 + clhs253*clhs636 + clhs259*clhs637 + clhs265*clhs638 - clhs34*clhs671 - clhs4*clhs669;
        lhs(4,12)=clhs24*clhs673 + clhs277*clhs636 + clhs286*clhs637 + clhs295*clhs638 + clhs34*clhs674 + clhs4*clhs672;
        lhs(4,13)=clhs24*clhs676 + clhs307*clhs636 + clhs316*clhs637 + clhs325*clhs638 + clhs34*clhs677 + clhs4*clhs675;
        lhs(4,14)=clhs24*clhs679 + clhs337*clhs636 + clhs34*clhs680 + clhs346*clhs637 + clhs355*clhs638 + clhs4*clhs678;
        lhs(4,15)=clhs24*clhs682 + clhs34*clhs683 + clhs367*clhs636 + clhs376*clhs637 + clhs385*clhs638 + clhs4*clhs681;
        lhs(4,16)=clhs24*clhs685 + clhs34*clhs686 + clhs397*clhs636 + clhs4*clhs684 + clhs406*clhs637 + clhs415*clhs638;
        lhs(4,17)=clhs24*clhs688 + clhs34*clhs689 + clhs4*clhs687 + clhs427*clhs636 + clhs436*clhs637 + clhs445*clhs638;
        lhs(4,18)=clhs24*clhs691 + clhs34*clhs692 + clhs4*clhs690 + clhs457*clhs636 + clhs466*clhs637 + clhs475*clhs638;
        lhs(4,19)=clhs24*clhs694 + clhs34*clhs695 + clhs4*clhs693 + clhs487*clhs636 + clhs496*clhs637 + clhs505*clhs638;
        lhs(4,20)=clhs24*clhs697 + clhs34*clhs698 + clhs4*clhs696 + clhs517*clhs636 + clhs526*clhs637 + clhs535*clhs638;
        lhs(4,21)=clhs24*clhs700 + clhs34*clhs701 + clhs4*clhs699 + clhs547*clhs636 + clhs556*clhs637 + clhs565*clhs638;
        lhs(4,22)=clhs24*clhs703 + clhs34*clhs704 + clhs4*clhs702 + clhs577*clhs636 + clhs586*clhs637 + clhs595*clhs638;
        lhs(4,23)=clhs24*clhs706 + clhs34*clhs707 + clhs4*clhs705 + clhs607*clhs636 + clhs616*clhs637 + clhs625*clhs638;
        lhs(4,24)=clhs4*clhs708;
        lhs(4,25)=clhs24*clhs709;
        lhs(4,26)=clhs34*clhs710;
        lhs(4,27)=0;
        lhs(5,0)=-clhs24*clhs712 + clhs25*clhs715 - clhs34*clhs713 + clhs35*clhs716 - clhs4*clhs711 + clhs5*clhs714;
        lhs(5,1)=-clhs24*clhs718 - clhs34*clhs719 - clhs4*clhs717 + clhs714*clhs73 + clhs715*clhs79 + clhs716*clhs85;
        lhs(5,2)=clhs103*clhs716 - clhs24*clhs721 - clhs34*clhs722 - clhs4*clhs720 + clhs714*clhs91 + clhs715*clhs97;
        lhs(5,3)=clhs109*clhs714 + clhs115*clhs715 + clhs121*clhs716 - clhs24*clhs724 - clhs34*clhs725 - clhs4*clhs723;
        lhs(5,4)=clhs127*clhs714 + clhs133*clhs715 + clhs139*clhs716 - clhs24*clhs727 - clhs34*clhs728 - clhs4*clhs726;
        lhs(5,5)=clhs145*clhs714 + clhs151*clhs715 + clhs157*clhs716 - clhs24*clhs730 - clhs34*clhs731 - clhs4*clhs729;
        lhs(5,6)=clhs163*clhs714 + clhs169*clhs715 + clhs175*clhs716 - clhs24*clhs733 - clhs34*clhs734 - clhs4*clhs732;
        lhs(5,7)=clhs181*clhs714 + clhs187*clhs715 + clhs193*clhs716 - clhs24*clhs736 - clhs34*clhs737 - clhs4*clhs735;
        lhs(5,8)=clhs199*clhs714 + clhs205*clhs715 + clhs211*clhs716 - clhs24*clhs739 - clhs34*clhs740 - clhs4*clhs738;
        lhs(5,9)=clhs217*clhs714 + clhs223*clhs715 + clhs229*clhs716 - clhs24*clhs742 - clhs34*clhs743 - clhs4*clhs741;
        lhs(5,10)=clhs235*clhs714 - clhs24*clhs745 + clhs241*clhs715 + clhs247*clhs716 - clhs34*clhs746 - clhs4*clhs744;
        lhs(5,11)=-clhs24*clhs748 + clhs253*clhs714 + clhs259*clhs715 + clhs265*clhs716 - clhs34*clhs749 - clhs4*clhs747;
        lhs(5,12)=clhs24*clhs751 + clhs277*clhs714 + clhs286*clhs715 + clhs295*clhs716 + clhs34*clhs752 + clhs4*clhs750;
        lhs(5,13)=clhs24*clhs754 + clhs307*clhs714 + clhs316*clhs715 + clhs325*clhs716 + clhs34*clhs755 + clhs4*clhs753;
        lhs(5,14)=clhs24*clhs757 + clhs337*clhs714 + clhs34*clhs758 + clhs346*clhs715 + clhs355*clhs716 + clhs4*clhs756;
        lhs(5,15)=clhs24*clhs760 + clhs34*clhs761 + clhs367*clhs714 + clhs376*clhs715 + clhs385*clhs716 + clhs4*clhs759;
        lhs(5,16)=clhs24*clhs763 + clhs34*clhs764 + clhs397*clhs714 + clhs4*clhs762 + clhs406*clhs715 + clhs415*clhs716;
        lhs(5,17)=clhs24*clhs766 + clhs34*clhs767 + clhs4*clhs765 + clhs427*clhs714 + clhs436*clhs715 + clhs445*clhs716;
        lhs(5,18)=clhs24*clhs769 + clhs34*clhs770 + clhs4*clhs768 + clhs457*clhs714 + clhs466*clhs715 + clhs475*clhs716;
        lhs(5,19)=clhs24*clhs772 + clhs34*clhs773 + clhs4*clhs771 + clhs487*clhs714 + clhs496*clhs715 + clhs505*clhs716;
        lhs(5,20)=clhs24*clhs775 + clhs34*clhs776 + clhs4*clhs774 + clhs517*clhs714 + clhs526*clhs715 + clhs535*clhs716;
        lhs(5,21)=clhs24*clhs778 + clhs34*clhs779 + clhs4*clhs777 + clhs547*clhs714 + clhs556*clhs715 + clhs565*clhs716;
        lhs(5,22)=clhs24*clhs781 + clhs34*clhs782 + clhs4*clhs780 + clhs577*clhs714 + clhs586*clhs715 + clhs595*clhs716;
        lhs(5,23)=clhs24*clhs784 + clhs34*clhs785 + clhs4*clhs783 + clhs607*clhs714 + clhs616*clhs715 + clhs625*clhs716;
        lhs(5,24)=clhs4*clhs786;
        lhs(5,25)=clhs24*clhs787;
        lhs(5,26)=clhs34*clhs788;
        lhs(5,27)=0;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs65 - clhs36*clhs41 + clhs37*clhs71 + clhs59*clhs8;
        lhs(6,1)=-clhs26*clhs83 - clhs36*clhs89 + clhs59*clhs74 + clhs65*clhs80 - clhs7*clhs77 + clhs71*clhs86;
        lhs(6,2)=-clhs101*clhs26 + clhs104*clhs71 - clhs107*clhs36 + clhs59*clhs92 + clhs65*clhs98 - clhs7*clhs95;
        lhs(6,3)=clhs110*clhs59 - clhs113*clhs7 + clhs116*clhs65 - clhs119*clhs26 + clhs122*clhs71 - clhs125*clhs36;
        lhs(6,4)=clhs128*clhs59 - clhs131*clhs7 + clhs134*clhs65 - clhs137*clhs26 + clhs140*clhs71 - clhs143*clhs36;
        lhs(6,5)=clhs146*clhs59 - clhs149*clhs7 + clhs152*clhs65 - clhs155*clhs26 + clhs158*clhs71 - clhs161*clhs36;
        lhs(6,6)=clhs164*clhs59 - clhs167*clhs7 + clhs170*clhs65 - clhs173*clhs26 + clhs176*clhs71 - clhs179*clhs36;
        lhs(6,7)=clhs182*clhs59 - clhs185*clhs7 + clhs188*clhs65 - clhs191*clhs26 + clhs194*clhs71 - clhs197*clhs36;
        lhs(6,8)=clhs200*clhs59 - clhs203*clhs7 + clhs206*clhs65 - clhs209*clhs26 + clhs212*clhs71 - clhs215*clhs36;
        lhs(6,9)=clhs218*clhs59 - clhs221*clhs7 + clhs224*clhs65 - clhs227*clhs26 + clhs230*clhs71 - clhs233*clhs36;
        lhs(6,10)=clhs236*clhs59 - clhs239*clhs7 + clhs242*clhs65 - clhs245*clhs26 + clhs248*clhs71 - clhs251*clhs36;
        lhs(6,11)=clhs254*clhs59 - clhs257*clhs7 - clhs26*clhs263 + clhs260*clhs65 + clhs266*clhs71 - clhs269*clhs36;
        lhs(6,12)=clhs26*clhs290 + clhs278*clhs59 + clhs281*clhs7 + clhs287*clhs65 + clhs296*clhs71 + clhs299*clhs36;
        lhs(6,13)=clhs26*clhs320 + clhs308*clhs59 + clhs311*clhs7 + clhs317*clhs65 + clhs326*clhs71 + clhs329*clhs36;
        lhs(6,14)=clhs26*clhs350 + clhs338*clhs59 + clhs341*clhs7 + clhs347*clhs65 + clhs356*clhs71 + clhs359*clhs36;
        lhs(6,15)=clhs26*clhs380 + clhs36*clhs389 + clhs368*clhs59 + clhs371*clhs7 + clhs377*clhs65 + clhs386*clhs71;
        lhs(6,16)=clhs26*clhs410 + clhs36*clhs419 + clhs398*clhs59 + clhs401*clhs7 + clhs407*clhs65 + clhs416*clhs71;
        lhs(6,17)=clhs26*clhs440 + clhs36*clhs449 + clhs428*clhs59 + clhs431*clhs7 + clhs437*clhs65 + clhs446*clhs71;
        lhs(6,18)=clhs26*clhs470 + clhs36*clhs479 + clhs458*clhs59 + clhs461*clhs7 + clhs467*clhs65 + clhs476*clhs71;
        lhs(6,19)=clhs26*clhs500 + clhs36*clhs509 + clhs488*clhs59 + clhs491*clhs7 + clhs497*clhs65 + clhs506*clhs71;
        lhs(6,20)=clhs26*clhs530 + clhs36*clhs539 + clhs518*clhs59 + clhs521*clhs7 + clhs527*clhs65 + clhs536*clhs71;
        lhs(6,21)=clhs26*clhs560 + clhs36*clhs569 + clhs548*clhs59 + clhs551*clhs7 + clhs557*clhs65 + clhs566*clhs71;
        lhs(6,22)=clhs26*clhs590 + clhs36*clhs599 + clhs578*clhs59 + clhs581*clhs7 + clhs587*clhs65 + clhs596*clhs71;
        lhs(6,23)=clhs26*clhs620 + clhs36*clhs629 + clhs59*clhs608 + clhs611*clhs7 + clhs617*clhs65 + clhs626*clhs71;
        lhs(6,24)=clhs630*clhs7;
        lhs(6,25)=clhs26*clhs631;
        lhs(6,26)=clhs36*clhs632;
        lhs(6,27)=0;
        lhs(7,0)=-clhs26*clhs634 + clhs27*clhs637 - clhs36*clhs635 + clhs37*clhs638 - clhs633*clhs7 + clhs636*clhs8;
        lhs(7,1)=-clhs26*clhs640 - clhs36*clhs641 + clhs636*clhs74 + clhs637*clhs80 + clhs638*clhs86 - clhs639*clhs7;
        lhs(7,2)=clhs104*clhs638 - clhs26*clhs643 - clhs36*clhs644 + clhs636*clhs92 + clhs637*clhs98 - clhs642*clhs7;
        lhs(7,3)=clhs110*clhs636 + clhs116*clhs637 + clhs122*clhs638 - clhs26*clhs646 - clhs36*clhs647 - clhs645*clhs7;
        lhs(7,4)=clhs128*clhs636 + clhs134*clhs637 + clhs140*clhs638 - clhs26*clhs649 - clhs36*clhs650 - clhs648*clhs7;
        lhs(7,5)=clhs146*clhs636 + clhs152*clhs637 + clhs158*clhs638 - clhs26*clhs652 - clhs36*clhs653 - clhs651*clhs7;
        lhs(7,6)=clhs164*clhs636 + clhs170*clhs637 + clhs176*clhs638 - clhs26*clhs655 - clhs36*clhs656 - clhs654*clhs7;
        lhs(7,7)=clhs182*clhs636 + clhs188*clhs637 + clhs194*clhs638 - clhs26*clhs658 - clhs36*clhs659 - clhs657*clhs7;
        lhs(7,8)=clhs200*clhs636 + clhs206*clhs637 + clhs212*clhs638 - clhs26*clhs661 - clhs36*clhs662 - clhs660*clhs7;
        lhs(7,9)=clhs218*clhs636 + clhs224*clhs637 + clhs230*clhs638 - clhs26*clhs664 - clhs36*clhs665 - clhs663*clhs7;
        lhs(7,10)=clhs236*clhs636 + clhs242*clhs637 + clhs248*clhs638 - clhs26*clhs667 - clhs36*clhs668 - clhs666*clhs7;
        lhs(7,11)=clhs254*clhs636 - clhs26*clhs670 + clhs260*clhs637 + clhs266*clhs638 - clhs36*clhs671 - clhs669*clhs7;
        lhs(7,12)=clhs26*clhs673 + clhs278*clhs636 + clhs287*clhs637 + clhs296*clhs638 + clhs36*clhs674 + clhs672*clhs7;
        lhs(7,13)=clhs26*clhs676 + clhs308*clhs636 + clhs317*clhs637 + clhs326*clhs638 + clhs36*clhs677 + clhs675*clhs7;
        lhs(7,14)=clhs26*clhs679 + clhs338*clhs636 + clhs347*clhs637 + clhs356*clhs638 + clhs36*clhs680 + clhs678*clhs7;
        lhs(7,15)=clhs26*clhs682 + clhs36*clhs683 + clhs368*clhs636 + clhs377*clhs637 + clhs386*clhs638 + clhs681*clhs7;
        lhs(7,16)=clhs26*clhs685 + clhs36*clhs686 + clhs398*clhs636 + clhs407*clhs637 + clhs416*clhs638 + clhs684*clhs7;
        lhs(7,17)=clhs26*clhs688 + clhs36*clhs689 + clhs428*clhs636 + clhs437*clhs637 + clhs446*clhs638 + clhs687*clhs7;
        lhs(7,18)=clhs26*clhs691 + clhs36*clhs692 + clhs458*clhs636 + clhs467*clhs637 + clhs476*clhs638 + clhs690*clhs7;
        lhs(7,19)=clhs26*clhs694 + clhs36*clhs695 + clhs488*clhs636 + clhs497*clhs637 + clhs506*clhs638 + clhs693*clhs7;
        lhs(7,20)=clhs26*clhs697 + clhs36*clhs698 + clhs518*clhs636 + clhs527*clhs637 + clhs536*clhs638 + clhs696*clhs7;
        lhs(7,21)=clhs26*clhs700 + clhs36*clhs701 + clhs548*clhs636 + clhs557*clhs637 + clhs566*clhs638 + clhs699*clhs7;
        lhs(7,22)=clhs26*clhs703 + clhs36*clhs704 + clhs578*clhs636 + clhs587*clhs637 + clhs596*clhs638 + clhs7*clhs702;
        lhs(7,23)=clhs26*clhs706 + clhs36*clhs707 + clhs608*clhs636 + clhs617*clhs637 + clhs626*clhs638 + clhs7*clhs705;
        lhs(7,24)=clhs7*clhs708;
        lhs(7,25)=clhs26*clhs709;
        lhs(7,26)=clhs36*clhs710;
        lhs(7,27)=0;
        lhs(8,0)=-clhs26*clhs712 + clhs27*clhs715 - clhs36*clhs713 + clhs37*clhs716 - clhs7*clhs711 + clhs714*clhs8;
        lhs(8,1)=-clhs26*clhs718 - clhs36*clhs719 - clhs7*clhs717 + clhs714*clhs74 + clhs715*clhs80 + clhs716*clhs86;
        lhs(8,2)=clhs104*clhs716 - clhs26*clhs721 - clhs36*clhs722 - clhs7*clhs720 + clhs714*clhs92 + clhs715*clhs98;
        lhs(8,3)=clhs110*clhs714 + clhs116*clhs715 + clhs122*clhs716 - clhs26*clhs724 - clhs36*clhs725 - clhs7*clhs723;
        lhs(8,4)=clhs128*clhs714 + clhs134*clhs715 + clhs140*clhs716 - clhs26*clhs727 - clhs36*clhs728 - clhs7*clhs726;
        lhs(8,5)=clhs146*clhs714 + clhs152*clhs715 + clhs158*clhs716 - clhs26*clhs730 - clhs36*clhs731 - clhs7*clhs729;
        lhs(8,6)=clhs164*clhs714 + clhs170*clhs715 + clhs176*clhs716 - clhs26*clhs733 - clhs36*clhs734 - clhs7*clhs732;
        lhs(8,7)=clhs182*clhs714 + clhs188*clhs715 + clhs194*clhs716 - clhs26*clhs736 - clhs36*clhs737 - clhs7*clhs735;
        lhs(8,8)=clhs200*clhs714 + clhs206*clhs715 + clhs212*clhs716 - clhs26*clhs739 - clhs36*clhs740 - clhs7*clhs738;
        lhs(8,9)=clhs218*clhs714 + clhs224*clhs715 + clhs230*clhs716 - clhs26*clhs742 - clhs36*clhs743 - clhs7*clhs741;
        lhs(8,10)=clhs236*clhs714 + clhs242*clhs715 + clhs248*clhs716 - clhs26*clhs745 - clhs36*clhs746 - clhs7*clhs744;
        lhs(8,11)=clhs254*clhs714 - clhs26*clhs748 + clhs260*clhs715 + clhs266*clhs716 - clhs36*clhs749 - clhs7*clhs747;
        lhs(8,12)=clhs26*clhs751 + clhs278*clhs714 + clhs287*clhs715 + clhs296*clhs716 + clhs36*clhs752 + clhs7*clhs750;
        lhs(8,13)=clhs26*clhs754 + clhs308*clhs714 + clhs317*clhs715 + clhs326*clhs716 + clhs36*clhs755 + clhs7*clhs753;
        lhs(8,14)=clhs26*clhs757 + clhs338*clhs714 + clhs347*clhs715 + clhs356*clhs716 + clhs36*clhs758 + clhs7*clhs756;
        lhs(8,15)=clhs26*clhs760 + clhs36*clhs761 + clhs368*clhs714 + clhs377*clhs715 + clhs386*clhs716 + clhs7*clhs759;
        lhs(8,16)=clhs26*clhs763 + clhs36*clhs764 + clhs398*clhs714 + clhs407*clhs715 + clhs416*clhs716 + clhs7*clhs762;
        lhs(8,17)=clhs26*clhs766 + clhs36*clhs767 + clhs428*clhs714 + clhs437*clhs715 + clhs446*clhs716 + clhs7*clhs765;
        lhs(8,18)=clhs26*clhs769 + clhs36*clhs770 + clhs458*clhs714 + clhs467*clhs715 + clhs476*clhs716 + clhs7*clhs768;
        lhs(8,19)=clhs26*clhs772 + clhs36*clhs773 + clhs488*clhs714 + clhs497*clhs715 + clhs506*clhs716 + clhs7*clhs771;
        lhs(8,20)=clhs26*clhs775 + clhs36*clhs776 + clhs518*clhs714 + clhs527*clhs715 + clhs536*clhs716 + clhs7*clhs774;
        lhs(8,21)=clhs26*clhs778 + clhs36*clhs779 + clhs548*clhs714 + clhs557*clhs715 + clhs566*clhs716 + clhs7*clhs777;
        lhs(8,22)=clhs26*clhs781 + clhs36*clhs782 + clhs578*clhs714 + clhs587*clhs715 + clhs596*clhs716 + clhs7*clhs780;
        lhs(8,23)=clhs26*clhs784 + clhs36*clhs785 + clhs608*clhs714 + clhs617*clhs715 + clhs626*clhs716 + clhs7*clhs783;
        lhs(8,24)=clhs7*clhs786;
        lhs(8,25)=clhs26*clhs787;
        lhs(8,26)=clhs36*clhs788;
        lhs(8,27)=0;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs59 - clhs28*clhs31 + clhs29*clhs65 - clhs38*clhs41 + clhs39*clhs71;
        lhs(9,1)=-clhs10*clhs77 - clhs28*clhs83 - clhs38*clhs89 + clhs59*clhs75 + clhs65*clhs81 + clhs71*clhs87;
        lhs(9,2)=-clhs10*clhs95 - clhs101*clhs28 + clhs105*clhs71 - clhs107*clhs38 + clhs59*clhs93 + clhs65*clhs99;
        lhs(9,3)=-clhs10*clhs113 + clhs111*clhs59 + clhs117*clhs65 - clhs119*clhs28 + clhs123*clhs71 - clhs125*clhs38;
        lhs(9,4)=-clhs10*clhs131 + clhs129*clhs59 + clhs135*clhs65 - clhs137*clhs28 + clhs141*clhs71 - clhs143*clhs38;
        lhs(9,5)=-clhs10*clhs149 + clhs147*clhs59 + clhs153*clhs65 - clhs155*clhs28 + clhs159*clhs71 - clhs161*clhs38;
        lhs(9,6)=-clhs10*clhs167 + clhs165*clhs59 + clhs171*clhs65 - clhs173*clhs28 + clhs177*clhs71 - clhs179*clhs38;
        lhs(9,7)=-clhs10*clhs185 + clhs183*clhs59 + clhs189*clhs65 - clhs191*clhs28 + clhs195*clhs71 - clhs197*clhs38;
        lhs(9,8)=-clhs10*clhs203 + clhs201*clhs59 + clhs207*clhs65 - clhs209*clhs28 + clhs213*clhs71 - clhs215*clhs38;
        lhs(9,9)=-clhs10*clhs221 + clhs219*clhs59 + clhs225*clhs65 - clhs227*clhs28 + clhs231*clhs71 - clhs233*clhs38;
        lhs(9,10)=-clhs10*clhs239 + clhs237*clhs59 + clhs243*clhs65 - clhs245*clhs28 + clhs249*clhs71 - clhs251*clhs38;
        lhs(9,11)=-clhs10*clhs257 + clhs255*clhs59 + clhs261*clhs65 - clhs263*clhs28 + clhs267*clhs71 - clhs269*clhs38;
        lhs(9,12)=clhs10*clhs281 + clhs279*clhs59 + clhs28*clhs290 + clhs288*clhs65 + clhs297*clhs71 + clhs299*clhs38;
        lhs(9,13)=clhs10*clhs311 + clhs28*clhs320 + clhs309*clhs59 + clhs318*clhs65 + clhs327*clhs71 + clhs329*clhs38;
        lhs(9,14)=clhs10*clhs341 + clhs28*clhs350 + clhs339*clhs59 + clhs348*clhs65 + clhs357*clhs71 + clhs359*clhs38;
        lhs(9,15)=clhs10*clhs371 + clhs28*clhs380 + clhs369*clhs59 + clhs378*clhs65 + clhs38*clhs389 + clhs387*clhs71;
        lhs(9,16)=clhs10*clhs401 + clhs28*clhs410 + clhs38*clhs419 + clhs399*clhs59 + clhs408*clhs65 + clhs417*clhs71;
        lhs(9,17)=clhs10*clhs431 + clhs28*clhs440 + clhs38*clhs449 + clhs429*clhs59 + clhs438*clhs65 + clhs447*clhs71;
        lhs(9,18)=clhs10*clhs461 + clhs28*clhs470 + clhs38*clhs479 + clhs459*clhs59 + clhs468*clhs65 + clhs477*clhs71;
        lhs(9,19)=clhs10*clhs491 + clhs28*clhs500 + clhs38*clhs509 + clhs489*clhs59 + clhs498*clhs65 + clhs507*clhs71;
        lhs(9,20)=clhs10*clhs521 + clhs28*clhs530 + clhs38*clhs539 + clhs519*clhs59 + clhs528*clhs65 + clhs537*clhs71;
        lhs(9,21)=clhs10*clhs551 + clhs28*clhs560 + clhs38*clhs569 + clhs549*clhs59 + clhs558*clhs65 + clhs567*clhs71;
        lhs(9,22)=clhs10*clhs581 + clhs28*clhs590 + clhs38*clhs599 + clhs579*clhs59 + clhs588*clhs65 + clhs597*clhs71;
        lhs(9,23)=clhs10*clhs611 + clhs28*clhs620 + clhs38*clhs629 + clhs59*clhs609 + clhs618*clhs65 + clhs627*clhs71;
        lhs(9,24)=clhs10*clhs630;
        lhs(9,25)=clhs28*clhs631;
        lhs(9,26)=clhs38*clhs632;
        lhs(9,27)=0;
        lhs(10,0)=-clhs10*clhs633 + clhs11*clhs636 - clhs28*clhs634 + clhs29*clhs637 - clhs38*clhs635 + clhs39*clhs638;
        lhs(10,1)=-clhs10*clhs639 - clhs28*clhs640 - clhs38*clhs641 + clhs636*clhs75 + clhs637*clhs81 + clhs638*clhs87;
        lhs(10,2)=-clhs10*clhs642 + clhs105*clhs638 - clhs28*clhs643 - clhs38*clhs644 + clhs636*clhs93 + clhs637*clhs99;
        lhs(10,3)=-clhs10*clhs645 + clhs111*clhs636 + clhs117*clhs637 + clhs123*clhs638 - clhs28*clhs646 - clhs38*clhs647;
        lhs(10,4)=-clhs10*clhs648 + clhs129*clhs636 + clhs135*clhs637 + clhs141*clhs638 - clhs28*clhs649 - clhs38*clhs650;
        lhs(10,5)=-clhs10*clhs651 + clhs147*clhs636 + clhs153*clhs637 + clhs159*clhs638 - clhs28*clhs652 - clhs38*clhs653;
        lhs(10,6)=-clhs10*clhs654 + clhs165*clhs636 + clhs171*clhs637 + clhs177*clhs638 - clhs28*clhs655 - clhs38*clhs656;
        lhs(10,7)=-clhs10*clhs657 + clhs183*clhs636 + clhs189*clhs637 + clhs195*clhs638 - clhs28*clhs658 - clhs38*clhs659;
        lhs(10,8)=-clhs10*clhs660 + clhs201*clhs636 + clhs207*clhs637 + clhs213*clhs638 - clhs28*clhs661 - clhs38*clhs662;
        lhs(10,9)=-clhs10*clhs663 + clhs219*clhs636 + clhs225*clhs637 + clhs231*clhs638 - clhs28*clhs664 - clhs38*clhs665;
        lhs(10,10)=-clhs10*clhs666 + clhs237*clhs636 + clhs243*clhs637 + clhs249*clhs638 - clhs28*clhs667 - clhs38*clhs668;
        lhs(10,11)=-clhs10*clhs669 + clhs255*clhs636 + clhs261*clhs637 + clhs267*clhs638 - clhs28*clhs670 - clhs38*clhs671;
        lhs(10,12)=clhs10*clhs672 + clhs279*clhs636 + clhs28*clhs673 + clhs288*clhs637 + clhs297*clhs638 + clhs38*clhs674;
        lhs(10,13)=clhs10*clhs675 + clhs28*clhs676 + clhs309*clhs636 + clhs318*clhs637 + clhs327*clhs638 + clhs38*clhs677;
        lhs(10,14)=clhs10*clhs678 + clhs28*clhs679 + clhs339*clhs636 + clhs348*clhs637 + clhs357*clhs638 + clhs38*clhs680;
        lhs(10,15)=clhs10*clhs681 + clhs28*clhs682 + clhs369*clhs636 + clhs378*clhs637 + clhs38*clhs683 + clhs387*clhs638;
        lhs(10,16)=clhs10*clhs684 + clhs28*clhs685 + clhs38*clhs686 + clhs399*clhs636 + clhs408*clhs637 + clhs417*clhs638;
        lhs(10,17)=clhs10*clhs687 + clhs28*clhs688 + clhs38*clhs689 + clhs429*clhs636 + clhs438*clhs637 + clhs447*clhs638;
        lhs(10,18)=clhs10*clhs690 + clhs28*clhs691 + clhs38*clhs692 + clhs459*clhs636 + clhs468*clhs637 + clhs477*clhs638;
        lhs(10,19)=clhs10*clhs693 + clhs28*clhs694 + clhs38*clhs695 + clhs489*clhs636 + clhs498*clhs637 + clhs507*clhs638;
        lhs(10,20)=clhs10*clhs696 + clhs28*clhs697 + clhs38*clhs698 + clhs519*clhs636 + clhs528*clhs637 + clhs537*clhs638;
        lhs(10,21)=clhs10*clhs699 + clhs28*clhs700 + clhs38*clhs701 + clhs549*clhs636 + clhs558*clhs637 + clhs567*clhs638;
        lhs(10,22)=clhs10*clhs702 + clhs28*clhs703 + clhs38*clhs704 + clhs579*clhs636 + clhs588*clhs637 + clhs597*clhs638;
        lhs(10,23)=clhs10*clhs705 + clhs28*clhs706 + clhs38*clhs707 + clhs609*clhs636 + clhs618*clhs637 + clhs627*clhs638;
        lhs(10,24)=clhs10*clhs708;
        lhs(10,25)=clhs28*clhs709;
        lhs(10,26)=clhs38*clhs710;
        lhs(10,27)=0;
        lhs(11,0)=-clhs10*clhs711 + clhs11*clhs714 - clhs28*clhs712 + clhs29*clhs715 - clhs38*clhs713 + clhs39*clhs716;
        lhs(11,1)=-clhs10*clhs717 - clhs28*clhs718 - clhs38*clhs719 + clhs714*clhs75 + clhs715*clhs81 + clhs716*clhs87;
        lhs(11,2)=-clhs10*clhs720 + clhs105*clhs716 - clhs28*clhs721 - clhs38*clhs722 + clhs714*clhs93 + clhs715*clhs99;
        lhs(11,3)=-clhs10*clhs723 + clhs111*clhs714 + clhs117*clhs715 + clhs123*clhs716 - clhs28*clhs724 - clhs38*clhs725;
        lhs(11,4)=-clhs10*clhs726 + clhs129*clhs714 + clhs135*clhs715 + clhs141*clhs716 - clhs28*clhs727 - clhs38*clhs728;
        lhs(11,5)=-clhs10*clhs729 + clhs147*clhs714 + clhs153*clhs715 + clhs159*clhs716 - clhs28*clhs730 - clhs38*clhs731;
        lhs(11,6)=-clhs10*clhs732 + clhs165*clhs714 + clhs171*clhs715 + clhs177*clhs716 - clhs28*clhs733 - clhs38*clhs734;
        lhs(11,7)=-clhs10*clhs735 + clhs183*clhs714 + clhs189*clhs715 + clhs195*clhs716 - clhs28*clhs736 - clhs38*clhs737;
        lhs(11,8)=-clhs10*clhs738 + clhs201*clhs714 + clhs207*clhs715 + clhs213*clhs716 - clhs28*clhs739 - clhs38*clhs740;
        lhs(11,9)=-clhs10*clhs741 + clhs219*clhs714 + clhs225*clhs715 + clhs231*clhs716 - clhs28*clhs742 - clhs38*clhs743;
        lhs(11,10)=-clhs10*clhs744 + clhs237*clhs714 + clhs243*clhs715 + clhs249*clhs716 - clhs28*clhs745 - clhs38*clhs746;
        lhs(11,11)=-clhs10*clhs747 + clhs255*clhs714 + clhs261*clhs715 + clhs267*clhs716 - clhs28*clhs748 - clhs38*clhs749;
        lhs(11,12)=clhs10*clhs750 + clhs279*clhs714 + clhs28*clhs751 + clhs288*clhs715 + clhs297*clhs716 + clhs38*clhs752;
        lhs(11,13)=clhs10*clhs753 + clhs28*clhs754 + clhs309*clhs714 + clhs318*clhs715 + clhs327*clhs716 + clhs38*clhs755;
        lhs(11,14)=clhs10*clhs756 + clhs28*clhs757 + clhs339*clhs714 + clhs348*clhs715 + clhs357*clhs716 + clhs38*clhs758;
        lhs(11,15)=clhs10*clhs759 + clhs28*clhs760 + clhs369*clhs714 + clhs378*clhs715 + clhs38*clhs761 + clhs387*clhs716;
        lhs(11,16)=clhs10*clhs762 + clhs28*clhs763 + clhs38*clhs764 + clhs399*clhs714 + clhs408*clhs715 + clhs417*clhs716;
        lhs(11,17)=clhs10*clhs765 + clhs28*clhs766 + clhs38*clhs767 + clhs429*clhs714 + clhs438*clhs715 + clhs447*clhs716;
        lhs(11,18)=clhs10*clhs768 + clhs28*clhs769 + clhs38*clhs770 + clhs459*clhs714 + clhs468*clhs715 + clhs477*clhs716;
        lhs(11,19)=clhs10*clhs771 + clhs28*clhs772 + clhs38*clhs773 + clhs489*clhs714 + clhs498*clhs715 + clhs507*clhs716;
        lhs(11,20)=clhs10*clhs774 + clhs28*clhs775 + clhs38*clhs776 + clhs519*clhs714 + clhs528*clhs715 + clhs537*clhs716;
        lhs(11,21)=clhs10*clhs777 + clhs28*clhs778 + clhs38*clhs779 + clhs549*clhs714 + clhs558*clhs715 + clhs567*clhs716;
        lhs(11,22)=clhs10*clhs780 + clhs28*clhs781 + clhs38*clhs782 + clhs579*clhs714 + clhs588*clhs715 + clhs597*clhs716;
        lhs(11,23)=clhs10*clhs783 + clhs28*clhs784 + clhs38*clhs785 + clhs609*clhs714 + clhs618*clhs715 + clhs627*clhs716;
        lhs(11,24)=clhs10*clhs786;
        lhs(11,25)=clhs28*clhs787;
        lhs(11,26)=clhs38*clhs788;
        lhs(11,27)=0;
        lhs(12,0)=penalty_parameter*(clhs43*clhs789 + clhs60*clhs790 + clhs66*clhs791);
        lhs(12,1)=penalty_parameter*(clhs43*clhs792 + clhs60*clhs793 + clhs66*clhs794);
        lhs(12,2)=penalty_parameter*(clhs43*clhs795 + clhs60*clhs796 + clhs66*clhs797);
        lhs(12,3)=penalty_parameter*(clhs43*clhs798 + clhs60*clhs799 + clhs66*clhs800);
        lhs(12,4)=penalty_parameter*(clhs43*clhs801 + clhs60*clhs802 + clhs66*clhs803);
        lhs(12,5)=penalty_parameter*(clhs43*clhs804 + clhs60*clhs805 + clhs66*clhs806);
        lhs(12,6)=penalty_parameter*(clhs43*clhs807 + clhs60*clhs808 + clhs66*clhs809);
        lhs(12,7)=penalty_parameter*(clhs43*clhs810 + clhs60*clhs811 + clhs66*clhs812);
        lhs(12,8)=penalty_parameter*(clhs43*clhs813 + clhs60*clhs814 + clhs66*clhs815);
        lhs(12,9)=penalty_parameter*(clhs43*clhs816 + clhs60*clhs817 + clhs66*clhs818);
        lhs(12,10)=penalty_parameter*(clhs43*clhs819 + clhs60*clhs820 + clhs66*clhs821);
        lhs(12,11)=penalty_parameter*(clhs43*clhs822 + clhs60*clhs823 + clhs66*clhs824);
        lhs(12,12)=-clhs273*clhs59 - clhs281*clhs43 - clhs282*clhs65 - clhs290*clhs60 - clhs291*clhs71 - clhs299*clhs66;
        lhs(12,13)=-clhs303*clhs59 - clhs311*clhs43 - clhs312*clhs65 - clhs320*clhs60 - clhs321*clhs71 - clhs329*clhs66;
        lhs(12,14)=-clhs333*clhs59 - clhs341*clhs43 - clhs342*clhs65 - clhs350*clhs60 - clhs351*clhs71 - clhs359*clhs66;
        lhs(12,15)=-clhs363*clhs59 - clhs371*clhs43 - clhs372*clhs65 - clhs380*clhs60 - clhs381*clhs71 - clhs389*clhs66;
        lhs(12,16)=-clhs393*clhs59 - clhs401*clhs43 - clhs402*clhs65 - clhs410*clhs60 - clhs411*clhs71 - clhs419*clhs66;
        lhs(12,17)=-clhs423*clhs59 - clhs43*clhs431 - clhs432*clhs65 - clhs440*clhs60 - clhs441*clhs71 - clhs449*clhs66;
        lhs(12,18)=-clhs43*clhs461 - clhs453*clhs59 - clhs462*clhs65 - clhs470*clhs60 - clhs471*clhs71 - clhs479*clhs66;
        lhs(12,19)=-clhs43*clhs491 - clhs483*clhs59 - clhs492*clhs65 - clhs500*clhs60 - clhs501*clhs71 - clhs509*clhs66;
        lhs(12,20)=-clhs43*clhs521 - clhs513*clhs59 - clhs522*clhs65 - clhs530*clhs60 - clhs531*clhs71 - clhs539*clhs66;
        lhs(12,21)=-clhs43*clhs551 - clhs543*clhs59 - clhs552*clhs65 - clhs560*clhs60 - clhs561*clhs71 - clhs569*clhs66;
        lhs(12,22)=-clhs43*clhs581 - clhs573*clhs59 - clhs582*clhs65 - clhs590*clhs60 - clhs591*clhs71 - clhs599*clhs66;
        lhs(12,23)=-clhs43*clhs611 - clhs59*clhs603 - clhs60*clhs620 - clhs612*clhs65 - clhs621*clhs71 - clhs629*clhs66;
        lhs(12,24)=-clhs43*clhs630;
        lhs(12,25)=-clhs60*clhs631;
        lhs(12,26)=-clhs632*clhs66;
        lhs(12,27)=0;
        lhs(13,0)=penalty_parameter*(clhs43*clhs825 + clhs60*clhs826 + clhs66*clhs827);
        lhs(13,1)=penalty_parameter*(clhs43*clhs828 + clhs60*clhs829 + clhs66*clhs830);
        lhs(13,2)=penalty_parameter*(clhs43*clhs831 + clhs60*clhs832 + clhs66*clhs833);
        lhs(13,3)=penalty_parameter*(clhs43*clhs834 + clhs60*clhs835 + clhs66*clhs836);
        lhs(13,4)=penalty_parameter*(clhs43*clhs837 + clhs60*clhs838 + clhs66*clhs839);
        lhs(13,5)=penalty_parameter*(clhs43*clhs840 + clhs60*clhs841 + clhs66*clhs842);
        lhs(13,6)=penalty_parameter*(clhs43*clhs843 + clhs60*clhs844 + clhs66*clhs845);
        lhs(13,7)=penalty_parameter*(clhs43*clhs846 + clhs60*clhs847 + clhs66*clhs848);
        lhs(13,8)=penalty_parameter*(clhs43*clhs849 + clhs60*clhs850 + clhs66*clhs851);
        lhs(13,9)=penalty_parameter*(clhs43*clhs852 + clhs60*clhs853 + clhs66*clhs854);
        lhs(13,10)=penalty_parameter*(clhs43*clhs855 + clhs60*clhs856 + clhs66*clhs857);
        lhs(13,11)=penalty_parameter*(clhs43*clhs858 + clhs60*clhs859 + clhs66*clhs860);
        lhs(13,12)=-clhs273*clhs636 - clhs282*clhs637 - clhs291*clhs638 - clhs43*clhs672 - clhs60*clhs673 - clhs66*clhs674;
        lhs(13,13)=-clhs303*clhs636 - clhs312*clhs637 - clhs321*clhs638 - clhs43*clhs675 - clhs60*clhs676 - clhs66*clhs677;
        lhs(13,14)=-clhs333*clhs636 - clhs342*clhs637 - clhs351*clhs638 - clhs43*clhs678 - clhs60*clhs679 - clhs66*clhs680;
        lhs(13,15)=-clhs363*clhs636 - clhs372*clhs637 - clhs381*clhs638 - clhs43*clhs681 - clhs60*clhs682 - clhs66*clhs683;
        lhs(13,16)=-clhs393*clhs636 - clhs402*clhs637 - clhs411*clhs638 - clhs43*clhs684 - clhs60*clhs685 - clhs66*clhs686;
        lhs(13,17)=-clhs423*clhs636 - clhs43*clhs687 - clhs432*clhs637 - clhs441*clhs638 - clhs60*clhs688 - clhs66*clhs689;
        lhs(13,18)=-clhs43*clhs690 - clhs453*clhs636 - clhs462*clhs637 - clhs471*clhs638 - clhs60*clhs691 - clhs66*clhs692;
        lhs(13,19)=-clhs43*clhs693 - clhs483*clhs636 - clhs492*clhs637 - clhs501*clhs638 - clhs60*clhs694 - clhs66*clhs695;
        lhs(13,20)=-clhs43*clhs696 - clhs513*clhs636 - clhs522*clhs637 - clhs531*clhs638 - clhs60*clhs697 - clhs66*clhs698;
        lhs(13,21)=-clhs43*clhs699 - clhs543*clhs636 - clhs552*clhs637 - clhs561*clhs638 - clhs60*clhs700 - clhs66*clhs701;
        lhs(13,22)=-clhs43*clhs702 - clhs573*clhs636 - clhs582*clhs637 - clhs591*clhs638 - clhs60*clhs703 - clhs66*clhs704;
        lhs(13,23)=-clhs43*clhs705 - clhs60*clhs706 - clhs603*clhs636 - clhs612*clhs637 - clhs621*clhs638 - clhs66*clhs707;
        lhs(13,24)=-clhs43*clhs708;
        lhs(13,25)=-clhs60*clhs709;
        lhs(13,26)=-clhs66*clhs710;
        lhs(13,27)=0;
        lhs(14,0)=penalty_parameter*(clhs43*clhs861 + clhs60*clhs862 + clhs66*clhs863);
        lhs(14,1)=penalty_parameter*(clhs43*clhs864 + clhs60*clhs865 + clhs66*clhs866);
        lhs(14,2)=penalty_parameter*(clhs43*clhs867 + clhs60*clhs868 + clhs66*clhs869);
        lhs(14,3)=penalty_parameter*(clhs43*clhs870 + clhs60*clhs871 + clhs66*clhs872);
        lhs(14,4)=penalty_parameter*(clhs43*clhs873 + clhs60*clhs874 + clhs66*clhs875);
        lhs(14,5)=penalty_parameter*(clhs43*clhs876 + clhs60*clhs877 + clhs66*clhs878);
        lhs(14,6)=penalty_parameter*(clhs43*clhs879 + clhs60*clhs880 + clhs66*clhs881);
        lhs(14,7)=penalty_parameter*(clhs43*clhs882 + clhs60*clhs883 + clhs66*clhs884);
        lhs(14,8)=penalty_parameter*(clhs43*clhs885 + clhs60*clhs886 + clhs66*clhs887);
        lhs(14,9)=penalty_parameter*(clhs43*clhs888 + clhs60*clhs889 + clhs66*clhs890);
        lhs(14,10)=penalty_parameter*(clhs43*clhs891 + clhs60*clhs892 + clhs66*clhs893);
        lhs(14,11)=penalty_parameter*(clhs43*clhs894 + clhs60*clhs895 + clhs66*clhs896);
        lhs(14,12)=-clhs273*clhs714 - clhs282*clhs715 - clhs291*clhs716 - clhs43*clhs750 - clhs60*clhs751 - clhs66*clhs752;
        lhs(14,13)=-clhs303*clhs714 - clhs312*clhs715 - clhs321*clhs716 - clhs43*clhs753 - clhs60*clhs754 - clhs66*clhs755;
        lhs(14,14)=-clhs333*clhs714 - clhs342*clhs715 - clhs351*clhs716 - clhs43*clhs756 - clhs60*clhs757 - clhs66*clhs758;
        lhs(14,15)=-clhs363*clhs714 - clhs372*clhs715 - clhs381*clhs716 - clhs43*clhs759 - clhs60*clhs760 - clhs66*clhs761;
        lhs(14,16)=-clhs393*clhs714 - clhs402*clhs715 - clhs411*clhs716 - clhs43*clhs762 - clhs60*clhs763 - clhs66*clhs764;
        lhs(14,17)=-clhs423*clhs714 - clhs43*clhs765 - clhs432*clhs715 - clhs441*clhs716 - clhs60*clhs766 - clhs66*clhs767;
        lhs(14,18)=-clhs43*clhs768 - clhs453*clhs714 - clhs462*clhs715 - clhs471*clhs716 - clhs60*clhs769 - clhs66*clhs770;
        lhs(14,19)=-clhs43*clhs771 - clhs483*clhs714 - clhs492*clhs715 - clhs501*clhs716 - clhs60*clhs772 - clhs66*clhs773;
        lhs(14,20)=-clhs43*clhs774 - clhs513*clhs714 - clhs522*clhs715 - clhs531*clhs716 - clhs60*clhs775 - clhs66*clhs776;
        lhs(14,21)=-clhs43*clhs777 - clhs543*clhs714 - clhs552*clhs715 - clhs561*clhs716 - clhs60*clhs778 - clhs66*clhs779;
        lhs(14,22)=-clhs43*clhs780 - clhs573*clhs714 - clhs582*clhs715 - clhs591*clhs716 - clhs60*clhs781 - clhs66*clhs782;
        lhs(14,23)=-clhs43*clhs783 - clhs60*clhs784 - clhs603*clhs714 - clhs612*clhs715 - clhs621*clhs716 - clhs66*clhs785;
        lhs(14,24)=-clhs43*clhs786;
        lhs(14,25)=-clhs60*clhs787;
        lhs(14,26)=-clhs66*clhs788;
        lhs(14,27)=0;
        lhs(15,0)=penalty_parameter*(clhs45*clhs789 + clhs61*clhs790 + clhs67*clhs791);
        lhs(15,1)=penalty_parameter*(clhs45*clhs792 + clhs61*clhs793 + clhs67*clhs794);
        lhs(15,2)=penalty_parameter*(clhs45*clhs795 + clhs61*clhs796 + clhs67*clhs797);
        lhs(15,3)=penalty_parameter*(clhs45*clhs798 + clhs61*clhs799 + clhs67*clhs800);
        lhs(15,4)=penalty_parameter*(clhs45*clhs801 + clhs61*clhs802 + clhs67*clhs803);
        lhs(15,5)=penalty_parameter*(clhs45*clhs804 + clhs61*clhs805 + clhs67*clhs806);
        lhs(15,6)=penalty_parameter*(clhs45*clhs807 + clhs61*clhs808 + clhs67*clhs809);
        lhs(15,7)=penalty_parameter*(clhs45*clhs810 + clhs61*clhs811 + clhs67*clhs812);
        lhs(15,8)=penalty_parameter*(clhs45*clhs813 + clhs61*clhs814 + clhs67*clhs815);
        lhs(15,9)=penalty_parameter*(clhs45*clhs816 + clhs61*clhs817 + clhs67*clhs818);
        lhs(15,10)=penalty_parameter*(clhs45*clhs819 + clhs61*clhs820 + clhs67*clhs821);
        lhs(15,11)=penalty_parameter*(clhs45*clhs822 + clhs61*clhs823 + clhs67*clhs824);
        lhs(15,12)=-clhs274*clhs59 - clhs281*clhs45 - clhs283*clhs65 - clhs290*clhs61 - clhs292*clhs71 - clhs299*clhs67;
        lhs(15,13)=-clhs304*clhs59 - clhs311*clhs45 - clhs313*clhs65 - clhs320*clhs61 - clhs322*clhs71 - clhs329*clhs67;
        lhs(15,14)=-clhs334*clhs59 - clhs341*clhs45 - clhs343*clhs65 - clhs350*clhs61 - clhs352*clhs71 - clhs359*clhs67;
        lhs(15,15)=-clhs364*clhs59 - clhs371*clhs45 - clhs373*clhs65 - clhs380*clhs61 - clhs382*clhs71 - clhs389*clhs67;
        lhs(15,16)=-clhs394*clhs59 - clhs401*clhs45 - clhs403*clhs65 - clhs410*clhs61 - clhs412*clhs71 - clhs419*clhs67;
        lhs(15,17)=-clhs424*clhs59 - clhs431*clhs45 - clhs433*clhs65 - clhs440*clhs61 - clhs442*clhs71 - clhs449*clhs67;
        lhs(15,18)=-clhs45*clhs461 - clhs454*clhs59 - clhs463*clhs65 - clhs470*clhs61 - clhs472*clhs71 - clhs479*clhs67;
        lhs(15,19)=-clhs45*clhs491 - clhs484*clhs59 - clhs493*clhs65 - clhs500*clhs61 - clhs502*clhs71 - clhs509*clhs67;
        lhs(15,20)=-clhs45*clhs521 - clhs514*clhs59 - clhs523*clhs65 - clhs530*clhs61 - clhs532*clhs71 - clhs539*clhs67;
        lhs(15,21)=-clhs45*clhs551 - clhs544*clhs59 - clhs553*clhs65 - clhs560*clhs61 - clhs562*clhs71 - clhs569*clhs67;
        lhs(15,22)=-clhs45*clhs581 - clhs574*clhs59 - clhs583*clhs65 - clhs590*clhs61 - clhs592*clhs71 - clhs599*clhs67;
        lhs(15,23)=-clhs45*clhs611 - clhs59*clhs604 - clhs61*clhs620 - clhs613*clhs65 - clhs622*clhs71 - clhs629*clhs67;
        lhs(15,24)=-clhs45*clhs630;
        lhs(15,25)=-clhs61*clhs631;
        lhs(15,26)=-clhs632*clhs67;
        lhs(15,27)=0;
        lhs(16,0)=penalty_parameter*(clhs45*clhs825 + clhs61*clhs826 + clhs67*clhs827);
        lhs(16,1)=penalty_parameter*(clhs45*clhs828 + clhs61*clhs829 + clhs67*clhs830);
        lhs(16,2)=penalty_parameter*(clhs45*clhs831 + clhs61*clhs832 + clhs67*clhs833);
        lhs(16,3)=penalty_parameter*(clhs45*clhs834 + clhs61*clhs835 + clhs67*clhs836);
        lhs(16,4)=penalty_parameter*(clhs45*clhs837 + clhs61*clhs838 + clhs67*clhs839);
        lhs(16,5)=penalty_parameter*(clhs45*clhs840 + clhs61*clhs841 + clhs67*clhs842);
        lhs(16,6)=penalty_parameter*(clhs45*clhs843 + clhs61*clhs844 + clhs67*clhs845);
        lhs(16,7)=penalty_parameter*(clhs45*clhs846 + clhs61*clhs847 + clhs67*clhs848);
        lhs(16,8)=penalty_parameter*(clhs45*clhs849 + clhs61*clhs850 + clhs67*clhs851);
        lhs(16,9)=penalty_parameter*(clhs45*clhs852 + clhs61*clhs853 + clhs67*clhs854);
        lhs(16,10)=penalty_parameter*(clhs45*clhs855 + clhs61*clhs856 + clhs67*clhs857);
        lhs(16,11)=penalty_parameter*(clhs45*clhs858 + clhs61*clhs859 + clhs67*clhs860);
        lhs(16,12)=-clhs274*clhs636 - clhs283*clhs637 - clhs292*clhs638 - clhs45*clhs672 - clhs61*clhs673 - clhs67*clhs674;
        lhs(16,13)=-clhs304*clhs636 - clhs313*clhs637 - clhs322*clhs638 - clhs45*clhs675 - clhs61*clhs676 - clhs67*clhs677;
        lhs(16,14)=-clhs334*clhs636 - clhs343*clhs637 - clhs352*clhs638 - clhs45*clhs678 - clhs61*clhs679 - clhs67*clhs680;
        lhs(16,15)=-clhs364*clhs636 - clhs373*clhs637 - clhs382*clhs638 - clhs45*clhs681 - clhs61*clhs682 - clhs67*clhs683;
        lhs(16,16)=-clhs394*clhs636 - clhs403*clhs637 - clhs412*clhs638 - clhs45*clhs684 - clhs61*clhs685 - clhs67*clhs686;
        lhs(16,17)=-clhs424*clhs636 - clhs433*clhs637 - clhs442*clhs638 - clhs45*clhs687 - clhs61*clhs688 - clhs67*clhs689;
        lhs(16,18)=-clhs45*clhs690 - clhs454*clhs636 - clhs463*clhs637 - clhs472*clhs638 - clhs61*clhs691 - clhs67*clhs692;
        lhs(16,19)=-clhs45*clhs693 - clhs484*clhs636 - clhs493*clhs637 - clhs502*clhs638 - clhs61*clhs694 - clhs67*clhs695;
        lhs(16,20)=-clhs45*clhs696 - clhs514*clhs636 - clhs523*clhs637 - clhs532*clhs638 - clhs61*clhs697 - clhs67*clhs698;
        lhs(16,21)=-clhs45*clhs699 - clhs544*clhs636 - clhs553*clhs637 - clhs562*clhs638 - clhs61*clhs700 - clhs67*clhs701;
        lhs(16,22)=-clhs45*clhs702 - clhs574*clhs636 - clhs583*clhs637 - clhs592*clhs638 - clhs61*clhs703 - clhs67*clhs704;
        lhs(16,23)=-clhs45*clhs705 - clhs604*clhs636 - clhs61*clhs706 - clhs613*clhs637 - clhs622*clhs638 - clhs67*clhs707;
        lhs(16,24)=-clhs45*clhs708;
        lhs(16,25)=-clhs61*clhs709;
        lhs(16,26)=-clhs67*clhs710;
        lhs(16,27)=0;
        lhs(17,0)=penalty_parameter*(clhs45*clhs861 + clhs61*clhs862 + clhs67*clhs863);
        lhs(17,1)=penalty_parameter*(clhs45*clhs864 + clhs61*clhs865 + clhs67*clhs866);
        lhs(17,2)=penalty_parameter*(clhs45*clhs867 + clhs61*clhs868 + clhs67*clhs869);
        lhs(17,3)=penalty_parameter*(clhs45*clhs870 + clhs61*clhs871 + clhs67*clhs872);
        lhs(17,4)=penalty_parameter*(clhs45*clhs873 + clhs61*clhs874 + clhs67*clhs875);
        lhs(17,5)=penalty_parameter*(clhs45*clhs876 + clhs61*clhs877 + clhs67*clhs878);
        lhs(17,6)=penalty_parameter*(clhs45*clhs879 + clhs61*clhs880 + clhs67*clhs881);
        lhs(17,7)=penalty_parameter*(clhs45*clhs882 + clhs61*clhs883 + clhs67*clhs884);
        lhs(17,8)=penalty_parameter*(clhs45*clhs885 + clhs61*clhs886 + clhs67*clhs887);
        lhs(17,9)=penalty_parameter*(clhs45*clhs888 + clhs61*clhs889 + clhs67*clhs890);
        lhs(17,10)=penalty_parameter*(clhs45*clhs891 + clhs61*clhs892 + clhs67*clhs893);
        lhs(17,11)=penalty_parameter*(clhs45*clhs894 + clhs61*clhs895 + clhs67*clhs896);
        lhs(17,12)=-clhs274*clhs714 - clhs283*clhs715 - clhs292*clhs716 - clhs45*clhs750 - clhs61*clhs751 - clhs67*clhs752;
        lhs(17,13)=-clhs304*clhs714 - clhs313*clhs715 - clhs322*clhs716 - clhs45*clhs753 - clhs61*clhs754 - clhs67*clhs755;
        lhs(17,14)=-clhs334*clhs714 - clhs343*clhs715 - clhs352*clhs716 - clhs45*clhs756 - clhs61*clhs757 - clhs67*clhs758;
        lhs(17,15)=-clhs364*clhs714 - clhs373*clhs715 - clhs382*clhs716 - clhs45*clhs759 - clhs61*clhs760 - clhs67*clhs761;
        lhs(17,16)=-clhs394*clhs714 - clhs403*clhs715 - clhs412*clhs716 - clhs45*clhs762 - clhs61*clhs763 - clhs67*clhs764;
        lhs(17,17)=-clhs424*clhs714 - clhs433*clhs715 - clhs442*clhs716 - clhs45*clhs765 - clhs61*clhs766 - clhs67*clhs767;
        lhs(17,18)=-clhs45*clhs768 - clhs454*clhs714 - clhs463*clhs715 - clhs472*clhs716 - clhs61*clhs769 - clhs67*clhs770;
        lhs(17,19)=-clhs45*clhs771 - clhs484*clhs714 - clhs493*clhs715 - clhs502*clhs716 - clhs61*clhs772 - clhs67*clhs773;
        lhs(17,20)=-clhs45*clhs774 - clhs514*clhs714 - clhs523*clhs715 - clhs532*clhs716 - clhs61*clhs775 - clhs67*clhs776;
        lhs(17,21)=-clhs45*clhs777 - clhs544*clhs714 - clhs553*clhs715 - clhs562*clhs716 - clhs61*clhs778 - clhs67*clhs779;
        lhs(17,22)=-clhs45*clhs780 - clhs574*clhs714 - clhs583*clhs715 - clhs592*clhs716 - clhs61*clhs781 - clhs67*clhs782;
        lhs(17,23)=-clhs45*clhs783 - clhs604*clhs714 - clhs61*clhs784 - clhs613*clhs715 - clhs622*clhs716 - clhs67*clhs785;
        lhs(17,24)=-clhs45*clhs786;
        lhs(17,25)=-clhs61*clhs787;
        lhs(17,26)=-clhs67*clhs788;
        lhs(17,27)=0;
        lhs(18,0)=penalty_parameter*(clhs47*clhs789 + clhs62*clhs790 + clhs68*clhs791);
        lhs(18,1)=penalty_parameter*(clhs47*clhs792 + clhs62*clhs793 + clhs68*clhs794);
        lhs(18,2)=penalty_parameter*(clhs47*clhs795 + clhs62*clhs796 + clhs68*clhs797);
        lhs(18,3)=penalty_parameter*(clhs47*clhs798 + clhs62*clhs799 + clhs68*clhs800);
        lhs(18,4)=penalty_parameter*(clhs47*clhs801 + clhs62*clhs802 + clhs68*clhs803);
        lhs(18,5)=penalty_parameter*(clhs47*clhs804 + clhs62*clhs805 + clhs68*clhs806);
        lhs(18,6)=penalty_parameter*(clhs47*clhs807 + clhs62*clhs808 + clhs68*clhs809);
        lhs(18,7)=penalty_parameter*(clhs47*clhs810 + clhs62*clhs811 + clhs68*clhs812);
        lhs(18,8)=penalty_parameter*(clhs47*clhs813 + clhs62*clhs814 + clhs68*clhs815);
        lhs(18,9)=penalty_parameter*(clhs47*clhs816 + clhs62*clhs817 + clhs68*clhs818);
        lhs(18,10)=penalty_parameter*(clhs47*clhs819 + clhs62*clhs820 + clhs68*clhs821);
        lhs(18,11)=penalty_parameter*(clhs47*clhs822 + clhs62*clhs823 + clhs68*clhs824);
        lhs(18,12)=-clhs275*clhs59 - clhs281*clhs47 - clhs284*clhs65 - clhs290*clhs62 - clhs293*clhs71 - clhs299*clhs68;
        lhs(18,13)=-clhs305*clhs59 - clhs311*clhs47 - clhs314*clhs65 - clhs320*clhs62 - clhs323*clhs71 - clhs329*clhs68;
        lhs(18,14)=-clhs335*clhs59 - clhs341*clhs47 - clhs344*clhs65 - clhs350*clhs62 - clhs353*clhs71 - clhs359*clhs68;
        lhs(18,15)=-clhs365*clhs59 - clhs371*clhs47 - clhs374*clhs65 - clhs380*clhs62 - clhs383*clhs71 - clhs389*clhs68;
        lhs(18,16)=-clhs395*clhs59 - clhs401*clhs47 - clhs404*clhs65 - clhs410*clhs62 - clhs413*clhs71 - clhs419*clhs68;
        lhs(18,17)=-clhs425*clhs59 - clhs431*clhs47 - clhs434*clhs65 - clhs440*clhs62 - clhs443*clhs71 - clhs449*clhs68;
        lhs(18,18)=-clhs455*clhs59 - clhs461*clhs47 - clhs464*clhs65 - clhs470*clhs62 - clhs473*clhs71 - clhs479*clhs68;
        lhs(18,19)=-clhs47*clhs491 - clhs485*clhs59 - clhs494*clhs65 - clhs500*clhs62 - clhs503*clhs71 - clhs509*clhs68;
        lhs(18,20)=-clhs47*clhs521 - clhs515*clhs59 - clhs524*clhs65 - clhs530*clhs62 - clhs533*clhs71 - clhs539*clhs68;
        lhs(18,21)=-clhs47*clhs551 - clhs545*clhs59 - clhs554*clhs65 - clhs560*clhs62 - clhs563*clhs71 - clhs569*clhs68;
        lhs(18,22)=-clhs47*clhs581 - clhs575*clhs59 - clhs584*clhs65 - clhs590*clhs62 - clhs593*clhs71 - clhs599*clhs68;
        lhs(18,23)=-clhs47*clhs611 - clhs59*clhs605 - clhs614*clhs65 - clhs62*clhs620 - clhs623*clhs71 - clhs629*clhs68;
        lhs(18,24)=-clhs47*clhs630;
        lhs(18,25)=-clhs62*clhs631;
        lhs(18,26)=-clhs632*clhs68;
        lhs(18,27)=0;
        lhs(19,0)=penalty_parameter*(clhs47*clhs825 + clhs62*clhs826 + clhs68*clhs827);
        lhs(19,1)=penalty_parameter*(clhs47*clhs828 + clhs62*clhs829 + clhs68*clhs830);
        lhs(19,2)=penalty_parameter*(clhs47*clhs831 + clhs62*clhs832 + clhs68*clhs833);
        lhs(19,3)=penalty_parameter*(clhs47*clhs834 + clhs62*clhs835 + clhs68*clhs836);
        lhs(19,4)=penalty_parameter*(clhs47*clhs837 + clhs62*clhs838 + clhs68*clhs839);
        lhs(19,5)=penalty_parameter*(clhs47*clhs840 + clhs62*clhs841 + clhs68*clhs842);
        lhs(19,6)=penalty_parameter*(clhs47*clhs843 + clhs62*clhs844 + clhs68*clhs845);
        lhs(19,7)=penalty_parameter*(clhs47*clhs846 + clhs62*clhs847 + clhs68*clhs848);
        lhs(19,8)=penalty_parameter*(clhs47*clhs849 + clhs62*clhs850 + clhs68*clhs851);
        lhs(19,9)=penalty_parameter*(clhs47*clhs852 + clhs62*clhs853 + clhs68*clhs854);
        lhs(19,10)=penalty_parameter*(clhs47*clhs855 + clhs62*clhs856 + clhs68*clhs857);
        lhs(19,11)=penalty_parameter*(clhs47*clhs858 + clhs62*clhs859 + clhs68*clhs860);
        lhs(19,12)=-clhs275*clhs636 - clhs284*clhs637 - clhs293*clhs638 - clhs47*clhs672 - clhs62*clhs673 - clhs674*clhs68;
        lhs(19,13)=-clhs305*clhs636 - clhs314*clhs637 - clhs323*clhs638 - clhs47*clhs675 - clhs62*clhs676 - clhs677*clhs68;
        lhs(19,14)=-clhs335*clhs636 - clhs344*clhs637 - clhs353*clhs638 - clhs47*clhs678 - clhs62*clhs679 - clhs68*clhs680;
        lhs(19,15)=-clhs365*clhs636 - clhs374*clhs637 - clhs383*clhs638 - clhs47*clhs681 - clhs62*clhs682 - clhs68*clhs683;
        lhs(19,16)=-clhs395*clhs636 - clhs404*clhs637 - clhs413*clhs638 - clhs47*clhs684 - clhs62*clhs685 - clhs68*clhs686;
        lhs(19,17)=-clhs425*clhs636 - clhs434*clhs637 - clhs443*clhs638 - clhs47*clhs687 - clhs62*clhs688 - clhs68*clhs689;
        lhs(19,18)=-clhs455*clhs636 - clhs464*clhs637 - clhs47*clhs690 - clhs473*clhs638 - clhs62*clhs691 - clhs68*clhs692;
        lhs(19,19)=-clhs47*clhs693 - clhs485*clhs636 - clhs494*clhs637 - clhs503*clhs638 - clhs62*clhs694 - clhs68*clhs695;
        lhs(19,20)=-clhs47*clhs696 - clhs515*clhs636 - clhs524*clhs637 - clhs533*clhs638 - clhs62*clhs697 - clhs68*clhs698;
        lhs(19,21)=-clhs47*clhs699 - clhs545*clhs636 - clhs554*clhs637 - clhs563*clhs638 - clhs62*clhs700 - clhs68*clhs701;
        lhs(19,22)=-clhs47*clhs702 - clhs575*clhs636 - clhs584*clhs637 - clhs593*clhs638 - clhs62*clhs703 - clhs68*clhs704;
        lhs(19,23)=-clhs47*clhs705 - clhs605*clhs636 - clhs614*clhs637 - clhs62*clhs706 - clhs623*clhs638 - clhs68*clhs707;
        lhs(19,24)=-clhs47*clhs708;
        lhs(19,25)=-clhs62*clhs709;
        lhs(19,26)=-clhs68*clhs710;
        lhs(19,27)=0;
        lhs(20,0)=penalty_parameter*(clhs47*clhs861 + clhs62*clhs862 + clhs68*clhs863);
        lhs(20,1)=penalty_parameter*(clhs47*clhs864 + clhs62*clhs865 + clhs68*clhs866);
        lhs(20,2)=penalty_parameter*(clhs47*clhs867 + clhs62*clhs868 + clhs68*clhs869);
        lhs(20,3)=penalty_parameter*(clhs47*clhs870 + clhs62*clhs871 + clhs68*clhs872);
        lhs(20,4)=penalty_parameter*(clhs47*clhs873 + clhs62*clhs874 + clhs68*clhs875);
        lhs(20,5)=penalty_parameter*(clhs47*clhs876 + clhs62*clhs877 + clhs68*clhs878);
        lhs(20,6)=penalty_parameter*(clhs47*clhs879 + clhs62*clhs880 + clhs68*clhs881);
        lhs(20,7)=penalty_parameter*(clhs47*clhs882 + clhs62*clhs883 + clhs68*clhs884);
        lhs(20,8)=penalty_parameter*(clhs47*clhs885 + clhs62*clhs886 + clhs68*clhs887);
        lhs(20,9)=penalty_parameter*(clhs47*clhs888 + clhs62*clhs889 + clhs68*clhs890);
        lhs(20,10)=penalty_parameter*(clhs47*clhs891 + clhs62*clhs892 + clhs68*clhs893);
        lhs(20,11)=penalty_parameter*(clhs47*clhs894 + clhs62*clhs895 + clhs68*clhs896);
        lhs(20,12)=-clhs275*clhs714 - clhs284*clhs715 - clhs293*clhs716 - clhs47*clhs750 - clhs62*clhs751 - clhs68*clhs752;
        lhs(20,13)=-clhs305*clhs714 - clhs314*clhs715 - clhs323*clhs716 - clhs47*clhs753 - clhs62*clhs754 - clhs68*clhs755;
        lhs(20,14)=-clhs335*clhs714 - clhs344*clhs715 - clhs353*clhs716 - clhs47*clhs756 - clhs62*clhs757 - clhs68*clhs758;
        lhs(20,15)=-clhs365*clhs714 - clhs374*clhs715 - clhs383*clhs716 - clhs47*clhs759 - clhs62*clhs760 - clhs68*clhs761;
        lhs(20,16)=-clhs395*clhs714 - clhs404*clhs715 - clhs413*clhs716 - clhs47*clhs762 - clhs62*clhs763 - clhs68*clhs764;
        lhs(20,17)=-clhs425*clhs714 - clhs434*clhs715 - clhs443*clhs716 - clhs47*clhs765 - clhs62*clhs766 - clhs68*clhs767;
        lhs(20,18)=-clhs455*clhs714 - clhs464*clhs715 - clhs47*clhs768 - clhs473*clhs716 - clhs62*clhs769 - clhs68*clhs770;
        lhs(20,19)=-clhs47*clhs771 - clhs485*clhs714 - clhs494*clhs715 - clhs503*clhs716 - clhs62*clhs772 - clhs68*clhs773;
        lhs(20,20)=-clhs47*clhs774 - clhs515*clhs714 - clhs524*clhs715 - clhs533*clhs716 - clhs62*clhs775 - clhs68*clhs776;
        lhs(20,21)=-clhs47*clhs777 - clhs545*clhs714 - clhs554*clhs715 - clhs563*clhs716 - clhs62*clhs778 - clhs68*clhs779;
        lhs(20,22)=-clhs47*clhs780 - clhs575*clhs714 - clhs584*clhs715 - clhs593*clhs716 - clhs62*clhs781 - clhs68*clhs782;
        lhs(20,23)=-clhs47*clhs783 - clhs605*clhs714 - clhs614*clhs715 - clhs62*clhs784 - clhs623*clhs716 - clhs68*clhs785;
        lhs(20,24)=-clhs47*clhs786;
        lhs(20,25)=-clhs62*clhs787;
        lhs(20,26)=-clhs68*clhs788;
        lhs(20,27)=0;
        lhs(21,0)=penalty_parameter*(clhs49*clhs789 + clhs63*clhs790 + clhs69*clhs791);
        lhs(21,1)=penalty_parameter*(clhs49*clhs792 + clhs63*clhs793 + clhs69*clhs794);
        lhs(21,2)=penalty_parameter*(clhs49*clhs795 + clhs63*clhs796 + clhs69*clhs797);
        lhs(21,3)=penalty_parameter*(clhs49*clhs798 + clhs63*clhs799 + clhs69*clhs800);
        lhs(21,4)=penalty_parameter*(clhs49*clhs801 + clhs63*clhs802 + clhs69*clhs803);
        lhs(21,5)=penalty_parameter*(clhs49*clhs804 + clhs63*clhs805 + clhs69*clhs806);
        lhs(21,6)=penalty_parameter*(clhs49*clhs807 + clhs63*clhs808 + clhs69*clhs809);
        lhs(21,7)=penalty_parameter*(clhs49*clhs810 + clhs63*clhs811 + clhs69*clhs812);
        lhs(21,8)=penalty_parameter*(clhs49*clhs813 + clhs63*clhs814 + clhs69*clhs815);
        lhs(21,9)=penalty_parameter*(clhs49*clhs816 + clhs63*clhs817 + clhs69*clhs818);
        lhs(21,10)=penalty_parameter*(clhs49*clhs819 + clhs63*clhs820 + clhs69*clhs821);
        lhs(21,11)=penalty_parameter*(clhs49*clhs822 + clhs63*clhs823 + clhs69*clhs824);
        lhs(21,12)=-clhs276*clhs59 - clhs281*clhs49 - clhs285*clhs65 - clhs290*clhs63 - clhs294*clhs71 - clhs299*clhs69;
        lhs(21,13)=-clhs306*clhs59 - clhs311*clhs49 - clhs315*clhs65 - clhs320*clhs63 - clhs324*clhs71 - clhs329*clhs69;
        lhs(21,14)=-clhs336*clhs59 - clhs341*clhs49 - clhs345*clhs65 - clhs350*clhs63 - clhs354*clhs71 - clhs359*clhs69;
        lhs(21,15)=-clhs366*clhs59 - clhs371*clhs49 - clhs375*clhs65 - clhs380*clhs63 - clhs384*clhs71 - clhs389*clhs69;
        lhs(21,16)=-clhs396*clhs59 - clhs401*clhs49 - clhs405*clhs65 - clhs410*clhs63 - clhs414*clhs71 - clhs419*clhs69;
        lhs(21,17)=-clhs426*clhs59 - clhs431*clhs49 - clhs435*clhs65 - clhs440*clhs63 - clhs444*clhs71 - clhs449*clhs69;
        lhs(21,18)=-clhs456*clhs59 - clhs461*clhs49 - clhs465*clhs65 - clhs470*clhs63 - clhs474*clhs71 - clhs479*clhs69;
        lhs(21,19)=-clhs486*clhs59 - clhs49*clhs491 - clhs495*clhs65 - clhs500*clhs63 - clhs504*clhs71 - clhs509*clhs69;
        lhs(21,20)=-clhs49*clhs521 - clhs516*clhs59 - clhs525*clhs65 - clhs530*clhs63 - clhs534*clhs71 - clhs539*clhs69;
        lhs(21,21)=-clhs49*clhs551 - clhs546*clhs59 - clhs555*clhs65 - clhs560*clhs63 - clhs564*clhs71 - clhs569*clhs69;
        lhs(21,22)=-clhs49*clhs581 - clhs576*clhs59 - clhs585*clhs65 - clhs590*clhs63 - clhs594*clhs71 - clhs599*clhs69;
        lhs(21,23)=-clhs49*clhs611 - clhs59*clhs606 - clhs615*clhs65 - clhs620*clhs63 - clhs624*clhs71 - clhs629*clhs69;
        lhs(21,24)=-clhs49*clhs630;
        lhs(21,25)=-clhs63*clhs631;
        lhs(21,26)=-clhs632*clhs69;
        lhs(21,27)=0;
        lhs(22,0)=penalty_parameter*(clhs49*clhs825 + clhs63*clhs826 + clhs69*clhs827);
        lhs(22,1)=penalty_parameter*(clhs49*clhs828 + clhs63*clhs829 + clhs69*clhs830);
        lhs(22,2)=penalty_parameter*(clhs49*clhs831 + clhs63*clhs832 + clhs69*clhs833);
        lhs(22,3)=penalty_parameter*(clhs49*clhs834 + clhs63*clhs835 + clhs69*clhs836);
        lhs(22,4)=penalty_parameter*(clhs49*clhs837 + clhs63*clhs838 + clhs69*clhs839);
        lhs(22,5)=penalty_parameter*(clhs49*clhs840 + clhs63*clhs841 + clhs69*clhs842);
        lhs(22,6)=penalty_parameter*(clhs49*clhs843 + clhs63*clhs844 + clhs69*clhs845);
        lhs(22,7)=penalty_parameter*(clhs49*clhs846 + clhs63*clhs847 + clhs69*clhs848);
        lhs(22,8)=penalty_parameter*(clhs49*clhs849 + clhs63*clhs850 + clhs69*clhs851);
        lhs(22,9)=penalty_parameter*(clhs49*clhs852 + clhs63*clhs853 + clhs69*clhs854);
        lhs(22,10)=penalty_parameter*(clhs49*clhs855 + clhs63*clhs856 + clhs69*clhs857);
        lhs(22,11)=penalty_parameter*(clhs49*clhs858 + clhs63*clhs859 + clhs69*clhs860);
        lhs(22,12)=-clhs276*clhs636 - clhs285*clhs637 - clhs294*clhs638 - clhs49*clhs672 - clhs63*clhs673 - clhs674*clhs69;
        lhs(22,13)=-clhs306*clhs636 - clhs315*clhs637 - clhs324*clhs638 - clhs49*clhs675 - clhs63*clhs676 - clhs677*clhs69;
        lhs(22,14)=-clhs336*clhs636 - clhs345*clhs637 - clhs354*clhs638 - clhs49*clhs678 - clhs63*clhs679 - clhs680*clhs69;
        lhs(22,15)=-clhs366*clhs636 - clhs375*clhs637 - clhs384*clhs638 - clhs49*clhs681 - clhs63*clhs682 - clhs683*clhs69;
        lhs(22,16)=-clhs396*clhs636 - clhs405*clhs637 - clhs414*clhs638 - clhs49*clhs684 - clhs63*clhs685 - clhs686*clhs69;
        lhs(22,17)=-clhs426*clhs636 - clhs435*clhs637 - clhs444*clhs638 - clhs49*clhs687 - clhs63*clhs688 - clhs689*clhs69;
        lhs(22,18)=-clhs456*clhs636 - clhs465*clhs637 - clhs474*clhs638 - clhs49*clhs690 - clhs63*clhs691 - clhs69*clhs692;
        lhs(22,19)=-clhs486*clhs636 - clhs49*clhs693 - clhs495*clhs637 - clhs504*clhs638 - clhs63*clhs694 - clhs69*clhs695;
        lhs(22,20)=-clhs49*clhs696 - clhs516*clhs636 - clhs525*clhs637 - clhs534*clhs638 - clhs63*clhs697 - clhs69*clhs698;
        lhs(22,21)=-clhs49*clhs699 - clhs546*clhs636 - clhs555*clhs637 - clhs564*clhs638 - clhs63*clhs700 - clhs69*clhs701;
        lhs(22,22)=-clhs49*clhs702 - clhs576*clhs636 - clhs585*clhs637 - clhs594*clhs638 - clhs63*clhs703 - clhs69*clhs704;
        lhs(22,23)=-clhs49*clhs705 - clhs606*clhs636 - clhs615*clhs637 - clhs624*clhs638 - clhs63*clhs706 - clhs69*clhs707;
        lhs(22,24)=-clhs49*clhs708;
        lhs(22,25)=-clhs63*clhs709;
        lhs(22,26)=-clhs69*clhs710;
        lhs(22,27)=0;
        lhs(23,0)=penalty_parameter*(clhs49*clhs861 + clhs63*clhs862 + clhs69*clhs863);
        lhs(23,1)=penalty_parameter*(clhs49*clhs864 + clhs63*clhs865 + clhs69*clhs866);
        lhs(23,2)=penalty_parameter*(clhs49*clhs867 + clhs63*clhs868 + clhs69*clhs869);
        lhs(23,3)=penalty_parameter*(clhs49*clhs870 + clhs63*clhs871 + clhs69*clhs872);
        lhs(23,4)=penalty_parameter*(clhs49*clhs873 + clhs63*clhs874 + clhs69*clhs875);
        lhs(23,5)=penalty_parameter*(clhs49*clhs876 + clhs63*clhs877 + clhs69*clhs878);
        lhs(23,6)=penalty_parameter*(clhs49*clhs879 + clhs63*clhs880 + clhs69*clhs881);
        lhs(23,7)=penalty_parameter*(clhs49*clhs882 + clhs63*clhs883 + clhs69*clhs884);
        lhs(23,8)=penalty_parameter*(clhs49*clhs885 + clhs63*clhs886 + clhs69*clhs887);
        lhs(23,9)=penalty_parameter*(clhs49*clhs888 + clhs63*clhs889 + clhs69*clhs890);
        lhs(23,10)=penalty_parameter*(clhs49*clhs891 + clhs63*clhs892 + clhs69*clhs893);
        lhs(23,11)=penalty_parameter*(clhs49*clhs894 + clhs63*clhs895 + clhs69*clhs896);
        lhs(23,12)=-clhs276*clhs714 - clhs285*clhs715 - clhs294*clhs716 - clhs49*clhs750 - clhs63*clhs751 - clhs69*clhs752;
        lhs(23,13)=-clhs306*clhs714 - clhs315*clhs715 - clhs324*clhs716 - clhs49*clhs753 - clhs63*clhs754 - clhs69*clhs755;
        lhs(23,14)=-clhs336*clhs714 - clhs345*clhs715 - clhs354*clhs716 - clhs49*clhs756 - clhs63*clhs757 - clhs69*clhs758;
        lhs(23,15)=-clhs366*clhs714 - clhs375*clhs715 - clhs384*clhs716 - clhs49*clhs759 - clhs63*clhs760 - clhs69*clhs761;
        lhs(23,16)=-clhs396*clhs714 - clhs405*clhs715 - clhs414*clhs716 - clhs49*clhs762 - clhs63*clhs763 - clhs69*clhs764;
        lhs(23,17)=-clhs426*clhs714 - clhs435*clhs715 - clhs444*clhs716 - clhs49*clhs765 - clhs63*clhs766 - clhs69*clhs767;
        lhs(23,18)=-clhs456*clhs714 - clhs465*clhs715 - clhs474*clhs716 - clhs49*clhs768 - clhs63*clhs769 - clhs69*clhs770;
        lhs(23,19)=-clhs486*clhs714 - clhs49*clhs771 - clhs495*clhs715 - clhs504*clhs716 - clhs63*clhs772 - clhs69*clhs773;
        lhs(23,20)=-clhs49*clhs774 - clhs516*clhs714 - clhs525*clhs715 - clhs534*clhs716 - clhs63*clhs775 - clhs69*clhs776;
        lhs(23,21)=-clhs49*clhs777 - clhs546*clhs714 - clhs555*clhs715 - clhs564*clhs716 - clhs63*clhs778 - clhs69*clhs779;
        lhs(23,22)=-clhs49*clhs780 - clhs576*clhs714 - clhs585*clhs715 - clhs594*clhs716 - clhs63*clhs781 - clhs69*clhs782;
        lhs(23,23)=-clhs49*clhs783 - clhs606*clhs714 - clhs615*clhs715 - clhs624*clhs716 - clhs63*clhs784 - clhs69*clhs785;
        lhs(23,24)=-clhs49*clhs786;
        lhs(23,25)=-clhs63*clhs787;
        lhs(23,26)=-clhs69*clhs788;
        lhs(23,27)=0;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs76*scale_factor;
        lhs(24,2)=clhs94*scale_factor;
        lhs(24,3)=clhs112*scale_factor;
        lhs(24,4)=clhs130*scale_factor;
        lhs(24,5)=clhs148*scale_factor;
        lhs(24,6)=clhs166*scale_factor;
        lhs(24,7)=clhs184*scale_factor;
        lhs(24,8)=clhs202*scale_factor;
        lhs(24,9)=clhs220*scale_factor;
        lhs(24,10)=clhs238*scale_factor;
        lhs(24,11)=clhs256*scale_factor;
        lhs(24,12)=-clhs280*scale_factor;
        lhs(24,13)=-clhs310*scale_factor;
        lhs(24,14)=-clhs340*scale_factor;
        lhs(24,15)=-clhs370*scale_factor;
        lhs(24,16)=-clhs400*scale_factor;
        lhs(24,17)=-clhs430*scale_factor;
        lhs(24,18)=-clhs460*scale_factor;
        lhs(24,19)=-clhs490*scale_factor;
        lhs(24,20)=-clhs520*scale_factor;
        lhs(24,21)=-clhs550*scale_factor;
        lhs(24,22)=-clhs580*scale_factor;
        lhs(24,23)=-clhs610*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs30*scale_factor;
        lhs(25,1)=clhs82*scale_factor;
        lhs(25,2)=clhs100*scale_factor;
        lhs(25,3)=clhs118*scale_factor;
        lhs(25,4)=clhs136*scale_factor;
        lhs(25,5)=clhs154*scale_factor;
        lhs(25,6)=clhs172*scale_factor;
        lhs(25,7)=clhs190*scale_factor;
        lhs(25,8)=clhs208*scale_factor;
        lhs(25,9)=clhs226*scale_factor;
        lhs(25,10)=clhs244*scale_factor;
        lhs(25,11)=clhs262*scale_factor;
        lhs(25,12)=-clhs289*scale_factor;
        lhs(25,13)=-clhs319*scale_factor;
        lhs(25,14)=-clhs349*scale_factor;
        lhs(25,15)=-clhs379*scale_factor;
        lhs(25,16)=-clhs409*scale_factor;
        lhs(25,17)=-clhs439*scale_factor;
        lhs(25,18)=-clhs469*scale_factor;
        lhs(25,19)=-clhs499*scale_factor;
        lhs(25,20)=-clhs529*scale_factor;
        lhs(25,21)=-clhs559*scale_factor;
        lhs(25,22)=-clhs589*scale_factor;
        lhs(25,23)=-clhs619*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs40*scale_factor;
        lhs(26,1)=clhs88*scale_factor;
        lhs(26,2)=clhs106*scale_factor;
        lhs(26,3)=clhs124*scale_factor;
        lhs(26,4)=clhs142*scale_factor;
        lhs(26,5)=clhs160*scale_factor;
        lhs(26,6)=clhs178*scale_factor;
        lhs(26,7)=clhs196*scale_factor;
        lhs(26,8)=clhs214*scale_factor;
        lhs(26,9)=clhs232*scale_factor;
        lhs(26,10)=clhs250*scale_factor;
        lhs(26,11)=clhs268*scale_factor;
        lhs(26,12)=-clhs298*scale_factor;
        lhs(26,13)=-clhs328*scale_factor;
        lhs(26,14)=-clhs358*scale_factor;
        lhs(26,15)=-clhs388*scale_factor;
        lhs(26,16)=-clhs418*scale_factor;
        lhs(26,17)=-clhs448*scale_factor;
        lhs(26,18)=-clhs478*scale_factor;
        lhs(26,19)=-clhs508*scale_factor;
        lhs(26,20)=-clhs538*scale_factor;
        lhs(26,21)=-clhs568*scale_factor;
        lhs(26,22)=-clhs598*scale_factor;
        lhs(26,23)=-clhs628*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=0;
        lhs(27,1)=0;
        lhs(27,2)=0;
        lhs(27,3)=0;
        lhs(27,4)=0;
        lhs(27,5)=0;
        lhs(27,6)=0;
        lhs(27,7)=0;
        lhs(27,8)=0;
        lhs(27,9)=0;
        lhs(27,10)=0;
        lhs(27,11)=0;
        lhs(27,12)=0;
        lhs(27,13)=0;
        lhs(27,14)=0;
        lhs(27,15)=0;
        lhs(27,16)=0;
        lhs(27,17)=0;
        lhs(27,18)=0;
        lhs(27,19)=0;
        lhs(27,20)=0;
        lhs(27,21)=0;
        lhs(27,22)=0;
        lhs(27,23)=0;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    }
    else if (rActiveInactive == 15 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs1 =     X2(0,1) + u2(0,1);
        const double clhs2 =     DeltaMOperator[12](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs3 =     X2(1,1) + u2(1,1);
        const double clhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs5 =     DeltaMOperator[12](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs6 =     X2(2,1) + u2(2,1);
        const double clhs7 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs8 =     DeltaMOperator[12](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs9 =     X2(3,1) + u2(3,1);
        const double clhs10 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs11 =     DeltaMOperator[12](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs12 =     X2(0,2) + u2(0,2);
        const double clhs13 =     X2(1,2) + u2(1,2);
        const double clhs14 =     X2(2,2) + u2(2,2);
        const double clhs15 =     X2(3,2) + u2(3,2);
        const double clhs16 =     X2(0,0) + u2(0,0);
        const double clhs17 =     X2(1,0) + u2(1,0);
        const double clhs18 =     X2(2,0) + u2(2,0);
        const double clhs19 =     X2(3,0) + u2(3,0);
        const double clhs20 =     normalslave(0,0)*(clhs0 + clhs11*clhs19 + clhs16*clhs2 + clhs17*clhs5 + clhs18*clhs8) + normalslave(0,1)*(clhs1*clhs2 + clhs11*clhs9 + clhs3*clhs5 + clhs6*clhs8) + normalslave(0,2)*(clhs11*clhs15 + clhs12*clhs2 + clhs13*clhs5 + clhs14*clhs8);
        const double clhs21 =     clhs20*normalslave(0,0)*penalty_parameter;
        const double clhs22 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs23 =     DeltaMOperator[12](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs24 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs25 =     DeltaMOperator[12](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs26 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs27 =     DeltaMOperator[12](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs28 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs29 =     DeltaMOperator[12](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs30 =     normalslave(1,0)*(clhs16*clhs23 + clhs17*clhs25 + clhs18*clhs27 + clhs19*clhs29 + clhs22) + normalslave(1,1)*(clhs1*clhs23 + clhs25*clhs3 + clhs27*clhs6 + clhs29*clhs9) + normalslave(1,2)*(clhs12*clhs23 + clhs13*clhs25 + clhs14*clhs27 + clhs15*clhs29);
        const double clhs31 =     clhs30*normalslave(1,0)*penalty_parameter;
        const double clhs32 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs33 =     DeltaMOperator[12](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs34 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs35 =     DeltaMOperator[12](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs36 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs37 =     DeltaMOperator[12](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs38 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs39 =     DeltaMOperator[12](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs40 =     normalslave(2,0)*(clhs16*clhs33 + clhs17*clhs35 + clhs18*clhs37 + clhs19*clhs39 + clhs32) + normalslave(2,1)*(clhs1*clhs33 + clhs3*clhs35 + clhs37*clhs6 + clhs39*clhs9) + normalslave(2,2)*(clhs12*clhs33 + clhs13*clhs35 + clhs14*clhs37 + clhs15*clhs39);
        const double clhs41 =     clhs40*normalslave(2,0)*penalty_parameter;
        const double clhs42 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs43 =     DeltaMOperator[12](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs44 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs45 =     DeltaMOperator[12](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs46 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs47 =     DeltaMOperator[12](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs48 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double clhs49 =     DeltaMOperator[12](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,0))
        const double clhs50 =     normalslave(3,0)*(clhs16*clhs43 + clhs17*clhs45 + clhs18*clhs47 + clhs19*clhs49 + clhs42) + normalslave(3,1)*(clhs1*clhs43 + clhs3*clhs45 + clhs47*clhs6 + clhs49*clhs9) + normalslave(3,2)*(clhs12*clhs43 + clhs13*clhs45 + clhs14*clhs47 + clhs15*clhs49);
        const double clhs51 =     clhs50*normalslave(3,0)*penalty_parameter;
        const double clhs52 =     X1(0,0) + u1(0,0);
        const double clhs53 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs54 =     X1(1,0) + u1(1,0);
        const double clhs55 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs56 =     X1(2,0) + u1(2,0);
        const double clhs57 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs58 =     X1(3,0) + u1(3,0);
        const double clhs59 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs60 =     X1(0,1) + u1(0,1);
        const double clhs61 =     X1(1,1) + u1(1,1);
        const double clhs62 =     X1(2,1) + u1(2,1);
        const double clhs63 =     X1(3,1) + u1(3,1);
        const double clhs64 =     X1(0,2) + u1(0,2);
        const double clhs65 =     X1(1,2) + u1(1,2);
        const double clhs66 =     X1(2,2) + u1(2,2);
        const double clhs67 =     X1(3,2) + u1(3,2);
        const double clhs68 =     lmnormal[0]*scale_factor + penalty_parameter*(normalslave(0,0)*(-clhs0*clhs16 - clhs10*clhs19 - clhs17*clhs4 - clhs18*clhs7 + clhs52*clhs53 + clhs54*clhs55 + clhs56*clhs57 + clhs58*clhs59) + normalslave(0,1)*(-clhs0*clhs1 - clhs10*clhs9 - clhs3*clhs4 + clhs53*clhs60 + clhs55*clhs61 + clhs57*clhs62 + clhs59*clhs63 - clhs6*clhs7) + normalslave(0,2)*(-clhs0*clhs12 - clhs10*clhs15 - clhs13*clhs4 - clhs14*clhs7 + clhs53*clhs64 + clhs55*clhs65 + clhs57*clhs66 + clhs59*clhs67));
        const double clhs69 =     clhs68*normalslave(0,0);
        const double clhs70 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs71 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs72 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs73 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs74 =     lmnormal[1]*scale_factor + penalty_parameter*(normalslave(1,0)*(-clhs16*clhs22 - clhs17*clhs24 - clhs18*clhs26 - clhs19*clhs28 + clhs52*clhs70 + clhs54*clhs71 + clhs56*clhs72 + clhs58*clhs73) + normalslave(1,1)*(-clhs1*clhs22 - clhs24*clhs3 - clhs26*clhs6 - clhs28*clhs9 + clhs60*clhs70 + clhs61*clhs71 + clhs62*clhs72 + clhs63*clhs73) + normalslave(1,2)*(-clhs12*clhs22 - clhs13*clhs24 - clhs14*clhs26 - clhs15*clhs28 + clhs64*clhs70 + clhs65*clhs71 + clhs66*clhs72 + clhs67*clhs73));
        const double clhs75 =     clhs74*normalslave(1,0);
        const double clhs76 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs77 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs78 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs79 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs80 =     lmnormal[2]*scale_factor + penalty_parameter*(normalslave(2,0)*(-clhs16*clhs32 - clhs17*clhs34 - clhs18*clhs36 - clhs19*clhs38 + clhs52*clhs76 + clhs54*clhs77 + clhs56*clhs78 + clhs58*clhs79) + normalslave(2,1)*(-clhs1*clhs32 - clhs3*clhs34 - clhs36*clhs6 - clhs38*clhs9 + clhs60*clhs76 + clhs61*clhs77 + clhs62*clhs78 + clhs63*clhs79) + normalslave(2,2)*(-clhs12*clhs32 - clhs13*clhs34 - clhs14*clhs36 - clhs15*clhs38 + clhs64*clhs76 + clhs65*clhs77 + clhs66*clhs78 + clhs67*clhs79));
        const double clhs81 =     clhs80*normalslave(2,0);
        const double clhs82 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs83 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs84 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs85 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double clhs86 =     lmnormal[3]*scale_factor + penalty_parameter*(normalslave(3,0)*(-clhs16*clhs42 - clhs17*clhs44 - clhs18*clhs46 - clhs19*clhs48 + clhs52*clhs82 + clhs54*clhs83 + clhs56*clhs84 + clhs58*clhs85) + normalslave(3,1)*(-clhs1*clhs42 - clhs3*clhs44 - clhs46*clhs6 - clhs48*clhs9 + clhs60*clhs82 + clhs61*clhs83 + clhs62*clhs84 + clhs63*clhs85) + normalslave(3,2)*(-clhs12*clhs42 - clhs13*clhs44 - clhs14*clhs46 - clhs15*clhs48 + clhs64*clhs82 + clhs65*clhs83 + clhs66*clhs84 + clhs67*clhs85));
        const double clhs87 =     clhs86*normalslave(3,0);
        const double clhs88 =     DeltaMOperator[13](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs89 =     DeltaMOperator[13](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs90 =     DeltaMOperator[13](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs91 =     DeltaMOperator[13](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs92 =     normalslave(0,0)*(clhs16*clhs88 + clhs17*clhs89 + clhs18*clhs90 + clhs19*clhs91) + normalslave(0,1)*(clhs0 + clhs1*clhs88 + clhs3*clhs89 + clhs6*clhs90 + clhs9*clhs91) + normalslave(0,2)*(clhs12*clhs88 + clhs13*clhs89 + clhs14*clhs90 + clhs15*clhs91);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[13](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs95 =     DeltaMOperator[13](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs96 =     DeltaMOperator[13](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs97 =     DeltaMOperator[13](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs98 =     normalslave(1,0)*(clhs16*clhs94 + clhs17*clhs95 + clhs18*clhs96 + clhs19*clhs97) + normalslave(1,1)*(clhs1*clhs94 + clhs22 + clhs3*clhs95 + clhs6*clhs96 + clhs9*clhs97) + normalslave(1,2)*(clhs12*clhs94 + clhs13*clhs95 + clhs14*clhs96 + clhs15*clhs97);
        const double clhs99 =     clhs98*normalslave(1,0)*penalty_parameter;
        const double clhs100 =     DeltaMOperator[13](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs101 =     DeltaMOperator[13](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs102 =     DeltaMOperator[13](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs103 =     DeltaMOperator[13](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs104 =     normalslave(2,0)*(clhs100*clhs16 + clhs101*clhs17 + clhs102*clhs18 + clhs103*clhs19) + normalslave(2,1)*(clhs1*clhs100 + clhs101*clhs3 + clhs102*clhs6 + clhs103*clhs9 + clhs32) + normalslave(2,2)*(clhs100*clhs12 + clhs101*clhs13 + clhs102*clhs14 + clhs103*clhs15);
        const double clhs105 =     clhs104*normalslave(2,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[13](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs107 =     DeltaMOperator[13](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs108 =     DeltaMOperator[13](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs109 =     DeltaMOperator[13](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,1))
        const double clhs110 =     normalslave(3,0)*(clhs106*clhs16 + clhs107*clhs17 + clhs108*clhs18 + clhs109*clhs19) + normalslave(3,1)*(clhs1*clhs106 + clhs107*clhs3 + clhs108*clhs6 + clhs109*clhs9 + clhs42) + normalslave(3,2)*(clhs106*clhs12 + clhs107*clhs13 + clhs108*clhs14 + clhs109*clhs15);
        const double clhs111 =     clhs110*normalslave(3,0)*penalty_parameter;
        const double clhs112 =     DeltaMOperator[14](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs113 =     DeltaMOperator[14](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs114 =     DeltaMOperator[14](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs115 =     DeltaMOperator[14](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs116 =     normalslave(0,0)*(clhs112*clhs16 + clhs113*clhs17 + clhs114*clhs18 + clhs115*clhs19) + normalslave(0,1)*(clhs1*clhs112 + clhs113*clhs3 + clhs114*clhs6 + clhs115*clhs9) + normalslave(0,2)*(clhs0 + clhs112*clhs12 + clhs113*clhs13 + clhs114*clhs14 + clhs115*clhs15);
        const double clhs117 =     clhs116*normalslave(0,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[14](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs119 =     DeltaMOperator[14](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs120 =     DeltaMOperator[14](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs121 =     DeltaMOperator[14](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs122 =     normalslave(1,0)*(clhs118*clhs16 + clhs119*clhs17 + clhs120*clhs18 + clhs121*clhs19) + normalslave(1,1)*(clhs1*clhs118 + clhs119*clhs3 + clhs120*clhs6 + clhs121*clhs9) + normalslave(1,2)*(clhs118*clhs12 + clhs119*clhs13 + clhs120*clhs14 + clhs121*clhs15 + clhs22);
        const double clhs123 =     clhs122*normalslave(1,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[14](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs125 =     DeltaMOperator[14](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs126 =     DeltaMOperator[14](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs127 =     DeltaMOperator[14](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs128 =     normalslave(2,0)*(clhs124*clhs16 + clhs125*clhs17 + clhs126*clhs18 + clhs127*clhs19) + normalslave(2,1)*(clhs1*clhs124 + clhs125*clhs3 + clhs126*clhs6 + clhs127*clhs9) + normalslave(2,2)*(clhs12*clhs124 + clhs125*clhs13 + clhs126*clhs14 + clhs127*clhs15 + clhs32);
        const double clhs129 =     clhs128*normalslave(2,0)*penalty_parameter;
        const double clhs130 =     DeltaMOperator[14](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs131 =     DeltaMOperator[14](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs132 =     DeltaMOperator[14](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs133 =     DeltaMOperator[14](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(0,2))
        const double clhs134 =     normalslave(3,0)*(clhs130*clhs16 + clhs131*clhs17 + clhs132*clhs18 + clhs133*clhs19) + normalslave(3,1)*(clhs1*clhs130 + clhs131*clhs3 + clhs132*clhs6 + clhs133*clhs9) + normalslave(3,2)*(clhs12*clhs130 + clhs13*clhs131 + clhs132*clhs14 + clhs133*clhs15 + clhs42);
        const double clhs135 =     clhs134*normalslave(3,0)*penalty_parameter;
        const double clhs136 =     DeltaMOperator[15](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs137 =     DeltaMOperator[15](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs138 =     DeltaMOperator[15](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs139 =     DeltaMOperator[15](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs140 =     normalslave(0,0)*(clhs136*clhs16 + clhs137*clhs17 + clhs138*clhs18 + clhs139*clhs19 + clhs4) + normalslave(0,1)*(clhs1*clhs136 + clhs137*clhs3 + clhs138*clhs6 + clhs139*clhs9) + normalslave(0,2)*(clhs12*clhs136 + clhs13*clhs137 + clhs138*clhs14 + clhs139*clhs15);
        const double clhs141 =     clhs140*normalslave(0,0)*penalty_parameter;
        const double clhs142 =     DeltaMOperator[15](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs143 =     DeltaMOperator[15](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs144 =     DeltaMOperator[15](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs145 =     DeltaMOperator[15](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs146 =     normalslave(1,0)*(clhs142*clhs16 + clhs143*clhs17 + clhs144*clhs18 + clhs145*clhs19 + clhs24) + normalslave(1,1)*(clhs1*clhs142 + clhs143*clhs3 + clhs144*clhs6 + clhs145*clhs9) + normalslave(1,2)*(clhs12*clhs142 + clhs13*clhs143 + clhs14*clhs144 + clhs145*clhs15);
        const double clhs147 =     clhs146*normalslave(1,0)*penalty_parameter;
        const double clhs148 =     DeltaMOperator[15](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs149 =     DeltaMOperator[15](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs150 =     DeltaMOperator[15](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs151 =     DeltaMOperator[15](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs152 =     normalslave(2,0)*(clhs148*clhs16 + clhs149*clhs17 + clhs150*clhs18 + clhs151*clhs19 + clhs34) + normalslave(2,1)*(clhs1*clhs148 + clhs149*clhs3 + clhs150*clhs6 + clhs151*clhs9) + normalslave(2,2)*(clhs12*clhs148 + clhs13*clhs149 + clhs14*clhs150 + clhs15*clhs151);
        const double clhs153 =     clhs152*normalslave(2,0)*penalty_parameter;
        const double clhs154 =     DeltaMOperator[15](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs155 =     DeltaMOperator[15](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs156 =     DeltaMOperator[15](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs157 =     DeltaMOperator[15](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,0))
        const double clhs158 =     normalslave(3,0)*(clhs154*clhs16 + clhs155*clhs17 + clhs156*clhs18 + clhs157*clhs19 + clhs44) + normalslave(3,1)*(clhs1*clhs154 + clhs155*clhs3 + clhs156*clhs6 + clhs157*clhs9) + normalslave(3,2)*(clhs12*clhs154 + clhs13*clhs155 + clhs14*clhs156 + clhs15*clhs157);
        const double clhs159 =     clhs158*normalslave(3,0)*penalty_parameter;
        const double clhs160 =     DeltaMOperator[16](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs161 =     DeltaMOperator[16](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs162 =     DeltaMOperator[16](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs163 =     DeltaMOperator[16](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs164 =     normalslave(0,0)*(clhs16*clhs160 + clhs161*clhs17 + clhs162*clhs18 + clhs163*clhs19) + normalslave(0,1)*(clhs1*clhs160 + clhs161*clhs3 + clhs162*clhs6 + clhs163*clhs9 + clhs4) + normalslave(0,2)*(clhs12*clhs160 + clhs13*clhs161 + clhs14*clhs162 + clhs15*clhs163);
        const double clhs165 =     clhs164*normalslave(0,0)*penalty_parameter;
        const double clhs166 =     DeltaMOperator[16](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs167 =     DeltaMOperator[16](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs168 =     DeltaMOperator[16](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs169 =     DeltaMOperator[16](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs170 =     normalslave(1,0)*(clhs16*clhs166 + clhs167*clhs17 + clhs168*clhs18 + clhs169*clhs19) + normalslave(1,1)*(clhs1*clhs166 + clhs167*clhs3 + clhs168*clhs6 + clhs169*clhs9 + clhs24) + normalslave(1,2)*(clhs12*clhs166 + clhs13*clhs167 + clhs14*clhs168 + clhs15*clhs169);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[16](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs173 =     DeltaMOperator[16](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs174 =     DeltaMOperator[16](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs175 =     DeltaMOperator[16](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs176 =     normalslave(2,0)*(clhs16*clhs172 + clhs17*clhs173 + clhs174*clhs18 + clhs175*clhs19) + normalslave(2,1)*(clhs1*clhs172 + clhs173*clhs3 + clhs174*clhs6 + clhs175*clhs9 + clhs34) + normalslave(2,2)*(clhs12*clhs172 + clhs13*clhs173 + clhs14*clhs174 + clhs15*clhs175);
        const double clhs177 =     clhs176*normalslave(2,0)*penalty_parameter;
        const double clhs178 =     DeltaMOperator[16](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs179 =     DeltaMOperator[16](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs180 =     DeltaMOperator[16](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs181 =     DeltaMOperator[16](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,1))
        const double clhs182 =     normalslave(3,0)*(clhs16*clhs178 + clhs17*clhs179 + clhs18*clhs180 + clhs181*clhs19) + normalslave(3,1)*(clhs1*clhs178 + clhs179*clhs3 + clhs180*clhs6 + clhs181*clhs9 + clhs44) + normalslave(3,2)*(clhs12*clhs178 + clhs13*clhs179 + clhs14*clhs180 + clhs15*clhs181);
        const double clhs183 =     clhs182*normalslave(3,0)*penalty_parameter;
        const double clhs184 =     DeltaMOperator[17](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs185 =     DeltaMOperator[17](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs186 =     DeltaMOperator[17](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs187 =     DeltaMOperator[17](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs188 =     normalslave(0,0)*(clhs16*clhs184 + clhs17*clhs185 + clhs18*clhs186 + clhs187*clhs19) + normalslave(0,1)*(clhs1*clhs184 + clhs185*clhs3 + clhs186*clhs6 + clhs187*clhs9) + normalslave(0,2)*(clhs12*clhs184 + clhs13*clhs185 + clhs14*clhs186 + clhs15*clhs187 + clhs4);
        const double clhs189 =     clhs188*normalslave(0,0)*penalty_parameter;
        const double clhs190 =     DeltaMOperator[17](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs191 =     DeltaMOperator[17](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs192 =     DeltaMOperator[17](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs193 =     DeltaMOperator[17](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs194 =     normalslave(1,0)*(clhs16*clhs190 + clhs17*clhs191 + clhs18*clhs192 + clhs19*clhs193) + normalslave(1,1)*(clhs1*clhs190 + clhs191*clhs3 + clhs192*clhs6 + clhs193*clhs9) + normalslave(1,2)*(clhs12*clhs190 + clhs13*clhs191 + clhs14*clhs192 + clhs15*clhs193 + clhs24);
        const double clhs195 =     clhs194*normalslave(1,0)*penalty_parameter;
        const double clhs196 =     DeltaMOperator[17](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs197 =     DeltaMOperator[17](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs198 =     DeltaMOperator[17](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs199 =     DeltaMOperator[17](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs200 =     normalslave(2,0)*(clhs16*clhs196 + clhs17*clhs197 + clhs18*clhs198 + clhs19*clhs199) + normalslave(2,1)*(clhs1*clhs196 + clhs197*clhs3 + clhs198*clhs6 + clhs199*clhs9) + normalslave(2,2)*(clhs12*clhs196 + clhs13*clhs197 + clhs14*clhs198 + clhs15*clhs199 + clhs34);
        const double clhs201 =     clhs200*normalslave(2,0)*penalty_parameter;
        const double clhs202 =     DeltaMOperator[17](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs203 =     DeltaMOperator[17](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs204 =     DeltaMOperator[17](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs205 =     DeltaMOperator[17](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(1,2))
        const double clhs206 =     normalslave(3,0)*(clhs16*clhs202 + clhs17*clhs203 + clhs18*clhs204 + clhs19*clhs205) + normalslave(3,1)*(clhs1*clhs202 + clhs203*clhs3 + clhs204*clhs6 + clhs205*clhs9) + normalslave(3,2)*(clhs12*clhs202 + clhs13*clhs203 + clhs14*clhs204 + clhs15*clhs205 + clhs44);
        const double clhs207 =     clhs206*normalslave(3,0)*penalty_parameter;
        const double clhs208 =     DeltaMOperator[18](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs209 =     DeltaMOperator[18](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs210 =     DeltaMOperator[18](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs211 =     DeltaMOperator[18](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs212 =     normalslave(0,0)*(clhs16*clhs208 + clhs17*clhs209 + clhs18*clhs210 + clhs19*clhs211 + clhs7) + normalslave(0,1)*(clhs1*clhs208 + clhs209*clhs3 + clhs210*clhs6 + clhs211*clhs9) + normalslave(0,2)*(clhs12*clhs208 + clhs13*clhs209 + clhs14*clhs210 + clhs15*clhs211);
        const double clhs213 =     clhs212*normalslave(0,0)*penalty_parameter;
        const double clhs214 =     DeltaMOperator[18](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs215 =     DeltaMOperator[18](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs216 =     DeltaMOperator[18](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs217 =     DeltaMOperator[18](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs218 =     normalslave(1,0)*(clhs16*clhs214 + clhs17*clhs215 + clhs18*clhs216 + clhs19*clhs217 + clhs26) + normalslave(1,1)*(clhs1*clhs214 + clhs215*clhs3 + clhs216*clhs6 + clhs217*clhs9) + normalslave(1,2)*(clhs12*clhs214 + clhs13*clhs215 + clhs14*clhs216 + clhs15*clhs217);
        const double clhs219 =     clhs218*normalslave(1,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[18](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs221 =     DeltaMOperator[18](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs222 =     DeltaMOperator[18](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs223 =     DeltaMOperator[18](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs224 =     normalslave(2,0)*(clhs16*clhs220 + clhs17*clhs221 + clhs18*clhs222 + clhs19*clhs223 + clhs36) + normalslave(2,1)*(clhs1*clhs220 + clhs221*clhs3 + clhs222*clhs6 + clhs223*clhs9) + normalslave(2,2)*(clhs12*clhs220 + clhs13*clhs221 + clhs14*clhs222 + clhs15*clhs223);
        const double clhs225 =     clhs224*normalslave(2,0)*penalty_parameter;
        const double clhs226 =     DeltaMOperator[18](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs227 =     DeltaMOperator[18](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs228 =     DeltaMOperator[18](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs229 =     DeltaMOperator[18](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,0))
        const double clhs230 =     normalslave(3,0)*(clhs16*clhs226 + clhs17*clhs227 + clhs18*clhs228 + clhs19*clhs229 + clhs46) + normalslave(3,1)*(clhs1*clhs226 + clhs227*clhs3 + clhs228*clhs6 + clhs229*clhs9) + normalslave(3,2)*(clhs12*clhs226 + clhs13*clhs227 + clhs14*clhs228 + clhs15*clhs229);
        const double clhs231 =     clhs230*normalslave(3,0)*penalty_parameter;
        const double clhs232 =     DeltaMOperator[19](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs233 =     DeltaMOperator[19](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs234 =     DeltaMOperator[19](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs235 =     DeltaMOperator[19](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs236 =     normalslave(0,0)*(clhs16*clhs232 + clhs17*clhs233 + clhs18*clhs234 + clhs19*clhs235) + normalslave(0,1)*(clhs1*clhs232 + clhs233*clhs3 + clhs234*clhs6 + clhs235*clhs9 + clhs7) + normalslave(0,2)*(clhs12*clhs232 + clhs13*clhs233 + clhs14*clhs234 + clhs15*clhs235);
        const double clhs237 =     clhs236*normalslave(0,0)*penalty_parameter;
        const double clhs238 =     DeltaMOperator[19](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs239 =     DeltaMOperator[19](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs240 =     DeltaMOperator[19](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs241 =     DeltaMOperator[19](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs242 =     normalslave(1,0)*(clhs16*clhs238 + clhs17*clhs239 + clhs18*clhs240 + clhs19*clhs241) + normalslave(1,1)*(clhs1*clhs238 + clhs239*clhs3 + clhs240*clhs6 + clhs241*clhs9 + clhs26) + normalslave(1,2)*(clhs12*clhs238 + clhs13*clhs239 + clhs14*clhs240 + clhs15*clhs241);
        const double clhs243 =     clhs242*normalslave(1,0)*penalty_parameter;
        const double clhs244 =     DeltaMOperator[19](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs245 =     DeltaMOperator[19](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs246 =     DeltaMOperator[19](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs247 =     DeltaMOperator[19](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs248 =     normalslave(2,0)*(clhs16*clhs244 + clhs17*clhs245 + clhs18*clhs246 + clhs19*clhs247) + normalslave(2,1)*(clhs1*clhs244 + clhs245*clhs3 + clhs246*clhs6 + clhs247*clhs9 + clhs36) + normalslave(2,2)*(clhs12*clhs244 + clhs13*clhs245 + clhs14*clhs246 + clhs15*clhs247);
        const double clhs249 =     clhs248*normalslave(2,0)*penalty_parameter;
        const double clhs250 =     DeltaMOperator[19](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs251 =     DeltaMOperator[19](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs252 =     DeltaMOperator[19](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs253 =     DeltaMOperator[19](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,1))
        const double clhs254 =     normalslave(3,0)*(clhs16*clhs250 + clhs17*clhs251 + clhs18*clhs252 + clhs19*clhs253) + normalslave(3,1)*(clhs1*clhs250 + clhs251*clhs3 + clhs252*clhs6 + clhs253*clhs9 + clhs46) + normalslave(3,2)*(clhs12*clhs250 + clhs13*clhs251 + clhs14*clhs252 + clhs15*clhs253);
        const double clhs255 =     clhs254*normalslave(3,0)*penalty_parameter;
        const double clhs256 =     DeltaMOperator[20](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs257 =     DeltaMOperator[20](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs258 =     DeltaMOperator[20](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs259 =     DeltaMOperator[20](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs260 =     normalslave(0,0)*(clhs16*clhs256 + clhs17*clhs257 + clhs18*clhs258 + clhs19*clhs259) + normalslave(0,1)*(clhs1*clhs256 + clhs257*clhs3 + clhs258*clhs6 + clhs259*clhs9) + normalslave(0,2)*(clhs12*clhs256 + clhs13*clhs257 + clhs14*clhs258 + clhs15*clhs259 + clhs7);
        const double clhs261 =     clhs260*normalslave(0,0)*penalty_parameter;
        const double clhs262 =     DeltaMOperator[20](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs263 =     DeltaMOperator[20](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs264 =     DeltaMOperator[20](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs265 =     DeltaMOperator[20](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs266 =     normalslave(1,0)*(clhs16*clhs262 + clhs17*clhs263 + clhs18*clhs264 + clhs19*clhs265) + normalslave(1,1)*(clhs1*clhs262 + clhs263*clhs3 + clhs264*clhs6 + clhs265*clhs9) + normalslave(1,2)*(clhs12*clhs262 + clhs13*clhs263 + clhs14*clhs264 + clhs15*clhs265 + clhs26);
        const double clhs267 =     clhs266*normalslave(1,0)*penalty_parameter;
        const double clhs268 =     DeltaMOperator[20](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs269 =     DeltaMOperator[20](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs270 =     DeltaMOperator[20](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs271 =     DeltaMOperator[20](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs272 =     normalslave(2,0)*(clhs16*clhs268 + clhs17*clhs269 + clhs18*clhs270 + clhs19*clhs271) + normalslave(2,1)*(clhs1*clhs268 + clhs269*clhs3 + clhs270*clhs6 + clhs271*clhs9) + normalslave(2,2)*(clhs12*clhs268 + clhs13*clhs269 + clhs14*clhs270 + clhs15*clhs271 + clhs36);
        const double clhs273 =     clhs272*normalslave(2,0)*penalty_parameter;
        const double clhs274 =     DeltaMOperator[20](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs275 =     DeltaMOperator[20](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs276 =     DeltaMOperator[20](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs277 =     DeltaMOperator[20](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(2,2))
        const double clhs278 =     normalslave(3,0)*(clhs16*clhs274 + clhs17*clhs275 + clhs18*clhs276 + clhs19*clhs277) + normalslave(3,1)*(clhs1*clhs274 + clhs275*clhs3 + clhs276*clhs6 + clhs277*clhs9) + normalslave(3,2)*(clhs12*clhs274 + clhs13*clhs275 + clhs14*clhs276 + clhs15*clhs277 + clhs46);
        const double clhs279 =     clhs278*normalslave(3,0)*penalty_parameter;
        const double clhs280 =     DeltaMOperator[21](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs281 =     DeltaMOperator[21](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs282 =     DeltaMOperator[21](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs283 =     DeltaMOperator[21](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs284 =     normalslave(0,0)*(clhs10 + clhs16*clhs280 + clhs17*clhs281 + clhs18*clhs282 + clhs19*clhs283) + normalslave(0,1)*(clhs1*clhs280 + clhs281*clhs3 + clhs282*clhs6 + clhs283*clhs9) + normalslave(0,2)*(clhs12*clhs280 + clhs13*clhs281 + clhs14*clhs282 + clhs15*clhs283);
        const double clhs285 =     clhs284*normalslave(0,0)*penalty_parameter;
        const double clhs286 =     DeltaMOperator[21](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs287 =     DeltaMOperator[21](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs288 =     DeltaMOperator[21](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs289 =     DeltaMOperator[21](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs290 =     normalslave(1,0)*(clhs16*clhs286 + clhs17*clhs287 + clhs18*clhs288 + clhs19*clhs289 + clhs28) + normalslave(1,1)*(clhs1*clhs286 + clhs287*clhs3 + clhs288*clhs6 + clhs289*clhs9) + normalslave(1,2)*(clhs12*clhs286 + clhs13*clhs287 + clhs14*clhs288 + clhs15*clhs289);
        const double clhs291 =     clhs290*normalslave(1,0)*penalty_parameter;
        const double clhs292 =     DeltaMOperator[21](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs293 =     DeltaMOperator[21](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs294 =     DeltaMOperator[21](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs295 =     DeltaMOperator[21](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs296 =     normalslave(2,0)*(clhs16*clhs292 + clhs17*clhs293 + clhs18*clhs294 + clhs19*clhs295 + clhs38) + normalslave(2,1)*(clhs1*clhs292 + clhs293*clhs3 + clhs294*clhs6 + clhs295*clhs9) + normalslave(2,2)*(clhs12*clhs292 + clhs13*clhs293 + clhs14*clhs294 + clhs15*clhs295);
        const double clhs297 =     clhs296*normalslave(2,0)*penalty_parameter;
        const double clhs298 =     DeltaMOperator[21](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs299 =     DeltaMOperator[21](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs300 =     DeltaMOperator[21](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs301 =     DeltaMOperator[21](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,0))
        const double clhs302 =     normalslave(3,0)*(clhs16*clhs298 + clhs17*clhs299 + clhs18*clhs300 + clhs19*clhs301 + clhs48) + normalslave(3,1)*(clhs1*clhs298 + clhs299*clhs3 + clhs300*clhs6 + clhs301*clhs9) + normalslave(3,2)*(clhs12*clhs298 + clhs13*clhs299 + clhs14*clhs300 + clhs15*clhs301);
        const double clhs303 =     clhs302*normalslave(3,0)*penalty_parameter;
        const double clhs304 =     DeltaMOperator[22](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs305 =     DeltaMOperator[22](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs306 =     DeltaMOperator[22](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs307 =     DeltaMOperator[22](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs308 =     normalslave(0,0)*(clhs16*clhs304 + clhs17*clhs305 + clhs18*clhs306 + clhs19*clhs307) + normalslave(0,1)*(clhs1*clhs304 + clhs10 + clhs3*clhs305 + clhs306*clhs6 + clhs307*clhs9) + normalslave(0,2)*(clhs12*clhs304 + clhs13*clhs305 + clhs14*clhs306 + clhs15*clhs307);
        const double clhs309 =     clhs308*normalslave(0,0)*penalty_parameter;
        const double clhs310 =     DeltaMOperator[22](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs311 =     DeltaMOperator[22](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs312 =     DeltaMOperator[22](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs313 =     DeltaMOperator[22](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs314 =     normalslave(1,0)*(clhs16*clhs310 + clhs17*clhs311 + clhs18*clhs312 + clhs19*clhs313) + normalslave(1,1)*(clhs1*clhs310 + clhs28 + clhs3*clhs311 + clhs312*clhs6 + clhs313*clhs9) + normalslave(1,2)*(clhs12*clhs310 + clhs13*clhs311 + clhs14*clhs312 + clhs15*clhs313);
        const double clhs315 =     clhs314*normalslave(1,0)*penalty_parameter;
        const double clhs316 =     DeltaMOperator[22](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs317 =     DeltaMOperator[22](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs318 =     DeltaMOperator[22](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs319 =     DeltaMOperator[22](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs320 =     normalslave(2,0)*(clhs16*clhs316 + clhs17*clhs317 + clhs18*clhs318 + clhs19*clhs319) + normalslave(2,1)*(clhs1*clhs316 + clhs3*clhs317 + clhs318*clhs6 + clhs319*clhs9 + clhs38) + normalslave(2,2)*(clhs12*clhs316 + clhs13*clhs317 + clhs14*clhs318 + clhs15*clhs319);
        const double clhs321 =     clhs320*normalslave(2,0)*penalty_parameter;
        const double clhs322 =     DeltaMOperator[22](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs323 =     DeltaMOperator[22](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs324 =     DeltaMOperator[22](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs325 =     DeltaMOperator[22](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,1))
        const double clhs326 =     normalslave(3,0)*(clhs16*clhs322 + clhs17*clhs323 + clhs18*clhs324 + clhs19*clhs325) + normalslave(3,1)*(clhs1*clhs322 + clhs3*clhs323 + clhs324*clhs6 + clhs325*clhs9 + clhs48) + normalslave(3,2)*(clhs12*clhs322 + clhs13*clhs323 + clhs14*clhs324 + clhs15*clhs325);
        const double clhs327 =     clhs326*normalslave(3,0)*penalty_parameter;
        const double clhs328 =     DeltaMOperator[23](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs329 =     DeltaMOperator[23](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs330 =     DeltaMOperator[23](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs331 =     DeltaMOperator[23](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs332 =     normalslave(0,0)*(clhs16*clhs328 + clhs17*clhs329 + clhs18*clhs330 + clhs19*clhs331) + normalslave(0,1)*(clhs1*clhs328 + clhs3*clhs329 + clhs330*clhs6 + clhs331*clhs9) + normalslave(0,2)*(clhs10 + clhs12*clhs328 + clhs13*clhs329 + clhs14*clhs330 + clhs15*clhs331);
        const double clhs333 =     clhs332*normalslave(0,0)*penalty_parameter;
        const double clhs334 =     DeltaMOperator[23](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs335 =     DeltaMOperator[23](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs336 =     DeltaMOperator[23](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs337 =     DeltaMOperator[23](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs338 =     normalslave(1,0)*(clhs16*clhs334 + clhs17*clhs335 + clhs18*clhs336 + clhs19*clhs337) + normalslave(1,1)*(clhs1*clhs334 + clhs3*clhs335 + clhs336*clhs6 + clhs337*clhs9) + normalslave(1,2)*(clhs12*clhs334 + clhs13*clhs335 + clhs14*clhs336 + clhs15*clhs337 + clhs28);
        const double clhs339 =     clhs338*normalslave(1,0)*penalty_parameter;
        const double clhs340 =     DeltaMOperator[23](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs341 =     DeltaMOperator[23](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs342 =     DeltaMOperator[23](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs343 =     DeltaMOperator[23](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs344 =     normalslave(2,0)*(clhs16*clhs340 + clhs17*clhs341 + clhs18*clhs342 + clhs19*clhs343) + normalslave(2,1)*(clhs1*clhs340 + clhs3*clhs341 + clhs342*clhs6 + clhs343*clhs9) + normalslave(2,2)*(clhs12*clhs340 + clhs13*clhs341 + clhs14*clhs342 + clhs15*clhs343 + clhs38);
        const double clhs345 =     clhs344*normalslave(2,0)*penalty_parameter;
        const double clhs346 =     DeltaMOperator[23](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs347 =     DeltaMOperator[23](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs348 =     DeltaMOperator[23](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs349 =     DeltaMOperator[23](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U2(3,2))
        const double clhs350 =     normalslave(3,0)*(clhs16*clhs346 + clhs17*clhs347 + clhs18*clhs348 + clhs19*clhs349) + normalslave(3,1)*(clhs1*clhs346 + clhs3*clhs347 + clhs348*clhs6 + clhs349*clhs9) + normalslave(3,2)*(clhs12*clhs346 + clhs13*clhs347 + clhs14*clhs348 + clhs15*clhs349 + clhs48);
        const double clhs351 =     clhs350*normalslave(3,0)*penalty_parameter;
        const double clhs352 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs353 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs354 =     DeltaMOperator[0](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs355 =     DeltaMOperator[0](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs356 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs357 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs358 =     DeltaDOperator[0](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs359 =     DeltaDOperator[0](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs360 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs361 =     DeltaMOperator[0](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs362 =     DeltaMOperator[0](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs363 =     normalslave(0,0)*(-clhs16*clhs352 - clhs17*clhs360 - clhs18*clhs361 - clhs19*clhs362 + clhs356*clhs52 + clhs357*clhs54 + clhs358*clhs56 + clhs359*clhs58 + clhs53) + normalslave(0,1)*(-clhs1*clhs352 - clhs3*clhs360 + clhs356*clhs60 + clhs357*clhs61 + clhs358*clhs62 + clhs359*clhs63 - clhs361*clhs6 - clhs362*clhs9) + normalslave(0,2)*(-clhs12*clhs352 - clhs13*clhs360 - clhs14*clhs361 - clhs15*clhs362 + clhs356*clhs64 + clhs357*clhs65 + clhs358*clhs66 + clhs359*clhs67);
        const double clhs364 =     clhs363*normalslave(0,0)*penalty_parameter;
        const double clhs365 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs366 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs367 =     DeltaDOperator[0](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs368 =     DeltaDOperator[0](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs369 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs370 =     DeltaMOperator[0](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs371 =     DeltaMOperator[0](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs372 =     normalslave(1,0)*(-clhs16*clhs353 - clhs17*clhs369 - clhs18*clhs370 - clhs19*clhs371 + clhs365*clhs52 + clhs366*clhs54 + clhs367*clhs56 + clhs368*clhs58 + clhs70) + normalslave(1,1)*(-clhs1*clhs353 - clhs3*clhs369 + clhs365*clhs60 + clhs366*clhs61 + clhs367*clhs62 + clhs368*clhs63 - clhs370*clhs6 - clhs371*clhs9) + normalslave(1,2)*(-clhs12*clhs353 - clhs13*clhs369 - clhs14*clhs370 - clhs15*clhs371 + clhs365*clhs64 + clhs366*clhs65 + clhs367*clhs66 + clhs368*clhs67);
        const double clhs373 =     clhs372*normalslave(1,0)*penalty_parameter;
        const double clhs374 =     DeltaDOperator[0](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs375 =     DeltaDOperator[0](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs376 =     DeltaDOperator[0](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs377 =     DeltaDOperator[0](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs378 =     DeltaMOperator[0](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs379 =     DeltaMOperator[0](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs380 =     DeltaMOperator[0](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs381 =     normalslave(2,0)*(-clhs16*clhs354 - clhs17*clhs378 - clhs18*clhs379 - clhs19*clhs380 + clhs374*clhs52 + clhs375*clhs54 + clhs376*clhs56 + clhs377*clhs58 + clhs76) + normalslave(2,1)*(-clhs1*clhs354 - clhs3*clhs378 + clhs374*clhs60 + clhs375*clhs61 + clhs376*clhs62 + clhs377*clhs63 - clhs379*clhs6 - clhs380*clhs9) + normalslave(2,2)*(-clhs12*clhs354 - clhs13*clhs378 - clhs14*clhs379 - clhs15*clhs380 + clhs374*clhs64 + clhs375*clhs65 + clhs376*clhs66 + clhs377*clhs67);
        const double clhs382 =     clhs381*normalslave(2,0)*penalty_parameter;
        const double clhs383 =     DeltaDOperator[0](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs384 =     DeltaDOperator[0](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs385 =     DeltaDOperator[0](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs386 =     DeltaDOperator[0](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,0))
        const double clhs387 =     DeltaMOperator[0](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs388 =     DeltaMOperator[0](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs389 =     DeltaMOperator[0](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,0))
        const double clhs390 =     normalslave(3,0)*(-clhs16*clhs355 - clhs17*clhs387 - clhs18*clhs388 - clhs19*clhs389 + clhs383*clhs52 + clhs384*clhs54 + clhs385*clhs56 + clhs386*clhs58 + clhs82) + normalslave(3,1)*(-clhs1*clhs355 - clhs3*clhs387 + clhs383*clhs60 + clhs384*clhs61 + clhs385*clhs62 + clhs386*clhs63 - clhs388*clhs6 - clhs389*clhs9) + normalslave(3,2)*(-clhs12*clhs355 - clhs13*clhs387 - clhs14*clhs388 - clhs15*clhs389 + clhs383*clhs64 + clhs384*clhs65 + clhs385*clhs66 + clhs386*clhs67);
        const double clhs391 =     clhs390*normalslave(3,0)*penalty_parameter;
        const double clhs392 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs393 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs394 =     DeltaMOperator[1](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs395 =     DeltaMOperator[1](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs396 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs397 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs398 =     DeltaDOperator[1](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs399 =     DeltaDOperator[1](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs400 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs401 =     DeltaMOperator[1](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs402 =     DeltaMOperator[1](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs403 =     normalslave(0,0)*(-clhs16*clhs392 - clhs17*clhs400 - clhs18*clhs401 - clhs19*clhs402 + clhs396*clhs52 + clhs397*clhs54 + clhs398*clhs56 + clhs399*clhs58) + normalslave(0,1)*(-clhs1*clhs392 - clhs3*clhs400 + clhs396*clhs60 + clhs397*clhs61 + clhs398*clhs62 + clhs399*clhs63 - clhs401*clhs6 - clhs402*clhs9 + clhs53) + normalslave(0,2)*(-clhs12*clhs392 - clhs13*clhs400 - clhs14*clhs401 - clhs15*clhs402 + clhs396*clhs64 + clhs397*clhs65 + clhs398*clhs66 + clhs399*clhs67);
        const double clhs404 =     clhs403*normalslave(0,0)*penalty_parameter;
        const double clhs405 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs406 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs407 =     DeltaDOperator[1](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs408 =     DeltaDOperator[1](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs409 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs410 =     DeltaMOperator[1](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs411 =     DeltaMOperator[1](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs412 =     normalslave(1,0)*(-clhs16*clhs393 - clhs17*clhs409 - clhs18*clhs410 - clhs19*clhs411 + clhs405*clhs52 + clhs406*clhs54 + clhs407*clhs56 + clhs408*clhs58) + normalslave(1,1)*(-clhs1*clhs393 - clhs3*clhs409 + clhs405*clhs60 + clhs406*clhs61 + clhs407*clhs62 + clhs408*clhs63 - clhs410*clhs6 - clhs411*clhs9 + clhs70) + normalslave(1,2)*(-clhs12*clhs393 - clhs13*clhs409 - clhs14*clhs410 - clhs15*clhs411 + clhs405*clhs64 + clhs406*clhs65 + clhs407*clhs66 + clhs408*clhs67);
        const double clhs413 =     clhs412*normalslave(1,0)*penalty_parameter;
        const double clhs414 =     DeltaDOperator[1](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs415 =     DeltaDOperator[1](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs416 =     DeltaDOperator[1](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs417 =     DeltaDOperator[1](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs418 =     DeltaMOperator[1](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs419 =     DeltaMOperator[1](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs420 =     DeltaMOperator[1](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs421 =     normalslave(2,0)*(-clhs16*clhs394 - clhs17*clhs418 - clhs18*clhs419 - clhs19*clhs420 + clhs414*clhs52 + clhs415*clhs54 + clhs416*clhs56 + clhs417*clhs58) + normalslave(2,1)*(-clhs1*clhs394 - clhs3*clhs418 + clhs414*clhs60 + clhs415*clhs61 + clhs416*clhs62 + clhs417*clhs63 - clhs419*clhs6 - clhs420*clhs9 + clhs76) + normalslave(2,2)*(-clhs12*clhs394 - clhs13*clhs418 - clhs14*clhs419 - clhs15*clhs420 + clhs414*clhs64 + clhs415*clhs65 + clhs416*clhs66 + clhs417*clhs67);
        const double clhs422 =     clhs421*normalslave(2,0)*penalty_parameter;
        const double clhs423 =     DeltaDOperator[1](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs424 =     DeltaDOperator[1](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs425 =     DeltaDOperator[1](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs426 =     DeltaDOperator[1](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,1))
        const double clhs427 =     DeltaMOperator[1](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs428 =     DeltaMOperator[1](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs429 =     DeltaMOperator[1](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,1))
        const double clhs430 =     normalslave(3,0)*(-clhs16*clhs395 - clhs17*clhs427 - clhs18*clhs428 - clhs19*clhs429 + clhs423*clhs52 + clhs424*clhs54 + clhs425*clhs56 + clhs426*clhs58) + normalslave(3,1)*(-clhs1*clhs395 - clhs3*clhs427 + clhs423*clhs60 + clhs424*clhs61 + clhs425*clhs62 + clhs426*clhs63 - clhs428*clhs6 - clhs429*clhs9 + clhs82) + normalslave(3,2)*(-clhs12*clhs395 - clhs13*clhs427 - clhs14*clhs428 - clhs15*clhs429 + clhs423*clhs64 + clhs424*clhs65 + clhs425*clhs66 + clhs426*clhs67);
        const double clhs431 =     clhs430*normalslave(3,0)*penalty_parameter;
        const double clhs432 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs433 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs434 =     DeltaMOperator[2](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs435 =     DeltaMOperator[2](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs436 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs437 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs438 =     DeltaDOperator[2](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs439 =     DeltaDOperator[2](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs440 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs441 =     DeltaMOperator[2](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs442 =     DeltaMOperator[2](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs443 =     normalslave(0,0)*(-clhs16*clhs432 - clhs17*clhs440 - clhs18*clhs441 - clhs19*clhs442 + clhs436*clhs52 + clhs437*clhs54 + clhs438*clhs56 + clhs439*clhs58) + normalslave(0,1)*(-clhs1*clhs432 - clhs3*clhs440 + clhs436*clhs60 + clhs437*clhs61 + clhs438*clhs62 + clhs439*clhs63 - clhs441*clhs6 - clhs442*clhs9) + normalslave(0,2)*(-clhs12*clhs432 - clhs13*clhs440 - clhs14*clhs441 - clhs15*clhs442 + clhs436*clhs64 + clhs437*clhs65 + clhs438*clhs66 + clhs439*clhs67 + clhs53);
        const double clhs444 =     clhs443*normalslave(0,0)*penalty_parameter;
        const double clhs445 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs446 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs447 =     DeltaDOperator[2](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs448 =     DeltaDOperator[2](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs449 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs450 =     DeltaMOperator[2](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs451 =     DeltaMOperator[2](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs452 =     normalslave(1,0)*(-clhs16*clhs433 - clhs17*clhs449 - clhs18*clhs450 - clhs19*clhs451 + clhs445*clhs52 + clhs446*clhs54 + clhs447*clhs56 + clhs448*clhs58) + normalslave(1,1)*(-clhs1*clhs433 - clhs3*clhs449 + clhs445*clhs60 + clhs446*clhs61 + clhs447*clhs62 + clhs448*clhs63 - clhs450*clhs6 - clhs451*clhs9) + normalslave(1,2)*(-clhs12*clhs433 - clhs13*clhs449 - clhs14*clhs450 - clhs15*clhs451 + clhs445*clhs64 + clhs446*clhs65 + clhs447*clhs66 + clhs448*clhs67 + clhs70);
        const double clhs453 =     clhs452*normalslave(1,0)*penalty_parameter;
        const double clhs454 =     DeltaDOperator[2](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs455 =     DeltaDOperator[2](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs456 =     DeltaDOperator[2](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs457 =     DeltaDOperator[2](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs458 =     DeltaMOperator[2](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs459 =     DeltaMOperator[2](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs460 =     DeltaMOperator[2](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs461 =     normalslave(2,0)*(-clhs16*clhs434 - clhs17*clhs458 - clhs18*clhs459 - clhs19*clhs460 + clhs454*clhs52 + clhs455*clhs54 + clhs456*clhs56 + clhs457*clhs58) + normalslave(2,1)*(-clhs1*clhs434 - clhs3*clhs458 + clhs454*clhs60 + clhs455*clhs61 + clhs456*clhs62 + clhs457*clhs63 - clhs459*clhs6 - clhs460*clhs9) + normalslave(2,2)*(-clhs12*clhs434 - clhs13*clhs458 - clhs14*clhs459 - clhs15*clhs460 + clhs454*clhs64 + clhs455*clhs65 + clhs456*clhs66 + clhs457*clhs67 + clhs76);
        const double clhs462 =     clhs461*normalslave(2,0)*penalty_parameter;
        const double clhs463 =     DeltaDOperator[2](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs464 =     DeltaDOperator[2](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs465 =     DeltaDOperator[2](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs466 =     DeltaDOperator[2](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(0,2))
        const double clhs467 =     DeltaMOperator[2](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs468 =     DeltaMOperator[2](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs469 =     DeltaMOperator[2](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(0,2))
        const double clhs470 =     normalslave(3,0)*(-clhs16*clhs435 - clhs17*clhs467 - clhs18*clhs468 - clhs19*clhs469 + clhs463*clhs52 + clhs464*clhs54 + clhs465*clhs56 + clhs466*clhs58) + normalslave(3,1)*(-clhs1*clhs435 - clhs3*clhs467 + clhs463*clhs60 + clhs464*clhs61 + clhs465*clhs62 + clhs466*clhs63 - clhs468*clhs6 - clhs469*clhs9) + normalslave(3,2)*(-clhs12*clhs435 - clhs13*clhs467 - clhs14*clhs468 - clhs15*clhs469 + clhs463*clhs64 + clhs464*clhs65 + clhs465*clhs66 + clhs466*clhs67 + clhs82);
        const double clhs471 =     clhs470*normalslave(3,0)*penalty_parameter;
        const double clhs472 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs473 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs474 =     DeltaMOperator[3](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs475 =     DeltaMOperator[3](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs476 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs477 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs478 =     DeltaDOperator[3](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs479 =     DeltaDOperator[3](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs480 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs481 =     DeltaMOperator[3](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs482 =     DeltaMOperator[3](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs483 =     normalslave(0,0)*(-clhs16*clhs472 - clhs17*clhs480 - clhs18*clhs481 - clhs19*clhs482 + clhs476*clhs52 + clhs477*clhs54 + clhs478*clhs56 + clhs479*clhs58 + clhs55) + normalslave(0,1)*(-clhs1*clhs472 - clhs3*clhs480 + clhs476*clhs60 + clhs477*clhs61 + clhs478*clhs62 + clhs479*clhs63 - clhs481*clhs6 - clhs482*clhs9) + normalslave(0,2)*(-clhs12*clhs472 - clhs13*clhs480 - clhs14*clhs481 - clhs15*clhs482 + clhs476*clhs64 + clhs477*clhs65 + clhs478*clhs66 + clhs479*clhs67);
        const double clhs484 =     clhs483*normalslave(0,0)*penalty_parameter;
        const double clhs485 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs486 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs487 =     DeltaDOperator[3](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs488 =     DeltaDOperator[3](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs489 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs490 =     DeltaMOperator[3](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs491 =     DeltaMOperator[3](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs492 =     normalslave(1,0)*(-clhs16*clhs473 - clhs17*clhs489 - clhs18*clhs490 - clhs19*clhs491 + clhs485*clhs52 + clhs486*clhs54 + clhs487*clhs56 + clhs488*clhs58 + clhs71) + normalslave(1,1)*(-clhs1*clhs473 - clhs3*clhs489 + clhs485*clhs60 + clhs486*clhs61 + clhs487*clhs62 + clhs488*clhs63 - clhs490*clhs6 - clhs491*clhs9) + normalslave(1,2)*(-clhs12*clhs473 - clhs13*clhs489 - clhs14*clhs490 - clhs15*clhs491 + clhs485*clhs64 + clhs486*clhs65 + clhs487*clhs66 + clhs488*clhs67);
        const double clhs493 =     clhs492*normalslave(1,0)*penalty_parameter;
        const double clhs494 =     DeltaDOperator[3](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs495 =     DeltaDOperator[3](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs496 =     DeltaDOperator[3](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs497 =     DeltaDOperator[3](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs498 =     DeltaMOperator[3](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs499 =     DeltaMOperator[3](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs500 =     DeltaMOperator[3](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs501 =     normalslave(2,0)*(-clhs16*clhs474 - clhs17*clhs498 - clhs18*clhs499 - clhs19*clhs500 + clhs494*clhs52 + clhs495*clhs54 + clhs496*clhs56 + clhs497*clhs58 + clhs77) + normalslave(2,1)*(-clhs1*clhs474 - clhs3*clhs498 + clhs494*clhs60 + clhs495*clhs61 + clhs496*clhs62 + clhs497*clhs63 - clhs499*clhs6 - clhs500*clhs9) + normalslave(2,2)*(-clhs12*clhs474 - clhs13*clhs498 - clhs14*clhs499 - clhs15*clhs500 + clhs494*clhs64 + clhs495*clhs65 + clhs496*clhs66 + clhs497*clhs67);
        const double clhs502 =     clhs501*normalslave(2,0)*penalty_parameter;
        const double clhs503 =     DeltaDOperator[3](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs504 =     DeltaDOperator[3](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs505 =     DeltaDOperator[3](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs506 =     DeltaDOperator[3](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,0))
        const double clhs507 =     DeltaMOperator[3](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs508 =     DeltaMOperator[3](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs509 =     DeltaMOperator[3](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,0))
        const double clhs510 =     normalslave(3,0)*(-clhs16*clhs475 - clhs17*clhs507 - clhs18*clhs508 - clhs19*clhs509 + clhs503*clhs52 + clhs504*clhs54 + clhs505*clhs56 + clhs506*clhs58 + clhs83) + normalslave(3,1)*(-clhs1*clhs475 - clhs3*clhs507 + clhs503*clhs60 + clhs504*clhs61 + clhs505*clhs62 + clhs506*clhs63 - clhs508*clhs6 - clhs509*clhs9) + normalslave(3,2)*(-clhs12*clhs475 - clhs13*clhs507 - clhs14*clhs508 - clhs15*clhs509 + clhs503*clhs64 + clhs504*clhs65 + clhs505*clhs66 + clhs506*clhs67);
        const double clhs511 =     clhs510*normalslave(3,0)*penalty_parameter;
        const double clhs512 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs513 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs514 =     DeltaMOperator[4](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs515 =     DeltaMOperator[4](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs516 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs517 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs518 =     DeltaDOperator[4](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs519 =     DeltaDOperator[4](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs520 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs521 =     DeltaMOperator[4](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs522 =     DeltaMOperator[4](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs523 =     normalslave(0,0)*(-clhs16*clhs512 - clhs17*clhs520 - clhs18*clhs521 - clhs19*clhs522 + clhs516*clhs52 + clhs517*clhs54 + clhs518*clhs56 + clhs519*clhs58) + normalslave(0,1)*(-clhs1*clhs512 - clhs3*clhs520 + clhs516*clhs60 + clhs517*clhs61 + clhs518*clhs62 + clhs519*clhs63 - clhs521*clhs6 - clhs522*clhs9 + clhs55) + normalslave(0,2)*(-clhs12*clhs512 - clhs13*clhs520 - clhs14*clhs521 - clhs15*clhs522 + clhs516*clhs64 + clhs517*clhs65 + clhs518*clhs66 + clhs519*clhs67);
        const double clhs524 =     clhs523*normalslave(0,0)*penalty_parameter;
        const double clhs525 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs526 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs527 =     DeltaDOperator[4](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs528 =     DeltaDOperator[4](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs529 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs530 =     DeltaMOperator[4](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs531 =     DeltaMOperator[4](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs532 =     normalslave(1,0)*(-clhs16*clhs513 - clhs17*clhs529 - clhs18*clhs530 - clhs19*clhs531 + clhs52*clhs525 + clhs526*clhs54 + clhs527*clhs56 + clhs528*clhs58) + normalslave(1,1)*(-clhs1*clhs513 - clhs3*clhs529 + clhs525*clhs60 + clhs526*clhs61 + clhs527*clhs62 + clhs528*clhs63 - clhs530*clhs6 - clhs531*clhs9 + clhs71) + normalslave(1,2)*(-clhs12*clhs513 - clhs13*clhs529 - clhs14*clhs530 - clhs15*clhs531 + clhs525*clhs64 + clhs526*clhs65 + clhs527*clhs66 + clhs528*clhs67);
        const double clhs533 =     clhs532*normalslave(1,0)*penalty_parameter;
        const double clhs534 =     DeltaDOperator[4](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs535 =     DeltaDOperator[4](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs536 =     DeltaDOperator[4](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs537 =     DeltaDOperator[4](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs538 =     DeltaMOperator[4](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs539 =     DeltaMOperator[4](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs540 =     DeltaMOperator[4](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs541 =     normalslave(2,0)*(-clhs16*clhs514 - clhs17*clhs538 - clhs18*clhs539 - clhs19*clhs540 + clhs52*clhs534 + clhs535*clhs54 + clhs536*clhs56 + clhs537*clhs58) + normalslave(2,1)*(-clhs1*clhs514 - clhs3*clhs538 + clhs534*clhs60 + clhs535*clhs61 + clhs536*clhs62 + clhs537*clhs63 - clhs539*clhs6 - clhs540*clhs9 + clhs77) + normalslave(2,2)*(-clhs12*clhs514 - clhs13*clhs538 - clhs14*clhs539 - clhs15*clhs540 + clhs534*clhs64 + clhs535*clhs65 + clhs536*clhs66 + clhs537*clhs67);
        const double clhs542 =     clhs541*normalslave(2,0)*penalty_parameter;
        const double clhs543 =     DeltaDOperator[4](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs544 =     DeltaDOperator[4](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs545 =     DeltaDOperator[4](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs546 =     DeltaDOperator[4](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,1))
        const double clhs547 =     DeltaMOperator[4](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs548 =     DeltaMOperator[4](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs549 =     DeltaMOperator[4](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,1))
        const double clhs550 =     normalslave(3,0)*(-clhs16*clhs515 - clhs17*clhs547 - clhs18*clhs548 - clhs19*clhs549 + clhs52*clhs543 + clhs54*clhs544 + clhs545*clhs56 + clhs546*clhs58) + normalslave(3,1)*(-clhs1*clhs515 - clhs3*clhs547 + clhs543*clhs60 + clhs544*clhs61 + clhs545*clhs62 + clhs546*clhs63 - clhs548*clhs6 - clhs549*clhs9 + clhs83) + normalslave(3,2)*(-clhs12*clhs515 - clhs13*clhs547 - clhs14*clhs548 - clhs15*clhs549 + clhs543*clhs64 + clhs544*clhs65 + clhs545*clhs66 + clhs546*clhs67);
        const double clhs551 =     clhs550*normalslave(3,0)*penalty_parameter;
        const double clhs552 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs553 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs554 =     DeltaMOperator[5](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs555 =     DeltaMOperator[5](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs556 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs557 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs558 =     DeltaDOperator[5](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs559 =     DeltaDOperator[5](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs560 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs561 =     DeltaMOperator[5](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs562 =     DeltaMOperator[5](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs563 =     normalslave(0,0)*(-clhs16*clhs552 - clhs17*clhs560 - clhs18*clhs561 - clhs19*clhs562 + clhs52*clhs556 + clhs54*clhs557 + clhs558*clhs56 + clhs559*clhs58) + normalslave(0,1)*(-clhs1*clhs552 - clhs3*clhs560 + clhs556*clhs60 + clhs557*clhs61 + clhs558*clhs62 + clhs559*clhs63 - clhs561*clhs6 - clhs562*clhs9) + normalslave(0,2)*(-clhs12*clhs552 - clhs13*clhs560 - clhs14*clhs561 - clhs15*clhs562 + clhs55 + clhs556*clhs64 + clhs557*clhs65 + clhs558*clhs66 + clhs559*clhs67);
        const double clhs564 =     clhs563*normalslave(0,0)*penalty_parameter;
        const double clhs565 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs566 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs567 =     DeltaDOperator[5](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs568 =     DeltaDOperator[5](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs569 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs570 =     DeltaMOperator[5](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs571 =     DeltaMOperator[5](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs572 =     normalslave(1,0)*(-clhs16*clhs553 - clhs17*clhs569 - clhs18*clhs570 - clhs19*clhs571 + clhs52*clhs565 + clhs54*clhs566 + clhs56*clhs567 + clhs568*clhs58) + normalslave(1,1)*(-clhs1*clhs553 - clhs3*clhs569 + clhs565*clhs60 + clhs566*clhs61 + clhs567*clhs62 + clhs568*clhs63 - clhs570*clhs6 - clhs571*clhs9) + normalslave(1,2)*(-clhs12*clhs553 - clhs13*clhs569 - clhs14*clhs570 - clhs15*clhs571 + clhs565*clhs64 + clhs566*clhs65 + clhs567*clhs66 + clhs568*clhs67 + clhs71);
        const double clhs573 =     clhs572*normalslave(1,0)*penalty_parameter;
        const double clhs574 =     DeltaDOperator[5](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs575 =     DeltaDOperator[5](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs576 =     DeltaDOperator[5](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs577 =     DeltaDOperator[5](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs578 =     DeltaMOperator[5](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs579 =     DeltaMOperator[5](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs580 =     DeltaMOperator[5](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs581 =     normalslave(2,0)*(-clhs16*clhs554 - clhs17*clhs578 - clhs18*clhs579 - clhs19*clhs580 + clhs52*clhs574 + clhs54*clhs575 + clhs56*clhs576 + clhs577*clhs58) + normalslave(2,1)*(-clhs1*clhs554 - clhs3*clhs578 + clhs574*clhs60 + clhs575*clhs61 + clhs576*clhs62 + clhs577*clhs63 - clhs579*clhs6 - clhs580*clhs9) + normalslave(2,2)*(-clhs12*clhs554 - clhs13*clhs578 - clhs14*clhs579 - clhs15*clhs580 + clhs574*clhs64 + clhs575*clhs65 + clhs576*clhs66 + clhs577*clhs67 + clhs77);
        const double clhs582 =     clhs581*normalslave(2,0)*penalty_parameter;
        const double clhs583 =     DeltaDOperator[5](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs584 =     DeltaDOperator[5](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs585 =     DeltaDOperator[5](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs586 =     DeltaDOperator[5](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(1,2))
        const double clhs587 =     DeltaMOperator[5](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs588 =     DeltaMOperator[5](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs589 =     DeltaMOperator[5](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(1,2))
        const double clhs590 =     normalslave(3,0)*(-clhs16*clhs555 - clhs17*clhs587 - clhs18*clhs588 - clhs19*clhs589 + clhs52*clhs583 + clhs54*clhs584 + clhs56*clhs585 + clhs58*clhs586) + normalslave(3,1)*(-clhs1*clhs555 - clhs3*clhs587 + clhs583*clhs60 + clhs584*clhs61 + clhs585*clhs62 + clhs586*clhs63 - clhs588*clhs6 - clhs589*clhs9) + normalslave(3,2)*(-clhs12*clhs555 - clhs13*clhs587 - clhs14*clhs588 - clhs15*clhs589 + clhs583*clhs64 + clhs584*clhs65 + clhs585*clhs66 + clhs586*clhs67 + clhs83);
        const double clhs591 =     clhs590*normalslave(3,0)*penalty_parameter;
        const double clhs592 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs593 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs594 =     DeltaMOperator[6](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs595 =     DeltaMOperator[6](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs596 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs597 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs598 =     DeltaDOperator[6](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs599 =     DeltaDOperator[6](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs600 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs601 =     DeltaMOperator[6](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs602 =     DeltaMOperator[6](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs603 =     normalslave(0,0)*(-clhs16*clhs592 - clhs17*clhs600 - clhs18*clhs601 - clhs19*clhs602 + clhs52*clhs596 + clhs54*clhs597 + clhs56*clhs598 + clhs57 + clhs58*clhs599) + normalslave(0,1)*(-clhs1*clhs592 - clhs3*clhs600 + clhs596*clhs60 + clhs597*clhs61 + clhs598*clhs62 + clhs599*clhs63 - clhs6*clhs601 - clhs602*clhs9) + normalslave(0,2)*(-clhs12*clhs592 - clhs13*clhs600 - clhs14*clhs601 - clhs15*clhs602 + clhs596*clhs64 + clhs597*clhs65 + clhs598*clhs66 + clhs599*clhs67);
        const double clhs604 =     clhs603*normalslave(0,0)*penalty_parameter;
        const double clhs605 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs606 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs607 =     DeltaDOperator[6](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs608 =     DeltaDOperator[6](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs609 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs610 =     DeltaMOperator[6](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs611 =     DeltaMOperator[6](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs612 =     normalslave(1,0)*(-clhs16*clhs593 - clhs17*clhs609 - clhs18*clhs610 - clhs19*clhs611 + clhs52*clhs605 + clhs54*clhs606 + clhs56*clhs607 + clhs58*clhs608 + clhs72) + normalslave(1,1)*(-clhs1*clhs593 - clhs3*clhs609 - clhs6*clhs610 + clhs60*clhs605 + clhs606*clhs61 + clhs607*clhs62 + clhs608*clhs63 - clhs611*clhs9) + normalslave(1,2)*(-clhs12*clhs593 - clhs13*clhs609 - clhs14*clhs610 - clhs15*clhs611 + clhs605*clhs64 + clhs606*clhs65 + clhs607*clhs66 + clhs608*clhs67);
        const double clhs613 =     clhs612*normalslave(1,0)*penalty_parameter;
        const double clhs614 =     DeltaDOperator[6](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs615 =     DeltaDOperator[6](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs616 =     DeltaDOperator[6](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs617 =     DeltaDOperator[6](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs618 =     DeltaMOperator[6](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs619 =     DeltaMOperator[6](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs620 =     DeltaMOperator[6](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs621 =     normalslave(2,0)*(-clhs16*clhs594 - clhs17*clhs618 - clhs18*clhs619 - clhs19*clhs620 + clhs52*clhs614 + clhs54*clhs615 + clhs56*clhs616 + clhs58*clhs617 + clhs78) + normalslave(2,1)*(-clhs1*clhs594 - clhs3*clhs618 - clhs6*clhs619 + clhs60*clhs614 + clhs61*clhs615 + clhs616*clhs62 + clhs617*clhs63 - clhs620*clhs9) + normalslave(2,2)*(-clhs12*clhs594 - clhs13*clhs618 - clhs14*clhs619 - clhs15*clhs620 + clhs614*clhs64 + clhs615*clhs65 + clhs616*clhs66 + clhs617*clhs67);
        const double clhs622 =     clhs621*normalslave(2,0)*penalty_parameter;
        const double clhs623 =     DeltaDOperator[6](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs624 =     DeltaDOperator[6](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs625 =     DeltaDOperator[6](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs626 =     DeltaDOperator[6](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,0))
        const double clhs627 =     DeltaMOperator[6](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs628 =     DeltaMOperator[6](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs629 =     DeltaMOperator[6](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,0))
        const double clhs630 =     normalslave(3,0)*(-clhs16*clhs595 - clhs17*clhs627 - clhs18*clhs628 - clhs19*clhs629 + clhs52*clhs623 + clhs54*clhs624 + clhs56*clhs625 + clhs58*clhs626 + clhs84) + normalslave(3,1)*(-clhs1*clhs595 - clhs3*clhs627 - clhs6*clhs628 + clhs60*clhs623 + clhs61*clhs624 + clhs62*clhs625 + clhs626*clhs63 - clhs629*clhs9) + normalslave(3,2)*(-clhs12*clhs595 - clhs13*clhs627 - clhs14*clhs628 - clhs15*clhs629 + clhs623*clhs64 + clhs624*clhs65 + clhs625*clhs66 + clhs626*clhs67);
        const double clhs631 =     clhs630*normalslave(3,0)*penalty_parameter;
        const double clhs632 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs633 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs634 =     DeltaMOperator[7](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs635 =     DeltaMOperator[7](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs636 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs637 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs638 =     DeltaDOperator[7](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs639 =     DeltaDOperator[7](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs640 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs641 =     DeltaMOperator[7](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs642 =     DeltaMOperator[7](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs643 =     normalslave(0,0)*(-clhs16*clhs632 - clhs17*clhs640 - clhs18*clhs641 - clhs19*clhs642 + clhs52*clhs636 + clhs54*clhs637 + clhs56*clhs638 + clhs58*clhs639) + normalslave(0,1)*(-clhs1*clhs632 - clhs3*clhs640 + clhs57 - clhs6*clhs641 + clhs60*clhs636 + clhs61*clhs637 + clhs62*clhs638 + clhs63*clhs639 - clhs642*clhs9) + normalslave(0,2)*(-clhs12*clhs632 - clhs13*clhs640 - clhs14*clhs641 - clhs15*clhs642 + clhs636*clhs64 + clhs637*clhs65 + clhs638*clhs66 + clhs639*clhs67);
        const double clhs644 =     clhs643*normalslave(0,0)*penalty_parameter;
        const double clhs645 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs646 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs647 =     DeltaDOperator[7](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs648 =     DeltaDOperator[7](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs649 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs650 =     DeltaMOperator[7](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs651 =     DeltaMOperator[7](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs652 =     normalslave(1,0)*(-clhs16*clhs633 - clhs17*clhs649 - clhs18*clhs650 - clhs19*clhs651 + clhs52*clhs645 + clhs54*clhs646 + clhs56*clhs647 + clhs58*clhs648) + normalslave(1,1)*(-clhs1*clhs633 - clhs3*clhs649 - clhs6*clhs650 + clhs60*clhs645 + clhs61*clhs646 + clhs62*clhs647 + clhs63*clhs648 - clhs651*clhs9 + clhs72) + normalslave(1,2)*(-clhs12*clhs633 - clhs13*clhs649 - clhs14*clhs650 - clhs15*clhs651 + clhs64*clhs645 + clhs646*clhs65 + clhs647*clhs66 + clhs648*clhs67);
        const double clhs653 =     clhs652*normalslave(1,0)*penalty_parameter;
        const double clhs654 =     DeltaDOperator[7](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs655 =     DeltaDOperator[7](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs656 =     DeltaDOperator[7](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs657 =     DeltaDOperator[7](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs658 =     DeltaMOperator[7](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs659 =     DeltaMOperator[7](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs660 =     DeltaMOperator[7](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs661 =     normalslave(2,0)*(-clhs16*clhs634 - clhs17*clhs658 - clhs18*clhs659 - clhs19*clhs660 + clhs52*clhs654 + clhs54*clhs655 + clhs56*clhs656 + clhs58*clhs657) + normalslave(2,1)*(-clhs1*clhs634 - clhs3*clhs658 - clhs6*clhs659 + clhs60*clhs654 + clhs61*clhs655 + clhs62*clhs656 + clhs63*clhs657 - clhs660*clhs9 + clhs78) + normalslave(2,2)*(-clhs12*clhs634 - clhs13*clhs658 - clhs14*clhs659 - clhs15*clhs660 + clhs64*clhs654 + clhs65*clhs655 + clhs656*clhs66 + clhs657*clhs67);
        const double clhs662 =     clhs661*normalslave(2,0)*penalty_parameter;
        const double clhs663 =     DeltaDOperator[7](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs664 =     DeltaDOperator[7](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs665 =     DeltaDOperator[7](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs666 =     DeltaDOperator[7](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,1))
        const double clhs667 =     DeltaMOperator[7](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs668 =     DeltaMOperator[7](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs669 =     DeltaMOperator[7](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,1))
        const double clhs670 =     normalslave(3,0)*(-clhs16*clhs635 - clhs17*clhs667 - clhs18*clhs668 - clhs19*clhs669 + clhs52*clhs663 + clhs54*clhs664 + clhs56*clhs665 + clhs58*clhs666) + normalslave(3,1)*(-clhs1*clhs635 - clhs3*clhs667 - clhs6*clhs668 + clhs60*clhs663 + clhs61*clhs664 + clhs62*clhs665 + clhs63*clhs666 - clhs669*clhs9 + clhs84) + normalslave(3,2)*(-clhs12*clhs635 - clhs13*clhs667 - clhs14*clhs668 - clhs15*clhs669 + clhs64*clhs663 + clhs65*clhs664 + clhs66*clhs665 + clhs666*clhs67);
        const double clhs671 =     clhs670*normalslave(3,0)*penalty_parameter;
        const double clhs672 =     DeltaMOperator[8](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs673 =     DeltaMOperator[8](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs674 =     DeltaMOperator[8](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs675 =     DeltaMOperator[8](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs676 =     DeltaDOperator[8](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs677 =     DeltaDOperator[8](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs678 =     DeltaDOperator[8](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs679 =     DeltaDOperator[8](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs680 =     DeltaMOperator[8](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs681 =     DeltaMOperator[8](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs682 =     DeltaMOperator[8](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs683 =     normalslave(0,0)*(-clhs16*clhs672 - clhs17*clhs680 - clhs18*clhs681 - clhs19*clhs682 + clhs52*clhs676 + clhs54*clhs677 + clhs56*clhs678 + clhs58*clhs679) + normalslave(0,1)*(-clhs1*clhs672 - clhs3*clhs680 - clhs6*clhs681 + clhs60*clhs676 + clhs61*clhs677 + clhs62*clhs678 + clhs63*clhs679 - clhs682*clhs9) + normalslave(0,2)*(-clhs12*clhs672 - clhs13*clhs680 - clhs14*clhs681 - clhs15*clhs682 + clhs57 + clhs64*clhs676 + clhs65*clhs677 + clhs66*clhs678 + clhs67*clhs679);
        const double clhs684 =     clhs683*normalslave(0,0)*penalty_parameter;
        const double clhs685 =     DeltaDOperator[8](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs686 =     DeltaDOperator[8](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs687 =     DeltaDOperator[8](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs688 =     DeltaDOperator[8](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs689 =     DeltaMOperator[8](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs690 =     DeltaMOperator[8](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs691 =     DeltaMOperator[8](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs692 =     normalslave(1,0)*(-clhs16*clhs673 - clhs17*clhs689 - clhs18*clhs690 - clhs19*clhs691 + clhs52*clhs685 + clhs54*clhs686 + clhs56*clhs687 + clhs58*clhs688) + normalslave(1,1)*(-clhs1*clhs673 - clhs3*clhs689 - clhs6*clhs690 + clhs60*clhs685 + clhs61*clhs686 + clhs62*clhs687 + clhs63*clhs688 - clhs691*clhs9) + normalslave(1,2)*(-clhs12*clhs673 - clhs13*clhs689 - clhs14*clhs690 - clhs15*clhs691 + clhs64*clhs685 + clhs65*clhs686 + clhs66*clhs687 + clhs67*clhs688 + clhs72);
        const double clhs693 =     clhs692*normalslave(1,0)*penalty_parameter;
        const double clhs694 =     DeltaDOperator[8](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs695 =     DeltaDOperator[8](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs696 =     DeltaDOperator[8](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs697 =     DeltaDOperator[8](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs698 =     DeltaMOperator[8](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs699 =     DeltaMOperator[8](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs700 =     DeltaMOperator[8](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs701 =     normalslave(2,0)*(-clhs16*clhs674 - clhs17*clhs698 - clhs18*clhs699 - clhs19*clhs700 + clhs52*clhs694 + clhs54*clhs695 + clhs56*clhs696 + clhs58*clhs697) + normalslave(2,1)*(-clhs1*clhs674 - clhs3*clhs698 - clhs6*clhs699 + clhs60*clhs694 + clhs61*clhs695 + clhs62*clhs696 + clhs63*clhs697 - clhs700*clhs9) + normalslave(2,2)*(-clhs12*clhs674 - clhs13*clhs698 - clhs14*clhs699 - clhs15*clhs700 + clhs64*clhs694 + clhs65*clhs695 + clhs66*clhs696 + clhs67*clhs697 + clhs78);
        const double clhs702 =     clhs701*normalslave(2,0)*penalty_parameter;
        const double clhs703 =     DeltaDOperator[8](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs704 =     DeltaDOperator[8](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs705 =     DeltaDOperator[8](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs706 =     DeltaDOperator[8](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(2,2))
        const double clhs707 =     DeltaMOperator[8](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs708 =     DeltaMOperator[8](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs709 =     DeltaMOperator[8](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(2,2))
        const double clhs710 =     normalslave(3,0)*(-clhs16*clhs675 - clhs17*clhs707 - clhs18*clhs708 - clhs19*clhs709 + clhs52*clhs703 + clhs54*clhs704 + clhs56*clhs705 + clhs58*clhs706) + normalslave(3,1)*(-clhs1*clhs675 - clhs3*clhs707 - clhs6*clhs708 + clhs60*clhs703 + clhs61*clhs704 + clhs62*clhs705 + clhs63*clhs706 - clhs709*clhs9) + normalslave(3,2)*(-clhs12*clhs675 - clhs13*clhs707 - clhs14*clhs708 - clhs15*clhs709 + clhs64*clhs703 + clhs65*clhs704 + clhs66*clhs705 + clhs67*clhs706 + clhs84);
        const double clhs711 =     clhs710*normalslave(3,0)*penalty_parameter;
        const double clhs712 =     DeltaMOperator[9](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs713 =     DeltaMOperator[9](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs714 =     DeltaMOperator[9](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs715 =     DeltaMOperator[9](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs716 =     DeltaDOperator[9](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs717 =     DeltaDOperator[9](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs718 =     DeltaDOperator[9](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs719 =     DeltaDOperator[9](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs720 =     DeltaMOperator[9](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs721 =     DeltaMOperator[9](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs722 =     DeltaMOperator[9](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs723 =     normalslave(0,0)*(-clhs16*clhs712 - clhs17*clhs720 - clhs18*clhs721 - clhs19*clhs722 + clhs52*clhs716 + clhs54*clhs717 + clhs56*clhs718 + clhs58*clhs719 + clhs59) + normalslave(0,1)*(-clhs1*clhs712 - clhs3*clhs720 - clhs6*clhs721 + clhs60*clhs716 + clhs61*clhs717 + clhs62*clhs718 + clhs63*clhs719 - clhs722*clhs9) + normalslave(0,2)*(-clhs12*clhs712 - clhs13*clhs720 - clhs14*clhs721 - clhs15*clhs722 + clhs64*clhs716 + clhs65*clhs717 + clhs66*clhs718 + clhs67*clhs719);
        const double clhs724 =     clhs723*normalslave(0,0)*penalty_parameter;
        const double clhs725 =     DeltaDOperator[9](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs726 =     DeltaDOperator[9](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs727 =     DeltaDOperator[9](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs728 =     DeltaDOperator[9](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs729 =     DeltaMOperator[9](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs730 =     DeltaMOperator[9](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs731 =     DeltaMOperator[9](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs732 =     normalslave(1,0)*(-clhs16*clhs713 - clhs17*clhs729 - clhs18*clhs730 - clhs19*clhs731 + clhs52*clhs725 + clhs54*clhs726 + clhs56*clhs727 + clhs58*clhs728 + clhs73) + normalslave(1,1)*(-clhs1*clhs713 - clhs3*clhs729 - clhs6*clhs730 + clhs60*clhs725 + clhs61*clhs726 + clhs62*clhs727 + clhs63*clhs728 - clhs731*clhs9) + normalslave(1,2)*(-clhs12*clhs713 - clhs13*clhs729 - clhs14*clhs730 - clhs15*clhs731 + clhs64*clhs725 + clhs65*clhs726 + clhs66*clhs727 + clhs67*clhs728);
        const double clhs733 =     clhs732*normalslave(1,0)*penalty_parameter;
        const double clhs734 =     DeltaDOperator[9](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs735 =     DeltaDOperator[9](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs736 =     DeltaDOperator[9](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs737 =     DeltaDOperator[9](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs738 =     DeltaMOperator[9](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs739 =     DeltaMOperator[9](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs740 =     DeltaMOperator[9](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs741 =     normalslave(2,0)*(-clhs16*clhs714 - clhs17*clhs738 - clhs18*clhs739 - clhs19*clhs740 + clhs52*clhs734 + clhs54*clhs735 + clhs56*clhs736 + clhs58*clhs737 + clhs79) + normalslave(2,1)*(-clhs1*clhs714 - clhs3*clhs738 - clhs6*clhs739 + clhs60*clhs734 + clhs61*clhs735 + clhs62*clhs736 + clhs63*clhs737 - clhs740*clhs9) + normalslave(2,2)*(-clhs12*clhs714 - clhs13*clhs738 - clhs14*clhs739 - clhs15*clhs740 + clhs64*clhs734 + clhs65*clhs735 + clhs66*clhs736 + clhs67*clhs737);
        const double clhs742 =     clhs741*normalslave(2,0)*penalty_parameter;
        const double clhs743 =     DeltaDOperator[9](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs744 =     DeltaDOperator[9](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs745 =     DeltaDOperator[9](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs746 =     DeltaDOperator[9](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,0))
        const double clhs747 =     DeltaMOperator[9](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs748 =     DeltaMOperator[9](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs749 =     DeltaMOperator[9](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,0))
        const double clhs750 =     normalslave(3,0)*(-clhs16*clhs715 - clhs17*clhs747 - clhs18*clhs748 - clhs19*clhs749 + clhs52*clhs743 + clhs54*clhs744 + clhs56*clhs745 + clhs58*clhs746 + clhs85) + normalslave(3,1)*(-clhs1*clhs715 - clhs3*clhs747 - clhs6*clhs748 + clhs60*clhs743 + clhs61*clhs744 + clhs62*clhs745 + clhs63*clhs746 - clhs749*clhs9) + normalslave(3,2)*(-clhs12*clhs715 - clhs13*clhs747 - clhs14*clhs748 - clhs15*clhs749 + clhs64*clhs743 + clhs65*clhs744 + clhs66*clhs745 + clhs67*clhs746);
        const double clhs751 =     clhs750*normalslave(3,0)*penalty_parameter;
        const double clhs752 =     DeltaMOperator[10](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs753 =     DeltaMOperator[10](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs754 =     DeltaMOperator[10](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs755 =     DeltaMOperator[10](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs756 =     DeltaDOperator[10](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs757 =     DeltaDOperator[10](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs758 =     DeltaDOperator[10](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs759 =     DeltaDOperator[10](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs760 =     DeltaMOperator[10](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs761 =     DeltaMOperator[10](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs762 =     DeltaMOperator[10](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs763 =     normalslave(0,0)*(-clhs16*clhs752 - clhs17*clhs760 - clhs18*clhs761 - clhs19*clhs762 + clhs52*clhs756 + clhs54*clhs757 + clhs56*clhs758 + clhs58*clhs759) + normalslave(0,1)*(-clhs1*clhs752 - clhs3*clhs760 + clhs59 - clhs6*clhs761 + clhs60*clhs756 + clhs61*clhs757 + clhs62*clhs758 + clhs63*clhs759 - clhs762*clhs9) + normalslave(0,2)*(-clhs12*clhs752 - clhs13*clhs760 - clhs14*clhs761 - clhs15*clhs762 + clhs64*clhs756 + clhs65*clhs757 + clhs66*clhs758 + clhs67*clhs759);
        const double clhs764 =     clhs763*normalslave(0,0)*penalty_parameter;
        const double clhs765 =     DeltaDOperator[10](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs766 =     DeltaDOperator[10](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs767 =     DeltaDOperator[10](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs768 =     DeltaDOperator[10](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs769 =     DeltaMOperator[10](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs770 =     DeltaMOperator[10](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs771 =     DeltaMOperator[10](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs772 =     normalslave(1,0)*(-clhs16*clhs753 - clhs17*clhs769 - clhs18*clhs770 - clhs19*clhs771 + clhs52*clhs765 + clhs54*clhs766 + clhs56*clhs767 + clhs58*clhs768) + normalslave(1,1)*(-clhs1*clhs753 - clhs3*clhs769 - clhs6*clhs770 + clhs60*clhs765 + clhs61*clhs766 + clhs62*clhs767 + clhs63*clhs768 + clhs73 - clhs771*clhs9) + normalslave(1,2)*(-clhs12*clhs753 - clhs13*clhs769 - clhs14*clhs770 - clhs15*clhs771 + clhs64*clhs765 + clhs65*clhs766 + clhs66*clhs767 + clhs67*clhs768);
        const double clhs773 =     clhs772*normalslave(1,0)*penalty_parameter;
        const double clhs774 =     DeltaDOperator[10](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs775 =     DeltaDOperator[10](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs776 =     DeltaDOperator[10](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs777 =     DeltaDOperator[10](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs778 =     DeltaMOperator[10](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs779 =     DeltaMOperator[10](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs780 =     DeltaMOperator[10](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs781 =     normalslave(2,0)*(-clhs16*clhs754 - clhs17*clhs778 - clhs18*clhs779 - clhs19*clhs780 + clhs52*clhs774 + clhs54*clhs775 + clhs56*clhs776 + clhs58*clhs777) + normalslave(2,1)*(-clhs1*clhs754 - clhs3*clhs778 - clhs6*clhs779 + clhs60*clhs774 + clhs61*clhs775 + clhs62*clhs776 + clhs63*clhs777 - clhs780*clhs9 + clhs79) + normalslave(2,2)*(-clhs12*clhs754 - clhs13*clhs778 - clhs14*clhs779 - clhs15*clhs780 + clhs64*clhs774 + clhs65*clhs775 + clhs66*clhs776 + clhs67*clhs777);
        const double clhs782 =     clhs781*normalslave(2,0)*penalty_parameter;
        const double clhs783 =     DeltaDOperator[10](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs784 =     DeltaDOperator[10](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs785 =     DeltaDOperator[10](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs786 =     DeltaDOperator[10](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,1))
        const double clhs787 =     DeltaMOperator[10](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs788 =     DeltaMOperator[10](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs789 =     DeltaMOperator[10](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,1))
        const double clhs790 =     normalslave(3,0)*(-clhs16*clhs755 - clhs17*clhs787 - clhs18*clhs788 - clhs19*clhs789 + clhs52*clhs783 + clhs54*clhs784 + clhs56*clhs785 + clhs58*clhs786) + normalslave(3,1)*(-clhs1*clhs755 - clhs3*clhs787 - clhs6*clhs788 + clhs60*clhs783 + clhs61*clhs784 + clhs62*clhs785 + clhs63*clhs786 - clhs789*clhs9 + clhs85) + normalslave(3,2)*(-clhs12*clhs755 - clhs13*clhs787 - clhs14*clhs788 - clhs15*clhs789 + clhs64*clhs783 + clhs65*clhs784 + clhs66*clhs785 + clhs67*clhs786);
        const double clhs791 =     clhs790*normalslave(3,0)*penalty_parameter;
        const double clhs792 =     DeltaMOperator[11](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs793 =     DeltaMOperator[11](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs794 =     DeltaMOperator[11](2,0); // DERIVATIVE(MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs795 =     DeltaMOperator[11](3,0); // DERIVATIVE(MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs796 =     DeltaDOperator[11](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs797 =     DeltaDOperator[11](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs798 =     DeltaDOperator[11](0,2); // DERIVATIVE(DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs799 =     DeltaDOperator[11](0,3); // DERIVATIVE(DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs800 =     DeltaMOperator[11](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs801 =     DeltaMOperator[11](0,2); // DERIVATIVE(MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs802 =     DeltaMOperator[11](0,3); // DERIVATIVE(MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs803 =     normalslave(0,0)*(-clhs16*clhs792 - clhs17*clhs800 - clhs18*clhs801 - clhs19*clhs802 + clhs52*clhs796 + clhs54*clhs797 + clhs56*clhs798 + clhs58*clhs799) + normalslave(0,1)*(-clhs1*clhs792 - clhs3*clhs800 - clhs6*clhs801 + clhs60*clhs796 + clhs61*clhs797 + clhs62*clhs798 + clhs63*clhs799 - clhs802*clhs9) + normalslave(0,2)*(-clhs12*clhs792 - clhs13*clhs800 - clhs14*clhs801 - clhs15*clhs802 + clhs59 + clhs64*clhs796 + clhs65*clhs797 + clhs66*clhs798 + clhs67*clhs799);
        const double clhs804 =     clhs803*normalslave(0,0)*penalty_parameter;
        const double clhs805 =     DeltaDOperator[11](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs806 =     DeltaDOperator[11](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs807 =     DeltaDOperator[11](1,2); // DERIVATIVE(DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs808 =     DeltaDOperator[11](1,3); // DERIVATIVE(DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs809 =     DeltaMOperator[11](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs810 =     DeltaMOperator[11](1,2); // DERIVATIVE(MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs811 =     DeltaMOperator[11](1,3); // DERIVATIVE(MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs812 =     normalslave(1,0)*(-clhs16*clhs793 - clhs17*clhs809 - clhs18*clhs810 - clhs19*clhs811 + clhs52*clhs805 + clhs54*clhs806 + clhs56*clhs807 + clhs58*clhs808) + normalslave(1,1)*(-clhs1*clhs793 - clhs3*clhs809 - clhs6*clhs810 + clhs60*clhs805 + clhs61*clhs806 + clhs62*clhs807 + clhs63*clhs808 - clhs811*clhs9) + normalslave(1,2)*(-clhs12*clhs793 - clhs13*clhs809 - clhs14*clhs810 - clhs15*clhs811 + clhs64*clhs805 + clhs65*clhs806 + clhs66*clhs807 + clhs67*clhs808 + clhs73);
        const double clhs813 =     clhs812*normalslave(1,0)*penalty_parameter;
        const double clhs814 =     DeltaDOperator[11](2,0); // DERIVATIVE(DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs815 =     DeltaDOperator[11](2,1); // DERIVATIVE(DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs816 =     DeltaDOperator[11](2,2); // DERIVATIVE(DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs817 =     DeltaDOperator[11](2,3); // DERIVATIVE(DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs818 =     DeltaMOperator[11](2,1); // DERIVATIVE(MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs819 =     DeltaMOperator[11](2,2); // DERIVATIVE(MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs820 =     DeltaMOperator[11](2,3); // DERIVATIVE(MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs821 =     normalslave(2,0)*(-clhs16*clhs794 - clhs17*clhs818 - clhs18*clhs819 - clhs19*clhs820 + clhs52*clhs814 + clhs54*clhs815 + clhs56*clhs816 + clhs58*clhs817) + normalslave(2,1)*(-clhs1*clhs794 - clhs3*clhs818 - clhs6*clhs819 + clhs60*clhs814 + clhs61*clhs815 + clhs62*clhs816 + clhs63*clhs817 - clhs820*clhs9) + normalslave(2,2)*(-clhs12*clhs794 - clhs13*clhs818 - clhs14*clhs819 - clhs15*clhs820 + clhs64*clhs814 + clhs65*clhs815 + clhs66*clhs816 + clhs67*clhs817 + clhs79);
        const double clhs822 =     clhs821*normalslave(2,0)*penalty_parameter;
        const double clhs823 =     DeltaDOperator[11](3,0); // DERIVATIVE(DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs824 =     DeltaDOperator[11](3,1); // DERIVATIVE(DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs825 =     DeltaDOperator[11](3,2); // DERIVATIVE(DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs826 =     DeltaDOperator[11](3,3); // DERIVATIVE(DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2)), U1(3,2))
        const double clhs827 =     DeltaMOperator[11](3,1); // DERIVATIVE(MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs828 =     DeltaMOperator[11](3,2); // DERIVATIVE(MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs829 =     DeltaMOperator[11](3,3); // DERIVATIVE(MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2)), U1(3,2))
        const double clhs830 =     normalslave(3,0)*(-clhs16*clhs795 - clhs17*clhs827 - clhs18*clhs828 - clhs19*clhs829 + clhs52*clhs823 + clhs54*clhs824 + clhs56*clhs825 + clhs58*clhs826) + normalslave(3,1)*(-clhs1*clhs795 - clhs3*clhs827 - clhs6*clhs828 + clhs60*clhs823 + clhs61*clhs824 + clhs62*clhs825 + clhs63*clhs826 - clhs829*clhs9) + normalslave(3,2)*(-clhs12*clhs795 - clhs13*clhs827 - clhs14*clhs828 - clhs15*clhs829 + clhs64*clhs823 + clhs65*clhs824 + clhs66*clhs825 + clhs67*clhs826 + clhs85);
        const double clhs831 =     clhs830*normalslave(3,0)*penalty_parameter;
        const double clhs832 =     normalslave(0,0)*scale_factor;
        const double clhs833 =     normalslave(1,0)*scale_factor;
        const double clhs834 =     normalslave(2,0)*scale_factor;
        const double clhs835 =     normalslave(3,0)*scale_factor;
        const double clhs836 =     clhs20*normalslave(0,1)*penalty_parameter;
        const double clhs837 =     clhs30*normalslave(1,1)*penalty_parameter;
        const double clhs838 =     clhs40*normalslave(2,1)*penalty_parameter;
        const double clhs839 =     clhs50*normalslave(3,1)*penalty_parameter;
        const double clhs840 =     clhs68*normalslave(0,1);
        const double clhs841 =     clhs74*normalslave(1,1);
        const double clhs842 =     clhs80*normalslave(2,1);
        const double clhs843 =     clhs86*normalslave(3,1);
        const double clhs844 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs845 =     clhs98*normalslave(1,1)*penalty_parameter;
        const double clhs846 =     clhs104*normalslave(2,1)*penalty_parameter;
        const double clhs847 =     clhs110*normalslave(3,1)*penalty_parameter;
        const double clhs848 =     clhs116*normalslave(0,1)*penalty_parameter;
        const double clhs849 =     clhs122*normalslave(1,1)*penalty_parameter;
        const double clhs850 =     clhs128*normalslave(2,1)*penalty_parameter;
        const double clhs851 =     clhs134*normalslave(3,1)*penalty_parameter;
        const double clhs852 =     clhs140*normalslave(0,1)*penalty_parameter;
        const double clhs853 =     clhs146*normalslave(1,1)*penalty_parameter;
        const double clhs854 =     clhs152*normalslave(2,1)*penalty_parameter;
        const double clhs855 =     clhs158*normalslave(3,1)*penalty_parameter;
        const double clhs856 =     clhs164*normalslave(0,1)*penalty_parameter;
        const double clhs857 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs858 =     clhs176*normalslave(2,1)*penalty_parameter;
        const double clhs859 =     clhs182*normalslave(3,1)*penalty_parameter;
        const double clhs860 =     clhs188*normalslave(0,1)*penalty_parameter;
        const double clhs861 =     clhs194*normalslave(1,1)*penalty_parameter;
        const double clhs862 =     clhs200*normalslave(2,1)*penalty_parameter;
        const double clhs863 =     clhs206*normalslave(3,1)*penalty_parameter;
        const double clhs864 =     clhs212*normalslave(0,1)*penalty_parameter;
        const double clhs865 =     clhs218*normalslave(1,1)*penalty_parameter;
        const double clhs866 =     clhs224*normalslave(2,1)*penalty_parameter;
        const double clhs867 =     clhs230*normalslave(3,1)*penalty_parameter;
        const double clhs868 =     clhs236*normalslave(0,1)*penalty_parameter;
        const double clhs869 =     clhs242*normalslave(1,1)*penalty_parameter;
        const double clhs870 =     clhs248*normalslave(2,1)*penalty_parameter;
        const double clhs871 =     clhs254*normalslave(3,1)*penalty_parameter;
        const double clhs872 =     clhs260*normalslave(0,1)*penalty_parameter;
        const double clhs873 =     clhs266*normalslave(1,1)*penalty_parameter;
        const double clhs874 =     clhs272*normalslave(2,1)*penalty_parameter;
        const double clhs875 =     clhs278*normalslave(3,1)*penalty_parameter;
        const double clhs876 =     clhs284*normalslave(0,1)*penalty_parameter;
        const double clhs877 =     clhs290*normalslave(1,1)*penalty_parameter;
        const double clhs878 =     clhs296*normalslave(2,1)*penalty_parameter;
        const double clhs879 =     clhs302*normalslave(3,1)*penalty_parameter;
        const double clhs880 =     clhs308*normalslave(0,1)*penalty_parameter;
        const double clhs881 =     clhs314*normalslave(1,1)*penalty_parameter;
        const double clhs882 =     clhs320*normalslave(2,1)*penalty_parameter;
        const double clhs883 =     clhs326*normalslave(3,1)*penalty_parameter;
        const double clhs884 =     clhs332*normalslave(0,1)*penalty_parameter;
        const double clhs885 =     clhs338*normalslave(1,1)*penalty_parameter;
        const double clhs886 =     clhs344*normalslave(2,1)*penalty_parameter;
        const double clhs887 =     clhs350*normalslave(3,1)*penalty_parameter;
        const double clhs888 =     clhs363*normalslave(0,1)*penalty_parameter;
        const double clhs889 =     clhs372*normalslave(1,1)*penalty_parameter;
        const double clhs890 =     clhs381*normalslave(2,1)*penalty_parameter;
        const double clhs891 =     clhs390*normalslave(3,1)*penalty_parameter;
        const double clhs892 =     clhs403*normalslave(0,1)*penalty_parameter;
        const double clhs893 =     clhs412*normalslave(1,1)*penalty_parameter;
        const double clhs894 =     clhs421*normalslave(2,1)*penalty_parameter;
        const double clhs895 =     clhs430*normalslave(3,1)*penalty_parameter;
        const double clhs896 =     clhs443*normalslave(0,1)*penalty_parameter;
        const double clhs897 =     clhs452*normalslave(1,1)*penalty_parameter;
        const double clhs898 =     clhs461*normalslave(2,1)*penalty_parameter;
        const double clhs899 =     clhs470*normalslave(3,1)*penalty_parameter;
        const double clhs900 =     clhs483*normalslave(0,1)*penalty_parameter;
        const double clhs901 =     clhs492*normalslave(1,1)*penalty_parameter;
        const double clhs902 =     clhs501*normalslave(2,1)*penalty_parameter;
        const double clhs903 =     clhs510*normalslave(3,1)*penalty_parameter;
        const double clhs904 =     clhs523*normalslave(0,1)*penalty_parameter;
        const double clhs905 =     clhs532*normalslave(1,1)*penalty_parameter;
        const double clhs906 =     clhs541*normalslave(2,1)*penalty_parameter;
        const double clhs907 =     clhs550*normalslave(3,1)*penalty_parameter;
        const double clhs908 =     clhs563*normalslave(0,1)*penalty_parameter;
        const double clhs909 =     clhs572*normalslave(1,1)*penalty_parameter;
        const double clhs910 =     clhs581*normalslave(2,1)*penalty_parameter;
        const double clhs911 =     clhs590*normalslave(3,1)*penalty_parameter;
        const double clhs912 =     clhs603*normalslave(0,1)*penalty_parameter;
        const double clhs913 =     clhs612*normalslave(1,1)*penalty_parameter;
        const double clhs914 =     clhs621*normalslave(2,1)*penalty_parameter;
        const double clhs915 =     clhs630*normalslave(3,1)*penalty_parameter;
        const double clhs916 =     clhs643*normalslave(0,1)*penalty_parameter;
        const double clhs917 =     clhs652*normalslave(1,1)*penalty_parameter;
        const double clhs918 =     clhs661*normalslave(2,1)*penalty_parameter;
        const double clhs919 =     clhs670*normalslave(3,1)*penalty_parameter;
        const double clhs920 =     clhs683*normalslave(0,1)*penalty_parameter;
        const double clhs921 =     clhs692*normalslave(1,1)*penalty_parameter;
        const double clhs922 =     clhs701*normalslave(2,1)*penalty_parameter;
        const double clhs923 =     clhs710*normalslave(3,1)*penalty_parameter;
        const double clhs924 =     clhs723*normalslave(0,1)*penalty_parameter;
        const double clhs925 =     clhs732*normalslave(1,1)*penalty_parameter;
        const double clhs926 =     clhs741*normalslave(2,1)*penalty_parameter;
        const double clhs927 =     clhs750*normalslave(3,1)*penalty_parameter;
        const double clhs928 =     clhs763*normalslave(0,1)*penalty_parameter;
        const double clhs929 =     clhs772*normalslave(1,1)*penalty_parameter;
        const double clhs930 =     clhs781*normalslave(2,1)*penalty_parameter;
        const double clhs931 =     clhs790*normalslave(3,1)*penalty_parameter;
        const double clhs932 =     clhs803*normalslave(0,1)*penalty_parameter;
        const double clhs933 =     clhs812*normalslave(1,1)*penalty_parameter;
        const double clhs934 =     clhs821*normalslave(2,1)*penalty_parameter;
        const double clhs935 =     clhs830*normalslave(3,1)*penalty_parameter;
        const double clhs936 =     normalslave(0,1)*scale_factor;
        const double clhs937 =     normalslave(1,1)*scale_factor;
        const double clhs938 =     normalslave(2,1)*scale_factor;
        const double clhs939 =     normalslave(3,1)*scale_factor;
        const double clhs940 =     clhs20*normalslave(0,2)*penalty_parameter;
        const double clhs941 =     clhs30*normalslave(1,2)*penalty_parameter;
        const double clhs942 =     clhs40*normalslave(2,2)*penalty_parameter;
        const double clhs943 =     clhs50*normalslave(3,2)*penalty_parameter;
        const double clhs944 =     clhs68*normalslave(0,2);
        const double clhs945 =     clhs74*normalslave(1,2);
        const double clhs946 =     clhs80*normalslave(2,2);
        const double clhs947 =     clhs86*normalslave(3,2);
        const double clhs948 =     clhs92*normalslave(0,2)*penalty_parameter;
        const double clhs949 =     clhs98*normalslave(1,2)*penalty_parameter;
        const double clhs950 =     clhs104*normalslave(2,2)*penalty_parameter;
        const double clhs951 =     clhs110*normalslave(3,2)*penalty_parameter;
        const double clhs952 =     clhs116*normalslave(0,2)*penalty_parameter;
        const double clhs953 =     clhs122*normalslave(1,2)*penalty_parameter;
        const double clhs954 =     clhs128*normalslave(2,2)*penalty_parameter;
        const double clhs955 =     clhs134*normalslave(3,2)*penalty_parameter;
        const double clhs956 =     clhs140*normalslave(0,2)*penalty_parameter;
        const double clhs957 =     clhs146*normalslave(1,2)*penalty_parameter;
        const double clhs958 =     clhs152*normalslave(2,2)*penalty_parameter;
        const double clhs959 =     clhs158*normalslave(3,2)*penalty_parameter;
        const double clhs960 =     clhs164*normalslave(0,2)*penalty_parameter;
        const double clhs961 =     clhs170*normalslave(1,2)*penalty_parameter;
        const double clhs962 =     clhs176*normalslave(2,2)*penalty_parameter;
        const double clhs963 =     clhs182*normalslave(3,2)*penalty_parameter;
        const double clhs964 =     clhs188*normalslave(0,2)*penalty_parameter;
        const double clhs965 =     clhs194*normalslave(1,2)*penalty_parameter;
        const double clhs966 =     clhs200*normalslave(2,2)*penalty_parameter;
        const double clhs967 =     clhs206*normalslave(3,2)*penalty_parameter;
        const double clhs968 =     clhs212*normalslave(0,2)*penalty_parameter;
        const double clhs969 =     clhs218*normalslave(1,2)*penalty_parameter;
        const double clhs970 =     clhs224*normalslave(2,2)*penalty_parameter;
        const double clhs971 =     clhs230*normalslave(3,2)*penalty_parameter;
        const double clhs972 =     clhs236*normalslave(0,2)*penalty_parameter;
        const double clhs973 =     clhs242*normalslave(1,2)*penalty_parameter;
        const double clhs974 =     clhs248*normalslave(2,2)*penalty_parameter;
        const double clhs975 =     clhs254*normalslave(3,2)*penalty_parameter;
        const double clhs976 =     clhs260*normalslave(0,2)*penalty_parameter;
        const double clhs977 =     clhs266*normalslave(1,2)*penalty_parameter;
        const double clhs978 =     clhs272*normalslave(2,2)*penalty_parameter;
        const double clhs979 =     clhs278*normalslave(3,2)*penalty_parameter;
        const double clhs980 =     clhs284*normalslave(0,2)*penalty_parameter;
        const double clhs981 =     clhs290*normalslave(1,2)*penalty_parameter;
        const double clhs982 =     clhs296*normalslave(2,2)*penalty_parameter;
        const double clhs983 =     clhs302*normalslave(3,2)*penalty_parameter;
        const double clhs984 =     clhs308*normalslave(0,2)*penalty_parameter;
        const double clhs985 =     clhs314*normalslave(1,2)*penalty_parameter;
        const double clhs986 =     clhs320*normalslave(2,2)*penalty_parameter;
        const double clhs987 =     clhs326*normalslave(3,2)*penalty_parameter;
        const double clhs988 =     clhs332*normalslave(0,2)*penalty_parameter;
        const double clhs989 =     clhs338*normalslave(1,2)*penalty_parameter;
        const double clhs990 =     clhs344*normalslave(2,2)*penalty_parameter;
        const double clhs991 =     clhs350*normalslave(3,2)*penalty_parameter;
        const double clhs992 =     clhs363*normalslave(0,2)*penalty_parameter;
        const double clhs993 =     clhs372*normalslave(1,2)*penalty_parameter;
        const double clhs994 =     clhs381*normalslave(2,2)*penalty_parameter;
        const double clhs995 =     clhs390*normalslave(3,2)*penalty_parameter;
        const double clhs996 =     clhs403*normalslave(0,2)*penalty_parameter;
        const double clhs997 =     clhs412*normalslave(1,2)*penalty_parameter;
        const double clhs998 =     clhs421*normalslave(2,2)*penalty_parameter;
        const double clhs999 =     clhs430*normalslave(3,2)*penalty_parameter;
        const double clhs1000 =     clhs443*normalslave(0,2)*penalty_parameter;
        const double clhs1001 =     clhs452*normalslave(1,2)*penalty_parameter;
        const double clhs1002 =     clhs461*normalslave(2,2)*penalty_parameter;
        const double clhs1003 =     clhs470*normalslave(3,2)*penalty_parameter;
        const double clhs1004 =     clhs483*normalslave(0,2)*penalty_parameter;
        const double clhs1005 =     clhs492*normalslave(1,2)*penalty_parameter;
        const double clhs1006 =     clhs501*normalslave(2,2)*penalty_parameter;
        const double clhs1007 =     clhs510*normalslave(3,2)*penalty_parameter;
        const double clhs1008 =     clhs523*normalslave(0,2)*penalty_parameter;
        const double clhs1009 =     clhs532*normalslave(1,2)*penalty_parameter;
        const double clhs1010 =     clhs541*normalslave(2,2)*penalty_parameter;
        const double clhs1011 =     clhs550*normalslave(3,2)*penalty_parameter;
        const double clhs1012 =     clhs563*normalslave(0,2)*penalty_parameter;
        const double clhs1013 =     clhs572*normalslave(1,2)*penalty_parameter;
        const double clhs1014 =     clhs581*normalslave(2,2)*penalty_parameter;
        const double clhs1015 =     clhs590*normalslave(3,2)*penalty_parameter;
        const double clhs1016 =     clhs603*normalslave(0,2)*penalty_parameter;
        const double clhs1017 =     clhs612*normalslave(1,2)*penalty_parameter;
        const double clhs1018 =     clhs621*normalslave(2,2)*penalty_parameter;
        const double clhs1019 =     clhs630*normalslave(3,2)*penalty_parameter;
        const double clhs1020 =     clhs643*normalslave(0,2)*penalty_parameter;
        const double clhs1021 =     clhs652*normalslave(1,2)*penalty_parameter;
        const double clhs1022 =     clhs661*normalslave(2,2)*penalty_parameter;
        const double clhs1023 =     clhs670*normalslave(3,2)*penalty_parameter;
        const double clhs1024 =     clhs683*normalslave(0,2)*penalty_parameter;
        const double clhs1025 =     clhs692*normalslave(1,2)*penalty_parameter;
        const double clhs1026 =     clhs701*normalslave(2,2)*penalty_parameter;
        const double clhs1027 =     clhs710*normalslave(3,2)*penalty_parameter;
        const double clhs1028 =     clhs723*normalslave(0,2)*penalty_parameter;
        const double clhs1029 =     clhs732*normalslave(1,2)*penalty_parameter;
        const double clhs1030 =     clhs741*normalslave(2,2)*penalty_parameter;
        const double clhs1031 =     clhs750*normalslave(3,2)*penalty_parameter;
        const double clhs1032 =     clhs763*normalslave(0,2)*penalty_parameter;
        const double clhs1033 =     clhs772*normalslave(1,2)*penalty_parameter;
        const double clhs1034 =     clhs781*normalslave(2,2)*penalty_parameter;
        const double clhs1035 =     clhs790*normalslave(3,2)*penalty_parameter;
        const double clhs1036 =     clhs803*normalslave(0,2)*penalty_parameter;
        const double clhs1037 =     clhs812*normalslave(1,2)*penalty_parameter;
        const double clhs1038 =     clhs821*normalslave(2,2)*penalty_parameter;
        const double clhs1039 =     clhs830*normalslave(3,2)*penalty_parameter;
        const double clhs1040 =     normalslave(0,2)*scale_factor;
        const double clhs1041 =     normalslave(1,2)*scale_factor;
        const double clhs1042 =     normalslave(2,2)*scale_factor;
        const double clhs1043 =     normalslave(3,2)*scale_factor;
        const double clhs1044 =     clhs20*normalslave(0,0);
        const double clhs1045 =     clhs30*normalslave(1,0);
        const double clhs1046 =     clhs40*normalslave(2,0);
        const double clhs1047 =     clhs50*normalslave(3,0);
        const double clhs1048 =     clhs92*normalslave(0,0);
        const double clhs1049 =     clhs98*normalslave(1,0);
        const double clhs1050 =     clhs104*normalslave(2,0);
        const double clhs1051 =     clhs110*normalslave(3,0);
        const double clhs1052 =     clhs116*normalslave(0,0);
        const double clhs1053 =     clhs122*normalslave(1,0);
        const double clhs1054 =     clhs128*normalslave(2,0);
        const double clhs1055 =     clhs134*normalslave(3,0);
        const double clhs1056 =     clhs140*normalslave(0,0);
        const double clhs1057 =     clhs146*normalslave(1,0);
        const double clhs1058 =     clhs152*normalslave(2,0);
        const double clhs1059 =     clhs158*normalslave(3,0);
        const double clhs1060 =     clhs164*normalslave(0,0);
        const double clhs1061 =     clhs170*normalslave(1,0);
        const double clhs1062 =     clhs176*normalslave(2,0);
        const double clhs1063 =     clhs182*normalslave(3,0);
        const double clhs1064 =     clhs188*normalslave(0,0);
        const double clhs1065 =     clhs194*normalslave(1,0);
        const double clhs1066 =     clhs200*normalslave(2,0);
        const double clhs1067 =     clhs206*normalslave(3,0);
        const double clhs1068 =     clhs212*normalslave(0,0);
        const double clhs1069 =     clhs218*normalslave(1,0);
        const double clhs1070 =     clhs224*normalslave(2,0);
        const double clhs1071 =     clhs230*normalslave(3,0);
        const double clhs1072 =     clhs236*normalslave(0,0);
        const double clhs1073 =     clhs242*normalslave(1,0);
        const double clhs1074 =     clhs248*normalslave(2,0);
        const double clhs1075 =     clhs254*normalslave(3,0);
        const double clhs1076 =     clhs260*normalslave(0,0);
        const double clhs1077 =     clhs266*normalslave(1,0);
        const double clhs1078 =     clhs272*normalslave(2,0);
        const double clhs1079 =     clhs278*normalslave(3,0);
        const double clhs1080 =     clhs284*normalslave(0,0);
        const double clhs1081 =     clhs290*normalslave(1,0);
        const double clhs1082 =     clhs296*normalslave(2,0);
        const double clhs1083 =     clhs302*normalslave(3,0);
        const double clhs1084 =     clhs308*normalslave(0,0);
        const double clhs1085 =     clhs314*normalslave(1,0);
        const double clhs1086 =     clhs320*normalslave(2,0);
        const double clhs1087 =     clhs326*normalslave(3,0);
        const double clhs1088 =     clhs332*normalslave(0,0);
        const double clhs1089 =     clhs338*normalslave(1,0);
        const double clhs1090 =     clhs344*normalslave(2,0);
        const double clhs1091 =     clhs350*normalslave(3,0);
        const double clhs1092 =     clhs20*normalslave(0,1);
        const double clhs1093 =     clhs30*normalslave(1,1);
        const double clhs1094 =     clhs40*normalslave(2,1);
        const double clhs1095 =     clhs50*normalslave(3,1);
        const double clhs1096 =     clhs92*normalslave(0,1);
        const double clhs1097 =     clhs98*normalslave(1,1);
        const double clhs1098 =     clhs104*normalslave(2,1);
        const double clhs1099 =     clhs110*normalslave(3,1);
        const double clhs1100 =     clhs116*normalslave(0,1);
        const double clhs1101 =     clhs122*normalslave(1,1);
        const double clhs1102 =     clhs128*normalslave(2,1);
        const double clhs1103 =     clhs134*normalslave(3,1);
        const double clhs1104 =     clhs140*normalslave(0,1);
        const double clhs1105 =     clhs146*normalslave(1,1);
        const double clhs1106 =     clhs152*normalslave(2,1);
        const double clhs1107 =     clhs158*normalslave(3,1);
        const double clhs1108 =     clhs164*normalslave(0,1);
        const double clhs1109 =     clhs170*normalslave(1,1);
        const double clhs1110 =     clhs176*normalslave(2,1);
        const double clhs1111 =     clhs182*normalslave(3,1);
        const double clhs1112 =     clhs188*normalslave(0,1);
        const double clhs1113 =     clhs194*normalslave(1,1);
        const double clhs1114 =     clhs200*normalslave(2,1);
        const double clhs1115 =     clhs206*normalslave(3,1);
        const double clhs1116 =     clhs212*normalslave(0,1);
        const double clhs1117 =     clhs218*normalslave(1,1);
        const double clhs1118 =     clhs224*normalslave(2,1);
        const double clhs1119 =     clhs230*normalslave(3,1);
        const double clhs1120 =     clhs236*normalslave(0,1);
        const double clhs1121 =     clhs242*normalslave(1,1);
        const double clhs1122 =     clhs248*normalslave(2,1);
        const double clhs1123 =     clhs254*normalslave(3,1);
        const double clhs1124 =     clhs260*normalslave(0,1);
        const double clhs1125 =     clhs266*normalslave(1,1);
        const double clhs1126 =     clhs272*normalslave(2,1);
        const double clhs1127 =     clhs278*normalslave(3,1);
        const double clhs1128 =     clhs284*normalslave(0,1);
        const double clhs1129 =     clhs290*normalslave(1,1);
        const double clhs1130 =     clhs296*normalslave(2,1);
        const double clhs1131 =     clhs302*normalslave(3,1);
        const double clhs1132 =     clhs308*normalslave(0,1);
        const double clhs1133 =     clhs314*normalslave(1,1);
        const double clhs1134 =     clhs320*normalslave(2,1);
        const double clhs1135 =     clhs326*normalslave(3,1);
        const double clhs1136 =     clhs332*normalslave(0,1);
        const double clhs1137 =     clhs338*normalslave(1,1);
        const double clhs1138 =     clhs344*normalslave(2,1);
        const double clhs1139 =     clhs350*normalslave(3,1);
        const double clhs1140 =     clhs20*normalslave(0,2);
        const double clhs1141 =     clhs30*normalslave(1,2);
        const double clhs1142 =     clhs40*normalslave(2,2);
        const double clhs1143 =     clhs50*normalslave(3,2);
        const double clhs1144 =     clhs92*normalslave(0,2);
        const double clhs1145 =     clhs98*normalslave(1,2);
        const double clhs1146 =     clhs104*normalslave(2,2);
        const double clhs1147 =     clhs110*normalslave(3,2);
        const double clhs1148 =     clhs116*normalslave(0,2);
        const double clhs1149 =     clhs122*normalslave(1,2);
        const double clhs1150 =     clhs128*normalslave(2,2);
        const double clhs1151 =     clhs134*normalslave(3,2);
        const double clhs1152 =     clhs140*normalslave(0,2);
        const double clhs1153 =     clhs146*normalslave(1,2);
        const double clhs1154 =     clhs152*normalslave(2,2);
        const double clhs1155 =     clhs158*normalslave(3,2);
        const double clhs1156 =     clhs164*normalslave(0,2);
        const double clhs1157 =     clhs170*normalslave(1,2);
        const double clhs1158 =     clhs176*normalslave(2,2);
        const double clhs1159 =     clhs182*normalslave(3,2);
        const double clhs1160 =     clhs188*normalslave(0,2);
        const double clhs1161 =     clhs194*normalslave(1,2);
        const double clhs1162 =     clhs200*normalslave(2,2);
        const double clhs1163 =     clhs206*normalslave(3,2);
        const double clhs1164 =     clhs212*normalslave(0,2);
        const double clhs1165 =     clhs218*normalslave(1,2);
        const double clhs1166 =     clhs224*normalslave(2,2);
        const double clhs1167 =     clhs230*normalslave(3,2);
        const double clhs1168 =     clhs236*normalslave(0,2);
        const double clhs1169 =     clhs242*normalslave(1,2);
        const double clhs1170 =     clhs248*normalslave(2,2);
        const double clhs1171 =     clhs254*normalslave(3,2);
        const double clhs1172 =     clhs260*normalslave(0,2);
        const double clhs1173 =     clhs266*normalslave(1,2);
        const double clhs1174 =     clhs272*normalslave(2,2);
        const double clhs1175 =     clhs278*normalslave(3,2);
        const double clhs1176 =     clhs284*normalslave(0,2);
        const double clhs1177 =     clhs290*normalslave(1,2);
        const double clhs1178 =     clhs296*normalslave(2,2);
        const double clhs1179 =     clhs302*normalslave(3,2);
        const double clhs1180 =     clhs308*normalslave(0,2);
        const double clhs1181 =     clhs314*normalslave(1,2);
        const double clhs1182 =     clhs320*normalslave(2,2);
        const double clhs1183 =     clhs326*normalslave(3,2);
        const double clhs1184 =     clhs332*normalslave(0,2);
        const double clhs1185 =     clhs338*normalslave(1,2);
        const double clhs1186 =     clhs344*normalslave(2,2);
        const double clhs1187 =     clhs350*normalslave(3,2);
    
        lhs(0,0)=-clhs0*clhs21 + clhs2*clhs69 - clhs22*clhs31 + clhs23*clhs75 - clhs32*clhs41 + clhs33*clhs81 - clhs42*clhs51 + clhs43*clhs87;
        lhs(0,1)=-clhs0*clhs93 + clhs100*clhs81 - clhs105*clhs32 + clhs106*clhs87 - clhs111*clhs42 - clhs22*clhs99 + clhs69*clhs88 + clhs75*clhs94;
        lhs(0,2)=-clhs0*clhs117 + clhs112*clhs69 + clhs118*clhs75 - clhs123*clhs22 + clhs124*clhs81 - clhs129*clhs32 + clhs130*clhs87 - clhs135*clhs42;
        lhs(0,3)=-clhs0*clhs141 + clhs136*clhs69 + clhs142*clhs75 - clhs147*clhs22 + clhs148*clhs81 - clhs153*clhs32 + clhs154*clhs87 - clhs159*clhs42;
        lhs(0,4)=-clhs0*clhs165 + clhs160*clhs69 + clhs166*clhs75 - clhs171*clhs22 + clhs172*clhs81 - clhs177*clhs32 + clhs178*clhs87 - clhs183*clhs42;
        lhs(0,5)=-clhs0*clhs189 + clhs184*clhs69 + clhs190*clhs75 - clhs195*clhs22 + clhs196*clhs81 - clhs201*clhs32 + clhs202*clhs87 - clhs207*clhs42;
        lhs(0,6)=-clhs0*clhs213 + clhs208*clhs69 + clhs214*clhs75 - clhs219*clhs22 + clhs220*clhs81 - clhs225*clhs32 + clhs226*clhs87 - clhs231*clhs42;
        lhs(0,7)=-clhs0*clhs237 - clhs22*clhs243 + clhs232*clhs69 + clhs238*clhs75 + clhs244*clhs81 - clhs249*clhs32 + clhs250*clhs87 - clhs255*clhs42;
        lhs(0,8)=-clhs0*clhs261 - clhs22*clhs267 + clhs256*clhs69 + clhs262*clhs75 + clhs268*clhs81 - clhs273*clhs32 + clhs274*clhs87 - clhs279*clhs42;
        lhs(0,9)=-clhs0*clhs285 - clhs22*clhs291 + clhs280*clhs69 + clhs286*clhs75 + clhs292*clhs81 - clhs297*clhs32 + clhs298*clhs87 - clhs303*clhs42;
        lhs(0,10)=-clhs0*clhs309 - clhs22*clhs315 + clhs304*clhs69 + clhs310*clhs75 + clhs316*clhs81 - clhs32*clhs321 + clhs322*clhs87 - clhs327*clhs42;
        lhs(0,11)=-clhs0*clhs333 - clhs22*clhs339 - clhs32*clhs345 + clhs328*clhs69 + clhs334*clhs75 + clhs340*clhs81 + clhs346*clhs87 - clhs351*clhs42;
        lhs(0,12)=clhs0*clhs364 + clhs22*clhs373 + clhs32*clhs382 + clhs352*clhs69 + clhs353*clhs75 + clhs354*clhs81 + clhs355*clhs87 + clhs391*clhs42;
        lhs(0,13)=clhs0*clhs404 + clhs22*clhs413 + clhs32*clhs422 + clhs392*clhs69 + clhs393*clhs75 + clhs394*clhs81 + clhs395*clhs87 + clhs42*clhs431;
        lhs(0,14)=clhs0*clhs444 + clhs22*clhs453 + clhs32*clhs462 + clhs42*clhs471 + clhs432*clhs69 + clhs433*clhs75 + clhs434*clhs81 + clhs435*clhs87;
        lhs(0,15)=clhs0*clhs484 + clhs22*clhs493 + clhs32*clhs502 + clhs42*clhs511 + clhs472*clhs69 + clhs473*clhs75 + clhs474*clhs81 + clhs475*clhs87;
        lhs(0,16)=clhs0*clhs524 + clhs22*clhs533 + clhs32*clhs542 + clhs42*clhs551 + clhs512*clhs69 + clhs513*clhs75 + clhs514*clhs81 + clhs515*clhs87;
        lhs(0,17)=clhs0*clhs564 + clhs22*clhs573 + clhs32*clhs582 + clhs42*clhs591 + clhs552*clhs69 + clhs553*clhs75 + clhs554*clhs81 + clhs555*clhs87;
        lhs(0,18)=clhs0*clhs604 + clhs22*clhs613 + clhs32*clhs622 + clhs42*clhs631 + clhs592*clhs69 + clhs593*clhs75 + clhs594*clhs81 + clhs595*clhs87;
        lhs(0,19)=clhs0*clhs644 + clhs22*clhs653 + clhs32*clhs662 + clhs42*clhs671 + clhs632*clhs69 + clhs633*clhs75 + clhs634*clhs81 + clhs635*clhs87;
        lhs(0,20)=clhs0*clhs684 + clhs22*clhs693 + clhs32*clhs702 + clhs42*clhs711 + clhs672*clhs69 + clhs673*clhs75 + clhs674*clhs81 + clhs675*clhs87;
        lhs(0,21)=clhs0*clhs724 + clhs22*clhs733 + clhs32*clhs742 + clhs42*clhs751 + clhs69*clhs712 + clhs713*clhs75 + clhs714*clhs81 + clhs715*clhs87;
        lhs(0,22)=clhs0*clhs764 + clhs22*clhs773 + clhs32*clhs782 + clhs42*clhs791 + clhs69*clhs752 + clhs75*clhs753 + clhs754*clhs81 + clhs755*clhs87;
        lhs(0,23)=clhs0*clhs804 + clhs22*clhs813 + clhs32*clhs822 + clhs42*clhs831 + clhs69*clhs792 + clhs75*clhs793 + clhs794*clhs81 + clhs795*clhs87;
        lhs(0,24)=clhs0*clhs832;
        lhs(0,25)=clhs22*clhs833;
        lhs(0,26)=clhs32*clhs834;
        lhs(0,27)=clhs42*clhs835;
        lhs(1,0)=-clhs0*clhs836 + clhs2*clhs840 - clhs22*clhs837 + clhs23*clhs841 - clhs32*clhs838 + clhs33*clhs842 - clhs42*clhs839 + clhs43*clhs843;
        lhs(1,1)=-clhs0*clhs844 + clhs100*clhs842 + clhs106*clhs843 - clhs22*clhs845 - clhs32*clhs846 - clhs42*clhs847 + clhs840*clhs88 + clhs841*clhs94;
        lhs(1,2)=-clhs0*clhs848 + clhs112*clhs840 + clhs118*clhs841 + clhs124*clhs842 + clhs130*clhs843 - clhs22*clhs849 - clhs32*clhs850 - clhs42*clhs851;
        lhs(1,3)=-clhs0*clhs852 + clhs136*clhs840 + clhs142*clhs841 + clhs148*clhs842 + clhs154*clhs843 - clhs22*clhs853 - clhs32*clhs854 - clhs42*clhs855;
        lhs(1,4)=-clhs0*clhs856 + clhs160*clhs840 + clhs166*clhs841 + clhs172*clhs842 + clhs178*clhs843 - clhs22*clhs857 - clhs32*clhs858 - clhs42*clhs859;
        lhs(1,5)=-clhs0*clhs860 + clhs184*clhs840 + clhs190*clhs841 + clhs196*clhs842 + clhs202*clhs843 - clhs22*clhs861 - clhs32*clhs862 - clhs42*clhs863;
        lhs(1,6)=-clhs0*clhs864 + clhs208*clhs840 + clhs214*clhs841 - clhs22*clhs865 + clhs220*clhs842 + clhs226*clhs843 - clhs32*clhs866 - clhs42*clhs867;
        lhs(1,7)=-clhs0*clhs868 - clhs22*clhs869 + clhs232*clhs840 + clhs238*clhs841 + clhs244*clhs842 + clhs250*clhs843 - clhs32*clhs870 - clhs42*clhs871;
        lhs(1,8)=-clhs0*clhs872 - clhs22*clhs873 + clhs256*clhs840 + clhs262*clhs841 + clhs268*clhs842 + clhs274*clhs843 - clhs32*clhs874 - clhs42*clhs875;
        lhs(1,9)=-clhs0*clhs876 - clhs22*clhs877 + clhs280*clhs840 + clhs286*clhs841 + clhs292*clhs842 + clhs298*clhs843 - clhs32*clhs878 - clhs42*clhs879;
        lhs(1,10)=-clhs0*clhs880 - clhs22*clhs881 + clhs304*clhs840 + clhs310*clhs841 + clhs316*clhs842 - clhs32*clhs882 + clhs322*clhs843 - clhs42*clhs883;
        lhs(1,11)=-clhs0*clhs884 - clhs22*clhs885 - clhs32*clhs886 + clhs328*clhs840 + clhs334*clhs841 + clhs340*clhs842 + clhs346*clhs843 - clhs42*clhs887;
        lhs(1,12)=clhs0*clhs888 + clhs22*clhs889 + clhs32*clhs890 + clhs352*clhs840 + clhs353*clhs841 + clhs354*clhs842 + clhs355*clhs843 + clhs42*clhs891;
        lhs(1,13)=clhs0*clhs892 + clhs22*clhs893 + clhs32*clhs894 + clhs392*clhs840 + clhs393*clhs841 + clhs394*clhs842 + clhs395*clhs843 + clhs42*clhs895;
        lhs(1,14)=clhs0*clhs896 + clhs22*clhs897 + clhs32*clhs898 + clhs42*clhs899 + clhs432*clhs840 + clhs433*clhs841 + clhs434*clhs842 + clhs435*clhs843;
        lhs(1,15)=clhs0*clhs900 + clhs22*clhs901 + clhs32*clhs902 + clhs42*clhs903 + clhs472*clhs840 + clhs473*clhs841 + clhs474*clhs842 + clhs475*clhs843;
        lhs(1,16)=clhs0*clhs904 + clhs22*clhs905 + clhs32*clhs906 + clhs42*clhs907 + clhs512*clhs840 + clhs513*clhs841 + clhs514*clhs842 + clhs515*clhs843;
        lhs(1,17)=clhs0*clhs908 + clhs22*clhs909 + clhs32*clhs910 + clhs42*clhs911 + clhs552*clhs840 + clhs553*clhs841 + clhs554*clhs842 + clhs555*clhs843;
        lhs(1,18)=clhs0*clhs912 + clhs22*clhs913 + clhs32*clhs914 + clhs42*clhs915 + clhs592*clhs840 + clhs593*clhs841 + clhs594*clhs842 + clhs595*clhs843;
        lhs(1,19)=clhs0*clhs916 + clhs22*clhs917 + clhs32*clhs918 + clhs42*clhs919 + clhs632*clhs840 + clhs633*clhs841 + clhs634*clhs842 + clhs635*clhs843;
        lhs(1,20)=clhs0*clhs920 + clhs22*clhs921 + clhs32*clhs922 + clhs42*clhs923 + clhs672*clhs840 + clhs673*clhs841 + clhs674*clhs842 + clhs675*clhs843;
        lhs(1,21)=clhs0*clhs924 + clhs22*clhs925 + clhs32*clhs926 + clhs42*clhs927 + clhs712*clhs840 + clhs713*clhs841 + clhs714*clhs842 + clhs715*clhs843;
        lhs(1,22)=clhs0*clhs928 + clhs22*clhs929 + clhs32*clhs930 + clhs42*clhs931 + clhs752*clhs840 + clhs753*clhs841 + clhs754*clhs842 + clhs755*clhs843;
        lhs(1,23)=clhs0*clhs932 + clhs22*clhs933 + clhs32*clhs934 + clhs42*clhs935 + clhs792*clhs840 + clhs793*clhs841 + clhs794*clhs842 + clhs795*clhs843;
        lhs(1,24)=clhs0*clhs936;
        lhs(1,25)=clhs22*clhs937;
        lhs(1,26)=clhs32*clhs938;
        lhs(1,27)=clhs42*clhs939;
        lhs(2,0)=-clhs0*clhs940 + clhs2*clhs944 - clhs22*clhs941 + clhs23*clhs945 - clhs32*clhs942 + clhs33*clhs946 - clhs42*clhs943 + clhs43*clhs947;
        lhs(2,1)=-clhs0*clhs948 + clhs100*clhs946 + clhs106*clhs947 - clhs22*clhs949 - clhs32*clhs950 - clhs42*clhs951 + clhs88*clhs944 + clhs94*clhs945;
        lhs(2,2)=-clhs0*clhs952 + clhs112*clhs944 + clhs118*clhs945 + clhs124*clhs946 + clhs130*clhs947 - clhs22*clhs953 - clhs32*clhs954 - clhs42*clhs955;
        lhs(2,3)=-clhs0*clhs956 + clhs136*clhs944 + clhs142*clhs945 + clhs148*clhs946 + clhs154*clhs947 - clhs22*clhs957 - clhs32*clhs958 - clhs42*clhs959;
        lhs(2,4)=-clhs0*clhs960 + clhs160*clhs944 + clhs166*clhs945 + clhs172*clhs946 + clhs178*clhs947 - clhs22*clhs961 - clhs32*clhs962 - clhs42*clhs963;
        lhs(2,5)=-clhs0*clhs964 + clhs184*clhs944 + clhs190*clhs945 + clhs196*clhs946 + clhs202*clhs947 - clhs22*clhs965 - clhs32*clhs966 - clhs42*clhs967;
        lhs(2,6)=-clhs0*clhs968 + clhs208*clhs944 + clhs214*clhs945 - clhs22*clhs969 + clhs220*clhs946 + clhs226*clhs947 - clhs32*clhs970 - clhs42*clhs971;
        lhs(2,7)=-clhs0*clhs972 - clhs22*clhs973 + clhs232*clhs944 + clhs238*clhs945 + clhs244*clhs946 + clhs250*clhs947 - clhs32*clhs974 - clhs42*clhs975;
        lhs(2,8)=-clhs0*clhs976 - clhs22*clhs977 + clhs256*clhs944 + clhs262*clhs945 + clhs268*clhs946 + clhs274*clhs947 - clhs32*clhs978 - clhs42*clhs979;
        lhs(2,9)=-clhs0*clhs980 - clhs22*clhs981 + clhs280*clhs944 + clhs286*clhs945 + clhs292*clhs946 + clhs298*clhs947 - clhs32*clhs982 - clhs42*clhs983;
        lhs(2,10)=-clhs0*clhs984 - clhs22*clhs985 + clhs304*clhs944 + clhs310*clhs945 + clhs316*clhs946 - clhs32*clhs986 + clhs322*clhs947 - clhs42*clhs987;
        lhs(2,11)=-clhs0*clhs988 - clhs22*clhs989 - clhs32*clhs990 + clhs328*clhs944 + clhs334*clhs945 + clhs340*clhs946 + clhs346*clhs947 - clhs42*clhs991;
        lhs(2,12)=clhs0*clhs992 + clhs22*clhs993 + clhs32*clhs994 + clhs352*clhs944 + clhs353*clhs945 + clhs354*clhs946 + clhs355*clhs947 + clhs42*clhs995;
        lhs(2,13)=clhs0*clhs996 + clhs22*clhs997 + clhs32*clhs998 + clhs392*clhs944 + clhs393*clhs945 + clhs394*clhs946 + clhs395*clhs947 + clhs42*clhs999;
        lhs(2,14)=clhs0*clhs1000 + clhs1001*clhs22 + clhs1002*clhs32 + clhs1003*clhs42 + clhs432*clhs944 + clhs433*clhs945 + clhs434*clhs946 + clhs435*clhs947;
        lhs(2,15)=clhs0*clhs1004 + clhs1005*clhs22 + clhs1006*clhs32 + clhs1007*clhs42 + clhs472*clhs944 + clhs473*clhs945 + clhs474*clhs946 + clhs475*clhs947;
        lhs(2,16)=clhs0*clhs1008 + clhs1009*clhs22 + clhs1010*clhs32 + clhs1011*clhs42 + clhs512*clhs944 + clhs513*clhs945 + clhs514*clhs946 + clhs515*clhs947;
        lhs(2,17)=clhs0*clhs1012 + clhs1013*clhs22 + clhs1014*clhs32 + clhs1015*clhs42 + clhs552*clhs944 + clhs553*clhs945 + clhs554*clhs946 + clhs555*clhs947;
        lhs(2,18)=clhs0*clhs1016 + clhs1017*clhs22 + clhs1018*clhs32 + clhs1019*clhs42 + clhs592*clhs944 + clhs593*clhs945 + clhs594*clhs946 + clhs595*clhs947;
        lhs(2,19)=clhs0*clhs1020 + clhs1021*clhs22 + clhs1022*clhs32 + clhs1023*clhs42 + clhs632*clhs944 + clhs633*clhs945 + clhs634*clhs946 + clhs635*clhs947;
        lhs(2,20)=clhs0*clhs1024 + clhs1025*clhs22 + clhs1026*clhs32 + clhs1027*clhs42 + clhs672*clhs944 + clhs673*clhs945 + clhs674*clhs946 + clhs675*clhs947;
        lhs(2,21)=clhs0*clhs1028 + clhs1029*clhs22 + clhs1030*clhs32 + clhs1031*clhs42 + clhs712*clhs944 + clhs713*clhs945 + clhs714*clhs946 + clhs715*clhs947;
        lhs(2,22)=clhs0*clhs1032 + clhs1033*clhs22 + clhs1034*clhs32 + clhs1035*clhs42 + clhs752*clhs944 + clhs753*clhs945 + clhs754*clhs946 + clhs755*clhs947;
        lhs(2,23)=clhs0*clhs1036 + clhs1037*clhs22 + clhs1038*clhs32 + clhs1039*clhs42 + clhs792*clhs944 + clhs793*clhs945 + clhs794*clhs946 + clhs795*clhs947;
        lhs(2,24)=clhs0*clhs1040;
        lhs(2,25)=clhs1041*clhs22;
        lhs(2,26)=clhs1042*clhs32;
        lhs(2,27)=clhs1043*clhs42;
        lhs(3,0)=-clhs21*clhs4 - clhs24*clhs31 + clhs25*clhs75 - clhs34*clhs41 + clhs35*clhs81 - clhs44*clhs51 + clhs45*clhs87 + clhs5*clhs69;
        lhs(3,1)=clhs101*clhs81 - clhs105*clhs34 + clhs107*clhs87 - clhs111*clhs44 - clhs24*clhs99 - clhs4*clhs93 + clhs69*clhs89 + clhs75*clhs95;
        lhs(3,2)=clhs113*clhs69 - clhs117*clhs4 + clhs119*clhs75 - clhs123*clhs24 + clhs125*clhs81 - clhs129*clhs34 + clhs131*clhs87 - clhs135*clhs44;
        lhs(3,3)=clhs137*clhs69 - clhs141*clhs4 + clhs143*clhs75 - clhs147*clhs24 + clhs149*clhs81 - clhs153*clhs34 + clhs155*clhs87 - clhs159*clhs44;
        lhs(3,4)=clhs161*clhs69 - clhs165*clhs4 + clhs167*clhs75 - clhs171*clhs24 + clhs173*clhs81 - clhs177*clhs34 + clhs179*clhs87 - clhs183*clhs44;
        lhs(3,5)=clhs185*clhs69 - clhs189*clhs4 + clhs191*clhs75 - clhs195*clhs24 + clhs197*clhs81 - clhs201*clhs34 + clhs203*clhs87 - clhs207*clhs44;
        lhs(3,6)=clhs209*clhs69 - clhs213*clhs4 + clhs215*clhs75 - clhs219*clhs24 + clhs221*clhs81 - clhs225*clhs34 + clhs227*clhs87 - clhs231*clhs44;
        lhs(3,7)=clhs233*clhs69 - clhs237*clhs4 + clhs239*clhs75 - clhs24*clhs243 + clhs245*clhs81 - clhs249*clhs34 + clhs251*clhs87 - clhs255*clhs44;
        lhs(3,8)=-clhs24*clhs267 + clhs257*clhs69 - clhs261*clhs4 + clhs263*clhs75 + clhs269*clhs81 - clhs273*clhs34 + clhs275*clhs87 - clhs279*clhs44;
        lhs(3,9)=-clhs24*clhs291 + clhs281*clhs69 - clhs285*clhs4 + clhs287*clhs75 + clhs293*clhs81 - clhs297*clhs34 + clhs299*clhs87 - clhs303*clhs44;
        lhs(3,10)=-clhs24*clhs315 + clhs305*clhs69 - clhs309*clhs4 + clhs311*clhs75 + clhs317*clhs81 - clhs321*clhs34 + clhs323*clhs87 - clhs327*clhs44;
        lhs(3,11)=-clhs24*clhs339 + clhs329*clhs69 - clhs333*clhs4 + clhs335*clhs75 - clhs34*clhs345 + clhs341*clhs81 + clhs347*clhs87 - clhs351*clhs44;
        lhs(3,12)=clhs24*clhs373 + clhs34*clhs382 + clhs360*clhs69 + clhs364*clhs4 + clhs369*clhs75 + clhs378*clhs81 + clhs387*clhs87 + clhs391*clhs44;
        lhs(3,13)=clhs24*clhs413 + clhs34*clhs422 + clhs4*clhs404 + clhs400*clhs69 + clhs409*clhs75 + clhs418*clhs81 + clhs427*clhs87 + clhs431*clhs44;
        lhs(3,14)=clhs24*clhs453 + clhs34*clhs462 + clhs4*clhs444 + clhs44*clhs471 + clhs440*clhs69 + clhs449*clhs75 + clhs458*clhs81 + clhs467*clhs87;
        lhs(3,15)=clhs24*clhs493 + clhs34*clhs502 + clhs4*clhs484 + clhs44*clhs511 + clhs480*clhs69 + clhs489*clhs75 + clhs498*clhs81 + clhs507*clhs87;
        lhs(3,16)=clhs24*clhs533 + clhs34*clhs542 + clhs4*clhs524 + clhs44*clhs551 + clhs520*clhs69 + clhs529*clhs75 + clhs538*clhs81 + clhs547*clhs87;
        lhs(3,17)=clhs24*clhs573 + clhs34*clhs582 + clhs4*clhs564 + clhs44*clhs591 + clhs560*clhs69 + clhs569*clhs75 + clhs578*clhs81 + clhs587*clhs87;
        lhs(3,18)=clhs24*clhs613 + clhs34*clhs622 + clhs4*clhs604 + clhs44*clhs631 + clhs600*clhs69 + clhs609*clhs75 + clhs618*clhs81 + clhs627*clhs87;
        lhs(3,19)=clhs24*clhs653 + clhs34*clhs662 + clhs4*clhs644 + clhs44*clhs671 + clhs640*clhs69 + clhs649*clhs75 + clhs658*clhs81 + clhs667*clhs87;
        lhs(3,20)=clhs24*clhs693 + clhs34*clhs702 + clhs4*clhs684 + clhs44*clhs711 + clhs680*clhs69 + clhs689*clhs75 + clhs698*clhs81 + clhs707*clhs87;
        lhs(3,21)=clhs24*clhs733 + clhs34*clhs742 + clhs4*clhs724 + clhs44*clhs751 + clhs69*clhs720 + clhs729*clhs75 + clhs738*clhs81 + clhs747*clhs87;
        lhs(3,22)=clhs24*clhs773 + clhs34*clhs782 + clhs4*clhs764 + clhs44*clhs791 + clhs69*clhs760 + clhs75*clhs769 + clhs778*clhs81 + clhs787*clhs87;
        lhs(3,23)=clhs24*clhs813 + clhs34*clhs822 + clhs4*clhs804 + clhs44*clhs831 + clhs69*clhs800 + clhs75*clhs809 + clhs81*clhs818 + clhs827*clhs87;
        lhs(3,24)=clhs4*clhs832;
        lhs(3,25)=clhs24*clhs833;
        lhs(3,26)=clhs34*clhs834;
        lhs(3,27)=clhs44*clhs835;
        lhs(4,0)=-clhs24*clhs837 + clhs25*clhs841 - clhs34*clhs838 + clhs35*clhs842 - clhs4*clhs836 - clhs44*clhs839 + clhs45*clhs843 + clhs5*clhs840;
        lhs(4,1)=clhs101*clhs842 + clhs107*clhs843 - clhs24*clhs845 - clhs34*clhs846 - clhs4*clhs844 - clhs44*clhs847 + clhs840*clhs89 + clhs841*clhs95;
        lhs(4,2)=clhs113*clhs840 + clhs119*clhs841 + clhs125*clhs842 + clhs131*clhs843 - clhs24*clhs849 - clhs34*clhs850 - clhs4*clhs848 - clhs44*clhs851;
        lhs(4,3)=clhs137*clhs840 + clhs143*clhs841 + clhs149*clhs842 + clhs155*clhs843 - clhs24*clhs853 - clhs34*clhs854 - clhs4*clhs852 - clhs44*clhs855;
        lhs(4,4)=clhs161*clhs840 + clhs167*clhs841 + clhs173*clhs842 + clhs179*clhs843 - clhs24*clhs857 - clhs34*clhs858 - clhs4*clhs856 - clhs44*clhs859;
        lhs(4,5)=clhs185*clhs840 + clhs191*clhs841 + clhs197*clhs842 + clhs203*clhs843 - clhs24*clhs861 - clhs34*clhs862 - clhs4*clhs860 - clhs44*clhs863;
        lhs(4,6)=clhs209*clhs840 + clhs215*clhs841 + clhs221*clhs842 + clhs227*clhs843 - clhs24*clhs865 - clhs34*clhs866 - clhs4*clhs864 - clhs44*clhs867;
        lhs(4,7)=clhs233*clhs840 + clhs239*clhs841 - clhs24*clhs869 + clhs245*clhs842 + clhs251*clhs843 - clhs34*clhs870 - clhs4*clhs868 - clhs44*clhs871;
        lhs(4,8)=-clhs24*clhs873 + clhs257*clhs840 + clhs263*clhs841 + clhs269*clhs842 + clhs275*clhs843 - clhs34*clhs874 - clhs4*clhs872 - clhs44*clhs875;
        lhs(4,9)=-clhs24*clhs877 + clhs281*clhs840 + clhs287*clhs841 + clhs293*clhs842 + clhs299*clhs843 - clhs34*clhs878 - clhs4*clhs876 - clhs44*clhs879;
        lhs(4,10)=-clhs24*clhs881 + clhs305*clhs840 + clhs311*clhs841 + clhs317*clhs842 + clhs323*clhs843 - clhs34*clhs882 - clhs4*clhs880 - clhs44*clhs883;
        lhs(4,11)=-clhs24*clhs885 + clhs329*clhs840 + clhs335*clhs841 - clhs34*clhs886 + clhs341*clhs842 + clhs347*clhs843 - clhs4*clhs884 - clhs44*clhs887;
        lhs(4,12)=clhs24*clhs889 + clhs34*clhs890 + clhs360*clhs840 + clhs369*clhs841 + clhs378*clhs842 + clhs387*clhs843 + clhs4*clhs888 + clhs44*clhs891;
        lhs(4,13)=clhs24*clhs893 + clhs34*clhs894 + clhs4*clhs892 + clhs400*clhs840 + clhs409*clhs841 + clhs418*clhs842 + clhs427*clhs843 + clhs44*clhs895;
        lhs(4,14)=clhs24*clhs897 + clhs34*clhs898 + clhs4*clhs896 + clhs44*clhs899 + clhs440*clhs840 + clhs449*clhs841 + clhs458*clhs842 + clhs467*clhs843;
        lhs(4,15)=clhs24*clhs901 + clhs34*clhs902 + clhs4*clhs900 + clhs44*clhs903 + clhs480*clhs840 + clhs489*clhs841 + clhs498*clhs842 + clhs507*clhs843;
        lhs(4,16)=clhs24*clhs905 + clhs34*clhs906 + clhs4*clhs904 + clhs44*clhs907 + clhs520*clhs840 + clhs529*clhs841 + clhs538*clhs842 + clhs547*clhs843;
        lhs(4,17)=clhs24*clhs909 + clhs34*clhs910 + clhs4*clhs908 + clhs44*clhs911 + clhs560*clhs840 + clhs569*clhs841 + clhs578*clhs842 + clhs587*clhs843;
        lhs(4,18)=clhs24*clhs913 + clhs34*clhs914 + clhs4*clhs912 + clhs44*clhs915 + clhs600*clhs840 + clhs609*clhs841 + clhs618*clhs842 + clhs627*clhs843;
        lhs(4,19)=clhs24*clhs917 + clhs34*clhs918 + clhs4*clhs916 + clhs44*clhs919 + clhs640*clhs840 + clhs649*clhs841 + clhs658*clhs842 + clhs667*clhs843;
        lhs(4,20)=clhs24*clhs921 + clhs34*clhs922 + clhs4*clhs920 + clhs44*clhs923 + clhs680*clhs840 + clhs689*clhs841 + clhs698*clhs842 + clhs707*clhs843;
        lhs(4,21)=clhs24*clhs925 + clhs34*clhs926 + clhs4*clhs924 + clhs44*clhs927 + clhs720*clhs840 + clhs729*clhs841 + clhs738*clhs842 + clhs747*clhs843;
        lhs(4,22)=clhs24*clhs929 + clhs34*clhs930 + clhs4*clhs928 + clhs44*clhs931 + clhs760*clhs840 + clhs769*clhs841 + clhs778*clhs842 + clhs787*clhs843;
        lhs(4,23)=clhs24*clhs933 + clhs34*clhs934 + clhs4*clhs932 + clhs44*clhs935 + clhs800*clhs840 + clhs809*clhs841 + clhs818*clhs842 + clhs827*clhs843;
        lhs(4,24)=clhs4*clhs936;
        lhs(4,25)=clhs24*clhs937;
        lhs(4,26)=clhs34*clhs938;
        lhs(4,27)=clhs44*clhs939;
        lhs(5,0)=-clhs24*clhs941 + clhs25*clhs945 - clhs34*clhs942 + clhs35*clhs946 - clhs4*clhs940 - clhs44*clhs943 + clhs45*clhs947 + clhs5*clhs944;
        lhs(5,1)=clhs101*clhs946 + clhs107*clhs947 - clhs24*clhs949 - clhs34*clhs950 - clhs4*clhs948 - clhs44*clhs951 + clhs89*clhs944 + clhs945*clhs95;
        lhs(5,2)=clhs113*clhs944 + clhs119*clhs945 + clhs125*clhs946 + clhs131*clhs947 - clhs24*clhs953 - clhs34*clhs954 - clhs4*clhs952 - clhs44*clhs955;
        lhs(5,3)=clhs137*clhs944 + clhs143*clhs945 + clhs149*clhs946 + clhs155*clhs947 - clhs24*clhs957 - clhs34*clhs958 - clhs4*clhs956 - clhs44*clhs959;
        lhs(5,4)=clhs161*clhs944 + clhs167*clhs945 + clhs173*clhs946 + clhs179*clhs947 - clhs24*clhs961 - clhs34*clhs962 - clhs4*clhs960 - clhs44*clhs963;
        lhs(5,5)=clhs185*clhs944 + clhs191*clhs945 + clhs197*clhs946 + clhs203*clhs947 - clhs24*clhs965 - clhs34*clhs966 - clhs4*clhs964 - clhs44*clhs967;
        lhs(5,6)=clhs209*clhs944 + clhs215*clhs945 + clhs221*clhs946 + clhs227*clhs947 - clhs24*clhs969 - clhs34*clhs970 - clhs4*clhs968 - clhs44*clhs971;
        lhs(5,7)=clhs233*clhs944 + clhs239*clhs945 - clhs24*clhs973 + clhs245*clhs946 + clhs251*clhs947 - clhs34*clhs974 - clhs4*clhs972 - clhs44*clhs975;
        lhs(5,8)=-clhs24*clhs977 + clhs257*clhs944 + clhs263*clhs945 + clhs269*clhs946 + clhs275*clhs947 - clhs34*clhs978 - clhs4*clhs976 - clhs44*clhs979;
        lhs(5,9)=-clhs24*clhs981 + clhs281*clhs944 + clhs287*clhs945 + clhs293*clhs946 + clhs299*clhs947 - clhs34*clhs982 - clhs4*clhs980 - clhs44*clhs983;
        lhs(5,10)=-clhs24*clhs985 + clhs305*clhs944 + clhs311*clhs945 + clhs317*clhs946 + clhs323*clhs947 - clhs34*clhs986 - clhs4*clhs984 - clhs44*clhs987;
        lhs(5,11)=-clhs24*clhs989 + clhs329*clhs944 + clhs335*clhs945 - clhs34*clhs990 + clhs341*clhs946 + clhs347*clhs947 - clhs4*clhs988 - clhs44*clhs991;
        lhs(5,12)=clhs24*clhs993 + clhs34*clhs994 + clhs360*clhs944 + clhs369*clhs945 + clhs378*clhs946 + clhs387*clhs947 + clhs4*clhs992 + clhs44*clhs995;
        lhs(5,13)=clhs24*clhs997 + clhs34*clhs998 + clhs4*clhs996 + clhs400*clhs944 + clhs409*clhs945 + clhs418*clhs946 + clhs427*clhs947 + clhs44*clhs999;
        lhs(5,14)=clhs1000*clhs4 + clhs1001*clhs24 + clhs1002*clhs34 + clhs1003*clhs44 + clhs440*clhs944 + clhs449*clhs945 + clhs458*clhs946 + clhs467*clhs947;
        lhs(5,15)=clhs1004*clhs4 + clhs1005*clhs24 + clhs1006*clhs34 + clhs1007*clhs44 + clhs480*clhs944 + clhs489*clhs945 + clhs498*clhs946 + clhs507*clhs947;
        lhs(5,16)=clhs1008*clhs4 + clhs1009*clhs24 + clhs1010*clhs34 + clhs1011*clhs44 + clhs520*clhs944 + clhs529*clhs945 + clhs538*clhs946 + clhs547*clhs947;
        lhs(5,17)=clhs1012*clhs4 + clhs1013*clhs24 + clhs1014*clhs34 + clhs1015*clhs44 + clhs560*clhs944 + clhs569*clhs945 + clhs578*clhs946 + clhs587*clhs947;
        lhs(5,18)=clhs1016*clhs4 + clhs1017*clhs24 + clhs1018*clhs34 + clhs1019*clhs44 + clhs600*clhs944 + clhs609*clhs945 + clhs618*clhs946 + clhs627*clhs947;
        lhs(5,19)=clhs1020*clhs4 + clhs1021*clhs24 + clhs1022*clhs34 + clhs1023*clhs44 + clhs640*clhs944 + clhs649*clhs945 + clhs658*clhs946 + clhs667*clhs947;
        lhs(5,20)=clhs1024*clhs4 + clhs1025*clhs24 + clhs1026*clhs34 + clhs1027*clhs44 + clhs680*clhs944 + clhs689*clhs945 + clhs698*clhs946 + clhs707*clhs947;
        lhs(5,21)=clhs1028*clhs4 + clhs1029*clhs24 + clhs1030*clhs34 + clhs1031*clhs44 + clhs720*clhs944 + clhs729*clhs945 + clhs738*clhs946 + clhs747*clhs947;
        lhs(5,22)=clhs1032*clhs4 + clhs1033*clhs24 + clhs1034*clhs34 + clhs1035*clhs44 + clhs760*clhs944 + clhs769*clhs945 + clhs778*clhs946 + clhs787*clhs947;
        lhs(5,23)=clhs1036*clhs4 + clhs1037*clhs24 + clhs1038*clhs34 + clhs1039*clhs44 + clhs800*clhs944 + clhs809*clhs945 + clhs818*clhs946 + clhs827*clhs947;
        lhs(5,24)=clhs1040*clhs4;
        lhs(5,25)=clhs1041*clhs24;
        lhs(5,26)=clhs1042*clhs34;
        lhs(5,27)=clhs1043*clhs44;
        lhs(6,0)=-clhs21*clhs7 - clhs26*clhs31 + clhs27*clhs75 - clhs36*clhs41 + clhs37*clhs81 - clhs46*clhs51 + clhs47*clhs87 + clhs69*clhs8;
        lhs(6,1)=clhs102*clhs81 - clhs105*clhs36 + clhs108*clhs87 - clhs111*clhs46 - clhs26*clhs99 + clhs69*clhs90 - clhs7*clhs93 + clhs75*clhs96;
        lhs(6,2)=clhs114*clhs69 - clhs117*clhs7 + clhs120*clhs75 - clhs123*clhs26 + clhs126*clhs81 - clhs129*clhs36 + clhs132*clhs87 - clhs135*clhs46;
        lhs(6,3)=clhs138*clhs69 - clhs141*clhs7 + clhs144*clhs75 - clhs147*clhs26 + clhs150*clhs81 - clhs153*clhs36 + clhs156*clhs87 - clhs159*clhs46;
        lhs(6,4)=clhs162*clhs69 - clhs165*clhs7 + clhs168*clhs75 - clhs171*clhs26 + clhs174*clhs81 - clhs177*clhs36 + clhs180*clhs87 - clhs183*clhs46;
        lhs(6,5)=clhs186*clhs69 - clhs189*clhs7 + clhs192*clhs75 - clhs195*clhs26 + clhs198*clhs81 - clhs201*clhs36 + clhs204*clhs87 - clhs207*clhs46;
        lhs(6,6)=clhs210*clhs69 - clhs213*clhs7 + clhs216*clhs75 - clhs219*clhs26 + clhs222*clhs81 - clhs225*clhs36 + clhs228*clhs87 - clhs231*clhs46;
        lhs(6,7)=clhs234*clhs69 - clhs237*clhs7 + clhs240*clhs75 - clhs243*clhs26 + clhs246*clhs81 - clhs249*clhs36 + clhs252*clhs87 - clhs255*clhs46;
        lhs(6,8)=clhs258*clhs69 - clhs26*clhs267 - clhs261*clhs7 + clhs264*clhs75 + clhs270*clhs81 - clhs273*clhs36 + clhs276*clhs87 - clhs279*clhs46;
        lhs(6,9)=-clhs26*clhs291 + clhs282*clhs69 - clhs285*clhs7 + clhs288*clhs75 + clhs294*clhs81 - clhs297*clhs36 + clhs300*clhs87 - clhs303*clhs46;
        lhs(6,10)=-clhs26*clhs315 + clhs306*clhs69 - clhs309*clhs7 + clhs312*clhs75 + clhs318*clhs81 - clhs321*clhs36 + clhs324*clhs87 - clhs327*clhs46;
        lhs(6,11)=-clhs26*clhs339 + clhs330*clhs69 - clhs333*clhs7 + clhs336*clhs75 + clhs342*clhs81 - clhs345*clhs36 + clhs348*clhs87 - clhs351*clhs46;
        lhs(6,12)=clhs26*clhs373 + clhs36*clhs382 + clhs361*clhs69 + clhs364*clhs7 + clhs370*clhs75 + clhs379*clhs81 + clhs388*clhs87 + clhs391*clhs46;
        lhs(6,13)=clhs26*clhs413 + clhs36*clhs422 + clhs401*clhs69 + clhs404*clhs7 + clhs410*clhs75 + clhs419*clhs81 + clhs428*clhs87 + clhs431*clhs46;
        lhs(6,14)=clhs26*clhs453 + clhs36*clhs462 + clhs441*clhs69 + clhs444*clhs7 + clhs450*clhs75 + clhs459*clhs81 + clhs46*clhs471 + clhs468*clhs87;
        lhs(6,15)=clhs26*clhs493 + clhs36*clhs502 + clhs46*clhs511 + clhs481*clhs69 + clhs484*clhs7 + clhs490*clhs75 + clhs499*clhs81 + clhs508*clhs87;
        lhs(6,16)=clhs26*clhs533 + clhs36*clhs542 + clhs46*clhs551 + clhs521*clhs69 + clhs524*clhs7 + clhs530*clhs75 + clhs539*clhs81 + clhs548*clhs87;
        lhs(6,17)=clhs26*clhs573 + clhs36*clhs582 + clhs46*clhs591 + clhs561*clhs69 + clhs564*clhs7 + clhs570*clhs75 + clhs579*clhs81 + clhs588*clhs87;
        lhs(6,18)=clhs26*clhs613 + clhs36*clhs622 + clhs46*clhs631 + clhs601*clhs69 + clhs604*clhs7 + clhs610*clhs75 + clhs619*clhs81 + clhs628*clhs87;
        lhs(6,19)=clhs26*clhs653 + clhs36*clhs662 + clhs46*clhs671 + clhs641*clhs69 + clhs644*clhs7 + clhs650*clhs75 + clhs659*clhs81 + clhs668*clhs87;
        lhs(6,20)=clhs26*clhs693 + clhs36*clhs702 + clhs46*clhs711 + clhs681*clhs69 + clhs684*clhs7 + clhs690*clhs75 + clhs699*clhs81 + clhs708*clhs87;
        lhs(6,21)=clhs26*clhs733 + clhs36*clhs742 + clhs46*clhs751 + clhs69*clhs721 + clhs7*clhs724 + clhs730*clhs75 + clhs739*clhs81 + clhs748*clhs87;
        lhs(6,22)=clhs26*clhs773 + clhs36*clhs782 + clhs46*clhs791 + clhs69*clhs761 + clhs7*clhs764 + clhs75*clhs770 + clhs779*clhs81 + clhs788*clhs87;
        lhs(6,23)=clhs26*clhs813 + clhs36*clhs822 + clhs46*clhs831 + clhs69*clhs801 + clhs7*clhs804 + clhs75*clhs810 + clhs81*clhs819 + clhs828*clhs87;
        lhs(6,24)=clhs7*clhs832;
        lhs(6,25)=clhs26*clhs833;
        lhs(6,26)=clhs36*clhs834;
        lhs(6,27)=clhs46*clhs835;
        lhs(7,0)=-clhs26*clhs837 + clhs27*clhs841 - clhs36*clhs838 + clhs37*clhs842 - clhs46*clhs839 + clhs47*clhs843 - clhs7*clhs836 + clhs8*clhs840;
        lhs(7,1)=clhs102*clhs842 + clhs108*clhs843 - clhs26*clhs845 - clhs36*clhs846 - clhs46*clhs847 - clhs7*clhs844 + clhs840*clhs90 + clhs841*clhs96;
        lhs(7,2)=clhs114*clhs840 + clhs120*clhs841 + clhs126*clhs842 + clhs132*clhs843 - clhs26*clhs849 - clhs36*clhs850 - clhs46*clhs851 - clhs7*clhs848;
        lhs(7,3)=clhs138*clhs840 + clhs144*clhs841 + clhs150*clhs842 + clhs156*clhs843 - clhs26*clhs853 - clhs36*clhs854 - clhs46*clhs855 - clhs7*clhs852;
        lhs(7,4)=clhs162*clhs840 + clhs168*clhs841 + clhs174*clhs842 + clhs180*clhs843 - clhs26*clhs857 - clhs36*clhs858 - clhs46*clhs859 - clhs7*clhs856;
        lhs(7,5)=clhs186*clhs840 + clhs192*clhs841 + clhs198*clhs842 + clhs204*clhs843 - clhs26*clhs861 - clhs36*clhs862 - clhs46*clhs863 - clhs7*clhs860;
        lhs(7,6)=clhs210*clhs840 + clhs216*clhs841 + clhs222*clhs842 + clhs228*clhs843 - clhs26*clhs865 - clhs36*clhs866 - clhs46*clhs867 - clhs7*clhs864;
        lhs(7,7)=clhs234*clhs840 + clhs240*clhs841 + clhs246*clhs842 + clhs252*clhs843 - clhs26*clhs869 - clhs36*clhs870 - clhs46*clhs871 - clhs7*clhs868;
        lhs(7,8)=clhs258*clhs840 - clhs26*clhs873 + clhs264*clhs841 + clhs270*clhs842 + clhs276*clhs843 - clhs36*clhs874 - clhs46*clhs875 - clhs7*clhs872;
        lhs(7,9)=-clhs26*clhs877 + clhs282*clhs840 + clhs288*clhs841 + clhs294*clhs842 + clhs300*clhs843 - clhs36*clhs878 - clhs46*clhs879 - clhs7*clhs876;
        lhs(7,10)=-clhs26*clhs881 + clhs306*clhs840 + clhs312*clhs841 + clhs318*clhs842 + clhs324*clhs843 - clhs36*clhs882 - clhs46*clhs883 - clhs7*clhs880;
        lhs(7,11)=-clhs26*clhs885 + clhs330*clhs840 + clhs336*clhs841 + clhs342*clhs842 + clhs348*clhs843 - clhs36*clhs886 - clhs46*clhs887 - clhs7*clhs884;
        lhs(7,12)=clhs26*clhs889 + clhs36*clhs890 + clhs361*clhs840 + clhs370*clhs841 + clhs379*clhs842 + clhs388*clhs843 + clhs46*clhs891 + clhs7*clhs888;
        lhs(7,13)=clhs26*clhs893 + clhs36*clhs894 + clhs401*clhs840 + clhs410*clhs841 + clhs419*clhs842 + clhs428*clhs843 + clhs46*clhs895 + clhs7*clhs892;
        lhs(7,14)=clhs26*clhs897 + clhs36*clhs898 + clhs441*clhs840 + clhs450*clhs841 + clhs459*clhs842 + clhs46*clhs899 + clhs468*clhs843 + clhs7*clhs896;
        lhs(7,15)=clhs26*clhs901 + clhs36*clhs902 + clhs46*clhs903 + clhs481*clhs840 + clhs490*clhs841 + clhs499*clhs842 + clhs508*clhs843 + clhs7*clhs900;
        lhs(7,16)=clhs26*clhs905 + clhs36*clhs906 + clhs46*clhs907 + clhs521*clhs840 + clhs530*clhs841 + clhs539*clhs842 + clhs548*clhs843 + clhs7*clhs904;
        lhs(7,17)=clhs26*clhs909 + clhs36*clhs910 + clhs46*clhs911 + clhs561*clhs840 + clhs570*clhs841 + clhs579*clhs842 + clhs588*clhs843 + clhs7*clhs908;
        lhs(7,18)=clhs26*clhs913 + clhs36*clhs914 + clhs46*clhs915 + clhs601*clhs840 + clhs610*clhs841 + clhs619*clhs842 + clhs628*clhs843 + clhs7*clhs912;
        lhs(7,19)=clhs26*clhs917 + clhs36*clhs918 + clhs46*clhs919 + clhs641*clhs840 + clhs650*clhs841 + clhs659*clhs842 + clhs668*clhs843 + clhs7*clhs916;
        lhs(7,20)=clhs26*clhs921 + clhs36*clhs922 + clhs46*clhs923 + clhs681*clhs840 + clhs690*clhs841 + clhs699*clhs842 + clhs7*clhs920 + clhs708*clhs843;
        lhs(7,21)=clhs26*clhs925 + clhs36*clhs926 + clhs46*clhs927 + clhs7*clhs924 + clhs721*clhs840 + clhs730*clhs841 + clhs739*clhs842 + clhs748*clhs843;
        lhs(7,22)=clhs26*clhs929 + clhs36*clhs930 + clhs46*clhs931 + clhs7*clhs928 + clhs761*clhs840 + clhs770*clhs841 + clhs779*clhs842 + clhs788*clhs843;
        lhs(7,23)=clhs26*clhs933 + clhs36*clhs934 + clhs46*clhs935 + clhs7*clhs932 + clhs801*clhs840 + clhs810*clhs841 + clhs819*clhs842 + clhs828*clhs843;
        lhs(7,24)=clhs7*clhs936;
        lhs(7,25)=clhs26*clhs937;
        lhs(7,26)=clhs36*clhs938;
        lhs(7,27)=clhs46*clhs939;
        lhs(8,0)=-clhs26*clhs941 + clhs27*clhs945 - clhs36*clhs942 + clhs37*clhs946 - clhs46*clhs943 + clhs47*clhs947 - clhs7*clhs940 + clhs8*clhs944;
        lhs(8,1)=clhs102*clhs946 + clhs108*clhs947 - clhs26*clhs949 - clhs36*clhs950 - clhs46*clhs951 - clhs7*clhs948 + clhs90*clhs944 + clhs945*clhs96;
        lhs(8,2)=clhs114*clhs944 + clhs120*clhs945 + clhs126*clhs946 + clhs132*clhs947 - clhs26*clhs953 - clhs36*clhs954 - clhs46*clhs955 - clhs7*clhs952;
        lhs(8,3)=clhs138*clhs944 + clhs144*clhs945 + clhs150*clhs946 + clhs156*clhs947 - clhs26*clhs957 - clhs36*clhs958 - clhs46*clhs959 - clhs7*clhs956;
        lhs(8,4)=clhs162*clhs944 + clhs168*clhs945 + clhs174*clhs946 + clhs180*clhs947 - clhs26*clhs961 - clhs36*clhs962 - clhs46*clhs963 - clhs7*clhs960;
        lhs(8,5)=clhs186*clhs944 + clhs192*clhs945 + clhs198*clhs946 + clhs204*clhs947 - clhs26*clhs965 - clhs36*clhs966 - clhs46*clhs967 - clhs7*clhs964;
        lhs(8,6)=clhs210*clhs944 + clhs216*clhs945 + clhs222*clhs946 + clhs228*clhs947 - clhs26*clhs969 - clhs36*clhs970 - clhs46*clhs971 - clhs7*clhs968;
        lhs(8,7)=clhs234*clhs944 + clhs240*clhs945 + clhs246*clhs946 + clhs252*clhs947 - clhs26*clhs973 - clhs36*clhs974 - clhs46*clhs975 - clhs7*clhs972;
        lhs(8,8)=clhs258*clhs944 - clhs26*clhs977 + clhs264*clhs945 + clhs270*clhs946 + clhs276*clhs947 - clhs36*clhs978 - clhs46*clhs979 - clhs7*clhs976;
        lhs(8,9)=-clhs26*clhs981 + clhs282*clhs944 + clhs288*clhs945 + clhs294*clhs946 + clhs300*clhs947 - clhs36*clhs982 - clhs46*clhs983 - clhs7*clhs980;
        lhs(8,10)=-clhs26*clhs985 + clhs306*clhs944 + clhs312*clhs945 + clhs318*clhs946 + clhs324*clhs947 - clhs36*clhs986 - clhs46*clhs987 - clhs7*clhs984;
        lhs(8,11)=-clhs26*clhs989 + clhs330*clhs944 + clhs336*clhs945 + clhs342*clhs946 + clhs348*clhs947 - clhs36*clhs990 - clhs46*clhs991 - clhs7*clhs988;
        lhs(8,12)=clhs26*clhs993 + clhs36*clhs994 + clhs361*clhs944 + clhs370*clhs945 + clhs379*clhs946 + clhs388*clhs947 + clhs46*clhs995 + clhs7*clhs992;
        lhs(8,13)=clhs26*clhs997 + clhs36*clhs998 + clhs401*clhs944 + clhs410*clhs945 + clhs419*clhs946 + clhs428*clhs947 + clhs46*clhs999 + clhs7*clhs996;
        lhs(8,14)=clhs1000*clhs7 + clhs1001*clhs26 + clhs1002*clhs36 + clhs1003*clhs46 + clhs441*clhs944 + clhs450*clhs945 + clhs459*clhs946 + clhs468*clhs947;
        lhs(8,15)=clhs1004*clhs7 + clhs1005*clhs26 + clhs1006*clhs36 + clhs1007*clhs46 + clhs481*clhs944 + clhs490*clhs945 + clhs499*clhs946 + clhs508*clhs947;
        lhs(8,16)=clhs1008*clhs7 + clhs1009*clhs26 + clhs1010*clhs36 + clhs1011*clhs46 + clhs521*clhs944 + clhs530*clhs945 + clhs539*clhs946 + clhs548*clhs947;
        lhs(8,17)=clhs1012*clhs7 + clhs1013*clhs26 + clhs1014*clhs36 + clhs1015*clhs46 + clhs561*clhs944 + clhs570*clhs945 + clhs579*clhs946 + clhs588*clhs947;
        lhs(8,18)=clhs1016*clhs7 + clhs1017*clhs26 + clhs1018*clhs36 + clhs1019*clhs46 + clhs601*clhs944 + clhs610*clhs945 + clhs619*clhs946 + clhs628*clhs947;
        lhs(8,19)=clhs1020*clhs7 + clhs1021*clhs26 + clhs1022*clhs36 + clhs1023*clhs46 + clhs641*clhs944 + clhs650*clhs945 + clhs659*clhs946 + clhs668*clhs947;
        lhs(8,20)=clhs1024*clhs7 + clhs1025*clhs26 + clhs1026*clhs36 + clhs1027*clhs46 + clhs681*clhs944 + clhs690*clhs945 + clhs699*clhs946 + clhs708*clhs947;
        lhs(8,21)=clhs1028*clhs7 + clhs1029*clhs26 + clhs1030*clhs36 + clhs1031*clhs46 + clhs721*clhs944 + clhs730*clhs945 + clhs739*clhs946 + clhs748*clhs947;
        lhs(8,22)=clhs1032*clhs7 + clhs1033*clhs26 + clhs1034*clhs36 + clhs1035*clhs46 + clhs761*clhs944 + clhs770*clhs945 + clhs779*clhs946 + clhs788*clhs947;
        lhs(8,23)=clhs1036*clhs7 + clhs1037*clhs26 + clhs1038*clhs36 + clhs1039*clhs46 + clhs801*clhs944 + clhs810*clhs945 + clhs819*clhs946 + clhs828*clhs947;
        lhs(8,24)=clhs1040*clhs7;
        lhs(8,25)=clhs1041*clhs26;
        lhs(8,26)=clhs1042*clhs36;
        lhs(8,27)=clhs1043*clhs46;
        lhs(9,0)=-clhs10*clhs21 + clhs11*clhs69 - clhs28*clhs31 + clhs29*clhs75 - clhs38*clhs41 + clhs39*clhs81 - clhs48*clhs51 + clhs49*clhs87;
        lhs(9,1)=-clhs10*clhs93 + clhs103*clhs81 - clhs105*clhs38 + clhs109*clhs87 - clhs111*clhs48 - clhs28*clhs99 + clhs69*clhs91 + clhs75*clhs97;
        lhs(9,2)=-clhs10*clhs117 + clhs115*clhs69 + clhs121*clhs75 - clhs123*clhs28 + clhs127*clhs81 - clhs129*clhs38 + clhs133*clhs87 - clhs135*clhs48;
        lhs(9,3)=-clhs10*clhs141 + clhs139*clhs69 + clhs145*clhs75 - clhs147*clhs28 + clhs151*clhs81 - clhs153*clhs38 + clhs157*clhs87 - clhs159*clhs48;
        lhs(9,4)=-clhs10*clhs165 + clhs163*clhs69 + clhs169*clhs75 - clhs171*clhs28 + clhs175*clhs81 - clhs177*clhs38 + clhs181*clhs87 - clhs183*clhs48;
        lhs(9,5)=-clhs10*clhs189 + clhs187*clhs69 + clhs193*clhs75 - clhs195*clhs28 + clhs199*clhs81 - clhs201*clhs38 + clhs205*clhs87 - clhs207*clhs48;
        lhs(9,6)=-clhs10*clhs213 + clhs211*clhs69 + clhs217*clhs75 - clhs219*clhs28 + clhs223*clhs81 - clhs225*clhs38 + clhs229*clhs87 - clhs231*clhs48;
        lhs(9,7)=-clhs10*clhs237 + clhs235*clhs69 + clhs241*clhs75 - clhs243*clhs28 + clhs247*clhs81 - clhs249*clhs38 + clhs253*clhs87 - clhs255*clhs48;
        lhs(9,8)=-clhs10*clhs261 + clhs259*clhs69 + clhs265*clhs75 - clhs267*clhs28 + clhs271*clhs81 - clhs273*clhs38 + clhs277*clhs87 - clhs279*clhs48;
        lhs(9,9)=-clhs10*clhs285 - clhs28*clhs291 + clhs283*clhs69 + clhs289*clhs75 + clhs295*clhs81 - clhs297*clhs38 + clhs301*clhs87 - clhs303*clhs48;
        lhs(9,10)=-clhs10*clhs309 - clhs28*clhs315 + clhs307*clhs69 + clhs313*clhs75 + clhs319*clhs81 - clhs321*clhs38 + clhs325*clhs87 - clhs327*clhs48;
        lhs(9,11)=-clhs10*clhs333 - clhs28*clhs339 + clhs331*clhs69 + clhs337*clhs75 + clhs343*clhs81 - clhs345*clhs38 + clhs349*clhs87 - clhs351*clhs48;
        lhs(9,12)=clhs10*clhs364 + clhs28*clhs373 + clhs362*clhs69 + clhs371*clhs75 + clhs38*clhs382 + clhs380*clhs81 + clhs389*clhs87 + clhs391*clhs48;
        lhs(9,13)=clhs10*clhs404 + clhs28*clhs413 + clhs38*clhs422 + clhs402*clhs69 + clhs411*clhs75 + clhs420*clhs81 + clhs429*clhs87 + clhs431*clhs48;
        lhs(9,14)=clhs10*clhs444 + clhs28*clhs453 + clhs38*clhs462 + clhs442*clhs69 + clhs451*clhs75 + clhs460*clhs81 + clhs469*clhs87 + clhs471*clhs48;
        lhs(9,15)=clhs10*clhs484 + clhs28*clhs493 + clhs38*clhs502 + clhs48*clhs511 + clhs482*clhs69 + clhs491*clhs75 + clhs500*clhs81 + clhs509*clhs87;
        lhs(9,16)=clhs10*clhs524 + clhs28*clhs533 + clhs38*clhs542 + clhs48*clhs551 + clhs522*clhs69 + clhs531*clhs75 + clhs540*clhs81 + clhs549*clhs87;
        lhs(9,17)=clhs10*clhs564 + clhs28*clhs573 + clhs38*clhs582 + clhs48*clhs591 + clhs562*clhs69 + clhs571*clhs75 + clhs580*clhs81 + clhs589*clhs87;
        lhs(9,18)=clhs10*clhs604 + clhs28*clhs613 + clhs38*clhs622 + clhs48*clhs631 + clhs602*clhs69 + clhs611*clhs75 + clhs620*clhs81 + clhs629*clhs87;
        lhs(9,19)=clhs10*clhs644 + clhs28*clhs653 + clhs38*clhs662 + clhs48*clhs671 + clhs642*clhs69 + clhs651*clhs75 + clhs660*clhs81 + clhs669*clhs87;
        lhs(9,20)=clhs10*clhs684 + clhs28*clhs693 + clhs38*clhs702 + clhs48*clhs711 + clhs682*clhs69 + clhs691*clhs75 + clhs700*clhs81 + clhs709*clhs87;
        lhs(9,21)=clhs10*clhs724 + clhs28*clhs733 + clhs38*clhs742 + clhs48*clhs751 + clhs69*clhs722 + clhs731*clhs75 + clhs740*clhs81 + clhs749*clhs87;
        lhs(9,22)=clhs10*clhs764 + clhs28*clhs773 + clhs38*clhs782 + clhs48*clhs791 + clhs69*clhs762 + clhs75*clhs771 + clhs780*clhs81 + clhs789*clhs87;
        lhs(9,23)=clhs10*clhs804 + clhs28*clhs813 + clhs38*clhs822 + clhs48*clhs831 + clhs69*clhs802 + clhs75*clhs811 + clhs81*clhs820 + clhs829*clhs87;
        lhs(9,24)=clhs10*clhs832;
        lhs(9,25)=clhs28*clhs833;
        lhs(9,26)=clhs38*clhs834;
        lhs(9,27)=clhs48*clhs835;
        lhs(10,0)=-clhs10*clhs836 + clhs11*clhs840 - clhs28*clhs837 + clhs29*clhs841 - clhs38*clhs838 + clhs39*clhs842 - clhs48*clhs839 + clhs49*clhs843;
        lhs(10,1)=-clhs10*clhs844 + clhs103*clhs842 + clhs109*clhs843 - clhs28*clhs845 - clhs38*clhs846 - clhs48*clhs847 + clhs840*clhs91 + clhs841*clhs97;
        lhs(10,2)=-clhs10*clhs848 + clhs115*clhs840 + clhs121*clhs841 + clhs127*clhs842 + clhs133*clhs843 - clhs28*clhs849 - clhs38*clhs850 - clhs48*clhs851;
        lhs(10,3)=-clhs10*clhs852 + clhs139*clhs840 + clhs145*clhs841 + clhs151*clhs842 + clhs157*clhs843 - clhs28*clhs853 - clhs38*clhs854 - clhs48*clhs855;
        lhs(10,4)=-clhs10*clhs856 + clhs163*clhs840 + clhs169*clhs841 + clhs175*clhs842 + clhs181*clhs843 - clhs28*clhs857 - clhs38*clhs858 - clhs48*clhs859;
        lhs(10,5)=-clhs10*clhs860 + clhs187*clhs840 + clhs193*clhs841 + clhs199*clhs842 + clhs205*clhs843 - clhs28*clhs861 - clhs38*clhs862 - clhs48*clhs863;
        lhs(10,6)=-clhs10*clhs864 + clhs211*clhs840 + clhs217*clhs841 + clhs223*clhs842 + clhs229*clhs843 - clhs28*clhs865 - clhs38*clhs866 - clhs48*clhs867;
        lhs(10,7)=-clhs10*clhs868 + clhs235*clhs840 + clhs241*clhs841 + clhs247*clhs842 + clhs253*clhs843 - clhs28*clhs869 - clhs38*clhs870 - clhs48*clhs871;
        lhs(10,8)=-clhs10*clhs872 + clhs259*clhs840 + clhs265*clhs841 + clhs271*clhs842 + clhs277*clhs843 - clhs28*clhs873 - clhs38*clhs874 - clhs48*clhs875;
        lhs(10,9)=-clhs10*clhs876 - clhs28*clhs877 + clhs283*clhs840 + clhs289*clhs841 + clhs295*clhs842 + clhs301*clhs843 - clhs38*clhs878 - clhs48*clhs879;
        lhs(10,10)=-clhs10*clhs880 - clhs28*clhs881 + clhs307*clhs840 + clhs313*clhs841 + clhs319*clhs842 + clhs325*clhs843 - clhs38*clhs882 - clhs48*clhs883;
        lhs(10,11)=-clhs10*clhs884 - clhs28*clhs885 + clhs331*clhs840 + clhs337*clhs841 + clhs343*clhs842 + clhs349*clhs843 - clhs38*clhs886 - clhs48*clhs887;
        lhs(10,12)=clhs10*clhs888 + clhs28*clhs889 + clhs362*clhs840 + clhs371*clhs841 + clhs38*clhs890 + clhs380*clhs842 + clhs389*clhs843 + clhs48*clhs891;
        lhs(10,13)=clhs10*clhs892 + clhs28*clhs893 + clhs38*clhs894 + clhs402*clhs840 + clhs411*clhs841 + clhs420*clhs842 + clhs429*clhs843 + clhs48*clhs895;
        lhs(10,14)=clhs10*clhs896 + clhs28*clhs897 + clhs38*clhs898 + clhs442*clhs840 + clhs451*clhs841 + clhs460*clhs842 + clhs469*clhs843 + clhs48*clhs899;
        lhs(10,15)=clhs10*clhs900 + clhs28*clhs901 + clhs38*clhs902 + clhs48*clhs903 + clhs482*clhs840 + clhs491*clhs841 + clhs500*clhs842 + clhs509*clhs843;
        lhs(10,16)=clhs10*clhs904 + clhs28*clhs905 + clhs38*clhs906 + clhs48*clhs907 + clhs522*clhs840 + clhs531*clhs841 + clhs540*clhs842 + clhs549*clhs843;
        lhs(10,17)=clhs10*clhs908 + clhs28*clhs909 + clhs38*clhs910 + clhs48*clhs911 + clhs562*clhs840 + clhs571*clhs841 + clhs580*clhs842 + clhs589*clhs843;
        lhs(10,18)=clhs10*clhs912 + clhs28*clhs913 + clhs38*clhs914 + clhs48*clhs915 + clhs602*clhs840 + clhs611*clhs841 + clhs620*clhs842 + clhs629*clhs843;
        lhs(10,19)=clhs10*clhs916 + clhs28*clhs917 + clhs38*clhs918 + clhs48*clhs919 + clhs642*clhs840 + clhs651*clhs841 + clhs660*clhs842 + clhs669*clhs843;
        lhs(10,20)=clhs10*clhs920 + clhs28*clhs921 + clhs38*clhs922 + clhs48*clhs923 + clhs682*clhs840 + clhs691*clhs841 + clhs700*clhs842 + clhs709*clhs843;
        lhs(10,21)=clhs10*clhs924 + clhs28*clhs925 + clhs38*clhs926 + clhs48*clhs927 + clhs722*clhs840 + clhs731*clhs841 + clhs740*clhs842 + clhs749*clhs843;
        lhs(10,22)=clhs10*clhs928 + clhs28*clhs929 + clhs38*clhs930 + clhs48*clhs931 + clhs762*clhs840 + clhs771*clhs841 + clhs780*clhs842 + clhs789*clhs843;
        lhs(10,23)=clhs10*clhs932 + clhs28*clhs933 + clhs38*clhs934 + clhs48*clhs935 + clhs802*clhs840 + clhs811*clhs841 + clhs820*clhs842 + clhs829*clhs843;
        lhs(10,24)=clhs10*clhs936;
        lhs(10,25)=clhs28*clhs937;
        lhs(10,26)=clhs38*clhs938;
        lhs(10,27)=clhs48*clhs939;
        lhs(11,0)=-clhs10*clhs940 + clhs11*clhs944 - clhs28*clhs941 + clhs29*clhs945 - clhs38*clhs942 + clhs39*clhs946 - clhs48*clhs943 + clhs49*clhs947;
        lhs(11,1)=-clhs10*clhs948 + clhs103*clhs946 + clhs109*clhs947 - clhs28*clhs949 - clhs38*clhs950 - clhs48*clhs951 + clhs91*clhs944 + clhs945*clhs97;
        lhs(11,2)=-clhs10*clhs952 + clhs115*clhs944 + clhs121*clhs945 + clhs127*clhs946 + clhs133*clhs947 - clhs28*clhs953 - clhs38*clhs954 - clhs48*clhs955;
        lhs(11,3)=-clhs10*clhs956 + clhs139*clhs944 + clhs145*clhs945 + clhs151*clhs946 + clhs157*clhs947 - clhs28*clhs957 - clhs38*clhs958 - clhs48*clhs959;
        lhs(11,4)=-clhs10*clhs960 + clhs163*clhs944 + clhs169*clhs945 + clhs175*clhs946 + clhs181*clhs947 - clhs28*clhs961 - clhs38*clhs962 - clhs48*clhs963;
        lhs(11,5)=-clhs10*clhs964 + clhs187*clhs944 + clhs193*clhs945 + clhs199*clhs946 + clhs205*clhs947 - clhs28*clhs965 - clhs38*clhs966 - clhs48*clhs967;
        lhs(11,6)=-clhs10*clhs968 + clhs211*clhs944 + clhs217*clhs945 + clhs223*clhs946 + clhs229*clhs947 - clhs28*clhs969 - clhs38*clhs970 - clhs48*clhs971;
        lhs(11,7)=-clhs10*clhs972 + clhs235*clhs944 + clhs241*clhs945 + clhs247*clhs946 + clhs253*clhs947 - clhs28*clhs973 - clhs38*clhs974 - clhs48*clhs975;
        lhs(11,8)=-clhs10*clhs976 + clhs259*clhs944 + clhs265*clhs945 + clhs271*clhs946 + clhs277*clhs947 - clhs28*clhs977 - clhs38*clhs978 - clhs48*clhs979;
        lhs(11,9)=-clhs10*clhs980 - clhs28*clhs981 + clhs283*clhs944 + clhs289*clhs945 + clhs295*clhs946 + clhs301*clhs947 - clhs38*clhs982 - clhs48*clhs983;
        lhs(11,10)=-clhs10*clhs984 - clhs28*clhs985 + clhs307*clhs944 + clhs313*clhs945 + clhs319*clhs946 + clhs325*clhs947 - clhs38*clhs986 - clhs48*clhs987;
        lhs(11,11)=-clhs10*clhs988 - clhs28*clhs989 + clhs331*clhs944 + clhs337*clhs945 + clhs343*clhs946 + clhs349*clhs947 - clhs38*clhs990 - clhs48*clhs991;
        lhs(11,12)=clhs10*clhs992 + clhs28*clhs993 + clhs362*clhs944 + clhs371*clhs945 + clhs38*clhs994 + clhs380*clhs946 + clhs389*clhs947 + clhs48*clhs995;
        lhs(11,13)=clhs10*clhs996 + clhs28*clhs997 + clhs38*clhs998 + clhs402*clhs944 + clhs411*clhs945 + clhs420*clhs946 + clhs429*clhs947 + clhs48*clhs999;
        lhs(11,14)=clhs10*clhs1000 + clhs1001*clhs28 + clhs1002*clhs38 + clhs1003*clhs48 + clhs442*clhs944 + clhs451*clhs945 + clhs460*clhs946 + clhs469*clhs947;
        lhs(11,15)=clhs10*clhs1004 + clhs1005*clhs28 + clhs1006*clhs38 + clhs1007*clhs48 + clhs482*clhs944 + clhs491*clhs945 + clhs500*clhs946 + clhs509*clhs947;
        lhs(11,16)=clhs10*clhs1008 + clhs1009*clhs28 + clhs1010*clhs38 + clhs1011*clhs48 + clhs522*clhs944 + clhs531*clhs945 + clhs540*clhs946 + clhs549*clhs947;
        lhs(11,17)=clhs10*clhs1012 + clhs1013*clhs28 + clhs1014*clhs38 + clhs1015*clhs48 + clhs562*clhs944 + clhs571*clhs945 + clhs580*clhs946 + clhs589*clhs947;
        lhs(11,18)=clhs10*clhs1016 + clhs1017*clhs28 + clhs1018*clhs38 + clhs1019*clhs48 + clhs602*clhs944 + clhs611*clhs945 + clhs620*clhs946 + clhs629*clhs947;
        lhs(11,19)=clhs10*clhs1020 + clhs1021*clhs28 + clhs1022*clhs38 + clhs1023*clhs48 + clhs642*clhs944 + clhs651*clhs945 + clhs660*clhs946 + clhs669*clhs947;
        lhs(11,20)=clhs10*clhs1024 + clhs1025*clhs28 + clhs1026*clhs38 + clhs1027*clhs48 + clhs682*clhs944 + clhs691*clhs945 + clhs700*clhs946 + clhs709*clhs947;
        lhs(11,21)=clhs10*clhs1028 + clhs1029*clhs28 + clhs1030*clhs38 + clhs1031*clhs48 + clhs722*clhs944 + clhs731*clhs945 + clhs740*clhs946 + clhs749*clhs947;
        lhs(11,22)=clhs10*clhs1032 + clhs1033*clhs28 + clhs1034*clhs38 + clhs1035*clhs48 + clhs762*clhs944 + clhs771*clhs945 + clhs780*clhs946 + clhs789*clhs947;
        lhs(11,23)=clhs10*clhs1036 + clhs1037*clhs28 + clhs1038*clhs38 + clhs1039*clhs48 + clhs802*clhs944 + clhs811*clhs945 + clhs820*clhs946 + clhs829*clhs947;
        lhs(11,24)=clhs10*clhs1040;
        lhs(11,25)=clhs1041*clhs28;
        lhs(11,26)=clhs1042*clhs38;
        lhs(11,27)=clhs1043*clhs48;
        lhs(12,0)=penalty_parameter*(clhs1044*clhs53 + clhs1045*clhs70 + clhs1046*clhs76 + clhs1047*clhs82);
        lhs(12,1)=penalty_parameter*(clhs1048*clhs53 + clhs1049*clhs70 + clhs1050*clhs76 + clhs1051*clhs82);
        lhs(12,2)=penalty_parameter*(clhs1052*clhs53 + clhs1053*clhs70 + clhs1054*clhs76 + clhs1055*clhs82);
        lhs(12,3)=penalty_parameter*(clhs1056*clhs53 + clhs1057*clhs70 + clhs1058*clhs76 + clhs1059*clhs82);
        lhs(12,4)=penalty_parameter*(clhs1060*clhs53 + clhs1061*clhs70 + clhs1062*clhs76 + clhs1063*clhs82);
        lhs(12,5)=penalty_parameter*(clhs1064*clhs53 + clhs1065*clhs70 + clhs1066*clhs76 + clhs1067*clhs82);
        lhs(12,6)=penalty_parameter*(clhs1068*clhs53 + clhs1069*clhs70 + clhs1070*clhs76 + clhs1071*clhs82);
        lhs(12,7)=penalty_parameter*(clhs1072*clhs53 + clhs1073*clhs70 + clhs1074*clhs76 + clhs1075*clhs82);
        lhs(12,8)=penalty_parameter*(clhs1076*clhs53 + clhs1077*clhs70 + clhs1078*clhs76 + clhs1079*clhs82);
        lhs(12,9)=penalty_parameter*(clhs1080*clhs53 + clhs1081*clhs70 + clhs1082*clhs76 + clhs1083*clhs82);
        lhs(12,10)=penalty_parameter*(clhs1084*clhs53 + clhs1085*clhs70 + clhs1086*clhs76 + clhs1087*clhs82);
        lhs(12,11)=penalty_parameter*(clhs1088*clhs53 + clhs1089*clhs70 + clhs1090*clhs76 + clhs1091*clhs82);
        lhs(12,12)=-clhs356*clhs69 - clhs364*clhs53 - clhs365*clhs75 - clhs373*clhs70 - clhs374*clhs81 - clhs382*clhs76 - clhs383*clhs87 - clhs391*clhs82;
        lhs(12,13)=-clhs396*clhs69 - clhs404*clhs53 - clhs405*clhs75 - clhs413*clhs70 - clhs414*clhs81 - clhs422*clhs76 - clhs423*clhs87 - clhs431*clhs82;
        lhs(12,14)=-clhs436*clhs69 - clhs444*clhs53 - clhs445*clhs75 - clhs453*clhs70 - clhs454*clhs81 - clhs462*clhs76 - clhs463*clhs87 - clhs471*clhs82;
        lhs(12,15)=-clhs476*clhs69 - clhs484*clhs53 - clhs485*clhs75 - clhs493*clhs70 - clhs494*clhs81 - clhs502*clhs76 - clhs503*clhs87 - clhs511*clhs82;
        lhs(12,16)=-clhs516*clhs69 - clhs524*clhs53 - clhs525*clhs75 - clhs533*clhs70 - clhs534*clhs81 - clhs542*clhs76 - clhs543*clhs87 - clhs551*clhs82;
        lhs(12,17)=-clhs53*clhs564 - clhs556*clhs69 - clhs565*clhs75 - clhs573*clhs70 - clhs574*clhs81 - clhs582*clhs76 - clhs583*clhs87 - clhs591*clhs82;
        lhs(12,18)=-clhs53*clhs604 - clhs596*clhs69 - clhs605*clhs75 - clhs613*clhs70 - clhs614*clhs81 - clhs622*clhs76 - clhs623*clhs87 - clhs631*clhs82;
        lhs(12,19)=-clhs53*clhs644 - clhs636*clhs69 - clhs645*clhs75 - clhs653*clhs70 - clhs654*clhs81 - clhs662*clhs76 - clhs663*clhs87 - clhs671*clhs82;
        lhs(12,20)=-clhs53*clhs684 - clhs676*clhs69 - clhs685*clhs75 - clhs693*clhs70 - clhs694*clhs81 - clhs702*clhs76 - clhs703*clhs87 - clhs711*clhs82;
        lhs(12,21)=-clhs53*clhs724 - clhs69*clhs716 - clhs70*clhs733 - clhs725*clhs75 - clhs734*clhs81 - clhs742*clhs76 - clhs743*clhs87 - clhs751*clhs82;
        lhs(12,22)=-clhs53*clhs764 - clhs69*clhs756 - clhs70*clhs773 - clhs75*clhs765 - clhs76*clhs782 - clhs774*clhs81 - clhs783*clhs87 - clhs791*clhs82;
        lhs(12,23)=-clhs53*clhs804 - clhs69*clhs796 - clhs70*clhs813 - clhs75*clhs805 - clhs76*clhs822 - clhs81*clhs814 - clhs82*clhs831 - clhs823*clhs87;
        lhs(12,24)=-clhs53*clhs832;
        lhs(12,25)=-clhs70*clhs833;
        lhs(12,26)=-clhs76*clhs834;
        lhs(12,27)=-clhs82*clhs835;
        lhs(13,0)=penalty_parameter*(clhs1092*clhs53 + clhs1093*clhs70 + clhs1094*clhs76 + clhs1095*clhs82);
        lhs(13,1)=penalty_parameter*(clhs1096*clhs53 + clhs1097*clhs70 + clhs1098*clhs76 + clhs1099*clhs82);
        lhs(13,2)=penalty_parameter*(clhs1100*clhs53 + clhs1101*clhs70 + clhs1102*clhs76 + clhs1103*clhs82);
        lhs(13,3)=penalty_parameter*(clhs1104*clhs53 + clhs1105*clhs70 + clhs1106*clhs76 + clhs1107*clhs82);
        lhs(13,4)=penalty_parameter*(clhs1108*clhs53 + clhs1109*clhs70 + clhs1110*clhs76 + clhs1111*clhs82);
        lhs(13,5)=penalty_parameter*(clhs1112*clhs53 + clhs1113*clhs70 + clhs1114*clhs76 + clhs1115*clhs82);
        lhs(13,6)=penalty_parameter*(clhs1116*clhs53 + clhs1117*clhs70 + clhs1118*clhs76 + clhs1119*clhs82);
        lhs(13,7)=penalty_parameter*(clhs1120*clhs53 + clhs1121*clhs70 + clhs1122*clhs76 + clhs1123*clhs82);
        lhs(13,8)=penalty_parameter*(clhs1124*clhs53 + clhs1125*clhs70 + clhs1126*clhs76 + clhs1127*clhs82);
        lhs(13,9)=penalty_parameter*(clhs1128*clhs53 + clhs1129*clhs70 + clhs1130*clhs76 + clhs1131*clhs82);
        lhs(13,10)=penalty_parameter*(clhs1132*clhs53 + clhs1133*clhs70 + clhs1134*clhs76 + clhs1135*clhs82);
        lhs(13,11)=penalty_parameter*(clhs1136*clhs53 + clhs1137*clhs70 + clhs1138*clhs76 + clhs1139*clhs82);
        lhs(13,12)=-clhs356*clhs840 - clhs365*clhs841 - clhs374*clhs842 - clhs383*clhs843 - clhs53*clhs888 - clhs70*clhs889 - clhs76*clhs890 - clhs82*clhs891;
        lhs(13,13)=-clhs396*clhs840 - clhs405*clhs841 - clhs414*clhs842 - clhs423*clhs843 - clhs53*clhs892 - clhs70*clhs893 - clhs76*clhs894 - clhs82*clhs895;
        lhs(13,14)=-clhs436*clhs840 - clhs445*clhs841 - clhs454*clhs842 - clhs463*clhs843 - clhs53*clhs896 - clhs70*clhs897 - clhs76*clhs898 - clhs82*clhs899;
        lhs(13,15)=-clhs476*clhs840 - clhs485*clhs841 - clhs494*clhs842 - clhs503*clhs843 - clhs53*clhs900 - clhs70*clhs901 - clhs76*clhs902 - clhs82*clhs903;
        lhs(13,16)=-clhs516*clhs840 - clhs525*clhs841 - clhs53*clhs904 - clhs534*clhs842 - clhs543*clhs843 - clhs70*clhs905 - clhs76*clhs906 - clhs82*clhs907;
        lhs(13,17)=-clhs53*clhs908 - clhs556*clhs840 - clhs565*clhs841 - clhs574*clhs842 - clhs583*clhs843 - clhs70*clhs909 - clhs76*clhs910 - clhs82*clhs911;
        lhs(13,18)=-clhs53*clhs912 - clhs596*clhs840 - clhs605*clhs841 - clhs614*clhs842 - clhs623*clhs843 - clhs70*clhs913 - clhs76*clhs914 - clhs82*clhs915;
        lhs(13,19)=-clhs53*clhs916 - clhs636*clhs840 - clhs645*clhs841 - clhs654*clhs842 - clhs663*clhs843 - clhs70*clhs917 - clhs76*clhs918 - clhs82*clhs919;
        lhs(13,20)=-clhs53*clhs920 - clhs676*clhs840 - clhs685*clhs841 - clhs694*clhs842 - clhs70*clhs921 - clhs703*clhs843 - clhs76*clhs922 - clhs82*clhs923;
        lhs(13,21)=-clhs53*clhs924 - clhs70*clhs925 - clhs716*clhs840 - clhs725*clhs841 - clhs734*clhs842 - clhs743*clhs843 - clhs76*clhs926 - clhs82*clhs927;
        lhs(13,22)=-clhs53*clhs928 - clhs70*clhs929 - clhs756*clhs840 - clhs76*clhs930 - clhs765*clhs841 - clhs774*clhs842 - clhs783*clhs843 - clhs82*clhs931;
        lhs(13,23)=-clhs53*clhs932 - clhs70*clhs933 - clhs76*clhs934 - clhs796*clhs840 - clhs805*clhs841 - clhs814*clhs842 - clhs82*clhs935 - clhs823*clhs843;
        lhs(13,24)=-clhs53*clhs936;
        lhs(13,25)=-clhs70*clhs937;
        lhs(13,26)=-clhs76*clhs938;
        lhs(13,27)=-clhs82*clhs939;
        lhs(14,0)=penalty_parameter*(clhs1140*clhs53 + clhs1141*clhs70 + clhs1142*clhs76 + clhs1143*clhs82);
        lhs(14,1)=penalty_parameter*(clhs1144*clhs53 + clhs1145*clhs70 + clhs1146*clhs76 + clhs1147*clhs82);
        lhs(14,2)=penalty_parameter*(clhs1148*clhs53 + clhs1149*clhs70 + clhs1150*clhs76 + clhs1151*clhs82);
        lhs(14,3)=penalty_parameter*(clhs1152*clhs53 + clhs1153*clhs70 + clhs1154*clhs76 + clhs1155*clhs82);
        lhs(14,4)=penalty_parameter*(clhs1156*clhs53 + clhs1157*clhs70 + clhs1158*clhs76 + clhs1159*clhs82);
        lhs(14,5)=penalty_parameter*(clhs1160*clhs53 + clhs1161*clhs70 + clhs1162*clhs76 + clhs1163*clhs82);
        lhs(14,6)=penalty_parameter*(clhs1164*clhs53 + clhs1165*clhs70 + clhs1166*clhs76 + clhs1167*clhs82);
        lhs(14,7)=penalty_parameter*(clhs1168*clhs53 + clhs1169*clhs70 + clhs1170*clhs76 + clhs1171*clhs82);
        lhs(14,8)=penalty_parameter*(clhs1172*clhs53 + clhs1173*clhs70 + clhs1174*clhs76 + clhs1175*clhs82);
        lhs(14,9)=penalty_parameter*(clhs1176*clhs53 + clhs1177*clhs70 + clhs1178*clhs76 + clhs1179*clhs82);
        lhs(14,10)=penalty_parameter*(clhs1180*clhs53 + clhs1181*clhs70 + clhs1182*clhs76 + clhs1183*clhs82);
        lhs(14,11)=penalty_parameter*(clhs1184*clhs53 + clhs1185*clhs70 + clhs1186*clhs76 + clhs1187*clhs82);
        lhs(14,12)=-clhs356*clhs944 - clhs365*clhs945 - clhs374*clhs946 - clhs383*clhs947 - clhs53*clhs992 - clhs70*clhs993 - clhs76*clhs994 - clhs82*clhs995;
        lhs(14,13)=-clhs396*clhs944 - clhs405*clhs945 - clhs414*clhs946 - clhs423*clhs947 - clhs53*clhs996 - clhs70*clhs997 - clhs76*clhs998 - clhs82*clhs999;
        lhs(14,14)=-clhs1000*clhs53 - clhs1001*clhs70 - clhs1002*clhs76 - clhs1003*clhs82 - clhs436*clhs944 - clhs445*clhs945 - clhs454*clhs946 - clhs463*clhs947;
        lhs(14,15)=-clhs1004*clhs53 - clhs1005*clhs70 - clhs1006*clhs76 - clhs1007*clhs82 - clhs476*clhs944 - clhs485*clhs945 - clhs494*clhs946 - clhs503*clhs947;
        lhs(14,16)=-clhs1008*clhs53 - clhs1009*clhs70 - clhs1010*clhs76 - clhs1011*clhs82 - clhs516*clhs944 - clhs525*clhs945 - clhs534*clhs946 - clhs543*clhs947;
        lhs(14,17)=-clhs1012*clhs53 - clhs1013*clhs70 - clhs1014*clhs76 - clhs1015*clhs82 - clhs556*clhs944 - clhs565*clhs945 - clhs574*clhs946 - clhs583*clhs947;
        lhs(14,18)=-clhs1016*clhs53 - clhs1017*clhs70 - clhs1018*clhs76 - clhs1019*clhs82 - clhs596*clhs944 - clhs605*clhs945 - clhs614*clhs946 - clhs623*clhs947;
        lhs(14,19)=-clhs1020*clhs53 - clhs1021*clhs70 - clhs1022*clhs76 - clhs1023*clhs82 - clhs636*clhs944 - clhs645*clhs945 - clhs654*clhs946 - clhs663*clhs947;
        lhs(14,20)=-clhs1024*clhs53 - clhs1025*clhs70 - clhs1026*clhs76 - clhs1027*clhs82 - clhs676*clhs944 - clhs685*clhs945 - clhs694*clhs946 - clhs703*clhs947;
        lhs(14,21)=-clhs1028*clhs53 - clhs1029*clhs70 - clhs1030*clhs76 - clhs1031*clhs82 - clhs716*clhs944 - clhs725*clhs945 - clhs734*clhs946 - clhs743*clhs947;
        lhs(14,22)=-clhs1032*clhs53 - clhs1033*clhs70 - clhs1034*clhs76 - clhs1035*clhs82 - clhs756*clhs944 - clhs765*clhs945 - clhs774*clhs946 - clhs783*clhs947;
        lhs(14,23)=-clhs1036*clhs53 - clhs1037*clhs70 - clhs1038*clhs76 - clhs1039*clhs82 - clhs796*clhs944 - clhs805*clhs945 - clhs814*clhs946 - clhs823*clhs947;
        lhs(14,24)=-clhs1040*clhs53;
        lhs(14,25)=-clhs1041*clhs70;
        lhs(14,26)=-clhs1042*clhs76;
        lhs(14,27)=-clhs1043*clhs82;
        lhs(15,0)=penalty_parameter*(clhs1044*clhs55 + clhs1045*clhs71 + clhs1046*clhs77 + clhs1047*clhs83);
        lhs(15,1)=penalty_parameter*(clhs1048*clhs55 + clhs1049*clhs71 + clhs1050*clhs77 + clhs1051*clhs83);
        lhs(15,2)=penalty_parameter*(clhs1052*clhs55 + clhs1053*clhs71 + clhs1054*clhs77 + clhs1055*clhs83);
        lhs(15,3)=penalty_parameter*(clhs1056*clhs55 + clhs1057*clhs71 + clhs1058*clhs77 + clhs1059*clhs83);
        lhs(15,4)=penalty_parameter*(clhs1060*clhs55 + clhs1061*clhs71 + clhs1062*clhs77 + clhs1063*clhs83);
        lhs(15,5)=penalty_parameter*(clhs1064*clhs55 + clhs1065*clhs71 + clhs1066*clhs77 + clhs1067*clhs83);
        lhs(15,6)=penalty_parameter*(clhs1068*clhs55 + clhs1069*clhs71 + clhs1070*clhs77 + clhs1071*clhs83);
        lhs(15,7)=penalty_parameter*(clhs1072*clhs55 + clhs1073*clhs71 + clhs1074*clhs77 + clhs1075*clhs83);
        lhs(15,8)=penalty_parameter*(clhs1076*clhs55 + clhs1077*clhs71 + clhs1078*clhs77 + clhs1079*clhs83);
        lhs(15,9)=penalty_parameter*(clhs1080*clhs55 + clhs1081*clhs71 + clhs1082*clhs77 + clhs1083*clhs83);
        lhs(15,10)=penalty_parameter*(clhs1084*clhs55 + clhs1085*clhs71 + clhs1086*clhs77 + clhs1087*clhs83);
        lhs(15,11)=penalty_parameter*(clhs1088*clhs55 + clhs1089*clhs71 + clhs1090*clhs77 + clhs1091*clhs83);
        lhs(15,12)=-clhs357*clhs69 - clhs364*clhs55 - clhs366*clhs75 - clhs373*clhs71 - clhs375*clhs81 - clhs382*clhs77 - clhs384*clhs87 - clhs391*clhs83;
        lhs(15,13)=-clhs397*clhs69 - clhs404*clhs55 - clhs406*clhs75 - clhs413*clhs71 - clhs415*clhs81 - clhs422*clhs77 - clhs424*clhs87 - clhs431*clhs83;
        lhs(15,14)=-clhs437*clhs69 - clhs444*clhs55 - clhs446*clhs75 - clhs453*clhs71 - clhs455*clhs81 - clhs462*clhs77 - clhs464*clhs87 - clhs471*clhs83;
        lhs(15,15)=-clhs477*clhs69 - clhs484*clhs55 - clhs486*clhs75 - clhs493*clhs71 - clhs495*clhs81 - clhs502*clhs77 - clhs504*clhs87 - clhs511*clhs83;
        lhs(15,16)=-clhs517*clhs69 - clhs524*clhs55 - clhs526*clhs75 - clhs533*clhs71 - clhs535*clhs81 - clhs542*clhs77 - clhs544*clhs87 - clhs551*clhs83;
        lhs(15,17)=-clhs55*clhs564 - clhs557*clhs69 - clhs566*clhs75 - clhs573*clhs71 - clhs575*clhs81 - clhs582*clhs77 - clhs584*clhs87 - clhs591*clhs83;
        lhs(15,18)=-clhs55*clhs604 - clhs597*clhs69 - clhs606*clhs75 - clhs613*clhs71 - clhs615*clhs81 - clhs622*clhs77 - clhs624*clhs87 - clhs631*clhs83;
        lhs(15,19)=-clhs55*clhs644 - clhs637*clhs69 - clhs646*clhs75 - clhs653*clhs71 - clhs655*clhs81 - clhs662*clhs77 - clhs664*clhs87 - clhs671*clhs83;
        lhs(15,20)=-clhs55*clhs684 - clhs677*clhs69 - clhs686*clhs75 - clhs693*clhs71 - clhs695*clhs81 - clhs702*clhs77 - clhs704*clhs87 - clhs711*clhs83;
        lhs(15,21)=-clhs55*clhs724 - clhs69*clhs717 - clhs71*clhs733 - clhs726*clhs75 - clhs735*clhs81 - clhs742*clhs77 - clhs744*clhs87 - clhs751*clhs83;
        lhs(15,22)=-clhs55*clhs764 - clhs69*clhs757 - clhs71*clhs773 - clhs75*clhs766 - clhs77*clhs782 - clhs775*clhs81 - clhs784*clhs87 - clhs791*clhs83;
        lhs(15,23)=-clhs55*clhs804 - clhs69*clhs797 - clhs71*clhs813 - clhs75*clhs806 - clhs77*clhs822 - clhs81*clhs815 - clhs824*clhs87 - clhs83*clhs831;
        lhs(15,24)=-clhs55*clhs832;
        lhs(15,25)=-clhs71*clhs833;
        lhs(15,26)=-clhs77*clhs834;
        lhs(15,27)=-clhs83*clhs835;
        lhs(16,0)=penalty_parameter*(clhs1092*clhs55 + clhs1093*clhs71 + clhs1094*clhs77 + clhs1095*clhs83);
        lhs(16,1)=penalty_parameter*(clhs1096*clhs55 + clhs1097*clhs71 + clhs1098*clhs77 + clhs1099*clhs83);
        lhs(16,2)=penalty_parameter*(clhs1100*clhs55 + clhs1101*clhs71 + clhs1102*clhs77 + clhs1103*clhs83);
        lhs(16,3)=penalty_parameter*(clhs1104*clhs55 + clhs1105*clhs71 + clhs1106*clhs77 + clhs1107*clhs83);
        lhs(16,4)=penalty_parameter*(clhs1108*clhs55 + clhs1109*clhs71 + clhs1110*clhs77 + clhs1111*clhs83);
        lhs(16,5)=penalty_parameter*(clhs1112*clhs55 + clhs1113*clhs71 + clhs1114*clhs77 + clhs1115*clhs83);
        lhs(16,6)=penalty_parameter*(clhs1116*clhs55 + clhs1117*clhs71 + clhs1118*clhs77 + clhs1119*clhs83);
        lhs(16,7)=penalty_parameter*(clhs1120*clhs55 + clhs1121*clhs71 + clhs1122*clhs77 + clhs1123*clhs83);
        lhs(16,8)=penalty_parameter*(clhs1124*clhs55 + clhs1125*clhs71 + clhs1126*clhs77 + clhs1127*clhs83);
        lhs(16,9)=penalty_parameter*(clhs1128*clhs55 + clhs1129*clhs71 + clhs1130*clhs77 + clhs1131*clhs83);
        lhs(16,10)=penalty_parameter*(clhs1132*clhs55 + clhs1133*clhs71 + clhs1134*clhs77 + clhs1135*clhs83);
        lhs(16,11)=penalty_parameter*(clhs1136*clhs55 + clhs1137*clhs71 + clhs1138*clhs77 + clhs1139*clhs83);
        lhs(16,12)=-clhs357*clhs840 - clhs366*clhs841 - clhs375*clhs842 - clhs384*clhs843 - clhs55*clhs888 - clhs71*clhs889 - clhs77*clhs890 - clhs83*clhs891;
        lhs(16,13)=-clhs397*clhs840 - clhs406*clhs841 - clhs415*clhs842 - clhs424*clhs843 - clhs55*clhs892 - clhs71*clhs893 - clhs77*clhs894 - clhs83*clhs895;
        lhs(16,14)=-clhs437*clhs840 - clhs446*clhs841 - clhs455*clhs842 - clhs464*clhs843 - clhs55*clhs896 - clhs71*clhs897 - clhs77*clhs898 - clhs83*clhs899;
        lhs(16,15)=-clhs477*clhs840 - clhs486*clhs841 - clhs495*clhs842 - clhs504*clhs843 - clhs55*clhs900 - clhs71*clhs901 - clhs77*clhs902 - clhs83*clhs903;
        lhs(16,16)=-clhs517*clhs840 - clhs526*clhs841 - clhs535*clhs842 - clhs544*clhs843 - clhs55*clhs904 - clhs71*clhs905 - clhs77*clhs906 - clhs83*clhs907;
        lhs(16,17)=-clhs55*clhs908 - clhs557*clhs840 - clhs566*clhs841 - clhs575*clhs842 - clhs584*clhs843 - clhs71*clhs909 - clhs77*clhs910 - clhs83*clhs911;
        lhs(16,18)=-clhs55*clhs912 - clhs597*clhs840 - clhs606*clhs841 - clhs615*clhs842 - clhs624*clhs843 - clhs71*clhs913 - clhs77*clhs914 - clhs83*clhs915;
        lhs(16,19)=-clhs55*clhs916 - clhs637*clhs840 - clhs646*clhs841 - clhs655*clhs842 - clhs664*clhs843 - clhs71*clhs917 - clhs77*clhs918 - clhs83*clhs919;
        lhs(16,20)=-clhs55*clhs920 - clhs677*clhs840 - clhs686*clhs841 - clhs695*clhs842 - clhs704*clhs843 - clhs71*clhs921 - clhs77*clhs922 - clhs83*clhs923;
        lhs(16,21)=-clhs55*clhs924 - clhs71*clhs925 - clhs717*clhs840 - clhs726*clhs841 - clhs735*clhs842 - clhs744*clhs843 - clhs77*clhs926 - clhs83*clhs927;
        lhs(16,22)=-clhs55*clhs928 - clhs71*clhs929 - clhs757*clhs840 - clhs766*clhs841 - clhs77*clhs930 - clhs775*clhs842 - clhs784*clhs843 - clhs83*clhs931;
        lhs(16,23)=-clhs55*clhs932 - clhs71*clhs933 - clhs77*clhs934 - clhs797*clhs840 - clhs806*clhs841 - clhs815*clhs842 - clhs824*clhs843 - clhs83*clhs935;
        lhs(16,24)=-clhs55*clhs936;
        lhs(16,25)=-clhs71*clhs937;
        lhs(16,26)=-clhs77*clhs938;
        lhs(16,27)=-clhs83*clhs939;
        lhs(17,0)=penalty_parameter*(clhs1140*clhs55 + clhs1141*clhs71 + clhs1142*clhs77 + clhs1143*clhs83);
        lhs(17,1)=penalty_parameter*(clhs1144*clhs55 + clhs1145*clhs71 + clhs1146*clhs77 + clhs1147*clhs83);
        lhs(17,2)=penalty_parameter*(clhs1148*clhs55 + clhs1149*clhs71 + clhs1150*clhs77 + clhs1151*clhs83);
        lhs(17,3)=penalty_parameter*(clhs1152*clhs55 + clhs1153*clhs71 + clhs1154*clhs77 + clhs1155*clhs83);
        lhs(17,4)=penalty_parameter*(clhs1156*clhs55 + clhs1157*clhs71 + clhs1158*clhs77 + clhs1159*clhs83);
        lhs(17,5)=penalty_parameter*(clhs1160*clhs55 + clhs1161*clhs71 + clhs1162*clhs77 + clhs1163*clhs83);
        lhs(17,6)=penalty_parameter*(clhs1164*clhs55 + clhs1165*clhs71 + clhs1166*clhs77 + clhs1167*clhs83);
        lhs(17,7)=penalty_parameter*(clhs1168*clhs55 + clhs1169*clhs71 + clhs1170*clhs77 + clhs1171*clhs83);
        lhs(17,8)=penalty_parameter*(clhs1172*clhs55 + clhs1173*clhs71 + clhs1174*clhs77 + clhs1175*clhs83);
        lhs(17,9)=penalty_parameter*(clhs1176*clhs55 + clhs1177*clhs71 + clhs1178*clhs77 + clhs1179*clhs83);
        lhs(17,10)=penalty_parameter*(clhs1180*clhs55 + clhs1181*clhs71 + clhs1182*clhs77 + clhs1183*clhs83);
        lhs(17,11)=penalty_parameter*(clhs1184*clhs55 + clhs1185*clhs71 + clhs1186*clhs77 + clhs1187*clhs83);
        lhs(17,12)=-clhs357*clhs944 - clhs366*clhs945 - clhs375*clhs946 - clhs384*clhs947 - clhs55*clhs992 - clhs71*clhs993 - clhs77*clhs994 - clhs83*clhs995;
        lhs(17,13)=-clhs397*clhs944 - clhs406*clhs945 - clhs415*clhs946 - clhs424*clhs947 - clhs55*clhs996 - clhs71*clhs997 - clhs77*clhs998 - clhs83*clhs999;
        lhs(17,14)=-clhs1000*clhs55 - clhs1001*clhs71 - clhs1002*clhs77 - clhs1003*clhs83 - clhs437*clhs944 - clhs446*clhs945 - clhs455*clhs946 - clhs464*clhs947;
        lhs(17,15)=-clhs1004*clhs55 - clhs1005*clhs71 - clhs1006*clhs77 - clhs1007*clhs83 - clhs477*clhs944 - clhs486*clhs945 - clhs495*clhs946 - clhs504*clhs947;
        lhs(17,16)=-clhs1008*clhs55 - clhs1009*clhs71 - clhs1010*clhs77 - clhs1011*clhs83 - clhs517*clhs944 - clhs526*clhs945 - clhs535*clhs946 - clhs544*clhs947;
        lhs(17,17)=-clhs1012*clhs55 - clhs1013*clhs71 - clhs1014*clhs77 - clhs1015*clhs83 - clhs557*clhs944 - clhs566*clhs945 - clhs575*clhs946 - clhs584*clhs947;
        lhs(17,18)=-clhs1016*clhs55 - clhs1017*clhs71 - clhs1018*clhs77 - clhs1019*clhs83 - clhs597*clhs944 - clhs606*clhs945 - clhs615*clhs946 - clhs624*clhs947;
        lhs(17,19)=-clhs1020*clhs55 - clhs1021*clhs71 - clhs1022*clhs77 - clhs1023*clhs83 - clhs637*clhs944 - clhs646*clhs945 - clhs655*clhs946 - clhs664*clhs947;
        lhs(17,20)=-clhs1024*clhs55 - clhs1025*clhs71 - clhs1026*clhs77 - clhs1027*clhs83 - clhs677*clhs944 - clhs686*clhs945 - clhs695*clhs946 - clhs704*clhs947;
        lhs(17,21)=-clhs1028*clhs55 - clhs1029*clhs71 - clhs1030*clhs77 - clhs1031*clhs83 - clhs717*clhs944 - clhs726*clhs945 - clhs735*clhs946 - clhs744*clhs947;
        lhs(17,22)=-clhs1032*clhs55 - clhs1033*clhs71 - clhs1034*clhs77 - clhs1035*clhs83 - clhs757*clhs944 - clhs766*clhs945 - clhs775*clhs946 - clhs784*clhs947;
        lhs(17,23)=-clhs1036*clhs55 - clhs1037*clhs71 - clhs1038*clhs77 - clhs1039*clhs83 - clhs797*clhs944 - clhs806*clhs945 - clhs815*clhs946 - clhs824*clhs947;
        lhs(17,24)=-clhs1040*clhs55;
        lhs(17,25)=-clhs1041*clhs71;
        lhs(17,26)=-clhs1042*clhs77;
        lhs(17,27)=-clhs1043*clhs83;
        lhs(18,0)=penalty_parameter*(clhs1044*clhs57 + clhs1045*clhs72 + clhs1046*clhs78 + clhs1047*clhs84);
        lhs(18,1)=penalty_parameter*(clhs1048*clhs57 + clhs1049*clhs72 + clhs1050*clhs78 + clhs1051*clhs84);
        lhs(18,2)=penalty_parameter*(clhs1052*clhs57 + clhs1053*clhs72 + clhs1054*clhs78 + clhs1055*clhs84);
        lhs(18,3)=penalty_parameter*(clhs1056*clhs57 + clhs1057*clhs72 + clhs1058*clhs78 + clhs1059*clhs84);
        lhs(18,4)=penalty_parameter*(clhs1060*clhs57 + clhs1061*clhs72 + clhs1062*clhs78 + clhs1063*clhs84);
        lhs(18,5)=penalty_parameter*(clhs1064*clhs57 + clhs1065*clhs72 + clhs1066*clhs78 + clhs1067*clhs84);
        lhs(18,6)=penalty_parameter*(clhs1068*clhs57 + clhs1069*clhs72 + clhs1070*clhs78 + clhs1071*clhs84);
        lhs(18,7)=penalty_parameter*(clhs1072*clhs57 + clhs1073*clhs72 + clhs1074*clhs78 + clhs1075*clhs84);
        lhs(18,8)=penalty_parameter*(clhs1076*clhs57 + clhs1077*clhs72 + clhs1078*clhs78 + clhs1079*clhs84);
        lhs(18,9)=penalty_parameter*(clhs1080*clhs57 + clhs1081*clhs72 + clhs1082*clhs78 + clhs1083*clhs84);
        lhs(18,10)=penalty_parameter*(clhs1084*clhs57 + clhs1085*clhs72 + clhs1086*clhs78 + clhs1087*clhs84);
        lhs(18,11)=penalty_parameter*(clhs1088*clhs57 + clhs1089*clhs72 + clhs1090*clhs78 + clhs1091*clhs84);
        lhs(18,12)=-clhs358*clhs69 - clhs364*clhs57 - clhs367*clhs75 - clhs373*clhs72 - clhs376*clhs81 - clhs382*clhs78 - clhs385*clhs87 - clhs391*clhs84;
        lhs(18,13)=-clhs398*clhs69 - clhs404*clhs57 - clhs407*clhs75 - clhs413*clhs72 - clhs416*clhs81 - clhs422*clhs78 - clhs425*clhs87 - clhs431*clhs84;
        lhs(18,14)=-clhs438*clhs69 - clhs444*clhs57 - clhs447*clhs75 - clhs453*clhs72 - clhs456*clhs81 - clhs462*clhs78 - clhs465*clhs87 - clhs471*clhs84;
        lhs(18,15)=-clhs478*clhs69 - clhs484*clhs57 - clhs487*clhs75 - clhs493*clhs72 - clhs496*clhs81 - clhs502*clhs78 - clhs505*clhs87 - clhs511*clhs84;
        lhs(18,16)=-clhs518*clhs69 - clhs524*clhs57 - clhs527*clhs75 - clhs533*clhs72 - clhs536*clhs81 - clhs542*clhs78 - clhs545*clhs87 - clhs551*clhs84;
        lhs(18,17)=-clhs558*clhs69 - clhs564*clhs57 - clhs567*clhs75 - clhs573*clhs72 - clhs576*clhs81 - clhs582*clhs78 - clhs585*clhs87 - clhs591*clhs84;
        lhs(18,18)=-clhs57*clhs604 - clhs598*clhs69 - clhs607*clhs75 - clhs613*clhs72 - clhs616*clhs81 - clhs622*clhs78 - clhs625*clhs87 - clhs631*clhs84;
        lhs(18,19)=-clhs57*clhs644 - clhs638*clhs69 - clhs647*clhs75 - clhs653*clhs72 - clhs656*clhs81 - clhs662*clhs78 - clhs665*clhs87 - clhs671*clhs84;
        lhs(18,20)=-clhs57*clhs684 - clhs678*clhs69 - clhs687*clhs75 - clhs693*clhs72 - clhs696*clhs81 - clhs702*clhs78 - clhs705*clhs87 - clhs711*clhs84;
        lhs(18,21)=-clhs57*clhs724 - clhs69*clhs718 - clhs72*clhs733 - clhs727*clhs75 - clhs736*clhs81 - clhs742*clhs78 - clhs745*clhs87 - clhs751*clhs84;
        lhs(18,22)=-clhs57*clhs764 - clhs69*clhs758 - clhs72*clhs773 - clhs75*clhs767 - clhs776*clhs81 - clhs78*clhs782 - clhs785*clhs87 - clhs791*clhs84;
        lhs(18,23)=-clhs57*clhs804 - clhs69*clhs798 - clhs72*clhs813 - clhs75*clhs807 - clhs78*clhs822 - clhs81*clhs816 - clhs825*clhs87 - clhs831*clhs84;
        lhs(18,24)=-clhs57*clhs832;
        lhs(18,25)=-clhs72*clhs833;
        lhs(18,26)=-clhs78*clhs834;
        lhs(18,27)=-clhs835*clhs84;
        lhs(19,0)=penalty_parameter*(clhs1092*clhs57 + clhs1093*clhs72 + clhs1094*clhs78 + clhs1095*clhs84);
        lhs(19,1)=penalty_parameter*(clhs1096*clhs57 + clhs1097*clhs72 + clhs1098*clhs78 + clhs1099*clhs84);
        lhs(19,2)=penalty_parameter*(clhs1100*clhs57 + clhs1101*clhs72 + clhs1102*clhs78 + clhs1103*clhs84);
        lhs(19,3)=penalty_parameter*(clhs1104*clhs57 + clhs1105*clhs72 + clhs1106*clhs78 + clhs1107*clhs84);
        lhs(19,4)=penalty_parameter*(clhs1108*clhs57 + clhs1109*clhs72 + clhs1110*clhs78 + clhs1111*clhs84);
        lhs(19,5)=penalty_parameter*(clhs1112*clhs57 + clhs1113*clhs72 + clhs1114*clhs78 + clhs1115*clhs84);
        lhs(19,6)=penalty_parameter*(clhs1116*clhs57 + clhs1117*clhs72 + clhs1118*clhs78 + clhs1119*clhs84);
        lhs(19,7)=penalty_parameter*(clhs1120*clhs57 + clhs1121*clhs72 + clhs1122*clhs78 + clhs1123*clhs84);
        lhs(19,8)=penalty_parameter*(clhs1124*clhs57 + clhs1125*clhs72 + clhs1126*clhs78 + clhs1127*clhs84);
        lhs(19,9)=penalty_parameter*(clhs1128*clhs57 + clhs1129*clhs72 + clhs1130*clhs78 + clhs1131*clhs84);
        lhs(19,10)=penalty_parameter*(clhs1132*clhs57 + clhs1133*clhs72 + clhs1134*clhs78 + clhs1135*clhs84);
        lhs(19,11)=penalty_parameter*(clhs1136*clhs57 + clhs1137*clhs72 + clhs1138*clhs78 + clhs1139*clhs84);
        lhs(19,12)=-clhs358*clhs840 - clhs367*clhs841 - clhs376*clhs842 - clhs385*clhs843 - clhs57*clhs888 - clhs72*clhs889 - clhs78*clhs890 - clhs84*clhs891;
        lhs(19,13)=-clhs398*clhs840 - clhs407*clhs841 - clhs416*clhs842 - clhs425*clhs843 - clhs57*clhs892 - clhs72*clhs893 - clhs78*clhs894 - clhs84*clhs895;
        lhs(19,14)=-clhs438*clhs840 - clhs447*clhs841 - clhs456*clhs842 - clhs465*clhs843 - clhs57*clhs896 - clhs72*clhs897 - clhs78*clhs898 - clhs84*clhs899;
        lhs(19,15)=-clhs478*clhs840 - clhs487*clhs841 - clhs496*clhs842 - clhs505*clhs843 - clhs57*clhs900 - clhs72*clhs901 - clhs78*clhs902 - clhs84*clhs903;
        lhs(19,16)=-clhs518*clhs840 - clhs527*clhs841 - clhs536*clhs842 - clhs545*clhs843 - clhs57*clhs904 - clhs72*clhs905 - clhs78*clhs906 - clhs84*clhs907;
        lhs(19,17)=-clhs558*clhs840 - clhs567*clhs841 - clhs57*clhs908 - clhs576*clhs842 - clhs585*clhs843 - clhs72*clhs909 - clhs78*clhs910 - clhs84*clhs911;
        lhs(19,18)=-clhs57*clhs912 - clhs598*clhs840 - clhs607*clhs841 - clhs616*clhs842 - clhs625*clhs843 - clhs72*clhs913 - clhs78*clhs914 - clhs84*clhs915;
        lhs(19,19)=-clhs57*clhs916 - clhs638*clhs840 - clhs647*clhs841 - clhs656*clhs842 - clhs665*clhs843 - clhs72*clhs917 - clhs78*clhs918 - clhs84*clhs919;
        lhs(19,20)=-clhs57*clhs920 - clhs678*clhs840 - clhs687*clhs841 - clhs696*clhs842 - clhs705*clhs843 - clhs72*clhs921 - clhs78*clhs922 - clhs84*clhs923;
        lhs(19,21)=-clhs57*clhs924 - clhs718*clhs840 - clhs72*clhs925 - clhs727*clhs841 - clhs736*clhs842 - clhs745*clhs843 - clhs78*clhs926 - clhs84*clhs927;
        lhs(19,22)=-clhs57*clhs928 - clhs72*clhs929 - clhs758*clhs840 - clhs767*clhs841 - clhs776*clhs842 - clhs78*clhs930 - clhs785*clhs843 - clhs84*clhs931;
        lhs(19,23)=-clhs57*clhs932 - clhs72*clhs933 - clhs78*clhs934 - clhs798*clhs840 - clhs807*clhs841 - clhs816*clhs842 - clhs825*clhs843 - clhs84*clhs935;
        lhs(19,24)=-clhs57*clhs936;
        lhs(19,25)=-clhs72*clhs937;
        lhs(19,26)=-clhs78*clhs938;
        lhs(19,27)=-clhs84*clhs939;
        lhs(20,0)=penalty_parameter*(clhs1140*clhs57 + clhs1141*clhs72 + clhs1142*clhs78 + clhs1143*clhs84);
        lhs(20,1)=penalty_parameter*(clhs1144*clhs57 + clhs1145*clhs72 + clhs1146*clhs78 + clhs1147*clhs84);
        lhs(20,2)=penalty_parameter*(clhs1148*clhs57 + clhs1149*clhs72 + clhs1150*clhs78 + clhs1151*clhs84);
        lhs(20,3)=penalty_parameter*(clhs1152*clhs57 + clhs1153*clhs72 + clhs1154*clhs78 + clhs1155*clhs84);
        lhs(20,4)=penalty_parameter*(clhs1156*clhs57 + clhs1157*clhs72 + clhs1158*clhs78 + clhs1159*clhs84);
        lhs(20,5)=penalty_parameter*(clhs1160*clhs57 + clhs1161*clhs72 + clhs1162*clhs78 + clhs1163*clhs84);
        lhs(20,6)=penalty_parameter*(clhs1164*clhs57 + clhs1165*clhs72 + clhs1166*clhs78 + clhs1167*clhs84);
        lhs(20,7)=penalty_parameter*(clhs1168*clhs57 + clhs1169*clhs72 + clhs1170*clhs78 + clhs1171*clhs84);
        lhs(20,8)=penalty_parameter*(clhs1172*clhs57 + clhs1173*clhs72 + clhs1174*clhs78 + clhs1175*clhs84);
        lhs(20,9)=penalty_parameter*(clhs1176*clhs57 + clhs1177*clhs72 + clhs1178*clhs78 + clhs1179*clhs84);
        lhs(20,10)=penalty_parameter*(clhs1180*clhs57 + clhs1181*clhs72 + clhs1182*clhs78 + clhs1183*clhs84);
        lhs(20,11)=penalty_parameter*(clhs1184*clhs57 + clhs1185*clhs72 + clhs1186*clhs78 + clhs1187*clhs84);
        lhs(20,12)=-clhs358*clhs944 - clhs367*clhs945 - clhs376*clhs946 - clhs385*clhs947 - clhs57*clhs992 - clhs72*clhs993 - clhs78*clhs994 - clhs84*clhs995;
        lhs(20,13)=-clhs398*clhs944 - clhs407*clhs945 - clhs416*clhs946 - clhs425*clhs947 - clhs57*clhs996 - clhs72*clhs997 - clhs78*clhs998 - clhs84*clhs999;
        lhs(20,14)=-clhs1000*clhs57 - clhs1001*clhs72 - clhs1002*clhs78 - clhs1003*clhs84 - clhs438*clhs944 - clhs447*clhs945 - clhs456*clhs946 - clhs465*clhs947;
        lhs(20,15)=-clhs1004*clhs57 - clhs1005*clhs72 - clhs1006*clhs78 - clhs1007*clhs84 - clhs478*clhs944 - clhs487*clhs945 - clhs496*clhs946 - clhs505*clhs947;
        lhs(20,16)=-clhs1008*clhs57 - clhs1009*clhs72 - clhs1010*clhs78 - clhs1011*clhs84 - clhs518*clhs944 - clhs527*clhs945 - clhs536*clhs946 - clhs545*clhs947;
        lhs(20,17)=-clhs1012*clhs57 - clhs1013*clhs72 - clhs1014*clhs78 - clhs1015*clhs84 - clhs558*clhs944 - clhs567*clhs945 - clhs576*clhs946 - clhs585*clhs947;
        lhs(20,18)=-clhs1016*clhs57 - clhs1017*clhs72 - clhs1018*clhs78 - clhs1019*clhs84 - clhs598*clhs944 - clhs607*clhs945 - clhs616*clhs946 - clhs625*clhs947;
        lhs(20,19)=-clhs1020*clhs57 - clhs1021*clhs72 - clhs1022*clhs78 - clhs1023*clhs84 - clhs638*clhs944 - clhs647*clhs945 - clhs656*clhs946 - clhs665*clhs947;
        lhs(20,20)=-clhs1024*clhs57 - clhs1025*clhs72 - clhs1026*clhs78 - clhs1027*clhs84 - clhs678*clhs944 - clhs687*clhs945 - clhs696*clhs946 - clhs705*clhs947;
        lhs(20,21)=-clhs1028*clhs57 - clhs1029*clhs72 - clhs1030*clhs78 - clhs1031*clhs84 - clhs718*clhs944 - clhs727*clhs945 - clhs736*clhs946 - clhs745*clhs947;
        lhs(20,22)=-clhs1032*clhs57 - clhs1033*clhs72 - clhs1034*clhs78 - clhs1035*clhs84 - clhs758*clhs944 - clhs767*clhs945 - clhs776*clhs946 - clhs785*clhs947;
        lhs(20,23)=-clhs1036*clhs57 - clhs1037*clhs72 - clhs1038*clhs78 - clhs1039*clhs84 - clhs798*clhs944 - clhs807*clhs945 - clhs816*clhs946 - clhs825*clhs947;
        lhs(20,24)=-clhs1040*clhs57;
        lhs(20,25)=-clhs1041*clhs72;
        lhs(20,26)=-clhs1042*clhs78;
        lhs(20,27)=-clhs1043*clhs84;
        lhs(21,0)=penalty_parameter*(clhs1044*clhs59 + clhs1045*clhs73 + clhs1046*clhs79 + clhs1047*clhs85);
        lhs(21,1)=penalty_parameter*(clhs1048*clhs59 + clhs1049*clhs73 + clhs1050*clhs79 + clhs1051*clhs85);
        lhs(21,2)=penalty_parameter*(clhs1052*clhs59 + clhs1053*clhs73 + clhs1054*clhs79 + clhs1055*clhs85);
        lhs(21,3)=penalty_parameter*(clhs1056*clhs59 + clhs1057*clhs73 + clhs1058*clhs79 + clhs1059*clhs85);
        lhs(21,4)=penalty_parameter*(clhs1060*clhs59 + clhs1061*clhs73 + clhs1062*clhs79 + clhs1063*clhs85);
        lhs(21,5)=penalty_parameter*(clhs1064*clhs59 + clhs1065*clhs73 + clhs1066*clhs79 + clhs1067*clhs85);
        lhs(21,6)=penalty_parameter*(clhs1068*clhs59 + clhs1069*clhs73 + clhs1070*clhs79 + clhs1071*clhs85);
        lhs(21,7)=penalty_parameter*(clhs1072*clhs59 + clhs1073*clhs73 + clhs1074*clhs79 + clhs1075*clhs85);
        lhs(21,8)=penalty_parameter*(clhs1076*clhs59 + clhs1077*clhs73 + clhs1078*clhs79 + clhs1079*clhs85);
        lhs(21,9)=penalty_parameter*(clhs1080*clhs59 + clhs1081*clhs73 + clhs1082*clhs79 + clhs1083*clhs85);
        lhs(21,10)=penalty_parameter*(clhs1084*clhs59 + clhs1085*clhs73 + clhs1086*clhs79 + clhs1087*clhs85);
        lhs(21,11)=penalty_parameter*(clhs1088*clhs59 + clhs1089*clhs73 + clhs1090*clhs79 + clhs1091*clhs85);
        lhs(21,12)=-clhs359*clhs69 - clhs364*clhs59 - clhs368*clhs75 - clhs373*clhs73 - clhs377*clhs81 - clhs382*clhs79 - clhs386*clhs87 - clhs391*clhs85;
        lhs(21,13)=-clhs399*clhs69 - clhs404*clhs59 - clhs408*clhs75 - clhs413*clhs73 - clhs417*clhs81 - clhs422*clhs79 - clhs426*clhs87 - clhs431*clhs85;
        lhs(21,14)=-clhs439*clhs69 - clhs444*clhs59 - clhs448*clhs75 - clhs453*clhs73 - clhs457*clhs81 - clhs462*clhs79 - clhs466*clhs87 - clhs471*clhs85;
        lhs(21,15)=-clhs479*clhs69 - clhs484*clhs59 - clhs488*clhs75 - clhs493*clhs73 - clhs497*clhs81 - clhs502*clhs79 - clhs506*clhs87 - clhs511*clhs85;
        lhs(21,16)=-clhs519*clhs69 - clhs524*clhs59 - clhs528*clhs75 - clhs533*clhs73 - clhs537*clhs81 - clhs542*clhs79 - clhs546*clhs87 - clhs551*clhs85;
        lhs(21,17)=-clhs559*clhs69 - clhs564*clhs59 - clhs568*clhs75 - clhs573*clhs73 - clhs577*clhs81 - clhs582*clhs79 - clhs586*clhs87 - clhs591*clhs85;
        lhs(21,18)=-clhs59*clhs604 - clhs599*clhs69 - clhs608*clhs75 - clhs613*clhs73 - clhs617*clhs81 - clhs622*clhs79 - clhs626*clhs87 - clhs631*clhs85;
        lhs(21,19)=-clhs59*clhs644 - clhs639*clhs69 - clhs648*clhs75 - clhs653*clhs73 - clhs657*clhs81 - clhs662*clhs79 - clhs666*clhs87 - clhs671*clhs85;
        lhs(21,20)=-clhs59*clhs684 - clhs679*clhs69 - clhs688*clhs75 - clhs693*clhs73 - clhs697*clhs81 - clhs702*clhs79 - clhs706*clhs87 - clhs711*clhs85;
        lhs(21,21)=-clhs59*clhs724 - clhs69*clhs719 - clhs728*clhs75 - clhs73*clhs733 - clhs737*clhs81 - clhs742*clhs79 - clhs746*clhs87 - clhs751*clhs85;
        lhs(21,22)=-clhs59*clhs764 - clhs69*clhs759 - clhs73*clhs773 - clhs75*clhs768 - clhs777*clhs81 - clhs782*clhs79 - clhs786*clhs87 - clhs791*clhs85;
        lhs(21,23)=-clhs59*clhs804 - clhs69*clhs799 - clhs73*clhs813 - clhs75*clhs808 - clhs79*clhs822 - clhs81*clhs817 - clhs826*clhs87 - clhs831*clhs85;
        lhs(21,24)=-clhs59*clhs832;
        lhs(21,25)=-clhs73*clhs833;
        lhs(21,26)=-clhs79*clhs834;
        lhs(21,27)=-clhs835*clhs85;
        lhs(22,0)=penalty_parameter*(clhs1092*clhs59 + clhs1093*clhs73 + clhs1094*clhs79 + clhs1095*clhs85);
        lhs(22,1)=penalty_parameter*(clhs1096*clhs59 + clhs1097*clhs73 + clhs1098*clhs79 + clhs1099*clhs85);
        lhs(22,2)=penalty_parameter*(clhs1100*clhs59 + clhs1101*clhs73 + clhs1102*clhs79 + clhs1103*clhs85);
        lhs(22,3)=penalty_parameter*(clhs1104*clhs59 + clhs1105*clhs73 + clhs1106*clhs79 + clhs1107*clhs85);
        lhs(22,4)=penalty_parameter*(clhs1108*clhs59 + clhs1109*clhs73 + clhs1110*clhs79 + clhs1111*clhs85);
        lhs(22,5)=penalty_parameter*(clhs1112*clhs59 + clhs1113*clhs73 + clhs1114*clhs79 + clhs1115*clhs85);
        lhs(22,6)=penalty_parameter*(clhs1116*clhs59 + clhs1117*clhs73 + clhs1118*clhs79 + clhs1119*clhs85);
        lhs(22,7)=penalty_parameter*(clhs1120*clhs59 + clhs1121*clhs73 + clhs1122*clhs79 + clhs1123*clhs85);
        lhs(22,8)=penalty_parameter*(clhs1124*clhs59 + clhs1125*clhs73 + clhs1126*clhs79 + clhs1127*clhs85);
        lhs(22,9)=penalty_parameter*(clhs1128*clhs59 + clhs1129*clhs73 + clhs1130*clhs79 + clhs1131*clhs85);
        lhs(22,10)=penalty_parameter*(clhs1132*clhs59 + clhs1133*clhs73 + clhs1134*clhs79 + clhs1135*clhs85);
        lhs(22,11)=penalty_parameter*(clhs1136*clhs59 + clhs1137*clhs73 + clhs1138*clhs79 + clhs1139*clhs85);
        lhs(22,12)=-clhs359*clhs840 - clhs368*clhs841 - clhs377*clhs842 - clhs386*clhs843 - clhs59*clhs888 - clhs73*clhs889 - clhs79*clhs890 - clhs85*clhs891;
        lhs(22,13)=-clhs399*clhs840 - clhs408*clhs841 - clhs417*clhs842 - clhs426*clhs843 - clhs59*clhs892 - clhs73*clhs893 - clhs79*clhs894 - clhs85*clhs895;
        lhs(22,14)=-clhs439*clhs840 - clhs448*clhs841 - clhs457*clhs842 - clhs466*clhs843 - clhs59*clhs896 - clhs73*clhs897 - clhs79*clhs898 - clhs85*clhs899;
        lhs(22,15)=-clhs479*clhs840 - clhs488*clhs841 - clhs497*clhs842 - clhs506*clhs843 - clhs59*clhs900 - clhs73*clhs901 - clhs79*clhs902 - clhs85*clhs903;
        lhs(22,16)=-clhs519*clhs840 - clhs528*clhs841 - clhs537*clhs842 - clhs546*clhs843 - clhs59*clhs904 - clhs73*clhs905 - clhs79*clhs906 - clhs85*clhs907;
        lhs(22,17)=-clhs559*clhs840 - clhs568*clhs841 - clhs577*clhs842 - clhs586*clhs843 - clhs59*clhs908 - clhs73*clhs909 - clhs79*clhs910 - clhs85*clhs911;
        lhs(22,18)=-clhs59*clhs912 - clhs599*clhs840 - clhs608*clhs841 - clhs617*clhs842 - clhs626*clhs843 - clhs73*clhs913 - clhs79*clhs914 - clhs85*clhs915;
        lhs(22,19)=-clhs59*clhs916 - clhs639*clhs840 - clhs648*clhs841 - clhs657*clhs842 - clhs666*clhs843 - clhs73*clhs917 - clhs79*clhs918 - clhs85*clhs919;
        lhs(22,20)=-clhs59*clhs920 - clhs679*clhs840 - clhs688*clhs841 - clhs697*clhs842 - clhs706*clhs843 - clhs73*clhs921 - clhs79*clhs922 - clhs85*clhs923;
        lhs(22,21)=-clhs59*clhs924 - clhs719*clhs840 - clhs728*clhs841 - clhs73*clhs925 - clhs737*clhs842 - clhs746*clhs843 - clhs79*clhs926 - clhs85*clhs927;
        lhs(22,22)=-clhs59*clhs928 - clhs73*clhs929 - clhs759*clhs840 - clhs768*clhs841 - clhs777*clhs842 - clhs786*clhs843 - clhs79*clhs930 - clhs85*clhs931;
        lhs(22,23)=-clhs59*clhs932 - clhs73*clhs933 - clhs79*clhs934 - clhs799*clhs840 - clhs808*clhs841 - clhs817*clhs842 - clhs826*clhs843 - clhs85*clhs935;
        lhs(22,24)=-clhs59*clhs936;
        lhs(22,25)=-clhs73*clhs937;
        lhs(22,26)=-clhs79*clhs938;
        lhs(22,27)=-clhs85*clhs939;
        lhs(23,0)=penalty_parameter*(clhs1140*clhs59 + clhs1141*clhs73 + clhs1142*clhs79 + clhs1143*clhs85);
        lhs(23,1)=penalty_parameter*(clhs1144*clhs59 + clhs1145*clhs73 + clhs1146*clhs79 + clhs1147*clhs85);
        lhs(23,2)=penalty_parameter*(clhs1148*clhs59 + clhs1149*clhs73 + clhs1150*clhs79 + clhs1151*clhs85);
        lhs(23,3)=penalty_parameter*(clhs1152*clhs59 + clhs1153*clhs73 + clhs1154*clhs79 + clhs1155*clhs85);
        lhs(23,4)=penalty_parameter*(clhs1156*clhs59 + clhs1157*clhs73 + clhs1158*clhs79 + clhs1159*clhs85);
        lhs(23,5)=penalty_parameter*(clhs1160*clhs59 + clhs1161*clhs73 + clhs1162*clhs79 + clhs1163*clhs85);
        lhs(23,6)=penalty_parameter*(clhs1164*clhs59 + clhs1165*clhs73 + clhs1166*clhs79 + clhs1167*clhs85);
        lhs(23,7)=penalty_parameter*(clhs1168*clhs59 + clhs1169*clhs73 + clhs1170*clhs79 + clhs1171*clhs85);
        lhs(23,8)=penalty_parameter*(clhs1172*clhs59 + clhs1173*clhs73 + clhs1174*clhs79 + clhs1175*clhs85);
        lhs(23,9)=penalty_parameter*(clhs1176*clhs59 + clhs1177*clhs73 + clhs1178*clhs79 + clhs1179*clhs85);
        lhs(23,10)=penalty_parameter*(clhs1180*clhs59 + clhs1181*clhs73 + clhs1182*clhs79 + clhs1183*clhs85);
        lhs(23,11)=penalty_parameter*(clhs1184*clhs59 + clhs1185*clhs73 + clhs1186*clhs79 + clhs1187*clhs85);
        lhs(23,12)=-clhs359*clhs944 - clhs368*clhs945 - clhs377*clhs946 - clhs386*clhs947 - clhs59*clhs992 - clhs73*clhs993 - clhs79*clhs994 - clhs85*clhs995;
        lhs(23,13)=-clhs399*clhs944 - clhs408*clhs945 - clhs417*clhs946 - clhs426*clhs947 - clhs59*clhs996 - clhs73*clhs997 - clhs79*clhs998 - clhs85*clhs999;
        lhs(23,14)=-clhs1000*clhs59 - clhs1001*clhs73 - clhs1002*clhs79 - clhs1003*clhs85 - clhs439*clhs944 - clhs448*clhs945 - clhs457*clhs946 - clhs466*clhs947;
        lhs(23,15)=-clhs1004*clhs59 - clhs1005*clhs73 - clhs1006*clhs79 - clhs1007*clhs85 - clhs479*clhs944 - clhs488*clhs945 - clhs497*clhs946 - clhs506*clhs947;
        lhs(23,16)=-clhs1008*clhs59 - clhs1009*clhs73 - clhs1010*clhs79 - clhs1011*clhs85 - clhs519*clhs944 - clhs528*clhs945 - clhs537*clhs946 - clhs546*clhs947;
        lhs(23,17)=-clhs1012*clhs59 - clhs1013*clhs73 - clhs1014*clhs79 - clhs1015*clhs85 - clhs559*clhs944 - clhs568*clhs945 - clhs577*clhs946 - clhs586*clhs947;
        lhs(23,18)=-clhs1016*clhs59 - clhs1017*clhs73 - clhs1018*clhs79 - clhs1019*clhs85 - clhs599*clhs944 - clhs608*clhs945 - clhs617*clhs946 - clhs626*clhs947;
        lhs(23,19)=-clhs1020*clhs59 - clhs1021*clhs73 - clhs1022*clhs79 - clhs1023*clhs85 - clhs639*clhs944 - clhs648*clhs945 - clhs657*clhs946 - clhs666*clhs947;
        lhs(23,20)=-clhs1024*clhs59 - clhs1025*clhs73 - clhs1026*clhs79 - clhs1027*clhs85 - clhs679*clhs944 - clhs688*clhs945 - clhs697*clhs946 - clhs706*clhs947;
        lhs(23,21)=-clhs1028*clhs59 - clhs1029*clhs73 - clhs1030*clhs79 - clhs1031*clhs85 - clhs719*clhs944 - clhs728*clhs945 - clhs737*clhs946 - clhs746*clhs947;
        lhs(23,22)=-clhs1032*clhs59 - clhs1033*clhs73 - clhs1034*clhs79 - clhs1035*clhs85 - clhs759*clhs944 - clhs768*clhs945 - clhs777*clhs946 - clhs786*clhs947;
        lhs(23,23)=-clhs1036*clhs59 - clhs1037*clhs73 - clhs1038*clhs79 - clhs1039*clhs85 - clhs799*clhs944 - clhs808*clhs945 - clhs817*clhs946 - clhs826*clhs947;
        lhs(23,24)=-clhs1040*clhs59;
        lhs(23,25)=-clhs1041*clhs73;
        lhs(23,26)=-clhs1042*clhs79;
        lhs(23,27)=-clhs1043*clhs85;
        lhs(24,0)=clhs20*scale_factor;
        lhs(24,1)=clhs92*scale_factor;
        lhs(24,2)=clhs116*scale_factor;
        lhs(24,3)=clhs140*scale_factor;
        lhs(24,4)=clhs164*scale_factor;
        lhs(24,5)=clhs188*scale_factor;
        lhs(24,6)=clhs212*scale_factor;
        lhs(24,7)=clhs236*scale_factor;
        lhs(24,8)=clhs260*scale_factor;
        lhs(24,9)=clhs284*scale_factor;
        lhs(24,10)=clhs308*scale_factor;
        lhs(24,11)=clhs332*scale_factor;
        lhs(24,12)=-clhs363*scale_factor;
        lhs(24,13)=-clhs403*scale_factor;
        lhs(24,14)=-clhs443*scale_factor;
        lhs(24,15)=-clhs483*scale_factor;
        lhs(24,16)=-clhs523*scale_factor;
        lhs(24,17)=-clhs563*scale_factor;
        lhs(24,18)=-clhs603*scale_factor;
        lhs(24,19)=-clhs643*scale_factor;
        lhs(24,20)=-clhs683*scale_factor;
        lhs(24,21)=-clhs723*scale_factor;
        lhs(24,22)=-clhs763*scale_factor;
        lhs(24,23)=-clhs803*scale_factor;
        lhs(24,24)=0;
        lhs(24,25)=0;
        lhs(24,26)=0;
        lhs(24,27)=0;
        lhs(25,0)=clhs30*scale_factor;
        lhs(25,1)=clhs98*scale_factor;
        lhs(25,2)=clhs122*scale_factor;
        lhs(25,3)=clhs146*scale_factor;
        lhs(25,4)=clhs170*scale_factor;
        lhs(25,5)=clhs194*scale_factor;
        lhs(25,6)=clhs218*scale_factor;
        lhs(25,7)=clhs242*scale_factor;
        lhs(25,8)=clhs266*scale_factor;
        lhs(25,9)=clhs290*scale_factor;
        lhs(25,10)=clhs314*scale_factor;
        lhs(25,11)=clhs338*scale_factor;
        lhs(25,12)=-clhs372*scale_factor;
        lhs(25,13)=-clhs412*scale_factor;
        lhs(25,14)=-clhs452*scale_factor;
        lhs(25,15)=-clhs492*scale_factor;
        lhs(25,16)=-clhs532*scale_factor;
        lhs(25,17)=-clhs572*scale_factor;
        lhs(25,18)=-clhs612*scale_factor;
        lhs(25,19)=-clhs652*scale_factor;
        lhs(25,20)=-clhs692*scale_factor;
        lhs(25,21)=-clhs732*scale_factor;
        lhs(25,22)=-clhs772*scale_factor;
        lhs(25,23)=-clhs812*scale_factor;
        lhs(25,24)=0;
        lhs(25,25)=0;
        lhs(25,26)=0;
        lhs(25,27)=0;
        lhs(26,0)=clhs40*scale_factor;
        lhs(26,1)=clhs104*scale_factor;
        lhs(26,2)=clhs128*scale_factor;
        lhs(26,3)=clhs152*scale_factor;
        lhs(26,4)=clhs176*scale_factor;
        lhs(26,5)=clhs200*scale_factor;
        lhs(26,6)=clhs224*scale_factor;
        lhs(26,7)=clhs248*scale_factor;
        lhs(26,8)=clhs272*scale_factor;
        lhs(26,9)=clhs296*scale_factor;
        lhs(26,10)=clhs320*scale_factor;
        lhs(26,11)=clhs344*scale_factor;
        lhs(26,12)=-clhs381*scale_factor;
        lhs(26,13)=-clhs421*scale_factor;
        lhs(26,14)=-clhs461*scale_factor;
        lhs(26,15)=-clhs501*scale_factor;
        lhs(26,16)=-clhs541*scale_factor;
        lhs(26,17)=-clhs581*scale_factor;
        lhs(26,18)=-clhs621*scale_factor;
        lhs(26,19)=-clhs661*scale_factor;
        lhs(26,20)=-clhs701*scale_factor;
        lhs(26,21)=-clhs741*scale_factor;
        lhs(26,22)=-clhs781*scale_factor;
        lhs(26,23)=-clhs821*scale_factor;
        lhs(26,24)=0;
        lhs(26,25)=0;
        lhs(26,26)=0;
        lhs(26,27)=0;
        lhs(27,0)=clhs50*scale_factor;
        lhs(27,1)=clhs110*scale_factor;
        lhs(27,2)=clhs134*scale_factor;
        lhs(27,3)=clhs158*scale_factor;
        lhs(27,4)=clhs182*scale_factor;
        lhs(27,5)=clhs206*scale_factor;
        lhs(27,6)=clhs230*scale_factor;
        lhs(27,7)=clhs254*scale_factor;
        lhs(27,8)=clhs278*scale_factor;
        lhs(27,9)=clhs302*scale_factor;
        lhs(27,10)=clhs326*scale_factor;
        lhs(27,11)=clhs350*scale_factor;
        lhs(27,12)=-clhs390*scale_factor;
        lhs(27,13)=-clhs430*scale_factor;
        lhs(27,14)=-clhs470*scale_factor;
        lhs(27,15)=-clhs510*scale_factor;
        lhs(27,16)=-clhs550*scale_factor;
        lhs(27,17)=-clhs590*scale_factor;
        lhs(27,18)=-clhs630*scale_factor;
        lhs(27,19)=-clhs670*scale_factor;
        lhs(27,20)=-clhs710*scale_factor;
        lhs(27,21)=-clhs750*scale_factor;
        lhs(27,22)=-clhs790*scale_factor;
        lhs(27,23)=-clhs830*scale_factor;
        lhs(27,24)=0;
        lhs(27,25)=0;
        lhs(27,26)=0;
        lhs(27,27)=0;
    }


    return lhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateAndAddRHS(
    LocalSystemComponents& rLocalSystem,
    const array_1d<double, TMatrixSize>& RHS_contact_pair,
    const unsigned int rPairIndex
    )
{   
    if ( rLocalSystem.CalculationFlags.Is( AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::COMPUTE_RHS_VECTOR_WITH_COMPONENTS ) )
    {
        /* COMPONENT-WISE RHS VECTOR */
        const std::vector<Variable<VectorType> >& rRightHandSideVariables = rLocalSystem.GetRightHandSideVariables( );
        bool calculated;

        for ( unsigned int i = 0; i < rRightHandSideVariables.size( ); i++ )
        {
            calculated = false;

            if ( rRightHandSideVariables[i] == MORTAR_CONTACT_OPERATOR )
            {
                VectorType& rRightHandSideVector = rLocalSystem.GetRightHandSideVectors()[i];

                // Assemble
                this->AssembleContactPairRHSToConditionSystem<TMatrixSize>( RHS_contact_pair, rRightHandSideVector, rPairIndex );
                
                calculated = true;
            }

            if ( calculated == false )
            {
                KRATOS_THROW_ERROR( std::logic_error,  " CONDITION can not supply the required local system variable: ", rRightHandSideVariables[i] );
            }
        }
    }
    else 
    {
        /* SINGLE RHS VECTOR */
        VectorType& rRightHandSideVector = rLocalSystem.GetRightHandSideVector();
        
        // Assemble
        this->AssembleContactPairRHSToConditionSystem<TMatrixSize>( RHS_contact_pair, rRightHandSideVector, rPairIndex );
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
template< unsigned int TMatrixSize>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::AssembleContactPairRHSToConditionSystem(
    const array_1d<double, TMatrixSize>& rPairRHS,
    VectorType& rConditionRHS,
    const unsigned int rPairIndex
    )
{
    // Find location of the pair's master DOFs in ConditionRHS
    const unsigned int index_begin = rPairIndex * TMatrixSize;
    const unsigned int index_end  = index_begin + TMatrixSize;
    
    subrange( rConditionRHS, index_begin, index_end) += rPairRHS;
}

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
template<>
array_1d<double, 10> AugmentedLagrangianMethodFrictionlessMortarContactCondition<2,2>::CalculateLocalRHS<10>(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,10> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = GetVariableMatrix(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2 = GetVariableMatrix(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> X1 = GetCoordinates(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = GetCoordinates(CurrentMasterElement, false);
    
    const array_1d<double, 2> lmnormal = GetVariableVector(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = GetVariableMatrix(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=-crhs0*lmnormal[0];
        rhs[9]=-crhs0*lmnormal[1];
        }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs2 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs3 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) - crhs3*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) - crhs3*(X2(1,1) + u2(1,1)));
        const double crhs5 =     crhs4*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs6 =     crhs5*normalslave(1,0);
        const double crhs7 =     crhs5*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs6;
        rhs[1]=-crhs0*crhs7;
        rhs[2]=-crhs3*crhs6;
        rhs[3]=-crhs3*crhs7;
        rhs[4]=crhs1*crhs6;
        rhs[5]=crhs1*crhs7;
        rhs[6]=crhs2*crhs6;
        rhs[7]=crhs2*crhs7;
        rhs[8]=-0.5*lmnormal[0]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[9]=crhs4*scale_factor;
        }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs2 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs3 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) - crhs3*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) - crhs3*(X2(1,1) + u2(1,1)));
        const double crhs5 =     crhs4*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs6 =     crhs5*normalslave(0,0);
        const double crhs7 =     crhs5*normalslave(0,1);
    
        rhs[0]=-crhs0*crhs6;
        rhs[1]=-crhs0*crhs7;
        rhs[2]=-crhs3*crhs6;
        rhs[3]=-crhs3*crhs7;
        rhs[4]=crhs1*crhs6;
        rhs[5]=crhs1*crhs7;
        rhs[6]=crhs2*crhs6;
        rhs[7]=crhs2*crhs7;
        rhs[8]=crhs4*scale_factor;
        rhs[9]=-0.5*lmnormal[1]*std::pow(scale_factor, 2.0)/penalty_parameter;
        }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs5 =     X2(0,0) + u2(0,0);
        const double crhs6 =     X2(1,0) + u2(1,0);
        const double crhs7 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs8 =     X1(0,1) + u1(0,1);
        const double crhs9 =     X1(1,1) + u1(1,1);
        const double crhs10 =     X2(0,1) + u2(0,1);
        const double crhs11 =     X2(1,1) + u2(1,1);
        const double crhs12 =     normalslave(0,0)*(-crhs0*crhs5 + crhs1*crhs2 + crhs3*crhs4 - crhs6*crhs7) + normalslave(0,1)*(-crhs0*crhs10 - crhs11*crhs7 + crhs2*crhs8 + crhs4*crhs9);
        const double crhs13 =     crhs12*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs14 =     crhs13*normalslave(0,0);
        const double crhs15 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs16 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs17 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1))
        const double crhs18 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs19 =     normalslave(1,0)*(crhs1*crhs16 - crhs15*crhs5 + crhs17*crhs3 - crhs18*crhs6) + normalslave(1,1)*(-crhs10*crhs15 - crhs11*crhs18 + crhs16*crhs8 + crhs17*crhs9);
        const double crhs20 =     crhs19*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs21 =     crhs20*normalslave(1,0);
        const double crhs22 =     crhs13*normalslave(0,1);
        const double crhs23 =     crhs20*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs14 - crhs15*crhs21;
        rhs[1]=-crhs0*crhs22 - crhs15*crhs23;
        rhs[2]=-crhs14*crhs7 - crhs18*crhs21;
        rhs[3]=-crhs18*crhs23 - crhs22*crhs7;
        rhs[4]=crhs14*crhs2 + crhs16*crhs21;
        rhs[5]=crhs16*crhs23 + crhs2*crhs22;
        rhs[6]=crhs14*crhs4 + crhs17*crhs21;
        rhs[7]=crhs17*crhs23 + crhs22*crhs4;
        rhs[8]=crhs12*scale_factor;
        rhs[9]=crhs19*scale_factor;
        }


    return rhs;
}
/***********************************************************************************/
/***********************************************************************************/

template<>
template<>
array_1d<double, 21> AugmentedLagrangianMethodFrictionlessMortarContactCondition<3,3>::CalculateLocalRHS<21>(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,21> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 3, 3> u1 = GetVariableMatrix(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 3, 3> u2 = GetVariableMatrix(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 3, 3> X1 = GetCoordinates(this->GetGeometry(), false);
    const bounded_matrix<double, 3, 3> X2 = GetCoordinates(CurrentMasterElement, false);
    
    const array_1d<double, 3> lmnormal = GetVariableVector(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 3, 3> normalslave = GetVariableMatrix(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 3, 3> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 3, 3> DOperator = rMortarConditionMatrices.DOperator;

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=0;
        rhs[9]=0;
        rhs[10]=0;
        rhs[11]=0;
        rhs[12]=0;
        rhs[13]=0;
        rhs[14]=0;
        rhs[15]=0;
        rhs[16]=0;
        rhs[17]=0;
        rhs[18]=-crhs0*lmnormal[0];
        rhs[19]=-crhs0*lmnormal[1];
        rhs[20]=-crhs0*lmnormal[2];
        }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs2 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs4 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs6 =     normalslave(2,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) - crhs4*(X2(1,0) + u2(1,0)) - crhs5*(X2(2,0) + u2(2,0))) + normalslave(2,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) - crhs4*(X2(1,1) + u2(1,1)) - crhs5*(X2(2,1) + u2(2,1))) + normalslave(2,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) - crhs4*(X2(1,2) + u2(1,2)) - crhs5*(X2(2,2) + u2(2,2)));
        const double crhs7 =     crhs6*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs8 =     crhs7*normalslave(2,0);
        const double crhs9 =     crhs7*normalslave(2,1);
        const double crhs10 =     crhs7*normalslave(2,2);
        const double crhs11 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs8;
        rhs[1]=-crhs0*crhs9;
        rhs[2]=-crhs0*crhs10;
        rhs[3]=-crhs4*crhs8;
        rhs[4]=-crhs4*crhs9;
        rhs[5]=-crhs10*crhs4;
        rhs[6]=-crhs5*crhs8;
        rhs[7]=-crhs5*crhs9;
        rhs[8]=-crhs10*crhs5;
        rhs[9]=crhs1*crhs8;
        rhs[10]=crhs1*crhs9;
        rhs[11]=crhs1*crhs10;
        rhs[12]=crhs2*crhs8;
        rhs[13]=crhs2*crhs9;
        rhs[14]=crhs10*crhs2;
        rhs[15]=crhs3*crhs8;
        rhs[16]=crhs3*crhs9;
        rhs[17]=crhs10*crhs3;
        rhs[18]=-crhs11*lmnormal[0];
        rhs[19]=-crhs11*lmnormal[1];
        rhs[20]=crhs6*scale_factor;
        }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs2 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs6 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) - crhs4*(X2(1,0) + u2(1,0)) - crhs5*(X2(2,0) + u2(2,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) - crhs4*(X2(1,1) + u2(1,1)) - crhs5*(X2(2,1) + u2(2,1))) + normalslave(1,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) - crhs4*(X2(1,2) + u2(1,2)) - crhs5*(X2(2,2) + u2(2,2)));
        const double crhs7 =     crhs6*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs8 =     crhs7*normalslave(1,0);
        const double crhs9 =     crhs7*normalslave(1,1);
        const double crhs10 =     crhs7*normalslave(1,2);
        const double crhs11 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs8;
        rhs[1]=-crhs0*crhs9;
        rhs[2]=-crhs0*crhs10;
        rhs[3]=-crhs4*crhs8;
        rhs[4]=-crhs4*crhs9;
        rhs[5]=-crhs10*crhs4;
        rhs[6]=-crhs5*crhs8;
        rhs[7]=-crhs5*crhs9;
        rhs[8]=-crhs10*crhs5;
        rhs[9]=crhs1*crhs8;
        rhs[10]=crhs1*crhs9;
        rhs[11]=crhs1*crhs10;
        rhs[12]=crhs2*crhs8;
        rhs[13]=crhs2*crhs9;
        rhs[14]=crhs10*crhs2;
        rhs[15]=crhs3*crhs8;
        rhs[16]=crhs3*crhs9;
        rhs[17]=crhs10*crhs3;
        rhs[18]=-crhs11*lmnormal[0];
        rhs[19]=crhs6*scale_factor;
        rhs[20]=-crhs11*lmnormal[2];
        }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(1,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(1,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(1,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     crhs24*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs26 =     crhs25*normalslave(1,0);
        const double crhs27 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs29 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs30 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs31 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(2,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(2,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(2,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     crhs33*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs35 =     crhs34*normalslave(2,0);
        const double crhs36 =     crhs25*normalslave(1,1);
        const double crhs37 =     crhs34*normalslave(2,1);
        const double crhs38 =     crhs25*normalslave(1,2);
        const double crhs39 =     crhs34*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35;
        rhs[1]=-crhs0*crhs36 - crhs27*crhs37;
        rhs[2]=-crhs0*crhs38 - crhs27*crhs39;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35;
        rhs[4]=-crhs31*crhs37 - crhs36*crhs9;
        rhs[5]=-crhs31*crhs39 - crhs38*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35;
        rhs[7]=-crhs11*crhs36 - crhs32*crhs37;
        rhs[8]=-crhs11*crhs38 - crhs32*crhs39;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35;
        rhs[10]=crhs2*crhs36 + crhs28*crhs37;
        rhs[11]=crhs2*crhs38 + crhs28*crhs39;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35;
        rhs[13]=crhs29*crhs37 + crhs36*crhs4;
        rhs[14]=crhs29*crhs39 + crhs38*crhs4;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35;
        rhs[16]=crhs30*crhs37 + crhs36*crhs6;
        rhs[17]=crhs30*crhs39 + crhs38*crhs6;
        rhs[18]=-0.5*lmnormal[0]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[19]=crhs24*scale_factor;
        rhs[20]=crhs33*scale_factor;
        }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs2 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs5 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs6 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) - crhs4*(X2(1,0) + u2(1,0)) - crhs5*(X2(2,0) + u2(2,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) - crhs4*(X2(1,1) + u2(1,1)) - crhs5*(X2(2,1) + u2(2,1))) + normalslave(0,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) - crhs4*(X2(1,2) + u2(1,2)) - crhs5*(X2(2,2) + u2(2,2)));
        const double crhs7 =     crhs6*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs8 =     crhs7*normalslave(0,0);
        const double crhs9 =     crhs7*normalslave(0,1);
        const double crhs10 =     crhs7*normalslave(0,2);
        const double crhs11 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs8;
        rhs[1]=-crhs0*crhs9;
        rhs[2]=-crhs0*crhs10;
        rhs[3]=-crhs4*crhs8;
        rhs[4]=-crhs4*crhs9;
        rhs[5]=-crhs10*crhs4;
        rhs[6]=-crhs5*crhs8;
        rhs[7]=-crhs5*crhs9;
        rhs[8]=-crhs10*crhs5;
        rhs[9]=crhs1*crhs8;
        rhs[10]=crhs1*crhs9;
        rhs[11]=crhs1*crhs10;
        rhs[12]=crhs2*crhs8;
        rhs[13]=crhs2*crhs9;
        rhs[14]=crhs10*crhs2;
        rhs[15]=crhs3*crhs8;
        rhs[16]=crhs3*crhs9;
        rhs[17]=crhs10*crhs3;
        rhs[18]=crhs6*scale_factor;
        rhs[19]=-crhs11*lmnormal[1];
        rhs[20]=-crhs11*lmnormal[2];
        }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(0,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(0,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(0,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     crhs24*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs29 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs30 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs31 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(2,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(2,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(2,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     crhs33*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs35 =     crhs34*normalslave(2,0);
        const double crhs36 =     crhs25*normalslave(0,1);
        const double crhs37 =     crhs34*normalslave(2,1);
        const double crhs38 =     crhs25*normalslave(0,2);
        const double crhs39 =     crhs34*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35;
        rhs[1]=-crhs0*crhs36 - crhs27*crhs37;
        rhs[2]=-crhs0*crhs38 - crhs27*crhs39;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35;
        rhs[4]=-crhs31*crhs37 - crhs36*crhs9;
        rhs[5]=-crhs31*crhs39 - crhs38*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35;
        rhs[7]=-crhs11*crhs36 - crhs32*crhs37;
        rhs[8]=-crhs11*crhs38 - crhs32*crhs39;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35;
        rhs[10]=crhs2*crhs36 + crhs28*crhs37;
        rhs[11]=crhs2*crhs38 + crhs28*crhs39;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35;
        rhs[13]=crhs29*crhs37 + crhs36*crhs4;
        rhs[14]=crhs29*crhs39 + crhs38*crhs4;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35;
        rhs[16]=crhs30*crhs37 + crhs36*crhs6;
        rhs[17]=crhs30*crhs39 + crhs38*crhs6;
        rhs[18]=crhs24*scale_factor;
        rhs[19]=-0.5*lmnormal[1]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[20]=crhs33*scale_factor;
        }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(0,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(0,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(0,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     crhs24*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs29 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs30 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(1,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(1,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(1,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     crhs33*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     crhs25*normalslave(0,1);
        const double crhs37 =     crhs34*normalslave(1,1);
        const double crhs38 =     crhs25*normalslave(0,2);
        const double crhs39 =     crhs34*normalslave(1,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35;
        rhs[1]=-crhs0*crhs36 - crhs27*crhs37;
        rhs[2]=-crhs0*crhs38 - crhs27*crhs39;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35;
        rhs[4]=-crhs31*crhs37 - crhs36*crhs9;
        rhs[5]=-crhs31*crhs39 - crhs38*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35;
        rhs[7]=-crhs11*crhs36 - crhs32*crhs37;
        rhs[8]=-crhs11*crhs38 - crhs32*crhs39;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35;
        rhs[10]=crhs2*crhs36 + crhs28*crhs37;
        rhs[11]=crhs2*crhs38 + crhs28*crhs39;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35;
        rhs[13]=crhs29*crhs37 + crhs36*crhs4;
        rhs[14]=crhs29*crhs39 + crhs38*crhs4;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35;
        rhs[16]=crhs30*crhs37 + crhs36*crhs6;
        rhs[17]=crhs30*crhs39 + crhs38*crhs6;
        rhs[18]=crhs24*scale_factor;
        rhs[19]=crhs33*scale_factor;
        rhs[20]=-0.5*lmnormal[2]*std::pow(scale_factor, 2.0)/penalty_parameter;
        }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs7 =     X2(0,0) + u2(0,0);
        const double crhs8 =     X2(1,0) + u2(1,0);
        const double crhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs10 =     X2(2,0) + u2(2,0);
        const double crhs11 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs12 =     X1(0,1) + u1(0,1);
        const double crhs13 =     X1(1,1) + u1(1,1);
        const double crhs14 =     X1(2,1) + u1(2,1);
        const double crhs15 =     X2(0,1) + u2(0,1);
        const double crhs16 =     X2(1,1) + u2(1,1);
        const double crhs17 =     X2(2,1) + u2(2,1);
        const double crhs18 =     X1(0,2) + u1(0,2);
        const double crhs19 =     X1(1,2) + u1(1,2);
        const double crhs20 =     X1(2,2) + u1(2,2);
        const double crhs21 =     X2(0,2) + u2(0,2);
        const double crhs22 =     X2(1,2) + u2(1,2);
        const double crhs23 =     X2(2,2) + u2(2,2);
        const double crhs24 =     normalslave(0,0)*(-crhs0*crhs7 + crhs1*crhs2 - crhs10*crhs11 + crhs3*crhs4 + crhs5*crhs6 - crhs8*crhs9) + normalslave(0,1)*(-crhs0*crhs15 - crhs11*crhs17 + crhs12*crhs2 + crhs13*crhs4 + crhs14*crhs6 - crhs16*crhs9) + normalslave(0,2)*(-crhs0*crhs21 - crhs11*crhs23 + crhs18*crhs2 + crhs19*crhs4 + crhs20*crhs6 - crhs22*crhs9);
        const double crhs25 =     crhs24*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs26 =     crhs25*normalslave(0,0);
        const double crhs27 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs28 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs29 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs30 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs32 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs33 =     normalslave(1,0)*(crhs1*crhs28 - crhs10*crhs32 - crhs27*crhs7 + crhs29*crhs3 + crhs30*crhs5 - crhs31*crhs8) + normalslave(1,1)*(crhs12*crhs28 + crhs13*crhs29 + crhs14*crhs30 - crhs15*crhs27 - crhs16*crhs31 - crhs17*crhs32) + normalslave(1,2)*(crhs18*crhs28 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs27 - crhs22*crhs31 - crhs23*crhs32);
        const double crhs34 =     crhs33*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs35 =     crhs34*normalslave(1,0);
        const double crhs36 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs37 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs38 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs39 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2))
        const double crhs42 =     normalslave(2,0)*(crhs1*crhs37 - crhs10*crhs41 + crhs3*crhs38 - crhs36*crhs7 + crhs39*crhs5 - crhs40*crhs8) + normalslave(2,1)*(crhs12*crhs37 + crhs13*crhs38 + crhs14*crhs39 - crhs15*crhs36 - crhs16*crhs40 - crhs17*crhs41) + normalslave(2,2)*(crhs18*crhs37 + crhs19*crhs38 + crhs20*crhs39 - crhs21*crhs36 - crhs22*crhs40 - crhs23*crhs41);
        const double crhs43 =     crhs42*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs44 =     crhs43*normalslave(2,0);
        const double crhs45 =     crhs25*normalslave(0,1);
        const double crhs46 =     crhs34*normalslave(1,1);
        const double crhs47 =     crhs43*normalslave(2,1);
        const double crhs48 =     crhs25*normalslave(0,2);
        const double crhs49 =     crhs34*normalslave(1,2);
        const double crhs50 =     crhs43*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs26 - crhs27*crhs35 - crhs36*crhs44;
        rhs[1]=-crhs0*crhs45 - crhs27*crhs46 - crhs36*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs27*crhs49 - crhs36*crhs50;
        rhs[3]=-crhs26*crhs9 - crhs31*crhs35 - crhs40*crhs44;
        rhs[4]=-crhs31*crhs46 - crhs40*crhs47 - crhs45*crhs9;
        rhs[5]=-crhs31*crhs49 - crhs40*crhs50 - crhs48*crhs9;
        rhs[6]=-crhs11*crhs26 - crhs32*crhs35 - crhs41*crhs44;
        rhs[7]=-crhs11*crhs45 - crhs32*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs11*crhs48 - crhs32*crhs49 - crhs41*crhs50;
        rhs[9]=crhs2*crhs26 + crhs28*crhs35 + crhs37*crhs44;
        rhs[10]=crhs2*crhs45 + crhs28*crhs46 + crhs37*crhs47;
        rhs[11]=crhs2*crhs48 + crhs28*crhs49 + crhs37*crhs50;
        rhs[12]=crhs26*crhs4 + crhs29*crhs35 + crhs38*crhs44;
        rhs[13]=crhs29*crhs46 + crhs38*crhs47 + crhs4*crhs45;
        rhs[14]=crhs29*crhs49 + crhs38*crhs50 + crhs4*crhs48;
        rhs[15]=crhs26*crhs6 + crhs30*crhs35 + crhs39*crhs44;
        rhs[16]=crhs30*crhs46 + crhs39*crhs47 + crhs45*crhs6;
        rhs[17]=crhs30*crhs49 + crhs39*crhs50 + crhs48*crhs6;
        rhs[18]=crhs24*scale_factor;
        rhs[19]=crhs33*scale_factor;
        rhs[20]=crhs42*scale_factor;
        }


    return rhs;
}
/***********************************************************************************/
/***********************************************************************************/

template<>
template<>
array_1d<double, 28> AugmentedLagrangianMethodFrictionlessMortarContactCondition<3,4>::CalculateLocalRHS<28>(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,28> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 4, 3> u1 = GetVariableMatrix(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 4, 3> u2 = GetVariableMatrix(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 4, 3> X1 = GetCoordinates(this->GetGeometry(), false);
    const bounded_matrix<double, 4, 3> X2 = GetCoordinates(CurrentMasterElement, false);
    
    const array_1d<double, 4> lmnormal = GetVariableVector(this->GetGeometry(), NORMAL_CONTACT_STRESS, 0); 
    
    const bounded_matrix<double, 4, 3> normalslave = GetVariableMatrix(this->GetGeometry(),  NORMAL); 
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 4, 4> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 4, 4> DOperator = rMortarConditionMatrices.DOperator;

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=0;
        rhs[9]=0;
        rhs[10]=0;
        rhs[11]=0;
        rhs[12]=0;
        rhs[13]=0;
        rhs[14]=0;
        rhs[15]=0;
        rhs[16]=0;
        rhs[17]=0;
        rhs[18]=0;
        rhs[19]=0;
        rhs[20]=0;
        rhs[21]=0;
        rhs[22]=0;
        rhs[23]=0;
        rhs[24]=-crhs0*lmnormal[0];
        rhs[25]=-crhs0*lmnormal[1];
        rhs[26]=-crhs0*lmnormal[2];
        rhs[27]=-crhs0*lmnormal[3];
        }
    else if (rActiveInactive == 8 )
    {
        const double crhs0 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs2 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs4 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(3,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(3,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(3,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     crhs8*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs10 =     crhs9*normalslave(3,0);
        const double crhs11 =     crhs9*normalslave(3,1);
        const double crhs12 =     crhs9*normalslave(3,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs13*lmnormal[0];
        rhs[25]=-crhs13*lmnormal[1];
        rhs[26]=-crhs13*lmnormal[2];
        rhs[27]=crhs8*scale_factor;
        }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs2 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs4 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(2,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(2,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(2,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     crhs8*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs10 =     crhs9*normalslave(2,0);
        const double crhs11 =     crhs9*normalslave(2,1);
        const double crhs12 =     crhs9*normalslave(2,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs13*lmnormal[0];
        rhs[25]=-crhs13*lmnormal[1];
        rhs[26]=crhs8*scale_factor;
        rhs[27]=-crhs13*lmnormal[3];
        }
    else if (rActiveInactive == 12 )
    {
        const double crhs0 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(2,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(2,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(2,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs34 =     crhs33*normalslave(2,0);
        const double crhs35 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(3,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(3,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(3,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs45 =     crhs44*normalslave(3,0);
        const double crhs46 =     crhs33*normalslave(2,1);
        const double crhs47 =     crhs44*normalslave(3,1);
        const double crhs48 =     crhs33*normalslave(2,2);
        const double crhs49 =     crhs44*normalslave(3,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs50*lmnormal[0];
        rhs[25]=-crhs50*lmnormal[1];
        rhs[26]=crhs32*scale_factor;
        rhs[27]=crhs43*scale_factor;
        }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs2 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs4 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(1,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     crhs8*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs10 =     crhs9*normalslave(1,0);
        const double crhs11 =     crhs9*normalslave(1,1);
        const double crhs12 =     crhs9*normalslave(1,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=-crhs13*lmnormal[0];
        rhs[25]=crhs8*scale_factor;
        rhs[26]=-crhs13*lmnormal[2];
        rhs[27]=-crhs13*lmnormal[3];
        }
    else if (rActiveInactive == 10 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(1,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(1,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs34 =     crhs33*normalslave(1,0);
        const double crhs35 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(3,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(3,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(3,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs45 =     crhs44*normalslave(3,0);
        const double crhs46 =     crhs33*normalslave(1,1);
        const double crhs47 =     crhs44*normalslave(3,1);
        const double crhs48 =     crhs33*normalslave(1,2);
        const double crhs49 =     crhs44*normalslave(3,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs50*lmnormal[0];
        rhs[25]=crhs32*scale_factor;
        rhs[26]=-crhs50*lmnormal[2];
        rhs[27]=crhs43*scale_factor;
        }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(1,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(1,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs34 =     crhs33*normalslave(1,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     crhs33*normalslave(1,1);
        const double crhs47 =     crhs44*normalslave(2,1);
        const double crhs48 =     crhs33*normalslave(1,2);
        const double crhs49 =     crhs44*normalslave(2,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=-crhs50*lmnormal[0];
        rhs[25]=crhs32*scale_factor;
        rhs[26]=crhs43*scale_factor;
        rhs[27]=-crhs50*lmnormal[3];
        }
    else if (rActiveInactive == 14 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(1,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(1,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(1,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs34 =     crhs33*normalslave(1,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs48 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs49 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs50 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs51 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(3,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(3,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(3,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     crhs54*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs56 =     crhs55*normalslave(3,0);
        const double crhs57 =     crhs33*normalslave(1,1);
        const double crhs58 =     crhs44*normalslave(2,1);
        const double crhs59 =     crhs55*normalslave(3,1);
        const double crhs60 =     crhs33*normalslave(1,2);
        const double crhs61 =     crhs44*normalslave(2,2);
        const double crhs62 =     crhs55*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=-0.5*lmnormal[0]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[25]=crhs32*scale_factor;
        rhs[26]=crhs43*scale_factor;
        rhs[27]=crhs54*scale_factor;
        }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs2 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs4 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs6 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs7 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs8 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs1*(X1(0,0) + u1(0,0)) + crhs2*(X1(1,0) + u1(1,0)) + crhs3*(X1(2,0) + u1(2,0)) + crhs4*(X1(3,0) + u1(3,0)) - crhs5*(X2(1,0) + u2(1,0)) - crhs6*(X2(2,0) + u2(2,0)) - crhs7*(X2(3,0) + u2(3,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs1*(X1(0,1) + u1(0,1)) + crhs2*(X1(1,1) + u1(1,1)) + crhs3*(X1(2,1) + u1(2,1)) + crhs4*(X1(3,1) + u1(3,1)) - crhs5*(X2(1,1) + u2(1,1)) - crhs6*(X2(2,1) + u2(2,1)) - crhs7*(X2(3,1) + u2(3,1))) + normalslave(0,2)*(-crhs0*(X2(0,2) + u2(0,2)) + crhs1*(X1(0,2) + u1(0,2)) + crhs2*(X1(1,2) + u1(1,2)) + crhs3*(X1(2,2) + u1(2,2)) + crhs4*(X1(3,2) + u1(3,2)) - crhs5*(X2(1,2) + u2(1,2)) - crhs6*(X2(2,2) + u2(2,2)) - crhs7*(X2(3,2) + u2(3,2)));
        const double crhs9 =     crhs8*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs10 =     crhs9*normalslave(0,0);
        const double crhs11 =     crhs9*normalslave(0,1);
        const double crhs12 =     crhs9*normalslave(0,2);
        const double crhs13 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs10;
        rhs[1]=-crhs0*crhs11;
        rhs[2]=-crhs0*crhs12;
        rhs[3]=-crhs10*crhs5;
        rhs[4]=-crhs11*crhs5;
        rhs[5]=-crhs12*crhs5;
        rhs[6]=-crhs10*crhs6;
        rhs[7]=-crhs11*crhs6;
        rhs[8]=-crhs12*crhs6;
        rhs[9]=-crhs10*crhs7;
        rhs[10]=-crhs11*crhs7;
        rhs[11]=-crhs12*crhs7;
        rhs[12]=crhs1*crhs10;
        rhs[13]=crhs1*crhs11;
        rhs[14]=crhs1*crhs12;
        rhs[15]=crhs10*crhs2;
        rhs[16]=crhs11*crhs2;
        rhs[17]=crhs12*crhs2;
        rhs[18]=crhs10*crhs3;
        rhs[19]=crhs11*crhs3;
        rhs[20]=crhs12*crhs3;
        rhs[21]=crhs10*crhs4;
        rhs[22]=crhs11*crhs4;
        rhs[23]=crhs12*crhs4;
        rhs[24]=crhs8*scale_factor;
        rhs[25]=-crhs13*lmnormal[1];
        rhs[26]=-crhs13*lmnormal[2];
        rhs[27]=-crhs13*lmnormal[3];
        }
    else if (rActiveInactive == 9 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(3,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(3,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(3,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs45 =     crhs44*normalslave(3,0);
        const double crhs46 =     crhs33*normalslave(0,1);
        const double crhs47 =     crhs44*normalslave(3,1);
        const double crhs48 =     crhs33*normalslave(0,2);
        const double crhs49 =     crhs44*normalslave(3,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=-crhs50*lmnormal[1];
        rhs[26]=-crhs50*lmnormal[2];
        rhs[27]=crhs43*scale_factor;
        }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     crhs33*normalslave(0,1);
        const double crhs47 =     crhs44*normalslave(2,1);
        const double crhs48 =     crhs33*normalslave(0,2);
        const double crhs49 =     crhs44*normalslave(2,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=-crhs50*lmnormal[1];
        rhs[26]=crhs43*scale_factor;
        rhs[27]=-crhs50*lmnormal[3];
        }
    else if (rActiveInactive == 13 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(2,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(2,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(2,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs45 =     crhs44*normalslave(2,0);
        const double crhs46 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs48 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs49 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs50 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs51 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(3,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(3,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(3,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     crhs54*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs56 =     crhs55*normalslave(3,0);
        const double crhs57 =     crhs33*normalslave(0,1);
        const double crhs58 =     crhs44*normalslave(2,1);
        const double crhs59 =     crhs55*normalslave(3,1);
        const double crhs60 =     crhs33*normalslave(0,2);
        const double crhs61 =     crhs44*normalslave(2,2);
        const double crhs62 =     crhs55*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=-0.5*lmnormal[1]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[26]=crhs43*scale_factor;
        rhs[27]=crhs54*scale_factor;
        }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     crhs33*normalslave(0,1);
        const double crhs47 =     crhs44*normalslave(1,1);
        const double crhs48 =     crhs33*normalslave(0,2);
        const double crhs49 =     crhs44*normalslave(1,2);
        const double crhs50 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45;
        rhs[1]=-crhs0*crhs46 - crhs35*crhs47;
        rhs[2]=-crhs0*crhs48 - crhs35*crhs49;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45;
        rhs[4]=-crhs11*crhs46 - crhs40*crhs47;
        rhs[5]=-crhs11*crhs48 - crhs40*crhs49;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45;
        rhs[7]=-crhs13*crhs46 - crhs41*crhs47;
        rhs[8]=-crhs13*crhs48 - crhs41*crhs49;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45;
        rhs[10]=-crhs15*crhs46 - crhs42*crhs47;
        rhs[11]=-crhs15*crhs48 - crhs42*crhs49;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45;
        rhs[13]=crhs2*crhs46 + crhs36*crhs47;
        rhs[14]=crhs2*crhs48 + crhs36*crhs49;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45;
        rhs[16]=crhs37*crhs47 + crhs4*crhs46;
        rhs[17]=crhs37*crhs49 + crhs4*crhs48;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45;
        rhs[19]=crhs38*crhs47 + crhs46*crhs6;
        rhs[20]=crhs38*crhs49 + crhs48*crhs6;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45;
        rhs[22]=crhs39*crhs47 + crhs46*crhs8;
        rhs[23]=crhs39*crhs49 + crhs48*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=crhs43*scale_factor;
        rhs[26]=-crhs50*lmnormal[2];
        rhs[27]=-crhs50*lmnormal[3];
    }
    else if (rActiveInactive == 11 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs48 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs49 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs50 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs51 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(3,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(3,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(3,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     crhs54*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs56 =     crhs55*normalslave(3,0);
        const double crhs57 =     crhs33*normalslave(0,1);
        const double crhs58 =     crhs44*normalslave(1,1);
        const double crhs59 =     crhs55*normalslave(3,1);
        const double crhs60 =     crhs33*normalslave(0,2);
        const double crhs61 =     crhs44*normalslave(1,2);
        const double crhs62 =     crhs55*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=crhs43*scale_factor;
        rhs[26]=-0.5*lmnormal[2]*std::pow(scale_factor, 2.0)/penalty_parameter;
        rhs[27]=crhs54*scale_factor;
        }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs48 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs49 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs50 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs51 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(2,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(2,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(2,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     crhs54*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs56 =     crhs55*normalslave(2,0);
        const double crhs57 =     crhs33*normalslave(0,1);
        const double crhs58 =     crhs44*normalslave(1,1);
        const double crhs59 =     crhs55*normalslave(2,1);
        const double crhs60 =     crhs33*normalslave(0,2);
        const double crhs61 =     crhs44*normalslave(1,2);
        const double crhs62 =     crhs55*normalslave(2,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56;
        rhs[1]=-crhs0*crhs57 - crhs35*crhs58 - crhs46*crhs59;
        rhs[2]=-crhs0*crhs60 - crhs35*crhs61 - crhs46*crhs62;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56;
        rhs[4]=-crhs11*crhs57 - crhs40*crhs58 - crhs51*crhs59;
        rhs[5]=-crhs11*crhs60 - crhs40*crhs61 - crhs51*crhs62;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56;
        rhs[7]=-crhs13*crhs57 - crhs41*crhs58 - crhs52*crhs59;
        rhs[8]=-crhs13*crhs60 - crhs41*crhs61 - crhs52*crhs62;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56;
        rhs[10]=-crhs15*crhs57 - crhs42*crhs58 - crhs53*crhs59;
        rhs[11]=-crhs15*crhs60 - crhs42*crhs61 - crhs53*crhs62;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56;
        rhs[13]=crhs2*crhs57 + crhs36*crhs58 + crhs47*crhs59;
        rhs[14]=crhs2*crhs60 + crhs36*crhs61 + crhs47*crhs62;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56;
        rhs[16]=crhs37*crhs58 + crhs4*crhs57 + crhs48*crhs59;
        rhs[17]=crhs37*crhs61 + crhs4*crhs60 + crhs48*crhs62;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56;
        rhs[19]=crhs38*crhs58 + crhs49*crhs59 + crhs57*crhs6;
        rhs[20]=crhs38*crhs61 + crhs49*crhs62 + crhs6*crhs60;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56;
        rhs[22]=crhs39*crhs58 + crhs50*crhs59 + crhs57*crhs8;
        rhs[23]=crhs39*crhs61 + crhs50*crhs62 + crhs60*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=crhs43*scale_factor;
        rhs[26]=crhs54*scale_factor;
        rhs[27]=-0.5*lmnormal[3]*std::pow(scale_factor, 2.0)/penalty_parameter;
        }
    else if (rActiveInactive == 15 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs1 =     X1(0,0) + u1(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs3 =     X1(1,0) + u1(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs5 =     X1(2,0) + u1(2,0);
        const double crhs6 =     DOperator(0,2); // DOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs7 =     X1(3,0) + u1(3,0);
        const double crhs8 =     DOperator(0,3); // DOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs9 =     X2(0,0) + u2(0,0);
        const double crhs10 =     X2(1,0) + u2(1,0);
        const double crhs11 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs12 =     X2(2,0) + u2(2,0);
        const double crhs13 =     MOperator(0,2); // MOPERATOR(0,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs14 =     X2(3,0) + u2(3,0);
        const double crhs15 =     MOperator(0,3); // MOPERATOR(0,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs16 =     X1(0,1) + u1(0,1);
        const double crhs17 =     X1(1,1) + u1(1,1);
        const double crhs18 =     X1(2,1) + u1(2,1);
        const double crhs19 =     X1(3,1) + u1(3,1);
        const double crhs20 =     X2(0,1) + u2(0,1);
        const double crhs21 =     X2(1,1) + u2(1,1);
        const double crhs22 =     X2(2,1) + u2(2,1);
        const double crhs23 =     X2(3,1) + u2(3,1);
        const double crhs24 =     X1(0,2) + u1(0,2);
        const double crhs25 =     X1(1,2) + u1(1,2);
        const double crhs26 =     X1(2,2) + u1(2,2);
        const double crhs27 =     X1(3,2) + u1(3,2);
        const double crhs28 =     X2(0,2) + u2(0,2);
        const double crhs29 =     X2(1,2) + u2(1,2);
        const double crhs30 =     X2(2,2) + u2(2,2);
        const double crhs31 =     X2(3,2) + u2(3,2);
        const double crhs32 =     normalslave(0,0)*(-crhs0*crhs9 + crhs1*crhs2 - crhs10*crhs11 - crhs12*crhs13 - crhs14*crhs15 + crhs3*crhs4 + crhs5*crhs6 + crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs20 - crhs11*crhs21 - crhs13*crhs22 - crhs15*crhs23 + crhs16*crhs2 + crhs17*crhs4 + crhs18*crhs6 + crhs19*crhs8) + normalslave(0,2)*(-crhs0*crhs28 - crhs11*crhs29 - crhs13*crhs30 - crhs15*crhs31 + crhs2*crhs24 + crhs25*crhs4 + crhs26*crhs6 + crhs27*crhs8);
        const double crhs33 =     crhs32*penalty_parameter + lmnormal[0]*scale_factor;
        const double crhs34 =     crhs33*normalslave(0,0);
        const double crhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs36 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs37 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs38 =     DOperator(1,2); // DOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs39 =     DOperator(1,3); // DOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs41 =     MOperator(1,2); // MOPERATOR(1,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs42 =     MOperator(1,3); // MOPERATOR(1,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs43 =     normalslave(1,0)*(crhs1*crhs36 - crhs10*crhs40 - crhs12*crhs41 - crhs14*crhs42 + crhs3*crhs37 - crhs35*crhs9 + crhs38*crhs5 + crhs39*crhs7) + normalslave(1,1)*(crhs16*crhs36 + crhs17*crhs37 + crhs18*crhs38 + crhs19*crhs39 - crhs20*crhs35 - crhs21*crhs40 - crhs22*crhs41 - crhs23*crhs42) + normalslave(1,2)*(crhs24*crhs36 + crhs25*crhs37 + crhs26*crhs38 + crhs27*crhs39 - crhs28*crhs35 - crhs29*crhs40 - crhs30*crhs41 - crhs31*crhs42);
        const double crhs44 =     crhs43*penalty_parameter + lmnormal[1]*scale_factor;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     MOperator(2,0); // MOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs47 =     DOperator(2,0); // DOPERATOR(2,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs48 =     DOperator(2,1); // DOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs49 =     DOperator(2,2); // DOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs50 =     DOperator(2,3); // DOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs51 =     MOperator(2,1); // MOPERATOR(2,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs52 =     MOperator(2,2); // MOPERATOR(2,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs53 =     MOperator(2,3); // MOPERATOR(2,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs54 =     normalslave(2,0)*(crhs1*crhs47 - crhs10*crhs51 - crhs12*crhs52 - crhs14*crhs53 + crhs3*crhs48 - crhs46*crhs9 + crhs49*crhs5 + crhs50*crhs7) + normalslave(2,1)*(crhs16*crhs47 + crhs17*crhs48 + crhs18*crhs49 + crhs19*crhs50 - crhs20*crhs46 - crhs21*crhs51 - crhs22*crhs52 - crhs23*crhs53) + normalslave(2,2)*(crhs24*crhs47 + crhs25*crhs48 + crhs26*crhs49 + crhs27*crhs50 - crhs28*crhs46 - crhs29*crhs51 - crhs30*crhs52 - crhs31*crhs53);
        const double crhs55 =     crhs54*penalty_parameter + lmnormal[2]*scale_factor;
        const double crhs56 =     crhs55*normalslave(2,0);
        const double crhs57 =     MOperator(3,0); // MOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs58 =     DOperator(3,0); // DOPERATOR(3,0)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs59 =     DOperator(3,1); // DOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs60 =     DOperator(3,2); // DOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs61 =     DOperator(3,3); // DOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2))
        const double crhs62 =     MOperator(3,1); // MOPERATOR(3,1)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs63 =     MOperator(3,2); // MOPERATOR(3,2)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs64 =     MOperator(3,3); // MOPERATOR(3,3)(U1(0,0), U1(0,1), U1(0,2), U1(1,0), U1(1,1), U1(1,2), U1(2,0), U1(2,1), U1(2,2), U1(3,0), U1(3,1), U1(3,2), U2(0,0), U2(0,1), U2(0,2), U2(1,0), U2(1,1), U2(1,2), U2(2,0), U2(2,1), U2(2,2), U2(3,0), U2(3,1), U2(3,2))
        const double crhs65 =     normalslave(3,0)*(crhs1*crhs58 - crhs10*crhs62 - crhs12*crhs63 - crhs14*crhs64 + crhs3*crhs59 + crhs5*crhs60 - crhs57*crhs9 + crhs61*crhs7) + normalslave(3,1)*(crhs16*crhs58 + crhs17*crhs59 + crhs18*crhs60 + crhs19*crhs61 - crhs20*crhs57 - crhs21*crhs62 - crhs22*crhs63 - crhs23*crhs64) + normalslave(3,2)*(crhs24*crhs58 + crhs25*crhs59 + crhs26*crhs60 + crhs27*crhs61 - crhs28*crhs57 - crhs29*crhs62 - crhs30*crhs63 - crhs31*crhs64);
        const double crhs66 =     crhs65*penalty_parameter + lmnormal[3]*scale_factor;
        const double crhs67 =     crhs66*normalslave(3,0);
        const double crhs68 =     crhs33*normalslave(0,1);
        const double crhs69 =     crhs44*normalslave(1,1);
        const double crhs70 =     crhs55*normalslave(2,1);
        const double crhs71 =     crhs66*normalslave(3,1);
        const double crhs72 =     crhs33*normalslave(0,2);
        const double crhs73 =     crhs44*normalslave(1,2);
        const double crhs74 =     crhs55*normalslave(2,2);
        const double crhs75 =     crhs66*normalslave(3,2);
    
        rhs[0]=-crhs0*crhs34 - crhs35*crhs45 - crhs46*crhs56 - crhs57*crhs67;
        rhs[1]=-crhs0*crhs68 - crhs35*crhs69 - crhs46*crhs70 - crhs57*crhs71;
        rhs[2]=-crhs0*crhs72 - crhs35*crhs73 - crhs46*crhs74 - crhs57*crhs75;
        rhs[3]=-crhs11*crhs34 - crhs40*crhs45 - crhs51*crhs56 - crhs62*crhs67;
        rhs[4]=-crhs11*crhs68 - crhs40*crhs69 - crhs51*crhs70 - crhs62*crhs71;
        rhs[5]=-crhs11*crhs72 - crhs40*crhs73 - crhs51*crhs74 - crhs62*crhs75;
        rhs[6]=-crhs13*crhs34 - crhs41*crhs45 - crhs52*crhs56 - crhs63*crhs67;
        rhs[7]=-crhs13*crhs68 - crhs41*crhs69 - crhs52*crhs70 - crhs63*crhs71;
        rhs[8]=-crhs13*crhs72 - crhs41*crhs73 - crhs52*crhs74 - crhs63*crhs75;
        rhs[9]=-crhs15*crhs34 - crhs42*crhs45 - crhs53*crhs56 - crhs64*crhs67;
        rhs[10]=-crhs15*crhs68 - crhs42*crhs69 - crhs53*crhs70 - crhs64*crhs71;
        rhs[11]=-crhs15*crhs72 - crhs42*crhs73 - crhs53*crhs74 - crhs64*crhs75;
        rhs[12]=crhs2*crhs34 + crhs36*crhs45 + crhs47*crhs56 + crhs58*crhs67;
        rhs[13]=crhs2*crhs68 + crhs36*crhs69 + crhs47*crhs70 + crhs58*crhs71;
        rhs[14]=crhs2*crhs72 + crhs36*crhs73 + crhs47*crhs74 + crhs58*crhs75;
        rhs[15]=crhs34*crhs4 + crhs37*crhs45 + crhs48*crhs56 + crhs59*crhs67;
        rhs[16]=crhs37*crhs69 + crhs4*crhs68 + crhs48*crhs70 + crhs59*crhs71;
        rhs[17]=crhs37*crhs73 + crhs4*crhs72 + crhs48*crhs74 + crhs59*crhs75;
        rhs[18]=crhs34*crhs6 + crhs38*crhs45 + crhs49*crhs56 + crhs60*crhs67;
        rhs[19]=crhs38*crhs69 + crhs49*crhs70 + crhs6*crhs68 + crhs60*crhs71;
        rhs[20]=crhs38*crhs73 + crhs49*crhs74 + crhs6*crhs72 + crhs60*crhs75;
        rhs[21]=crhs34*crhs8 + crhs39*crhs45 + crhs50*crhs56 + crhs61*crhs67;
        rhs[22]=crhs39*crhs69 + crhs50*crhs70 + crhs61*crhs71 + crhs68*crhs8;
        rhs[23]=crhs39*crhs73 + crhs50*crhs74 + crhs61*crhs75 + crhs72*crhs8;
        rhs[24]=crhs32*scale_factor;
        rhs[25]=crhs43*scale_factor;
        rhs[26]=crhs54*scale_factor;
        rhs[27]=crhs65*scale_factor;
        }


    return rhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes> // NOTE: Formulation taken from Mohamed Khalil work
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaDetJSlave(
   GeneralVariables& rVariables,
   DerivativeData& rDerivativeData
   )
{
    if (TDim == 2)
    {
        // Fill up the elements corresponding to the slave DOFs - the rest remains zero
        for ( unsigned int i_slave = 0, i = 0; i_slave < TNumNodes; ++i_slave, i += TDim )
        {
            rDerivativeData.DeltaJ_s[i    ] = rVariables.j_Slave( 0, 0 ) * rVariables.DN_De_Slave( i_slave, 0) / rVariables.DetJSlave;
            rDerivativeData.DeltaJ_s[i + 1] = rVariables.j_Slave( 1, 0 ) * rVariables.DN_De_Slave( i_slave, 0) / rVariables.DetJSlave;
        }
    }
    else
    {
        const array_1d<double,TNumNodes>& DN_Dxi  = column( rVariables.DN_De_Slave, 0 );
        const array_1d<double,TNumNodes>& DN_Deta = column( rVariables.DN_De_Slave, 1 );
        
        const array_1d<double,TDim>& J_xi    = column( rVariables.j_Slave, 0 );
        const array_1d<double,TDim>& J_eta   = column( rVariables.j_Slave, 1 );
        
        const array_1d<double,TDim>& n = prod(trans(rDerivativeData.Normal_m), rVariables.N_Slave); // FIXME: Check this!!!!
        
        bounded_matrix<double, TDim, TDim> Delta_Jxi_x_Jeta;
        
        for ( unsigned int i_slave = 0, i = 0; i_slave < TNumNodes; ++i_slave, i += TDim )
        {
            Delta_Jxi_x_Jeta(0,0) = 0.0;
            Delta_Jxi_x_Jeta(0,1) =  J_eta(2) * DN_Dxi(i_slave) - J_xi(2) * DN_Deta(i_slave); 
            Delta_Jxi_x_Jeta(0,2) = -J_eta(1) * DN_Dxi(i_slave) + J_xi(1) * DN_Deta(i_slave); 
            Delta_Jxi_x_Jeta(1,0) = -J_eta(2) * DN_Dxi(i_slave) + J_xi(2) * DN_Deta(i_slave); 
            Delta_Jxi_x_Jeta(1,1) = 0.0;
            Delta_Jxi_x_Jeta(1,2) =  J_eta(0) * DN_Dxi(i_slave) - J_xi(0) * DN_Deta(i_slave);
            Delta_Jxi_x_Jeta(2,0) =  J_eta(1) * DN_Dxi(i_slave) - J_xi(1) * DN_Deta(i_slave); 
            Delta_Jxi_x_Jeta(2,1) = -J_eta(0) * DN_Dxi(i_slave) + J_xi(0) * DN_Deta(i_slave); 
            Delta_Jxi_x_Jeta(2,2) = 0.0;
            
            rDerivativeData.DeltaJ_s[i    ] = inner_prod( n, column( Delta_Jxi_x_Jeta, 0 ) );
            rDerivativeData.DeltaJ_s[i + 1] = inner_prod( n, column( Delta_Jxi_x_Jeta, 1 ) );
            rDerivativeData.DeltaJ_s[i + 2] = inner_prod( n, column( Delta_Jxi_x_Jeta, 2 ) );
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes> // NOTE: Formulation taken from Mohamed Khalil work
bounded_matrix<double, TDim, TDim> AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::LocalDeltaNormal( // NOTE: Not the mean, look in the contact utilities 
    const GeometryType& CondGeometry,
    const unsigned int node_index
    )
{
    // Tolerance
    const double tol = 1.0e-14;
        
    bounded_matrix<double, TDim, TDim> Delta_ne_adj;
    bounded_matrix<double, TDim, TDim> Ce;
    
    const bounded_matrix<double, TDim, TDim> I = IdentityMatrix(TDim, TDim);
    
    bounded_matrix<double, TDim, TDim> DeltaNormal = ZeroMatrix(TDim,TDim);
    
    const array_1d<double, 3> ne = this->GetValue(NORMAL);   // normalized condition normal
    bounded_matrix<double, TDim, TDim> ne_o_ne = subrange( outer_prod( ne, ne ), 0, TDim, 0, TDim );
    
    if (TDim == 2)
    {
        const double ne_norm = this->GetGeometry( ).Length( ); // The norm of a geometry's normal is its characteristic dimension - length for 2D and area for 3D 
                        
        Delta_ne_adj( 0, 0 ) =  0.0;
        Delta_ne_adj( 0, 1 ) = -1.0;
        Delta_ne_adj( 1, 0 ) =  1.0;
        Delta_ne_adj( 1, 1 ) =  0.0;
        
        double DN_De_j = 0.0;
        if( node_index == 0 )
        {
            DN_De_j = - 0.5;
        }
        else if( node_index == 1 )
        {
            DN_De_j =   0.5;
        }
        
        Ce = prod( I - ne_o_ne, Delta_ne_adj ) / ne_norm;     // In 2D, Delta_ne_adj is node-independent => evaluated outside the nodes loop
        
        DeltaNormal = - 2.0 * Ce * DN_De_j; // NOTE: Check why - 2???!!!, it was the only wayto ensure the same value as the symbolic. You will need to repeat this in 3D            
//         DeltaNormal = Ce * DN_De_j;             
    }
    else
    {
        const double ne_norm = this->GetGeometry( ).Area( ); // The norm of a geometry's normal is its characteristic dimension - length for 2D and area for 3D 
        
        MatrixType J = ZeroMatrix( 3, 2 ); // Jacobian [ 3D global x 2D local ]
        array_1d<double, 2> DN_De_j;
        array_1d<double, 3> local_coords_j;
        
        if( TNumNodes == 3 )    // linear triangle element
        {
            if( node_index == 0 )
            {
                local_coords_j[0] = 0.0;
                local_coords_j[1] = 0.0;
                DN_De_j[0] = - 1.0;
                DN_De_j[1] = - 1.0;
            }
            else if( node_index == 1 )
            {
                local_coords_j[0] = 1.0;
                local_coords_j[1] = 0.0;
                DN_De_j[0] = 1.0;
                DN_De_j[1] = 0.0;
            }
            else // node_index == 2
            {
                local_coords_j[0] = 0.0;
                local_coords_j[1] = 1.0;
                DN_De_j[0] = 0.0;
                DN_De_j[1] = 1.0;
            }
        }
        else if( TNumNodes == 4 )    // linear quad element 
        {
            if( node_index == 0 )
            {
                local_coords_j[0] = - 1.0;
                local_coords_j[1] = - 1.0;
                DN_De_j[0] = - 0.5;
                DN_De_j[1] = - 0.5;
            }
            else if( node_index == 1 )
            {
                local_coords_j[0] =   1.0;
                local_coords_j[1] = - 1.0;
                DN_De_j[0] =   0.5;
                DN_De_j[1] = - 0.5;
            }
            else if( node_index == 2 )
            {
                local_coords_j[0] =  1.0;
                local_coords_j[1] =  1.0;
                DN_De_j[0] =  0.5;
                DN_De_j[1] =  0.5;
            }
            else // node_index == 3
            {
                local_coords_j[0] = - 1.0;
                local_coords_j[1] =   1.0;
                DN_De_j[0] = - 0.5;
                DN_De_j[1] =   0.5;
            }
        }
        
        this->GetGeometry( ).Jacobian( J, local_coords_j );
        
        Delta_ne_adj(0,0) = 0.0;
        Delta_ne_adj(0,1) = +J(2,1) * DN_De_j[0] - J(2,0) * DN_De_j[1]; 
        Delta_ne_adj(0,2) = -J(1,1) * DN_De_j[0] + J(1,0) * DN_De_j[1]; 
        Delta_ne_adj(1,0) = -J(2,1) * DN_De_j[0] + J(2,0) * DN_De_j[1]; 
        Delta_ne_adj(1,1) = 0.0;                   
        Delta_ne_adj(1,2) = +J(0,1) * DN_De_j[0] - J(0,0) * DN_De_j[1]; 
        Delta_ne_adj(2,0) = +J(1,1) * DN_De_j[0] - J(1,0) * DN_De_j[1]; 
        Delta_ne_adj(2,1) = -J(0,1) * DN_De_j[0] + J(0,0) * DN_De_j[1]; 
        Delta_ne_adj(2,2) = 0.0;
        
        Ce = prod( I - ne_o_ne, Delta_ne_adj ) / ne_norm;
        DeltaNormal = Ce;
    }
    
    const double ne_norm = norm_2( ne );
    const double ne_norm_3 = ne_norm * ne_norm * ne_norm;
    
    if ( ne_norm_3 > tol )
    {
        const bounded_matrix<double, TDim, TDim> Cj = I / ne_norm - ne_o_ne / ne_norm_3;
        DeltaNormal = prod( Cj, DeltaNormal );
    }
        
    return DeltaNormal; 
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes> // NOTE: Formulation taken from Mohamed Khalil work
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaNormalSlave(DerivativeData& rDerivativeData)
{
    if (TDim == 2) // TODO: Use explicit 
    {
        for ( unsigned int i_slave = 0, i = 0; i_slave < TNumNodes; ++i_slave, i += TDim )
        {
//             bounded_matrix<double, 2, 2> DeltaNormal = GetGeometry()[i_slave].GetValue(DELTA_NORMAL);
            bounded_matrix<double, 2, 2> DeltaNormal = this->LocalDeltaNormal(GetGeometry(), i_slave);
            for (unsigned i_dof = 0; i_dof < TDim; i_dof++) 
            {
                for (unsigned int i_node = 0; i_node < TNumNodes; i_node++)
                {
                    row(rDerivativeData.Delta_Normal_s[i_slave * TDim + i_dof], i_node)      =   trans(column(DeltaNormal, i_dof)); 
                }
            }
        }
    }
    else
    {
        for ( unsigned int i_slave = 0, i = 0; i_slave < TNumNodes; ++i_slave, i += TDim )
        {
//             bounded_matrix<double, 3, 3> DeltaNormal = GetGeometry()[i_slave]->GetValue(DELTA_NORMAL);
            const bounded_matrix<double, 3, 3> DeltaNormal = this->LocalDeltaNormal(this->GetGeometry(), i_slave);
            
            // Calculate nodal tangents
            
            const MatrixType I = IdentityMatrix( TDim, TDim );
            
            array_1d<double, 2> DN_De_j;
            if( TNumNodes == 3 )    // linear triangle element // TODO: Use an enum
            {
                if( i_slave == 0 )
                {
                    DN_De_j[0] = -1.0;
                    DN_De_j[1] = -1.0;
                }
                else if( i_slave == 1 )
                {
                    DN_De_j[0] = 1.0;
                    DN_De_j[1] = 0.0;
                }
                else // i_slave == 2
                {
                    DN_De_j[0] = 0.0;
                    DN_De_j[1] = 1.0;
                }
            }
            else if( TNumNodes == 4 )    // linear quad element 
            {
                if( i_slave == 0 )
                {
                    DN_De_j[0] = -0.5;
                    DN_De_j[1] = -0.5;
                }
                else if( i_slave == 1 )
                {
                    DN_De_j[0] =  0.5;
                    DN_De_j[1] = -0.5;
                }
                else if( i_slave == 2 )
                {
                    DN_De_j[0] =  0.5;
                    DN_De_j[1] =  0.5;
                }
                else // i_slave == 3
                {
                    DN_De_j[0] = -0.5;
                    DN_De_j[1] =  0.5;
                }
            }
            
            for (unsigned i_dof = 0; i_dof < TDim; i_dof++) 
            {
                for (unsigned int i_node = 0; i_node < TNumNodes; i_node++)
                {
                    row(rDerivativeData.Delta_Normal_s[i_slave * TDim + i_dof], i_node) = trans(column(DeltaNormal, i_dof)); 
                }
            }
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes> // NOTE: Formulation taken from Mohamed Khalil work
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaNormalMaster(DerivativeData& rDerivativeData)
{
    if (TDim == 2)
    {
        for ( unsigned int i_master = 0, i = 0; i_master < TNumNodes; ++i_master, i += TDim )
        {
//             bounded_matrix<double, 2, 2> DeltaNormal = GetGeometry[i_master].GetValue(DELTA_NORMAL);
            bounded_matrix<double, 2, 2> DeltaNormal = this->LocalDeltaNormal(rDerivativeData.MasterGeometry, i_master);
            for (unsigned i_dof = 0; i_dof < TDim; i_dof++) 
            {
                for (unsigned int i_node = 0; i_node < TNumNodes; i_node++)
                {
                    row(rDerivativeData.Delta_Normal_m[i_master * TDim + i_dof], i_node) = trans(column(DeltaNormal, i_dof)); 
                }
            }
        }
    }
    else
    {
        for ( unsigned int i_master = 0, i = 0; i_master < TNumNodes; ++i_master, i += TDim )
        {
//             bounded_matrix<double, 3, 3> DeltaNormal = GetGeometry[i_master]->GetValue(DELTA_NORMAL);
            const bounded_matrix<double, 3, 3> DeltaNormal = this->LocalDeltaNormal(rDerivativeData.MasterGeometry, i_master);
            for (unsigned i_dof = 0; i_dof < TDim; i_dof++) 
            {
                for (unsigned int i_node = 0; i_node < TNumNodes; i_node++)
                {
                    row(rDerivativeData.Delta_Normal_m[i_master * TDim + i_dof], i_node)  = trans(column(DeltaNormal, i_dof)); 
                }
            }
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaN(
   GeneralVariables& rVariables,
   DerivativeData& rDerivativeData
   )
{
    static const unsigned int Size1 = (TNumNodes * TDim);
    
    // Shape functions
    const VectorType  N1 = rVariables.N_Slave;
    const VectorType  N2 = rVariables.N_Master;
    
    // Coordinates
    const bounded_matrix<double, TNumNodes, TDim> u1 = rDerivativeData.u1;
    const bounded_matrix<double, TNumNodes, TDim> X1 = rDerivativeData.X1;
    const bounded_matrix<double, TNumNodes, TDim> u2 = rDerivativeData.u2;
    const bounded_matrix<double, TNumNodes, TDim> X2 = rDerivativeData.X2;
    
    // Normals
    const array_1d<double, TDim >  Normal_sg = prod(trans(rDerivativeData.Normal_s), N1);
    const array_1d<double, TDim >  Normal_mg = prod(trans(rDerivativeData.Normal_m), N2);
    
    const array_1d<bounded_matrix<double, TNumNodes, TDim>, Size1> DNormal_s = rDerivativeData.Delta_Normal_s;
    const array_1d<bounded_matrix<double, TNumNodes, TDim>, Size1> DNormal_m = rDerivativeData.Delta_Normal_m;
    
    bool compute = false;
    if (TDim == 2)
    {
       if (TNumNodes == 2)
       {
          compute = true;
       }
    }
    else
    {
      if (TNumNodes == 3)
       {
          compute = true;
       }
    }
    
   /* Calculate Delta N */ // TODO: Do the same for the N1
   if (compute == true)
   {
      const double tol = 1.0e-18;
      
//       const array_1d<double, TNumNodes > vector_nodes = trans(row(X2 + u2, 0)) - prod(trans(X1 + u1), N1); // NOTE: This is the way I considered in the symbolic
      const array_1d<double, TNumNodes > vector_nodes =  prod(trans(X2 + u2), N2) - prod(trans(X1 + u1), N1);
      const double Dist = inner_prod(vector_nodes, Normal_mg)/(inner_prod(Normal_sg, Normal_mg) + tol);
      
      double div1,div2 = 1.0;
      double mult1,mult2,mult3,mult4,mult5 = 0.0;
      if (TDim == 2)
      {
         if (TNumNodes == 2)
         {
//             div1 = (X1(0,0) + X1(0,1) - X1(1,0) - X1(1,1) + u1(0,0) + u1(0,1) - u1(1,0) - u1(1,1)) + tol; // NOTE: You will need to compute DeltaN1
            div2 = (X2(0,0) + X2(0,1) - X2(1,0) - X2(1,1) + u2(0,0) + u2(0,1) - u2(1,0) - u2(1,1)) + tol;
         }
      }
      else
      {
         if (TNumNodes == 3)
         {
             div1 = ((u2(0, 0) + u2(0, 2) - u2(1, 0) - u2(1, 2) + X2(0, 0) + 
                      X2(0, 2) - X2(1, 0) - X2(1, 2)) * (u2(0, 0) + u2(0, 1) - 
                      u2(2, 0) - u2(2, 1) + X2(0, 0) + X2(0, 1) - X2(2, 0) - 
                      X2(2, 1)) - (u2(0, 0) + u2(0, 1) - u2(1, 0) - u2(1, 1) + 
                      X2(0, 0) + X2(0, 1) - X2(1, 0) - X2(1, 1)) * (u2(0, 0) + 
                      u2(0, 2) - u2(2, 0) - u2(2, 2) + X2(0, 0) + X2(0, 2) - 
                      X2(2, 0) - X2(2, 2))) + tol;
             div2 = (-(u2(1, 1) + X2(1, 1)) * (u2(2, 0) + X2(2, 0)) + (u2(1, 2) + 
                       X2(1, 2)) * (u2(2, 0) + X2(2, 0)) + (u2(0, 2) + 
                       X2(0, 2)) * (u2(1, 0) + u2(1, 1) - u2(2, 0) - u2(2, 1) + 
                       X2(1, 0) + X2(1, 1) - X2(2, 0) - X2(2, 1)) + (u2(1, 0) + 
                       X2(1, 0)) * (u2(2, 1) + X2(2, 1)) + (u2(1, 2) + 
                       X2(1, 2)) * (u2(2, 1) + X2(2, 1)) - (u2(1, 0) + u2(1, 1) + 
                       X2(1, 0) + X2(1, 1)) * (u2(2, 2) + X2(2, 2)) + (u2(0, 1) + 
                       X2(0, 1)) * (-u2(1, 0) - u2(1, 2) + u2(2, 0) + u2(2, 2) - 
                       X2(1, 0) - X2(1, 2) + X2(2, 0) + X2(2, 2)) + (u2(0, 0) + 
                       X2(0, 0)) * (u2(1, 1) - u2(1, 2) - u2(2, 1) + u2(2, 2) + 
                       X2(1, 1) - X2(1, 2) - X2(2, 1) + X2(2, 2))) + tol;
                        
             mult1 = (-(u2(0, 0) + u2(0, 2) - u2(2, 0) - u2(2, 2) + X2(0, 0) + X2(0, 2) - X2(2, 0) - X2(2, 2)));
             mult2 = ( (u2(0, 0) + u2(0, 1) - u2(2, 0) - u2(2, 1) + X2(0, 0) + X2(0, 1) - X2(2, 0) - X2(2, 1)));
             mult3 = ( (u2(0, 1) - u2(0, 2) - u2(1, 1) + u2(1, 2) + X2(0, 1) - X2(0, 2) - X2(1, 1) + X2(1, 2)));
             mult4 = ((-u2(0, 0) - u2(0, 2) + u2(1, 0) + u2(1, 2) - X2(0, 0) - X2(0, 2) + X2(1, 0) + X2(1, 2)));
             mult5 = ( (u2(0, 0) + u2(0, 1) - u2(1, 0) - u2(1, 1) + X2(0, 0) + X2(0, 1) - X2(1, 0) - X2(1, 1)));
         }
      }
      
      // Derivatives slave
      for (unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++)
      {
         for (unsigned int i_dim = 0; i_dim < TDim; i_dim++)
         {
            const unsigned int i_dof = i_slave * TDim + i_dim;
            
            const array_1d<double, TNumNodes > DNormal_sg = prod(trans(DNormal_s[i_dof]), N1);
            array_1d<double, TNumNodes > aux_vector = ZeroVector(TNumNodes);
            aux_vector[i_dim] = 1.0;
            const array_1d<double, TNumNodes > Deltavector_nodes = - N1[i_slave] * aux_vector;
            const double DeltaDist = ((inner_prod(Deltavector_nodes, Normal_mg))* inner_prod(Normal_sg, Normal_mg) - inner_prod(vector_nodes, Normal_mg) * (inner_prod(DNormal_sg, Normal_mg)))/std::pow(inner_prod(Normal_sg, Normal_mg) + tol, 2);
            const array_1d<double, TNumNodes > Deltax1g = N1[i_slave] * aux_vector;
            const array_1d<double, TNumNodes > Deltax2g = Deltax1g + DeltaDist * Normal_sg + Dist * DNormal_sg;
            
            if (TDim == 2)
            {
               if (TNumNodes == 2)
               {
                  rDerivativeData.DeltaN2[i_dof][0] =  (Deltax2g[0] + Deltax2g[1])/div2;
                  rDerivativeData.DeltaN2[i_dof][1] =  - rDerivativeData.DeltaN2[i_dof][0];
               }
            }
            else
            {
               if (TNumNodes == 3)
               {
                  rDerivativeData.DeltaN2[i_dof][1] = - (mult1 * (Deltax2g[0] + Deltax2g[1]) + mult2 * (Deltax2g[0] + Deltax2g[2]))/div1;
                  rDerivativeData.DeltaN2[i_dof][2] =   (mult3 *  Deltax2g[0] + mult4 * Deltax2g[1] + mult5 * Deltax2g[2])/div2;
                  rDerivativeData.DeltaN2[i_dof][0] =  - rDerivativeData.DeltaN2[i_dof][1] - rDerivativeData.DeltaN2[i_dof][2];
               }
            }
         }
      }
      
      // Derivatives master
      for (unsigned int i_master = 0; i_master < TNumNodes; i_master++)
      {
         for (unsigned int i_dim = 0; i_dim < TDim; i_dim++)
         {
            const unsigned int i_dof = (TNumNodes + i_master) * TDim + i_dim;
            
            const array_1d<double, TNumNodes > DNormal_mg = prod(trans(DNormal_m[i_dof - TNumNodes * TDim]), N2);
            array_1d<double, TNumNodes > aux_vector = ZeroVector(TNumNodes);
//             if (i_master == 0) // NOTE: This is the way I considered in the symbolic
//             {
                aux_vector[i_dim] = 1.0;
//             }
            const array_1d<double, TNumNodes > Deltavector_nodes = N2[i_master] * aux_vector;
            const double DeltaDist = ((inner_prod(Deltavector_nodes, Normal_mg) + inner_prod(vector_nodes, DNormal_mg))* inner_prod(Normal_sg, Normal_mg) - inner_prod(vector_nodes, Normal_mg) * (inner_prod(Normal_sg, DNormal_mg)))/std::pow(inner_prod(Normal_sg, Normal_mg) + tol, 2);;
            const array_1d<double, TNumNodes > x2g = prod(trans(X2 + u2), N2);
            const array_1d<double, TNumNodes > Deltax2g = DeltaDist * Normal_sg;
            
            if (TDim == 2)
            {
               if (TNumNodes == 2)
               {
                   if (i_master == 0)
                   {
                       rDerivativeData.DeltaN2[i_dof][0] =  ( ((u2(1,0) + X2(1,0) + u2(1,1) + X2(1,1)) - x2g[0] - x2g[1]) + div2 * (Deltax2g[0] + Deltax2g[1]))/std::pow(div2, 2);
                   }
                   else 
                   {
                       rDerivativeData.DeltaN2[i_dof][0] =  ((-(u2(0,0) + X2(0,0) + u2(0,1) + X2(0,1)) + x2g[0] + x2g[1]) + div2 * (Deltax2g[0] + Deltax2g[1]))/std::pow(div2, 2);
                   }
                  
                  rDerivativeData.DeltaN2[i_dof][1] =  - rDerivativeData.DeltaN2[i_dof][0];
               }
            }
            else
            {
               if (TNumNodes == 3)
               {    
                   const double multmaster0 = ( (u2(0, 0) + u2(0, 2) - u2(2, 0) - u2(2, 2) + X2(0, 0) + X2(0, 2) - X2(2, 0) - X2(2, 2)));
                   const double multmaster1 = ((-u2(0, 0) - u2(0, 1) + u2(2, 0) + u2(2, 1) - X2(0, 0) - X2(0, 1) + X2(2, 0) + X2(2, 1)) );
                   const double multmaster2 = ( (u2(0, 0) + u2(0, 1) + X2(0, 0) + X2(0, 1) - x2g[0] - x2g[1]));
                   const double multmaster3 = ( (u2(0, 0) + u2(0, 2) + X2(0, 0) + X2(0, 2) - x2g[0] - x2g[2]));
                   const double multmaster4 = ( (u2(1, 0) + u2(1, 1) + X2(1, 0) + X2(1, 1)) * x2g[2] + (u2(0, 0) + X2(0, 0)));
                   const double multmaster5 = ((u2(1, 0) + u2(1, 1) + X2(1, 0) + X2(1, 1) - x2g[0] - x2g[1]));
                   const double multmaster6 = ( (u2(1, 1) - u2(1, 2) + X2(1, 1) - X2(1, 2) - x2g[1] + x2g[2]));
                   const double coefmaster1 = ( (u2(1, 0) + X2(1, 0)) * x2g[1] + (u2(1, 2) + X2(1, 2)) * x2g[1]);
                   const double coefmaster2 = ( -(u2(1, 1) + X2(1, 1)) * x2g[0] + (u2(1, 2) + X2(1, 2)) * x2g[0]);
                   const double coefmaster3 = ( u2(0, 0) + u2(0, 2) + X2(0, 0) + X2(0, 2) - x2g[0] - x2g[2]);
                   const double coefmaster4 = ( -u2(0, 0) - u2(0, 1) - X2(0, 0) - X2(0, 1) + x2g[0] + x2g[1]);
                   const double coefmaster5 = ( (u2(0, 1) + X2(0, 1)) * (u2(1, 0) + u2(1, 2) + X2(1, 0) + X2(1, 2) - x2g[0] - x2g[2]));
                   
                   if ((i_dof - TDim * TNumNodes) == 0)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  ((u2(1, 1) - u2(1, 2) - u2(2, 1) + u2(2, 2) + X2(1, 1) - 
                                                           X2(1, 2) - X2(2, 1) + X2(2, 2)) * (multmaster0*multmaster2 + 
                                                           multmaster1*multmaster3) - (div1) * (u2(0, 1) - u2(0, 2) + 
                                                           X2(0, 1) - X2(0, 2) - x2g[1] + x2g[2] + 
                                                           mult1 * (-1 + Deltax2g[0] + Deltax2g[1]) + 
                                                           mult2 * (-1 + Deltax2g[0] + Deltax2g[2])) )/std::pow(div1, 2);
                                                           
                       rDerivativeData.DeltaN2[i_dof][2] =  ( -(u2(1, 1) - u2(1, 2) - u2(2, 1) + u2(2, 2) + X2(1, 1) - 
                                                            X2(1, 2) - X2(2, 1) + X2(2, 2)) * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * 
                                                            multmaster5 + coefmaster1 - coefmaster5 - 
                                                            multmaster4 * multmaster6) + (div2) * (u2(1, 1) - u2(1, 2) + 
                                                            X2(1, 1) - X2(1, 2) - x2g[1] + x2g[2] + mult3 * Deltax2g[0] + 
                                                            mult4 * Deltax2g[1] + mult5 * Deltax2g[2]))/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 1)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  ((-u2(1, 0) - u2(1, 2) + u2(2, 0) + u2(2, 2) - X2(1, 0) - 
                                                            X2(1, 2) + X2(2, 0) + X2(2, 2)) * (multmaster0*multmaster2 + 
                                                            multmaster1*multmaster3) - (div1) * (-u2(0, 0) - u2(0, 2) - 
                                                            X2(0, 0) - X2(0, 2) + x2g[0] + x2g[2] + 
                                                            mult1 * (-1 + Deltax2g[0] + Deltax2g[1]) + 
                                                            mult2 * (Deltax2g[0] + Deltax2g[2])) )/std::pow(div1, 2);
                                                            
                       rDerivativeData.DeltaN2[i_dof][2] =  (-(-u2(1, 0) - u2(1, 2) + u2(2, 0) + u2(2, 2) - X2(1, 0) - 
                                                             X2(1, 2) + X2(2, 0) + X2(2, 2)) * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * 
                                                             multmaster5 + coefmaster1 - coefmaster5 - 
                                                             multmaster4 * multmaster6) + (div2) * (-u2(1, 0) - u2(1, 2) - 
                                                             X2(1, 0) - X2(1, 2) + x2g[0] + x2g[2] + mult3 * Deltax2g[0] + 
                                                             mult4 * Deltax2g[1] + mult5 * Deltax2g[2]) )/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 2)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  ( (u2(1, 0) + u2(1, 1) - u2(2, 0) - u2(2, 1) + X2(1, 0) + 
                                                            X2(1, 1) - X2(2, 0) - X2(2, 1)) * (multmaster0*multmaster2 + 
                                                            multmaster1*multmaster3) - (div1) * (u2(0, 0) + u2(0, 1) + 
                                                            X2(0, 0) + X2(0, 1) - x2g[0] - x2g[1] + 
                                                            mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                            mult2 * (-1 + Deltax2g[0] + Deltax2g[2])))/std::pow(div1, 2);
                        
                       rDerivativeData.DeltaN2[i_dof][2] =  (-(u2(1, 0) + u2(1, 1) - u2(2, 0) - u2(2, 1) + X2(1, 0) + 
                                                            X2(1, 1) - X2(2, 0) - X2(2, 1)) * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * 
                                                            multmaster5 + coefmaster1 - coefmaster5 - 
                                                            multmaster4 * multmaster6) + (div2) * (u2(1, 0) + u2(1, 1) + 
                                                            X2(1, 0) + X2(1, 1) - x2g[0] - x2g[1] + mult3 * Deltax2g[0] + 
                                                            mult4 * Deltax2g[1] + mult5 * Deltax2g[2]) )/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 3)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  ( (-u2(0, 1) + u2(0, 2) + u2(2, 1) - u2(2, 2) - X2(0, 1) + 
                                                            X2(0, 2) + X2(2, 1) - X2(2, 2)) * (multmaster0*multmaster2 + 
                                                            multmaster1 * multmaster3) - (div1) * (+mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                            mult2 * (Deltax2g[0] + Deltax2g[2])))/std::pow(div1, 2);
                                                            
                       rDerivativeData.DeltaN2[i_dof][2] =  ( -(-u2(0, 1) + u2(0, 2) + u2(2, 1) - u2(2, 2) - X2(0, 1) + 
                                                              X2(0, 2) + X2(2, 1) - X2(2, 2)) * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * 
                                                              multmaster5 + coefmaster1 - coefmaster5 - 
                                                              multmaster4 * multmaster6) + (div2) * (-u2(0, 1) + u2(0, 2) - 
                                                              X2(0, 1) + X2(0, 2) + x2g[1] - x2g[2] + mult3 * Deltax2g[0] + 
                                                              mult4 * Deltax2g[1] + mult5 * Deltax2g[2]))/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 4)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  ( multmaster0*(multmaster0*multmaster2 + 
                                                           multmaster1 * multmaster3) - (div1) * (+mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                           mult2 * (Deltax2g[0] + Deltax2g[2])))/std::pow(div1, 2);
                                                           
                       rDerivativeData.DeltaN2[i_dof][2] =  ( +mult1 * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * multmaster5 + 
                                                            coefmaster1 - coefmaster5 - multmaster4 * multmaster6) + (div2) * (coefmaster3 + 
                                                            mult3 * Deltax2g[0] + mult4 * Deltax2g[1] + mult5 * Deltax2g[2]))/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 5)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  ( multmaster1 *(multmaster0*multmaster2 + 
                                                           multmaster1 * multmaster3) - (div1) * (+mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                           mult2 * (Deltax2g[0] + Deltax2g[2])))/std::pow(div1, 2);
                                                           
                       rDerivativeData.DeltaN2[i_dof][2] =  ( -multmaster1 *  (coefmaster2 + (u2(0, 2) + X2(0, 2)) * multmaster5 +
                                                            coefmaster1 - coefmaster5 -  multmaster4 * multmaster6) + (div2) * (coefmaster4 + 
                                                            mult3 * Deltax2g[0] + mult4 * Deltax2g[1] + mult5 * Deltax2g[2]))/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 6)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  (mult3 *(multmaster0*multmaster2 + 
                                                          multmaster1*multmaster3) - (div1) * (-u2(0, 1) + u2(0, 2) - 
                                                          X2(0, 1) + X2(0, 2) + x2g[1] - x2g[2] + 
                                                          mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                          mult2 * (Deltax2g[0] + Deltax2g[2])) )/std::pow(div1, 2);
                                                          
                       rDerivativeData.DeltaN2[i_dof][2] =  ( -mult3 * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * multmaster5 + 
                                                            coefmaster1 - coefmaster5 - multmaster4 * multmaster6) + (div2) * (mult3 * Deltax2g[0] + 
                                                            mult4 * Deltax2g[1] + mult5 * Deltax2g[2]))/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 7)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  (mult4 *(multmaster0*multmaster2 + 
                                                          multmaster1*multmaster3) - (div1) * (coefmaster3 + 
                                                          mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                          mult2 * (Deltax2g[0] + Deltax2g[2])))/std::pow(div1, 2);
                                                          
                       rDerivativeData.DeltaN2[i_dof][2] =  ( -mult4 * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * multmaster5 + 
                                                            coefmaster1 - coefmaster5 - multmaster4 * multmaster6) + (div2) * (mult3 * Deltax2g[0] + 
                                                            mult4 * Deltax2g[1] + mult5 * Deltax2g[2]))/std::pow(div2, 2);
                   }
                   else if ((i_dof - TDim * TNumNodes) == 8)
                   {
                       rDerivativeData.DeltaN2[i_dof][1] =  (mult5 *(multmaster0*multmaster2 + 
                                                          multmaster1*multmaster3) - (div1) * (coefmaster4 + 
                                                          mult1 * (Deltax2g[0] + Deltax2g[1]) + 
                                                          mult2 * (Deltax2g[0] + Deltax2g[2])))/std::pow(div1, 2);
                                                          
                       rDerivativeData.DeltaN2[i_dof][2] =  (-mult5 * (coefmaster2 + (u2(0, 2) + X2(0, 2)) * multmaster5 + 
                                                          coefmaster1 - coefmaster5 - multmaster4 * multmaster6) + (div2) * (mult3 * Deltax2g[0] + 
                                                          mult4 * Deltax2g[1] + mult5 * Deltax2g[2]) )/std::pow(div2, 2);
                   }

                  rDerivativeData.DeltaN2[i_dof][0] =  - rDerivativeData.DeltaN2[i_dof][1] - rDerivativeData.DeltaN2[i_dof][2];
               }
            }
         }
      }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateDeltaPhi(
   GeneralVariables& rVariables,
   DerivativeData& rDerivativeData
   )
{
    // Shape functions
    const VectorType N1 = rVariables.N_Slave;
    
    for (unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++)
    {
        for (unsigned int i_dim = 0; i_dim < TDim; i_dim++)
        {
            const unsigned int i_dof = i_slave * TDim + i_dim;
            
            rDerivativeData.DeltaPhi[i_dof] = prod(rDerivativeData.DeltaAe[i_dof], N1);;
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::EquationIdVector(
    EquationIdVectorType& rResult,
    ProcessInfo& CurrentProcessInfo 
    )
{
    KRATOS_TRY;   
    
    const std::vector<contact_container> all_conditions = *( this->GetValue( CONTACT_CONTAINERS ) );
    
    // Calculates the size of the system
    const unsigned int condition_size = (TDim * ( TNumNodes + TNumNodes) + TNumNodes)* all_conditions.size(); 
    
    if (rResult.size() != condition_size)
    {
        rResult.resize( condition_size, false );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for ( unsigned int i_cond = 0;  i_cond < all_conditions.size(); ++i_cond )
    {   
        GeometryType& current_master = all_conditions[i_cond].condition->GetGeometry( );
        
        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rResult[index++] = master_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = master_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = master_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes  Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( NORMAL_CONTACT_STRESS ).EquationId( );
        }
        
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim, TNumNodes>::GetDofList(
    DofsVectorType& rConditionalDofList,
    ProcessInfo& rCurrentProcessInfo 
)
{
    KRATOS_TRY;
    
    const std::vector<contact_container> all_conditions = *( this->GetValue( CONTACT_CONTAINERS ) );
    
    // Calculates the size of the system
    const unsigned int condition_size = (TDim * (TNumNodes + TNumNodes) + TNumNodes) * all_conditions.size(); 
    
    if (rConditionalDofList.size() != condition_size)
    {
        rConditionalDofList.resize( condition_size );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for ( unsigned int i_cond = 0; i_cond < all_conditions.size(); ++i_cond )
    {
        GeometryType& current_master = all_conditions[i_cond].condition->GetGeometry( );   

        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rConditionalDofList[index++] =master_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] =master_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] =master_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = GetGeometry()[ i_slave ];
            rConditionalDofList[index++] =slave_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] =slave_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] =slave_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = GetGeometry()[ i_slave ];
            rConditionalDofList[index++] =slave_node.pGetDof( NORMAL_CONTACT_STRESS );
        }
    }
    
    KRATOS_CATCH( "" );
}


//******************************* GET DOUBLE VALUE *********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::GetValueOnIntegrationPoints( 
    const Variable<double>& rVariable,
    std::vector<double>& rValues,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    this->CalculateOnIntegrationPoints( rVariable, rValues, rCurrentProcessInfo );
}

//******************************* GET ARRAY_1D VALUE *******************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::GetValueOnIntegrationPoints( 
    const Variable<array_1d<double, 3 > >& rVariable,
    std::vector<array_1d<double, 3 > >& rValues,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    this->CalculateOnIntegrationPoints( rVariable, rValues, rCurrentProcessInfo );
}

//******************************* GET VECTOR VALUE *********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::GetValueOnIntegrationPoints( 
    const Variable<Vector>& rVariable,
    std::vector<Vector>& rValues,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    this->CalculateOnIntegrationPoints( rVariable, rValues, rCurrentProcessInfo );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateOnIntegrationPoints( 
    const Variable<double>& rVariable,
    std::vector<double>& rOutput,
    const ProcessInfo& rCurrentProcessInfo 
    )
{
    KRATOS_TRY;
    
    // TODO: Add the FRICTION_COEFFICIENT, and maybe if it is ACTIVE or SLIPPING the GP

    // Create and initialize condition variables:
    GeneralVariables rVariables;
    
    // Initialize the current contact data
    DerivativeData rDerivativeData;
    
    // Reading integration points
    const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);
    mColocationIntegration.Initialize( integration_order);
    const GeometryType::IntegrationPointsArrayType& integration_points = mUseManualColocationIntegration ?
                                                                         mColocationIntegration.IntegrationPoints( ) :
                                                                         GetGeometry( ).IntegrationPoints( mThisIntegrationMethod );
                                               
    const unsigned int number_of_integration_pts =integration_points.size();
    if ( rOutput.size( ) != number_of_integration_pts )
    {
        rOutput.resize( number_of_integration_pts, false );
    }
    
    const std::vector<double> zero_vector (number_of_integration_pts, 0.0);
    rOutput = zero_vector;

    // TODO: Add eventually
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateOnIntegrationPoints( 
    const Variable<array_1d<double, 3 > >& rVariable,
    std::vector< array_1d<double, 3 > >& rOutput,
    const ProcessInfo& rCurrentProcessInfo
    )
{
    KRATOS_TRY;
    
    // Create and initialize condition variables:
    GeneralVariables rVariables;
    
    // Initialize the current contact data
    DerivativeData rDerivativeData;
    
    // Reading integration points
    const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);
    mColocationIntegration.Initialize( integration_order);
    const GeometryType::IntegrationPointsArrayType& integration_points = mUseManualColocationIntegration ?
                                                                         mColocationIntegration.IntegrationPoints( ) :
                                                                         GetGeometry( ).IntegrationPoints( mThisIntegrationMethod );
                                                                                                                        
    const unsigned int number_of_integration_pts = integration_points.size();
    if ( rOutput.size() != number_of_integration_pts )
    {
        rOutput.resize( number_of_integration_pts );
    }
    
    const array_1d<double, 3> zero_vector = ZeroVector(3);
    for (unsigned int PointNumber = 0; PointNumber < number_of_integration_pts; PointNumber++)
    {
        rOutput[PointNumber] = zero_vector;
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::CalculateOnIntegrationPoints( 
    const Variable<Vector>& rVariable, 
    std::vector<Vector>& rOutput, 
    const ProcessInfo& rCurrentProcessInfo
    )
{
    KRATOS_TRY;
    
    // TODO: Fill this!!!
    
    KRATOS_CATCH( "" );
}

/******************* AUXILLIARY METHODS FOR GENERAL CALCULATIONS *******************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<TDim,TNumNodes>::ComputeSelectiveIntegrationMethod(const unsigned int rPairIndex)
{
    const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);
    mUseManualColocationIntegration = true;
    
    if (TDim == 2)
    {
        if (TNumNodes == 2) // NOTE: Total weight of a  line is 2.0
        {
            // Using standart integration methods (I am using collocation)
            mColocationIntegration.Initialize( integration_order);
            
//             // Using exact integration
//             const double tol = 1.0e-4; 
//             const IntegrationMethod AuxIntegrationMethod = GetIntegrationMethod(integration_order, false);
//             GeometryType::IntegrationPointsArrayType IntegrationPointsConsidered;
//             
//             double total_weight = 0.0;
//             array_1d<double,2> coor_aux = ZeroVector(2);
//             
//             // Declaring auxiliar values
//             PointType projected_gp_global;
//             GeometryType::CoordinatesArrayType projected_gp_local;
//             const array_1d<double, 3> normal = this->GetValue(NORMAL);
//             double aux_dist = 0.0;
//             
//             // The master geometry
//             GeometryType& master_seg = mThisMasterElements[rPairIndex]->GetGeometry();
//             
//             // Declare the boolean of full integral
//             bool full_int = true;
//             
//             // First look if the edges of the slave are inside of the master, if not check if the opposite is true, if not then the element is not in contact
//             for (unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++)
//             {
//                 ContactUtilities::ProjectDirection(master_seg, GetGeometry()[i_slave].Coordinates(), projected_gp_global, aux_dist, -normal ); // The opposite direction
//                 
//                 const bool inside = master_seg.IsInside( projected_gp_global.Coordinates( ), projected_gp_local );
//                 
//                 if (inside == false)
//                 {
//                     full_int = false;
//                 }
//                 else
//                 {
//                     if (i_slave == 0)
//                     {
//                         coor_aux[0] = - 1.0;
//                     }
//                     else if (i_slave == 1)
//                     {
//                         coor_aux[1] =   1.0;
//                     }
//                 }
//             }
//             
//             if (full_int == true)
//             {
//                 total_weight = 2.0;
//             }
//             else
//             {
//                 std::vector<double> aux_xi;
//                 for (unsigned int i_master = 0; i_master < TNumNodes; i_master++)
//                 {
//                     ContactUtilities::ProjectDirection(GetGeometry(), master_seg[i_master].Coordinates(), projected_gp_global, aux_dist, normal );
// 
//                     const bool inside = GetGeometry().IsInside( projected_gp_global.Coordinates( ), projected_gp_local );
//                     
//                     if (inside == true)
//                     {
//                         aux_xi.push_back(projected_gp_local[0]);
//                     }
//                 }
//                 
//                 if (aux_xi.size() == 1)
//                 {
//                     if (coor_aux[0] == - 1.0)
//                     {
//                         coor_aux[1] = aux_xi[0];
//                     }
//                     else if (coor_aux[1] == 1.0)
//                     {
//                         coor_aux[0] = aux_xi[0];
//                     }
//                     else
//                     {
//                         KRATOS_WATCH("WARNING: THIS IS NOT SUPPOSED TO HAPPEN!!!!");
//                     }
//                 }
//                 else  if (aux_xi.size() == 2)
//                 {
//                     if (aux_xi[0] < aux_xi[1])
//                     {
//                         coor_aux[0] = aux_xi[0];
//                         coor_aux[1] = aux_xi[1];
//                     }
//                     else
//                     {
//                         coor_aux[1] = aux_xi[0];
//                         coor_aux[0] = aux_xi[1];
//                     }
//                 }
//                 
//                 total_weight = coor_aux[1] - coor_aux[0];
//             }
//             
//             if(total_weight < 0.0)
//             {
//                 KRATOS_THROW_ERROR( std::logic_error, "WAAAAAAAAAAAAARNING!!!!!!!!, wrong order of the coordinates", coor_aux);
//             }
//             
//             if (total_weight > tol)
// //             if (total_weight > 0.0)
//             {
//                 // With the proportion of the weigth you recalculate the integration weight. Change the coordinates of the integration to accomodate
//                 const GeometryType::IntegrationPointsArrayType& integration_points = GetGeometry().IntegrationPoints(AuxIntegrationMethod);
//                 IntegrationPointsConsidered.resize(integration_points.size());
//                 for ( unsigned int PointNumber = 0; PointNumber < integration_points.size(); PointNumber++ )
//                 {
//                     const double weight = integration_points[PointNumber].Weight() * total_weight/2.0;
//                     const double xi = 0.5 * (1.0 - integration_points[PointNumber].Coordinate(1)) * coor_aux[0] 
//                                     + 0.5 * (1.0 + integration_points[PointNumber].Coordinate(1)) * coor_aux[1];
//                     
//                     IntegrationPointsConsidered[PointNumber] = IntegrationPoint<2>( xi, weight );
//                 }
//             }
//             else
//             {
// //                 IntegrationPointsConsidered.resize(0); // An empty std::vector
//                 IntegrationPointsConsidered.clear(); // An empty std::vector
//             }
//             
//             mColocationIntegration.SetIntegrationPoints(IntegrationPointsConsidered);
// //             if (IntegrationPointsConsidered.size() > 0)
// //             {
// //                 std::cout <<  GetGeometry()[0].X() << " " << GetGeometry()[0].Y() << " " << GetGeometry()[1].X() << " " << GetGeometry()[1].Y() << std::endl;
// //                 std::cout <<  master_seg[0].X() << " " << master_seg[0].Y() << " " << master_seg[1].X() << " " << master_seg[1].Y() << std::endl;
// //                 KRATOS_WATCH(coor_aux);
// //                 mColocationIntegration.print();
// //             }
        }
        else
        {
            // Using standart integration methods (I am using collocation)
            mColocationIntegration.Initialize( integration_order);
        }
    }
    else
    {
        if (TNumNodes == 3) // NOTE: Total weight of a triangle is 0.5
        {
            mColocationIntegration.Initialize( integration_order);
//             // TODO: Finish this
//             // Compute the local Coordinates of the master condition
//             PointType projected_gp_global;
//             const array_1d<double,3> normal = this->GetValue(NORMAL);
//             
//             GeometryType::CoordinatesArrayType slave_gp_global;
//             double aux_dist = 0.0;
//             
//             for (unsigned int i = 0; i < 3; i++)
//             {
//                 this->GetGeometry( ).GlobalCoordinates( slave_gp_global, local_point );
//                 ContactUtilities::ProjectDirection( master_seg, slave_gp_global, projected_gp_global, aux_dist, -normal ); // The opposite direction
//                 
//                 GeometryType::CoordinatesArrayType projected_gp_local;
//                 
//                 const bool inside = master_seg.IsInside( projected_gp_global.Coordinates( ), projected_gp_local ) ;
//             }
        }
        else
        {
            // Using standart integration methods (I am consideing collocation)
            mColocationIntegration.Initialize( integration_order);
        }
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<2, 2>::InitializeIntegrationMethod()
{
    mUseManualColocationIntegration = false;
    if( GetProperties().Has(INTEGRATION_ORDER_CONTACT) )
    {
        const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);

            if (integration_order == 3)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_1;
            }
            else if (integration_order == 5)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_2;
            }
            else if (integration_order == 7)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_3;
            }
            else if (integration_order == 9)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_4;
            }
            else if (integration_order == 11)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_5;
            }
            else
            {
                mUseManualColocationIntegration = true;
                mColocationIntegration.Initialize( integration_order);
            }
    }
    else
    {
        mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_5;
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<2, 3>::InitializeIntegrationMethod()
{
    mUseManualColocationIntegration = false;
    if( GetProperties().Has(INTEGRATION_ORDER_CONTACT) )
    {
        const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);

            if (integration_order == 3)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_1;
            }
            else if (integration_order == 5)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_2;
            }
            else if (integration_order == 7)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_3;
            }
            else if (integration_order == 9)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_4;
            }
            else if (integration_order == 11)
            {
                mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_5;
            }
            else
            {
                mUseManualColocationIntegration = true;
                mColocationIntegration.Initialize( integration_order);
            }
    }
    else
    {
        mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_5;
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<3, 3>::InitializeIntegrationMethod()
{
    mUseManualColocationIntegration = false;
    if( GetProperties().Has(INTEGRATION_ORDER_CONTACT) )
    {
        const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);

//         if (integration_order == 3)
//         {
//         }
//         else
//         {
            mUseManualColocationIntegration = true;
            mColocationIntegration.Initialize( integration_order);
//         }
    }
    else
    {
        mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_5;
    }
}

/***********************************************************************************/
/***********************************************************************************/

template< >
void AugmentedLagrangianMethodFrictionlessMortarContactCondition<3, 4>::InitializeIntegrationMethod()
{
    mUseManualColocationIntegration = false;
    if( GetProperties().Has(INTEGRATION_ORDER_CONTACT) )
    {
        const double integration_order = GetProperties().GetValue(INTEGRATION_ORDER_CONTACT);

//         if (integration_order == )
//         {
//         }
//         else
//         {
            mUseManualColocationIntegration = true;
            mColocationIntegration.Initialize( integration_order);
//         }
    }
    else
    {
        mThisIntegrationMethod = GeometryData::GI_EXTENDED_GAUSS_5;
    }
}

/***********************************************************************************/
/***********************************************************************************/

template class AugmentedLagrangianMethodFrictionlessMortarContactCondition<2, 2>;
template class AugmentedLagrangianMethodFrictionlessMortarContactCondition<3, 3>;
template class AugmentedLagrangianMethodFrictionlessMortarContactCondition<3, 4>;

} // Namespace Kratos
