// KRATOS  ___|  |       |       |
//       \___ \  __|  __| |   |  __| __| |   |  __| _` | |
//           | |   |    |   | (    |   |   | |   (   | |
//       _____/ \__|_|   \__,_|\___|\__|\__,_|_|  \__,_|_| MECHANICS
//
//  License: BSD License
//   license: StructuralMechanicsApplication/license.txt
//
//  Main authors:  Vicente Mataix Ferr√°ndiz
//

// System includes

// External includes

// Project includes
/* Mortar includes */
#include "custom_conditions/ALM_frictional_mortar_contact_condition.h"

/* Utilities */
#include "custom_utilities/contact_utilities.h"

namespace Kratos 
{
/************************************* OPERATIONS **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::Create( 
    IndexType NewId,
    NodesArrayType const& rThisNodes,
    PropertiesPointerType pProperties ) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes> >( NewId, this->GetGeometry().Create( rThisNodes ), pProperties );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
Condition::Pointer AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::Create(
    IndexType NewId,
    GeometryPointerType pGeom,
    PropertiesPointerType pProperties) const
{
    return boost::make_shared< AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes> >( NewId, pGeom, pProperties );
}

/************************************* DESTRUCTOR **********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::~AugmentedLagrangianMethodFrictionalMortarContactCondition( )
{
}

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
bounded_matrix<double, 12, 12> AugmentedLagrangianMethodFrictionalMortarContactCondition<2,2>::CalculateLocalLHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    bounded_matrix<double,12,12> lhs;
    
    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u1old = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2old = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const bounded_matrix<double, 2, 2> lm = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), VECTOR_LAGRANGE_MULTIPLIER, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL);
    const bounded_matrix<double, 2, 2> tangentxislave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_XI);
    const bounded_matrix<double, 2, 2> tangentetaslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_ETA);
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    // Mortar operators derivatives
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaMOperator = rMortarConditionMatrices.DeltaMOperator;
    const array_1d<bounded_matrix<double, 2, 2>, 8> DeltaDOperator = rMortarConditionMatrices.DeltaDOperator;

    // We get the friction coefficient
    const array_1d<double, 2> mu = GetFrictionCoefficient();

    if (rActiveInactive == 0 )
    {
        const double clhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs1 =     clhs0*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs2 =     clhs0*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=0;
        lhs(0,1)=0;
        lhs(0,2)=0;
        lhs(0,3)=0;
        lhs(0,4)=0;
        lhs(0,5)=0;
        lhs(0,6)=0;
        lhs(0,7)=0;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(1,0)=0;
        lhs(1,1)=0;
        lhs(1,2)=0;
        lhs(1,3)=0;
        lhs(1,4)=0;
        lhs(1,5)=0;
        lhs(1,6)=0;
        lhs(1,7)=0;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(2,0)=0;
        lhs(2,1)=0;
        lhs(2,2)=0;
        lhs(2,3)=0;
        lhs(2,4)=0;
        lhs(2,5)=0;
        lhs(2,6)=0;
        lhs(2,7)=0;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(3,0)=0;
        lhs(3,1)=0;
        lhs(3,2)=0;
        lhs(3,3)=0;
        lhs(3,4)=0;
        lhs(3,5)=0;
        lhs(3,6)=0;
        lhs(3,7)=0;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(4,0)=0;
        lhs(4,1)=0;
        lhs(4,2)=0;
        lhs(4,3)=0;
        lhs(4,4)=0;
        lhs(4,5)=0;
        lhs(4,6)=0;
        lhs(4,7)=0;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(5,0)=0;
        lhs(5,1)=0;
        lhs(5,2)=0;
        lhs(5,3)=0;
        lhs(5,4)=0;
        lhs(5,5)=0;
        lhs(5,6)=0;
        lhs(5,7)=0;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(6,0)=0;
        lhs(6,1)=0;
        lhs(6,2)=0;
        lhs(6,3)=0;
        lhs(6,4)=0;
        lhs(6,5)=0;
        lhs(6,6)=0;
        lhs(6,7)=0;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(7,0)=0;
        lhs(7,1)=0;
        lhs(7,2)=0;
        lhs(7,3)=0;
        lhs(7,4)=0;
        lhs(7,5)=0;
        lhs(7,6)=0;
        lhs(7,7)=0;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs0*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs1;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs1;
        lhs(9,9)=clhs0*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs0*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs2;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs2;
        lhs(11,11)=clhs0*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 1 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(0,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(0,0);
        const double clhs17 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs18 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs20 =     normalslave(0,1)*(-clhs1*clhs12 + clhs10*clhs17 + clhs11*clhs18 - clhs13*clhs19);
        const double clhs21 =     normalslave(0,0)*(clhs0 + clhs1*clhs7 - clhs17*clhs3 - clhs18*clhs5 + clhs19*clhs8);
        const double clhs22 =     -clhs20 + clhs21;
        const double clhs23 =     clhs22*normalslave(0,0)*penalty_parameter;
        const double clhs24 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs25 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs26 =     scale_factor*(clhs24*tangentetaslave(0,0) + clhs25*tangentxislave(0,0));
        const double clhs27 =     X1(0,0) + u1old(0,0);
        const double clhs28 =     X1(1,0) + u1old(1,0);
        const double clhs29 =     X2(0,0) + u2old(0,0);
        const double clhs30 =     X2(1,0) + u2old(1,0);
        const double clhs31 =     -clhs0*clhs29 + clhs27*clhs4 + clhs28*clhs6 - clhs30*clhs9;
        const double clhs32 =     X1(0,1) + u1old(0,1);
        const double clhs33 =     X1(1,1) + u1old(1,1);
        const double clhs34 =     X2(0,1) + u2old(0,1);
        const double clhs35 =     X2(1,1) + u2old(1,1);
        const double clhs36 =     -clhs0*clhs34 + clhs32*clhs4 + clhs33*clhs6 - clhs35*clhs9;
        const double clhs37 =     penalty_parameter*(clhs31*tangentetaslave(0,0) + clhs36*tangentetaslave(0,1));
        const double clhs38 =     penalty_parameter*(clhs31*tangentxislave(0,0) + clhs36*tangentxislave(0,1));
        const double clhs39 =     clhs37 + clhs38;
        const double clhs40 =     clhs26 + clhs39;
        const double clhs41 =     scale_factor*(clhs24*tangentetaslave(0,1) + clhs25*tangentxislave(0,1));
        const double clhs42 =     clhs39 + clhs41;
        const double clhs43 =     std::pow(clhs40, 2) + std::pow(clhs42, 2);
        const double clhs44 =     std::pow(clhs43, -1.0L/2.0L);
        const double clhs45 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs46 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs47 =     scale_factor*(clhs45*tangentetaslave(1,0) + clhs46*tangentxislave(1,0));
        const double clhs48 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs49 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs50 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs51 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs52 =     clhs27*clhs48 + clhs28*clhs49 - clhs29*clhs50 - clhs30*clhs51;
        const double clhs53 =     clhs32*clhs48 + clhs33*clhs49 - clhs34*clhs50 - clhs35*clhs51;
        const double clhs54 =     penalty_parameter*(clhs52*tangentetaslave(1,0) + clhs53*tangentetaslave(1,1));
        const double clhs55 =     penalty_parameter*(clhs52*tangentxislave(1,0) + clhs53*tangentxislave(1,1));
        const double clhs56 =     clhs54 + clhs55;
        const double clhs57 =     clhs47 + clhs56;
        const double clhs58 =     scale_factor*(clhs45*tangentetaslave(1,1) + clhs46*tangentxislave(1,1));
        const double clhs59 =     clhs56 + clhs58;
        const double clhs60 =     std::pow(clhs57, 2) + std::pow(clhs59, 2);
        const double clhs61 =     std::pow(clhs60, -1.0L/2.0L);
        const double clhs62 =     clhs15*clhs40*clhs44*clhs61*mu[0];
        const double clhs63 =     -clhs1*clhs29 + clhs17*clhs27 + clhs18*clhs28 - clhs19*clhs30;
        const double clhs64 =     -clhs1*clhs34 + clhs17*clhs32 + clhs18*clhs33 - clhs19*clhs35;
        const double clhs65 =     clhs63*tangentetaslave(0,0) + clhs63*tangentxislave(0,0) + clhs64*tangentetaslave(0,1) + clhs64*tangentxislave(0,1);
        const double clhs66 =     clhs15*clhs44*clhs61*clhs65*mu[0]*penalty_parameter;
        const double clhs67 =     clhs0*clhs66;
        const double clhs68 =     clhs22*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs69 =     clhs26 + 2*clhs37 + 2*clhs38 + clhs41;
        const double clhs70 =     std::pow(clhs43, -3.0L/2.0L);
        const double clhs71 =     clhs15*clhs40*clhs61*clhs65*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs72 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs73 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs74 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs75 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs76 =     clhs27*clhs72 + clhs28*clhs73 - clhs29*clhs74 - clhs30*clhs75;
        const double clhs77 =     clhs32*clhs72 + clhs33*clhs73 - clhs34*clhs74 - clhs35*clhs75;
        const double clhs78 =     clhs76*tangentetaslave(1,0) + clhs76*tangentxislave(1,0) + clhs77*tangentetaslave(1,1) + clhs77*tangentxislave(1,1);
        const double clhs79 =     clhs47 + 2*clhs54 + 2*clhs55 + clhs58;
        const double clhs80 =     std::pow(clhs60, -3.0L/2.0L);
        const double clhs81 =     clhs15*clhs40*clhs44*clhs78*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs82 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs85 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs86 =     normalslave(0,0)*(clhs3*clhs83 + clhs5*clhs84 - clhs7*clhs82 - clhs8*clhs85) - normalslave(0,1)*(clhs0 - clhs10*clhs83 - clhs11*clhs84 + clhs12*clhs82 + clhs13*clhs85);
        const double clhs87 =     clhs86*normalslave(0,0)*penalty_parameter;
        const double clhs88 =     clhs27*clhs83 + clhs28*clhs84 - clhs29*clhs82 - clhs30*clhs85;
        const double clhs89 =     clhs32*clhs83 + clhs33*clhs84 - clhs34*clhs82 - clhs35*clhs85;
        const double clhs90 =     clhs88*tangentetaslave(0,0) + clhs88*tangentxislave(0,0) + clhs89*tangentetaslave(0,1) + clhs89*tangentxislave(0,1);
        const double clhs91 =     clhs15*clhs44*clhs61*clhs90*mu[0]*penalty_parameter;
        const double clhs92 =     clhs0*clhs91;
        const double clhs93 =     clhs40*clhs44*clhs61*clhs86*mu[0]*penalty_parameter;
        const double clhs94 =     clhs15*clhs40*clhs61*clhs69*clhs70*clhs90*mu[0]*penalty_parameter;
        const double clhs95 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs96 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs97 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs98 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs99 =     clhs27*clhs95 + clhs28*clhs96 - clhs29*clhs97 - clhs30*clhs98;
        const double clhs100 =     clhs32*clhs95 + clhs33*clhs96 - clhs34*clhs97 - clhs35*clhs98;
        const double clhs101 =     clhs100*tangentetaslave(1,1) + clhs100*tangentxislave(1,1) + clhs99*tangentetaslave(1,0) + clhs99*tangentxislave(1,0);
        const double clhs102 =     clhs101*clhs15*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs103 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs104 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs105 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs106 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs107 =     normalslave(0,1)*(clhs10*clhs104 - clhs103*clhs12 + clhs105*clhs11 - clhs106*clhs13);
        const double clhs108 =     normalslave(0,0)*(clhs103*clhs7 - clhs104*clhs3 - clhs105*clhs5 + clhs106*clhs8 + clhs9);
        const double clhs109 =     -clhs107 + clhs108;
        const double clhs110 =     clhs109*normalslave(0,0)*penalty_parameter;
        const double clhs111 =     -clhs103*clhs29 + clhs104*clhs27 + clhs105*clhs28 - clhs106*clhs30;
        const double clhs112 =     -clhs103*clhs34 + clhs104*clhs32 + clhs105*clhs33 - clhs106*clhs35;
        const double clhs113 =     clhs111*tangentetaslave(0,0) + clhs111*tangentxislave(0,0) + clhs112*tangentetaslave(0,1) + clhs112*tangentxislave(0,1);
        const double clhs114 =     clhs113*clhs15*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs115 =     clhs0*clhs114;
        const double clhs116 =     clhs109*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs117 =     clhs113*clhs15*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs118 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs119 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs120 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs121 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs122 =     clhs118*clhs27 + clhs119*clhs28 - clhs120*clhs29 - clhs121*clhs30;
        const double clhs123 =     clhs118*clhs32 + clhs119*clhs33 - clhs120*clhs34 - clhs121*clhs35;
        const double clhs124 =     clhs122*tangentetaslave(1,0) + clhs122*tangentxislave(1,0) + clhs123*tangentetaslave(1,1) + clhs123*tangentxislave(1,1);
        const double clhs125 =     clhs124*clhs15*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs126 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs128 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs129 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs130 =     normalslave(0,0)*(-clhs126*clhs7 + clhs127*clhs3 + clhs128*clhs5 - clhs129*clhs8) - normalslave(0,1)*(-clhs10*clhs127 - clhs11*clhs128 + clhs12*clhs126 + clhs129*clhs13 + clhs9);
        const double clhs131 =     clhs130*normalslave(0,0)*penalty_parameter;
        const double clhs132 =     -clhs126*clhs29 + clhs127*clhs27 + clhs128*clhs28 - clhs129*clhs30;
        const double clhs133 =     -clhs126*clhs34 + clhs127*clhs32 + clhs128*clhs33 - clhs129*clhs35;
        const double clhs134 =     clhs132*tangentetaslave(0,0) + clhs132*tangentxislave(0,0) + clhs133*tangentetaslave(0,1) + clhs133*tangentxislave(0,1);
        const double clhs135 =     clhs134*clhs15*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs136 =     clhs0*clhs135;
        const double clhs137 =     clhs130*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs138 =     clhs134*clhs15*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs139 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs140 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs141 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs142 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs143 =     clhs139*clhs27 + clhs140*clhs28 - clhs141*clhs29 - clhs142*clhs30;
        const double clhs144 =     clhs139*clhs32 + clhs140*clhs33 - clhs141*clhs34 - clhs142*clhs35;
        const double clhs145 =     clhs143*tangentetaslave(1,0) + clhs143*tangentxislave(1,0) + clhs144*tangentetaslave(1,1) + clhs144*tangentxislave(1,1);
        const double clhs146 =     clhs145*clhs15*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs147 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs148 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs150 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs151 =     normalslave(0,0)*(-clhs147*clhs7 + clhs148*clhs3 + clhs149*clhs5 - clhs150*clhs8 + clhs4) + normalslave(0,1)*(clhs10*clhs148 + clhs11*clhs149 - clhs12*clhs147 - clhs13*clhs150);
        const double clhs152 =     clhs151*normalslave(0,0)*penalty_parameter;
        const double clhs153 =     -clhs147*clhs29 + clhs148*clhs27 + clhs149*clhs28 - clhs150*clhs30;
        const double clhs154 =     -clhs147*clhs34 + clhs148*clhs32 + clhs149*clhs33 - clhs150*clhs35;
        const double clhs155 =     clhs153*tangentetaslave(0,0) + clhs153*tangentxislave(0,0) + clhs154*tangentetaslave(0,1) + clhs154*tangentxislave(0,1);
        const double clhs156 =     clhs15*clhs155*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs157 =     clhs0*clhs156;
        const double clhs158 =     clhs151*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs159 =     clhs15*clhs155*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs160 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs161 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs162 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs163 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs164 =     clhs160*clhs27 + clhs161*clhs28 - clhs162*clhs29 - clhs163*clhs30;
        const double clhs165 =     clhs160*clhs32 + clhs161*clhs33 - clhs162*clhs34 - clhs163*clhs35;
        const double clhs166 =     clhs164*tangentetaslave(1,0) + clhs164*tangentxislave(1,0) + clhs165*tangentetaslave(1,1) + clhs165*tangentxislave(1,1);
        const double clhs167 =     clhs15*clhs166*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs168 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs169 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs170 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs171 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs172 =     normalslave(0,0)*(-clhs168*clhs7 + clhs169*clhs3 + clhs170*clhs5 - clhs171*clhs8) + normalslave(0,1)*(clhs10*clhs169 + clhs11*clhs170 - clhs12*clhs168 - clhs13*clhs171 + clhs4);
        const double clhs173 =     clhs172*normalslave(0,0)*penalty_parameter;
        const double clhs174 =     -clhs168*clhs29 + clhs169*clhs27 + clhs170*clhs28 - clhs171*clhs30;
        const double clhs175 =     -clhs168*clhs34 + clhs169*clhs32 + clhs170*clhs33 - clhs171*clhs35;
        const double clhs176 =     clhs174*tangentetaslave(0,0) + clhs174*tangentxislave(0,0) + clhs175*tangentetaslave(0,1) + clhs175*tangentxislave(0,1);
        const double clhs177 =     clhs15*clhs176*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs178 =     clhs0*clhs177;
        const double clhs179 =     clhs172*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs180 =     clhs15*clhs176*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs181 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs182 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs183 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs184 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs185 =     clhs181*clhs27 + clhs182*clhs28 - clhs183*clhs29 - clhs184*clhs30;
        const double clhs186 =     clhs181*clhs32 + clhs182*clhs33 - clhs183*clhs34 - clhs184*clhs35;
        const double clhs187 =     clhs185*tangentetaslave(1,0) + clhs185*tangentxislave(1,0) + clhs186*tangentetaslave(1,1) + clhs186*tangentxislave(1,1);
        const double clhs188 =     clhs15*clhs187*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs189 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs190 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs191 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs192 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs193 =     normalslave(0,0)*(-clhs189*clhs7 + clhs190*clhs3 + clhs191*clhs5 - clhs192*clhs8 + clhs6) + normalslave(0,1)*(clhs10*clhs190 + clhs11*clhs191 - clhs12*clhs189 - clhs13*clhs192);
        const double clhs194 =     clhs193*normalslave(0,0)*penalty_parameter;
        const double clhs195 =     -clhs189*clhs29 + clhs190*clhs27 + clhs191*clhs28 - clhs192*clhs30;
        const double clhs196 =     -clhs189*clhs34 + clhs190*clhs32 + clhs191*clhs33 - clhs192*clhs35;
        const double clhs197 =     clhs195*tangentetaslave(0,0) + clhs195*tangentxislave(0,0) + clhs196*tangentetaslave(0,1) + clhs196*tangentxislave(0,1);
        const double clhs198 =     clhs15*clhs197*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs199 =     clhs0*clhs198;
        const double clhs200 =     clhs193*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs201 =     clhs15*clhs197*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs202 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs203 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs204 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs205 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs206 =     clhs202*clhs27 + clhs203*clhs28 - clhs204*clhs29 - clhs205*clhs30;
        const double clhs207 =     clhs202*clhs32 + clhs203*clhs33 - clhs204*clhs34 - clhs205*clhs35;
        const double clhs208 =     clhs206*tangentetaslave(1,0) + clhs206*tangentxislave(1,0) + clhs207*tangentetaslave(1,1) + clhs207*tangentxislave(1,1);
        const double clhs209 =     clhs15*clhs208*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs210 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs211 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs212 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs213 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs214 =     normalslave(0,0)*(-clhs210*clhs7 + clhs211*clhs3 + clhs212*clhs5 - clhs213*clhs8) + normalslave(0,1)*(clhs10*clhs211 + clhs11*clhs212 - clhs12*clhs210 - clhs13*clhs213 + clhs6);
        const double clhs215 =     clhs214*normalslave(0,0)*penalty_parameter;
        const double clhs216 =     -clhs210*clhs29 + clhs211*clhs27 + clhs212*clhs28 - clhs213*clhs30;
        const double clhs217 =     -clhs210*clhs34 + clhs211*clhs32 + clhs212*clhs33 - clhs213*clhs35;
        const double clhs218 =     clhs216*tangentetaslave(0,0) + clhs216*tangentxislave(0,0) + clhs217*tangentetaslave(0,1) + clhs217*tangentxislave(0,1);
        const double clhs219 =     clhs15*clhs218*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs220 =     clhs0*clhs219;
        const double clhs221 =     clhs214*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs222 =     clhs15*clhs218*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs223 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs224 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs225 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs226 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs227 =     clhs223*clhs27 + clhs224*clhs28 - clhs225*clhs29 - clhs226*clhs30;
        const double clhs228 =     clhs223*clhs32 + clhs224*clhs33 - clhs225*clhs34 - clhs226*clhs35;
        const double clhs229 =     clhs227*tangentetaslave(1,0) + clhs227*tangentxislave(1,0) + clhs228*tangentetaslave(1,1) + clhs228*tangentxislave(1,1);
        const double clhs230 =     clhs15*clhs229*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs231 =     std::pow(normalslave(0,0), 2);
        const double clhs232 =     -clhs14 + clhs2;
        const double clhs233 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs234 =     clhs233*clhs44*clhs61*mu[0];
        const double clhs235 =     clhs44*clhs61*mu[0]*normalslave(0,0);
        const double clhs236 =     clhs235*clhs40;
        const double clhs237 =     tangentetaslave(0,0)*tangentetaslave(0,1);
        const double clhs238 =     tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs239 =     clhs237 + clhs238;
        const double clhs240 =     clhs233*clhs40 + clhs239*clhs42;
        const double clhs241 =     clhs232*clhs240*clhs61*clhs70*mu[0];
        const double clhs242 =     scale_factor*(clhs231 - clhs232*clhs234 - clhs236 + clhs241*clhs40);
        const double clhs243 =     normalslave(0,0)*normalslave(0,1);
        const double clhs244 =     clhs239*clhs44*clhs61*mu[0];
        const double clhs245 =     -clhs232*clhs244 + clhs243;
        const double clhs246 =     clhs44*clhs61*mu[0]*normalslave(0,1);
        const double clhs247 =     clhs246*clhs40;
        const double clhs248 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs249 =     clhs239*clhs40 + clhs248*clhs42;
        const double clhs250 =     clhs232*clhs249*clhs61*clhs70*mu[0];
        const double clhs251 =     scale_factor*(clhs245 - clhs247 + clhs250*clhs40);
        const double clhs252 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs253 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs254 =     clhs252*clhs57 + clhs253*clhs59;
        const double clhs255 =     clhs15*clhs254*clhs40*clhs44*clhs80*mu[0]*scale_factor;
        const double clhs256 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs257 =     clhs253*clhs57 + clhs256*clhs59;
        const double clhs258 =     clhs15*clhs257*clhs40*clhs44*clhs80*mu[0]*scale_factor;
        const double clhs259 =     clhs15*normalslave(0,1);
        const double clhs260 =     clhs22*normalslave(0,1)*penalty_parameter;
        const double clhs261 =     clhs15*clhs42*clhs44*clhs61*mu[0];
        const double clhs262 =     clhs22*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs263 =     clhs15*clhs42*clhs61*clhs65*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs264 =     clhs15*clhs42*clhs44*clhs78*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs265 =     clhs86*normalslave(0,1)*penalty_parameter;
        const double clhs266 =     clhs42*clhs44*clhs61*clhs86*mu[0]*penalty_parameter;
        const double clhs267 =     clhs15*clhs42*clhs61*clhs69*clhs70*clhs90*mu[0]*penalty_parameter;
        const double clhs268 =     clhs101*clhs15*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs269 =     clhs109*normalslave(0,1)*penalty_parameter;
        const double clhs270 =     clhs109*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs271 =     clhs113*clhs15*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs272 =     clhs124*clhs15*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs273 =     clhs130*normalslave(0,1)*penalty_parameter;
        const double clhs274 =     clhs130*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs275 =     clhs134*clhs15*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs276 =     clhs145*clhs15*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs277 =     clhs151*normalslave(0,1)*penalty_parameter;
        const double clhs278 =     clhs151*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs279 =     clhs15*clhs155*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs280 =     clhs15*clhs166*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs281 =     clhs172*normalslave(0,1)*penalty_parameter;
        const double clhs282 =     clhs172*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs283 =     clhs15*clhs176*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs284 =     clhs15*clhs187*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs285 =     clhs193*normalslave(0,1)*penalty_parameter;
        const double clhs286 =     clhs193*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs287 =     clhs15*clhs197*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs288 =     clhs15*clhs208*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs289 =     clhs214*normalslave(0,1)*penalty_parameter;
        const double clhs290 =     clhs214*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs291 =     clhs15*clhs218*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs292 =     clhs15*clhs229*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs293 =     clhs235*clhs42;
        const double clhs294 =     scale_factor*(clhs241*clhs42 + clhs245 - clhs293);
        const double clhs295 =     std::pow(normalslave(0,1), 2);
        const double clhs296 =     clhs248*clhs44*clhs61*mu[0];
        const double clhs297 =     clhs246*clhs42;
        const double clhs298 =     scale_factor*(-clhs232*clhs296 + clhs250*clhs42 + clhs295 - clhs297);
        const double clhs299 =     clhs15*clhs254*clhs42*clhs44*clhs80*mu[0]*scale_factor;
        const double clhs300 =     clhs15*clhs257*clhs42*clhs44*clhs80*mu[0]*scale_factor;
        const double clhs301 =     clhs66*clhs9;
        const double clhs302 =     clhs9*clhs91;
        const double clhs303 =     clhs114*clhs9;
        const double clhs304 =     clhs135*clhs9;
        const double clhs305 =     clhs156*clhs9;
        const double clhs306 =     clhs177*clhs9;
        const double clhs307 =     clhs198*clhs9;
        const double clhs308 =     clhs219*clhs9;
        const double clhs309 =     clhs232*normalslave(0,0);
        const double clhs310 =     clhs20 - clhs21;
        const double clhs311 =     clhs310*normalslave(0,0)*penalty_parameter;
        const double clhs312 =     clhs232*clhs40*clhs44*clhs61*mu[0];
        const double clhs313 =     clhs232*clhs44*clhs61*clhs65*mu[0]*penalty_parameter;
        const double clhs314 =     clhs313*clhs4;
        const double clhs315 =     clhs310*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs316 =     clhs232*clhs40*clhs61*clhs65*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs317 =     clhs232*clhs40*clhs44*clhs78*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs318 =     clhs232*clhs44*clhs61*clhs90*mu[0]*penalty_parameter;
        const double clhs319 =     clhs318*clhs4;
        const double clhs320 =     clhs232*clhs40*clhs61*clhs69*clhs70*clhs90*mu[0]*penalty_parameter;
        const double clhs321 =     clhs101*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs322 =     clhs107 - clhs108;
        const double clhs323 =     clhs322*normalslave(0,0)*penalty_parameter;
        const double clhs324 =     clhs113*clhs232*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs325 =     clhs324*clhs4;
        const double clhs326 =     clhs322*clhs40*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs327 =     clhs113*clhs232*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs328 =     clhs124*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs329 =     clhs134*clhs232*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs330 =     clhs329*clhs4;
        const double clhs331 =     clhs134*clhs232*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs332 =     clhs145*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs333 =     clhs155*clhs232*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs334 =     clhs333*clhs4;
        const double clhs335 =     clhs155*clhs232*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs336 =     clhs166*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs337 =     clhs176*clhs232*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs338 =     clhs337*clhs4;
        const double clhs339 =     clhs176*clhs232*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs340 =     clhs187*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs341 =     clhs197*clhs232*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs342 =     clhs341*clhs4;
        const double clhs343 =     clhs197*clhs232*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs344 =     clhs208*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs345 =     clhs218*clhs232*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs346 =     clhs345*clhs4;
        const double clhs347 =     clhs218*clhs232*clhs40*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs348 =     clhs229*clhs232*clhs40*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs349 =     clhs15*clhs240*clhs61*clhs70*mu[0];
        const double clhs350 =     -clhs15*clhs234 + clhs236 + clhs349*clhs40;
        const double clhs351 =     scale_factor*(-clhs231 + clhs350);
        const double clhs352 =     -clhs15*clhs244;
        const double clhs353 =     -clhs243 + clhs352;
        const double clhs354 =     clhs15*clhs249*clhs61*clhs70*mu[0];
        const double clhs355 =     clhs247 + clhs354*clhs40;
        const double clhs356 =     scale_factor*(clhs353 + clhs355);
        const double clhs357 =     clhs232*normalslave(0,1);
        const double clhs358 =     clhs310*normalslave(0,1)*penalty_parameter;
        const double clhs359 =     clhs232*clhs42*clhs44*clhs61*mu[0];
        const double clhs360 =     clhs310*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs361 =     clhs232*clhs42*clhs61*clhs65*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs362 =     clhs232*clhs42*clhs44*clhs78*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs363 =     clhs232*clhs42*clhs61*clhs69*clhs70*clhs90*mu[0]*penalty_parameter;
        const double clhs364 =     clhs101*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs365 =     clhs322*normalslave(0,1)*penalty_parameter;
        const double clhs366 =     clhs322*clhs42*clhs44*clhs61*mu[0]*penalty_parameter;
        const double clhs367 =     clhs113*clhs232*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs368 =     clhs124*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs369 =     clhs134*clhs232*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs370 =     clhs145*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs371 =     clhs155*clhs232*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs372 =     clhs166*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs373 =     clhs176*clhs232*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs374 =     clhs187*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs375 =     clhs197*clhs232*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs376 =     clhs208*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs377 =     clhs218*clhs232*clhs42*clhs61*clhs69*clhs70*mu[0]*penalty_parameter;
        const double clhs378 =     clhs229*clhs232*clhs42*clhs44*clhs79*clhs80*mu[0]*penalty_parameter;
        const double clhs379 =     clhs293 + clhs349*clhs42;
        const double clhs380 =     scale_factor*(clhs353 + clhs379);
        const double clhs381 =     -clhs15*clhs296 + clhs297 + clhs354*clhs42;
        const double clhs382 =     scale_factor*(-clhs295 + clhs381);
        const double clhs383 =     clhs313*clhs6;
        const double clhs384 =     clhs318*clhs6;
        const double clhs385 =     clhs324*clhs6;
        const double clhs386 =     clhs329*clhs6;
        const double clhs387 =     clhs333*clhs6;
        const double clhs388 =     clhs337*clhs6;
        const double clhs389 =     clhs341*clhs6;
        const double clhs390 =     clhs345*clhs6;
        const double clhs391 =     0.5*clhs233*clhs44*clhs61*mu[0];
        const double clhs392 =     clhs232*clhs65;
        const double clhs393 =     -clhs392;
        const double clhs394 =     1.0/clhs43;
        const double clhs395 =     clhs394*clhs40*clhs69;
        const double clhs396 =     1.0/clhs60;
        const double clhs397 =     clhs232*clhs396*clhs40*clhs79;
        const double clhs398 =     clhs310*clhs40 + clhs392*clhs395 + clhs393 + clhs397*clhs78;
        const double clhs399 =     0.5*clhs239*clhs44*clhs61*mu[0];
        const double clhs400 =     clhs394*clhs42*clhs69;
        const double clhs401 =     clhs232*clhs396*clhs42*clhs79;
        const double clhs402 =     clhs310*clhs42 + clhs392*clhs400 + clhs393 + clhs401*clhs78;
        const double clhs403 =     clhs232*clhs90;
        const double clhs404 =     -clhs403;
        const double clhs405 =     clhs101*clhs397 + clhs395*clhs403 + clhs40*clhs86 + clhs404;
        const double clhs406 =     clhs101*clhs401 + clhs400*clhs403 + clhs404 + clhs42*clhs86;
        const double clhs407 =     clhs113*clhs232;
        const double clhs408 =     -clhs407;
        const double clhs409 =     clhs124*clhs397 + clhs322*clhs40 + clhs395*clhs407 + clhs408;
        const double clhs410 =     clhs124*clhs401 + clhs322*clhs42 + clhs400*clhs407 + clhs408;
        const double clhs411 =     clhs134*clhs232;
        const double clhs412 =     -clhs411;
        const double clhs413 =     clhs130*clhs40 + clhs145*clhs397 + clhs395*clhs411 + clhs412;
        const double clhs414 =     clhs130*clhs42 + clhs145*clhs401 + clhs400*clhs411 + clhs412;
        const double clhs415 =     clhs155*clhs232;
        const double clhs416 =     -clhs415;
        const double clhs417 =     clhs151*clhs40 + clhs166*clhs397 + clhs395*clhs415 + clhs416;
        const double clhs418 =     clhs151*clhs42 + clhs166*clhs401 + clhs400*clhs415 + clhs416;
        const double clhs419 =     clhs176*clhs232;
        const double clhs420 =     -clhs419;
        const double clhs421 =     clhs172*clhs40 + clhs187*clhs397 + clhs395*clhs419 + clhs420;
        const double clhs422 =     clhs172*clhs42 + clhs187*clhs401 + clhs400*clhs419 + clhs420;
        const double clhs423 =     clhs197*clhs232;
        const double clhs424 =     -clhs423;
        const double clhs425 =     clhs193*clhs40 + clhs208*clhs397 + clhs395*clhs423 + clhs424;
        const double clhs426 =     clhs193*clhs42 + clhs208*clhs401 + clhs400*clhs423 + clhs424;
        const double clhs427 =     clhs218*clhs232;
        const double clhs428 =     -clhs427;
        const double clhs429 =     clhs214*clhs40 + clhs229*clhs397 + clhs395*clhs427 + clhs428;
        const double clhs430 =     clhs214*clhs42 + clhs229*clhs401 + clhs400*clhs427 + clhs428;
        const double clhs431 =     1.0/penalty_parameter;
        const double clhs432 =     std::pow(scale_factor, 2);
        const double clhs433 =     0.5*clhs431*clhs432;
        const double clhs434 =     clhs233 + clhs350;
        const double clhs435 =     clhs237 + clhs238 + clhs352;
        const double clhs436 =     clhs379 + clhs435;
        const double clhs437 =     clhs355 + clhs435;
        const double clhs438 =     clhs248 + clhs381;
        const double clhs439 =     0.5*clhs232*clhs240*clhs431*clhs432*clhs44*clhs80*mu[0];
        const double clhs440 =     0.5*clhs248*clhs44*clhs61*mu[0];
        const double clhs441 =     0.5*clhs232*clhs249*clhs431*clhs432*clhs44*clhs80*mu[0];
        const double clhs442 =     0.5*clhs431*std::pow(scale_factor, 2.0);
        const double clhs443 =     clhs442*(clhs253 + normalslave(1,0)*normalslave(1,1));
    
        lhs(0,0)=clhs0*clhs23 - clhs0*clhs68 - clhs0*clhs71 - clhs0*clhs81 - clhs1*clhs16 + clhs1*clhs62 + clhs67;
        lhs(0,1)=-clhs0*clhs102 - clhs0*clhs87 + clhs0*clhs93 - clhs0*clhs94 - clhs16*clhs82 + clhs62*clhs82 + clhs92;
        lhs(0,2)=clhs0*clhs110 - clhs0*clhs116 - clhs0*clhs117 - clhs0*clhs125 - clhs103*clhs16 + clhs103*clhs62 + clhs115;
        lhs(0,3)=-clhs0*clhs131 + clhs0*clhs137 - clhs0*clhs138 - clhs0*clhs146 - clhs126*clhs16 + clhs126*clhs62 + clhs136;
        lhs(0,4)=-clhs0*clhs152 + clhs0*clhs158 - clhs0*clhs159 - clhs0*clhs167 - clhs147*clhs16 + clhs147*clhs62 + clhs157;
        lhs(0,5)=-clhs0*clhs173 + clhs0*clhs179 - clhs0*clhs180 - clhs0*clhs188 - clhs16*clhs168 + clhs168*clhs62 + clhs178;
        lhs(0,6)=-clhs0*clhs194 + clhs0*clhs200 - clhs0*clhs201 - clhs0*clhs209 - clhs16*clhs189 + clhs189*clhs62 + clhs199;
        lhs(0,7)=-clhs0*clhs215 + clhs0*clhs221 - clhs0*clhs222 - clhs0*clhs230 - clhs16*clhs210 + clhs210*clhs62 + clhs220;
        lhs(0,8)=clhs0*clhs242;
        lhs(0,9)=clhs0*clhs251;
        lhs(0,10)=-clhs0*clhs255;
        lhs(0,11)=-clhs0*clhs258;
        lhs(1,0)=clhs0*clhs260 - clhs0*clhs262 - clhs0*clhs263 - clhs0*clhs264 - clhs1*clhs259 + clhs1*clhs261 + clhs67;
        lhs(1,1)=-clhs0*clhs265 + clhs0*clhs266 - clhs0*clhs267 - clhs0*clhs268 - clhs259*clhs82 + clhs261*clhs82 + clhs92;
        lhs(1,2)=clhs0*clhs269 - clhs0*clhs270 - clhs0*clhs271 - clhs0*clhs272 - clhs103*clhs259 + clhs103*clhs261 + clhs115;
        lhs(1,3)=-clhs0*clhs273 + clhs0*clhs274 - clhs0*clhs275 - clhs0*clhs276 - clhs126*clhs259 + clhs126*clhs261 + clhs136;
        lhs(1,4)=-clhs0*clhs277 + clhs0*clhs278 - clhs0*clhs279 - clhs0*clhs280 - clhs147*clhs259 + clhs147*clhs261 + clhs157;
        lhs(1,5)=-clhs0*clhs281 + clhs0*clhs282 - clhs0*clhs283 - clhs0*clhs284 - clhs168*clhs259 + clhs168*clhs261 + clhs178;
        lhs(1,6)=-clhs0*clhs285 + clhs0*clhs286 - clhs0*clhs287 - clhs0*clhs288 - clhs189*clhs259 + clhs189*clhs261 + clhs199;
        lhs(1,7)=-clhs0*clhs289 + clhs0*clhs290 - clhs0*clhs291 - clhs0*clhs292 - clhs210*clhs259 + clhs210*clhs261 + clhs220;
        lhs(1,8)=clhs0*clhs294;
        lhs(1,9)=clhs0*clhs298;
        lhs(1,10)=-clhs0*clhs299;
        lhs(1,11)=-clhs0*clhs300;
        lhs(2,0)=-clhs16*clhs19 + clhs19*clhs62 + clhs23*clhs9 + clhs301 - clhs68*clhs9 - clhs71*clhs9 - clhs81*clhs9;
        lhs(2,1)=-clhs102*clhs9 - clhs16*clhs85 + clhs302 + clhs62*clhs85 - clhs87*clhs9 + clhs9*clhs93 - clhs9*clhs94;
        lhs(2,2)=-clhs106*clhs16 + clhs106*clhs62 + clhs110*clhs9 - clhs116*clhs9 - clhs117*clhs9 - clhs125*clhs9 + clhs303;
        lhs(2,3)=-clhs129*clhs16 + clhs129*clhs62 - clhs131*clhs9 + clhs137*clhs9 - clhs138*clhs9 - clhs146*clhs9 + clhs304;
        lhs(2,4)=-clhs150*clhs16 + clhs150*clhs62 - clhs152*clhs9 + clhs158*clhs9 - clhs159*clhs9 - clhs167*clhs9 + clhs305;
        lhs(2,5)=-clhs16*clhs171 + clhs171*clhs62 - clhs173*clhs9 + clhs179*clhs9 - clhs180*clhs9 - clhs188*clhs9 + clhs306;
        lhs(2,6)=-clhs16*clhs192 + clhs192*clhs62 - clhs194*clhs9 + clhs200*clhs9 - clhs201*clhs9 - clhs209*clhs9 + clhs307;
        lhs(2,7)=-clhs16*clhs213 + clhs213*clhs62 - clhs215*clhs9 + clhs221*clhs9 - clhs222*clhs9 - clhs230*clhs9 + clhs308;
        lhs(2,8)=clhs242*clhs9;
        lhs(2,9)=clhs251*clhs9;
        lhs(2,10)=-clhs255*clhs9;
        lhs(2,11)=-clhs258*clhs9;
        lhs(3,0)=-clhs19*clhs259 + clhs19*clhs261 + clhs260*clhs9 - clhs262*clhs9 - clhs263*clhs9 - clhs264*clhs9 + clhs301;
        lhs(3,1)=-clhs259*clhs85 + clhs261*clhs85 - clhs265*clhs9 + clhs266*clhs9 - clhs267*clhs9 - clhs268*clhs9 + clhs302;
        lhs(3,2)=-clhs106*clhs259 + clhs106*clhs261 + clhs269*clhs9 - clhs270*clhs9 - clhs271*clhs9 - clhs272*clhs9 + clhs303;
        lhs(3,3)=-clhs129*clhs259 + clhs129*clhs261 - clhs273*clhs9 + clhs274*clhs9 - clhs275*clhs9 - clhs276*clhs9 + clhs304;
        lhs(3,4)=-clhs150*clhs259 + clhs150*clhs261 - clhs277*clhs9 + clhs278*clhs9 - clhs279*clhs9 - clhs280*clhs9 + clhs305;
        lhs(3,5)=-clhs171*clhs259 + clhs171*clhs261 - clhs281*clhs9 + clhs282*clhs9 - clhs283*clhs9 - clhs284*clhs9 + clhs306;
        lhs(3,6)=-clhs192*clhs259 + clhs192*clhs261 - clhs285*clhs9 + clhs286*clhs9 - clhs287*clhs9 - clhs288*clhs9 + clhs307;
        lhs(3,7)=-clhs213*clhs259 + clhs213*clhs261 - clhs289*clhs9 + clhs290*clhs9 - clhs291*clhs9 - clhs292*clhs9 + clhs308;
        lhs(3,8)=clhs294*clhs9;
        lhs(3,9)=clhs298*clhs9;
        lhs(3,10)=-clhs299*clhs9;
        lhs(3,11)=-clhs300*clhs9;
        lhs(4,0)=-clhs17*clhs309 + clhs17*clhs312 + clhs311*clhs4 + clhs314 - clhs315*clhs4 - clhs316*clhs4 - clhs317*clhs4;
        lhs(4,1)=-clhs309*clhs83 + clhs312*clhs83 + clhs319 - clhs320*clhs4 - clhs321*clhs4 + clhs4*clhs87 - clhs4*clhs93;
        lhs(4,2)=-clhs104*clhs309 + clhs104*clhs312 + clhs323*clhs4 + clhs325 - clhs326*clhs4 - clhs327*clhs4 - clhs328*clhs4;
        lhs(4,3)=-clhs127*clhs309 + clhs127*clhs312 + clhs131*clhs4 - clhs137*clhs4 + clhs330 - clhs331*clhs4 - clhs332*clhs4;
        lhs(4,4)=-clhs148*clhs309 + clhs148*clhs312 + clhs152*clhs4 - clhs158*clhs4 + clhs334 - clhs335*clhs4 - clhs336*clhs4;
        lhs(4,5)=-clhs169*clhs309 + clhs169*clhs312 + clhs173*clhs4 - clhs179*clhs4 + clhs338 - clhs339*clhs4 - clhs340*clhs4;
        lhs(4,6)=-clhs190*clhs309 + clhs190*clhs312 + clhs194*clhs4 - clhs200*clhs4 + clhs342 - clhs343*clhs4 - clhs344*clhs4;
        lhs(4,7)=-clhs211*clhs309 + clhs211*clhs312 + clhs215*clhs4 - clhs221*clhs4 + clhs346 - clhs347*clhs4 - clhs348*clhs4;
        lhs(4,8)=clhs351*clhs4;
        lhs(4,9)=clhs356*clhs4;
        lhs(4,10)=clhs255*clhs4;
        lhs(4,11)=clhs258*clhs4;
        lhs(5,0)=-clhs17*clhs357 + clhs17*clhs359 + clhs314 + clhs358*clhs4 - clhs360*clhs4 - clhs361*clhs4 - clhs362*clhs4;
        lhs(5,1)=clhs265*clhs4 - clhs266*clhs4 + clhs319 - clhs357*clhs83 + clhs359*clhs83 - clhs363*clhs4 - clhs364*clhs4;
        lhs(5,2)=-clhs104*clhs357 + clhs104*clhs359 + clhs325 + clhs365*clhs4 - clhs366*clhs4 - clhs367*clhs4 - clhs368*clhs4;
        lhs(5,3)=-clhs127*clhs357 + clhs127*clhs359 + clhs273*clhs4 - clhs274*clhs4 + clhs330 - clhs369*clhs4 - clhs370*clhs4;
        lhs(5,4)=-clhs148*clhs357 + clhs148*clhs359 + clhs277*clhs4 - clhs278*clhs4 + clhs334 - clhs371*clhs4 - clhs372*clhs4;
        lhs(5,5)=-clhs169*clhs357 + clhs169*clhs359 + clhs281*clhs4 - clhs282*clhs4 + clhs338 - clhs373*clhs4 - clhs374*clhs4;
        lhs(5,6)=-clhs190*clhs357 + clhs190*clhs359 + clhs285*clhs4 - clhs286*clhs4 + clhs342 - clhs375*clhs4 - clhs376*clhs4;
        lhs(5,7)=-clhs211*clhs357 + clhs211*clhs359 + clhs289*clhs4 - clhs290*clhs4 + clhs346 - clhs377*clhs4 - clhs378*clhs4;
        lhs(5,8)=clhs380*clhs4;
        lhs(5,9)=clhs382*clhs4;
        lhs(5,10)=clhs299*clhs4;
        lhs(5,11)=clhs300*clhs4;
        lhs(6,0)=-clhs18*clhs309 + clhs18*clhs312 + clhs311*clhs6 - clhs315*clhs6 - clhs316*clhs6 - clhs317*clhs6 + clhs383;
        lhs(6,1)=-clhs309*clhs84 + clhs312*clhs84 - clhs320*clhs6 - clhs321*clhs6 + clhs384 + clhs6*clhs87 - clhs6*clhs93;
        lhs(6,2)=-clhs105*clhs309 + clhs105*clhs312 + clhs323*clhs6 - clhs326*clhs6 - clhs327*clhs6 - clhs328*clhs6 + clhs385;
        lhs(6,3)=-clhs128*clhs309 + clhs128*clhs312 + clhs131*clhs6 - clhs137*clhs6 - clhs331*clhs6 - clhs332*clhs6 + clhs386;
        lhs(6,4)=-clhs149*clhs309 + clhs149*clhs312 + clhs152*clhs6 - clhs158*clhs6 - clhs335*clhs6 - clhs336*clhs6 + clhs387;
        lhs(6,5)=-clhs170*clhs309 + clhs170*clhs312 + clhs173*clhs6 - clhs179*clhs6 - clhs339*clhs6 - clhs340*clhs6 + clhs388;
        lhs(6,6)=-clhs191*clhs309 + clhs191*clhs312 + clhs194*clhs6 - clhs200*clhs6 - clhs343*clhs6 - clhs344*clhs6 + clhs389;
        lhs(6,7)=-clhs212*clhs309 + clhs212*clhs312 + clhs215*clhs6 - clhs221*clhs6 - clhs347*clhs6 - clhs348*clhs6 + clhs390;
        lhs(6,8)=clhs351*clhs6;
        lhs(6,9)=clhs356*clhs6;
        lhs(6,10)=clhs255*clhs6;
        lhs(6,11)=clhs258*clhs6;
        lhs(7,0)=-clhs18*clhs357 + clhs18*clhs359 + clhs358*clhs6 - clhs360*clhs6 - clhs361*clhs6 - clhs362*clhs6 + clhs383;
        lhs(7,1)=clhs265*clhs6 - clhs266*clhs6 - clhs357*clhs84 + clhs359*clhs84 - clhs363*clhs6 - clhs364*clhs6 + clhs384;
        lhs(7,2)=-clhs105*clhs357 + clhs105*clhs359 + clhs365*clhs6 - clhs366*clhs6 - clhs367*clhs6 - clhs368*clhs6 + clhs385;
        lhs(7,3)=-clhs128*clhs357 + clhs128*clhs359 + clhs273*clhs6 - clhs274*clhs6 - clhs369*clhs6 - clhs370*clhs6 + clhs386;
        lhs(7,4)=-clhs149*clhs357 + clhs149*clhs359 + clhs277*clhs6 - clhs278*clhs6 - clhs371*clhs6 - clhs372*clhs6 + clhs387;
        lhs(7,5)=-clhs170*clhs357 + clhs170*clhs359 + clhs281*clhs6 - clhs282*clhs6 - clhs373*clhs6 - clhs374*clhs6 + clhs388;
        lhs(7,6)=-clhs191*clhs357 + clhs191*clhs359 + clhs285*clhs6 - clhs286*clhs6 - clhs375*clhs6 - clhs376*clhs6 + clhs389;
        lhs(7,7)=-clhs212*clhs357 + clhs212*clhs359 + clhs289*clhs6 - clhs290*clhs6 - clhs377*clhs6 - clhs378*clhs6 + clhs390;
        lhs(7,8)=clhs380*clhs6;
        lhs(7,9)=clhs382*clhs6;
        lhs(7,10)=clhs299*clhs6;
        lhs(7,11)=clhs300*clhs6;
        lhs(8,0)=-scale_factor*(clhs22*normalslave(0,0) + clhs391*clhs398 + clhs399*clhs402);
        lhs(8,1)=scale_factor*(-clhs391*clhs405 - clhs399*clhs406 + clhs86*normalslave(0,0));
        lhs(8,2)=-scale_factor*(clhs109*normalslave(0,0) + clhs391*clhs409 + clhs399*clhs410);
        lhs(8,3)=scale_factor*(clhs130*normalslave(0,0) - clhs391*clhs413 - clhs399*clhs414);
        lhs(8,4)=scale_factor*(clhs151*normalslave(0,0) - clhs391*clhs417 - clhs399*clhs418);
        lhs(8,5)=scale_factor*(clhs172*normalslave(0,0) - clhs391*clhs421 - clhs399*clhs422);
        lhs(8,6)=scale_factor*(clhs193*normalslave(0,0) - clhs391*clhs425 - clhs399*clhs426);
        lhs(8,7)=scale_factor*(clhs214*normalslave(0,0) - clhs391*clhs429 - clhs399*clhs430);
        lhs(8,8)=clhs433*(clhs233*clhs434 + clhs239*clhs436);
        lhs(8,9)=clhs433*(clhs233*clhs437 + clhs239*clhs438);
        lhs(8,10)=-clhs254*clhs439;
        lhs(8,11)=-clhs257*clhs439;
        lhs(9,0)=-scale_factor*(clhs22*normalslave(0,1) + clhs398*clhs399 + clhs402*clhs440);
        lhs(9,1)=scale_factor*(-clhs399*clhs405 - clhs406*clhs440 + clhs86*normalslave(0,1));
        lhs(9,2)=-scale_factor*(clhs109*normalslave(0,1) + clhs399*clhs409 + clhs410*clhs440);
        lhs(9,3)=scale_factor*(clhs130*normalslave(0,1) - clhs399*clhs413 - clhs414*clhs440);
        lhs(9,4)=scale_factor*(clhs151*normalslave(0,1) - clhs399*clhs417 - clhs418*clhs440);
        lhs(9,5)=scale_factor*(clhs172*normalslave(0,1) - clhs399*clhs421 - clhs422*clhs440);
        lhs(9,6)=scale_factor*(clhs193*normalslave(0,1) - clhs399*clhs425 - clhs426*clhs440);
        lhs(9,7)=scale_factor*(clhs214*normalslave(0,1) - clhs399*clhs429 - clhs430*clhs440);
        lhs(9,8)=clhs433*(clhs239*clhs434 + clhs248*clhs436);
        lhs(9,9)=clhs433*(clhs239*clhs437 + clhs248*clhs438);
        lhs(9,10)=-clhs254*clhs441;
        lhs(9,11)=-clhs257*clhs441;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs442*(clhs252 + std::pow(normalslave(1,0), 2));
        lhs(10,11)=clhs443;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs443;
        lhs(11,11)=clhs442*(clhs256 + std::pow(normalslave(1,1), 2));
    }
    else if (rActiveInactive == 2 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(0,1) + clhs9*tangentetaslave(0,0)) + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double clhs16 =     clhs15*tangentetaslave(0,0);
        const double clhs17 =     penalty_parameter*(clhs14*tangentxislave(0,1) + clhs9*tangentxislave(0,0)) + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double clhs18 =     clhs17*tangentxislave(0,0);
        const double clhs19 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs20 =     X1(0,0) + u1(0,0);
        const double clhs21 =     X1(1,0) + u1(1,0);
        const double clhs22 =     X2(0,0) + u2(0,0);
        const double clhs23 =     X2(1,0) + u2(1,0);
        const double clhs24 =     X1(0,1) + u1(0,1);
        const double clhs25 =     X1(1,1) + u1(1,1);
        const double clhs26 =     X2(0,1) + u2(0,1);
        const double clhs27 =     X2(1,1) + u2(1,1);
        const double clhs28 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs22 + clhs20*clhs3 + clhs21*clhs5 - clhs23*clhs8) + normalslave(0,1)*(-clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8));
        const double clhs29 =     -clhs19 + clhs28;
        const double clhs30 =     clhs29*normalslave(0,0);
        const double clhs31 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs32 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs33 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     -clhs1*clhs6 + clhs2*clhs31 + clhs32*clhs4 - clhs33*clhs7;
        const double clhs35 =     -clhs1*clhs12 + clhs10*clhs31 + clhs11*clhs32 - clhs13*clhs33;
        const double clhs36 =     clhs34*tangentetaslave(0,0) + clhs35*tangentetaslave(0,1);
        const double clhs37 =     clhs36*penalty_parameter*tangentetaslave(0,0);
        const double clhs38 =     clhs34*tangentxislave(0,0) + clhs35*tangentxislave(0,1);
        const double clhs39 =     clhs38*penalty_parameter*tangentxislave(0,0);
        const double clhs40 =     normalslave(0,1)*(-clhs1*clhs26 + clhs24*clhs31 + clhs25*clhs32 - clhs27*clhs33);
        const double clhs41 =     normalslave(0,0)*(clhs0 + clhs1*clhs22 - clhs20*clhs31 - clhs21*clhs32 + clhs23*clhs33);
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(0,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     clhs2*clhs45 + clhs4*clhs46 - clhs44*clhs6 - clhs47*clhs7;
        const double clhs49 =     clhs10*clhs45 + clhs11*clhs46 - clhs12*clhs44 - clhs13*clhs47;
        const double clhs50 =     clhs48*tangentetaslave(0,0) + clhs49*tangentetaslave(0,1);
        const double clhs51 =     clhs50*penalty_parameter*tangentetaslave(0,0);
        const double clhs52 =     clhs48*tangentxislave(0,0) + clhs49*tangentxislave(0,1);
        const double clhs53 =     clhs52*penalty_parameter*tangentxislave(0,0);
        const double clhs54 =     normalslave(0,0)*(clhs20*clhs45 + clhs21*clhs46 - clhs22*clhs44 - clhs23*clhs47) - normalslave(0,1)*(clhs0 - clhs24*clhs45 - clhs25*clhs46 + clhs26*clhs44 + clhs27*clhs47);
        const double clhs55 =     clhs54*normalslave(0,0)*penalty_parameter;
        const double clhs56 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs57 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs58 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs59 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs60 =     clhs2*clhs57 + clhs4*clhs58 - clhs56*clhs6 - clhs59*clhs7;
        const double clhs61 =     clhs10*clhs57 + clhs11*clhs58 - clhs12*clhs56 - clhs13*clhs59;
        const double clhs62 =     clhs60*tangentetaslave(0,0) + clhs61*tangentetaslave(0,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentetaslave(0,0);
        const double clhs64 =     clhs60*tangentxislave(0,0) + clhs61*tangentxislave(0,1);
        const double clhs65 =     clhs64*penalty_parameter*tangentxislave(0,0);
        const double clhs66 =     normalslave(0,1)*(clhs24*clhs57 + clhs25*clhs58 - clhs26*clhs56 - clhs27*clhs59);
        const double clhs67 =     normalslave(0,0)*(-clhs20*clhs57 - clhs21*clhs58 + clhs22*clhs56 + clhs23*clhs59 + clhs8);
        const double clhs68 =     -clhs66 + clhs67;
        const double clhs69 =     clhs68*normalslave(0,0)*penalty_parameter;
        const double clhs70 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs71 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs72 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs73 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs74 =     clhs2*clhs71 + clhs4*clhs72 - clhs6*clhs70 - clhs7*clhs73;
        const double clhs75 =     clhs10*clhs71 + clhs11*clhs72 - clhs12*clhs70 - clhs13*clhs73;
        const double clhs76 =     clhs74*tangentetaslave(0,0) + clhs75*tangentetaslave(0,1);
        const double clhs77 =     clhs76*penalty_parameter*tangentetaslave(0,0);
        const double clhs78 =     clhs74*tangentxislave(0,0) + clhs75*tangentxislave(0,1);
        const double clhs79 =     clhs78*penalty_parameter*tangentxislave(0,0);
        const double clhs80 =     normalslave(0,0)*(clhs20*clhs71 + clhs21*clhs72 - clhs22*clhs70 - clhs23*clhs73) - normalslave(0,1)*(-clhs24*clhs71 - clhs25*clhs72 + clhs26*clhs70 + clhs27*clhs73 + clhs8);
        const double clhs81 =     clhs80*normalslave(0,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs83 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs84 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs85 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs86 =     clhs2*clhs83 + clhs4*clhs84 - clhs6*clhs82 - clhs7*clhs85;
        const double clhs87 =     clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85;
        const double clhs88 =     clhs86*tangentetaslave(0,0) + clhs87*tangentetaslave(0,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentetaslave(0,0);
        const double clhs90 =     clhs86*tangentxislave(0,0) + clhs87*tangentxislave(0,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(0,0);
        const double clhs92 =     normalslave(0,0)*(clhs20*clhs83 + clhs21*clhs84 - clhs22*clhs82 - clhs23*clhs85 + clhs3) + normalslave(0,1)*(clhs24*clhs83 + clhs25*clhs84 - clhs26*clhs82 - clhs27*clhs85);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs95 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs96 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs97 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs98 =     clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs94 - clhs7*clhs97;
        const double clhs99 =     clhs10*clhs95 + clhs11*clhs96 - clhs12*clhs94 - clhs13*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(0,0) + clhs99*tangentetaslave(0,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(0,0);
        const double clhs102 =     clhs98*tangentxislave(0,0) + clhs99*tangentxislave(0,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(0,0);
        const double clhs104 =     normalslave(0,0)*(clhs20*clhs95 + clhs21*clhs96 - clhs22*clhs94 - clhs23*clhs97) + normalslave(0,1)*(clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs94 - clhs27*clhs97 + clhs3);
        const double clhs105 =     clhs104*normalslave(0,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs107 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs108 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs109 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs110 =     -clhs106*clhs6 + clhs107*clhs2 + clhs108*clhs4 - clhs109*clhs7;
        const double clhs111 =     clhs10*clhs107 - clhs106*clhs12 + clhs108*clhs11 - clhs109*clhs13;
        const double clhs112 =     clhs110*tangentetaslave(0,0) + clhs111*tangentetaslave(0,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentetaslave(0,0);
        const double clhs114 =     clhs110*tangentxislave(0,0) + clhs111*tangentxislave(0,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(0,0);
        const double clhs116 =     normalslave(0,0)*(-clhs106*clhs22 + clhs107*clhs20 + clhs108*clhs21 - clhs109*clhs23 + clhs5) + normalslave(0,1)*(-clhs106*clhs26 + clhs107*clhs24 + clhs108*clhs25 - clhs109*clhs27);
        const double clhs117 =     clhs116*normalslave(0,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs119 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs120 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs121 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs122 =     -clhs118*clhs6 + clhs119*clhs2 + clhs120*clhs4 - clhs121*clhs7;
        const double clhs123 =     clhs10*clhs119 + clhs11*clhs120 - clhs118*clhs12 - clhs121*clhs13;
        const double clhs124 =     clhs122*tangentetaslave(0,0) + clhs123*tangentetaslave(0,1);
        const double clhs125 =     clhs124*penalty_parameter*tangentetaslave(0,0);
        const double clhs126 =     clhs122*tangentxislave(0,0) + clhs123*tangentxislave(0,1);
        const double clhs127 =     clhs126*penalty_parameter*tangentxislave(0,0);
        const double clhs128 =     normalslave(0,0)*(-clhs118*clhs22 + clhs119*clhs20 + clhs120*clhs21 - clhs121*clhs23) + normalslave(0,1)*(-clhs118*clhs26 + clhs119*clhs24 + clhs120*clhs25 - clhs121*clhs27 + clhs5);
        const double clhs129 =     clhs128*normalslave(0,0)*penalty_parameter;
        const double clhs130 =     scale_factor*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        const double clhs131 =     scale_factor*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs132 =     clhs0*clhs131;
        const double clhs133 =     clhs15*tangentetaslave(0,1);
        const double clhs134 =     clhs17*tangentxislave(0,1);
        const double clhs135 =     clhs29*normalslave(0,1);
        const double clhs136 =     clhs36*penalty_parameter*tangentetaslave(0,1);
        const double clhs137 =     clhs38*penalty_parameter*tangentxislave(0,1);
        const double clhs138 =     clhs42*normalslave(0,1)*penalty_parameter;
        const double clhs139 =     clhs50*penalty_parameter*tangentetaslave(0,1);
        const double clhs140 =     clhs52*penalty_parameter*tangentxislave(0,1);
        const double clhs141 =     clhs54*normalslave(0,1)*penalty_parameter;
        const double clhs142 =     clhs62*penalty_parameter*tangentetaslave(0,1);
        const double clhs143 =     clhs64*penalty_parameter*tangentxislave(0,1);
        const double clhs144 =     clhs68*normalslave(0,1)*penalty_parameter;
        const double clhs145 =     clhs76*penalty_parameter*tangentetaslave(0,1);
        const double clhs146 =     clhs78*penalty_parameter*tangentxislave(0,1);
        const double clhs147 =     clhs80*normalslave(0,1)*penalty_parameter;
        const double clhs148 =     clhs88*penalty_parameter*tangentetaslave(0,1);
        const double clhs149 =     clhs90*penalty_parameter*tangentxislave(0,1);
        const double clhs150 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs151 =     clhs100*penalty_parameter*tangentetaslave(0,1);
        const double clhs152 =     clhs102*penalty_parameter*tangentxislave(0,1);
        const double clhs153 =     clhs104*normalslave(0,1)*penalty_parameter;
        const double clhs154 =     clhs112*penalty_parameter*tangentetaslave(0,1);
        const double clhs155 =     clhs114*penalty_parameter*tangentxislave(0,1);
        const double clhs156 =     clhs116*normalslave(0,1)*penalty_parameter;
        const double clhs157 =     clhs124*penalty_parameter*tangentetaslave(0,1);
        const double clhs158 =     clhs126*penalty_parameter*tangentxislave(0,1);
        const double clhs159 =     clhs128*normalslave(0,1)*penalty_parameter;
        const double clhs160 =     scale_factor*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        const double clhs161 =     clhs131*clhs8;
        const double clhs162 =     clhs19 - clhs28;
        const double clhs163 =     clhs162*normalslave(0,0);
        const double clhs164 =     clhs40 - clhs41;
        const double clhs165 =     clhs164*normalslave(0,0)*penalty_parameter;
        const double clhs166 =     clhs66 - clhs67;
        const double clhs167 =     clhs166*normalslave(0,0)*penalty_parameter;
        const double clhs168 =     -clhs131*clhs3;
        const double clhs169 =     clhs162*normalslave(0,1);
        const double clhs170 =     clhs164*normalslave(0,1)*penalty_parameter;
        const double clhs171 =     clhs166*normalslave(0,1)*penalty_parameter;
        const double clhs172 =     -clhs131*clhs5;
        const double clhs173 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs174 =     clhs173*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
    
        lhs(0,0)=clhs0*clhs37 + clhs0*clhs39 + clhs0*clhs43 + clhs1*clhs16 + clhs1*clhs18 - clhs1*clhs30;
        lhs(0,1)=clhs0*clhs51 + clhs0*clhs53 - clhs0*clhs55 + clhs16*clhs44 + clhs18*clhs44 - clhs30*clhs44;
        lhs(0,2)=clhs0*clhs63 + clhs0*clhs65 + clhs0*clhs69 + clhs16*clhs56 + clhs18*clhs56 - clhs30*clhs56;
        lhs(0,3)=clhs0*clhs77 + clhs0*clhs79 - clhs0*clhs81 + clhs16*clhs70 + clhs18*clhs70 - clhs30*clhs70;
        lhs(0,4)=clhs0*clhs89 + clhs0*clhs91 - clhs0*clhs93 + clhs16*clhs82 + clhs18*clhs82 - clhs30*clhs82;
        lhs(0,5)=clhs0*clhs101 + clhs0*clhs103 - clhs0*clhs105 + clhs16*clhs94 + clhs18*clhs94 - clhs30*clhs94;
        lhs(0,6)=clhs0*clhs113 + clhs0*clhs115 - clhs0*clhs117 + clhs106*clhs16 + clhs106*clhs18 - clhs106*clhs30;
        lhs(0,7)=clhs0*clhs125 + clhs0*clhs127 - clhs0*clhs129 + clhs118*clhs16 + clhs118*clhs18 - clhs118*clhs30;
        lhs(0,8)=clhs0*clhs130;
        lhs(0,9)=clhs132;
        lhs(0,10)=0;
        lhs(0,11)=0;
        lhs(1,0)=clhs0*clhs136 + clhs0*clhs137 + clhs0*clhs138 + clhs1*clhs133 + clhs1*clhs134 - clhs1*clhs135;
        lhs(1,1)=clhs0*clhs139 + clhs0*clhs140 - clhs0*clhs141 + clhs133*clhs44 + clhs134*clhs44 - clhs135*clhs44;
        lhs(1,2)=clhs0*clhs142 + clhs0*clhs143 + clhs0*clhs144 + clhs133*clhs56 + clhs134*clhs56 - clhs135*clhs56;
        lhs(1,3)=clhs0*clhs145 + clhs0*clhs146 - clhs0*clhs147 + clhs133*clhs70 + clhs134*clhs70 - clhs135*clhs70;
        lhs(1,4)=clhs0*clhs148 + clhs0*clhs149 - clhs0*clhs150 + clhs133*clhs82 + clhs134*clhs82 - clhs135*clhs82;
        lhs(1,5)=clhs0*clhs151 + clhs0*clhs152 - clhs0*clhs153 + clhs133*clhs94 + clhs134*clhs94 - clhs135*clhs94;
        lhs(1,6)=clhs0*clhs154 + clhs0*clhs155 - clhs0*clhs156 + clhs106*clhs133 + clhs106*clhs134 - clhs106*clhs135;
        lhs(1,7)=clhs0*clhs157 + clhs0*clhs158 - clhs0*clhs159 + clhs118*clhs133 + clhs118*clhs134 - clhs118*clhs135;
        lhs(1,8)=clhs132;
        lhs(1,9)=clhs0*clhs160;
        lhs(1,10)=0;
        lhs(1,11)=0;
        lhs(2,0)=clhs16*clhs33 + clhs18*clhs33 - clhs30*clhs33 + clhs37*clhs8 + clhs39*clhs8 + clhs43*clhs8;
        lhs(2,1)=clhs16*clhs47 + clhs18*clhs47 - clhs30*clhs47 + clhs51*clhs8 + clhs53*clhs8 - clhs55*clhs8;
        lhs(2,2)=clhs16*clhs59 + clhs18*clhs59 - clhs30*clhs59 + clhs63*clhs8 + clhs65*clhs8 + clhs69*clhs8;
        lhs(2,3)=clhs16*clhs73 + clhs18*clhs73 - clhs30*clhs73 + clhs77*clhs8 + clhs79*clhs8 - clhs8*clhs81;
        lhs(2,4)=clhs16*clhs85 + clhs18*clhs85 - clhs30*clhs85 + clhs8*clhs89 + clhs8*clhs91 - clhs8*clhs93;
        lhs(2,5)=clhs101*clhs8 + clhs103*clhs8 - clhs105*clhs8 + clhs16*clhs97 + clhs18*clhs97 - clhs30*clhs97;
        lhs(2,6)=clhs109*clhs16 + clhs109*clhs18 - clhs109*clhs30 + clhs113*clhs8 + clhs115*clhs8 - clhs117*clhs8;
        lhs(2,7)=clhs121*clhs16 + clhs121*clhs18 - clhs121*clhs30 + clhs125*clhs8 + clhs127*clhs8 - clhs129*clhs8;
        lhs(2,8)=clhs130*clhs8;
        lhs(2,9)=clhs161;
        lhs(2,10)=0;
        lhs(2,11)=0;
        lhs(3,0)=clhs133*clhs33 + clhs134*clhs33 - clhs135*clhs33 + clhs136*clhs8 + clhs137*clhs8 + clhs138*clhs8;
        lhs(3,1)=clhs133*clhs47 + clhs134*clhs47 - clhs135*clhs47 + clhs139*clhs8 + clhs140*clhs8 - clhs141*clhs8;
        lhs(3,2)=clhs133*clhs59 + clhs134*clhs59 - clhs135*clhs59 + clhs142*clhs8 + clhs143*clhs8 + clhs144*clhs8;
        lhs(3,3)=clhs133*clhs73 + clhs134*clhs73 - clhs135*clhs73 + clhs145*clhs8 + clhs146*clhs8 - clhs147*clhs8;
        lhs(3,4)=clhs133*clhs85 + clhs134*clhs85 - clhs135*clhs85 + clhs148*clhs8 + clhs149*clhs8 - clhs150*clhs8;
        lhs(3,5)=clhs133*clhs97 + clhs134*clhs97 - clhs135*clhs97 + clhs151*clhs8 + clhs152*clhs8 - clhs153*clhs8;
        lhs(3,6)=clhs109*clhs133 + clhs109*clhs134 - clhs109*clhs135 + clhs154*clhs8 + clhs155*clhs8 - clhs156*clhs8;
        lhs(3,7)=clhs121*clhs133 + clhs121*clhs134 - clhs121*clhs135 + clhs157*clhs8 + clhs158*clhs8 - clhs159*clhs8;
        lhs(3,8)=clhs161;
        lhs(3,9)=clhs160*clhs8;
        lhs(3,10)=0;
        lhs(3,11)=0;
        lhs(4,0)=-clhs16*clhs31 - clhs163*clhs31 + clhs165*clhs3 - clhs18*clhs31 - clhs3*clhs37 - clhs3*clhs39;
        lhs(4,1)=-clhs16*clhs45 - clhs163*clhs45 - clhs18*clhs45 - clhs3*clhs51 - clhs3*clhs53 + clhs3*clhs55;
        lhs(4,2)=-clhs16*clhs57 - clhs163*clhs57 + clhs167*clhs3 - clhs18*clhs57 - clhs3*clhs63 - clhs3*clhs65;
        lhs(4,3)=-clhs16*clhs71 - clhs163*clhs71 - clhs18*clhs71 - clhs3*clhs77 - clhs3*clhs79 + clhs3*clhs81;
        lhs(4,4)=-clhs16*clhs83 - clhs163*clhs83 - clhs18*clhs83 - clhs3*clhs89 - clhs3*clhs91 + clhs3*clhs93;
        lhs(4,5)=-clhs101*clhs3 - clhs103*clhs3 + clhs105*clhs3 - clhs16*clhs95 - clhs163*clhs95 - clhs18*clhs95;
        lhs(4,6)=-clhs107*clhs16 - clhs107*clhs163 - clhs107*clhs18 - clhs113*clhs3 - clhs115*clhs3 + clhs117*clhs3;
        lhs(4,7)=-clhs119*clhs16 - clhs119*clhs163 - clhs119*clhs18 - clhs125*clhs3 - clhs127*clhs3 + clhs129*clhs3;
        lhs(4,8)=-clhs130*clhs3;
        lhs(4,9)=clhs168;
        lhs(4,10)=0;
        lhs(4,11)=0;
        lhs(5,0)=-clhs133*clhs31 - clhs134*clhs31 - clhs136*clhs3 - clhs137*clhs3 - clhs169*clhs31 + clhs170*clhs3;
        lhs(5,1)=-clhs133*clhs45 - clhs134*clhs45 - clhs139*clhs3 - clhs140*clhs3 + clhs141*clhs3 - clhs169*clhs45;
        lhs(5,2)=-clhs133*clhs57 - clhs134*clhs57 - clhs142*clhs3 - clhs143*clhs3 - clhs169*clhs57 + clhs171*clhs3;
        lhs(5,3)=-clhs133*clhs71 - clhs134*clhs71 - clhs145*clhs3 - clhs146*clhs3 + clhs147*clhs3 - clhs169*clhs71;
        lhs(5,4)=-clhs133*clhs83 - clhs134*clhs83 - clhs148*clhs3 - clhs149*clhs3 + clhs150*clhs3 - clhs169*clhs83;
        lhs(5,5)=-clhs133*clhs95 - clhs134*clhs95 - clhs151*clhs3 - clhs152*clhs3 + clhs153*clhs3 - clhs169*clhs95;
        lhs(5,6)=-clhs107*clhs133 - clhs107*clhs134 - clhs107*clhs169 - clhs154*clhs3 - clhs155*clhs3 + clhs156*clhs3;
        lhs(5,7)=-clhs119*clhs133 - clhs119*clhs134 - clhs119*clhs169 - clhs157*clhs3 - clhs158*clhs3 + clhs159*clhs3;
        lhs(5,8)=clhs168;
        lhs(5,9)=-clhs160*clhs3;
        lhs(5,10)=0;
        lhs(5,11)=0;
        lhs(6,0)=-clhs16*clhs32 - clhs163*clhs32 + clhs165*clhs5 - clhs18*clhs32 - clhs37*clhs5 - clhs39*clhs5;
        lhs(6,1)=-clhs16*clhs46 - clhs163*clhs46 - clhs18*clhs46 - clhs5*clhs51 - clhs5*clhs53 + clhs5*clhs55;
        lhs(6,2)=-clhs16*clhs58 - clhs163*clhs58 + clhs167*clhs5 - clhs18*clhs58 - clhs5*clhs63 - clhs5*clhs65;
        lhs(6,3)=-clhs16*clhs72 - clhs163*clhs72 - clhs18*clhs72 - clhs5*clhs77 - clhs5*clhs79 + clhs5*clhs81;
        lhs(6,4)=-clhs16*clhs84 - clhs163*clhs84 - clhs18*clhs84 - clhs5*clhs89 - clhs5*clhs91 + clhs5*clhs93;
        lhs(6,5)=-clhs101*clhs5 - clhs103*clhs5 + clhs105*clhs5 - clhs16*clhs96 - clhs163*clhs96 - clhs18*clhs96;
        lhs(6,6)=-clhs108*clhs16 - clhs108*clhs163 - clhs108*clhs18 - clhs113*clhs5 - clhs115*clhs5 + clhs117*clhs5;
        lhs(6,7)=-clhs120*clhs16 - clhs120*clhs163 - clhs120*clhs18 - clhs125*clhs5 - clhs127*clhs5 + clhs129*clhs5;
        lhs(6,8)=-clhs130*clhs5;
        lhs(6,9)=clhs172;
        lhs(6,10)=0;
        lhs(6,11)=0;
        lhs(7,0)=-clhs133*clhs32 - clhs134*clhs32 - clhs136*clhs5 - clhs137*clhs5 - clhs169*clhs32 + clhs170*clhs5;
        lhs(7,1)=-clhs133*clhs46 - clhs134*clhs46 - clhs139*clhs5 - clhs140*clhs5 + clhs141*clhs5 - clhs169*clhs46;
        lhs(7,2)=-clhs133*clhs58 - clhs134*clhs58 - clhs142*clhs5 - clhs143*clhs5 - clhs169*clhs58 + clhs171*clhs5;
        lhs(7,3)=-clhs133*clhs72 - clhs134*clhs72 - clhs145*clhs5 - clhs146*clhs5 + clhs147*clhs5 - clhs169*clhs72;
        lhs(7,4)=-clhs133*clhs84 - clhs134*clhs84 - clhs148*clhs5 - clhs149*clhs5 + clhs150*clhs5 - clhs169*clhs84;
        lhs(7,5)=-clhs133*clhs96 - clhs134*clhs96 - clhs151*clhs5 - clhs152*clhs5 + clhs153*clhs5 - clhs169*clhs96;
        lhs(7,6)=-clhs108*clhs133 - clhs108*clhs134 - clhs108*clhs169 - clhs154*clhs5 - clhs155*clhs5 + clhs156*clhs5;
        lhs(7,7)=-clhs120*clhs133 - clhs120*clhs134 - clhs120*clhs169 - clhs157*clhs5 - clhs158*clhs5 + clhs159*clhs5;
        lhs(7,8)=clhs172;
        lhs(7,9)=-clhs160*clhs5;
        lhs(7,10)=0;
        lhs(7,11)=0;
        lhs(8,0)=scale_factor*(clhs164*normalslave(0,0) - clhs36*tangentetaslave(0,0) - clhs38*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs50*tangentetaslave(0,0) - clhs52*tangentxislave(0,0) + clhs54*normalslave(0,0));
        lhs(8,2)=scale_factor*(clhs166*normalslave(0,0) - clhs62*tangentetaslave(0,0) - clhs64*tangentxislave(0,0));
        lhs(8,3)=scale_factor*(-clhs76*tangentetaslave(0,0) - clhs78*tangentxislave(0,0) + clhs80*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs88*tangentetaslave(0,0) - clhs90*tangentxislave(0,0) + clhs92*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs100*tangentetaslave(0,0) - clhs102*tangentxislave(0,0) + clhs104*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs112*tangentetaslave(0,0) - clhs114*tangentxislave(0,0) + clhs116*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs124*tangentetaslave(0,0) - clhs126*tangentxislave(0,0) + clhs128*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs164*normalslave(0,1) - clhs36*tangentetaslave(0,1) - clhs38*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs50*tangentetaslave(0,1) - clhs52*tangentxislave(0,1) + clhs54*normalslave(0,1));
        lhs(9,2)=scale_factor*(clhs166*normalslave(0,1) - clhs62*tangentetaslave(0,1) - clhs64*tangentxislave(0,1));
        lhs(9,3)=scale_factor*(-clhs76*tangentetaslave(0,1) - clhs78*tangentxislave(0,1) + clhs80*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs88*tangentetaslave(0,1) - clhs90*tangentxislave(0,1) + clhs92*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs100*tangentetaslave(0,1) - clhs102*tangentxislave(0,1) + clhs104*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs112*tangentetaslave(0,1) - clhs114*tangentxislave(0,1) + clhs116*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs124*tangentetaslave(0,1) - clhs126*tangentxislave(0,1) + clhs128*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=0;
        lhs(10,1)=0;
        lhs(10,2)=0;
        lhs(10,3)=0;
        lhs(10,4)=0;
        lhs(10,5)=0;
        lhs(10,6)=0;
        lhs(10,7)=0;
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=clhs173*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        lhs(10,11)=clhs174;
        lhs(11,0)=0;
        lhs(11,1)=0;
        lhs(11,2)=0;
        lhs(11,3)=0;
        lhs(11,4)=0;
        lhs(11,5)=0;
        lhs(11,6)=0;
        lhs(11,7)=0;
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=clhs174;
        lhs(11,11)=clhs173*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
    }
    else if (rActiveInactive == 3 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs3 =     X1(0,0) + u1(0,0);
        const double clhs4 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1(1,0);
        const double clhs6 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2(0,0);
        const double clhs8 =     X2(1,0) + u2(1,0);
        const double clhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     X1(0,1) + u1(0,1);
        const double clhs11 =     X1(1,1) + u1(1,1);
        const double clhs12 =     X2(0,1) + u2(0,1);
        const double clhs13 =     X2(1,1) + u2(1,1);
        const double clhs14 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9) + normalslave(1,1)*(-clhs0*clhs12 + clhs10*clhs4 + clhs11*clhs6 - clhs13*clhs9));
        const double clhs15 =     clhs14 - clhs2;
        const double clhs16 =     clhs15*normalslave(1,0);
        const double clhs17 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs18 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs20 =     normalslave(1,1)*(-clhs1*clhs12 + clhs10*clhs17 + clhs11*clhs18 - clhs13*clhs19);
        const double clhs21 =     normalslave(1,0)*(clhs0 + clhs1*clhs7 - clhs17*clhs3 - clhs18*clhs5 + clhs19*clhs8);
        const double clhs22 =     -clhs20 + clhs21;
        const double clhs23 =     clhs22*normalslave(1,0)*penalty_parameter;
        const double clhs24 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs25 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs26 =     scale_factor*(clhs24*tangentetaslave(1,0) + clhs25*tangentxislave(1,0));
        const double clhs27 =     X1(0,0) + u1old(0,0);
        const double clhs28 =     X1(1,0) + u1old(1,0);
        const double clhs29 =     X2(0,0) + u2old(0,0);
        const double clhs30 =     X2(1,0) + u2old(1,0);
        const double clhs31 =     -clhs0*clhs29 + clhs27*clhs4 + clhs28*clhs6 - clhs30*clhs9;
        const double clhs32 =     X1(0,1) + u1old(0,1);
        const double clhs33 =     X1(1,1) + u1old(1,1);
        const double clhs34 =     X2(0,1) + u2old(0,1);
        const double clhs35 =     X2(1,1) + u2old(1,1);
        const double clhs36 =     -clhs0*clhs34 + clhs32*clhs4 + clhs33*clhs6 - clhs35*clhs9;
        const double clhs37 =     penalty_parameter*(clhs31*tangentetaslave(1,0) + clhs36*tangentetaslave(1,1));
        const double clhs38 =     penalty_parameter*(clhs31*tangentxislave(1,0) + clhs36*tangentxislave(1,1));
        const double clhs39 =     clhs37 + clhs38;
        const double clhs40 =     clhs26 + clhs39;
        const double clhs41 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs42 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs43 =     scale_factor*(clhs41*tangentetaslave(0,0) + clhs42*tangentxislave(0,0));
        const double clhs44 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs45 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs46 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs47 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs48 =     clhs27*clhs44 + clhs28*clhs45 - clhs29*clhs46 - clhs30*clhs47;
        const double clhs49 =     clhs32*clhs44 + clhs33*clhs45 - clhs34*clhs46 - clhs35*clhs47;
        const double clhs50 =     penalty_parameter*(clhs48*tangentetaslave(0,0) + clhs49*tangentetaslave(0,1));
        const double clhs51 =     penalty_parameter*(clhs48*tangentxislave(0,0) + clhs49*tangentxislave(0,1));
        const double clhs52 =     clhs50 + clhs51;
        const double clhs53 =     clhs43 + clhs52;
        const double clhs54 =     scale_factor*(clhs41*tangentetaslave(0,1) + clhs42*tangentxislave(0,1));
        const double clhs55 =     clhs52 + clhs54;
        const double clhs56 =     std::pow(clhs53, 2) + std::pow(clhs55, 2);
        const double clhs57 =     std::pow(clhs56, -1.0L/2.0L);
        const double clhs58 =     scale_factor*(clhs24*tangentetaslave(1,1) + clhs25*tangentxislave(1,1));
        const double clhs59 =     clhs39 + clhs58;
        const double clhs60 =     std::pow(clhs40, 2) + std::pow(clhs59, 2);
        const double clhs61 =     std::pow(clhs60, -1.0L/2.0L);
        const double clhs62 =     clhs15*clhs40*clhs57*clhs61*mu[1];
        const double clhs63 =     -clhs1*clhs29 + clhs17*clhs27 + clhs18*clhs28 - clhs19*clhs30;
        const double clhs64 =     -clhs1*clhs34 + clhs17*clhs32 + clhs18*clhs33 - clhs19*clhs35;
        const double clhs65 =     clhs63*tangentetaslave(1,0) + clhs63*tangentxislave(1,0) + clhs64*tangentetaslave(1,1) + clhs64*tangentxislave(1,1);
        const double clhs66 =     clhs15*clhs57*clhs61*clhs65*mu[1]*penalty_parameter;
        const double clhs67 =     clhs0*clhs66;
        const double clhs68 =     clhs22*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs69 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs70 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs71 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs72 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs73 =     clhs27*clhs69 + clhs28*clhs70 - clhs29*clhs71 - clhs30*clhs72;
        const double clhs74 =     clhs32*clhs69 + clhs33*clhs70 - clhs34*clhs71 - clhs35*clhs72;
        const double clhs75 =     clhs73*tangentetaslave(0,0) + clhs73*tangentxislave(0,0) + clhs74*tangentetaslave(0,1) + clhs74*tangentxislave(0,1);
        const double clhs76 =     clhs43 + 2*clhs50 + 2*clhs51 + clhs54;
        const double clhs77 =     std::pow(clhs56, -3.0L/2.0L);
        const double clhs78 =     clhs15*clhs40*clhs61*clhs75*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs79 =     clhs26 + 2*clhs37 + 2*clhs38 + clhs58;
        const double clhs80 =     std::pow(clhs60, -3.0L/2.0L);
        const double clhs81 =     clhs15*clhs40*clhs57*clhs65*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs82 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs85 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs86 =     normalslave(1,0)*(clhs3*clhs83 + clhs5*clhs84 - clhs7*clhs82 - clhs8*clhs85) - normalslave(1,1)*(clhs0 - clhs10*clhs83 - clhs11*clhs84 + clhs12*clhs82 + clhs13*clhs85);
        const double clhs87 =     clhs86*normalslave(1,0)*penalty_parameter;
        const double clhs88 =     clhs27*clhs83 + clhs28*clhs84 - clhs29*clhs82 - clhs30*clhs85;
        const double clhs89 =     clhs32*clhs83 + clhs33*clhs84 - clhs34*clhs82 - clhs35*clhs85;
        const double clhs90 =     clhs88*tangentetaslave(1,0) + clhs88*tangentxislave(1,0) + clhs89*tangentetaslave(1,1) + clhs89*tangentxislave(1,1);
        const double clhs91 =     clhs15*clhs57*clhs61*clhs90*mu[1]*penalty_parameter;
        const double clhs92 =     clhs0*clhs91;
        const double clhs93 =     clhs40*clhs57*clhs61*clhs86*mu[1]*penalty_parameter;
        const double clhs94 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs95 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs96 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs97 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs98 =     clhs27*clhs94 + clhs28*clhs95 - clhs29*clhs96 - clhs30*clhs97;
        const double clhs99 =     clhs32*clhs94 + clhs33*clhs95 - clhs34*clhs96 - clhs35*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(0,0) + clhs98*tangentxislave(0,0) + clhs99*tangentetaslave(0,1) + clhs99*tangentxislave(0,1);
        const double clhs101 =     clhs100*clhs15*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs102 =     clhs15*clhs40*clhs57*clhs79*clhs80*clhs90*mu[1]*penalty_parameter;
        const double clhs103 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs104 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs105 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs106 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs107 =     normalslave(1,1)*(clhs10*clhs104 - clhs103*clhs12 + clhs105*clhs11 - clhs106*clhs13);
        const double clhs108 =     normalslave(1,0)*(clhs103*clhs7 - clhs104*clhs3 - clhs105*clhs5 + clhs106*clhs8 + clhs9);
        const double clhs109 =     -clhs107 + clhs108;
        const double clhs110 =     clhs109*normalslave(1,0)*penalty_parameter;
        const double clhs111 =     -clhs103*clhs29 + clhs104*clhs27 + clhs105*clhs28 - clhs106*clhs30;
        const double clhs112 =     -clhs103*clhs34 + clhs104*clhs32 + clhs105*clhs33 - clhs106*clhs35;
        const double clhs113 =     clhs111*tangentetaslave(1,0) + clhs111*tangentxislave(1,0) + clhs112*tangentetaslave(1,1) + clhs112*tangentxislave(1,1);
        const double clhs114 =     clhs113*clhs15*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs115 =     clhs0*clhs114;
        const double clhs116 =     clhs109*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs117 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs118 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs119 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs120 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs121 =     clhs117*clhs27 + clhs118*clhs28 - clhs119*clhs29 - clhs120*clhs30;
        const double clhs122 =     clhs117*clhs32 + clhs118*clhs33 - clhs119*clhs34 - clhs120*clhs35;
        const double clhs123 =     clhs121*tangentetaslave(0,0) + clhs121*tangentxislave(0,0) + clhs122*tangentetaslave(0,1) + clhs122*tangentxislave(0,1);
        const double clhs124 =     clhs123*clhs15*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs125 =     clhs113*clhs15*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs126 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs128 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs129 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs130 =     normalslave(1,0)*(-clhs126*clhs7 + clhs127*clhs3 + clhs128*clhs5 - clhs129*clhs8) - normalslave(1,1)*(-clhs10*clhs127 - clhs11*clhs128 + clhs12*clhs126 + clhs129*clhs13 + clhs9);
        const double clhs131 =     clhs130*normalslave(1,0)*penalty_parameter;
        const double clhs132 =     -clhs126*clhs29 + clhs127*clhs27 + clhs128*clhs28 - clhs129*clhs30;
        const double clhs133 =     -clhs126*clhs34 + clhs127*clhs32 + clhs128*clhs33 - clhs129*clhs35;
        const double clhs134 =     clhs132*tangentetaslave(1,0) + clhs132*tangentxislave(1,0) + clhs133*tangentetaslave(1,1) + clhs133*tangentxislave(1,1);
        const double clhs135 =     clhs134*clhs15*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs136 =     clhs0*clhs135;
        const double clhs137 =     clhs130*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs138 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs139 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs140 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs141 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs142 =     clhs138*clhs27 + clhs139*clhs28 - clhs140*clhs29 - clhs141*clhs30;
        const double clhs143 =     clhs138*clhs32 + clhs139*clhs33 - clhs140*clhs34 - clhs141*clhs35;
        const double clhs144 =     clhs142*tangentetaslave(0,0) + clhs142*tangentxislave(0,0) + clhs143*tangentetaslave(0,1) + clhs143*tangentxislave(0,1);
        const double clhs145 =     clhs144*clhs15*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs146 =     clhs134*clhs15*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs147 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs148 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs150 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs151 =     normalslave(1,0)*(-clhs147*clhs7 + clhs148*clhs3 + clhs149*clhs5 - clhs150*clhs8 + clhs4) + normalslave(1,1)*(clhs10*clhs148 + clhs11*clhs149 - clhs12*clhs147 - clhs13*clhs150);
        const double clhs152 =     clhs151*normalslave(1,0)*penalty_parameter;
        const double clhs153 =     -clhs147*clhs29 + clhs148*clhs27 + clhs149*clhs28 - clhs150*clhs30;
        const double clhs154 =     -clhs147*clhs34 + clhs148*clhs32 + clhs149*clhs33 - clhs150*clhs35;
        const double clhs155 =     clhs153*tangentetaslave(1,0) + clhs153*tangentxislave(1,0) + clhs154*tangentetaslave(1,1) + clhs154*tangentxislave(1,1);
        const double clhs156 =     clhs15*clhs155*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs157 =     clhs0*clhs156;
        const double clhs158 =     clhs151*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs159 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs160 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs161 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs162 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs163 =     clhs159*clhs27 + clhs160*clhs28 - clhs161*clhs29 - clhs162*clhs30;
        const double clhs164 =     clhs159*clhs32 + clhs160*clhs33 - clhs161*clhs34 - clhs162*clhs35;
        const double clhs165 =     clhs163*tangentetaslave(0,0) + clhs163*tangentxislave(0,0) + clhs164*tangentetaslave(0,1) + clhs164*tangentxislave(0,1);
        const double clhs166 =     clhs15*clhs165*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs167 =     clhs15*clhs155*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs168 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs169 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs170 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs171 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs172 =     normalslave(1,0)*(-clhs168*clhs7 + clhs169*clhs3 + clhs170*clhs5 - clhs171*clhs8) + normalslave(1,1)*(clhs10*clhs169 + clhs11*clhs170 - clhs12*clhs168 - clhs13*clhs171 + clhs4);
        const double clhs173 =     clhs172*normalslave(1,0)*penalty_parameter;
        const double clhs174 =     -clhs168*clhs29 + clhs169*clhs27 + clhs170*clhs28 - clhs171*clhs30;
        const double clhs175 =     -clhs168*clhs34 + clhs169*clhs32 + clhs170*clhs33 - clhs171*clhs35;
        const double clhs176 =     clhs174*tangentetaslave(1,0) + clhs174*tangentxislave(1,0) + clhs175*tangentetaslave(1,1) + clhs175*tangentxislave(1,1);
        const double clhs177 =     clhs15*clhs176*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs178 =     clhs0*clhs177;
        const double clhs179 =     clhs172*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs180 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs181 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs182 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs183 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs184 =     clhs180*clhs27 + clhs181*clhs28 - clhs182*clhs29 - clhs183*clhs30;
        const double clhs185 =     clhs180*clhs32 + clhs181*clhs33 - clhs182*clhs34 - clhs183*clhs35;
        const double clhs186 =     clhs184*tangentetaslave(0,0) + clhs184*tangentxislave(0,0) + clhs185*tangentetaslave(0,1) + clhs185*tangentxislave(0,1);
        const double clhs187 =     clhs15*clhs186*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs188 =     clhs15*clhs176*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs189 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs190 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs191 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs192 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs193 =     normalslave(1,0)*(-clhs189*clhs7 + clhs190*clhs3 + clhs191*clhs5 - clhs192*clhs8 + clhs6) + normalslave(1,1)*(clhs10*clhs190 + clhs11*clhs191 - clhs12*clhs189 - clhs13*clhs192);
        const double clhs194 =     clhs193*normalslave(1,0)*penalty_parameter;
        const double clhs195 =     -clhs189*clhs29 + clhs190*clhs27 + clhs191*clhs28 - clhs192*clhs30;
        const double clhs196 =     -clhs189*clhs34 + clhs190*clhs32 + clhs191*clhs33 - clhs192*clhs35;
        const double clhs197 =     clhs195*tangentetaslave(1,0) + clhs195*tangentxislave(1,0) + clhs196*tangentetaslave(1,1) + clhs196*tangentxislave(1,1);
        const double clhs198 =     clhs15*clhs197*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs199 =     clhs0*clhs198;
        const double clhs200 =     clhs193*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs201 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs202 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs203 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs204 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs205 =     clhs201*clhs27 + clhs202*clhs28 - clhs203*clhs29 - clhs204*clhs30;
        const double clhs206 =     clhs201*clhs32 + clhs202*clhs33 - clhs203*clhs34 - clhs204*clhs35;
        const double clhs207 =     clhs205*tangentetaslave(0,0) + clhs205*tangentxislave(0,0) + clhs206*tangentetaslave(0,1) + clhs206*tangentxislave(0,1);
        const double clhs208 =     clhs15*clhs207*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs209 =     clhs15*clhs197*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs210 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs211 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs212 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs213 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs214 =     normalslave(1,0)*(-clhs210*clhs7 + clhs211*clhs3 + clhs212*clhs5 - clhs213*clhs8) + normalslave(1,1)*(clhs10*clhs211 + clhs11*clhs212 - clhs12*clhs210 - clhs13*clhs213 + clhs6);
        const double clhs215 =     clhs214*normalslave(1,0)*penalty_parameter;
        const double clhs216 =     -clhs210*clhs29 + clhs211*clhs27 + clhs212*clhs28 - clhs213*clhs30;
        const double clhs217 =     -clhs210*clhs34 + clhs211*clhs32 + clhs212*clhs33 - clhs213*clhs35;
        const double clhs218 =     clhs216*tangentetaslave(1,0) + clhs216*tangentxislave(1,0) + clhs217*tangentetaslave(1,1) + clhs217*tangentxislave(1,1);
        const double clhs219 =     clhs15*clhs218*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs220 =     clhs0*clhs219;
        const double clhs221 =     clhs214*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs222 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs223 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs224 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs225 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs226 =     clhs222*clhs27 + clhs223*clhs28 - clhs224*clhs29 - clhs225*clhs30;
        const double clhs227 =     clhs222*clhs32 + clhs223*clhs33 - clhs224*clhs34 - clhs225*clhs35;
        const double clhs228 =     clhs226*tangentetaslave(0,0) + clhs226*tangentxislave(0,0) + clhs227*tangentetaslave(0,1) + clhs227*tangentxislave(0,1);
        const double clhs229 =     clhs15*clhs228*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs230 =     clhs15*clhs218*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs231 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs232 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs233 =     clhs231*clhs53 + clhs232*clhs55;
        const double clhs234 =     clhs15*clhs233*clhs40*clhs61*clhs77*mu[1]*scale_factor;
        const double clhs235 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs236 =     clhs232*clhs53 + clhs235*clhs55;
        const double clhs237 =     clhs15*clhs236*clhs40*clhs61*clhs77*mu[1]*scale_factor;
        const double clhs238 =     std::pow(normalslave(1,0), 2);
        const double clhs239 =     -clhs14 + clhs2;
        const double clhs240 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs241 =     clhs240*clhs57*clhs61*mu[1];
        const double clhs242 =     clhs57*clhs61*mu[1]*normalslave(1,0);
        const double clhs243 =     clhs242*clhs40;
        const double clhs244 =     tangentetaslave(1,0)*tangentetaslave(1,1);
        const double clhs245 =     tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs246 =     clhs244 + clhs245;
        const double clhs247 =     clhs240*clhs40 + clhs246*clhs59;
        const double clhs248 =     clhs239*clhs247*clhs57*clhs80*mu[1];
        const double clhs249 =     scale_factor*(clhs238 - clhs239*clhs241 - clhs243 + clhs248*clhs40);
        const double clhs250 =     normalslave(1,0)*normalslave(1,1);
        const double clhs251 =     clhs246*clhs57*clhs61*mu[1];
        const double clhs252 =     -clhs239*clhs251 + clhs250;
        const double clhs253 =     clhs57*clhs61*mu[1]*normalslave(1,1);
        const double clhs254 =     clhs253*clhs40;
        const double clhs255 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs256 =     clhs246*clhs40 + clhs255*clhs59;
        const double clhs257 =     clhs239*clhs256*clhs57*clhs80*mu[1];
        const double clhs258 =     scale_factor*(clhs252 - clhs254 + clhs257*clhs40);
        const double clhs259 =     clhs15*normalslave(1,1);
        const double clhs260 =     clhs22*normalslave(1,1)*penalty_parameter;
        const double clhs261 =     clhs15*clhs57*clhs59*clhs61*mu[1];
        const double clhs262 =     clhs22*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs263 =     clhs15*clhs59*clhs61*clhs75*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs264 =     clhs15*clhs57*clhs59*clhs65*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs265 =     clhs86*normalslave(1,1)*penalty_parameter;
        const double clhs266 =     clhs57*clhs59*clhs61*clhs86*mu[1]*penalty_parameter;
        const double clhs267 =     clhs100*clhs15*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs268 =     clhs15*clhs57*clhs59*clhs79*clhs80*clhs90*mu[1]*penalty_parameter;
        const double clhs269 =     clhs109*normalslave(1,1)*penalty_parameter;
        const double clhs270 =     clhs109*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs271 =     clhs123*clhs15*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs272 =     clhs113*clhs15*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs273 =     clhs130*normalslave(1,1)*penalty_parameter;
        const double clhs274 =     clhs130*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs275 =     clhs144*clhs15*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs276 =     clhs134*clhs15*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs277 =     clhs151*normalslave(1,1)*penalty_parameter;
        const double clhs278 =     clhs151*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs279 =     clhs15*clhs165*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs280 =     clhs15*clhs155*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs281 =     clhs172*normalslave(1,1)*penalty_parameter;
        const double clhs282 =     clhs172*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs283 =     clhs15*clhs186*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs284 =     clhs15*clhs176*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs285 =     clhs193*normalslave(1,1)*penalty_parameter;
        const double clhs286 =     clhs193*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs287 =     clhs15*clhs207*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs288 =     clhs15*clhs197*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs289 =     clhs214*normalslave(1,1)*penalty_parameter;
        const double clhs290 =     clhs214*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs291 =     clhs15*clhs228*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs292 =     clhs15*clhs218*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs293 =     clhs15*clhs233*clhs59*clhs61*clhs77*mu[1]*scale_factor;
        const double clhs294 =     clhs15*clhs236*clhs59*clhs61*clhs77*mu[1]*scale_factor;
        const double clhs295 =     clhs242*clhs59;
        const double clhs296 =     scale_factor*(clhs248*clhs59 + clhs252 - clhs295);
        const double clhs297 =     std::pow(normalslave(1,1), 2);
        const double clhs298 =     clhs255*clhs57*clhs61*mu[1];
        const double clhs299 =     clhs253*clhs59;
        const double clhs300 =     scale_factor*(-clhs239*clhs298 + clhs257*clhs59 + clhs297 - clhs299);
        const double clhs301 =     clhs66*clhs9;
        const double clhs302 =     clhs9*clhs91;
        const double clhs303 =     clhs114*clhs9;
        const double clhs304 =     clhs135*clhs9;
        const double clhs305 =     clhs156*clhs9;
        const double clhs306 =     clhs177*clhs9;
        const double clhs307 =     clhs198*clhs9;
        const double clhs308 =     clhs219*clhs9;
        const double clhs309 =     clhs239*normalslave(1,0);
        const double clhs310 =     clhs20 - clhs21;
        const double clhs311 =     clhs310*normalslave(1,0)*penalty_parameter;
        const double clhs312 =     clhs239*clhs40*clhs57*clhs61*mu[1];
        const double clhs313 =     clhs239*clhs57*clhs61*clhs65*mu[1]*penalty_parameter;
        const double clhs314 =     clhs313*clhs4;
        const double clhs315 =     clhs310*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs316 =     clhs239*clhs40*clhs61*clhs75*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs317 =     clhs239*clhs40*clhs57*clhs65*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs318 =     clhs239*clhs57*clhs61*clhs90*mu[1]*penalty_parameter;
        const double clhs319 =     clhs318*clhs4;
        const double clhs320 =     clhs100*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs321 =     clhs239*clhs40*clhs57*clhs79*clhs80*clhs90*mu[1]*penalty_parameter;
        const double clhs322 =     clhs107 - clhs108;
        const double clhs323 =     clhs322*normalslave(1,0)*penalty_parameter;
        const double clhs324 =     clhs113*clhs239*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs325 =     clhs324*clhs4;
        const double clhs326 =     clhs322*clhs40*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs327 =     clhs123*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs328 =     clhs113*clhs239*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs329 =     clhs134*clhs239*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs330 =     clhs329*clhs4;
        const double clhs331 =     clhs144*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs332 =     clhs134*clhs239*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs333 =     clhs155*clhs239*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs334 =     clhs333*clhs4;
        const double clhs335 =     clhs165*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs336 =     clhs155*clhs239*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs337 =     clhs176*clhs239*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs338 =     clhs337*clhs4;
        const double clhs339 =     clhs186*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs340 =     clhs176*clhs239*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs341 =     clhs197*clhs239*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs342 =     clhs341*clhs4;
        const double clhs343 =     clhs207*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs344 =     clhs197*clhs239*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs345 =     clhs218*clhs239*clhs57*clhs61*mu[1]*penalty_parameter;
        const double clhs346 =     clhs345*clhs4;
        const double clhs347 =     clhs228*clhs239*clhs40*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs348 =     clhs218*clhs239*clhs40*clhs57*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs349 =     clhs15*clhs247*clhs57*clhs80*mu[1];
        const double clhs350 =     -clhs15*clhs241 + clhs243 + clhs349*clhs40;
        const double clhs351 =     scale_factor*(-clhs238 + clhs350);
        const double clhs352 =     -clhs15*clhs251;
        const double clhs353 =     -clhs250 + clhs352;
        const double clhs354 =     clhs15*clhs256*clhs57*clhs80*mu[1];
        const double clhs355 =     clhs254 + clhs354*clhs40;
        const double clhs356 =     scale_factor*(clhs353 + clhs355);
        const double clhs357 =     clhs239*normalslave(1,1);
        const double clhs358 =     clhs310*normalslave(1,1)*penalty_parameter;
        const double clhs359 =     clhs239*clhs57*clhs59*clhs61*mu[1];
        const double clhs360 =     clhs310*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs361 =     clhs239*clhs59*clhs61*clhs75*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs362 =     clhs239*clhs57*clhs59*clhs65*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs363 =     clhs100*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs364 =     clhs239*clhs57*clhs59*clhs79*clhs80*clhs90*mu[1]*penalty_parameter;
        const double clhs365 =     clhs322*normalslave(1,1)*penalty_parameter;
        const double clhs366 =     clhs322*clhs57*clhs59*clhs61*mu[1]*penalty_parameter;
        const double clhs367 =     clhs123*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs368 =     clhs113*clhs239*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs369 =     clhs144*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs370 =     clhs134*clhs239*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs371 =     clhs165*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs372 =     clhs155*clhs239*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs373 =     clhs186*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs374 =     clhs176*clhs239*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs375 =     clhs207*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs376 =     clhs197*clhs239*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs377 =     clhs228*clhs239*clhs59*clhs61*clhs76*clhs77*mu[1]*penalty_parameter;
        const double clhs378 =     clhs218*clhs239*clhs57*clhs59*clhs79*clhs80*mu[1]*penalty_parameter;
        const double clhs379 =     clhs295 + clhs349*clhs59;
        const double clhs380 =     scale_factor*(clhs353 + clhs379);
        const double clhs381 =     -clhs15*clhs298 + clhs299 + clhs354*clhs59;
        const double clhs382 =     scale_factor*(-clhs297 + clhs381);
        const double clhs383 =     clhs313*clhs6;
        const double clhs384 =     clhs318*clhs6;
        const double clhs385 =     clhs324*clhs6;
        const double clhs386 =     clhs329*clhs6;
        const double clhs387 =     clhs333*clhs6;
        const double clhs388 =     clhs337*clhs6;
        const double clhs389 =     clhs341*clhs6;
        const double clhs390 =     clhs345*clhs6;
        const double clhs391 =     1.0/penalty_parameter;
        const double clhs392 =     0.5*clhs391*std::pow(scale_factor, 2.0);
        const double clhs393 =     clhs392*(clhs232 + normalslave(0,0)*normalslave(0,1));
        const double clhs394 =     0.5*clhs240*clhs57*clhs61*mu[1];
        const double clhs395 =     clhs239*clhs65;
        const double clhs396 =     -clhs395;
        const double clhs397 =     1.0/clhs56;
        const double clhs398 =     clhs239*clhs397*clhs40*clhs76;
        const double clhs399 =     1.0/clhs60;
        const double clhs400 =     clhs399*clhs40*clhs79;
        const double clhs401 =     clhs310*clhs40 + clhs395*clhs400 + clhs396 + clhs398*clhs75;
        const double clhs402 =     0.5*clhs246*clhs57*clhs61*mu[1];
        const double clhs403 =     clhs239*clhs397*clhs59*clhs76;
        const double clhs404 =     clhs399*clhs59*clhs79;
        const double clhs405 =     clhs310*clhs59 + clhs395*clhs404 + clhs396 + clhs403*clhs75;
        const double clhs406 =     clhs239*clhs90;
        const double clhs407 =     -clhs406;
        const double clhs408 =     clhs100*clhs398 + clhs40*clhs86 + clhs400*clhs406 + clhs407;
        const double clhs409 =     clhs100*clhs403 + clhs404*clhs406 + clhs407 + clhs59*clhs86;
        const double clhs410 =     clhs113*clhs239;
        const double clhs411 =     -clhs410;
        const double clhs412 =     clhs123*clhs398 + clhs322*clhs40 + clhs400*clhs410 + clhs411;
        const double clhs413 =     clhs123*clhs403 + clhs322*clhs59 + clhs404*clhs410 + clhs411;
        const double clhs414 =     clhs134*clhs239;
        const double clhs415 =     -clhs414;
        const double clhs416 =     clhs130*clhs40 + clhs144*clhs398 + clhs400*clhs414 + clhs415;
        const double clhs417 =     clhs130*clhs59 + clhs144*clhs403 + clhs404*clhs414 + clhs415;
        const double clhs418 =     clhs155*clhs239;
        const double clhs419 =     -clhs418;
        const double clhs420 =     clhs151*clhs40 + clhs165*clhs398 + clhs400*clhs418 + clhs419;
        const double clhs421 =     clhs151*clhs59 + clhs165*clhs403 + clhs404*clhs418 + clhs419;
        const double clhs422 =     clhs176*clhs239;
        const double clhs423 =     -clhs422;
        const double clhs424 =     clhs172*clhs40 + clhs186*clhs398 + clhs400*clhs422 + clhs423;
        const double clhs425 =     clhs172*clhs59 + clhs186*clhs403 + clhs404*clhs422 + clhs423;
        const double clhs426 =     clhs197*clhs239;
        const double clhs427 =     -clhs426;
        const double clhs428 =     clhs193*clhs40 + clhs207*clhs398 + clhs400*clhs426 + clhs427;
        const double clhs429 =     clhs193*clhs59 + clhs207*clhs403 + clhs404*clhs426 + clhs427;
        const double clhs430 =     clhs218*clhs239;
        const double clhs431 =     -clhs430;
        const double clhs432 =     clhs214*clhs40 + clhs228*clhs398 + clhs400*clhs430 + clhs431;
        const double clhs433 =     clhs214*clhs59 + clhs228*clhs403 + clhs404*clhs430 + clhs431;
        const double clhs434 =     std::pow(scale_factor, 2);
        const double clhs435 =     0.5*clhs233*clhs239*clhs391*clhs434*clhs61*clhs77*mu[1];
        const double clhs436 =     0.5*clhs236*clhs239*clhs391*clhs434*clhs61*clhs77*mu[1];
        const double clhs437 =     0.5*clhs391*clhs434;
        const double clhs438 =     clhs240 + clhs350;
        const double clhs439 =     clhs244 + clhs245 + clhs352;
        const double clhs440 =     clhs379 + clhs439;
        const double clhs441 =     clhs355 + clhs439;
        const double clhs442 =     clhs255 + clhs381;
        const double clhs443 =     0.5*clhs255*clhs57*clhs61*mu[1];
    
        lhs(0,0)=clhs0*clhs23 - clhs0*clhs68 - clhs0*clhs78 - clhs0*clhs81 - clhs1*clhs16 + clhs1*clhs62 + clhs67;
        lhs(0,1)=-clhs0*clhs101 - clhs0*clhs102 - clhs0*clhs87 + clhs0*clhs93 - clhs16*clhs82 + clhs62*clhs82 + clhs92;
        lhs(0,2)=clhs0*clhs110 - clhs0*clhs116 - clhs0*clhs124 - clhs0*clhs125 - clhs103*clhs16 + clhs103*clhs62 + clhs115;
        lhs(0,3)=-clhs0*clhs131 + clhs0*clhs137 - clhs0*clhs145 - clhs0*clhs146 - clhs126*clhs16 + clhs126*clhs62 + clhs136;
        lhs(0,4)=-clhs0*clhs152 + clhs0*clhs158 - clhs0*clhs166 - clhs0*clhs167 - clhs147*clhs16 + clhs147*clhs62 + clhs157;
        lhs(0,5)=-clhs0*clhs173 + clhs0*clhs179 - clhs0*clhs187 - clhs0*clhs188 - clhs16*clhs168 + clhs168*clhs62 + clhs178;
        lhs(0,6)=-clhs0*clhs194 + clhs0*clhs200 - clhs0*clhs208 - clhs0*clhs209 - clhs16*clhs189 + clhs189*clhs62 + clhs199;
        lhs(0,7)=-clhs0*clhs215 + clhs0*clhs221 - clhs0*clhs229 - clhs0*clhs230 - clhs16*clhs210 + clhs210*clhs62 + clhs220;
        lhs(0,8)=-clhs0*clhs234;
        lhs(0,9)=-clhs0*clhs237;
        lhs(0,10)=clhs0*clhs249;
        lhs(0,11)=clhs0*clhs258;
        lhs(1,0)=clhs0*clhs260 - clhs0*clhs262 - clhs0*clhs263 - clhs0*clhs264 - clhs1*clhs259 + clhs1*clhs261 + clhs67;
        lhs(1,1)=-clhs0*clhs265 + clhs0*clhs266 - clhs0*clhs267 - clhs0*clhs268 - clhs259*clhs82 + clhs261*clhs82 + clhs92;
        lhs(1,2)=clhs0*clhs269 - clhs0*clhs270 - clhs0*clhs271 - clhs0*clhs272 - clhs103*clhs259 + clhs103*clhs261 + clhs115;
        lhs(1,3)=-clhs0*clhs273 + clhs0*clhs274 - clhs0*clhs275 - clhs0*clhs276 - clhs126*clhs259 + clhs126*clhs261 + clhs136;
        lhs(1,4)=-clhs0*clhs277 + clhs0*clhs278 - clhs0*clhs279 - clhs0*clhs280 - clhs147*clhs259 + clhs147*clhs261 + clhs157;
        lhs(1,5)=-clhs0*clhs281 + clhs0*clhs282 - clhs0*clhs283 - clhs0*clhs284 - clhs168*clhs259 + clhs168*clhs261 + clhs178;
        lhs(1,6)=-clhs0*clhs285 + clhs0*clhs286 - clhs0*clhs287 - clhs0*clhs288 - clhs189*clhs259 + clhs189*clhs261 + clhs199;
        lhs(1,7)=-clhs0*clhs289 + clhs0*clhs290 - clhs0*clhs291 - clhs0*clhs292 - clhs210*clhs259 + clhs210*clhs261 + clhs220;
        lhs(1,8)=-clhs0*clhs293;
        lhs(1,9)=-clhs0*clhs294;
        lhs(1,10)=clhs0*clhs296;
        lhs(1,11)=clhs0*clhs300;
        lhs(2,0)=-clhs16*clhs19 + clhs19*clhs62 + clhs23*clhs9 + clhs301 - clhs68*clhs9 - clhs78*clhs9 - clhs81*clhs9;
        lhs(2,1)=-clhs101*clhs9 - clhs102*clhs9 - clhs16*clhs85 + clhs302 + clhs62*clhs85 - clhs87*clhs9 + clhs9*clhs93;
        lhs(2,2)=-clhs106*clhs16 + clhs106*clhs62 + clhs110*clhs9 - clhs116*clhs9 - clhs124*clhs9 - clhs125*clhs9 + clhs303;
        lhs(2,3)=-clhs129*clhs16 + clhs129*clhs62 - clhs131*clhs9 + clhs137*clhs9 - clhs145*clhs9 - clhs146*clhs9 + clhs304;
        lhs(2,4)=-clhs150*clhs16 + clhs150*clhs62 - clhs152*clhs9 + clhs158*clhs9 - clhs166*clhs9 - clhs167*clhs9 + clhs305;
        lhs(2,5)=-clhs16*clhs171 + clhs171*clhs62 - clhs173*clhs9 + clhs179*clhs9 - clhs187*clhs9 - clhs188*clhs9 + clhs306;
        lhs(2,6)=-clhs16*clhs192 + clhs192*clhs62 - clhs194*clhs9 + clhs200*clhs9 - clhs208*clhs9 - clhs209*clhs9 + clhs307;
        lhs(2,7)=-clhs16*clhs213 + clhs213*clhs62 - clhs215*clhs9 + clhs221*clhs9 - clhs229*clhs9 - clhs230*clhs9 + clhs308;
        lhs(2,8)=-clhs234*clhs9;
        lhs(2,9)=-clhs237*clhs9;
        lhs(2,10)=clhs249*clhs9;
        lhs(2,11)=clhs258*clhs9;
        lhs(3,0)=-clhs19*clhs259 + clhs19*clhs261 + clhs260*clhs9 - clhs262*clhs9 - clhs263*clhs9 - clhs264*clhs9 + clhs301;
        lhs(3,1)=-clhs259*clhs85 + clhs261*clhs85 - clhs265*clhs9 + clhs266*clhs9 - clhs267*clhs9 - clhs268*clhs9 + clhs302;
        lhs(3,2)=-clhs106*clhs259 + clhs106*clhs261 + clhs269*clhs9 - clhs270*clhs9 - clhs271*clhs9 - clhs272*clhs9 + clhs303;
        lhs(3,3)=-clhs129*clhs259 + clhs129*clhs261 - clhs273*clhs9 + clhs274*clhs9 - clhs275*clhs9 - clhs276*clhs9 + clhs304;
        lhs(3,4)=-clhs150*clhs259 + clhs150*clhs261 - clhs277*clhs9 + clhs278*clhs9 - clhs279*clhs9 - clhs280*clhs9 + clhs305;
        lhs(3,5)=-clhs171*clhs259 + clhs171*clhs261 - clhs281*clhs9 + clhs282*clhs9 - clhs283*clhs9 - clhs284*clhs9 + clhs306;
        lhs(3,6)=-clhs192*clhs259 + clhs192*clhs261 - clhs285*clhs9 + clhs286*clhs9 - clhs287*clhs9 - clhs288*clhs9 + clhs307;
        lhs(3,7)=-clhs213*clhs259 + clhs213*clhs261 - clhs289*clhs9 + clhs290*clhs9 - clhs291*clhs9 - clhs292*clhs9 + clhs308;
        lhs(3,8)=-clhs293*clhs9;
        lhs(3,9)=-clhs294*clhs9;
        lhs(3,10)=clhs296*clhs9;
        lhs(3,11)=clhs300*clhs9;
        lhs(4,0)=-clhs17*clhs309 + clhs17*clhs312 + clhs311*clhs4 + clhs314 - clhs315*clhs4 - clhs316*clhs4 - clhs317*clhs4;
        lhs(4,1)=-clhs309*clhs83 + clhs312*clhs83 + clhs319 - clhs320*clhs4 - clhs321*clhs4 + clhs4*clhs87 - clhs4*clhs93;
        lhs(4,2)=-clhs104*clhs309 + clhs104*clhs312 + clhs323*clhs4 + clhs325 - clhs326*clhs4 - clhs327*clhs4 - clhs328*clhs4;
        lhs(4,3)=-clhs127*clhs309 + clhs127*clhs312 + clhs131*clhs4 - clhs137*clhs4 + clhs330 - clhs331*clhs4 - clhs332*clhs4;
        lhs(4,4)=-clhs148*clhs309 + clhs148*clhs312 + clhs152*clhs4 - clhs158*clhs4 + clhs334 - clhs335*clhs4 - clhs336*clhs4;
        lhs(4,5)=-clhs169*clhs309 + clhs169*clhs312 + clhs173*clhs4 - clhs179*clhs4 + clhs338 - clhs339*clhs4 - clhs340*clhs4;
        lhs(4,6)=-clhs190*clhs309 + clhs190*clhs312 + clhs194*clhs4 - clhs200*clhs4 + clhs342 - clhs343*clhs4 - clhs344*clhs4;
        lhs(4,7)=-clhs211*clhs309 + clhs211*clhs312 + clhs215*clhs4 - clhs221*clhs4 + clhs346 - clhs347*clhs4 - clhs348*clhs4;
        lhs(4,8)=clhs234*clhs4;
        lhs(4,9)=clhs237*clhs4;
        lhs(4,10)=clhs351*clhs4;
        lhs(4,11)=clhs356*clhs4;
        lhs(5,0)=-clhs17*clhs357 + clhs17*clhs359 + clhs314 + clhs358*clhs4 - clhs360*clhs4 - clhs361*clhs4 - clhs362*clhs4;
        lhs(5,1)=clhs265*clhs4 - clhs266*clhs4 + clhs319 - clhs357*clhs83 + clhs359*clhs83 - clhs363*clhs4 - clhs364*clhs4;
        lhs(5,2)=-clhs104*clhs357 + clhs104*clhs359 + clhs325 + clhs365*clhs4 - clhs366*clhs4 - clhs367*clhs4 - clhs368*clhs4;
        lhs(5,3)=-clhs127*clhs357 + clhs127*clhs359 + clhs273*clhs4 - clhs274*clhs4 + clhs330 - clhs369*clhs4 - clhs370*clhs4;
        lhs(5,4)=-clhs148*clhs357 + clhs148*clhs359 + clhs277*clhs4 - clhs278*clhs4 + clhs334 - clhs371*clhs4 - clhs372*clhs4;
        lhs(5,5)=-clhs169*clhs357 + clhs169*clhs359 + clhs281*clhs4 - clhs282*clhs4 + clhs338 - clhs373*clhs4 - clhs374*clhs4;
        lhs(5,6)=-clhs190*clhs357 + clhs190*clhs359 + clhs285*clhs4 - clhs286*clhs4 + clhs342 - clhs375*clhs4 - clhs376*clhs4;
        lhs(5,7)=-clhs211*clhs357 + clhs211*clhs359 + clhs289*clhs4 - clhs290*clhs4 + clhs346 - clhs377*clhs4 - clhs378*clhs4;
        lhs(5,8)=clhs293*clhs4;
        lhs(5,9)=clhs294*clhs4;
        lhs(5,10)=clhs380*clhs4;
        lhs(5,11)=clhs382*clhs4;
        lhs(6,0)=-clhs18*clhs309 + clhs18*clhs312 + clhs311*clhs6 - clhs315*clhs6 - clhs316*clhs6 - clhs317*clhs6 + clhs383;
        lhs(6,1)=-clhs309*clhs84 + clhs312*clhs84 - clhs320*clhs6 - clhs321*clhs6 + clhs384 + clhs6*clhs87 - clhs6*clhs93;
        lhs(6,2)=-clhs105*clhs309 + clhs105*clhs312 + clhs323*clhs6 - clhs326*clhs6 - clhs327*clhs6 - clhs328*clhs6 + clhs385;
        lhs(6,3)=-clhs128*clhs309 + clhs128*clhs312 + clhs131*clhs6 - clhs137*clhs6 - clhs331*clhs6 - clhs332*clhs6 + clhs386;
        lhs(6,4)=-clhs149*clhs309 + clhs149*clhs312 + clhs152*clhs6 - clhs158*clhs6 - clhs335*clhs6 - clhs336*clhs6 + clhs387;
        lhs(6,5)=-clhs170*clhs309 + clhs170*clhs312 + clhs173*clhs6 - clhs179*clhs6 - clhs339*clhs6 - clhs340*clhs6 + clhs388;
        lhs(6,6)=-clhs191*clhs309 + clhs191*clhs312 + clhs194*clhs6 - clhs200*clhs6 - clhs343*clhs6 - clhs344*clhs6 + clhs389;
        lhs(6,7)=-clhs212*clhs309 + clhs212*clhs312 + clhs215*clhs6 - clhs221*clhs6 - clhs347*clhs6 - clhs348*clhs6 + clhs390;
        lhs(6,8)=clhs234*clhs6;
        lhs(6,9)=clhs237*clhs6;
        lhs(6,10)=clhs351*clhs6;
        lhs(6,11)=clhs356*clhs6;
        lhs(7,0)=-clhs18*clhs357 + clhs18*clhs359 + clhs358*clhs6 - clhs360*clhs6 - clhs361*clhs6 - clhs362*clhs6 + clhs383;
        lhs(7,1)=clhs265*clhs6 - clhs266*clhs6 - clhs357*clhs84 + clhs359*clhs84 - clhs363*clhs6 - clhs364*clhs6 + clhs384;
        lhs(7,2)=-clhs105*clhs357 + clhs105*clhs359 + clhs365*clhs6 - clhs366*clhs6 - clhs367*clhs6 - clhs368*clhs6 + clhs385;
        lhs(7,3)=-clhs128*clhs357 + clhs128*clhs359 + clhs273*clhs6 - clhs274*clhs6 - clhs369*clhs6 - clhs370*clhs6 + clhs386;
        lhs(7,4)=-clhs149*clhs357 + clhs149*clhs359 + clhs277*clhs6 - clhs278*clhs6 - clhs371*clhs6 - clhs372*clhs6 + clhs387;
        lhs(7,5)=-clhs170*clhs357 + clhs170*clhs359 + clhs281*clhs6 - clhs282*clhs6 - clhs373*clhs6 - clhs374*clhs6 + clhs388;
        lhs(7,6)=-clhs191*clhs357 + clhs191*clhs359 + clhs285*clhs6 - clhs286*clhs6 - clhs375*clhs6 - clhs376*clhs6 + clhs389;
        lhs(7,7)=-clhs212*clhs357 + clhs212*clhs359 + clhs289*clhs6 - clhs290*clhs6 - clhs377*clhs6 - clhs378*clhs6 + clhs390;
        lhs(7,8)=clhs293*clhs6;
        lhs(7,9)=clhs294*clhs6;
        lhs(7,10)=clhs380*clhs6;
        lhs(7,11)=clhs382*clhs6;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs392*(clhs231 + std::pow(normalslave(0,0), 2));
        lhs(8,9)=clhs393;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs393;
        lhs(9,9)=clhs392*(clhs235 + std::pow(normalslave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=-scale_factor*(clhs22*normalslave(1,0) + clhs394*clhs401 + clhs402*clhs405);
        lhs(10,1)=scale_factor*(-clhs394*clhs408 - clhs402*clhs409 + clhs86*normalslave(1,0));
        lhs(10,2)=-scale_factor*(clhs109*normalslave(1,0) + clhs394*clhs412 + clhs402*clhs413);
        lhs(10,3)=scale_factor*(clhs130*normalslave(1,0) - clhs394*clhs416 - clhs402*clhs417);
        lhs(10,4)=scale_factor*(clhs151*normalslave(1,0) - clhs394*clhs420 - clhs402*clhs421);
        lhs(10,5)=scale_factor*(clhs172*normalslave(1,0) - clhs394*clhs424 - clhs402*clhs425);
        lhs(10,6)=scale_factor*(clhs193*normalslave(1,0) - clhs394*clhs428 - clhs402*clhs429);
        lhs(10,7)=scale_factor*(clhs214*normalslave(1,0) - clhs394*clhs432 - clhs402*clhs433);
        lhs(10,8)=-clhs247*clhs435;
        lhs(10,9)=-clhs247*clhs436;
        lhs(10,10)=clhs437*(clhs240*clhs438 + clhs246*clhs440);
        lhs(10,11)=clhs437*(clhs240*clhs441 + clhs246*clhs442);
        lhs(11,0)=-scale_factor*(clhs22*normalslave(1,1) + clhs401*clhs402 + clhs405*clhs443);
        lhs(11,1)=scale_factor*(-clhs402*clhs408 - clhs409*clhs443 + clhs86*normalslave(1,1));
        lhs(11,2)=-scale_factor*(clhs109*normalslave(1,1) + clhs402*clhs412 + clhs413*clhs443);
        lhs(11,3)=scale_factor*(clhs130*normalslave(1,1) - clhs402*clhs416 - clhs417*clhs443);
        lhs(11,4)=scale_factor*(clhs151*normalslave(1,1) - clhs402*clhs420 - clhs421*clhs443);
        lhs(11,5)=scale_factor*(clhs172*normalslave(1,1) - clhs402*clhs424 - clhs425*clhs443);
        lhs(11,6)=scale_factor*(clhs193*normalslave(1,1) - clhs402*clhs428 - clhs429*clhs443);
        lhs(11,7)=scale_factor*(clhs214*normalslave(1,1) - clhs402*clhs432 - clhs433*clhs443);
        lhs(11,8)=-clhs256*clhs435;
        lhs(11,9)=-clhs256*clhs436;
        lhs(11,10)=clhs437*(clhs246*clhs438 + clhs255*clhs440);
        lhs(11,11)=clhs437*(clhs246*clhs441 + clhs255*clhs442);
    }
    else if (rActiveInactive == 4 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs2 =     X1(0,0) + u1(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2(0,0);
        const double clhs7 =     X2(1,0) + u2(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     X1(0,1) + u1(0,1);
        const double clhs10 =     X1(1,1) + u1(1,1);
        const double clhs11 =     X2(0,1) + u2(0,1);
        const double clhs12 =     X2(1,1) + u2(1,1);
        const double clhs13 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8) + normalslave(0,1)*(-clhs0*clhs11 + clhs10*clhs5 - clhs12*clhs8 + clhs3*clhs9));
        const double clhs14 =     -clhs1 + clhs13;
        const double clhs15 =     X1(0,0) + u1old(0,0);
        const double clhs16 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs17 =     X1(1,0) + u1old(1,0);
        const double clhs18 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     X2(0,0) + u2old(0,0);
        const double clhs20 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs21 =     X2(1,0) + u2old(1,0);
        const double clhs22 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs23 =     clhs15*clhs16 + clhs17*clhs18 - clhs19*clhs20 - clhs21*clhs22;
        const double clhs24 =     X1(0,1) + u1old(0,1);
        const double clhs25 =     X1(1,1) + u1old(1,1);
        const double clhs26 =     X2(0,1) + u2old(0,1);
        const double clhs27 =     X2(1,1) + u2old(1,1);
        const double clhs28 =     clhs16*clhs24 + clhs18*clhs25 - clhs20*clhs26 - clhs22*clhs27;
        const double clhs29 =     clhs23*tangentetaslave(0,0) + clhs23*tangentxislave(0,0) + clhs28*tangentetaslave(0,1) + clhs28*tangentxislave(0,1);
        const double clhs30 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs31 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs32 =     scale_factor*(clhs30*tangentetaslave(0,0) + clhs31*tangentxislave(0,0));
        const double clhs33 =     -clhs0*clhs19 + clhs15*clhs3 + clhs17*clhs5 - clhs21*clhs8;
        const double clhs34 =     -clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8;
        const double clhs35 =     penalty_parameter*(clhs33*tangentetaslave(0,0) + clhs34*tangentetaslave(0,1));
        const double clhs36 =     penalty_parameter*(clhs33*tangentxislave(0,0) + clhs34*tangentxislave(0,1));
        const double clhs37 =     clhs35 + clhs36;
        const double clhs38 =     clhs32 + clhs37;
        const double clhs39 =     scale_factor*(clhs30*tangentetaslave(0,1) + clhs31*tangentxislave(0,1));
        const double clhs40 =     clhs37 + clhs39;
        const double clhs41 =     std::pow(clhs38, 2) + std::pow(clhs40, 2);
        const double clhs42 =     std::pow(clhs41, -1.0L/2.0L);
        const double clhs43 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs44 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs45 =     scale_factor*(clhs43*tangentetaslave(1,0) + clhs44*tangentxislave(1,0));
        const double clhs46 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs47 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs48 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs49 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs50 =     clhs15*clhs46 + clhs17*clhs47 - clhs19*clhs48 - clhs21*clhs49;
        const double clhs51 =     clhs24*clhs46 + clhs25*clhs47 - clhs26*clhs48 - clhs27*clhs49;
        const double clhs52 =     penalty_parameter*(clhs50*tangentetaslave(1,0) + clhs51*tangentetaslave(1,1));
        const double clhs53 =     penalty_parameter*(clhs50*tangentxislave(1,0) + clhs51*tangentxislave(1,1));
        const double clhs54 =     clhs52 + clhs53;
        const double clhs55 =     clhs45 + clhs54;
        const double clhs56 =     scale_factor*(clhs43*tangentetaslave(1,1) + clhs44*tangentxislave(1,1));
        const double clhs57 =     clhs54 + clhs56;
        const double clhs58 =     std::pow(clhs55, 2) + std::pow(clhs57, 2);
        const double clhs59 =     std::pow(clhs58, -1.0L/2.0L);
        const double clhs60 =     clhs14*clhs29*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs61 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs62 =     penalty_parameter*(normalslave(1,0)*(clhs2*clhs46 + clhs4*clhs47 - clhs48*clhs6 - clhs49*clhs7) + normalslave(1,1)*(clhs10*clhs47 - clhs11*clhs48 - clhs12*clhs49 + clhs46*clhs9));
        const double clhs63 =     -clhs61 + clhs62;
        const double clhs64 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs65 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs66 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs67 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs68 =     clhs15*clhs64 + clhs17*clhs65 - clhs19*clhs66 - clhs21*clhs67;
        const double clhs69 =     clhs24*clhs64 + clhs25*clhs65 - clhs26*clhs66 - clhs27*clhs67;
        const double clhs70 =     clhs68*tangentetaslave(1,0) + clhs68*tangentxislave(1,0) + clhs69*tangentetaslave(1,1) + clhs69*tangentxislave(1,1);
        const double clhs71 =     clhs42*clhs59*clhs63*clhs70*mu[1]*penalty_parameter;
        const double clhs72 =     clhs0*clhs60 + clhs48*clhs71;
        const double clhs73 =     clhs14*normalslave(0,0);
        const double clhs74 =     clhs63*normalslave(1,0);
        const double clhs75 =     normalslave(0,1)*(clhs10*clhs18 - clhs11*clhs20 - clhs12*clhs22 + clhs16*clhs9);
        const double clhs76 =     normalslave(0,0)*(clhs0 - clhs16*clhs2 - clhs18*clhs4 + clhs20*clhs6 + clhs22*clhs7);
        const double clhs77 =     -clhs75 + clhs76;
        const double clhs78 =     clhs77*normalslave(0,0)*penalty_parameter;
        const double clhs79 =     normalslave(1,1)*(clhs10*clhs65 - clhs11*clhs66 - clhs12*clhs67 + clhs64*clhs9);
        const double clhs80 =     normalslave(1,0)*(-clhs2*clhs64 - clhs4*clhs65 + clhs48 + clhs6*clhs66 + clhs67*clhs7);
        const double clhs81 =     -clhs79 + clhs80;
        const double clhs82 =     clhs81*normalslave(1,0)*penalty_parameter;
        const double clhs83 =     clhs14*clhs38*clhs42*clhs59*mu[0];
        const double clhs84 =     clhs42*clhs55*clhs59*clhs63*mu[1];
        const double clhs85 =     clhs38*clhs42*clhs59*clhs77*mu[0]*penalty_parameter;
        const double clhs86 =     clhs42*clhs55*clhs59*clhs81*mu[1]*penalty_parameter;
        const double clhs87 =     clhs32 + 2*clhs35 + 2*clhs36 + clhs39;
        const double clhs88 =     std::pow(clhs41, -3.0L/2.0L);
        const double clhs89 =     clhs14*clhs29*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs90 =     clhs45 + 2*clhs52 + 2*clhs53 + clhs56;
        const double clhs91 =     std::pow(clhs58, -3.0L/2.0L);
        const double clhs92 =     clhs14*clhs38*clhs42*clhs70*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs93 =     clhs29*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs94 =     clhs42*clhs55*clhs63*clhs70*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs95 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs96 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs97 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs98 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs99 =     clhs15*clhs95 + clhs17*clhs96 - clhs19*clhs97 - clhs21*clhs98;
        const double clhs100 =     clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs97 - clhs27*clhs98;
        const double clhs101 =     clhs100*tangentetaslave(0,1) + clhs100*tangentxislave(0,1) + clhs99*tangentetaslave(0,0) + clhs99*tangentxislave(0,0);
        const double clhs102 =     clhs101*clhs14*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs103 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs104 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs105 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs106 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs107 =     clhs103*clhs15 + clhs104*clhs17 - clhs105*clhs19 - clhs106*clhs21;
        const double clhs108 =     clhs103*clhs24 + clhs104*clhs25 - clhs105*clhs26 - clhs106*clhs27;
        const double clhs109 =     clhs107*tangentetaslave(1,0) + clhs107*tangentxislave(1,0) + clhs108*tangentetaslave(1,1) + clhs108*tangentxislave(1,1);
        const double clhs110 =     clhs109*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs111 =     clhs0*clhs102 + clhs110*clhs48;
        const double clhs112 =     normalslave(0,0)*(clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs97 - clhs7*clhs98) - normalslave(0,1)*(clhs0 - clhs10*clhs96 + clhs11*clhs97 + clhs12*clhs98 - clhs9*clhs95);
        const double clhs113 =     clhs112*normalslave(0,0)*penalty_parameter;
        const double clhs114 =     normalslave(1,0)*(clhs103*clhs2 + clhs104*clhs4 - clhs105*clhs6 - clhs106*clhs7) - normalslave(1,1)*(-clhs10*clhs104 - clhs103*clhs9 + clhs105*clhs11 + clhs106*clhs12 + clhs48);
        const double clhs115 =     clhs114*normalslave(1,0)*penalty_parameter;
        const double clhs116 =     clhs112*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs117 =     clhs114*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs118 =     clhs101*clhs14*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs119 =     clhs109*clhs14*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs120 =     clhs101*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs121 =     clhs109*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs122 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs123 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs124 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs125 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs126 =     clhs122*clhs15 + clhs123*clhs17 - clhs124*clhs19 - clhs125*clhs21;
        const double clhs127 =     clhs122*clhs24 + clhs123*clhs25 - clhs124*clhs26 - clhs125*clhs27;
        const double clhs128 =     clhs126*tangentetaslave(0,0) + clhs126*tangentxislave(0,0) + clhs127*tangentetaslave(0,1) + clhs127*tangentxislave(0,1);
        const double clhs129 =     clhs128*clhs14*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs130 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs131 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs132 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs133 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs134 =     clhs130*clhs15 + clhs131*clhs17 - clhs132*clhs19 - clhs133*clhs21;
        const double clhs135 =     clhs130*clhs24 + clhs131*clhs25 - clhs132*clhs26 - clhs133*clhs27;
        const double clhs136 =     clhs134*tangentetaslave(1,0) + clhs134*tangentxislave(1,0) + clhs135*tangentetaslave(1,1) + clhs135*tangentxislave(1,1);
        const double clhs137 =     clhs136*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs138 =     clhs0*clhs129 + clhs137*clhs48;
        const double clhs139 =     normalslave(0,1)*(clhs10*clhs123 - clhs11*clhs124 - clhs12*clhs125 + clhs122*clhs9);
        const double clhs140 =     normalslave(0,0)*(-clhs122*clhs2 - clhs123*clhs4 + clhs124*clhs6 + clhs125*clhs7 + clhs8);
        const double clhs141 =     -clhs139 + clhs140;
        const double clhs142 =     clhs141*normalslave(0,0)*penalty_parameter;
        const double clhs143 =     normalslave(1,1)*(clhs10*clhs131 - clhs11*clhs132 - clhs12*clhs133 + clhs130*clhs9);
        const double clhs144 =     normalslave(1,0)*(-clhs130*clhs2 - clhs131*clhs4 + clhs132*clhs6 + clhs133*clhs7 + clhs49);
        const double clhs145 =     -clhs143 + clhs144;
        const double clhs146 =     clhs145*normalslave(1,0)*penalty_parameter;
        const double clhs147 =     clhs141*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs148 =     clhs145*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs149 =     clhs128*clhs14*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs150 =     clhs136*clhs14*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs151 =     clhs128*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs152 =     clhs136*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs153 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs154 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs155 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs156 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs157 =     clhs15*clhs153 + clhs154*clhs17 - clhs155*clhs19 - clhs156*clhs21;
        const double clhs158 =     clhs153*clhs24 + clhs154*clhs25 - clhs155*clhs26 - clhs156*clhs27;
        const double clhs159 =     clhs157*tangentetaslave(0,0) + clhs157*tangentxislave(0,0) + clhs158*tangentetaslave(0,1) + clhs158*tangentxislave(0,1);
        const double clhs160 =     clhs14*clhs159*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs161 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs162 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs163 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs164 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs165 =     clhs15*clhs161 + clhs162*clhs17 - clhs163*clhs19 - clhs164*clhs21;
        const double clhs166 =     clhs161*clhs24 + clhs162*clhs25 - clhs163*clhs26 - clhs164*clhs27;
        const double clhs167 =     clhs165*tangentetaslave(1,0) + clhs165*tangentxislave(1,0) + clhs166*tangentetaslave(1,1) + clhs166*tangentxislave(1,1);
        const double clhs168 =     clhs167*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs169 =     clhs0*clhs160 + clhs168*clhs48;
        const double clhs170 =     normalslave(0,0)*(clhs153*clhs2 + clhs154*clhs4 - clhs155*clhs6 - clhs156*clhs7) - normalslave(0,1)*(-clhs10*clhs154 + clhs11*clhs155 + clhs12*clhs156 - clhs153*clhs9 + clhs8);
        const double clhs171 =     clhs170*normalslave(0,0)*penalty_parameter;
        const double clhs172 =     normalslave(1,0)*(clhs161*clhs2 + clhs162*clhs4 - clhs163*clhs6 - clhs164*clhs7) - normalslave(1,1)*(-clhs10*clhs162 + clhs11*clhs163 + clhs12*clhs164 - clhs161*clhs9 + clhs49);
        const double clhs173 =     clhs172*normalslave(1,0)*penalty_parameter;
        const double clhs174 =     clhs170*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs175 =     clhs172*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs176 =     clhs14*clhs159*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs177 =     clhs14*clhs167*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs178 =     clhs159*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs179 =     clhs167*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs180 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs181 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs182 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs183 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs184 =     clhs15*clhs180 + clhs17*clhs181 - clhs182*clhs19 - clhs183*clhs21;
        const double clhs185 =     clhs180*clhs24 + clhs181*clhs25 - clhs182*clhs26 - clhs183*clhs27;
        const double clhs186 =     clhs184*tangentetaslave(0,0) + clhs184*tangentxislave(0,0) + clhs185*tangentetaslave(0,1) + clhs185*tangentxislave(0,1);
        const double clhs187 =     clhs14*clhs186*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs188 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs189 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs190 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs191 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs192 =     clhs15*clhs188 + clhs17*clhs189 - clhs19*clhs190 - clhs191*clhs21;
        const double clhs193 =     clhs188*clhs24 + clhs189*clhs25 - clhs190*clhs26 - clhs191*clhs27;
        const double clhs194 =     clhs192*tangentetaslave(1,0) + clhs192*tangentxislave(1,0) + clhs193*tangentetaslave(1,1) + clhs193*tangentxislave(1,1);
        const double clhs195 =     clhs194*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs196 =     clhs0*clhs187 + clhs195*clhs48;
        const double clhs197 =     normalslave(0,0)*(clhs180*clhs2 + clhs181*clhs4 - clhs182*clhs6 - clhs183*clhs7 + clhs3) + normalslave(0,1)*(clhs10*clhs181 - clhs11*clhs182 - clhs12*clhs183 + clhs180*clhs9);
        const double clhs198 =     clhs197*normalslave(0,0)*penalty_parameter;
        const double clhs199 =     normalslave(1,0)*(clhs188*clhs2 + clhs189*clhs4 - clhs190*clhs6 - clhs191*clhs7 + clhs46) + normalslave(1,1)*(clhs10*clhs189 - clhs11*clhs190 - clhs12*clhs191 + clhs188*clhs9);
        const double clhs200 =     clhs199*normalslave(1,0)*penalty_parameter;
        const double clhs201 =     clhs197*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs202 =     clhs199*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs203 =     clhs14*clhs186*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs204 =     clhs14*clhs194*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs205 =     clhs186*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs206 =     clhs194*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs207 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs208 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs209 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs210 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs211 =     clhs15*clhs207 + clhs17*clhs208 - clhs19*clhs209 - clhs21*clhs210;
        const double clhs212 =     clhs207*clhs24 + clhs208*clhs25 - clhs209*clhs26 - clhs210*clhs27;
        const double clhs213 =     clhs211*tangentetaslave(0,0) + clhs211*tangentxislave(0,0) + clhs212*tangentetaslave(0,1) + clhs212*tangentxislave(0,1);
        const double clhs214 =     clhs14*clhs213*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs215 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs216 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs217 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs218 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs219 =     clhs15*clhs215 + clhs17*clhs216 - clhs19*clhs217 - clhs21*clhs218;
        const double clhs220 =     clhs215*clhs24 + clhs216*clhs25 - clhs217*clhs26 - clhs218*clhs27;
        const double clhs221 =     clhs219*tangentetaslave(1,0) + clhs219*tangentxislave(1,0) + clhs220*tangentetaslave(1,1) + clhs220*tangentxislave(1,1);
        const double clhs222 =     clhs221*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs223 =     clhs0*clhs214 + clhs222*clhs48;
        const double clhs224 =     normalslave(0,0)*(clhs2*clhs207 + clhs208*clhs4 - clhs209*clhs6 - clhs210*clhs7) + normalslave(0,1)*(clhs10*clhs208 - clhs11*clhs209 - clhs12*clhs210 + clhs207*clhs9 + clhs3);
        const double clhs225 =     clhs224*normalslave(0,0)*penalty_parameter;
        const double clhs226 =     normalslave(1,0)*(clhs2*clhs215 + clhs216*clhs4 - clhs217*clhs6 - clhs218*clhs7) + normalslave(1,1)*(clhs10*clhs216 - clhs11*clhs217 - clhs12*clhs218 + clhs215*clhs9 + clhs46);
        const double clhs227 =     clhs226*normalslave(1,0)*penalty_parameter;
        const double clhs228 =     clhs224*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs229 =     clhs226*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs230 =     clhs14*clhs213*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs231 =     clhs14*clhs221*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs232 =     clhs213*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs233 =     clhs221*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs234 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs235 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs236 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs237 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs238 =     clhs15*clhs234 + clhs17*clhs235 - clhs19*clhs236 - clhs21*clhs237;
        const double clhs239 =     clhs234*clhs24 + clhs235*clhs25 - clhs236*clhs26 - clhs237*clhs27;
        const double clhs240 =     clhs238*tangentetaslave(0,0) + clhs238*tangentxislave(0,0) + clhs239*tangentetaslave(0,1) + clhs239*tangentxislave(0,1);
        const double clhs241 =     clhs14*clhs240*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs242 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs243 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs244 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs245 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs246 =     clhs15*clhs242 + clhs17*clhs243 - clhs19*clhs244 - clhs21*clhs245;
        const double clhs247 =     clhs24*clhs242 + clhs243*clhs25 - clhs244*clhs26 - clhs245*clhs27;
        const double clhs248 =     clhs246*tangentetaslave(1,0) + clhs246*tangentxislave(1,0) + clhs247*tangentetaslave(1,1) + clhs247*tangentxislave(1,1);
        const double clhs249 =     clhs248*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs250 =     clhs0*clhs241 + clhs249*clhs48;
        const double clhs251 =     normalslave(0,0)*(clhs2*clhs234 + clhs235*clhs4 - clhs236*clhs6 - clhs237*clhs7 + clhs5) + normalslave(0,1)*(clhs10*clhs235 - clhs11*clhs236 - clhs12*clhs237 + clhs234*clhs9);
        const double clhs252 =     clhs251*normalslave(0,0)*penalty_parameter;
        const double clhs253 =     normalslave(1,0)*(clhs2*clhs242 + clhs243*clhs4 - clhs244*clhs6 - clhs245*clhs7 + clhs47) + normalslave(1,1)*(clhs10*clhs243 - clhs11*clhs244 - clhs12*clhs245 + clhs242*clhs9);
        const double clhs254 =     clhs253*normalslave(1,0)*penalty_parameter;
        const double clhs255 =     clhs251*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs256 =     clhs253*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs257 =     clhs14*clhs240*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs258 =     clhs14*clhs248*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs259 =     clhs240*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs260 =     clhs248*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs261 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs262 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs263 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs264 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs265 =     clhs15*clhs261 + clhs17*clhs262 - clhs19*clhs263 - clhs21*clhs264;
        const double clhs266 =     clhs24*clhs261 + clhs25*clhs262 - clhs26*clhs263 - clhs264*clhs27;
        const double clhs267 =     clhs265*tangentetaslave(0,0) + clhs265*tangentxislave(0,0) + clhs266*tangentetaslave(0,1) + clhs266*tangentxislave(0,1);
        const double clhs268 =     clhs14*clhs267*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs269 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs270 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs271 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs272 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs273 =     clhs15*clhs269 + clhs17*clhs270 - clhs19*clhs271 - clhs21*clhs272;
        const double clhs274 =     clhs24*clhs269 + clhs25*clhs270 - clhs26*clhs271 - clhs27*clhs272;
        const double clhs275 =     clhs273*tangentetaslave(1,0) + clhs273*tangentxislave(1,0) + clhs274*tangentetaslave(1,1) + clhs274*tangentxislave(1,1);
        const double clhs276 =     clhs275*clhs42*clhs59*clhs63*mu[1]*penalty_parameter;
        const double clhs277 =     clhs0*clhs268 + clhs276*clhs48;
        const double clhs278 =     normalslave(0,0)*(clhs2*clhs261 + clhs262*clhs4 - clhs263*clhs6 - clhs264*clhs7) + normalslave(0,1)*(clhs10*clhs262 - clhs11*clhs263 - clhs12*clhs264 + clhs261*clhs9 + clhs5);
        const double clhs279 =     clhs278*normalslave(0,0)*penalty_parameter;
        const double clhs280 =     normalslave(1,0)*(clhs2*clhs269 + clhs270*clhs4 - clhs271*clhs6 - clhs272*clhs7) + normalslave(1,1)*(clhs10*clhs270 - clhs11*clhs271 - clhs12*clhs272 + clhs269*clhs9 + clhs47);
        const double clhs281 =     clhs280*normalslave(1,0)*penalty_parameter;
        const double clhs282 =     clhs278*clhs38*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs283 =     clhs280*clhs42*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs284 =     clhs14*clhs267*clhs38*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs285 =     clhs14*clhs275*clhs38*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs286 =     clhs267*clhs55*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs287 =     clhs275*clhs42*clhs55*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs288 =     std::pow(normalslave(0,0), 2);
        const double clhs289 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs290 =     clhs14*clhs42*clhs59*mu[0];
        const double clhs291 =     clhs289*clhs290;
        const double clhs292 =     clhs42*clhs59*mu[0]*normalslave(0,0);
        const double clhs293 =     clhs292*clhs38;
        const double clhs294 =     tangentetaslave(0,0)*tangentetaslave(0,1);
        const double clhs295 =     tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs296 =     clhs294 + clhs295;
        const double clhs297 =     clhs289*clhs38 + clhs296*clhs40;
        const double clhs298 =     clhs14*clhs297*clhs59*clhs88*mu[0];
        const double clhs299 =     clhs298*clhs38;
        const double clhs300 =     clhs297*clhs55*clhs59*clhs63*clhs88*mu[1];
        const double clhs301 =     normalslave(0,0)*normalslave(0,1);
        const double clhs302 =     clhs290*clhs296;
        const double clhs303 =     clhs0*clhs301 + clhs0*clhs302;
        const double clhs304 =     clhs42*clhs59*mu[0]*normalslave(0,1);
        const double clhs305 =     clhs304*clhs38;
        const double clhs306 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs307 =     clhs296*clhs38 + clhs306*clhs40;
        const double clhs308 =     clhs14*clhs307*clhs59*clhs88*mu[0];
        const double clhs309 =     clhs308*clhs38;
        const double clhs310 =     clhs307*clhs55*clhs59*clhs63*clhs88*mu[1];
        const double clhs311 =     std::pow(normalslave(1,0), 2);
        const double clhs312 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs313 =     clhs42*clhs59*clhs63*mu[1];
        const double clhs314 =     clhs312*clhs313;
        const double clhs315 =     clhs42*clhs59*mu[1]*normalslave(1,0);
        const double clhs316 =     clhs315*clhs55;
        const double clhs317 =     tangentetaslave(1,0)*tangentetaslave(1,1);
        const double clhs318 =     tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs319 =     clhs317 + clhs318;
        const double clhs320 =     clhs312*clhs55 + clhs319*clhs57;
        const double clhs321 =     clhs14*clhs320*clhs38*clhs42*clhs91*mu[0];
        const double clhs322 =     clhs320*clhs42*clhs63*clhs91*mu[1];
        const double clhs323 =     clhs322*clhs55;
        const double clhs324 =     normalslave(1,0)*normalslave(1,1);
        const double clhs325 =     clhs313*clhs319;
        const double clhs326 =     clhs324*clhs48 + clhs325*clhs48;
        const double clhs327 =     clhs42*clhs59*mu[1]*normalslave(1,1);
        const double clhs328 =     clhs327*clhs55;
        const double clhs329 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs330 =     clhs319*clhs55 + clhs329*clhs57;
        const double clhs331 =     clhs14*clhs330*clhs38*clhs42*clhs91*mu[0];
        const double clhs332 =     clhs330*clhs42*clhs63*clhs91*mu[1];
        const double clhs333 =     clhs332*clhs55;
        const double clhs334 =     clhs14*normalslave(0,1);
        const double clhs335 =     clhs63*normalslave(1,1);
        const double clhs336 =     clhs77*normalslave(0,1)*penalty_parameter;
        const double clhs337 =     clhs81*normalslave(1,1)*penalty_parameter;
        const double clhs338 =     clhs14*clhs40*clhs42*clhs59*mu[0];
        const double clhs339 =     clhs42*clhs57*clhs59*clhs63*mu[1];
        const double clhs340 =     clhs40*clhs42*clhs59*clhs77*mu[0]*penalty_parameter;
        const double clhs341 =     clhs42*clhs57*clhs59*clhs81*mu[1]*penalty_parameter;
        const double clhs342 =     clhs14*clhs29*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs343 =     clhs14*clhs40*clhs42*clhs70*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs344 =     clhs29*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs345 =     clhs42*clhs57*clhs63*clhs70*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs346 =     clhs112*normalslave(0,1)*penalty_parameter;
        const double clhs347 =     clhs114*normalslave(1,1)*penalty_parameter;
        const double clhs348 =     clhs112*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs349 =     clhs114*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs350 =     clhs101*clhs14*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs351 =     clhs109*clhs14*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs352 =     clhs101*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs353 =     clhs109*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs354 =     clhs141*normalslave(0,1)*penalty_parameter;
        const double clhs355 =     clhs145*normalslave(1,1)*penalty_parameter;
        const double clhs356 =     clhs141*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs357 =     clhs145*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs358 =     clhs128*clhs14*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs359 =     clhs136*clhs14*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs360 =     clhs128*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs361 =     clhs136*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs362 =     clhs170*normalslave(0,1)*penalty_parameter;
        const double clhs363 =     clhs172*normalslave(1,1)*penalty_parameter;
        const double clhs364 =     clhs170*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs365 =     clhs172*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs366 =     clhs14*clhs159*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs367 =     clhs14*clhs167*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs368 =     clhs159*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs369 =     clhs167*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs370 =     clhs197*normalslave(0,1)*penalty_parameter;
        const double clhs371 =     clhs199*normalslave(1,1)*penalty_parameter;
        const double clhs372 =     clhs197*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs373 =     clhs199*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs374 =     clhs14*clhs186*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs375 =     clhs14*clhs194*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs376 =     clhs186*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs377 =     clhs194*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs378 =     clhs224*normalslave(0,1)*penalty_parameter;
        const double clhs379 =     clhs226*normalslave(1,1)*penalty_parameter;
        const double clhs380 =     clhs224*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs381 =     clhs226*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs382 =     clhs14*clhs213*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs383 =     clhs14*clhs221*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs384 =     clhs213*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs385 =     clhs221*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs386 =     clhs251*normalslave(0,1)*penalty_parameter;
        const double clhs387 =     clhs253*normalslave(1,1)*penalty_parameter;
        const double clhs388 =     clhs251*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs389 =     clhs253*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs390 =     clhs14*clhs240*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs391 =     clhs14*clhs248*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs392 =     clhs240*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs393 =     clhs248*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs394 =     clhs278*normalslave(0,1)*penalty_parameter;
        const double clhs395 =     clhs280*normalslave(1,1)*penalty_parameter;
        const double clhs396 =     clhs278*clhs40*clhs42*clhs59*mu[0]*penalty_parameter;
        const double clhs397 =     clhs280*clhs42*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs398 =     clhs14*clhs267*clhs40*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs399 =     clhs14*clhs275*clhs40*clhs42*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs400 =     clhs267*clhs57*clhs59*clhs63*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs401 =     clhs275*clhs42*clhs57*clhs63*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs402 =     clhs292*clhs40;
        const double clhs403 =     clhs298*clhs40;
        const double clhs404 =     clhs297*clhs57*clhs59*clhs63*clhs88*mu[1];
        const double clhs405 =     std::pow(normalslave(0,1), 2);
        const double clhs406 =     clhs290*clhs306;
        const double clhs407 =     clhs304*clhs40;
        const double clhs408 =     clhs308*clhs40;
        const double clhs409 =     clhs307*clhs57*clhs59*clhs63*clhs88*mu[1];
        const double clhs410 =     clhs315*clhs57;
        const double clhs411 =     clhs14*clhs320*clhs40*clhs42*clhs91*mu[0];
        const double clhs412 =     clhs322*clhs57;
        const double clhs413 =     std::pow(normalslave(1,1), 2);
        const double clhs414 =     clhs313*clhs329;
        const double clhs415 =     clhs327*clhs57;
        const double clhs416 =     clhs14*clhs330*clhs40*clhs42*clhs91*mu[0];
        const double clhs417 =     clhs332*clhs57;
        const double clhs418 =     clhs49*clhs71 + clhs60*clhs8;
        const double clhs419 =     clhs102*clhs8 + clhs110*clhs49;
        const double clhs420 =     clhs129*clhs8 + clhs137*clhs49;
        const double clhs421 =     clhs160*clhs8 + clhs168*clhs49;
        const double clhs422 =     clhs187*clhs8 + clhs195*clhs49;
        const double clhs423 =     clhs214*clhs8 + clhs222*clhs49;
        const double clhs424 =     clhs241*clhs8 + clhs249*clhs49;
        const double clhs425 =     clhs268*clhs8 + clhs276*clhs49;
        const double clhs426 =     clhs301*clhs8 + clhs302*clhs8;
        const double clhs427 =     clhs324*clhs49 + clhs325*clhs49;
        const double clhs428 =     clhs1 - clhs13;
        const double clhs429 =     clhs29*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs430 =     clhs61 - clhs62;
        const double clhs431 =     clhs42*clhs430*clhs59*clhs70*mu[1]*penalty_parameter;
        const double clhs432 =     clhs3*clhs429 + clhs431*clhs46;
        const double clhs433 =     clhs428*normalslave(0,0);
        const double clhs434 =     clhs430*normalslave(1,0);
        const double clhs435 =     clhs75 - clhs76;
        const double clhs436 =     clhs435*normalslave(0,0)*penalty_parameter;
        const double clhs437 =     clhs79 - clhs80;
        const double clhs438 =     clhs437*normalslave(1,0)*penalty_parameter;
        const double clhs439 =     clhs38*clhs42*clhs428*clhs59*mu[0];
        const double clhs440 =     clhs42*clhs430*clhs55*clhs59*mu[1];
        const double clhs441 =     clhs38*clhs42*clhs435*clhs59*mu[0]*penalty_parameter;
        const double clhs442 =     clhs42*clhs437*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs443 =     clhs29*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs444 =     clhs38*clhs42*clhs428*clhs70*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs445 =     clhs29*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs446 =     clhs42*clhs430*clhs55*clhs70*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs447 =     clhs101*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs448 =     clhs109*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs449 =     clhs3*clhs447 + clhs448*clhs46;
        const double clhs450 =     clhs101*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs451 =     clhs109*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs452 =     clhs101*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs453 =     clhs109*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs454 =     clhs128*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs455 =     clhs136*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs456 =     clhs3*clhs454 + clhs455*clhs46;
        const double clhs457 =     clhs139 - clhs140;
        const double clhs458 =     clhs457*normalslave(0,0)*penalty_parameter;
        const double clhs459 =     clhs143 - clhs144;
        const double clhs460 =     clhs459*normalslave(1,0)*penalty_parameter;
        const double clhs461 =     clhs38*clhs42*clhs457*clhs59*mu[0]*penalty_parameter;
        const double clhs462 =     clhs42*clhs459*clhs55*clhs59*mu[1]*penalty_parameter;
        const double clhs463 =     clhs128*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs464 =     clhs136*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs465 =     clhs128*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs466 =     clhs136*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs467 =     clhs159*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs468 =     clhs167*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs469 =     clhs3*clhs467 + clhs46*clhs468;
        const double clhs470 =     clhs159*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs471 =     clhs167*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs472 =     clhs159*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs473 =     clhs167*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs474 =     clhs186*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs475 =     clhs194*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs476 =     clhs3*clhs474 + clhs46*clhs475;
        const double clhs477 =     clhs186*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs478 =     clhs194*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs479 =     clhs186*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs480 =     clhs194*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs481 =     clhs213*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs482 =     clhs221*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs483 =     clhs3*clhs481 + clhs46*clhs482;
        const double clhs484 =     clhs213*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs485 =     clhs221*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs486 =     clhs213*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs487 =     clhs221*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs488 =     clhs240*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs489 =     clhs248*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs490 =     clhs3*clhs488 + clhs46*clhs489;
        const double clhs491 =     clhs240*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs492 =     clhs248*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs493 =     clhs240*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs494 =     clhs248*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs495 =     clhs267*clhs42*clhs428*clhs59*mu[0]*penalty_parameter;
        const double clhs496 =     clhs275*clhs42*clhs430*clhs59*mu[1]*penalty_parameter;
        const double clhs497 =     clhs3*clhs495 + clhs46*clhs496;
        const double clhs498 =     clhs267*clhs38*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs499 =     clhs275*clhs38*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs500 =     clhs267*clhs430*clhs55*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs501 =     clhs275*clhs42*clhs430*clhs55*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs502 =     clhs289*clhs42*clhs428*clhs59*mu[0];
        const double clhs503 =     clhs297*clhs38*clhs428*clhs59*clhs88*mu[0];
        const double clhs504 =     clhs297*clhs430*clhs55*clhs59*clhs88*mu[1];
        const double clhs505 =     clhs296*clhs42*clhs428*clhs59*mu[0];
        const double clhs506 =     -clhs3*clhs301 + clhs3*clhs505;
        const double clhs507 =     clhs307*clhs38*clhs428*clhs59*clhs88*mu[0];
        const double clhs508 =     clhs307*clhs430*clhs55*clhs59*clhs88*mu[1];
        const double clhs509 =     clhs312*clhs42*clhs430*clhs59*mu[1];
        const double clhs510 =     clhs320*clhs38*clhs42*clhs428*clhs91*mu[0];
        const double clhs511 =     clhs320*clhs42*clhs430*clhs55*clhs91*mu[1];
        const double clhs512 =     clhs319*clhs42*clhs430*clhs59*mu[1];
        const double clhs513 =     -clhs324*clhs46 + clhs46*clhs512;
        const double clhs514 =     clhs330*clhs38*clhs42*clhs428*clhs91*mu[0];
        const double clhs515 =     clhs330*clhs42*clhs430*clhs55*clhs91*mu[1];
        const double clhs516 =     clhs428*normalslave(0,1);
        const double clhs517 =     clhs430*normalslave(1,1);
        const double clhs518 =     clhs435*normalslave(0,1)*penalty_parameter;
        const double clhs519 =     clhs437*normalslave(1,1)*penalty_parameter;
        const double clhs520 =     clhs40*clhs42*clhs428*clhs59*mu[0];
        const double clhs521 =     clhs42*clhs430*clhs57*clhs59*mu[1];
        const double clhs522 =     clhs40*clhs42*clhs435*clhs59*mu[0]*penalty_parameter;
        const double clhs523 =     clhs42*clhs437*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs524 =     clhs29*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs525 =     clhs40*clhs42*clhs428*clhs70*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs526 =     clhs29*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs527 =     clhs42*clhs430*clhs57*clhs70*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs528 =     clhs101*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs529 =     clhs109*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs530 =     clhs101*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs531 =     clhs109*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs532 =     clhs457*normalslave(0,1)*penalty_parameter;
        const double clhs533 =     clhs459*normalslave(1,1)*penalty_parameter;
        const double clhs534 =     clhs40*clhs42*clhs457*clhs59*mu[0]*penalty_parameter;
        const double clhs535 =     clhs42*clhs459*clhs57*clhs59*mu[1]*penalty_parameter;
        const double clhs536 =     clhs128*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs537 =     clhs136*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs538 =     clhs128*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs539 =     clhs136*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs540 =     clhs159*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs541 =     clhs167*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs542 =     clhs159*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs543 =     clhs167*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs544 =     clhs186*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs545 =     clhs194*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs546 =     clhs186*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs547 =     clhs194*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs548 =     clhs213*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs549 =     clhs221*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs550 =     clhs213*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs551 =     clhs221*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs552 =     clhs240*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs553 =     clhs248*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs554 =     clhs240*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs555 =     clhs248*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs556 =     clhs267*clhs40*clhs428*clhs59*clhs87*clhs88*mu[0]*penalty_parameter;
        const double clhs557 =     clhs275*clhs40*clhs42*clhs428*clhs90*clhs91*mu[0]*penalty_parameter;
        const double clhs558 =     clhs267*clhs430*clhs57*clhs59*clhs87*clhs88*mu[1]*penalty_parameter;
        const double clhs559 =     clhs275*clhs42*clhs430*clhs57*clhs90*clhs91*mu[1]*penalty_parameter;
        const double clhs560 =     clhs297*clhs40*clhs428*clhs59*clhs88*mu[0];
        const double clhs561 =     clhs297*clhs430*clhs57*clhs59*clhs88*mu[1];
        const double clhs562 =     clhs306*clhs42*clhs428*clhs59*mu[0];
        const double clhs563 =     clhs307*clhs40*clhs428*clhs59*clhs88*mu[0];
        const double clhs564 =     clhs307*clhs430*clhs57*clhs59*clhs88*mu[1];
        const double clhs565 =     clhs320*clhs40*clhs42*clhs428*clhs91*mu[0];
        const double clhs566 =     clhs320*clhs42*clhs430*clhs57*clhs91*mu[1];
        const double clhs567 =     clhs329*clhs42*clhs430*clhs59*mu[1];
        const double clhs568 =     clhs330*clhs40*clhs42*clhs428*clhs91*mu[0];
        const double clhs569 =     clhs330*clhs42*clhs430*clhs57*clhs91*mu[1];
        const double clhs570 =     clhs429*clhs5 + clhs431*clhs47;
        const double clhs571 =     clhs447*clhs5 + clhs448*clhs47;
        const double clhs572 =     clhs454*clhs5 + clhs455*clhs47;
        const double clhs573 =     clhs467*clhs5 + clhs468*clhs47;
        const double clhs574 =     clhs47*clhs475 + clhs474*clhs5;
        const double clhs575 =     clhs47*clhs482 + clhs481*clhs5;
        const double clhs576 =     clhs47*clhs489 + clhs488*clhs5;
        const double clhs577 =     clhs47*clhs496 + clhs495*clhs5;
        const double clhs578 =     -clhs301*clhs5 + clhs5*clhs505;
        const double clhs579 =     -clhs324*clhs47 + clhs47*clhs512;
        const double clhs580 =     0.5*clhs289*clhs42*clhs59*mu[0];
        const double clhs581 =     clhs29*clhs428;
        const double clhs582 =     -clhs581;
        const double clhs583 =     1.0/clhs41;
        const double clhs584 =     clhs38*clhs583*clhs87;
        const double clhs585 =     1.0/clhs58;
        const double clhs586 =     clhs38*clhs428*clhs585*clhs90;
        const double clhs587 =     clhs38*clhs435 + clhs581*clhs584 + clhs582 + clhs586*clhs70;
        const double clhs588 =     0.5*clhs296*clhs42*clhs59*mu[0];
        const double clhs589 =     clhs40*clhs583*clhs87;
        const double clhs590 =     clhs40*clhs428*clhs585*clhs90;
        const double clhs591 =     clhs40*clhs435 + clhs581*clhs589 + clhs582 + clhs590*clhs70;
        const double clhs592 =     clhs101*clhs428;
        const double clhs593 =     -clhs592;
        const double clhs594 =     clhs109*clhs586 + clhs112*clhs38 + clhs584*clhs592 + clhs593;
        const double clhs595 =     clhs109*clhs590 + clhs112*clhs40 + clhs589*clhs592 + clhs593;
        const double clhs596 =     clhs128*clhs428;
        const double clhs597 =     -clhs596;
        const double clhs598 =     clhs136*clhs586 + clhs38*clhs457 + clhs584*clhs596 + clhs597;
        const double clhs599 =     clhs136*clhs590 + clhs40*clhs457 + clhs589*clhs596 + clhs597;
        const double clhs600 =     clhs159*clhs428;
        const double clhs601 =     -clhs600;
        const double clhs602 =     clhs167*clhs586 + clhs170*clhs38 + clhs584*clhs600 + clhs601;
        const double clhs603 =     clhs167*clhs590 + clhs170*clhs40 + clhs589*clhs600 + clhs601;
        const double clhs604 =     clhs186*clhs428;
        const double clhs605 =     -clhs604;
        const double clhs606 =     clhs194*clhs586 + clhs197*clhs38 + clhs584*clhs604 + clhs605;
        const double clhs607 =     clhs194*clhs590 + clhs197*clhs40 + clhs589*clhs604 + clhs605;
        const double clhs608 =     clhs213*clhs428;
        const double clhs609 =     -clhs608;
        const double clhs610 =     clhs221*clhs586 + clhs224*clhs38 + clhs584*clhs608 + clhs609;
        const double clhs611 =     clhs221*clhs590 + clhs224*clhs40 + clhs589*clhs608 + clhs609;
        const double clhs612 =     clhs240*clhs428;
        const double clhs613 =     -clhs612;
        const double clhs614 =     clhs248*clhs586 + clhs251*clhs38 + clhs584*clhs612 + clhs613;
        const double clhs615 =     clhs248*clhs590 + clhs251*clhs40 + clhs589*clhs612 + clhs613;
        const double clhs616 =     clhs267*clhs428;
        const double clhs617 =     -clhs616;
        const double clhs618 =     clhs275*clhs586 + clhs278*clhs38 + clhs584*clhs616 + clhs617;
        const double clhs619 =     clhs275*clhs590 + clhs278*clhs40 + clhs589*clhs616 + clhs617;
        const double clhs620 =     1.0/penalty_parameter;
        const double clhs621 =     std::pow(scale_factor, 2);
        const double clhs622 =     0.5*clhs620*clhs621;
        const double clhs623 =     clhs289 - clhs291 + clhs293 + clhs299;
        const double clhs624 =     clhs294 + clhs295 - clhs302;
        const double clhs625 =     clhs402 + clhs403 + clhs624;
        const double clhs626 =     clhs305 + clhs309 + clhs624;
        const double clhs627 =     clhs306 - clhs406 + clhs407 + clhs408;
        const double clhs628 =     0.5*clhs297*clhs42*clhs428*clhs620*clhs621*clhs91*mu[0];
        const double clhs629 =     0.5*clhs306*clhs42*clhs59*mu[0];
        const double clhs630 =     0.5*clhs307*clhs42*clhs428*clhs620*clhs621*clhs91*mu[0];
        const double clhs631 =     0.5*clhs312*clhs42*clhs59*mu[1];
        const double clhs632 =     clhs430*clhs70;
        const double clhs633 =     -clhs632;
        const double clhs634 =     clhs430*clhs55*clhs583*clhs87;
        const double clhs635 =     clhs55*clhs585*clhs90;
        const double clhs636 =     clhs29*clhs634 + clhs437*clhs55 + clhs632*clhs635 + clhs633;
        const double clhs637 =     0.5*clhs319*clhs42*clhs59*mu[1];
        const double clhs638 =     clhs430*clhs57*clhs583*clhs87;
        const double clhs639 =     clhs57*clhs585*clhs90;
        const double clhs640 =     clhs29*clhs638 + clhs437*clhs57 + clhs632*clhs639 + clhs633;
        const double clhs641 =     clhs109*clhs430;
        const double clhs642 =     -clhs641;
        const double clhs643 =     clhs101*clhs634 + clhs114*clhs55 + clhs635*clhs641 + clhs642;
        const double clhs644 =     clhs101*clhs638 + clhs114*clhs57 + clhs639*clhs641 + clhs642;
        const double clhs645 =     clhs136*clhs430;
        const double clhs646 =     -clhs645;
        const double clhs647 =     clhs128*clhs634 + clhs459*clhs55 + clhs635*clhs645 + clhs646;
        const double clhs648 =     clhs128*clhs638 + clhs459*clhs57 + clhs639*clhs645 + clhs646;
        const double clhs649 =     clhs167*clhs430;
        const double clhs650 =     -clhs649;
        const double clhs651 =     clhs159*clhs634 + clhs172*clhs55 + clhs635*clhs649 + clhs650;
        const double clhs652 =     clhs159*clhs638 + clhs172*clhs57 + clhs639*clhs649 + clhs650;
        const double clhs653 =     clhs194*clhs430;
        const double clhs654 =     -clhs653;
        const double clhs655 =     clhs186*clhs634 + clhs199*clhs55 + clhs635*clhs653 + clhs654;
        const double clhs656 =     clhs186*clhs638 + clhs199*clhs57 + clhs639*clhs653 + clhs654;
        const double clhs657 =     clhs221*clhs430;
        const double clhs658 =     -clhs657;
        const double clhs659 =     clhs213*clhs634 + clhs226*clhs55 + clhs635*clhs657 + clhs658;
        const double clhs660 =     clhs213*clhs638 + clhs226*clhs57 + clhs639*clhs657 + clhs658;
        const double clhs661 =     clhs248*clhs430;
        const double clhs662 =     -clhs661;
        const double clhs663 =     clhs240*clhs634 + clhs253*clhs55 + clhs635*clhs661 + clhs662;
        const double clhs664 =     clhs240*clhs638 + clhs253*clhs57 + clhs639*clhs661 + clhs662;
        const double clhs665 =     clhs275*clhs430;
        const double clhs666 =     -clhs665;
        const double clhs667 =     clhs267*clhs634 + clhs280*clhs55 + clhs635*clhs665 + clhs666;
        const double clhs668 =     clhs267*clhs638 + clhs280*clhs57 + clhs639*clhs665 + clhs666;
        const double clhs669 =     0.5*clhs297*clhs430*clhs59*clhs620*clhs621*clhs88*mu[1];
        const double clhs670 =     0.5*clhs307*clhs430*clhs59*clhs620*clhs621*clhs88*mu[1];
        const double clhs671 =     clhs312 - clhs314 + clhs316 + clhs323;
        const double clhs672 =     clhs317 + clhs318 - clhs325;
        const double clhs673 =     clhs410 + clhs412 + clhs672;
        const double clhs674 =     clhs328 + clhs333 + clhs672;
        const double clhs675 =     clhs329 - clhs414 + clhs415 + clhs417;
        const double clhs676 =     0.5*clhs329*clhs42*clhs59*mu[1];
    
        lhs(0,0)=clhs0*clhs78 - clhs0*clhs85 - clhs0*clhs89 - clhs0*clhs92 - clhs20*clhs73 + clhs20*clhs83 + clhs48*clhs82 - clhs48*clhs86 - clhs48*clhs93 - clhs48*clhs94 - clhs66*clhs74 + clhs66*clhs84 + clhs72;
        lhs(0,1)=-clhs0*clhs113 + clhs0*clhs116 - clhs0*clhs118 - clhs0*clhs119 - clhs105*clhs74 + clhs105*clhs84 + clhs111 - clhs115*clhs48 + clhs117*clhs48 - clhs120*clhs48 - clhs121*clhs48 - clhs73*clhs97 + clhs83*clhs97;
        lhs(0,2)=clhs0*clhs142 - clhs0*clhs147 - clhs0*clhs149 - clhs0*clhs150 - clhs124*clhs73 + clhs124*clhs83 - clhs132*clhs74 + clhs132*clhs84 + clhs138 + clhs146*clhs48 - clhs148*clhs48 - clhs151*clhs48 - clhs152*clhs48;
        lhs(0,3)=-clhs0*clhs171 + clhs0*clhs174 - clhs0*clhs176 - clhs0*clhs177 - clhs155*clhs73 + clhs155*clhs83 - clhs163*clhs74 + clhs163*clhs84 + clhs169 - clhs173*clhs48 + clhs175*clhs48 - clhs178*clhs48 - clhs179*clhs48;
        lhs(0,4)=-clhs0*clhs198 + clhs0*clhs201 - clhs0*clhs203 - clhs0*clhs204 - clhs182*clhs73 + clhs182*clhs83 - clhs190*clhs74 + clhs190*clhs84 + clhs196 - clhs200*clhs48 + clhs202*clhs48 - clhs205*clhs48 - clhs206*clhs48;
        lhs(0,5)=-clhs0*clhs225 + clhs0*clhs228 - clhs0*clhs230 - clhs0*clhs231 - clhs209*clhs73 + clhs209*clhs83 - clhs217*clhs74 + clhs217*clhs84 + clhs223 - clhs227*clhs48 + clhs229*clhs48 - clhs232*clhs48 - clhs233*clhs48;
        lhs(0,6)=-clhs0*clhs252 + clhs0*clhs255 - clhs0*clhs257 - clhs0*clhs258 - clhs236*clhs73 + clhs236*clhs83 - clhs244*clhs74 + clhs244*clhs84 + clhs250 - clhs254*clhs48 + clhs256*clhs48 - clhs259*clhs48 - clhs260*clhs48;
        lhs(0,7)=-clhs0*clhs279 + clhs0*clhs282 - clhs0*clhs284 - clhs0*clhs285 - clhs263*clhs73 + clhs263*clhs83 - clhs271*clhs74 + clhs271*clhs84 + clhs277 - clhs281*clhs48 + clhs283*clhs48 - clhs286*clhs48 - clhs287*clhs48;
        lhs(0,8)=scale_factor*(clhs0*clhs288 + clhs0*clhs291 - clhs0*clhs293 - clhs0*clhs299 - clhs300*clhs48);
        lhs(0,9)=scale_factor*(-clhs0*clhs305 - clhs0*clhs309 + clhs303 - clhs310*clhs48);
        lhs(0,10)=scale_factor*(-clhs0*clhs321 + clhs311*clhs48 + clhs314*clhs48 - clhs316*clhs48 - clhs323*clhs48);
        lhs(0,11)=scale_factor*(-clhs0*clhs331 + clhs326 - clhs328*clhs48 - clhs333*clhs48);
        lhs(1,0)=clhs0*clhs336 - clhs0*clhs340 - clhs0*clhs342 - clhs0*clhs343 - clhs20*clhs334 + clhs20*clhs338 - clhs335*clhs66 + clhs337*clhs48 + clhs339*clhs66 - clhs341*clhs48 - clhs344*clhs48 - clhs345*clhs48 + clhs72;
        lhs(1,1)=-clhs0*clhs346 + clhs0*clhs348 - clhs0*clhs350 - clhs0*clhs351 - clhs105*clhs335 + clhs105*clhs339 + clhs111 - clhs334*clhs97 + clhs338*clhs97 - clhs347*clhs48 + clhs349*clhs48 - clhs352*clhs48 - clhs353*clhs48;
        lhs(1,2)=clhs0*clhs354 - clhs0*clhs356 - clhs0*clhs358 - clhs0*clhs359 - clhs124*clhs334 + clhs124*clhs338 - clhs132*clhs335 + clhs132*clhs339 + clhs138 + clhs355*clhs48 - clhs357*clhs48 - clhs360*clhs48 - clhs361*clhs48;
        lhs(1,3)=-clhs0*clhs362 + clhs0*clhs364 - clhs0*clhs366 - clhs0*clhs367 - clhs155*clhs334 + clhs155*clhs338 - clhs163*clhs335 + clhs163*clhs339 + clhs169 - clhs363*clhs48 + clhs365*clhs48 - clhs368*clhs48 - clhs369*clhs48;
        lhs(1,4)=-clhs0*clhs370 + clhs0*clhs372 - clhs0*clhs374 - clhs0*clhs375 - clhs182*clhs334 + clhs182*clhs338 - clhs190*clhs335 + clhs190*clhs339 + clhs196 - clhs371*clhs48 + clhs373*clhs48 - clhs376*clhs48 - clhs377*clhs48;
        lhs(1,5)=-clhs0*clhs378 + clhs0*clhs380 - clhs0*clhs382 - clhs0*clhs383 - clhs209*clhs334 + clhs209*clhs338 - clhs217*clhs335 + clhs217*clhs339 + clhs223 - clhs379*clhs48 + clhs381*clhs48 - clhs384*clhs48 - clhs385*clhs48;
        lhs(1,6)=-clhs0*clhs386 + clhs0*clhs388 - clhs0*clhs390 - clhs0*clhs391 - clhs236*clhs334 + clhs236*clhs338 - clhs244*clhs335 + clhs244*clhs339 + clhs250 - clhs387*clhs48 + clhs389*clhs48 - clhs392*clhs48 - clhs393*clhs48;
        lhs(1,7)=-clhs0*clhs394 + clhs0*clhs396 - clhs0*clhs398 - clhs0*clhs399 - clhs263*clhs334 + clhs263*clhs338 - clhs271*clhs335 + clhs271*clhs339 + clhs277 - clhs395*clhs48 + clhs397*clhs48 - clhs400*clhs48 - clhs401*clhs48;
        lhs(1,8)=scale_factor*(-clhs0*clhs402 - clhs0*clhs403 + clhs303 - clhs404*clhs48);
        lhs(1,9)=scale_factor*(clhs0*clhs405 + clhs0*clhs406 - clhs0*clhs407 - clhs0*clhs408 - clhs409*clhs48);
        lhs(1,10)=scale_factor*(-clhs0*clhs411 + clhs326 - clhs410*clhs48 - clhs412*clhs48);
        lhs(1,11)=scale_factor*(-clhs0*clhs416 + clhs413*clhs48 + clhs414*clhs48 - clhs415*clhs48 - clhs417*clhs48);
        lhs(2,0)=-clhs22*clhs73 + clhs22*clhs83 + clhs418 + clhs49*clhs82 - clhs49*clhs86 - clhs49*clhs93 - clhs49*clhs94 - clhs67*clhs74 + clhs67*clhs84 + clhs78*clhs8 - clhs8*clhs85 - clhs8*clhs89 - clhs8*clhs92;
        lhs(2,1)=-clhs106*clhs74 + clhs106*clhs84 - clhs113*clhs8 - clhs115*clhs49 + clhs116*clhs8 + clhs117*clhs49 - clhs118*clhs8 - clhs119*clhs8 - clhs120*clhs49 - clhs121*clhs49 + clhs419 - clhs73*clhs98 + clhs83*clhs98;
        lhs(2,2)=-clhs125*clhs73 + clhs125*clhs83 - clhs133*clhs74 + clhs133*clhs84 + clhs142*clhs8 + clhs146*clhs49 - clhs147*clhs8 - clhs148*clhs49 - clhs149*clhs8 - clhs150*clhs8 - clhs151*clhs49 - clhs152*clhs49 + clhs420;
        lhs(2,3)=-clhs156*clhs73 + clhs156*clhs83 - clhs164*clhs74 + clhs164*clhs84 - clhs171*clhs8 - clhs173*clhs49 + clhs174*clhs8 + clhs175*clhs49 - clhs176*clhs8 - clhs177*clhs8 - clhs178*clhs49 - clhs179*clhs49 + clhs421;
        lhs(2,4)=-clhs183*clhs73 + clhs183*clhs83 - clhs191*clhs74 + clhs191*clhs84 - clhs198*clhs8 - clhs200*clhs49 + clhs201*clhs8 + clhs202*clhs49 - clhs203*clhs8 - clhs204*clhs8 - clhs205*clhs49 - clhs206*clhs49 + clhs422;
        lhs(2,5)=-clhs210*clhs73 + clhs210*clhs83 - clhs218*clhs74 + clhs218*clhs84 - clhs225*clhs8 - clhs227*clhs49 + clhs228*clhs8 + clhs229*clhs49 - clhs230*clhs8 - clhs231*clhs8 - clhs232*clhs49 - clhs233*clhs49 + clhs423;
        lhs(2,6)=-clhs237*clhs73 + clhs237*clhs83 - clhs245*clhs74 + clhs245*clhs84 - clhs252*clhs8 - clhs254*clhs49 + clhs255*clhs8 + clhs256*clhs49 - clhs257*clhs8 - clhs258*clhs8 - clhs259*clhs49 - clhs260*clhs49 + clhs424;
        lhs(2,7)=-clhs264*clhs73 + clhs264*clhs83 - clhs272*clhs74 + clhs272*clhs84 - clhs279*clhs8 - clhs281*clhs49 + clhs282*clhs8 + clhs283*clhs49 - clhs284*clhs8 - clhs285*clhs8 - clhs286*clhs49 - clhs287*clhs49 + clhs425;
        lhs(2,8)=scale_factor*(clhs288*clhs8 + clhs291*clhs8 - clhs293*clhs8 - clhs299*clhs8 - clhs300*clhs49);
        lhs(2,9)=scale_factor*(-clhs305*clhs8 - clhs309*clhs8 - clhs310*clhs49 + clhs426);
        lhs(2,10)=scale_factor*(clhs311*clhs49 + clhs314*clhs49 - clhs316*clhs49 - clhs321*clhs8 - clhs323*clhs49);
        lhs(2,11)=scale_factor*(-clhs328*clhs49 - clhs331*clhs8 - clhs333*clhs49 + clhs427);
        lhs(3,0)=-clhs22*clhs334 + clhs22*clhs338 - clhs335*clhs67 + clhs336*clhs8 + clhs337*clhs49 + clhs339*clhs67 - clhs340*clhs8 - clhs341*clhs49 - clhs342*clhs8 - clhs343*clhs8 - clhs344*clhs49 - clhs345*clhs49 + clhs418;
        lhs(3,1)=-clhs106*clhs335 + clhs106*clhs339 - clhs334*clhs98 + clhs338*clhs98 - clhs346*clhs8 - clhs347*clhs49 + clhs348*clhs8 + clhs349*clhs49 - clhs350*clhs8 - clhs351*clhs8 - clhs352*clhs49 - clhs353*clhs49 + clhs419;
        lhs(3,2)=-clhs125*clhs334 + clhs125*clhs338 - clhs133*clhs335 + clhs133*clhs339 + clhs354*clhs8 + clhs355*clhs49 - clhs356*clhs8 - clhs357*clhs49 - clhs358*clhs8 - clhs359*clhs8 - clhs360*clhs49 - clhs361*clhs49 + clhs420;
        lhs(3,3)=-clhs156*clhs334 + clhs156*clhs338 - clhs164*clhs335 + clhs164*clhs339 - clhs362*clhs8 - clhs363*clhs49 + clhs364*clhs8 + clhs365*clhs49 - clhs366*clhs8 - clhs367*clhs8 - clhs368*clhs49 - clhs369*clhs49 + clhs421;
        lhs(3,4)=-clhs183*clhs334 + clhs183*clhs338 - clhs191*clhs335 + clhs191*clhs339 - clhs370*clhs8 - clhs371*clhs49 + clhs372*clhs8 + clhs373*clhs49 - clhs374*clhs8 - clhs375*clhs8 - clhs376*clhs49 - clhs377*clhs49 + clhs422;
        lhs(3,5)=-clhs210*clhs334 + clhs210*clhs338 - clhs218*clhs335 + clhs218*clhs339 - clhs378*clhs8 - clhs379*clhs49 + clhs380*clhs8 + clhs381*clhs49 - clhs382*clhs8 - clhs383*clhs8 - clhs384*clhs49 - clhs385*clhs49 + clhs423;
        lhs(3,6)=-clhs237*clhs334 + clhs237*clhs338 - clhs245*clhs335 + clhs245*clhs339 - clhs386*clhs8 - clhs387*clhs49 + clhs388*clhs8 + clhs389*clhs49 - clhs390*clhs8 - clhs391*clhs8 - clhs392*clhs49 - clhs393*clhs49 + clhs424;
        lhs(3,7)=-clhs264*clhs334 + clhs264*clhs338 - clhs272*clhs335 + clhs272*clhs339 - clhs394*clhs8 - clhs395*clhs49 + clhs396*clhs8 + clhs397*clhs49 - clhs398*clhs8 - clhs399*clhs8 - clhs400*clhs49 - clhs401*clhs49 + clhs425;
        lhs(3,8)=scale_factor*(-clhs402*clhs8 - clhs403*clhs8 - clhs404*clhs49 + clhs426);
        lhs(3,9)=scale_factor*(clhs405*clhs8 + clhs406*clhs8 - clhs407*clhs8 - clhs408*clhs8 - clhs409*clhs49);
        lhs(3,10)=scale_factor*(-clhs410*clhs49 - clhs411*clhs8 - clhs412*clhs49 + clhs427);
        lhs(3,11)=scale_factor*(clhs413*clhs49 + clhs414*clhs49 - clhs415*clhs49 - clhs416*clhs8 - clhs417*clhs49);
        lhs(4,0)=-clhs16*clhs433 + clhs16*clhs439 + clhs3*clhs436 - clhs3*clhs441 - clhs3*clhs443 - clhs3*clhs444 + clhs432 - clhs434*clhs64 + clhs438*clhs46 + clhs440*clhs64 - clhs442*clhs46 - clhs445*clhs46 - clhs446*clhs46;
        lhs(4,1)=-clhs103*clhs434 + clhs103*clhs440 + clhs113*clhs3 + clhs115*clhs46 - clhs116*clhs3 - clhs117*clhs46 - clhs3*clhs450 - clhs3*clhs451 - clhs433*clhs95 + clhs439*clhs95 + clhs449 - clhs452*clhs46 - clhs453*clhs46;
        lhs(4,2)=-clhs122*clhs433 + clhs122*clhs439 - clhs130*clhs434 + clhs130*clhs440 + clhs3*clhs458 - clhs3*clhs461 - clhs3*clhs463 - clhs3*clhs464 + clhs456 + clhs46*clhs460 - clhs46*clhs462 - clhs46*clhs465 - clhs46*clhs466;
        lhs(4,3)=-clhs153*clhs433 + clhs153*clhs439 - clhs161*clhs434 + clhs161*clhs440 + clhs171*clhs3 + clhs173*clhs46 - clhs174*clhs3 - clhs175*clhs46 - clhs3*clhs470 - clhs3*clhs471 - clhs46*clhs472 - clhs46*clhs473 + clhs469;
        lhs(4,4)=-clhs180*clhs433 + clhs180*clhs439 - clhs188*clhs434 + clhs188*clhs440 + clhs198*clhs3 + clhs200*clhs46 - clhs201*clhs3 - clhs202*clhs46 - clhs3*clhs477 - clhs3*clhs478 - clhs46*clhs479 - clhs46*clhs480 + clhs476;
        lhs(4,5)=-clhs207*clhs433 + clhs207*clhs439 - clhs215*clhs434 + clhs215*clhs440 + clhs225*clhs3 + clhs227*clhs46 - clhs228*clhs3 - clhs229*clhs46 - clhs3*clhs484 - clhs3*clhs485 - clhs46*clhs486 - clhs46*clhs487 + clhs483;
        lhs(4,6)=-clhs234*clhs433 + clhs234*clhs439 - clhs242*clhs434 + clhs242*clhs440 + clhs252*clhs3 + clhs254*clhs46 - clhs255*clhs3 - clhs256*clhs46 - clhs3*clhs491 - clhs3*clhs492 - clhs46*clhs493 - clhs46*clhs494 + clhs490;
        lhs(4,7)=-clhs261*clhs433 + clhs261*clhs439 - clhs269*clhs434 + clhs269*clhs440 + clhs279*clhs3 + clhs281*clhs46 - clhs282*clhs3 - clhs283*clhs46 - clhs3*clhs498 - clhs3*clhs499 - clhs46*clhs500 - clhs46*clhs501 + clhs497;
        lhs(4,8)=scale_factor*(-clhs288*clhs3 + clhs293*clhs3 + clhs3*clhs502 - clhs3*clhs503 - clhs46*clhs504);
        lhs(4,9)=scale_factor*(clhs3*clhs305 - clhs3*clhs507 - clhs46*clhs508 + clhs506);
        lhs(4,10)=scale_factor*(-clhs3*clhs510 - clhs311*clhs46 + clhs316*clhs46 + clhs46*clhs509 - clhs46*clhs511);
        lhs(4,11)=scale_factor*(-clhs3*clhs514 + clhs328*clhs46 - clhs46*clhs515 + clhs513);
        lhs(5,0)=-clhs16*clhs516 + clhs16*clhs520 + clhs3*clhs518 - clhs3*clhs522 - clhs3*clhs524 - clhs3*clhs525 + clhs432 + clhs46*clhs519 - clhs46*clhs523 - clhs46*clhs526 - clhs46*clhs527 - clhs517*clhs64 + clhs521*clhs64;
        lhs(5,1)=-clhs103*clhs517 + clhs103*clhs521 + clhs3*clhs346 - clhs3*clhs348 - clhs3*clhs528 - clhs3*clhs529 + clhs347*clhs46 - clhs349*clhs46 + clhs449 - clhs46*clhs530 - clhs46*clhs531 - clhs516*clhs95 + clhs520*clhs95;
        lhs(5,2)=-clhs122*clhs516 + clhs122*clhs520 - clhs130*clhs517 + clhs130*clhs521 + clhs3*clhs532 - clhs3*clhs534 - clhs3*clhs536 - clhs3*clhs537 + clhs456 + clhs46*clhs533 - clhs46*clhs535 - clhs46*clhs538 - clhs46*clhs539;
        lhs(5,3)=-clhs153*clhs516 + clhs153*clhs520 - clhs161*clhs517 + clhs161*clhs521 + clhs3*clhs362 - clhs3*clhs364 - clhs3*clhs540 - clhs3*clhs541 + clhs363*clhs46 - clhs365*clhs46 - clhs46*clhs542 - clhs46*clhs543 + clhs469;
        lhs(5,4)=-clhs180*clhs516 + clhs180*clhs520 - clhs188*clhs517 + clhs188*clhs521 + clhs3*clhs370 - clhs3*clhs372 - clhs3*clhs544 - clhs3*clhs545 + clhs371*clhs46 - clhs373*clhs46 - clhs46*clhs546 - clhs46*clhs547 + clhs476;
        lhs(5,5)=-clhs207*clhs516 + clhs207*clhs520 - clhs215*clhs517 + clhs215*clhs521 + clhs3*clhs378 - clhs3*clhs380 - clhs3*clhs548 - clhs3*clhs549 + clhs379*clhs46 - clhs381*clhs46 - clhs46*clhs550 - clhs46*clhs551 + clhs483;
        lhs(5,6)=-clhs234*clhs516 + clhs234*clhs520 - clhs242*clhs517 + clhs242*clhs521 + clhs3*clhs386 - clhs3*clhs388 - clhs3*clhs552 - clhs3*clhs553 + clhs387*clhs46 - clhs389*clhs46 - clhs46*clhs554 - clhs46*clhs555 + clhs490;
        lhs(5,7)=-clhs261*clhs516 + clhs261*clhs520 - clhs269*clhs517 + clhs269*clhs521 + clhs3*clhs394 - clhs3*clhs396 - clhs3*clhs556 - clhs3*clhs557 + clhs395*clhs46 - clhs397*clhs46 - clhs46*clhs558 - clhs46*clhs559 + clhs497;
        lhs(5,8)=scale_factor*(clhs3*clhs402 - clhs3*clhs560 - clhs46*clhs561 + clhs506);
        lhs(5,9)=scale_factor*(-clhs3*clhs405 + clhs3*clhs407 + clhs3*clhs562 - clhs3*clhs563 - clhs46*clhs564);
        lhs(5,10)=scale_factor*(-clhs3*clhs565 + clhs410*clhs46 - clhs46*clhs566 + clhs513);
        lhs(5,11)=scale_factor*(-clhs3*clhs568 - clhs413*clhs46 + clhs415*clhs46 + clhs46*clhs567 - clhs46*clhs569);
        lhs(6,0)=-clhs18*clhs433 + clhs18*clhs439 - clhs434*clhs65 + clhs436*clhs5 + clhs438*clhs47 + clhs440*clhs65 - clhs441*clhs5 - clhs442*clhs47 - clhs443*clhs5 - clhs444*clhs5 - clhs445*clhs47 - clhs446*clhs47 + clhs570;
        lhs(6,1)=-clhs104*clhs434 + clhs104*clhs440 + clhs113*clhs5 + clhs115*clhs47 - clhs116*clhs5 - clhs117*clhs47 - clhs433*clhs96 + clhs439*clhs96 - clhs450*clhs5 - clhs451*clhs5 - clhs452*clhs47 - clhs453*clhs47 + clhs571;
        lhs(6,2)=-clhs123*clhs433 + clhs123*clhs439 - clhs131*clhs434 + clhs131*clhs440 + clhs458*clhs5 + clhs460*clhs47 - clhs461*clhs5 - clhs462*clhs47 - clhs463*clhs5 - clhs464*clhs5 - clhs465*clhs47 - clhs466*clhs47 + clhs572;
        lhs(6,3)=-clhs154*clhs433 + clhs154*clhs439 - clhs162*clhs434 + clhs162*clhs440 + clhs171*clhs5 + clhs173*clhs47 - clhs174*clhs5 - clhs175*clhs47 - clhs47*clhs472 - clhs47*clhs473 - clhs470*clhs5 - clhs471*clhs5 + clhs573;
        lhs(6,4)=-clhs181*clhs433 + clhs181*clhs439 - clhs189*clhs434 + clhs189*clhs440 + clhs198*clhs5 + clhs200*clhs47 - clhs201*clhs5 - clhs202*clhs47 - clhs47*clhs479 - clhs47*clhs480 - clhs477*clhs5 - clhs478*clhs5 + clhs574;
        lhs(6,5)=-clhs208*clhs433 + clhs208*clhs439 - clhs216*clhs434 + clhs216*clhs440 + clhs225*clhs5 + clhs227*clhs47 - clhs228*clhs5 - clhs229*clhs47 - clhs47*clhs486 - clhs47*clhs487 - clhs484*clhs5 - clhs485*clhs5 + clhs575;
        lhs(6,6)=-clhs235*clhs433 + clhs235*clhs439 - clhs243*clhs434 + clhs243*clhs440 + clhs252*clhs5 + clhs254*clhs47 - clhs255*clhs5 - clhs256*clhs47 - clhs47*clhs493 - clhs47*clhs494 - clhs491*clhs5 - clhs492*clhs5 + clhs576;
        lhs(6,7)=-clhs262*clhs433 + clhs262*clhs439 - clhs270*clhs434 + clhs270*clhs440 + clhs279*clhs5 + clhs281*clhs47 - clhs282*clhs5 - clhs283*clhs47 - clhs47*clhs500 - clhs47*clhs501 - clhs498*clhs5 - clhs499*clhs5 + clhs577;
        lhs(6,8)=scale_factor*(-clhs288*clhs5 + clhs293*clhs5 - clhs47*clhs504 + clhs5*clhs502 - clhs5*clhs503);
        lhs(6,9)=scale_factor*(clhs305*clhs5 - clhs47*clhs508 - clhs5*clhs507 + clhs578);
        lhs(6,10)=scale_factor*(-clhs311*clhs47 + clhs316*clhs47 + clhs47*clhs509 - clhs47*clhs511 - clhs5*clhs510);
        lhs(6,11)=scale_factor*(clhs328*clhs47 - clhs47*clhs515 - clhs5*clhs514 + clhs579);
        lhs(7,0)=-clhs18*clhs516 + clhs18*clhs520 + clhs47*clhs519 - clhs47*clhs523 - clhs47*clhs526 - clhs47*clhs527 + clhs5*clhs518 - clhs5*clhs522 - clhs5*clhs524 - clhs5*clhs525 - clhs517*clhs65 + clhs521*clhs65 + clhs570;
        lhs(7,1)=-clhs104*clhs517 + clhs104*clhs521 + clhs346*clhs5 + clhs347*clhs47 - clhs348*clhs5 - clhs349*clhs47 - clhs47*clhs530 - clhs47*clhs531 - clhs5*clhs528 - clhs5*clhs529 - clhs516*clhs96 + clhs520*clhs96 + clhs571;
        lhs(7,2)=-clhs123*clhs516 + clhs123*clhs520 - clhs131*clhs517 + clhs131*clhs521 + clhs47*clhs533 - clhs47*clhs535 - clhs47*clhs538 - clhs47*clhs539 + clhs5*clhs532 - clhs5*clhs534 - clhs5*clhs536 - clhs5*clhs537 + clhs572;
        lhs(7,3)=-clhs154*clhs516 + clhs154*clhs520 - clhs162*clhs517 + clhs162*clhs521 + clhs362*clhs5 + clhs363*clhs47 - clhs364*clhs5 - clhs365*clhs47 - clhs47*clhs542 - clhs47*clhs543 - clhs5*clhs540 - clhs5*clhs541 + clhs573;
        lhs(7,4)=-clhs181*clhs516 + clhs181*clhs520 - clhs189*clhs517 + clhs189*clhs521 + clhs370*clhs5 + clhs371*clhs47 - clhs372*clhs5 - clhs373*clhs47 - clhs47*clhs546 - clhs47*clhs547 - clhs5*clhs544 - clhs5*clhs545 + clhs574;
        lhs(7,5)=-clhs208*clhs516 + clhs208*clhs520 - clhs216*clhs517 + clhs216*clhs521 + clhs378*clhs5 + clhs379*clhs47 - clhs380*clhs5 - clhs381*clhs47 - clhs47*clhs550 - clhs47*clhs551 - clhs5*clhs548 - clhs5*clhs549 + clhs575;
        lhs(7,6)=-clhs235*clhs516 + clhs235*clhs520 - clhs243*clhs517 + clhs243*clhs521 + clhs386*clhs5 + clhs387*clhs47 - clhs388*clhs5 - clhs389*clhs47 - clhs47*clhs554 - clhs47*clhs555 - clhs5*clhs552 - clhs5*clhs553 + clhs576;
        lhs(7,7)=-clhs262*clhs516 + clhs262*clhs520 - clhs270*clhs517 + clhs270*clhs521 + clhs394*clhs5 + clhs395*clhs47 - clhs396*clhs5 - clhs397*clhs47 - clhs47*clhs558 - clhs47*clhs559 - clhs5*clhs556 - clhs5*clhs557 + clhs577;
        lhs(7,8)=scale_factor*(clhs402*clhs5 - clhs47*clhs561 - clhs5*clhs560 + clhs578);
        lhs(7,9)=scale_factor*(-clhs405*clhs5 + clhs407*clhs5 - clhs47*clhs564 + clhs5*clhs562 - clhs5*clhs563);
        lhs(7,10)=scale_factor*(clhs410*clhs47 - clhs47*clhs566 - clhs5*clhs565 + clhs579);
        lhs(7,11)=scale_factor*(-clhs413*clhs47 + clhs415*clhs47 + clhs47*clhs567 - clhs47*clhs569 - clhs5*clhs568);
        lhs(8,0)=-scale_factor*(clhs580*clhs587 + clhs588*clhs591 + clhs77*normalslave(0,0));
        lhs(8,1)=scale_factor*(clhs112*normalslave(0,0) - clhs580*clhs594 - clhs588*clhs595);
        lhs(8,2)=-scale_factor*(clhs141*normalslave(0,0) + clhs580*clhs598 + clhs588*clhs599);
        lhs(8,3)=scale_factor*(clhs170*normalslave(0,0) - clhs580*clhs602 - clhs588*clhs603);
        lhs(8,4)=scale_factor*(clhs197*normalslave(0,0) - clhs580*clhs606 - clhs588*clhs607);
        lhs(8,5)=scale_factor*(clhs224*normalslave(0,0) - clhs580*clhs610 - clhs588*clhs611);
        lhs(8,6)=scale_factor*(clhs251*normalslave(0,0) - clhs580*clhs614 - clhs588*clhs615);
        lhs(8,7)=scale_factor*(clhs278*normalslave(0,0) - clhs580*clhs618 - clhs588*clhs619);
        lhs(8,8)=clhs622*(clhs289*clhs623 + clhs296*clhs625);
        lhs(8,9)=clhs622*(clhs289*clhs626 + clhs296*clhs627);
        lhs(8,10)=-clhs320*clhs628;
        lhs(8,11)=-clhs330*clhs628;
        lhs(9,0)=-scale_factor*(clhs587*clhs588 + clhs591*clhs629 + clhs77*normalslave(0,1));
        lhs(9,1)=scale_factor*(clhs112*normalslave(0,1) - clhs588*clhs594 - clhs595*clhs629);
        lhs(9,2)=-scale_factor*(clhs141*normalslave(0,1) + clhs588*clhs598 + clhs599*clhs629);
        lhs(9,3)=scale_factor*(clhs170*normalslave(0,1) - clhs588*clhs602 - clhs603*clhs629);
        lhs(9,4)=scale_factor*(clhs197*normalslave(0,1) - clhs588*clhs606 - clhs607*clhs629);
        lhs(9,5)=scale_factor*(clhs224*normalslave(0,1) - clhs588*clhs610 - clhs611*clhs629);
        lhs(9,6)=scale_factor*(clhs251*normalslave(0,1) - clhs588*clhs614 - clhs615*clhs629);
        lhs(9,7)=scale_factor*(clhs278*normalslave(0,1) - clhs588*clhs618 - clhs619*clhs629);
        lhs(9,8)=clhs622*(clhs296*clhs623 + clhs306*clhs625);
        lhs(9,9)=clhs622*(clhs296*clhs626 + clhs306*clhs627);
        lhs(9,10)=-clhs320*clhs630;
        lhs(9,11)=-clhs330*clhs630;
        lhs(10,0)=-scale_factor*(clhs631*clhs636 + clhs637*clhs640 + clhs81*normalslave(1,0));
        lhs(10,1)=scale_factor*(clhs114*normalslave(1,0) - clhs631*clhs643 - clhs637*clhs644);
        lhs(10,2)=-scale_factor*(clhs145*normalslave(1,0) + clhs631*clhs647 + clhs637*clhs648);
        lhs(10,3)=scale_factor*(clhs172*normalslave(1,0) - clhs631*clhs651 - clhs637*clhs652);
        lhs(10,4)=scale_factor*(clhs199*normalslave(1,0) - clhs631*clhs655 - clhs637*clhs656);
        lhs(10,5)=scale_factor*(clhs226*normalslave(1,0) - clhs631*clhs659 - clhs637*clhs660);
        lhs(10,6)=scale_factor*(clhs253*normalslave(1,0) - clhs631*clhs663 - clhs637*clhs664);
        lhs(10,7)=scale_factor*(clhs280*normalslave(1,0) - clhs631*clhs667 - clhs637*clhs668);
        lhs(10,8)=-clhs320*clhs669;
        lhs(10,9)=-clhs320*clhs670;
        lhs(10,10)=clhs622*(clhs312*clhs671 + clhs319*clhs673);
        lhs(10,11)=clhs622*(clhs312*clhs674 + clhs319*clhs675);
        lhs(11,0)=-scale_factor*(clhs636*clhs637 + clhs640*clhs676 + clhs81*normalslave(1,1));
        lhs(11,1)=scale_factor*(clhs114*normalslave(1,1) - clhs637*clhs643 - clhs644*clhs676);
        lhs(11,2)=-scale_factor*(clhs145*normalslave(1,1) + clhs637*clhs647 + clhs648*clhs676);
        lhs(11,3)=scale_factor*(clhs172*normalslave(1,1) - clhs637*clhs651 - clhs652*clhs676);
        lhs(11,4)=scale_factor*(clhs199*normalslave(1,1) - clhs637*clhs655 - clhs656*clhs676);
        lhs(11,5)=scale_factor*(clhs226*normalslave(1,1) - clhs637*clhs659 - clhs660*clhs676);
        lhs(11,6)=scale_factor*(clhs253*normalslave(1,1) - clhs637*clhs663 - clhs664*clhs676);
        lhs(11,7)=scale_factor*(clhs280*normalslave(1,1) - clhs637*clhs667 - clhs668*clhs676);
        lhs(11,8)=-clhs330*clhs669;
        lhs(11,9)=-clhs330*clhs670;
        lhs(11,10)=clhs622*(clhs319*clhs671 + clhs329*clhs673);
        lhs(11,11)=clhs622*(clhs319*clhs674 + clhs329*clhs675);
    }
    else if (rActiveInactive == 5 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs3 =     X1(0,0) + u1old(0,0);
        const double clhs4 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1old(1,0);
        const double clhs6 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2old(0,0);
        const double clhs8 =     X2(1,0) + u2old(1,0);
        const double clhs9 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     -clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9;
        const double clhs11 =     X1(0,1) + u1old(0,1);
        const double clhs12 =     X1(1,1) + u1old(1,1);
        const double clhs13 =     X2(0,1) + u2old(0,1);
        const double clhs14 =     X2(1,1) + u2old(1,1);
        const double clhs15 =     -clhs0*clhs13 + clhs11*clhs4 + clhs12*clhs6 - clhs14*clhs9;
        const double clhs16 =     penalty_parameter*(clhs10*tangentetaslave(0,0) + clhs15*tangentetaslave(0,1));
        const double clhs17 =     clhs16 + clhs2*scale_factor;
        const double clhs18 =     clhs17*tangentetaslave(0,0);
        const double clhs19 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs20 =     penalty_parameter*(clhs10*tangentxislave(0,0) + clhs15*tangentxislave(0,1));
        const double clhs21 =     clhs19*scale_factor + clhs20;
        const double clhs22 =     clhs21*tangentxislave(0,0);
        const double clhs23 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs24 =     X1(0,0) + u1(0,0);
        const double clhs25 =     X1(1,0) + u1(1,0);
        const double clhs26 =     X2(0,0) + u2(0,0);
        const double clhs27 =     X2(1,0) + u2(1,0);
        const double clhs28 =     X1(0,1) + u1(0,1);
        const double clhs29 =     X1(1,1) + u1(1,1);
        const double clhs30 =     X2(0,1) + u2(0,1);
        const double clhs31 =     X2(1,1) + u2(1,1);
        const double clhs32 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs26 + clhs24*clhs4 + clhs25*clhs6 - clhs27*clhs9) + normalslave(0,1)*(-clhs0*clhs30 + clhs28*clhs4 + clhs29*clhs6 - clhs31*clhs9));
        const double clhs33 =     -clhs23 + clhs32;
        const double clhs34 =     clhs33*normalslave(0,0);
        const double clhs35 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs36 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs37 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs38 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs39 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs40 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs41 =     penalty_parameter*(normalslave(1,0)*(clhs24*clhs38 + clhs25*clhs39 - clhs26*clhs35 - clhs27*clhs40) + normalslave(1,1)*(clhs28*clhs38 + clhs29*clhs39 - clhs30*clhs35 - clhs31*clhs40));
        const double clhs42 =     -clhs37 + clhs41;
        const double clhs43 =     clhs42*normalslave(1,0);
        const double clhs44 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs45 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs46 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     -clhs1*clhs7 + clhs3*clhs44 + clhs45*clhs5 - clhs46*clhs8;
        const double clhs48 =     -clhs1*clhs13 + clhs11*clhs44 + clhs12*clhs45 - clhs14*clhs46;
        const double clhs49 =     clhs47*tangentetaslave(0,0) + clhs48*tangentetaslave(0,1);
        const double clhs50 =     clhs49*penalty_parameter*tangentetaslave(0,0);
        const double clhs51 =     clhs47*tangentxislave(0,0) + clhs48*tangentxislave(0,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentxislave(0,0);
        const double clhs53 =     normalslave(0,1)*(-clhs1*clhs30 + clhs28*clhs44 + clhs29*clhs45 - clhs31*clhs46);
        const double clhs54 =     normalslave(0,0)*(clhs0 + clhs1*clhs26 - clhs24*clhs44 - clhs25*clhs45 + clhs27*clhs46);
        const double clhs55 =     -clhs53 + clhs54;
        const double clhs56 =     clhs55*normalslave(0,0)*penalty_parameter;
        const double clhs57 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs58 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs59 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs60 =     normalslave(1,1)*(clhs28*clhs57 + clhs29*clhs58 - clhs30*clhs36 - clhs31*clhs59);
        const double clhs61 =     normalslave(1,0)*(-clhs24*clhs57 - clhs25*clhs58 + clhs26*clhs36 + clhs27*clhs59 + clhs35);
        const double clhs62 =     -clhs60 + clhs61;
        const double clhs63 =     clhs62*normalslave(1,0)*penalty_parameter;
        const double clhs64 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs65 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs66 =     scale_factor*(clhs64*tangentetaslave(1,0) + clhs65*tangentxislave(1,0));
        const double clhs67 =     clhs3*clhs38 - clhs35*clhs7 + clhs39*clhs5 - clhs40*clhs8;
        const double clhs68 =     clhs11*clhs38 + clhs12*clhs39 - clhs13*clhs35 - clhs14*clhs40;
        const double clhs69 =     penalty_parameter*(clhs67*tangentetaslave(1,0) + clhs68*tangentetaslave(1,1));
        const double clhs70 =     penalty_parameter*(clhs67*tangentxislave(1,0) + clhs68*tangentxislave(1,1));
        const double clhs71 =     clhs69 + clhs70;
        const double clhs72 =     clhs66 + clhs71;
        const double clhs73 =     scale_factor*(clhs19*tangentxislave(0,0) + clhs2*tangentetaslave(0,0));
        const double clhs74 =     clhs16 + clhs20;
        const double clhs75 =     clhs73 + clhs74;
        const double clhs76 =     scale_factor*(clhs19*tangentxislave(0,1) + clhs2*tangentetaslave(0,1));
        const double clhs77 =     clhs74 + clhs76;
        const double clhs78 =     std::pow(clhs75, 2) + std::pow(clhs77, 2);
        const double clhs79 =     std::pow(clhs78, -1.0L/2.0L);
        const double clhs80 =     scale_factor*(clhs64*tangentetaslave(1,1) + clhs65*tangentxislave(1,1));
        const double clhs81 =     clhs71 + clhs80;
        const double clhs82 =     std::pow(clhs72, 2) + std::pow(clhs81, 2);
        const double clhs83 =     std::pow(clhs82, -1.0L/2.0L);
        const double clhs84 =     clhs42*clhs72*clhs79*clhs83*mu[1];
        const double clhs85 =     clhs3*clhs57 - clhs36*clhs7 + clhs5*clhs58 - clhs59*clhs8;
        const double clhs86 =     clhs11*clhs57 + clhs12*clhs58 - clhs13*clhs36 - clhs14*clhs59;
        const double clhs87 =     clhs85*tangentetaslave(1,0) + clhs85*tangentxislave(1,0) + clhs86*tangentetaslave(1,1) + clhs86*tangentxislave(1,1);
        const double clhs88 =     clhs42*clhs79*clhs83*clhs87*mu[1]*penalty_parameter;
        const double clhs89 =     clhs35*clhs88;
        const double clhs90 =     clhs62*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs91 =     clhs49 + clhs51;
        const double clhs92 =     2*clhs16 + 2*clhs20 + clhs73 + clhs76;
        const double clhs93 =     std::pow(clhs78, -3.0L/2.0L);
        const double clhs94 =     clhs42*clhs72*clhs83*clhs91*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs95 =     clhs66 + 2*clhs69 + 2*clhs70 + clhs80;
        const double clhs96 =     std::pow(clhs82, -3.0L/2.0L);
        const double clhs97 =     clhs42*clhs72*clhs79*clhs87*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs98 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs99 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs100 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs101 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs102 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs103 =     clhs100*clhs3 + clhs101*clhs5 - clhs102*clhs8 - clhs7*clhs98;
        const double clhs104 =     clhs100*clhs11 + clhs101*clhs12 - clhs102*clhs14 - clhs13*clhs98;
        const double clhs105 =     clhs103*tangentetaslave(0,0) + clhs104*tangentetaslave(0,1);
        const double clhs106 =     clhs105*penalty_parameter*tangentetaslave(0,0);
        const double clhs107 =     clhs103*tangentxislave(0,0) + clhs104*tangentxislave(0,1);
        const double clhs108 =     clhs107*penalty_parameter*tangentxislave(0,0);
        const double clhs109 =     normalslave(0,0)*(clhs100*clhs24 + clhs101*clhs25 - clhs102*clhs27 - clhs26*clhs98) - normalslave(0,1)*(clhs0 - clhs100*clhs28 - clhs101*clhs29 + clhs102*clhs31 + clhs30*clhs98);
        const double clhs110 =     clhs109*normalslave(0,0)*penalty_parameter;
        const double clhs111 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs112 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs113 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs114 =     normalslave(1,0)*(clhs111*clhs24 + clhs112*clhs25 - clhs113*clhs27 - clhs26*clhs99) - normalslave(1,1)*(-clhs111*clhs28 - clhs112*clhs29 + clhs113*clhs31 + clhs30*clhs99 + clhs35);
        const double clhs115 =     clhs114*normalslave(1,0)*penalty_parameter;
        const double clhs116 =     clhs111*clhs3 + clhs112*clhs5 - clhs113*clhs8 - clhs7*clhs99;
        const double clhs117 =     clhs11*clhs111 + clhs112*clhs12 - clhs113*clhs14 - clhs13*clhs99;
        const double clhs118 =     clhs116*tangentetaslave(1,0) + clhs116*tangentxislave(1,0) + clhs117*tangentetaslave(1,1) + clhs117*tangentxislave(1,1);
        const double clhs119 =     clhs118*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs120 =     clhs119*clhs35;
        const double clhs121 =     clhs114*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs122 =     clhs105 + clhs107;
        const double clhs123 =     clhs122*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs124 =     clhs118*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs125 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs126 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs127 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs128 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs129 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs130 =     -clhs125*clhs7 + clhs127*clhs3 + clhs128*clhs5 - clhs129*clhs8;
        const double clhs131 =     clhs11*clhs127 + clhs12*clhs128 - clhs125*clhs13 - clhs129*clhs14;
        const double clhs132 =     clhs130*tangentetaslave(0,0) + clhs131*tangentetaslave(0,1);
        const double clhs133 =     clhs132*penalty_parameter*tangentetaslave(0,0);
        const double clhs134 =     clhs130*tangentxislave(0,0) + clhs131*tangentxislave(0,1);
        const double clhs135 =     clhs134*penalty_parameter*tangentxislave(0,0);
        const double clhs136 =     normalslave(0,1)*(-clhs125*clhs30 + clhs127*clhs28 + clhs128*clhs29 - clhs129*clhs31);
        const double clhs137 =     normalslave(0,0)*(clhs125*clhs26 - clhs127*clhs24 - clhs128*clhs25 + clhs129*clhs27 + clhs9);
        const double clhs138 =     -clhs136 + clhs137;
        const double clhs139 =     clhs138*normalslave(0,0)*penalty_parameter;
        const double clhs140 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs141 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs142 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs143 =     normalslave(1,1)*(-clhs126*clhs30 + clhs140*clhs28 + clhs141*clhs29 - clhs142*clhs31);
        const double clhs144 =     normalslave(1,0)*(clhs126*clhs26 - clhs140*clhs24 - clhs141*clhs25 + clhs142*clhs27 + clhs40);
        const double clhs145 =     -clhs143 + clhs144;
        const double clhs146 =     clhs145*normalslave(1,0)*penalty_parameter;
        const double clhs147 =     -clhs126*clhs7 + clhs140*clhs3 + clhs141*clhs5 - clhs142*clhs8;
        const double clhs148 =     clhs11*clhs140 + clhs12*clhs141 - clhs126*clhs13 - clhs14*clhs142;
        const double clhs149 =     clhs147*tangentetaslave(1,0) + clhs147*tangentxislave(1,0) + clhs148*tangentetaslave(1,1) + clhs148*tangentxislave(1,1);
        const double clhs150 =     clhs149*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs151 =     clhs150*clhs35;
        const double clhs152 =     clhs145*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs153 =     clhs132 + clhs134;
        const double clhs154 =     clhs153*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs155 =     clhs149*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs156 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs157 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs158 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs159 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs160 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs161 =     -clhs156*clhs7 + clhs158*clhs3 + clhs159*clhs5 - clhs160*clhs8;
        const double clhs162 =     clhs11*clhs158 + clhs12*clhs159 - clhs13*clhs156 - clhs14*clhs160;
        const double clhs163 =     clhs161*tangentetaslave(0,0) + clhs162*tangentetaslave(0,1);
        const double clhs164 =     clhs163*penalty_parameter*tangentetaslave(0,0);
        const double clhs165 =     clhs161*tangentxislave(0,0) + clhs162*tangentxislave(0,1);
        const double clhs166 =     clhs165*penalty_parameter*tangentxislave(0,0);
        const double clhs167 =     normalslave(0,0)*(-clhs156*clhs26 + clhs158*clhs24 + clhs159*clhs25 - clhs160*clhs27) - normalslave(0,1)*(clhs156*clhs30 - clhs158*clhs28 - clhs159*clhs29 + clhs160*clhs31 + clhs9);
        const double clhs168 =     clhs167*normalslave(0,0)*penalty_parameter;
        const double clhs169 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs170 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs171 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs172 =     normalslave(1,0)*(-clhs157*clhs26 + clhs169*clhs24 + clhs170*clhs25 - clhs171*clhs27) - normalslave(1,1)*(clhs157*clhs30 - clhs169*clhs28 - clhs170*clhs29 + clhs171*clhs31 + clhs40);
        const double clhs173 =     clhs172*normalslave(1,0)*penalty_parameter;
        const double clhs174 =     -clhs157*clhs7 + clhs169*clhs3 + clhs170*clhs5 - clhs171*clhs8;
        const double clhs175 =     clhs11*clhs169 + clhs12*clhs170 - clhs13*clhs157 - clhs14*clhs171;
        const double clhs176 =     clhs174*tangentetaslave(1,0) + clhs174*tangentxislave(1,0) + clhs175*tangentetaslave(1,1) + clhs175*tangentxislave(1,1);
        const double clhs177 =     clhs176*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs178 =     clhs177*clhs35;
        const double clhs179 =     clhs172*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs180 =     clhs163 + clhs165;
        const double clhs181 =     clhs180*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs182 =     clhs176*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs183 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs184 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs185 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs186 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs187 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs188 =     -clhs183*clhs7 + clhs185*clhs3 + clhs186*clhs5 - clhs187*clhs8;
        const double clhs189 =     clhs11*clhs185 + clhs12*clhs186 - clhs13*clhs183 - clhs14*clhs187;
        const double clhs190 =     clhs188*tangentetaslave(0,0) + clhs189*tangentetaslave(0,1);
        const double clhs191 =     clhs190*penalty_parameter*tangentetaslave(0,0);
        const double clhs192 =     clhs188*tangentxislave(0,0) + clhs189*tangentxislave(0,1);
        const double clhs193 =     clhs192*penalty_parameter*tangentxislave(0,0);
        const double clhs194 =     normalslave(0,0)*(-clhs183*clhs26 + clhs185*clhs24 + clhs186*clhs25 - clhs187*clhs27 + clhs4) + normalslave(0,1)*(-clhs183*clhs30 + clhs185*clhs28 + clhs186*clhs29 - clhs187*clhs31);
        const double clhs195 =     clhs194*normalslave(0,0)*penalty_parameter;
        const double clhs196 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs197 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs198 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs199 =     normalslave(1,0)*(-clhs184*clhs26 + clhs196*clhs24 + clhs197*clhs25 - clhs198*clhs27 + clhs38) + normalslave(1,1)*(-clhs184*clhs30 + clhs196*clhs28 + clhs197*clhs29 - clhs198*clhs31);
        const double clhs200 =     clhs199*normalslave(1,0)*penalty_parameter;
        const double clhs201 =     -clhs184*clhs7 + clhs196*clhs3 + clhs197*clhs5 - clhs198*clhs8;
        const double clhs202 =     clhs11*clhs196 + clhs12*clhs197 - clhs13*clhs184 - clhs14*clhs198;
        const double clhs203 =     clhs201*tangentetaslave(1,0) + clhs201*tangentxislave(1,0) + clhs202*tangentetaslave(1,1) + clhs202*tangentxislave(1,1);
        const double clhs204 =     clhs203*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs205 =     clhs204*clhs35;
        const double clhs206 =     clhs199*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs207 =     clhs190 + clhs192;
        const double clhs208 =     clhs207*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs209 =     clhs203*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs210 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs211 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs215 =     -clhs210*clhs7 + clhs212*clhs3 + clhs213*clhs5 - clhs214*clhs8;
        const double clhs216 =     clhs11*clhs212 + clhs12*clhs213 - clhs13*clhs210 - clhs14*clhs214;
        const double clhs217 =     clhs215*tangentetaslave(0,0) + clhs216*tangentetaslave(0,1);
        const double clhs218 =     clhs217*penalty_parameter*tangentetaslave(0,0);
        const double clhs219 =     clhs215*tangentxislave(0,0) + clhs216*tangentxislave(0,1);
        const double clhs220 =     clhs219*penalty_parameter*tangentxislave(0,0);
        const double clhs221 =     normalslave(0,0)*(-clhs210*clhs26 + clhs212*clhs24 + clhs213*clhs25 - clhs214*clhs27) + normalslave(0,1)*(-clhs210*clhs30 + clhs212*clhs28 + clhs213*clhs29 - clhs214*clhs31 + clhs4);
        const double clhs222 =     clhs221*normalslave(0,0)*penalty_parameter;
        const double clhs223 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs224 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs225 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs226 =     normalslave(1,0)*(-clhs211*clhs26 + clhs223*clhs24 + clhs224*clhs25 - clhs225*clhs27) + normalslave(1,1)*(-clhs211*clhs30 + clhs223*clhs28 + clhs224*clhs29 - clhs225*clhs31 + clhs38);
        const double clhs227 =     clhs226*normalslave(1,0)*penalty_parameter;
        const double clhs228 =     -clhs211*clhs7 + clhs223*clhs3 + clhs224*clhs5 - clhs225*clhs8;
        const double clhs229 =     clhs11*clhs223 + clhs12*clhs224 - clhs13*clhs211 - clhs14*clhs225;
        const double clhs230 =     clhs228*tangentetaslave(1,0) + clhs228*tangentxislave(1,0) + clhs229*tangentetaslave(1,1) + clhs229*tangentxislave(1,1);
        const double clhs231 =     clhs230*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs232 =     clhs231*clhs35;
        const double clhs233 =     clhs226*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs234 =     clhs217 + clhs219;
        const double clhs235 =     clhs234*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs236 =     clhs230*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs237 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs238 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs239 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs240 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs241 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs242 =     -clhs237*clhs7 + clhs239*clhs3 + clhs240*clhs5 - clhs241*clhs8;
        const double clhs243 =     clhs11*clhs239 + clhs12*clhs240 - clhs13*clhs237 - clhs14*clhs241;
        const double clhs244 =     clhs242*tangentetaslave(0,0) + clhs243*tangentetaslave(0,1);
        const double clhs245 =     clhs244*penalty_parameter*tangentetaslave(0,0);
        const double clhs246 =     clhs242*tangentxislave(0,0) + clhs243*tangentxislave(0,1);
        const double clhs247 =     clhs246*penalty_parameter*tangentxislave(0,0);
        const double clhs248 =     normalslave(0,0)*(-clhs237*clhs26 + clhs239*clhs24 + clhs240*clhs25 - clhs241*clhs27 + clhs6) + normalslave(0,1)*(-clhs237*clhs30 + clhs239*clhs28 + clhs240*clhs29 - clhs241*clhs31);
        const double clhs249 =     clhs248*normalslave(0,0)*penalty_parameter;
        const double clhs250 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs251 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs252 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs253 =     normalslave(1,0)*(-clhs238*clhs26 + clhs24*clhs250 + clhs25*clhs251 - clhs252*clhs27 + clhs39) + normalslave(1,1)*(-clhs238*clhs30 + clhs250*clhs28 + clhs251*clhs29 - clhs252*clhs31);
        const double clhs254 =     clhs253*normalslave(1,0)*penalty_parameter;
        const double clhs255 =     -clhs238*clhs7 + clhs250*clhs3 + clhs251*clhs5 - clhs252*clhs8;
        const double clhs256 =     clhs11*clhs250 + clhs12*clhs251 - clhs13*clhs238 - clhs14*clhs252;
        const double clhs257 =     clhs255*tangentetaslave(1,0) + clhs255*tangentxislave(1,0) + clhs256*tangentetaslave(1,1) + clhs256*tangentxislave(1,1);
        const double clhs258 =     clhs257*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs259 =     clhs258*clhs35;
        const double clhs260 =     clhs253*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs261 =     clhs244 + clhs246;
        const double clhs262 =     clhs261*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs263 =     clhs257*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs264 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs265 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs266 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs267 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs268 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs269 =     -clhs264*clhs7 + clhs266*clhs3 + clhs267*clhs5 - clhs268*clhs8;
        const double clhs270 =     clhs11*clhs266 + clhs12*clhs267 - clhs13*clhs264 - clhs14*clhs268;
        const double clhs271 =     clhs269*tangentetaslave(0,0) + clhs270*tangentetaslave(0,1);
        const double clhs272 =     clhs271*penalty_parameter*tangentetaslave(0,0);
        const double clhs273 =     clhs269*tangentxislave(0,0) + clhs270*tangentxislave(0,1);
        const double clhs274 =     clhs273*penalty_parameter*tangentxislave(0,0);
        const double clhs275 =     normalslave(0,0)*(clhs24*clhs266 + clhs25*clhs267 - clhs26*clhs264 - clhs268*clhs27) + normalslave(0,1)*(-clhs264*clhs30 + clhs266*clhs28 + clhs267*clhs29 - clhs268*clhs31 + clhs6);
        const double clhs276 =     clhs275*normalslave(0,0)*penalty_parameter;
        const double clhs277 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs278 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs279 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs280 =     normalslave(1,0)*(clhs24*clhs277 + clhs25*clhs278 - clhs26*clhs265 - clhs27*clhs279) + normalslave(1,1)*(-clhs265*clhs30 + clhs277*clhs28 + clhs278*clhs29 - clhs279*clhs31 + clhs39);
        const double clhs281 =     clhs280*normalslave(1,0)*penalty_parameter;
        const double clhs282 =     -clhs265*clhs7 + clhs277*clhs3 + clhs278*clhs5 - clhs279*clhs8;
        const double clhs283 =     clhs11*clhs277 + clhs12*clhs278 - clhs13*clhs265 - clhs14*clhs279;
        const double clhs284 =     clhs282*tangentetaslave(1,0) + clhs282*tangentxislave(1,0) + clhs283*tangentetaslave(1,1) + clhs283*tangentxislave(1,1);
        const double clhs285 =     clhs284*clhs42*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs286 =     clhs285*clhs35;
        const double clhs287 =     clhs280*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs288 =     clhs271 + clhs273;
        const double clhs289 =     clhs288*clhs42*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs290 =     clhs284*clhs42*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs291 =     std::pow(normalslave(0,0), 2);
        const double clhs292 =     std::pow(tangentetaslave(0,0), 2);
        const double clhs293 =     std::pow(tangentxislave(0,0), 2);
        const double clhs294 =     tangentetaslave(0,0)*tangentetaslave(0,1);
        const double clhs295 =     tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs296 =     clhs294 + clhs295;
        const double clhs297 =     clhs296*clhs77 + clhs75*(clhs292 + clhs293);
        const double clhs298 =     clhs297*clhs42*clhs72*clhs83*clhs93*mu[1];
        const double clhs299 =     normalslave(0,0)*normalslave(0,1);
        const double clhs300 =     clhs0*clhs294 + clhs0*clhs295 + clhs0*clhs299;
        const double clhs301 =     std::pow(tangentetaslave(0,1), 2);
        const double clhs302 =     std::pow(tangentxislave(0,1), 2);
        const double clhs303 =     clhs296*clhs75 + clhs77*(clhs301 + clhs302);
        const double clhs304 =     clhs303*clhs42*clhs72*clhs83*clhs93*mu[1];
        const double clhs305 =     std::pow(normalslave(1,0), 2);
        const double clhs306 =     clhs37 - clhs41;
        const double clhs307 =     std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2);
        const double clhs308 =     clhs307*clhs79*clhs83*mu[1];
        const double clhs309 =     clhs79*clhs83*mu[1]*normalslave(1,0);
        const double clhs310 =     clhs309*clhs72;
        const double clhs311 =     tangentetaslave(1,0)*tangentetaslave(1,1);
        const double clhs312 =     tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs313 =     clhs311 + clhs312;
        const double clhs314 =     clhs307*clhs72 + clhs313*clhs81;
        const double clhs315 =     clhs306*clhs314*clhs79*clhs96*mu[1];
        const double clhs316 =     scale_factor*(clhs305 - clhs306*clhs308 - clhs310 + clhs315*clhs72);
        const double clhs317 =     normalslave(1,0)*normalslave(1,1);
        const double clhs318 =     clhs313*clhs79*clhs83*mu[1];
        const double clhs319 =     -clhs306*clhs318 + clhs317;
        const double clhs320 =     clhs79*clhs83*mu[1]*normalslave(1,1);
        const double clhs321 =     clhs320*clhs72;
        const double clhs322 =     std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2);
        const double clhs323 =     clhs313*clhs72 + clhs322*clhs81;
        const double clhs324 =     clhs306*clhs323*clhs79*clhs96*mu[1];
        const double clhs325 =     scale_factor*(clhs319 - clhs321 + clhs324*clhs72);
        const double clhs326 =     clhs17*tangentetaslave(0,1);
        const double clhs327 =     clhs21*tangentxislave(0,1);
        const double clhs328 =     clhs33*normalslave(0,1);
        const double clhs329 =     clhs42*normalslave(1,1);
        const double clhs330 =     clhs49*penalty_parameter*tangentetaslave(0,1);
        const double clhs331 =     clhs51*penalty_parameter*tangentxislave(0,1);
        const double clhs332 =     clhs55*normalslave(0,1)*penalty_parameter;
        const double clhs333 =     clhs62*normalslave(1,1)*penalty_parameter;
        const double clhs334 =     clhs42*clhs79*clhs81*clhs83*mu[1];
        const double clhs335 =     clhs62*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs336 =     clhs42*clhs81*clhs83*clhs91*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs337 =     clhs42*clhs79*clhs81*clhs87*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs338 =     clhs105*penalty_parameter*tangentetaslave(0,1);
        const double clhs339 =     clhs107*penalty_parameter*tangentxislave(0,1);
        const double clhs340 =     clhs109*normalslave(0,1)*penalty_parameter;
        const double clhs341 =     clhs114*normalslave(1,1)*penalty_parameter;
        const double clhs342 =     clhs114*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs343 =     clhs122*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs344 =     clhs118*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs345 =     clhs132*penalty_parameter*tangentetaslave(0,1);
        const double clhs346 =     clhs134*penalty_parameter*tangentxislave(0,1);
        const double clhs347 =     clhs138*normalslave(0,1)*penalty_parameter;
        const double clhs348 =     clhs145*normalslave(1,1)*penalty_parameter;
        const double clhs349 =     clhs145*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs350 =     clhs153*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs351 =     clhs149*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs352 =     clhs163*penalty_parameter*tangentetaslave(0,1);
        const double clhs353 =     clhs165*penalty_parameter*tangentxislave(0,1);
        const double clhs354 =     clhs167*normalslave(0,1)*penalty_parameter;
        const double clhs355 =     clhs172*normalslave(1,1)*penalty_parameter;
        const double clhs356 =     clhs172*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs357 =     clhs180*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs358 =     clhs176*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs359 =     clhs190*penalty_parameter*tangentetaslave(0,1);
        const double clhs360 =     clhs192*penalty_parameter*tangentxislave(0,1);
        const double clhs361 =     clhs194*normalslave(0,1)*penalty_parameter;
        const double clhs362 =     clhs199*normalslave(1,1)*penalty_parameter;
        const double clhs363 =     clhs199*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs364 =     clhs207*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs365 =     clhs203*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs366 =     clhs217*penalty_parameter*tangentetaslave(0,1);
        const double clhs367 =     clhs219*penalty_parameter*tangentxislave(0,1);
        const double clhs368 =     clhs221*normalslave(0,1)*penalty_parameter;
        const double clhs369 =     clhs226*normalslave(1,1)*penalty_parameter;
        const double clhs370 =     clhs226*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs371 =     clhs234*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs372 =     clhs230*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs373 =     clhs244*penalty_parameter*tangentetaslave(0,1);
        const double clhs374 =     clhs246*penalty_parameter*tangentxislave(0,1);
        const double clhs375 =     clhs248*normalslave(0,1)*penalty_parameter;
        const double clhs376 =     clhs253*normalslave(1,1)*penalty_parameter;
        const double clhs377 =     clhs253*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs378 =     clhs261*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs379 =     clhs257*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs380 =     clhs271*penalty_parameter*tangentetaslave(0,1);
        const double clhs381 =     clhs273*penalty_parameter*tangentxislave(0,1);
        const double clhs382 =     clhs275*normalslave(0,1)*penalty_parameter;
        const double clhs383 =     clhs280*normalslave(1,1)*penalty_parameter;
        const double clhs384 =     clhs280*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs385 =     clhs288*clhs42*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs386 =     clhs284*clhs42*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs387 =     clhs297*clhs42*clhs81*clhs83*clhs93*mu[1];
        const double clhs388 =     std::pow(normalslave(0,1), 2);
        const double clhs389 =     clhs303*clhs42*clhs81*clhs83*clhs93*mu[1];
        const double clhs390 =     clhs309*clhs81;
        const double clhs391 =     scale_factor*(clhs315*clhs81 + clhs319 - clhs390);
        const double clhs392 =     std::pow(normalslave(1,1), 2);
        const double clhs393 =     clhs322*clhs79*clhs83*mu[1];
        const double clhs394 =     clhs320*clhs81;
        const double clhs395 =     scale_factor*(-clhs306*clhs393 + clhs324*clhs81 + clhs392 - clhs394);
        const double clhs396 =     clhs40*clhs88;
        const double clhs397 =     clhs119*clhs40;
        const double clhs398 =     clhs150*clhs40;
        const double clhs399 =     clhs177*clhs40;
        const double clhs400 =     clhs204*clhs40;
        const double clhs401 =     clhs231*clhs40;
        const double clhs402 =     clhs258*clhs40;
        const double clhs403 =     clhs285*clhs40;
        const double clhs404 =     clhs294*clhs9 + clhs295*clhs9 + clhs299*clhs9;
        const double clhs405 =     clhs23 - clhs32;
        const double clhs406 =     clhs405*normalslave(0,0);
        const double clhs407 =     clhs306*normalslave(1,0);
        const double clhs408 =     clhs53 - clhs54;
        const double clhs409 =     clhs408*normalslave(0,0)*penalty_parameter;
        const double clhs410 =     clhs60 - clhs61;
        const double clhs411 =     clhs410*normalslave(1,0)*penalty_parameter;
        const double clhs412 =     clhs306*clhs72*clhs79*clhs83*mu[1];
        const double clhs413 =     clhs306*clhs79*clhs83*clhs87*mu[1]*penalty_parameter;
        const double clhs414 =     clhs38*clhs413;
        const double clhs415 =     clhs410*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs416 =     clhs306*clhs72*clhs83*clhs91*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs417 =     clhs306*clhs72*clhs79*clhs87*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs418 =     clhs118*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs419 =     clhs38*clhs418;
        const double clhs420 =     clhs122*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs421 =     clhs118*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs422 =     clhs136 - clhs137;
        const double clhs423 =     clhs422*normalslave(0,0)*penalty_parameter;
        const double clhs424 =     clhs143 - clhs144;
        const double clhs425 =     clhs424*normalslave(1,0)*penalty_parameter;
        const double clhs426 =     clhs149*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs427 =     clhs38*clhs426;
        const double clhs428 =     clhs424*clhs72*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs429 =     clhs153*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs430 =     clhs149*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs431 =     clhs176*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs432 =     clhs38*clhs431;
        const double clhs433 =     clhs180*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs434 =     clhs176*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs435 =     clhs203*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs436 =     clhs38*clhs435;
        const double clhs437 =     clhs207*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs438 =     clhs203*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs439 =     clhs230*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs440 =     clhs38*clhs439;
        const double clhs441 =     clhs234*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs442 =     clhs230*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs443 =     clhs257*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs444 =     clhs38*clhs443;
        const double clhs445 =     clhs261*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs446 =     clhs257*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs447 =     clhs284*clhs306*clhs79*clhs83*mu[1]*penalty_parameter;
        const double clhs448 =     clhs38*clhs447;
        const double clhs449 =     clhs288*clhs306*clhs72*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs450 =     clhs284*clhs306*clhs72*clhs79*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs451 =     clhs297*clhs306*clhs72*clhs83*clhs93*mu[1];
        const double clhs452 =     clhs294*clhs4 + clhs295*clhs4 + clhs299*clhs4;
        const double clhs453 =     clhs303*clhs306*clhs72*clhs83*clhs93*mu[1];
        const double clhs454 =     clhs314*clhs42*clhs79*clhs96*mu[1];
        const double clhs455 =     -clhs308*clhs42 + clhs310 + clhs454*clhs72;
        const double clhs456 =     scale_factor*(-clhs305 + clhs455);
        const double clhs457 =     -clhs318*clhs42;
        const double clhs458 =     -clhs317 + clhs457;
        const double clhs459 =     clhs323*clhs42*clhs79*clhs96*mu[1];
        const double clhs460 =     clhs321 + clhs459*clhs72;
        const double clhs461 =     scale_factor*(clhs458 + clhs460);
        const double clhs462 =     clhs405*normalslave(0,1);
        const double clhs463 =     clhs306*normalslave(1,1);
        const double clhs464 =     clhs408*normalslave(0,1)*penalty_parameter;
        const double clhs465 =     clhs410*normalslave(1,1)*penalty_parameter;
        const double clhs466 =     clhs306*clhs79*clhs81*clhs83*mu[1];
        const double clhs467 =     clhs410*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs468 =     clhs306*clhs81*clhs83*clhs91*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs469 =     clhs306*clhs79*clhs81*clhs87*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs470 =     clhs122*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs471 =     clhs118*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs472 =     clhs422*normalslave(0,1)*penalty_parameter;
        const double clhs473 =     clhs424*normalslave(1,1)*penalty_parameter;
        const double clhs474 =     clhs424*clhs79*clhs81*clhs83*mu[1]*penalty_parameter;
        const double clhs475 =     clhs153*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs476 =     clhs149*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs477 =     clhs180*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs478 =     clhs176*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs479 =     clhs207*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs480 =     clhs203*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs481 =     clhs234*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs482 =     clhs230*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs483 =     clhs261*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs484 =     clhs257*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs485 =     clhs288*clhs306*clhs81*clhs83*clhs92*clhs93*mu[1]*penalty_parameter;
        const double clhs486 =     clhs284*clhs306*clhs79*clhs81*clhs95*clhs96*mu[1]*penalty_parameter;
        const double clhs487 =     clhs297*clhs306*clhs81*clhs83*clhs93*mu[1];
        const double clhs488 =     clhs303*clhs306*clhs81*clhs83*clhs93*mu[1];
        const double clhs489 =     clhs390 + clhs454*clhs81;
        const double clhs490 =     scale_factor*(clhs458 + clhs489);
        const double clhs491 =     -clhs393*clhs42 + clhs394 + clhs459*clhs81;
        const double clhs492 =     scale_factor*(-clhs392 + clhs491);
        const double clhs493 =     clhs39*clhs413;
        const double clhs494 =     clhs39*clhs418;
        const double clhs495 =     clhs39*clhs426;
        const double clhs496 =     clhs39*clhs431;
        const double clhs497 =     clhs39*clhs435;
        const double clhs498 =     clhs39*clhs439;
        const double clhs499 =     clhs39*clhs443;
        const double clhs500 =     clhs39*clhs447;
        const double clhs501 =     clhs294*clhs6 + clhs295*clhs6 + clhs299*clhs6;
        const double clhs502 =     0.5*clhs307*clhs79*clhs83*mu[1];
        const double clhs503 =     clhs306*clhs87;
        const double clhs504 =     -clhs503;
        const double clhs505 =     1.0/clhs78;
        const double clhs506 =     clhs306*clhs505*clhs72*clhs92;
        const double clhs507 =     1.0/clhs82;
        const double clhs508 =     clhs507*clhs72*clhs95;
        const double clhs509 =     clhs410*clhs72 + clhs503*clhs508 + clhs504 + clhs506*clhs91;
        const double clhs510 =     0.5*clhs313*clhs79*clhs83*mu[1];
        const double clhs511 =     clhs306*clhs505*clhs81*clhs92;
        const double clhs512 =     clhs507*clhs81*clhs95;
        const double clhs513 =     clhs410*clhs81 + clhs503*clhs512 + clhs504 + clhs511*clhs91;
        const double clhs514 =     clhs118*clhs306;
        const double clhs515 =     -clhs514;
        const double clhs516 =     clhs114*clhs72 + clhs122*clhs506 + clhs508*clhs514 + clhs515;
        const double clhs517 =     clhs114*clhs81 + clhs122*clhs511 + clhs512*clhs514 + clhs515;
        const double clhs518 =     clhs149*clhs306;
        const double clhs519 =     -clhs518;
        const double clhs520 =     clhs153*clhs506 + clhs424*clhs72 + clhs508*clhs518 + clhs519;
        const double clhs521 =     clhs153*clhs511 + clhs424*clhs81 + clhs512*clhs518 + clhs519;
        const double clhs522 =     clhs176*clhs306;
        const double clhs523 =     -clhs522;
        const double clhs524 =     clhs172*clhs72 + clhs180*clhs506 + clhs508*clhs522 + clhs523;
        const double clhs525 =     clhs172*clhs81 + clhs180*clhs511 + clhs512*clhs522 + clhs523;
        const double clhs526 =     clhs203*clhs306;
        const double clhs527 =     -clhs526;
        const double clhs528 =     clhs199*clhs72 + clhs207*clhs506 + clhs508*clhs526 + clhs527;
        const double clhs529 =     clhs199*clhs81 + clhs207*clhs511 + clhs512*clhs526 + clhs527;
        const double clhs530 =     clhs230*clhs306;
        const double clhs531 =     -clhs530;
        const double clhs532 =     clhs226*clhs72 + clhs234*clhs506 + clhs508*clhs530 + clhs531;
        const double clhs533 =     clhs226*clhs81 + clhs234*clhs511 + clhs512*clhs530 + clhs531;
        const double clhs534 =     clhs257*clhs306;
        const double clhs535 =     -clhs534;
        const double clhs536 =     clhs253*clhs72 + clhs261*clhs506 + clhs508*clhs534 + clhs535;
        const double clhs537 =     clhs253*clhs81 + clhs261*clhs511 + clhs512*clhs534 + clhs535;
        const double clhs538 =     clhs284*clhs306;
        const double clhs539 =     -clhs538;
        const double clhs540 =     clhs280*clhs72 + clhs288*clhs506 + clhs508*clhs538 + clhs539;
        const double clhs541 =     clhs280*clhs81 + clhs288*clhs511 + clhs512*clhs538 + clhs539;
        const double clhs542 =     1.0/penalty_parameter;
        const double clhs543 =     std::pow(scale_factor, 2);
        const double clhs544 =     0.5*clhs297*clhs306*clhs542*clhs543*clhs83*clhs93*mu[1];
        const double clhs545 =     0.5*clhs303*clhs306*clhs542*clhs543*clhs83*clhs93*mu[1];
        const double clhs546 =     0.5*clhs542*clhs543;
        const double clhs547 =     clhs307 + clhs455;
        const double clhs548 =     clhs311 + clhs312 + clhs457;
        const double clhs549 =     clhs489 + clhs548;
        const double clhs550 =     clhs460 + clhs548;
        const double clhs551 =     clhs322 + clhs491;
        const double clhs552 =     0.5*clhs322*clhs79*clhs83*mu[1];
    
        lhs(0,0)=clhs0*clhs50 + clhs0*clhs52 + clhs0*clhs56 + clhs1*clhs18 + clhs1*clhs22 - clhs1*clhs34 + clhs35*clhs63 - clhs35*clhs90 - clhs35*clhs94 - clhs35*clhs97 - clhs36*clhs43 + clhs36*clhs84 + clhs89;
        lhs(0,1)=clhs0*clhs106 + clhs0*clhs108 - clhs0*clhs110 - clhs115*clhs35 + clhs120 + clhs121*clhs35 - clhs123*clhs35 - clhs124*clhs35 + clhs18*clhs98 + clhs22*clhs98 - clhs34*clhs98 - clhs43*clhs99 + clhs84*clhs99;
        lhs(0,2)=clhs0*clhs133 + clhs0*clhs135 + clhs0*clhs139 + clhs125*clhs18 + clhs125*clhs22 - clhs125*clhs34 - clhs126*clhs43 + clhs126*clhs84 + clhs146*clhs35 + clhs151 - clhs152*clhs35 - clhs154*clhs35 - clhs155*clhs35;
        lhs(0,3)=clhs0*clhs164 + clhs0*clhs166 - clhs0*clhs168 + clhs156*clhs18 + clhs156*clhs22 - clhs156*clhs34 - clhs157*clhs43 + clhs157*clhs84 - clhs173*clhs35 + clhs178 + clhs179*clhs35 - clhs181*clhs35 - clhs182*clhs35;
        lhs(0,4)=clhs0*clhs191 + clhs0*clhs193 - clhs0*clhs195 + clhs18*clhs183 + clhs183*clhs22 - clhs183*clhs34 - clhs184*clhs43 + clhs184*clhs84 - clhs200*clhs35 + clhs205 + clhs206*clhs35 - clhs208*clhs35 - clhs209*clhs35;
        lhs(0,5)=clhs0*clhs218 + clhs0*clhs220 - clhs0*clhs222 + clhs18*clhs210 + clhs210*clhs22 - clhs210*clhs34 - clhs211*clhs43 + clhs211*clhs84 - clhs227*clhs35 + clhs232 + clhs233*clhs35 - clhs235*clhs35 - clhs236*clhs35;
        lhs(0,6)=clhs0*clhs245 + clhs0*clhs247 - clhs0*clhs249 + clhs18*clhs237 + clhs22*clhs237 - clhs237*clhs34 - clhs238*clhs43 + clhs238*clhs84 - clhs254*clhs35 + clhs259 + clhs260*clhs35 - clhs262*clhs35 - clhs263*clhs35;
        lhs(0,7)=clhs0*clhs272 + clhs0*clhs274 - clhs0*clhs276 + clhs18*clhs264 + clhs22*clhs264 - clhs264*clhs34 - clhs265*clhs43 + clhs265*clhs84 - clhs281*clhs35 + clhs286 + clhs287*clhs35 - clhs289*clhs35 - clhs290*clhs35;
        lhs(0,8)=scale_factor*(clhs0*clhs291 + clhs0*clhs292 + clhs0*clhs293 - clhs298*clhs35);
        lhs(0,9)=scale_factor*(clhs300 - clhs304*clhs35);
        lhs(0,10)=clhs316*clhs35;
        lhs(0,11)=clhs325*clhs35;
        lhs(1,0)=clhs0*clhs330 + clhs0*clhs331 + clhs0*clhs332 + clhs1*clhs326 + clhs1*clhs327 - clhs1*clhs328 - clhs329*clhs36 + clhs333*clhs35 + clhs334*clhs36 - clhs335*clhs35 - clhs336*clhs35 - clhs337*clhs35 + clhs89;
        lhs(1,1)=clhs0*clhs338 + clhs0*clhs339 - clhs0*clhs340 + clhs120 + clhs326*clhs98 + clhs327*clhs98 - clhs328*clhs98 - clhs329*clhs99 + clhs334*clhs99 - clhs341*clhs35 + clhs342*clhs35 - clhs343*clhs35 - clhs344*clhs35;
        lhs(1,2)=clhs0*clhs345 + clhs0*clhs346 + clhs0*clhs347 + clhs125*clhs326 + clhs125*clhs327 - clhs125*clhs328 - clhs126*clhs329 + clhs126*clhs334 + clhs151 + clhs348*clhs35 - clhs349*clhs35 - clhs35*clhs350 - clhs35*clhs351;
        lhs(1,3)=clhs0*clhs352 + clhs0*clhs353 - clhs0*clhs354 + clhs156*clhs326 + clhs156*clhs327 - clhs156*clhs328 - clhs157*clhs329 + clhs157*clhs334 + clhs178 - clhs35*clhs355 + clhs35*clhs356 - clhs35*clhs357 - clhs35*clhs358;
        lhs(1,4)=clhs0*clhs359 + clhs0*clhs360 - clhs0*clhs361 + clhs183*clhs326 + clhs183*clhs327 - clhs183*clhs328 - clhs184*clhs329 + clhs184*clhs334 + clhs205 - clhs35*clhs362 + clhs35*clhs363 - clhs35*clhs364 - clhs35*clhs365;
        lhs(1,5)=clhs0*clhs366 + clhs0*clhs367 - clhs0*clhs368 + clhs210*clhs326 + clhs210*clhs327 - clhs210*clhs328 - clhs211*clhs329 + clhs211*clhs334 + clhs232 - clhs35*clhs369 + clhs35*clhs370 - clhs35*clhs371 - clhs35*clhs372;
        lhs(1,6)=clhs0*clhs373 + clhs0*clhs374 - clhs0*clhs375 + clhs237*clhs326 + clhs237*clhs327 - clhs237*clhs328 - clhs238*clhs329 + clhs238*clhs334 + clhs259 - clhs35*clhs376 + clhs35*clhs377 - clhs35*clhs378 - clhs35*clhs379;
        lhs(1,7)=clhs0*clhs380 + clhs0*clhs381 - clhs0*clhs382 + clhs264*clhs326 + clhs264*clhs327 - clhs264*clhs328 - clhs265*clhs329 + clhs265*clhs334 + clhs286 - clhs35*clhs383 + clhs35*clhs384 - clhs35*clhs385 - clhs35*clhs386;
        lhs(1,8)=scale_factor*(clhs300 - clhs35*clhs387);
        lhs(1,9)=scale_factor*(clhs0*clhs301 + clhs0*clhs302 + clhs0*clhs388 - clhs35*clhs389);
        lhs(1,10)=clhs35*clhs391;
        lhs(1,11)=clhs35*clhs395;
        lhs(2,0)=clhs18*clhs46 + clhs22*clhs46 - clhs34*clhs46 + clhs396 + clhs40*clhs63 - clhs40*clhs90 - clhs40*clhs94 - clhs40*clhs97 - clhs43*clhs59 + clhs50*clhs9 + clhs52*clhs9 + clhs56*clhs9 + clhs59*clhs84;
        lhs(2,1)=clhs102*clhs18 + clhs102*clhs22 - clhs102*clhs34 + clhs106*clhs9 + clhs108*clhs9 - clhs110*clhs9 - clhs113*clhs43 + clhs113*clhs84 - clhs115*clhs40 + clhs121*clhs40 - clhs123*clhs40 - clhs124*clhs40 + clhs397;
        lhs(2,2)=clhs129*clhs18 + clhs129*clhs22 - clhs129*clhs34 + clhs133*clhs9 + clhs135*clhs9 + clhs139*clhs9 - clhs142*clhs43 + clhs142*clhs84 + clhs146*clhs40 - clhs152*clhs40 - clhs154*clhs40 - clhs155*clhs40 + clhs398;
        lhs(2,3)=clhs160*clhs18 + clhs160*clhs22 - clhs160*clhs34 + clhs164*clhs9 + clhs166*clhs9 - clhs168*clhs9 - clhs171*clhs43 + clhs171*clhs84 - clhs173*clhs40 + clhs179*clhs40 - clhs181*clhs40 - clhs182*clhs40 + clhs399;
        lhs(2,4)=clhs18*clhs187 + clhs187*clhs22 - clhs187*clhs34 + clhs191*clhs9 + clhs193*clhs9 - clhs195*clhs9 - clhs198*clhs43 + clhs198*clhs84 - clhs200*clhs40 + clhs206*clhs40 - clhs208*clhs40 - clhs209*clhs40 + clhs400;
        lhs(2,5)=clhs18*clhs214 + clhs214*clhs22 - clhs214*clhs34 + clhs218*clhs9 + clhs220*clhs9 - clhs222*clhs9 - clhs225*clhs43 + clhs225*clhs84 - clhs227*clhs40 + clhs233*clhs40 - clhs235*clhs40 - clhs236*clhs40 + clhs401;
        lhs(2,6)=clhs18*clhs241 + clhs22*clhs241 - clhs241*clhs34 + clhs245*clhs9 + clhs247*clhs9 - clhs249*clhs9 - clhs252*clhs43 + clhs252*clhs84 - clhs254*clhs40 + clhs260*clhs40 - clhs262*clhs40 - clhs263*clhs40 + clhs402;
        lhs(2,7)=clhs18*clhs268 + clhs22*clhs268 - clhs268*clhs34 + clhs272*clhs9 + clhs274*clhs9 - clhs276*clhs9 - clhs279*clhs43 + clhs279*clhs84 - clhs281*clhs40 + clhs287*clhs40 - clhs289*clhs40 - clhs290*clhs40 + clhs403;
        lhs(2,8)=scale_factor*(clhs291*clhs9 + clhs292*clhs9 + clhs293*clhs9 - clhs298*clhs40);
        lhs(2,9)=scale_factor*(-clhs304*clhs40 + clhs404);
        lhs(2,10)=clhs316*clhs40;
        lhs(2,11)=clhs325*clhs40;
        lhs(3,0)=clhs326*clhs46 + clhs327*clhs46 - clhs328*clhs46 - clhs329*clhs59 + clhs330*clhs9 + clhs331*clhs9 + clhs332*clhs9 + clhs333*clhs40 + clhs334*clhs59 - clhs335*clhs40 - clhs336*clhs40 - clhs337*clhs40 + clhs396;
        lhs(3,1)=clhs102*clhs326 + clhs102*clhs327 - clhs102*clhs328 - clhs113*clhs329 + clhs113*clhs334 + clhs338*clhs9 + clhs339*clhs9 - clhs340*clhs9 - clhs341*clhs40 + clhs342*clhs40 - clhs343*clhs40 - clhs344*clhs40 + clhs397;
        lhs(3,2)=clhs129*clhs326 + clhs129*clhs327 - clhs129*clhs328 - clhs142*clhs329 + clhs142*clhs334 + clhs345*clhs9 + clhs346*clhs9 + clhs347*clhs9 + clhs348*clhs40 - clhs349*clhs40 - clhs350*clhs40 - clhs351*clhs40 + clhs398;
        lhs(3,3)=clhs160*clhs326 + clhs160*clhs327 - clhs160*clhs328 - clhs171*clhs329 + clhs171*clhs334 + clhs352*clhs9 + clhs353*clhs9 - clhs354*clhs9 - clhs355*clhs40 + clhs356*clhs40 - clhs357*clhs40 - clhs358*clhs40 + clhs399;
        lhs(3,4)=clhs187*clhs326 + clhs187*clhs327 - clhs187*clhs328 - clhs198*clhs329 + clhs198*clhs334 + clhs359*clhs9 + clhs360*clhs9 - clhs361*clhs9 - clhs362*clhs40 + clhs363*clhs40 - clhs364*clhs40 - clhs365*clhs40 + clhs400;
        lhs(3,5)=clhs214*clhs326 + clhs214*clhs327 - clhs214*clhs328 - clhs225*clhs329 + clhs225*clhs334 + clhs366*clhs9 + clhs367*clhs9 - clhs368*clhs9 - clhs369*clhs40 + clhs370*clhs40 - clhs371*clhs40 - clhs372*clhs40 + clhs401;
        lhs(3,6)=clhs241*clhs326 + clhs241*clhs327 - clhs241*clhs328 - clhs252*clhs329 + clhs252*clhs334 + clhs373*clhs9 + clhs374*clhs9 - clhs375*clhs9 - clhs376*clhs40 + clhs377*clhs40 - clhs378*clhs40 - clhs379*clhs40 + clhs402;
        lhs(3,7)=clhs268*clhs326 + clhs268*clhs327 - clhs268*clhs328 - clhs279*clhs329 + clhs279*clhs334 + clhs380*clhs9 + clhs381*clhs9 - clhs382*clhs9 - clhs383*clhs40 + clhs384*clhs40 - clhs385*clhs40 - clhs386*clhs40 + clhs403;
        lhs(3,8)=scale_factor*(-clhs387*clhs40 + clhs404);
        lhs(3,9)=scale_factor*(clhs301*clhs9 + clhs302*clhs9 + clhs388*clhs9 - clhs389*clhs40);
        lhs(3,10)=clhs391*clhs40;
        lhs(3,11)=clhs395*clhs40;
        lhs(4,0)=-clhs18*clhs44 - clhs22*clhs44 + clhs38*clhs411 - clhs38*clhs415 - clhs38*clhs416 - clhs38*clhs417 + clhs4*clhs409 - clhs4*clhs50 - clhs4*clhs52 - clhs406*clhs44 - clhs407*clhs57 + clhs412*clhs57 + clhs414;
        lhs(4,1)=-clhs100*clhs18 - clhs100*clhs22 - clhs100*clhs406 - clhs106*clhs4 - clhs108*clhs4 + clhs110*clhs4 - clhs111*clhs407 + clhs111*clhs412 + clhs115*clhs38 - clhs121*clhs38 - clhs38*clhs420 - clhs38*clhs421 + clhs419;
        lhs(4,2)=-clhs127*clhs18 - clhs127*clhs22 - clhs127*clhs406 - clhs133*clhs4 - clhs135*clhs4 - clhs140*clhs407 + clhs140*clhs412 + clhs38*clhs425 - clhs38*clhs428 - clhs38*clhs429 - clhs38*clhs430 + clhs4*clhs423 + clhs427;
        lhs(4,3)=-clhs158*clhs18 - clhs158*clhs22 - clhs158*clhs406 - clhs164*clhs4 - clhs166*clhs4 + clhs168*clhs4 - clhs169*clhs407 + clhs169*clhs412 + clhs173*clhs38 - clhs179*clhs38 - clhs38*clhs433 - clhs38*clhs434 + clhs432;
        lhs(4,4)=-clhs18*clhs185 - clhs185*clhs22 - clhs185*clhs406 - clhs191*clhs4 - clhs193*clhs4 + clhs195*clhs4 - clhs196*clhs407 + clhs196*clhs412 + clhs200*clhs38 - clhs206*clhs38 - clhs38*clhs437 - clhs38*clhs438 + clhs436;
        lhs(4,5)=-clhs18*clhs212 - clhs212*clhs22 - clhs212*clhs406 - clhs218*clhs4 - clhs220*clhs4 + clhs222*clhs4 - clhs223*clhs407 + clhs223*clhs412 + clhs227*clhs38 - clhs233*clhs38 - clhs38*clhs441 - clhs38*clhs442 + clhs440;
        lhs(4,6)=-clhs18*clhs239 - clhs22*clhs239 - clhs239*clhs406 - clhs245*clhs4 - clhs247*clhs4 + clhs249*clhs4 - clhs250*clhs407 + clhs250*clhs412 + clhs254*clhs38 - clhs260*clhs38 - clhs38*clhs445 - clhs38*clhs446 + clhs444;
        lhs(4,7)=-clhs18*clhs266 - clhs22*clhs266 - clhs266*clhs406 - clhs272*clhs4 - clhs274*clhs4 + clhs276*clhs4 - clhs277*clhs407 + clhs277*clhs412 + clhs281*clhs38 - clhs287*clhs38 - clhs38*clhs449 - clhs38*clhs450 + clhs448;
        lhs(4,8)=-scale_factor*(clhs291*clhs4 + clhs292*clhs4 + clhs293*clhs4 + clhs38*clhs451);
        lhs(4,9)=-scale_factor*(clhs38*clhs453 + clhs452);
        lhs(4,10)=clhs38*clhs456;
        lhs(4,11)=clhs38*clhs461;
        lhs(5,0)=-clhs326*clhs44 - clhs327*clhs44 - clhs330*clhs4 - clhs331*clhs4 + clhs38*clhs465 - clhs38*clhs467 - clhs38*clhs468 - clhs38*clhs469 + clhs4*clhs464 + clhs414 - clhs44*clhs462 - clhs463*clhs57 + clhs466*clhs57;
        lhs(5,1)=-clhs100*clhs326 - clhs100*clhs327 - clhs100*clhs462 - clhs111*clhs463 + clhs111*clhs466 - clhs338*clhs4 - clhs339*clhs4 + clhs340*clhs4 + clhs341*clhs38 - clhs342*clhs38 - clhs38*clhs470 - clhs38*clhs471 + clhs419;
        lhs(5,2)=-clhs127*clhs326 - clhs127*clhs327 - clhs127*clhs462 - clhs140*clhs463 + clhs140*clhs466 - clhs345*clhs4 - clhs346*clhs4 + clhs38*clhs473 - clhs38*clhs474 - clhs38*clhs475 - clhs38*clhs476 + clhs4*clhs472 + clhs427;
        lhs(5,3)=-clhs158*clhs326 - clhs158*clhs327 - clhs158*clhs462 - clhs169*clhs463 + clhs169*clhs466 - clhs352*clhs4 - clhs353*clhs4 + clhs354*clhs4 + clhs355*clhs38 - clhs356*clhs38 - clhs38*clhs477 - clhs38*clhs478 + clhs432;
        lhs(5,4)=-clhs185*clhs326 - clhs185*clhs327 - clhs185*clhs462 - clhs196*clhs463 + clhs196*clhs466 - clhs359*clhs4 - clhs360*clhs4 + clhs361*clhs4 + clhs362*clhs38 - clhs363*clhs38 - clhs38*clhs479 - clhs38*clhs480 + clhs436;
        lhs(5,5)=-clhs212*clhs326 - clhs212*clhs327 - clhs212*clhs462 - clhs223*clhs463 + clhs223*clhs466 - clhs366*clhs4 - clhs367*clhs4 + clhs368*clhs4 + clhs369*clhs38 - clhs370*clhs38 - clhs38*clhs481 - clhs38*clhs482 + clhs440;
        lhs(5,6)=-clhs239*clhs326 - clhs239*clhs327 - clhs239*clhs462 - clhs250*clhs463 + clhs250*clhs466 - clhs373*clhs4 - clhs374*clhs4 + clhs375*clhs4 + clhs376*clhs38 - clhs377*clhs38 - clhs38*clhs483 - clhs38*clhs484 + clhs444;
        lhs(5,7)=-clhs266*clhs326 - clhs266*clhs327 - clhs266*clhs462 - clhs277*clhs463 + clhs277*clhs466 + clhs38*clhs383 - clhs38*clhs384 - clhs38*clhs485 - clhs38*clhs486 - clhs380*clhs4 - clhs381*clhs4 + clhs382*clhs4 + clhs448;
        lhs(5,8)=-scale_factor*(clhs38*clhs487 + clhs452);
        lhs(5,9)=-scale_factor*(clhs301*clhs4 + clhs302*clhs4 + clhs38*clhs488 + clhs388*clhs4);
        lhs(5,10)=clhs38*clhs490;
        lhs(5,11)=clhs38*clhs492;
        lhs(6,0)=-clhs18*clhs45 - clhs22*clhs45 + clhs39*clhs411 - clhs39*clhs415 - clhs39*clhs416 - clhs39*clhs417 - clhs406*clhs45 - clhs407*clhs58 + clhs409*clhs6 + clhs412*clhs58 + clhs493 - clhs50*clhs6 - clhs52*clhs6;
        lhs(6,1)=-clhs101*clhs18 - clhs101*clhs22 - clhs101*clhs406 - clhs106*clhs6 - clhs108*clhs6 + clhs110*clhs6 - clhs112*clhs407 + clhs112*clhs412 + clhs115*clhs39 - clhs121*clhs39 - clhs39*clhs420 - clhs39*clhs421 + clhs494;
        lhs(6,2)=-clhs128*clhs18 - clhs128*clhs22 - clhs128*clhs406 - clhs133*clhs6 - clhs135*clhs6 - clhs141*clhs407 + clhs141*clhs412 + clhs39*clhs425 - clhs39*clhs428 - clhs39*clhs429 - clhs39*clhs430 + clhs423*clhs6 + clhs495;
        lhs(6,3)=-clhs159*clhs18 - clhs159*clhs22 - clhs159*clhs406 - clhs164*clhs6 - clhs166*clhs6 + clhs168*clhs6 - clhs170*clhs407 + clhs170*clhs412 + clhs173*clhs39 - clhs179*clhs39 - clhs39*clhs433 - clhs39*clhs434 + clhs496;
        lhs(6,4)=-clhs18*clhs186 - clhs186*clhs22 - clhs186*clhs406 - clhs191*clhs6 - clhs193*clhs6 + clhs195*clhs6 - clhs197*clhs407 + clhs197*clhs412 + clhs200*clhs39 - clhs206*clhs39 - clhs39*clhs437 - clhs39*clhs438 + clhs497;
        lhs(6,5)=-clhs18*clhs213 - clhs213*clhs22 - clhs213*clhs406 - clhs218*clhs6 - clhs220*clhs6 + clhs222*clhs6 - clhs224*clhs407 + clhs224*clhs412 + clhs227*clhs39 - clhs233*clhs39 - clhs39*clhs441 - clhs39*clhs442 + clhs498;
        lhs(6,6)=-clhs18*clhs240 - clhs22*clhs240 - clhs240*clhs406 - clhs245*clhs6 - clhs247*clhs6 + clhs249*clhs6 - clhs251*clhs407 + clhs251*clhs412 + clhs254*clhs39 - clhs260*clhs39 - clhs39*clhs445 - clhs39*clhs446 + clhs499;
        lhs(6,7)=-clhs18*clhs267 - clhs22*clhs267 - clhs267*clhs406 - clhs272*clhs6 - clhs274*clhs6 + clhs276*clhs6 - clhs278*clhs407 + clhs278*clhs412 + clhs281*clhs39 - clhs287*clhs39 - clhs39*clhs449 - clhs39*clhs450 + clhs500;
        lhs(6,8)=-scale_factor*(clhs291*clhs6 + clhs292*clhs6 + clhs293*clhs6 + clhs39*clhs451);
        lhs(6,9)=-scale_factor*(clhs39*clhs453 + clhs501);
        lhs(6,10)=clhs39*clhs456;
        lhs(6,11)=clhs39*clhs461;
        lhs(7,0)=-clhs326*clhs45 - clhs327*clhs45 - clhs330*clhs6 - clhs331*clhs6 + clhs39*clhs465 - clhs39*clhs467 - clhs39*clhs468 - clhs39*clhs469 - clhs45*clhs462 - clhs463*clhs58 + clhs464*clhs6 + clhs466*clhs58 + clhs493;
        lhs(7,1)=-clhs101*clhs326 - clhs101*clhs327 - clhs101*clhs462 - clhs112*clhs463 + clhs112*clhs466 - clhs338*clhs6 - clhs339*clhs6 + clhs340*clhs6 + clhs341*clhs39 - clhs342*clhs39 - clhs39*clhs470 - clhs39*clhs471 + clhs494;
        lhs(7,2)=-clhs128*clhs326 - clhs128*clhs327 - clhs128*clhs462 - clhs141*clhs463 + clhs141*clhs466 - clhs345*clhs6 - clhs346*clhs6 + clhs39*clhs473 - clhs39*clhs474 - clhs39*clhs475 - clhs39*clhs476 + clhs472*clhs6 + clhs495;
        lhs(7,3)=-clhs159*clhs326 - clhs159*clhs327 - clhs159*clhs462 - clhs170*clhs463 + clhs170*clhs466 - clhs352*clhs6 - clhs353*clhs6 + clhs354*clhs6 + clhs355*clhs39 - clhs356*clhs39 - clhs39*clhs477 - clhs39*clhs478 + clhs496;
        lhs(7,4)=-clhs186*clhs326 - clhs186*clhs327 - clhs186*clhs462 - clhs197*clhs463 + clhs197*clhs466 - clhs359*clhs6 - clhs360*clhs6 + clhs361*clhs6 + clhs362*clhs39 - clhs363*clhs39 - clhs39*clhs479 - clhs39*clhs480 + clhs497;
        lhs(7,5)=-clhs213*clhs326 - clhs213*clhs327 - clhs213*clhs462 - clhs224*clhs463 + clhs224*clhs466 - clhs366*clhs6 - clhs367*clhs6 + clhs368*clhs6 + clhs369*clhs39 - clhs370*clhs39 - clhs39*clhs481 - clhs39*clhs482 + clhs498;
        lhs(7,6)=-clhs240*clhs326 - clhs240*clhs327 - clhs240*clhs462 - clhs251*clhs463 + clhs251*clhs466 - clhs373*clhs6 - clhs374*clhs6 + clhs375*clhs6 + clhs376*clhs39 - clhs377*clhs39 - clhs39*clhs483 - clhs39*clhs484 + clhs499;
        lhs(7,7)=-clhs267*clhs326 - clhs267*clhs327 - clhs267*clhs462 - clhs278*clhs463 + clhs278*clhs466 - clhs380*clhs6 - clhs381*clhs6 + clhs382*clhs6 + clhs383*clhs39 - clhs384*clhs39 - clhs39*clhs485 - clhs39*clhs486 + clhs500;
        lhs(7,8)=-scale_factor*(clhs39*clhs487 + clhs501);
        lhs(7,9)=-scale_factor*(clhs301*clhs6 + clhs302*clhs6 + clhs388*clhs6 + clhs39*clhs488);
        lhs(7,10)=clhs39*clhs490;
        lhs(7,11)=clhs39*clhs492;
        lhs(8,0)=scale_factor*(clhs408*normalslave(0,0) - clhs49*tangentetaslave(0,0) - clhs51*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs105*tangentetaslave(0,0) - clhs107*tangentxislave(0,0) + clhs109*normalslave(0,0));
        lhs(8,2)=scale_factor*(-clhs132*tangentetaslave(0,0) - clhs134*tangentxislave(0,0) + clhs422*normalslave(0,0));
        lhs(8,3)=scale_factor*(-clhs163*tangentetaslave(0,0) - clhs165*tangentxislave(0,0) + clhs167*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs190*tangentetaslave(0,0) - clhs192*tangentxislave(0,0) + clhs194*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs217*tangentetaslave(0,0) - clhs219*tangentxislave(0,0) + clhs221*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs244*tangentetaslave(0,0) - clhs246*tangentxislave(0,0) + clhs248*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs271*tangentetaslave(0,0) - clhs273*tangentxislave(0,0) + clhs275*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs408*normalslave(0,1) - clhs49*tangentetaslave(0,1) - clhs51*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs105*tangentetaslave(0,1) - clhs107*tangentxislave(0,1) + clhs109*normalslave(0,1));
        lhs(9,2)=scale_factor*(-clhs132*tangentetaslave(0,1) - clhs134*tangentxislave(0,1) + clhs422*normalslave(0,1));
        lhs(9,3)=scale_factor*(-clhs163*tangentetaslave(0,1) - clhs165*tangentxislave(0,1) + clhs167*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs190*tangentetaslave(0,1) - clhs192*tangentxislave(0,1) + clhs194*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs217*tangentetaslave(0,1) - clhs219*tangentxislave(0,1) + clhs221*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs244*tangentetaslave(0,1) - clhs246*tangentxislave(0,1) + clhs248*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs271*tangentetaslave(0,1) - clhs273*tangentxislave(0,1) + clhs275*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=-scale_factor*(clhs502*clhs509 + clhs510*clhs513 + clhs62*normalslave(1,0));
        lhs(10,1)=scale_factor*(clhs114*normalslave(1,0) - clhs502*clhs516 - clhs510*clhs517);
        lhs(10,2)=-scale_factor*(clhs145*normalslave(1,0) + clhs502*clhs520 + clhs510*clhs521);
        lhs(10,3)=scale_factor*(clhs172*normalslave(1,0) - clhs502*clhs524 - clhs510*clhs525);
        lhs(10,4)=scale_factor*(clhs199*normalslave(1,0) - clhs502*clhs528 - clhs510*clhs529);
        lhs(10,5)=scale_factor*(clhs226*normalslave(1,0) - clhs502*clhs532 - clhs510*clhs533);
        lhs(10,6)=scale_factor*(clhs253*normalslave(1,0) - clhs502*clhs536 - clhs510*clhs537);
        lhs(10,7)=scale_factor*(clhs280*normalslave(1,0) - clhs502*clhs540 - clhs510*clhs541);
        lhs(10,8)=-clhs314*clhs544;
        lhs(10,9)=-clhs314*clhs545;
        lhs(10,10)=clhs546*(clhs307*clhs547 + clhs313*clhs549);
        lhs(10,11)=clhs546*(clhs307*clhs550 + clhs313*clhs551);
        lhs(11,0)=-scale_factor*(clhs509*clhs510 + clhs513*clhs552 + clhs62*normalslave(1,1));
        lhs(11,1)=scale_factor*(clhs114*normalslave(1,1) - clhs510*clhs516 - clhs517*clhs552);
        lhs(11,2)=-scale_factor*(clhs145*normalslave(1,1) + clhs510*clhs520 + clhs521*clhs552);
        lhs(11,3)=scale_factor*(clhs172*normalslave(1,1) - clhs510*clhs524 - clhs525*clhs552);
        lhs(11,4)=scale_factor*(clhs199*normalslave(1,1) - clhs510*clhs528 - clhs529*clhs552);
        lhs(11,5)=scale_factor*(clhs226*normalslave(1,1) - clhs510*clhs532 - clhs533*clhs552);
        lhs(11,6)=scale_factor*(clhs253*normalslave(1,1) - clhs510*clhs536 - clhs537*clhs552);
        lhs(11,7)=scale_factor*(clhs280*normalslave(1,1) - clhs510*clhs540 - clhs541*clhs552);
        lhs(11,8)=-clhs323*clhs544;
        lhs(11,9)=-clhs323*clhs545;
        lhs(11,10)=clhs546*(clhs313*clhs547 + clhs322*clhs549);
        lhs(11,11)=clhs546*(clhs313*clhs550 + clhs322*clhs551);
    }
    else if (rActiveInactive == 6 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(1,1) + clhs9*tangentetaslave(1,0)) + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double clhs16 =     clhs15*tangentetaslave(1,0);
        const double clhs17 =     penalty_parameter*(clhs14*tangentxislave(1,1) + clhs9*tangentxislave(1,0)) + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double clhs18 =     clhs17*tangentxislave(1,0);
        const double clhs19 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs20 =     X1(0,0) + u1(0,0);
        const double clhs21 =     X1(1,0) + u1(1,0);
        const double clhs22 =     X2(0,0) + u2(0,0);
        const double clhs23 =     X2(1,0) + u2(1,0);
        const double clhs24 =     X1(0,1) + u1(0,1);
        const double clhs25 =     X1(1,1) + u1(1,1);
        const double clhs26 =     X2(0,1) + u2(0,1);
        const double clhs27 =     X2(1,1) + u2(1,1);
        const double clhs28 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs22 + clhs20*clhs3 + clhs21*clhs5 - clhs23*clhs8) + normalslave(1,1)*(-clhs0*clhs26 + clhs24*clhs3 + clhs25*clhs5 - clhs27*clhs8));
        const double clhs29 =     -clhs19 + clhs28;
        const double clhs30 =     clhs29*normalslave(1,0);
        const double clhs31 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs32 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs33 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs34 =     -clhs1*clhs6 + clhs2*clhs31 + clhs32*clhs4 - clhs33*clhs7;
        const double clhs35 =     -clhs1*clhs12 + clhs10*clhs31 + clhs11*clhs32 - clhs13*clhs33;
        const double clhs36 =     clhs34*tangentetaslave(1,0) + clhs35*tangentetaslave(1,1);
        const double clhs37 =     clhs36*penalty_parameter*tangentetaslave(1,0);
        const double clhs38 =     clhs34*tangentxislave(1,0) + clhs35*tangentxislave(1,1);
        const double clhs39 =     clhs38*penalty_parameter*tangentxislave(1,0);
        const double clhs40 =     normalslave(1,1)*(-clhs1*clhs26 + clhs24*clhs31 + clhs25*clhs32 - clhs27*clhs33);
        const double clhs41 =     normalslave(1,0)*(clhs0 + clhs1*clhs22 - clhs20*clhs31 - clhs21*clhs32 + clhs23*clhs33);
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(1,0)*penalty_parameter;
        const double clhs44 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs45 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs46 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs47 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs48 =     clhs2*clhs45 + clhs4*clhs46 - clhs44*clhs6 - clhs47*clhs7;
        const double clhs49 =     clhs10*clhs45 + clhs11*clhs46 - clhs12*clhs44 - clhs13*clhs47;
        const double clhs50 =     clhs48*tangentetaslave(1,0) + clhs49*tangentetaslave(1,1);
        const double clhs51 =     clhs50*penalty_parameter*tangentetaslave(1,0);
        const double clhs52 =     clhs48*tangentxislave(1,0) + clhs49*tangentxislave(1,1);
        const double clhs53 =     clhs52*penalty_parameter*tangentxislave(1,0);
        const double clhs54 =     normalslave(1,0)*(clhs20*clhs45 + clhs21*clhs46 - clhs22*clhs44 - clhs23*clhs47) - normalslave(1,1)*(clhs0 - clhs24*clhs45 - clhs25*clhs46 + clhs26*clhs44 + clhs27*clhs47);
        const double clhs55 =     clhs54*normalslave(1,0)*penalty_parameter;
        const double clhs56 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs57 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs58 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs59 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs60 =     clhs2*clhs57 + clhs4*clhs58 - clhs56*clhs6 - clhs59*clhs7;
        const double clhs61 =     clhs10*clhs57 + clhs11*clhs58 - clhs12*clhs56 - clhs13*clhs59;
        const double clhs62 =     clhs60*tangentetaslave(1,0) + clhs61*tangentetaslave(1,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentetaslave(1,0);
        const double clhs64 =     clhs60*tangentxislave(1,0) + clhs61*tangentxislave(1,1);
        const double clhs65 =     clhs64*penalty_parameter*tangentxislave(1,0);
        const double clhs66 =     normalslave(1,1)*(clhs24*clhs57 + clhs25*clhs58 - clhs26*clhs56 - clhs27*clhs59);
        const double clhs67 =     normalslave(1,0)*(-clhs20*clhs57 - clhs21*clhs58 + clhs22*clhs56 + clhs23*clhs59 + clhs8);
        const double clhs68 =     -clhs66 + clhs67;
        const double clhs69 =     clhs68*normalslave(1,0)*penalty_parameter;
        const double clhs70 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs71 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs72 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs73 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs74 =     clhs2*clhs71 + clhs4*clhs72 - clhs6*clhs70 - clhs7*clhs73;
        const double clhs75 =     clhs10*clhs71 + clhs11*clhs72 - clhs12*clhs70 - clhs13*clhs73;
        const double clhs76 =     clhs74*tangentetaslave(1,0) + clhs75*tangentetaslave(1,1);
        const double clhs77 =     clhs76*penalty_parameter*tangentetaslave(1,0);
        const double clhs78 =     clhs74*tangentxislave(1,0) + clhs75*tangentxislave(1,1);
        const double clhs79 =     clhs78*penalty_parameter*tangentxislave(1,0);
        const double clhs80 =     normalslave(1,0)*(clhs20*clhs71 + clhs21*clhs72 - clhs22*clhs70 - clhs23*clhs73) - normalslave(1,1)*(-clhs24*clhs71 - clhs25*clhs72 + clhs26*clhs70 + clhs27*clhs73 + clhs8);
        const double clhs81 =     clhs80*normalslave(1,0)*penalty_parameter;
        const double clhs82 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs83 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs84 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs85 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs86 =     clhs2*clhs83 + clhs4*clhs84 - clhs6*clhs82 - clhs7*clhs85;
        const double clhs87 =     clhs10*clhs83 + clhs11*clhs84 - clhs12*clhs82 - clhs13*clhs85;
        const double clhs88 =     clhs86*tangentetaslave(1,0) + clhs87*tangentetaslave(1,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentetaslave(1,0);
        const double clhs90 =     clhs86*tangentxislave(1,0) + clhs87*tangentxislave(1,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(1,0);
        const double clhs92 =     normalslave(1,0)*(clhs20*clhs83 + clhs21*clhs84 - clhs22*clhs82 - clhs23*clhs85 + clhs3) + normalslave(1,1)*(clhs24*clhs83 + clhs25*clhs84 - clhs26*clhs82 - clhs27*clhs85);
        const double clhs93 =     clhs92*normalslave(1,0)*penalty_parameter;
        const double clhs94 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs95 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs96 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs97 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs98 =     clhs2*clhs95 + clhs4*clhs96 - clhs6*clhs94 - clhs7*clhs97;
        const double clhs99 =     clhs10*clhs95 + clhs11*clhs96 - clhs12*clhs94 - clhs13*clhs97;
        const double clhs100 =     clhs98*tangentetaslave(1,0) + clhs99*tangentetaslave(1,1);
        const double clhs101 =     clhs100*penalty_parameter*tangentetaslave(1,0);
        const double clhs102 =     clhs98*tangentxislave(1,0) + clhs99*tangentxislave(1,1);
        const double clhs103 =     clhs102*penalty_parameter*tangentxislave(1,0);
        const double clhs104 =     normalslave(1,0)*(clhs20*clhs95 + clhs21*clhs96 - clhs22*clhs94 - clhs23*clhs97) + normalslave(1,1)*(clhs24*clhs95 + clhs25*clhs96 - clhs26*clhs94 - clhs27*clhs97 + clhs3);
        const double clhs105 =     clhs104*normalslave(1,0)*penalty_parameter;
        const double clhs106 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs107 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs108 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs109 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs110 =     -clhs106*clhs6 + clhs107*clhs2 + clhs108*clhs4 - clhs109*clhs7;
        const double clhs111 =     clhs10*clhs107 - clhs106*clhs12 + clhs108*clhs11 - clhs109*clhs13;
        const double clhs112 =     clhs110*tangentetaslave(1,0) + clhs111*tangentetaslave(1,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentetaslave(1,0);
        const double clhs114 =     clhs110*tangentxislave(1,0) + clhs111*tangentxislave(1,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(1,0);
        const double clhs116 =     normalslave(1,0)*(-clhs106*clhs22 + clhs107*clhs20 + clhs108*clhs21 - clhs109*clhs23 + clhs5) + normalslave(1,1)*(-clhs106*clhs26 + clhs107*clhs24 + clhs108*clhs25 - clhs109*clhs27);
        const double clhs117 =     clhs116*normalslave(1,0)*penalty_parameter;
        const double clhs118 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs119 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs120 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs121 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs122 =     -clhs118*clhs6 + clhs119*clhs2 + clhs120*clhs4 - clhs121*clhs7;
        const double clhs123 =     clhs10*clhs119 + clhs11*clhs120 - clhs118*clhs12 - clhs121*clhs13;
        const double clhs124 =     clhs122*tangentetaslave(1,0) + clhs123*tangentetaslave(1,1);
        const double clhs125 =     clhs124*penalty_parameter*tangentetaslave(1,0);
        const double clhs126 =     clhs122*tangentxislave(1,0) + clhs123*tangentxislave(1,1);
        const double clhs127 =     clhs126*penalty_parameter*tangentxislave(1,0);
        const double clhs128 =     normalslave(1,0)*(-clhs118*clhs22 + clhs119*clhs20 + clhs120*clhs21 - clhs121*clhs23) + normalslave(1,1)*(-clhs118*clhs26 + clhs119*clhs24 + clhs120*clhs25 - clhs121*clhs27 + clhs5);
        const double clhs129 =     clhs128*normalslave(1,0)*penalty_parameter;
        const double clhs130 =     scale_factor*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        const double clhs131 =     scale_factor*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
        const double clhs132 =     clhs0*clhs131;
        const double clhs133 =     clhs15*tangentetaslave(1,1);
        const double clhs134 =     clhs17*tangentxislave(1,1);
        const double clhs135 =     clhs29*normalslave(1,1);
        const double clhs136 =     clhs36*penalty_parameter*tangentetaslave(1,1);
        const double clhs137 =     clhs38*penalty_parameter*tangentxislave(1,1);
        const double clhs138 =     clhs42*normalslave(1,1)*penalty_parameter;
        const double clhs139 =     clhs50*penalty_parameter*tangentetaslave(1,1);
        const double clhs140 =     clhs52*penalty_parameter*tangentxislave(1,1);
        const double clhs141 =     clhs54*normalslave(1,1)*penalty_parameter;
        const double clhs142 =     clhs62*penalty_parameter*tangentetaslave(1,1);
        const double clhs143 =     clhs64*penalty_parameter*tangentxislave(1,1);
        const double clhs144 =     clhs68*normalslave(1,1)*penalty_parameter;
        const double clhs145 =     clhs76*penalty_parameter*tangentetaslave(1,1);
        const double clhs146 =     clhs78*penalty_parameter*tangentxislave(1,1);
        const double clhs147 =     clhs80*normalslave(1,1)*penalty_parameter;
        const double clhs148 =     clhs88*penalty_parameter*tangentetaslave(1,1);
        const double clhs149 =     clhs90*penalty_parameter*tangentxislave(1,1);
        const double clhs150 =     clhs92*normalslave(1,1)*penalty_parameter;
        const double clhs151 =     clhs100*penalty_parameter*tangentetaslave(1,1);
        const double clhs152 =     clhs102*penalty_parameter*tangentxislave(1,1);
        const double clhs153 =     clhs104*normalslave(1,1)*penalty_parameter;
        const double clhs154 =     clhs112*penalty_parameter*tangentetaslave(1,1);
        const double clhs155 =     clhs114*penalty_parameter*tangentxislave(1,1);
        const double clhs156 =     clhs116*normalslave(1,1)*penalty_parameter;
        const double clhs157 =     clhs124*penalty_parameter*tangentetaslave(1,1);
        const double clhs158 =     clhs126*penalty_parameter*tangentxislave(1,1);
        const double clhs159 =     clhs128*normalslave(1,1)*penalty_parameter;
        const double clhs160 =     scale_factor*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
        const double clhs161 =     clhs131*clhs8;
        const double clhs162 =     clhs19 - clhs28;
        const double clhs163 =     clhs162*normalslave(1,0);
        const double clhs164 =     clhs40 - clhs41;
        const double clhs165 =     clhs164*normalslave(1,0)*penalty_parameter;
        const double clhs166 =     clhs66 - clhs67;
        const double clhs167 =     clhs166*normalslave(1,0)*penalty_parameter;
        const double clhs168 =     -clhs131*clhs3;
        const double clhs169 =     clhs162*normalslave(1,1);
        const double clhs170 =     clhs164*normalslave(1,1)*penalty_parameter;
        const double clhs171 =     clhs166*normalslave(1,1)*penalty_parameter;
        const double clhs172 =     -clhs131*clhs5;
        const double clhs173 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double clhs174 =     clhs173*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
    
        lhs(0,0)=clhs0*clhs37 + clhs0*clhs39 + clhs0*clhs43 + clhs1*clhs16 + clhs1*clhs18 - clhs1*clhs30;
        lhs(0,1)=clhs0*clhs51 + clhs0*clhs53 - clhs0*clhs55 + clhs16*clhs44 + clhs18*clhs44 - clhs30*clhs44;
        lhs(0,2)=clhs0*clhs63 + clhs0*clhs65 + clhs0*clhs69 + clhs16*clhs56 + clhs18*clhs56 - clhs30*clhs56;
        lhs(0,3)=clhs0*clhs77 + clhs0*clhs79 - clhs0*clhs81 + clhs16*clhs70 + clhs18*clhs70 - clhs30*clhs70;
        lhs(0,4)=clhs0*clhs89 + clhs0*clhs91 - clhs0*clhs93 + clhs16*clhs82 + clhs18*clhs82 - clhs30*clhs82;
        lhs(0,5)=clhs0*clhs101 + clhs0*clhs103 - clhs0*clhs105 + clhs16*clhs94 + clhs18*clhs94 - clhs30*clhs94;
        lhs(0,6)=clhs0*clhs113 + clhs0*clhs115 - clhs0*clhs117 + clhs106*clhs16 + clhs106*clhs18 - clhs106*clhs30;
        lhs(0,7)=clhs0*clhs125 + clhs0*clhs127 - clhs0*clhs129 + clhs118*clhs16 + clhs118*clhs18 - clhs118*clhs30;
        lhs(0,8)=0;
        lhs(0,9)=0;
        lhs(0,10)=clhs0*clhs130;
        lhs(0,11)=clhs132;
        lhs(1,0)=clhs0*clhs136 + clhs0*clhs137 + clhs0*clhs138 + clhs1*clhs133 + clhs1*clhs134 - clhs1*clhs135;
        lhs(1,1)=clhs0*clhs139 + clhs0*clhs140 - clhs0*clhs141 + clhs133*clhs44 + clhs134*clhs44 - clhs135*clhs44;
        lhs(1,2)=clhs0*clhs142 + clhs0*clhs143 + clhs0*clhs144 + clhs133*clhs56 + clhs134*clhs56 - clhs135*clhs56;
        lhs(1,3)=clhs0*clhs145 + clhs0*clhs146 - clhs0*clhs147 + clhs133*clhs70 + clhs134*clhs70 - clhs135*clhs70;
        lhs(1,4)=clhs0*clhs148 + clhs0*clhs149 - clhs0*clhs150 + clhs133*clhs82 + clhs134*clhs82 - clhs135*clhs82;
        lhs(1,5)=clhs0*clhs151 + clhs0*clhs152 - clhs0*clhs153 + clhs133*clhs94 + clhs134*clhs94 - clhs135*clhs94;
        lhs(1,6)=clhs0*clhs154 + clhs0*clhs155 - clhs0*clhs156 + clhs106*clhs133 + clhs106*clhs134 - clhs106*clhs135;
        lhs(1,7)=clhs0*clhs157 + clhs0*clhs158 - clhs0*clhs159 + clhs118*clhs133 + clhs118*clhs134 - clhs118*clhs135;
        lhs(1,8)=0;
        lhs(1,9)=0;
        lhs(1,10)=clhs132;
        lhs(1,11)=clhs0*clhs160;
        lhs(2,0)=clhs16*clhs33 + clhs18*clhs33 - clhs30*clhs33 + clhs37*clhs8 + clhs39*clhs8 + clhs43*clhs8;
        lhs(2,1)=clhs16*clhs47 + clhs18*clhs47 - clhs30*clhs47 + clhs51*clhs8 + clhs53*clhs8 - clhs55*clhs8;
        lhs(2,2)=clhs16*clhs59 + clhs18*clhs59 - clhs30*clhs59 + clhs63*clhs8 + clhs65*clhs8 + clhs69*clhs8;
        lhs(2,3)=clhs16*clhs73 + clhs18*clhs73 - clhs30*clhs73 + clhs77*clhs8 + clhs79*clhs8 - clhs8*clhs81;
        lhs(2,4)=clhs16*clhs85 + clhs18*clhs85 - clhs30*clhs85 + clhs8*clhs89 + clhs8*clhs91 - clhs8*clhs93;
        lhs(2,5)=clhs101*clhs8 + clhs103*clhs8 - clhs105*clhs8 + clhs16*clhs97 + clhs18*clhs97 - clhs30*clhs97;
        lhs(2,6)=clhs109*clhs16 + clhs109*clhs18 - clhs109*clhs30 + clhs113*clhs8 + clhs115*clhs8 - clhs117*clhs8;
        lhs(2,7)=clhs121*clhs16 + clhs121*clhs18 - clhs121*clhs30 + clhs125*clhs8 + clhs127*clhs8 - clhs129*clhs8;
        lhs(2,8)=0;
        lhs(2,9)=0;
        lhs(2,10)=clhs130*clhs8;
        lhs(2,11)=clhs161;
        lhs(3,0)=clhs133*clhs33 + clhs134*clhs33 - clhs135*clhs33 + clhs136*clhs8 + clhs137*clhs8 + clhs138*clhs8;
        lhs(3,1)=clhs133*clhs47 + clhs134*clhs47 - clhs135*clhs47 + clhs139*clhs8 + clhs140*clhs8 - clhs141*clhs8;
        lhs(3,2)=clhs133*clhs59 + clhs134*clhs59 - clhs135*clhs59 + clhs142*clhs8 + clhs143*clhs8 + clhs144*clhs8;
        lhs(3,3)=clhs133*clhs73 + clhs134*clhs73 - clhs135*clhs73 + clhs145*clhs8 + clhs146*clhs8 - clhs147*clhs8;
        lhs(3,4)=clhs133*clhs85 + clhs134*clhs85 - clhs135*clhs85 + clhs148*clhs8 + clhs149*clhs8 - clhs150*clhs8;
        lhs(3,5)=clhs133*clhs97 + clhs134*clhs97 - clhs135*clhs97 + clhs151*clhs8 + clhs152*clhs8 - clhs153*clhs8;
        lhs(3,6)=clhs109*clhs133 + clhs109*clhs134 - clhs109*clhs135 + clhs154*clhs8 + clhs155*clhs8 - clhs156*clhs8;
        lhs(3,7)=clhs121*clhs133 + clhs121*clhs134 - clhs121*clhs135 + clhs157*clhs8 + clhs158*clhs8 - clhs159*clhs8;
        lhs(3,8)=0;
        lhs(3,9)=0;
        lhs(3,10)=clhs161;
        lhs(3,11)=clhs160*clhs8;
        lhs(4,0)=-clhs16*clhs31 - clhs163*clhs31 + clhs165*clhs3 - clhs18*clhs31 - clhs3*clhs37 - clhs3*clhs39;
        lhs(4,1)=-clhs16*clhs45 - clhs163*clhs45 - clhs18*clhs45 - clhs3*clhs51 - clhs3*clhs53 + clhs3*clhs55;
        lhs(4,2)=-clhs16*clhs57 - clhs163*clhs57 + clhs167*clhs3 - clhs18*clhs57 - clhs3*clhs63 - clhs3*clhs65;
        lhs(4,3)=-clhs16*clhs71 - clhs163*clhs71 - clhs18*clhs71 - clhs3*clhs77 - clhs3*clhs79 + clhs3*clhs81;
        lhs(4,4)=-clhs16*clhs83 - clhs163*clhs83 - clhs18*clhs83 - clhs3*clhs89 - clhs3*clhs91 + clhs3*clhs93;
        lhs(4,5)=-clhs101*clhs3 - clhs103*clhs3 + clhs105*clhs3 - clhs16*clhs95 - clhs163*clhs95 - clhs18*clhs95;
        lhs(4,6)=-clhs107*clhs16 - clhs107*clhs163 - clhs107*clhs18 - clhs113*clhs3 - clhs115*clhs3 + clhs117*clhs3;
        lhs(4,7)=-clhs119*clhs16 - clhs119*clhs163 - clhs119*clhs18 - clhs125*clhs3 - clhs127*clhs3 + clhs129*clhs3;
        lhs(4,8)=0;
        lhs(4,9)=0;
        lhs(4,10)=-clhs130*clhs3;
        lhs(4,11)=clhs168;
        lhs(5,0)=-clhs133*clhs31 - clhs134*clhs31 - clhs136*clhs3 - clhs137*clhs3 - clhs169*clhs31 + clhs170*clhs3;
        lhs(5,1)=-clhs133*clhs45 - clhs134*clhs45 - clhs139*clhs3 - clhs140*clhs3 + clhs141*clhs3 - clhs169*clhs45;
        lhs(5,2)=-clhs133*clhs57 - clhs134*clhs57 - clhs142*clhs3 - clhs143*clhs3 - clhs169*clhs57 + clhs171*clhs3;
        lhs(5,3)=-clhs133*clhs71 - clhs134*clhs71 - clhs145*clhs3 - clhs146*clhs3 + clhs147*clhs3 - clhs169*clhs71;
        lhs(5,4)=-clhs133*clhs83 - clhs134*clhs83 - clhs148*clhs3 - clhs149*clhs3 + clhs150*clhs3 - clhs169*clhs83;
        lhs(5,5)=-clhs133*clhs95 - clhs134*clhs95 - clhs151*clhs3 - clhs152*clhs3 + clhs153*clhs3 - clhs169*clhs95;
        lhs(5,6)=-clhs107*clhs133 - clhs107*clhs134 - clhs107*clhs169 - clhs154*clhs3 - clhs155*clhs3 + clhs156*clhs3;
        lhs(5,7)=-clhs119*clhs133 - clhs119*clhs134 - clhs119*clhs169 - clhs157*clhs3 - clhs158*clhs3 + clhs159*clhs3;
        lhs(5,8)=0;
        lhs(5,9)=0;
        lhs(5,10)=clhs168;
        lhs(5,11)=-clhs160*clhs3;
        lhs(6,0)=-clhs16*clhs32 - clhs163*clhs32 + clhs165*clhs5 - clhs18*clhs32 - clhs37*clhs5 - clhs39*clhs5;
        lhs(6,1)=-clhs16*clhs46 - clhs163*clhs46 - clhs18*clhs46 - clhs5*clhs51 - clhs5*clhs53 + clhs5*clhs55;
        lhs(6,2)=-clhs16*clhs58 - clhs163*clhs58 + clhs167*clhs5 - clhs18*clhs58 - clhs5*clhs63 - clhs5*clhs65;
        lhs(6,3)=-clhs16*clhs72 - clhs163*clhs72 - clhs18*clhs72 - clhs5*clhs77 - clhs5*clhs79 + clhs5*clhs81;
        lhs(6,4)=-clhs16*clhs84 - clhs163*clhs84 - clhs18*clhs84 - clhs5*clhs89 - clhs5*clhs91 + clhs5*clhs93;
        lhs(6,5)=-clhs101*clhs5 - clhs103*clhs5 + clhs105*clhs5 - clhs16*clhs96 - clhs163*clhs96 - clhs18*clhs96;
        lhs(6,6)=-clhs108*clhs16 - clhs108*clhs163 - clhs108*clhs18 - clhs113*clhs5 - clhs115*clhs5 + clhs117*clhs5;
        lhs(6,7)=-clhs120*clhs16 - clhs120*clhs163 - clhs120*clhs18 - clhs125*clhs5 - clhs127*clhs5 + clhs129*clhs5;
        lhs(6,8)=0;
        lhs(6,9)=0;
        lhs(6,10)=-clhs130*clhs5;
        lhs(6,11)=clhs172;
        lhs(7,0)=-clhs133*clhs32 - clhs134*clhs32 - clhs136*clhs5 - clhs137*clhs5 - clhs169*clhs32 + clhs170*clhs5;
        lhs(7,1)=-clhs133*clhs46 - clhs134*clhs46 - clhs139*clhs5 - clhs140*clhs5 + clhs141*clhs5 - clhs169*clhs46;
        lhs(7,2)=-clhs133*clhs58 - clhs134*clhs58 - clhs142*clhs5 - clhs143*clhs5 - clhs169*clhs58 + clhs171*clhs5;
        lhs(7,3)=-clhs133*clhs72 - clhs134*clhs72 - clhs145*clhs5 - clhs146*clhs5 + clhs147*clhs5 - clhs169*clhs72;
        lhs(7,4)=-clhs133*clhs84 - clhs134*clhs84 - clhs148*clhs5 - clhs149*clhs5 + clhs150*clhs5 - clhs169*clhs84;
        lhs(7,5)=-clhs133*clhs96 - clhs134*clhs96 - clhs151*clhs5 - clhs152*clhs5 + clhs153*clhs5 - clhs169*clhs96;
        lhs(7,6)=-clhs108*clhs133 - clhs108*clhs134 - clhs108*clhs169 - clhs154*clhs5 - clhs155*clhs5 + clhs156*clhs5;
        lhs(7,7)=-clhs120*clhs133 - clhs120*clhs134 - clhs120*clhs169 - clhs157*clhs5 - clhs158*clhs5 + clhs159*clhs5;
        lhs(7,8)=0;
        lhs(7,9)=0;
        lhs(7,10)=clhs172;
        lhs(7,11)=-clhs160*clhs5;
        lhs(8,0)=0;
        lhs(8,1)=0;
        lhs(8,2)=0;
        lhs(8,3)=0;
        lhs(8,4)=0;
        lhs(8,5)=0;
        lhs(8,6)=0;
        lhs(8,7)=0;
        lhs(8,8)=clhs173*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        lhs(8,9)=clhs174;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=0;
        lhs(9,1)=0;
        lhs(9,2)=0;
        lhs(9,3)=0;
        lhs(9,4)=0;
        lhs(9,5)=0;
        lhs(9,6)=0;
        lhs(9,7)=0;
        lhs(9,8)=clhs174;
        lhs(9,9)=clhs173*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=scale_factor*(clhs164*normalslave(1,0) - clhs36*tangentetaslave(1,0) - clhs38*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs50*tangentetaslave(1,0) - clhs52*tangentxislave(1,0) + clhs54*normalslave(1,0));
        lhs(10,2)=scale_factor*(clhs166*normalslave(1,0) - clhs62*tangentetaslave(1,0) - clhs64*tangentxislave(1,0));
        lhs(10,3)=scale_factor*(-clhs76*tangentetaslave(1,0) - clhs78*tangentxislave(1,0) + clhs80*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs88*tangentetaslave(1,0) - clhs90*tangentxislave(1,0) + clhs92*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs100*tangentetaslave(1,0) - clhs102*tangentxislave(1,0) + clhs104*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs112*tangentetaslave(1,0) - clhs114*tangentxislave(1,0) + clhs116*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs124*tangentetaslave(1,0) - clhs126*tangentxislave(1,0) + clhs128*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs164*normalslave(1,1) - clhs36*tangentetaslave(1,1) - clhs38*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs50*tangentetaslave(1,1) - clhs52*tangentxislave(1,1) + clhs54*normalslave(1,1));
        lhs(11,2)=scale_factor*(clhs166*normalslave(1,1) - clhs62*tangentetaslave(1,1) - clhs64*tangentxislave(1,1));
        lhs(11,3)=scale_factor*(-clhs76*tangentetaslave(1,1) - clhs78*tangentxislave(1,1) + clhs80*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs88*tangentetaslave(1,1) - clhs90*tangentxislave(1,1) + clhs92*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs100*tangentetaslave(1,1) - clhs102*tangentxislave(1,1) + clhs104*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs112*tangentetaslave(1,1) - clhs114*tangentxislave(1,1) + clhs116*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs124*tangentetaslave(1,1) - clhs126*tangentxislave(1,1) + clhs128*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }
    else if (rActiveInactive == 7 )
    {
        const double clhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double clhs3 =     X1(0,0) + u1old(0,0);
        const double clhs4 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs5 =     X1(1,0) + u1old(1,0);
        const double clhs6 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs7 =     X2(0,0) + u2old(0,0);
        const double clhs8 =     X2(1,0) + u2old(1,0);
        const double clhs9 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs10 =     -clhs0*clhs7 + clhs3*clhs4 + clhs5*clhs6 - clhs8*clhs9;
        const double clhs11 =     X1(0,1) + u1old(0,1);
        const double clhs12 =     X1(1,1) + u1old(1,1);
        const double clhs13 =     X2(0,1) + u2old(0,1);
        const double clhs14 =     X2(1,1) + u2old(1,1);
        const double clhs15 =     -clhs0*clhs13 + clhs11*clhs4 + clhs12*clhs6 - clhs14*clhs9;
        const double clhs16 =     penalty_parameter*(clhs10*tangentetaslave(1,0) + clhs15*tangentetaslave(1,1));
        const double clhs17 =     clhs16 + clhs2*scale_factor;
        const double clhs18 =     clhs17*tangentetaslave(1,0);
        const double clhs19 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double clhs20 =     penalty_parameter*(clhs10*tangentxislave(1,0) + clhs15*tangentxislave(1,1));
        const double clhs21 =     clhs19*scale_factor + clhs20;
        const double clhs22 =     clhs21*tangentxislave(1,0);
        const double clhs23 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs24 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs25 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs26 =     X1(0,0) + u1(0,0);
        const double clhs27 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs28 =     X1(1,0) + u1(1,0);
        const double clhs29 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs30 =     X2(0,0) + u2(0,0);
        const double clhs31 =     X2(1,0) + u2(1,0);
        const double clhs32 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs33 =     X1(0,1) + u1(0,1);
        const double clhs34 =     X1(1,1) + u1(1,1);
        const double clhs35 =     X2(0,1) + u2(0,1);
        const double clhs36 =     X2(1,1) + u2(1,1);
        const double clhs37 =     penalty_parameter*(normalslave(0,0)*(-clhs23*clhs30 + clhs26*clhs27 + clhs28*clhs29 - clhs31*clhs32) + normalslave(0,1)*(-clhs23*clhs35 + clhs27*clhs33 + clhs29*clhs34 - clhs32*clhs36));
        const double clhs38 =     -clhs25 + clhs37;
        const double clhs39 =     clhs38*normalslave(0,0);
        const double clhs40 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs41 =     penalty_parameter*(normalslave(1,0)*(-clhs0*clhs30 + clhs26*clhs4 + clhs28*clhs6 - clhs31*clhs9) + normalslave(1,1)*(-clhs0*clhs35 + clhs33*clhs4 + clhs34*clhs6 - clhs36*clhs9));
        const double clhs42 =     -clhs40 + clhs41;
        const double clhs43 =     clhs42*normalslave(1,0);
        const double clhs44 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs45 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs46 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     -clhs1*clhs7 + clhs3*clhs44 + clhs45*clhs5 - clhs46*clhs8;
        const double clhs48 =     -clhs1*clhs13 + clhs11*clhs44 + clhs12*clhs45 - clhs14*clhs46;
        const double clhs49 =     clhs47*tangentetaslave(1,0) + clhs48*tangentetaslave(1,1);
        const double clhs50 =     clhs49*penalty_parameter*tangentetaslave(1,0);
        const double clhs51 =     clhs47*tangentxislave(1,0) + clhs48*tangentxislave(1,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentxislave(1,0);
        const double clhs53 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs54 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs55 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs56 =     normalslave(0,1)*(-clhs24*clhs35 + clhs33*clhs53 + clhs34*clhs54 - clhs36*clhs55);
        const double clhs57 =     normalslave(0,0)*(clhs23 + clhs24*clhs30 - clhs26*clhs53 - clhs28*clhs54 + clhs31*clhs55);
        const double clhs58 =     -clhs56 + clhs57;
        const double clhs59 =     clhs58*normalslave(0,0)*penalty_parameter;
        const double clhs60 =     normalslave(1,1)*(-clhs1*clhs35 + clhs33*clhs44 + clhs34*clhs45 - clhs36*clhs46);
        const double clhs61 =     normalslave(1,0)*(clhs0 + clhs1*clhs30 - clhs26*clhs44 - clhs28*clhs45 + clhs31*clhs46);
        const double clhs62 =     -clhs60 + clhs61;
        const double clhs63 =     clhs62*normalslave(1,0)*penalty_parameter;
        const double clhs64 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double clhs65 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double clhs66 =     scale_factor*(clhs64*tangentetaslave(0,0) + clhs65*tangentxislave(0,0));
        const double clhs67 =     -clhs23*clhs7 + clhs27*clhs3 + clhs29*clhs5 - clhs32*clhs8;
        const double clhs68 =     clhs11*clhs27 + clhs12*clhs29 - clhs13*clhs23 - clhs14*clhs32;
        const double clhs69 =     penalty_parameter*(clhs67*tangentetaslave(0,0) + clhs68*tangentetaslave(0,1));
        const double clhs70 =     penalty_parameter*(clhs67*tangentxislave(0,0) + clhs68*tangentxislave(0,1));
        const double clhs71 =     clhs69 + clhs70;
        const double clhs72 =     clhs66 + clhs71;
        const double clhs73 =     scale_factor*(clhs64*tangentetaslave(0,1) + clhs65*tangentxislave(0,1));
        const double clhs74 =     clhs71 + clhs73;
        const double clhs75 =     std::pow(clhs72, 2) + std::pow(clhs74, 2);
        const double clhs76 =     std::pow(clhs75, -1.0L/2.0L);
        const double clhs77 =     scale_factor*(clhs19*tangentxislave(1,0) + clhs2*tangentetaslave(1,0));
        const double clhs78 =     clhs16 + clhs20;
        const double clhs79 =     clhs77 + clhs78;
        const double clhs80 =     scale_factor*(clhs19*tangentxislave(1,1) + clhs2*tangentetaslave(1,1));
        const double clhs81 =     clhs78 + clhs80;
        const double clhs82 =     std::pow(clhs79, 2) + std::pow(clhs81, 2);
        const double clhs83 =     std::pow(clhs82, -1.0L/2.0L);
        const double clhs84 =     clhs38*clhs72*clhs76*clhs83*mu[0];
        const double clhs85 =     -clhs24*clhs7 + clhs3*clhs53 + clhs5*clhs54 - clhs55*clhs8;
        const double clhs86 =     clhs11*clhs53 + clhs12*clhs54 - clhs13*clhs24 - clhs14*clhs55;
        const double clhs87 =     clhs85*tangentetaslave(0,0) + clhs85*tangentxislave(0,0) + clhs86*tangentetaslave(0,1) + clhs86*tangentxislave(0,1);
        const double clhs88 =     clhs38*clhs76*clhs83*clhs87*mu[0]*penalty_parameter;
        const double clhs89 =     clhs23*clhs88;
        const double clhs90 =     clhs58*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs91 =     clhs66 + 2*clhs69 + 2*clhs70 + clhs73;
        const double clhs92 =     std::pow(clhs75, -3.0L/2.0L);
        const double clhs93 =     clhs38*clhs72*clhs83*clhs87*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs94 =     clhs49 + clhs51;
        const double clhs95 =     2*clhs16 + 2*clhs20 + clhs77 + clhs80;
        const double clhs96 =     std::pow(clhs82, -3.0L/2.0L);
        const double clhs97 =     clhs38*clhs72*clhs76*clhs94*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs98 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs99 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs100 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs101 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs102 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs103 =     clhs100*clhs3 + clhs101*clhs5 - clhs102*clhs8 - clhs7*clhs98;
        const double clhs104 =     clhs100*clhs11 + clhs101*clhs12 - clhs102*clhs14 - clhs13*clhs98;
        const double clhs105 =     clhs103*tangentetaslave(1,0) + clhs104*tangentetaslave(1,1);
        const double clhs106 =     clhs105*penalty_parameter*tangentetaslave(1,0);
        const double clhs107 =     clhs103*tangentxislave(1,0) + clhs104*tangentxislave(1,1);
        const double clhs108 =     clhs107*penalty_parameter*tangentxislave(1,0);
        const double clhs109 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs110 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs111 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs112 =     normalslave(0,0)*(clhs109*clhs26 + clhs110*clhs28 - clhs111*clhs31 - clhs30*clhs99) - normalslave(0,1)*(-clhs109*clhs33 - clhs110*clhs34 + clhs111*clhs36 + clhs23 + clhs35*clhs99);
        const double clhs113 =     clhs112*normalslave(0,0)*penalty_parameter;
        const double clhs114 =     normalslave(1,0)*(clhs100*clhs26 + clhs101*clhs28 - clhs102*clhs31 - clhs30*clhs98) - normalslave(1,1)*(clhs0 - clhs100*clhs33 - clhs101*clhs34 + clhs102*clhs36 + clhs35*clhs98);
        const double clhs115 =     clhs114*normalslave(1,0)*penalty_parameter;
        const double clhs116 =     clhs109*clhs3 + clhs110*clhs5 - clhs111*clhs8 - clhs7*clhs99;
        const double clhs117 =     clhs109*clhs11 + clhs110*clhs12 - clhs111*clhs14 - clhs13*clhs99;
        const double clhs118 =     clhs116*tangentetaslave(0,0) + clhs116*tangentxislave(0,0) + clhs117*tangentetaslave(0,1) + clhs117*tangentxislave(0,1);
        const double clhs119 =     clhs118*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs120 =     clhs119*clhs23;
        const double clhs121 =     clhs112*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs122 =     clhs118*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs123 =     clhs105 + clhs107;
        const double clhs124 =     clhs123*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs125 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs126 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs127 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs128 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs129 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs130 =     -clhs125*clhs7 + clhs127*clhs3 + clhs128*clhs5 - clhs129*clhs8;
        const double clhs131 =     clhs11*clhs127 + clhs12*clhs128 - clhs125*clhs13 - clhs129*clhs14;
        const double clhs132 =     clhs130*tangentetaslave(1,0) + clhs131*tangentetaslave(1,1);
        const double clhs133 =     clhs132*penalty_parameter*tangentetaslave(1,0);
        const double clhs134 =     clhs130*tangentxislave(1,0) + clhs131*tangentxislave(1,1);
        const double clhs135 =     clhs134*penalty_parameter*tangentxislave(1,0);
        const double clhs136 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs137 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs138 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs139 =     normalslave(0,1)*(-clhs126*clhs35 + clhs136*clhs33 + clhs137*clhs34 - clhs138*clhs36);
        const double clhs140 =     normalslave(0,0)*(clhs126*clhs30 - clhs136*clhs26 - clhs137*clhs28 + clhs138*clhs31 + clhs32);
        const double clhs141 =     -clhs139 + clhs140;
        const double clhs142 =     clhs141*normalslave(0,0)*penalty_parameter;
        const double clhs143 =     normalslave(1,1)*(-clhs125*clhs35 + clhs127*clhs33 + clhs128*clhs34 - clhs129*clhs36);
        const double clhs144 =     normalslave(1,0)*(clhs125*clhs30 - clhs127*clhs26 - clhs128*clhs28 + clhs129*clhs31 + clhs9);
        const double clhs145 =     -clhs143 + clhs144;
        const double clhs146 =     clhs145*normalslave(1,0)*penalty_parameter;
        const double clhs147 =     -clhs126*clhs7 + clhs136*clhs3 + clhs137*clhs5 - clhs138*clhs8;
        const double clhs148 =     clhs11*clhs136 + clhs12*clhs137 - clhs126*clhs13 - clhs138*clhs14;
        const double clhs149 =     clhs147*tangentetaslave(0,0) + clhs147*tangentxislave(0,0) + clhs148*tangentetaslave(0,1) + clhs148*tangentxislave(0,1);
        const double clhs150 =     clhs149*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs151 =     clhs150*clhs23;
        const double clhs152 =     clhs141*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs153 =     clhs149*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs154 =     clhs132 + clhs134;
        const double clhs155 =     clhs154*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs156 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs157 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs158 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs159 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs160 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs161 =     -clhs156*clhs7 + clhs158*clhs3 + clhs159*clhs5 - clhs160*clhs8;
        const double clhs162 =     clhs11*clhs158 + clhs12*clhs159 - clhs13*clhs156 - clhs14*clhs160;
        const double clhs163 =     clhs161*tangentetaslave(1,0) + clhs162*tangentetaslave(1,1);
        const double clhs164 =     clhs163*penalty_parameter*tangentetaslave(1,0);
        const double clhs165 =     clhs161*tangentxislave(1,0) + clhs162*tangentxislave(1,1);
        const double clhs166 =     clhs165*penalty_parameter*tangentxislave(1,0);
        const double clhs167 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs168 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs169 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs170 =     normalslave(0,0)*(-clhs157*clhs30 + clhs167*clhs26 + clhs168*clhs28 - clhs169*clhs31) - normalslave(0,1)*(clhs157*clhs35 - clhs167*clhs33 - clhs168*clhs34 + clhs169*clhs36 + clhs32);
        const double clhs171 =     clhs170*normalslave(0,0)*penalty_parameter;
        const double clhs172 =     normalslave(1,0)*(-clhs156*clhs30 + clhs158*clhs26 + clhs159*clhs28 - clhs160*clhs31) - normalslave(1,1)*(clhs156*clhs35 - clhs158*clhs33 - clhs159*clhs34 + clhs160*clhs36 + clhs9);
        const double clhs173 =     clhs172*normalslave(1,0)*penalty_parameter;
        const double clhs174 =     -clhs157*clhs7 + clhs167*clhs3 + clhs168*clhs5 - clhs169*clhs8;
        const double clhs175 =     clhs11*clhs167 + clhs12*clhs168 - clhs13*clhs157 - clhs14*clhs169;
        const double clhs176 =     clhs174*tangentetaslave(0,0) + clhs174*tangentxislave(0,0) + clhs175*tangentetaslave(0,1) + clhs175*tangentxislave(0,1);
        const double clhs177 =     clhs176*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs178 =     clhs177*clhs23;
        const double clhs179 =     clhs170*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs180 =     clhs176*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs181 =     clhs163 + clhs165;
        const double clhs182 =     clhs181*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs183 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs184 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs185 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs186 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs187 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs188 =     -clhs183*clhs7 + clhs185*clhs3 + clhs186*clhs5 - clhs187*clhs8;
        const double clhs189 =     clhs11*clhs185 + clhs12*clhs186 - clhs13*clhs183 - clhs14*clhs187;
        const double clhs190 =     clhs188*tangentetaslave(1,0) + clhs189*tangentetaslave(1,1);
        const double clhs191 =     clhs190*penalty_parameter*tangentetaslave(1,0);
        const double clhs192 =     clhs188*tangentxislave(1,0) + clhs189*tangentxislave(1,1);
        const double clhs193 =     clhs192*penalty_parameter*tangentxislave(1,0);
        const double clhs194 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs195 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs196 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs197 =     normalslave(0,0)*(-clhs184*clhs30 + clhs194*clhs26 + clhs195*clhs28 - clhs196*clhs31 + clhs27) + normalslave(0,1)*(-clhs184*clhs35 + clhs194*clhs33 + clhs195*clhs34 - clhs196*clhs36);
        const double clhs198 =     clhs197*normalslave(0,0)*penalty_parameter;
        const double clhs199 =     normalslave(1,0)*(-clhs183*clhs30 + clhs185*clhs26 + clhs186*clhs28 - clhs187*clhs31 + clhs4) + normalslave(1,1)*(-clhs183*clhs35 + clhs185*clhs33 + clhs186*clhs34 - clhs187*clhs36);
        const double clhs200 =     clhs199*normalslave(1,0)*penalty_parameter;
        const double clhs201 =     -clhs184*clhs7 + clhs194*clhs3 + clhs195*clhs5 - clhs196*clhs8;
        const double clhs202 =     clhs11*clhs194 + clhs12*clhs195 - clhs13*clhs184 - clhs14*clhs196;
        const double clhs203 =     clhs201*tangentetaslave(0,0) + clhs201*tangentxislave(0,0) + clhs202*tangentetaslave(0,1) + clhs202*tangentxislave(0,1);
        const double clhs204 =     clhs203*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs205 =     clhs204*clhs23;
        const double clhs206 =     clhs197*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs207 =     clhs203*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs208 =     clhs190 + clhs192;
        const double clhs209 =     clhs208*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs210 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs211 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs212 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs213 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs214 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs215 =     -clhs210*clhs7 + clhs212*clhs3 + clhs213*clhs5 - clhs214*clhs8;
        const double clhs216 =     clhs11*clhs212 + clhs12*clhs213 - clhs13*clhs210 - clhs14*clhs214;
        const double clhs217 =     clhs215*tangentetaslave(1,0) + clhs216*tangentetaslave(1,1);
        const double clhs218 =     clhs217*penalty_parameter*tangentetaslave(1,0);
        const double clhs219 =     clhs215*tangentxislave(1,0) + clhs216*tangentxislave(1,1);
        const double clhs220 =     clhs219*penalty_parameter*tangentxislave(1,0);
        const double clhs221 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs222 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs223 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs224 =     normalslave(0,0)*(-clhs211*clhs30 + clhs221*clhs26 + clhs222*clhs28 - clhs223*clhs31) + normalslave(0,1)*(-clhs211*clhs35 + clhs221*clhs33 + clhs222*clhs34 - clhs223*clhs36 + clhs27);
        const double clhs225 =     clhs224*normalslave(0,0)*penalty_parameter;
        const double clhs226 =     normalslave(1,0)*(-clhs210*clhs30 + clhs212*clhs26 + clhs213*clhs28 - clhs214*clhs31) + normalslave(1,1)*(-clhs210*clhs35 + clhs212*clhs33 + clhs213*clhs34 - clhs214*clhs36 + clhs4);
        const double clhs227 =     clhs226*normalslave(1,0)*penalty_parameter;
        const double clhs228 =     -clhs211*clhs7 + clhs221*clhs3 + clhs222*clhs5 - clhs223*clhs8;
        const double clhs229 =     clhs11*clhs221 + clhs12*clhs222 - clhs13*clhs211 - clhs14*clhs223;
        const double clhs230 =     clhs228*tangentetaslave(0,0) + clhs228*tangentxislave(0,0) + clhs229*tangentetaslave(0,1) + clhs229*tangentxislave(0,1);
        const double clhs231 =     clhs230*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs232 =     clhs23*clhs231;
        const double clhs233 =     clhs224*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs234 =     clhs230*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs235 =     clhs217 + clhs219;
        const double clhs236 =     clhs235*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs237 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs238 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs239 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs240 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs241 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs242 =     -clhs237*clhs7 + clhs239*clhs3 + clhs240*clhs5 - clhs241*clhs8;
        const double clhs243 =     clhs11*clhs239 + clhs12*clhs240 - clhs13*clhs237 - clhs14*clhs241;
        const double clhs244 =     clhs242*tangentetaslave(1,0) + clhs243*tangentetaslave(1,1);
        const double clhs245 =     clhs244*penalty_parameter*tangentetaslave(1,0);
        const double clhs246 =     clhs242*tangentxislave(1,0) + clhs243*tangentxislave(1,1);
        const double clhs247 =     clhs246*penalty_parameter*tangentxislave(1,0);
        const double clhs248 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs249 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs250 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs251 =     normalslave(0,0)*(-clhs238*clhs30 + clhs248*clhs26 + clhs249*clhs28 - clhs250*clhs31 + clhs29) + normalslave(0,1)*(-clhs238*clhs35 + clhs248*clhs33 + clhs249*clhs34 - clhs250*clhs36);
        const double clhs252 =     clhs251*normalslave(0,0)*penalty_parameter;
        const double clhs253 =     normalslave(1,0)*(-clhs237*clhs30 + clhs239*clhs26 + clhs240*clhs28 - clhs241*clhs31 + clhs6) + normalslave(1,1)*(-clhs237*clhs35 + clhs239*clhs33 + clhs240*clhs34 - clhs241*clhs36);
        const double clhs254 =     clhs253*normalslave(1,0)*penalty_parameter;
        const double clhs255 =     -clhs238*clhs7 + clhs248*clhs3 + clhs249*clhs5 - clhs250*clhs8;
        const double clhs256 =     clhs11*clhs248 + clhs12*clhs249 - clhs13*clhs238 - clhs14*clhs250;
        const double clhs257 =     clhs255*tangentetaslave(0,0) + clhs255*tangentxislave(0,0) + clhs256*tangentetaslave(0,1) + clhs256*tangentxislave(0,1);
        const double clhs258 =     clhs257*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs259 =     clhs23*clhs258;
        const double clhs260 =     clhs251*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs261 =     clhs257*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs262 =     clhs244 + clhs246;
        const double clhs263 =     clhs262*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs264 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs265 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs266 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs267 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs268 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs269 =     -clhs264*clhs7 + clhs266*clhs3 + clhs267*clhs5 - clhs268*clhs8;
        const double clhs270 =     clhs11*clhs266 + clhs12*clhs267 - clhs13*clhs264 - clhs14*clhs268;
        const double clhs271 =     clhs269*tangentetaslave(1,0) + clhs270*tangentetaslave(1,1);
        const double clhs272 =     clhs271*penalty_parameter*tangentetaslave(1,0);
        const double clhs273 =     clhs269*tangentxislave(1,0) + clhs270*tangentxislave(1,1);
        const double clhs274 =     clhs273*penalty_parameter*tangentxislave(1,0);
        const double clhs275 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs276 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs277 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs278 =     normalslave(0,0)*(clhs26*clhs275 - clhs265*clhs30 + clhs276*clhs28 - clhs277*clhs31) + normalslave(0,1)*(-clhs265*clhs35 + clhs275*clhs33 + clhs276*clhs34 - clhs277*clhs36 + clhs29);
        const double clhs279 =     clhs278*normalslave(0,0)*penalty_parameter;
        const double clhs280 =     normalslave(1,0)*(clhs26*clhs266 - clhs264*clhs30 + clhs267*clhs28 - clhs268*clhs31) + normalslave(1,1)*(-clhs264*clhs35 + clhs266*clhs33 + clhs267*clhs34 - clhs268*clhs36 + clhs6);
        const double clhs281 =     clhs280*normalslave(1,0)*penalty_parameter;
        const double clhs282 =     -clhs265*clhs7 + clhs275*clhs3 + clhs276*clhs5 - clhs277*clhs8;
        const double clhs283 =     clhs11*clhs275 + clhs12*clhs276 - clhs13*clhs265 - clhs14*clhs277;
        const double clhs284 =     clhs282*tangentetaslave(0,0) + clhs282*tangentxislave(0,0) + clhs283*tangentetaslave(0,1) + clhs283*tangentxislave(0,1);
        const double clhs285 =     clhs284*clhs38*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs286 =     clhs23*clhs285;
        const double clhs287 =     clhs278*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs288 =     clhs284*clhs38*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs289 =     clhs271 + clhs273;
        const double clhs290 =     clhs289*clhs38*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs291 =     std::pow(normalslave(0,0), 2);
        const double clhs292 =     clhs25 - clhs37;
        const double clhs293 =     std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2);
        const double clhs294 =     clhs293*clhs76*clhs83*mu[0];
        const double clhs295 =     clhs76*clhs83*mu[0]*normalslave(0,0);
        const double clhs296 =     clhs295*clhs72;
        const double clhs297 =     tangentetaslave(0,0)*tangentetaslave(0,1);
        const double clhs298 =     tangentxislave(0,0)*tangentxislave(0,1);
        const double clhs299 =     clhs297 + clhs298;
        const double clhs300 =     clhs293*clhs72 + clhs299*clhs74;
        const double clhs301 =     clhs292*clhs300*clhs83*clhs92*mu[0];
        const double clhs302 =     scale_factor*(clhs291 - clhs292*clhs294 - clhs296 + clhs301*clhs72);
        const double clhs303 =     normalslave(0,0)*normalslave(0,1);
        const double clhs304 =     clhs299*clhs76*clhs83*mu[0];
        const double clhs305 =     -clhs292*clhs304 + clhs303;
        const double clhs306 =     clhs76*clhs83*mu[0]*normalslave(0,1);
        const double clhs307 =     clhs306*clhs72;
        const double clhs308 =     std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2);
        const double clhs309 =     clhs299*clhs72 + clhs308*clhs74;
        const double clhs310 =     clhs292*clhs309*clhs83*clhs92*mu[0];
        const double clhs311 =     scale_factor*(clhs305 - clhs307 + clhs310*clhs72);
        const double clhs312 =     std::pow(normalslave(1,0), 2);
        const double clhs313 =     std::pow(tangentetaslave(1,0), 2);
        const double clhs314 =     std::pow(tangentxislave(1,0), 2);
        const double clhs315 =     tangentetaslave(1,0)*tangentetaslave(1,1);
        const double clhs316 =     tangentxislave(1,0)*tangentxislave(1,1);
        const double clhs317 =     clhs315 + clhs316;
        const double clhs318 =     clhs317*clhs81 + clhs79*(clhs313 + clhs314);
        const double clhs319 =     clhs318*clhs38*clhs72*clhs76*clhs96*mu[0];
        const double clhs320 =     normalslave(1,0)*normalslave(1,1);
        const double clhs321 =     clhs0*clhs315 + clhs0*clhs316 + clhs0*clhs320;
        const double clhs322 =     std::pow(tangentetaslave(1,1), 2);
        const double clhs323 =     std::pow(tangentxislave(1,1), 2);
        const double clhs324 =     clhs317*clhs79 + clhs81*(clhs322 + clhs323);
        const double clhs325 =     clhs324*clhs38*clhs72*clhs76*clhs96*mu[0];
        const double clhs326 =     clhs17*tangentetaslave(1,1);
        const double clhs327 =     clhs21*tangentxislave(1,1);
        const double clhs328 =     clhs38*normalslave(0,1);
        const double clhs329 =     clhs42*normalslave(1,1);
        const double clhs330 =     clhs49*penalty_parameter*tangentetaslave(1,1);
        const double clhs331 =     clhs51*penalty_parameter*tangentxislave(1,1);
        const double clhs332 =     clhs58*normalslave(0,1)*penalty_parameter;
        const double clhs333 =     clhs62*normalslave(1,1)*penalty_parameter;
        const double clhs334 =     clhs38*clhs74*clhs76*clhs83*mu[0];
        const double clhs335 =     clhs58*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs336 =     clhs38*clhs74*clhs83*clhs87*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs337 =     clhs38*clhs74*clhs76*clhs94*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs338 =     clhs105*penalty_parameter*tangentetaslave(1,1);
        const double clhs339 =     clhs107*penalty_parameter*tangentxislave(1,1);
        const double clhs340 =     clhs112*normalslave(0,1)*penalty_parameter;
        const double clhs341 =     clhs114*normalslave(1,1)*penalty_parameter;
        const double clhs342 =     clhs112*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs343 =     clhs118*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs344 =     clhs123*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs345 =     clhs132*penalty_parameter*tangentetaslave(1,1);
        const double clhs346 =     clhs134*penalty_parameter*tangentxislave(1,1);
        const double clhs347 =     clhs141*normalslave(0,1)*penalty_parameter;
        const double clhs348 =     clhs145*normalslave(1,1)*penalty_parameter;
        const double clhs349 =     clhs141*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs350 =     clhs149*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs351 =     clhs154*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs352 =     clhs163*penalty_parameter*tangentetaslave(1,1);
        const double clhs353 =     clhs165*penalty_parameter*tangentxislave(1,1);
        const double clhs354 =     clhs170*normalslave(0,1)*penalty_parameter;
        const double clhs355 =     clhs172*normalslave(1,1)*penalty_parameter;
        const double clhs356 =     clhs170*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs357 =     clhs176*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs358 =     clhs181*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs359 =     clhs190*penalty_parameter*tangentetaslave(1,1);
        const double clhs360 =     clhs192*penalty_parameter*tangentxislave(1,1);
        const double clhs361 =     clhs197*normalslave(0,1)*penalty_parameter;
        const double clhs362 =     clhs199*normalslave(1,1)*penalty_parameter;
        const double clhs363 =     clhs197*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs364 =     clhs203*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs365 =     clhs208*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs366 =     clhs217*penalty_parameter*tangentetaslave(1,1);
        const double clhs367 =     clhs219*penalty_parameter*tangentxislave(1,1);
        const double clhs368 =     clhs224*normalslave(0,1)*penalty_parameter;
        const double clhs369 =     clhs226*normalslave(1,1)*penalty_parameter;
        const double clhs370 =     clhs224*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs371 =     clhs230*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs372 =     clhs235*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs373 =     clhs244*penalty_parameter*tangentetaslave(1,1);
        const double clhs374 =     clhs246*penalty_parameter*tangentxislave(1,1);
        const double clhs375 =     clhs251*normalslave(0,1)*penalty_parameter;
        const double clhs376 =     clhs253*normalslave(1,1)*penalty_parameter;
        const double clhs377 =     clhs251*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs378 =     clhs257*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs379 =     clhs262*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs380 =     clhs271*penalty_parameter*tangentetaslave(1,1);
        const double clhs381 =     clhs273*penalty_parameter*tangentxislave(1,1);
        const double clhs382 =     clhs278*normalslave(0,1)*penalty_parameter;
        const double clhs383 =     clhs280*normalslave(1,1)*penalty_parameter;
        const double clhs384 =     clhs278*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs385 =     clhs284*clhs38*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs386 =     clhs289*clhs38*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs387 =     clhs295*clhs74;
        const double clhs388 =     scale_factor*(clhs301*clhs74 + clhs305 - clhs387);
        const double clhs389 =     std::pow(normalslave(0,1), 2);
        const double clhs390 =     clhs308*clhs76*clhs83*mu[0];
        const double clhs391 =     clhs306*clhs74;
        const double clhs392 =     scale_factor*(-clhs292*clhs390 + clhs310*clhs74 + clhs389 - clhs391);
        const double clhs393 =     clhs318*clhs38*clhs74*clhs76*clhs96*mu[0];
        const double clhs394 =     std::pow(normalslave(1,1), 2);
        const double clhs395 =     clhs324*clhs38*clhs74*clhs76*clhs96*mu[0];
        const double clhs396 =     clhs32*clhs88;
        const double clhs397 =     clhs119*clhs32;
        const double clhs398 =     clhs150*clhs32;
        const double clhs399 =     clhs177*clhs32;
        const double clhs400 =     clhs204*clhs32;
        const double clhs401 =     clhs231*clhs32;
        const double clhs402 =     clhs258*clhs32;
        const double clhs403 =     clhs285*clhs32;
        const double clhs404 =     clhs315*clhs9 + clhs316*clhs9 + clhs320*clhs9;
        const double clhs405 =     clhs292*normalslave(0,0);
        const double clhs406 =     clhs40 - clhs41;
        const double clhs407 =     clhs406*normalslave(1,0);
        const double clhs408 =     clhs56 - clhs57;
        const double clhs409 =     clhs408*normalslave(0,0)*penalty_parameter;
        const double clhs410 =     clhs60 - clhs61;
        const double clhs411 =     clhs410*normalslave(1,0)*penalty_parameter;
        const double clhs412 =     clhs292*clhs72*clhs76*clhs83*mu[0];
        const double clhs413 =     clhs292*clhs76*clhs83*clhs87*mu[0]*penalty_parameter;
        const double clhs414 =     clhs27*clhs413;
        const double clhs415 =     clhs408*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs416 =     clhs292*clhs72*clhs83*clhs87*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs417 =     clhs292*clhs72*clhs76*clhs94*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs418 =     clhs118*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs419 =     clhs27*clhs418;
        const double clhs420 =     clhs118*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs421 =     clhs123*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs422 =     clhs139 - clhs140;
        const double clhs423 =     clhs422*normalslave(0,0)*penalty_parameter;
        const double clhs424 =     clhs143 - clhs144;
        const double clhs425 =     clhs424*normalslave(1,0)*penalty_parameter;
        const double clhs426 =     clhs149*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs427 =     clhs27*clhs426;
        const double clhs428 =     clhs422*clhs72*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs429 =     clhs149*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs430 =     clhs154*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs431 =     clhs176*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs432 =     clhs27*clhs431;
        const double clhs433 =     clhs176*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs434 =     clhs181*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs435 =     clhs203*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs436 =     clhs27*clhs435;
        const double clhs437 =     clhs203*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs438 =     clhs208*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs439 =     clhs230*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs440 =     clhs27*clhs439;
        const double clhs441 =     clhs230*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs442 =     clhs235*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs443 =     clhs257*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs444 =     clhs27*clhs443;
        const double clhs445 =     clhs257*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs446 =     clhs262*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs447 =     clhs284*clhs292*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs448 =     clhs27*clhs447;
        const double clhs449 =     clhs284*clhs292*clhs72*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs450 =     clhs289*clhs292*clhs72*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs451 =     clhs300*clhs38*clhs83*clhs92*mu[0];
        const double clhs452 =     -clhs294*clhs38 + clhs296 + clhs451*clhs72;
        const double clhs453 =     scale_factor*(-clhs291 + clhs452);
        const double clhs454 =     -clhs304*clhs38;
        const double clhs455 =     -clhs303 + clhs454;
        const double clhs456 =     clhs309*clhs38*clhs83*clhs92*mu[0];
        const double clhs457 =     clhs307 + clhs456*clhs72;
        const double clhs458 =     scale_factor*(clhs455 + clhs457);
        const double clhs459 =     clhs292*clhs318*clhs72*clhs76*clhs96*mu[0];
        const double clhs460 =     clhs315*clhs4 + clhs316*clhs4 + clhs320*clhs4;
        const double clhs461 =     clhs292*clhs324*clhs72*clhs76*clhs96*mu[0];
        const double clhs462 =     clhs292*normalslave(0,1);
        const double clhs463 =     clhs406*normalslave(1,1);
        const double clhs464 =     clhs408*normalslave(0,1)*penalty_parameter;
        const double clhs465 =     clhs410*normalslave(1,1)*penalty_parameter;
        const double clhs466 =     clhs292*clhs74*clhs76*clhs83*mu[0];
        const double clhs467 =     clhs408*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs468 =     clhs292*clhs74*clhs83*clhs87*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs469 =     clhs292*clhs74*clhs76*clhs94*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs470 =     clhs118*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs471 =     clhs123*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs472 =     clhs422*normalslave(0,1)*penalty_parameter;
        const double clhs473 =     clhs424*normalslave(1,1)*penalty_parameter;
        const double clhs474 =     clhs422*clhs74*clhs76*clhs83*mu[0]*penalty_parameter;
        const double clhs475 =     clhs149*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs476 =     clhs154*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs477 =     clhs176*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs478 =     clhs181*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs479 =     clhs203*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs480 =     clhs208*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs481 =     clhs230*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs482 =     clhs235*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs483 =     clhs257*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs484 =     clhs262*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs485 =     clhs284*clhs292*clhs74*clhs83*clhs91*clhs92*mu[0]*penalty_parameter;
        const double clhs486 =     clhs289*clhs292*clhs74*clhs76*clhs95*clhs96*mu[0]*penalty_parameter;
        const double clhs487 =     clhs387 + clhs451*clhs74;
        const double clhs488 =     scale_factor*(clhs455 + clhs487);
        const double clhs489 =     -clhs38*clhs390 + clhs391 + clhs456*clhs74;
        const double clhs490 =     scale_factor*(-clhs389 + clhs489);
        const double clhs491 =     clhs292*clhs318*clhs74*clhs76*clhs96*mu[0];
        const double clhs492 =     clhs292*clhs324*clhs74*clhs76*clhs96*mu[0];
        const double clhs493 =     clhs29*clhs413;
        const double clhs494 =     clhs29*clhs418;
        const double clhs495 =     clhs29*clhs426;
        const double clhs496 =     clhs29*clhs431;
        const double clhs497 =     clhs29*clhs435;
        const double clhs498 =     clhs29*clhs439;
        const double clhs499 =     clhs29*clhs443;
        const double clhs500 =     clhs29*clhs447;
        const double clhs501 =     clhs315*clhs6 + clhs316*clhs6 + clhs320*clhs6;
        const double clhs502 =     0.5*clhs293*clhs76*clhs83*mu[0];
        const double clhs503 =     clhs292*clhs87;
        const double clhs504 =     -clhs503;
        const double clhs505 =     1.0/clhs75;
        const double clhs506 =     clhs505*clhs72*clhs91;
        const double clhs507 =     1.0/clhs82;
        const double clhs508 =     clhs292*clhs507*clhs72*clhs95;
        const double clhs509 =     clhs408*clhs72 + clhs503*clhs506 + clhs504 + clhs508*clhs94;
        const double clhs510 =     0.5*clhs299*clhs76*clhs83*mu[0];
        const double clhs511 =     clhs505*clhs74*clhs91;
        const double clhs512 =     clhs292*clhs507*clhs74*clhs95;
        const double clhs513 =     clhs408*clhs74 + clhs503*clhs511 + clhs504 + clhs512*clhs94;
        const double clhs514 =     clhs118*clhs292;
        const double clhs515 =     -clhs514;
        const double clhs516 =     clhs112*clhs72 + clhs123*clhs508 + clhs506*clhs514 + clhs515;
        const double clhs517 =     clhs112*clhs74 + clhs123*clhs512 + clhs511*clhs514 + clhs515;
        const double clhs518 =     clhs149*clhs292;
        const double clhs519 =     -clhs518;
        const double clhs520 =     clhs154*clhs508 + clhs422*clhs72 + clhs506*clhs518 + clhs519;
        const double clhs521 =     clhs154*clhs512 + clhs422*clhs74 + clhs511*clhs518 + clhs519;
        const double clhs522 =     clhs176*clhs292;
        const double clhs523 =     -clhs522;
        const double clhs524 =     clhs170*clhs72 + clhs181*clhs508 + clhs506*clhs522 + clhs523;
        const double clhs525 =     clhs170*clhs74 + clhs181*clhs512 + clhs511*clhs522 + clhs523;
        const double clhs526 =     clhs203*clhs292;
        const double clhs527 =     -clhs526;
        const double clhs528 =     clhs197*clhs72 + clhs208*clhs508 + clhs506*clhs526 + clhs527;
        const double clhs529 =     clhs197*clhs74 + clhs208*clhs512 + clhs511*clhs526 + clhs527;
        const double clhs530 =     clhs230*clhs292;
        const double clhs531 =     -clhs530;
        const double clhs532 =     clhs224*clhs72 + clhs235*clhs508 + clhs506*clhs530 + clhs531;
        const double clhs533 =     clhs224*clhs74 + clhs235*clhs512 + clhs511*clhs530 + clhs531;
        const double clhs534 =     clhs257*clhs292;
        const double clhs535 =     -clhs534;
        const double clhs536 =     clhs251*clhs72 + clhs262*clhs508 + clhs506*clhs534 + clhs535;
        const double clhs537 =     clhs251*clhs74 + clhs262*clhs512 + clhs511*clhs534 + clhs535;
        const double clhs538 =     clhs284*clhs292;
        const double clhs539 =     -clhs538;
        const double clhs540 =     clhs278*clhs72 + clhs289*clhs508 + clhs506*clhs538 + clhs539;
        const double clhs541 =     clhs278*clhs74 + clhs289*clhs512 + clhs511*clhs538 + clhs539;
        const double clhs542 =     1.0/penalty_parameter;
        const double clhs543 =     std::pow(scale_factor, 2);
        const double clhs544 =     0.5*clhs542*clhs543;
        const double clhs545 =     clhs293 + clhs452;
        const double clhs546 =     clhs297 + clhs298 + clhs454;
        const double clhs547 =     clhs487 + clhs546;
        const double clhs548 =     clhs457 + clhs546;
        const double clhs549 =     clhs308 + clhs489;
        const double clhs550 =     0.5*clhs292*clhs300*clhs542*clhs543*clhs76*clhs96*mu[0];
        const double clhs551 =     0.5*clhs308*clhs76*clhs83*mu[0];
        const double clhs552 =     0.5*clhs292*clhs309*clhs542*clhs543*clhs76*clhs96*mu[0];
    
        lhs(0,0)=clhs0*clhs50 + clhs0*clhs52 + clhs0*clhs63 + clhs1*clhs18 + clhs1*clhs22 - clhs1*clhs43 + clhs23*clhs59 - clhs23*clhs90 - clhs23*clhs93 - clhs23*clhs97 - clhs24*clhs39 + clhs24*clhs84 + clhs89;
        lhs(0,1)=clhs0*clhs106 + clhs0*clhs108 - clhs0*clhs115 - clhs113*clhs23 + clhs120 + clhs121*clhs23 - clhs122*clhs23 - clhs124*clhs23 + clhs18*clhs98 + clhs22*clhs98 - clhs39*clhs99 - clhs43*clhs98 + clhs84*clhs99;
        lhs(0,2)=clhs0*clhs133 + clhs0*clhs135 + clhs0*clhs146 + clhs125*clhs18 + clhs125*clhs22 - clhs125*clhs43 - clhs126*clhs39 + clhs126*clhs84 + clhs142*clhs23 + clhs151 - clhs152*clhs23 - clhs153*clhs23 - clhs155*clhs23;
        lhs(0,3)=clhs0*clhs164 + clhs0*clhs166 - clhs0*clhs173 + clhs156*clhs18 + clhs156*clhs22 - clhs156*clhs43 - clhs157*clhs39 + clhs157*clhs84 - clhs171*clhs23 + clhs178 + clhs179*clhs23 - clhs180*clhs23 - clhs182*clhs23;
        lhs(0,4)=clhs0*clhs191 + clhs0*clhs193 - clhs0*clhs200 + clhs18*clhs183 + clhs183*clhs22 - clhs183*clhs43 - clhs184*clhs39 + clhs184*clhs84 - clhs198*clhs23 + clhs205 + clhs206*clhs23 - clhs207*clhs23 - clhs209*clhs23;
        lhs(0,5)=clhs0*clhs218 + clhs0*clhs220 - clhs0*clhs227 + clhs18*clhs210 + clhs210*clhs22 - clhs210*clhs43 - clhs211*clhs39 + clhs211*clhs84 - clhs225*clhs23 + clhs23*clhs233 - clhs23*clhs234 - clhs23*clhs236 + clhs232;
        lhs(0,6)=clhs0*clhs245 + clhs0*clhs247 - clhs0*clhs254 + clhs18*clhs237 + clhs22*clhs237 - clhs23*clhs252 + clhs23*clhs260 - clhs23*clhs261 - clhs23*clhs263 - clhs237*clhs43 - clhs238*clhs39 + clhs238*clhs84 + clhs259;
        lhs(0,7)=clhs0*clhs272 + clhs0*clhs274 - clhs0*clhs281 + clhs18*clhs264 + clhs22*clhs264 - clhs23*clhs279 + clhs23*clhs287 - clhs23*clhs288 - clhs23*clhs290 - clhs264*clhs43 - clhs265*clhs39 + clhs265*clhs84 + clhs286;
        lhs(0,8)=clhs23*clhs302;
        lhs(0,9)=clhs23*clhs311;
        lhs(0,10)=scale_factor*(clhs0*clhs312 + clhs0*clhs313 + clhs0*clhs314 - clhs23*clhs319);
        lhs(0,11)=scale_factor*(-clhs23*clhs325 + clhs321);
        lhs(1,0)=clhs0*clhs330 + clhs0*clhs331 + clhs0*clhs333 + clhs1*clhs326 + clhs1*clhs327 - clhs1*clhs329 + clhs23*clhs332 - clhs23*clhs335 - clhs23*clhs336 - clhs23*clhs337 - clhs24*clhs328 + clhs24*clhs334 + clhs89;
        lhs(1,1)=clhs0*clhs338 + clhs0*clhs339 - clhs0*clhs341 + clhs120 - clhs23*clhs340 + clhs23*clhs342 - clhs23*clhs343 - clhs23*clhs344 + clhs326*clhs98 + clhs327*clhs98 - clhs328*clhs99 - clhs329*clhs98 + clhs334*clhs99;
        lhs(1,2)=clhs0*clhs345 + clhs0*clhs346 + clhs0*clhs348 + clhs125*clhs326 + clhs125*clhs327 - clhs125*clhs329 - clhs126*clhs328 + clhs126*clhs334 + clhs151 + clhs23*clhs347 - clhs23*clhs349 - clhs23*clhs350 - clhs23*clhs351;
        lhs(1,3)=clhs0*clhs352 + clhs0*clhs353 - clhs0*clhs355 + clhs156*clhs326 + clhs156*clhs327 - clhs156*clhs329 - clhs157*clhs328 + clhs157*clhs334 + clhs178 - clhs23*clhs354 + clhs23*clhs356 - clhs23*clhs357 - clhs23*clhs358;
        lhs(1,4)=clhs0*clhs359 + clhs0*clhs360 - clhs0*clhs362 + clhs183*clhs326 + clhs183*clhs327 - clhs183*clhs329 - clhs184*clhs328 + clhs184*clhs334 + clhs205 - clhs23*clhs361 + clhs23*clhs363 - clhs23*clhs364 - clhs23*clhs365;
        lhs(1,5)=clhs0*clhs366 + clhs0*clhs367 - clhs0*clhs369 + clhs210*clhs326 + clhs210*clhs327 - clhs210*clhs329 - clhs211*clhs328 + clhs211*clhs334 - clhs23*clhs368 + clhs23*clhs370 - clhs23*clhs371 - clhs23*clhs372 + clhs232;
        lhs(1,6)=clhs0*clhs373 + clhs0*clhs374 - clhs0*clhs376 - clhs23*clhs375 + clhs23*clhs377 - clhs23*clhs378 - clhs23*clhs379 + clhs237*clhs326 + clhs237*clhs327 - clhs237*clhs329 - clhs238*clhs328 + clhs238*clhs334 + clhs259;
        lhs(1,7)=clhs0*clhs380 + clhs0*clhs381 - clhs0*clhs383 - clhs23*clhs382 + clhs23*clhs384 - clhs23*clhs385 - clhs23*clhs386 + clhs264*clhs326 + clhs264*clhs327 - clhs264*clhs329 - clhs265*clhs328 + clhs265*clhs334 + clhs286;
        lhs(1,8)=clhs23*clhs388;
        lhs(1,9)=clhs23*clhs392;
        lhs(1,10)=scale_factor*(-clhs23*clhs393 + clhs321);
        lhs(1,11)=scale_factor*(clhs0*clhs322 + clhs0*clhs323 + clhs0*clhs394 - clhs23*clhs395);
        lhs(2,0)=clhs18*clhs46 + clhs22*clhs46 + clhs32*clhs59 - clhs32*clhs90 - clhs32*clhs93 - clhs32*clhs97 - clhs39*clhs55 + clhs396 - clhs43*clhs46 + clhs50*clhs9 + clhs52*clhs9 + clhs55*clhs84 + clhs63*clhs9;
        lhs(2,1)=clhs102*clhs18 + clhs102*clhs22 - clhs102*clhs43 + clhs106*clhs9 + clhs108*clhs9 - clhs111*clhs39 + clhs111*clhs84 - clhs113*clhs32 - clhs115*clhs9 + clhs121*clhs32 - clhs122*clhs32 - clhs124*clhs32 + clhs397;
        lhs(2,2)=clhs129*clhs18 + clhs129*clhs22 - clhs129*clhs43 + clhs133*clhs9 + clhs135*clhs9 - clhs138*clhs39 + clhs138*clhs84 + clhs142*clhs32 + clhs146*clhs9 - clhs152*clhs32 - clhs153*clhs32 - clhs155*clhs32 + clhs398;
        lhs(2,3)=clhs160*clhs18 + clhs160*clhs22 - clhs160*clhs43 + clhs164*clhs9 + clhs166*clhs9 - clhs169*clhs39 + clhs169*clhs84 - clhs171*clhs32 - clhs173*clhs9 + clhs179*clhs32 - clhs180*clhs32 - clhs182*clhs32 + clhs399;
        lhs(2,4)=clhs18*clhs187 + clhs187*clhs22 - clhs187*clhs43 + clhs191*clhs9 + clhs193*clhs9 - clhs196*clhs39 + clhs196*clhs84 - clhs198*clhs32 - clhs200*clhs9 + clhs206*clhs32 - clhs207*clhs32 - clhs209*clhs32 + clhs400;
        lhs(2,5)=clhs18*clhs214 + clhs214*clhs22 - clhs214*clhs43 + clhs218*clhs9 + clhs220*clhs9 - clhs223*clhs39 + clhs223*clhs84 - clhs225*clhs32 - clhs227*clhs9 + clhs233*clhs32 - clhs234*clhs32 - clhs236*clhs32 + clhs401;
        lhs(2,6)=clhs18*clhs241 + clhs22*clhs241 - clhs241*clhs43 + clhs245*clhs9 + clhs247*clhs9 - clhs250*clhs39 + clhs250*clhs84 - clhs252*clhs32 - clhs254*clhs9 + clhs260*clhs32 - clhs261*clhs32 - clhs263*clhs32 + clhs402;
        lhs(2,7)=clhs18*clhs268 + clhs22*clhs268 - clhs268*clhs43 + clhs272*clhs9 + clhs274*clhs9 - clhs277*clhs39 + clhs277*clhs84 - clhs279*clhs32 - clhs281*clhs9 + clhs287*clhs32 - clhs288*clhs32 - clhs290*clhs32 + clhs403;
        lhs(2,8)=clhs302*clhs32;
        lhs(2,9)=clhs311*clhs32;
        lhs(2,10)=scale_factor*(clhs312*clhs9 + clhs313*clhs9 + clhs314*clhs9 - clhs319*clhs32);
        lhs(2,11)=scale_factor*(-clhs32*clhs325 + clhs404);
        lhs(3,0)=clhs32*clhs332 - clhs32*clhs335 - clhs32*clhs336 - clhs32*clhs337 + clhs326*clhs46 + clhs327*clhs46 - clhs328*clhs55 - clhs329*clhs46 + clhs330*clhs9 + clhs331*clhs9 + clhs333*clhs9 + clhs334*clhs55 + clhs396;
        lhs(3,1)=clhs102*clhs326 + clhs102*clhs327 - clhs102*clhs329 - clhs111*clhs328 + clhs111*clhs334 - clhs32*clhs340 + clhs32*clhs342 - clhs32*clhs343 - clhs32*clhs344 + clhs338*clhs9 + clhs339*clhs9 - clhs341*clhs9 + clhs397;
        lhs(3,2)=clhs129*clhs326 + clhs129*clhs327 - clhs129*clhs329 - clhs138*clhs328 + clhs138*clhs334 + clhs32*clhs347 - clhs32*clhs349 - clhs32*clhs350 - clhs32*clhs351 + clhs345*clhs9 + clhs346*clhs9 + clhs348*clhs9 + clhs398;
        lhs(3,3)=clhs160*clhs326 + clhs160*clhs327 - clhs160*clhs329 - clhs169*clhs328 + clhs169*clhs334 - clhs32*clhs354 + clhs32*clhs356 - clhs32*clhs357 - clhs32*clhs358 + clhs352*clhs9 + clhs353*clhs9 - clhs355*clhs9 + clhs399;
        lhs(3,4)=clhs187*clhs326 + clhs187*clhs327 - clhs187*clhs329 - clhs196*clhs328 + clhs196*clhs334 - clhs32*clhs361 + clhs32*clhs363 - clhs32*clhs364 - clhs32*clhs365 + clhs359*clhs9 + clhs360*clhs9 - clhs362*clhs9 + clhs400;
        lhs(3,5)=clhs214*clhs326 + clhs214*clhs327 - clhs214*clhs329 - clhs223*clhs328 + clhs223*clhs334 - clhs32*clhs368 + clhs32*clhs370 - clhs32*clhs371 - clhs32*clhs372 + clhs366*clhs9 + clhs367*clhs9 - clhs369*clhs9 + clhs401;
        lhs(3,6)=clhs241*clhs326 + clhs241*clhs327 - clhs241*clhs329 - clhs250*clhs328 + clhs250*clhs334 - clhs32*clhs375 + clhs32*clhs377 - clhs32*clhs378 - clhs32*clhs379 + clhs373*clhs9 + clhs374*clhs9 - clhs376*clhs9 + clhs402;
        lhs(3,7)=clhs268*clhs326 + clhs268*clhs327 - clhs268*clhs329 - clhs277*clhs328 + clhs277*clhs334 - clhs32*clhs382 + clhs32*clhs384 - clhs32*clhs385 - clhs32*clhs386 + clhs380*clhs9 + clhs381*clhs9 - clhs383*clhs9 + clhs403;
        lhs(3,8)=clhs32*clhs388;
        lhs(3,9)=clhs32*clhs392;
        lhs(3,10)=scale_factor*(-clhs32*clhs393 + clhs404);
        lhs(3,11)=scale_factor*(-clhs32*clhs395 + clhs322*clhs9 + clhs323*clhs9 + clhs394*clhs9);
        lhs(4,0)=-clhs18*clhs44 - clhs22*clhs44 + clhs27*clhs409 - clhs27*clhs415 - clhs27*clhs416 - clhs27*clhs417 + clhs4*clhs411 - clhs4*clhs50 - clhs4*clhs52 - clhs405*clhs53 - clhs407*clhs44 + clhs412*clhs53 + clhs414;
        lhs(4,1)=-clhs100*clhs18 - clhs100*clhs22 - clhs100*clhs407 - clhs106*clhs4 - clhs108*clhs4 - clhs109*clhs405 + clhs109*clhs412 + clhs113*clhs27 + clhs115*clhs4 - clhs121*clhs27 - clhs27*clhs420 - clhs27*clhs421 + clhs419;
        lhs(4,2)=-clhs127*clhs18 - clhs127*clhs22 - clhs127*clhs407 - clhs133*clhs4 - clhs135*clhs4 - clhs136*clhs405 + clhs136*clhs412 + clhs27*clhs423 - clhs27*clhs428 - clhs27*clhs429 - clhs27*clhs430 + clhs4*clhs425 + clhs427;
        lhs(4,3)=-clhs158*clhs18 - clhs158*clhs22 - clhs158*clhs407 - clhs164*clhs4 - clhs166*clhs4 - clhs167*clhs405 + clhs167*clhs412 + clhs171*clhs27 + clhs173*clhs4 - clhs179*clhs27 - clhs27*clhs433 - clhs27*clhs434 + clhs432;
        lhs(4,4)=-clhs18*clhs185 - clhs185*clhs22 - clhs185*clhs407 - clhs191*clhs4 - clhs193*clhs4 - clhs194*clhs405 + clhs194*clhs412 + clhs198*clhs27 + clhs200*clhs4 - clhs206*clhs27 - clhs27*clhs437 - clhs27*clhs438 + clhs436;
        lhs(4,5)=-clhs18*clhs212 - clhs212*clhs22 - clhs212*clhs407 - clhs218*clhs4 - clhs220*clhs4 - clhs221*clhs405 + clhs221*clhs412 + clhs225*clhs27 + clhs227*clhs4 - clhs233*clhs27 - clhs27*clhs441 - clhs27*clhs442 + clhs440;
        lhs(4,6)=-clhs18*clhs239 - clhs22*clhs239 - clhs239*clhs407 - clhs245*clhs4 - clhs247*clhs4 - clhs248*clhs405 + clhs248*clhs412 + clhs252*clhs27 + clhs254*clhs4 - clhs260*clhs27 - clhs27*clhs445 - clhs27*clhs446 + clhs444;
        lhs(4,7)=-clhs18*clhs266 - clhs22*clhs266 - clhs266*clhs407 + clhs27*clhs279 - clhs27*clhs287 - clhs27*clhs449 - clhs27*clhs450 - clhs272*clhs4 - clhs274*clhs4 - clhs275*clhs405 + clhs275*clhs412 + clhs281*clhs4 + clhs448;
        lhs(4,8)=clhs27*clhs453;
        lhs(4,9)=clhs27*clhs458;
        lhs(4,10)=-scale_factor*(clhs27*clhs459 + clhs312*clhs4 + clhs313*clhs4 + clhs314*clhs4);
        lhs(4,11)=-scale_factor*(clhs27*clhs461 + clhs460);
        lhs(5,0)=clhs27*clhs464 - clhs27*clhs467 - clhs27*clhs468 - clhs27*clhs469 - clhs326*clhs44 - clhs327*clhs44 - clhs330*clhs4 - clhs331*clhs4 + clhs4*clhs465 + clhs414 - clhs44*clhs463 - clhs462*clhs53 + clhs466*clhs53;
        lhs(5,1)=-clhs100*clhs326 - clhs100*clhs327 - clhs100*clhs463 - clhs109*clhs462 + clhs109*clhs466 + clhs27*clhs340 - clhs27*clhs342 - clhs27*clhs470 - clhs27*clhs471 - clhs338*clhs4 - clhs339*clhs4 + clhs341*clhs4 + clhs419;
        lhs(5,2)=-clhs127*clhs326 - clhs127*clhs327 - clhs127*clhs463 - clhs136*clhs462 + clhs136*clhs466 + clhs27*clhs472 - clhs27*clhs474 - clhs27*clhs475 - clhs27*clhs476 - clhs345*clhs4 - clhs346*clhs4 + clhs4*clhs473 + clhs427;
        lhs(5,3)=-clhs158*clhs326 - clhs158*clhs327 - clhs158*clhs463 - clhs167*clhs462 + clhs167*clhs466 + clhs27*clhs354 - clhs27*clhs356 - clhs27*clhs477 - clhs27*clhs478 - clhs352*clhs4 - clhs353*clhs4 + clhs355*clhs4 + clhs432;
        lhs(5,4)=-clhs185*clhs326 - clhs185*clhs327 - clhs185*clhs463 - clhs194*clhs462 + clhs194*clhs466 + clhs27*clhs361 - clhs27*clhs363 - clhs27*clhs479 - clhs27*clhs480 - clhs359*clhs4 - clhs360*clhs4 + clhs362*clhs4 + clhs436;
        lhs(5,5)=-clhs212*clhs326 - clhs212*clhs327 - clhs212*clhs463 - clhs221*clhs462 + clhs221*clhs466 + clhs27*clhs368 - clhs27*clhs370 - clhs27*clhs481 - clhs27*clhs482 - clhs366*clhs4 - clhs367*clhs4 + clhs369*clhs4 + clhs440;
        lhs(5,6)=-clhs239*clhs326 - clhs239*clhs327 - clhs239*clhs463 - clhs248*clhs462 + clhs248*clhs466 + clhs27*clhs375 - clhs27*clhs377 - clhs27*clhs483 - clhs27*clhs484 - clhs373*clhs4 - clhs374*clhs4 + clhs376*clhs4 + clhs444;
        lhs(5,7)=-clhs266*clhs326 - clhs266*clhs327 - clhs266*clhs463 + clhs27*clhs382 - clhs27*clhs384 - clhs27*clhs485 - clhs27*clhs486 - clhs275*clhs462 + clhs275*clhs466 - clhs380*clhs4 - clhs381*clhs4 + clhs383*clhs4 + clhs448;
        lhs(5,8)=clhs27*clhs488;
        lhs(5,9)=clhs27*clhs490;
        lhs(5,10)=-scale_factor*(clhs27*clhs491 + clhs460);
        lhs(5,11)=-scale_factor*(clhs27*clhs492 + clhs322*clhs4 + clhs323*clhs4 + clhs394*clhs4);
        lhs(6,0)=-clhs18*clhs45 - clhs22*clhs45 + clhs29*clhs409 - clhs29*clhs415 - clhs29*clhs416 - clhs29*clhs417 - clhs405*clhs54 - clhs407*clhs45 + clhs411*clhs6 + clhs412*clhs54 + clhs493 - clhs50*clhs6 - clhs52*clhs6;
        lhs(6,1)=-clhs101*clhs18 - clhs101*clhs22 - clhs101*clhs407 - clhs106*clhs6 - clhs108*clhs6 - clhs110*clhs405 + clhs110*clhs412 + clhs113*clhs29 + clhs115*clhs6 - clhs121*clhs29 - clhs29*clhs420 - clhs29*clhs421 + clhs494;
        lhs(6,2)=-clhs128*clhs18 - clhs128*clhs22 - clhs128*clhs407 - clhs133*clhs6 - clhs135*clhs6 - clhs137*clhs405 + clhs137*clhs412 + clhs29*clhs423 - clhs29*clhs428 - clhs29*clhs429 - clhs29*clhs430 + clhs425*clhs6 + clhs495;
        lhs(6,3)=-clhs159*clhs18 - clhs159*clhs22 - clhs159*clhs407 - clhs164*clhs6 - clhs166*clhs6 - clhs168*clhs405 + clhs168*clhs412 + clhs171*clhs29 + clhs173*clhs6 - clhs179*clhs29 - clhs29*clhs433 - clhs29*clhs434 + clhs496;
        lhs(6,4)=-clhs18*clhs186 - clhs186*clhs22 - clhs186*clhs407 - clhs191*clhs6 - clhs193*clhs6 - clhs195*clhs405 + clhs195*clhs412 + clhs198*clhs29 + clhs200*clhs6 - clhs206*clhs29 - clhs29*clhs437 - clhs29*clhs438 + clhs497;
        lhs(6,5)=-clhs18*clhs213 - clhs213*clhs22 - clhs213*clhs407 - clhs218*clhs6 - clhs220*clhs6 - clhs222*clhs405 + clhs222*clhs412 + clhs225*clhs29 + clhs227*clhs6 - clhs233*clhs29 - clhs29*clhs441 - clhs29*clhs442 + clhs498;
        lhs(6,6)=-clhs18*clhs240 - clhs22*clhs240 - clhs240*clhs407 - clhs245*clhs6 - clhs247*clhs6 - clhs249*clhs405 + clhs249*clhs412 + clhs252*clhs29 + clhs254*clhs6 - clhs260*clhs29 - clhs29*clhs445 - clhs29*clhs446 + clhs499;
        lhs(6,7)=-clhs18*clhs267 - clhs22*clhs267 - clhs267*clhs407 - clhs272*clhs6 - clhs274*clhs6 - clhs276*clhs405 + clhs276*clhs412 + clhs279*clhs29 + clhs281*clhs6 - clhs287*clhs29 - clhs29*clhs449 - clhs29*clhs450 + clhs500;
        lhs(6,8)=clhs29*clhs453;
        lhs(6,9)=clhs29*clhs458;
        lhs(6,10)=-scale_factor*(clhs29*clhs459 + clhs312*clhs6 + clhs313*clhs6 + clhs314*clhs6);
        lhs(6,11)=-scale_factor*(clhs29*clhs461 + clhs501);
        lhs(7,0)=clhs29*clhs464 - clhs29*clhs467 - clhs29*clhs468 - clhs29*clhs469 - clhs326*clhs45 - clhs327*clhs45 - clhs330*clhs6 - clhs331*clhs6 - clhs45*clhs463 - clhs462*clhs54 + clhs465*clhs6 + clhs466*clhs54 + clhs493;
        lhs(7,1)=-clhs101*clhs326 - clhs101*clhs327 - clhs101*clhs463 - clhs110*clhs462 + clhs110*clhs466 + clhs29*clhs340 - clhs29*clhs342 - clhs29*clhs470 - clhs29*clhs471 - clhs338*clhs6 - clhs339*clhs6 + clhs341*clhs6 + clhs494;
        lhs(7,2)=-clhs128*clhs326 - clhs128*clhs327 - clhs128*clhs463 - clhs137*clhs462 + clhs137*clhs466 + clhs29*clhs472 - clhs29*clhs474 - clhs29*clhs475 - clhs29*clhs476 - clhs345*clhs6 - clhs346*clhs6 + clhs473*clhs6 + clhs495;
        lhs(7,3)=-clhs159*clhs326 - clhs159*clhs327 - clhs159*clhs463 - clhs168*clhs462 + clhs168*clhs466 + clhs29*clhs354 - clhs29*clhs356 - clhs29*clhs477 - clhs29*clhs478 - clhs352*clhs6 - clhs353*clhs6 + clhs355*clhs6 + clhs496;
        lhs(7,4)=-clhs186*clhs326 - clhs186*clhs327 - clhs186*clhs463 - clhs195*clhs462 + clhs195*clhs466 + clhs29*clhs361 - clhs29*clhs363 - clhs29*clhs479 - clhs29*clhs480 - clhs359*clhs6 - clhs360*clhs6 + clhs362*clhs6 + clhs497;
        lhs(7,5)=-clhs213*clhs326 - clhs213*clhs327 - clhs213*clhs463 - clhs222*clhs462 + clhs222*clhs466 + clhs29*clhs368 - clhs29*clhs370 - clhs29*clhs481 - clhs29*clhs482 - clhs366*clhs6 - clhs367*clhs6 + clhs369*clhs6 + clhs498;
        lhs(7,6)=-clhs240*clhs326 - clhs240*clhs327 - clhs240*clhs463 - clhs249*clhs462 + clhs249*clhs466 + clhs29*clhs375 - clhs29*clhs377 - clhs29*clhs483 - clhs29*clhs484 - clhs373*clhs6 - clhs374*clhs6 + clhs376*clhs6 + clhs499;
        lhs(7,7)=-clhs267*clhs326 - clhs267*clhs327 - clhs267*clhs463 - clhs276*clhs462 + clhs276*clhs466 + clhs29*clhs382 - clhs29*clhs384 - clhs29*clhs485 - clhs29*clhs486 - clhs380*clhs6 - clhs381*clhs6 + clhs383*clhs6 + clhs500;
        lhs(7,8)=clhs29*clhs488;
        lhs(7,9)=clhs29*clhs490;
        lhs(7,10)=-scale_factor*(clhs29*clhs491 + clhs501);
        lhs(7,11)=-scale_factor*(clhs29*clhs492 + clhs322*clhs6 + clhs323*clhs6 + clhs394*clhs6);
        lhs(8,0)=-scale_factor*(clhs502*clhs509 + clhs510*clhs513 + clhs58*normalslave(0,0));
        lhs(8,1)=scale_factor*(clhs112*normalslave(0,0) - clhs502*clhs516 - clhs510*clhs517);
        lhs(8,2)=-scale_factor*(clhs141*normalslave(0,0) + clhs502*clhs520 + clhs510*clhs521);
        lhs(8,3)=scale_factor*(clhs170*normalslave(0,0) - clhs502*clhs524 - clhs510*clhs525);
        lhs(8,4)=scale_factor*(clhs197*normalslave(0,0) - clhs502*clhs528 - clhs510*clhs529);
        lhs(8,5)=scale_factor*(clhs224*normalslave(0,0) - clhs502*clhs532 - clhs510*clhs533);
        lhs(8,6)=scale_factor*(clhs251*normalslave(0,0) - clhs502*clhs536 - clhs510*clhs537);
        lhs(8,7)=scale_factor*(clhs278*normalslave(0,0) - clhs502*clhs540 - clhs510*clhs541);
        lhs(8,8)=clhs544*(clhs293*clhs545 + clhs299*clhs547);
        lhs(8,9)=clhs544*(clhs293*clhs548 + clhs299*clhs549);
        lhs(8,10)=-clhs318*clhs550;
        lhs(8,11)=-clhs324*clhs550;
        lhs(9,0)=-scale_factor*(clhs509*clhs510 + clhs513*clhs551 + clhs58*normalslave(0,1));
        lhs(9,1)=scale_factor*(clhs112*normalslave(0,1) - clhs510*clhs516 - clhs517*clhs551);
        lhs(9,2)=-scale_factor*(clhs141*normalslave(0,1) + clhs510*clhs520 + clhs521*clhs551);
        lhs(9,3)=scale_factor*(clhs170*normalslave(0,1) - clhs510*clhs524 - clhs525*clhs551);
        lhs(9,4)=scale_factor*(clhs197*normalslave(0,1) - clhs510*clhs528 - clhs529*clhs551);
        lhs(9,5)=scale_factor*(clhs224*normalslave(0,1) - clhs510*clhs532 - clhs533*clhs551);
        lhs(9,6)=scale_factor*(clhs251*normalslave(0,1) - clhs510*clhs536 - clhs537*clhs551);
        lhs(9,7)=scale_factor*(clhs278*normalslave(0,1) - clhs510*clhs540 - clhs541*clhs551);
        lhs(9,8)=clhs544*(clhs299*clhs545 + clhs308*clhs547);
        lhs(9,9)=clhs544*(clhs299*clhs548 + clhs308*clhs549);
        lhs(9,10)=-clhs318*clhs552;
        lhs(9,11)=-clhs324*clhs552;
        lhs(10,0)=scale_factor*(clhs410*normalslave(1,0) - clhs49*tangentetaslave(1,0) - clhs51*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs105*tangentetaslave(1,0) - clhs107*tangentxislave(1,0) + clhs114*normalslave(1,0));
        lhs(10,2)=scale_factor*(-clhs132*tangentetaslave(1,0) - clhs134*tangentxislave(1,0) + clhs424*normalslave(1,0));
        lhs(10,3)=scale_factor*(-clhs163*tangentetaslave(1,0) - clhs165*tangentxislave(1,0) + clhs172*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs190*tangentetaslave(1,0) - clhs192*tangentxislave(1,0) + clhs199*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs217*tangentetaslave(1,0) - clhs219*tangentxislave(1,0) + clhs226*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs244*tangentetaslave(1,0) - clhs246*tangentxislave(1,0) + clhs253*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs271*tangentetaslave(1,0) - clhs273*tangentxislave(1,0) + clhs280*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs410*normalslave(1,1) - clhs49*tangentetaslave(1,1) - clhs51*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs105*tangentetaslave(1,1) - clhs107*tangentxislave(1,1) + clhs114*normalslave(1,1));
        lhs(11,2)=scale_factor*(-clhs132*tangentetaslave(1,1) - clhs134*tangentxislave(1,1) + clhs424*normalslave(1,1));
        lhs(11,3)=scale_factor*(-clhs163*tangentetaslave(1,1) - clhs165*tangentxislave(1,1) + clhs172*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs190*tangentetaslave(1,1) - clhs192*tangentxislave(1,1) + clhs199*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs217*tangentetaslave(1,1) - clhs219*tangentxislave(1,1) + clhs226*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs244*tangentetaslave(1,1) - clhs246*tangentxislave(1,1) + clhs253*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs271*tangentetaslave(1,1) - clhs273*tangentxislave(1,1) + clhs280*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }
    else if (rActiveInactive == 8 )
    {
        const double clhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs1 =     DeltaMOperator[4](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs2 =     X1(0,0) + u1old(0,0);
        const double clhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs4 =     X1(1,0) + u1old(1,0);
        const double clhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs6 =     X2(0,0) + u2old(0,0);
        const double clhs7 =     X2(1,0) + u2old(1,0);
        const double clhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs9 =     -clhs0*clhs6 + clhs2*clhs3 + clhs4*clhs5 - clhs7*clhs8;
        const double clhs10 =     X1(0,1) + u1old(0,1);
        const double clhs11 =     X1(1,1) + u1old(1,1);
        const double clhs12 =     X2(0,1) + u2old(0,1);
        const double clhs13 =     X2(1,1) + u2old(1,1);
        const double clhs14 =     -clhs0*clhs12 + clhs10*clhs3 + clhs11*clhs5 - clhs13*clhs8;
        const double clhs15 =     penalty_parameter*(clhs14*tangentetaslave(0,1) + clhs9*tangentetaslave(0,0)) + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double clhs16 =     clhs15*tangentetaslave(0,0);
        const double clhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs18 =     DeltaMOperator[4](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs19 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs21 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double clhs22 =     -clhs17*clhs6 + clhs19*clhs2 + clhs20*clhs4 - clhs21*clhs7;
        const double clhs23 =     clhs10*clhs19 + clhs11*clhs20 - clhs12*clhs17 - clhs13*clhs21;
        const double clhs24 =     penalty_parameter*(clhs22*tangentetaslave(1,0) + clhs23*tangentetaslave(1,1)) + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double clhs25 =     clhs24*tangentetaslave(1,0);
        const double clhs26 =     penalty_parameter*(clhs14*tangentxislave(0,1) + clhs9*tangentxislave(0,0)) + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double clhs27 =     clhs26*tangentxislave(0,0);
        const double clhs28 =     penalty_parameter*(clhs22*tangentxislave(1,0) + clhs23*tangentxislave(1,1)) + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double clhs29 =     clhs28*tangentxislave(1,0);
        const double clhs30 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double clhs31 =     X1(0,0) + u1(0,0);
        const double clhs32 =     X1(1,0) + u1(1,0);
        const double clhs33 =     X2(0,0) + u2(0,0);
        const double clhs34 =     X2(1,0) + u2(1,0);
        const double clhs35 =     X1(0,1) + u1(0,1);
        const double clhs36 =     X1(1,1) + u1(1,1);
        const double clhs37 =     X2(0,1) + u2(0,1);
        const double clhs38 =     X2(1,1) + u2(1,1);
        const double clhs39 =     penalty_parameter*(normalslave(0,0)*(-clhs0*clhs33 + clhs3*clhs31 + clhs32*clhs5 - clhs34*clhs8) + normalslave(0,1)*(-clhs0*clhs37 + clhs3*clhs35 + clhs36*clhs5 - clhs38*clhs8));
        const double clhs40 =     -clhs30 + clhs39;
        const double clhs41 =     clhs40*normalslave(0,0);
        const double clhs42 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double clhs43 =     penalty_parameter*(normalslave(1,0)*(-clhs17*clhs33 + clhs19*clhs31 + clhs20*clhs32 - clhs21*clhs34) + normalslave(1,1)*(-clhs17*clhs37 + clhs19*clhs35 + clhs20*clhs36 - clhs21*clhs38));
        const double clhs44 =     -clhs42 + clhs43;
        const double clhs45 =     clhs44*normalslave(1,0);
        const double clhs46 =     DeltaDOperator[4](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs47 =     DeltaDOperator[4](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs48 =     DeltaMOperator[4](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs49 =     -clhs1*clhs6 + clhs2*clhs46 + clhs4*clhs47 - clhs48*clhs7;
        const double clhs50 =     -clhs1*clhs12 + clhs10*clhs46 + clhs11*clhs47 - clhs13*clhs48;
        const double clhs51 =     clhs49*tangentetaslave(0,0) + clhs50*tangentetaslave(0,1);
        const double clhs52 =     clhs51*penalty_parameter*tangentetaslave(0,0);
        const double clhs53 =     DeltaDOperator[4](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs54 =     DeltaDOperator[4](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs55 =     DeltaMOperator[4](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,0))
        const double clhs56 =     -clhs18*clhs6 + clhs2*clhs53 + clhs4*clhs54 - clhs55*clhs7;
        const double clhs57 =     clhs10*clhs53 + clhs11*clhs54 - clhs12*clhs18 - clhs13*clhs55;
        const double clhs58 =     clhs56*tangentetaslave(1,0) + clhs57*tangentetaslave(1,1);
        const double clhs59 =     clhs58*penalty_parameter*tangentetaslave(1,0);
        const double clhs60 =     clhs49*tangentxislave(0,0) + clhs50*tangentxislave(0,1);
        const double clhs61 =     clhs60*penalty_parameter*tangentxislave(0,0);
        const double clhs62 =     clhs56*tangentxislave(1,0) + clhs57*tangentxislave(1,1);
        const double clhs63 =     clhs62*penalty_parameter*tangentxislave(1,0);
        const double clhs64 =     normalslave(0,1)*(-clhs1*clhs37 + clhs35*clhs46 + clhs36*clhs47 - clhs38*clhs48);
        const double clhs65 =     normalslave(0,0)*(clhs0 + clhs1*clhs33 - clhs31*clhs46 - clhs32*clhs47 + clhs34*clhs48);
        const double clhs66 =     -clhs64 + clhs65;
        const double clhs67 =     clhs66*normalslave(0,0)*penalty_parameter;
        const double clhs68 =     normalslave(1,1)*(-clhs18*clhs37 + clhs35*clhs53 + clhs36*clhs54 - clhs38*clhs55);
        const double clhs69 =     normalslave(1,0)*(clhs17 + clhs18*clhs33 - clhs31*clhs53 - clhs32*clhs54 + clhs34*clhs55);
        const double clhs70 =     -clhs68 + clhs69;
        const double clhs71 =     clhs70*normalslave(1,0)*penalty_parameter;
        const double clhs72 =     DeltaMOperator[5](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs73 =     DeltaMOperator[5](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs74 =     DeltaDOperator[5](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs75 =     DeltaDOperator[5](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs76 =     DeltaMOperator[5](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs77 =     clhs2*clhs74 + clhs4*clhs75 - clhs6*clhs72 - clhs7*clhs76;
        const double clhs78 =     clhs10*clhs74 + clhs11*clhs75 - clhs12*clhs72 - clhs13*clhs76;
        const double clhs79 =     clhs77*tangentetaslave(0,0) + clhs78*tangentetaslave(0,1);
        const double clhs80 =     clhs79*penalty_parameter*tangentetaslave(0,0);
        const double clhs81 =     DeltaDOperator[5](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs82 =     DeltaDOperator[5](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs83 =     DeltaMOperator[5](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(0,1))
        const double clhs84 =     clhs2*clhs81 + clhs4*clhs82 - clhs6*clhs73 - clhs7*clhs83;
        const double clhs85 =     clhs10*clhs81 + clhs11*clhs82 - clhs12*clhs73 - clhs13*clhs83;
        const double clhs86 =     clhs84*tangentetaslave(1,0) + clhs85*tangentetaslave(1,1);
        const double clhs87 =     clhs86*penalty_parameter*tangentetaslave(1,0);
        const double clhs88 =     clhs77*tangentxislave(0,0) + clhs78*tangentxislave(0,1);
        const double clhs89 =     clhs88*penalty_parameter*tangentxislave(0,0);
        const double clhs90 =     clhs84*tangentxislave(1,0) + clhs85*tangentxislave(1,1);
        const double clhs91 =     clhs90*penalty_parameter*tangentxislave(1,0);
        const double clhs92 =     normalslave(0,0)*(clhs31*clhs74 + clhs32*clhs75 - clhs33*clhs72 - clhs34*clhs76) - normalslave(0,1)*(clhs0 - clhs35*clhs74 - clhs36*clhs75 + clhs37*clhs72 + clhs38*clhs76);
        const double clhs93 =     clhs92*normalslave(0,0)*penalty_parameter;
        const double clhs94 =     normalslave(1,0)*(clhs31*clhs81 + clhs32*clhs82 - clhs33*clhs73 - clhs34*clhs83) - normalslave(1,1)*(clhs17 - clhs35*clhs81 - clhs36*clhs82 + clhs37*clhs73 + clhs38*clhs83);
        const double clhs95 =     clhs94*normalslave(1,0)*penalty_parameter;
        const double clhs96 =     DeltaMOperator[6](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs97 =     DeltaMOperator[6](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs98 =     DeltaDOperator[6](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs99 =     DeltaDOperator[6](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs100 =     DeltaMOperator[6](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs101 =     -clhs100*clhs7 + clhs2*clhs98 + clhs4*clhs99 - clhs6*clhs96;
        const double clhs102 =     clhs10*clhs98 - clhs100*clhs13 + clhs11*clhs99 - clhs12*clhs96;
        const double clhs103 =     clhs101*tangentetaslave(0,0) + clhs102*tangentetaslave(0,1);
        const double clhs104 =     clhs103*penalty_parameter*tangentetaslave(0,0);
        const double clhs105 =     DeltaDOperator[6](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs106 =     DeltaDOperator[6](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs107 =     DeltaMOperator[6](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,0))
        const double clhs108 =     clhs105*clhs2 + clhs106*clhs4 - clhs107*clhs7 - clhs6*clhs97;
        const double clhs109 =     clhs10*clhs105 + clhs106*clhs11 - clhs107*clhs13 - clhs12*clhs97;
        const double clhs110 =     clhs108*tangentetaslave(1,0) + clhs109*tangentetaslave(1,1);
        const double clhs111 =     clhs110*penalty_parameter*tangentetaslave(1,0);
        const double clhs112 =     clhs101*tangentxislave(0,0) + clhs102*tangentxislave(0,1);
        const double clhs113 =     clhs112*penalty_parameter*tangentxislave(0,0);
        const double clhs114 =     clhs108*tangentxislave(1,0) + clhs109*tangentxislave(1,1);
        const double clhs115 =     clhs114*penalty_parameter*tangentxislave(1,0);
        const double clhs116 =     normalslave(0,1)*(-clhs100*clhs38 + clhs35*clhs98 + clhs36*clhs99 - clhs37*clhs96);
        const double clhs117 =     normalslave(0,0)*(clhs100*clhs34 - clhs31*clhs98 - clhs32*clhs99 + clhs33*clhs96 + clhs8);
        const double clhs118 =     -clhs116 + clhs117;
        const double clhs119 =     clhs118*normalslave(0,0)*penalty_parameter;
        const double clhs120 =     normalslave(1,1)*(clhs105*clhs35 + clhs106*clhs36 - clhs107*clhs38 - clhs37*clhs97);
        const double clhs121 =     normalslave(1,0)*(-clhs105*clhs31 - clhs106*clhs32 + clhs107*clhs34 + clhs21 + clhs33*clhs97);
        const double clhs122 =     -clhs120 + clhs121;
        const double clhs123 =     clhs122*normalslave(1,0)*penalty_parameter;
        const double clhs124 =     DeltaMOperator[7](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs125 =     DeltaMOperator[7](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs126 =     DeltaDOperator[7](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs127 =     DeltaDOperator[7](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs128 =     DeltaMOperator[7](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs129 =     -clhs124*clhs6 + clhs126*clhs2 + clhs127*clhs4 - clhs128*clhs7;
        const double clhs130 =     clhs10*clhs126 + clhs11*clhs127 - clhs12*clhs124 - clhs128*clhs13;
        const double clhs131 =     clhs129*tangentetaslave(0,0) + clhs130*tangentetaslave(0,1);
        const double clhs132 =     clhs131*penalty_parameter*tangentetaslave(0,0);
        const double clhs133 =     DeltaDOperator[7](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs134 =     DeltaDOperator[7](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs135 =     DeltaMOperator[7](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U2(1,1))
        const double clhs136 =     -clhs125*clhs6 + clhs133*clhs2 + clhs134*clhs4 - clhs135*clhs7;
        const double clhs137 =     clhs10*clhs133 + clhs11*clhs134 - clhs12*clhs125 - clhs13*clhs135;
        const double clhs138 =     clhs136*tangentetaslave(1,0) + clhs137*tangentetaslave(1,1);
        const double clhs139 =     clhs138*penalty_parameter*tangentetaslave(1,0);
        const double clhs140 =     clhs129*tangentxislave(0,0) + clhs130*tangentxislave(0,1);
        const double clhs141 =     clhs140*penalty_parameter*tangentxislave(0,0);
        const double clhs142 =     clhs136*tangentxislave(1,0) + clhs137*tangentxislave(1,1);
        const double clhs143 =     clhs142*penalty_parameter*tangentxislave(1,0);
        const double clhs144 =     normalslave(0,0)*(-clhs124*clhs33 + clhs126*clhs31 + clhs127*clhs32 - clhs128*clhs34) - normalslave(0,1)*(clhs124*clhs37 - clhs126*clhs35 - clhs127*clhs36 + clhs128*clhs38 + clhs8);
        const double clhs145 =     clhs144*normalslave(0,0)*penalty_parameter;
        const double clhs146 =     normalslave(1,0)*(-clhs125*clhs33 + clhs133*clhs31 + clhs134*clhs32 - clhs135*clhs34) - normalslave(1,1)*(clhs125*clhs37 - clhs133*clhs35 - clhs134*clhs36 + clhs135*clhs38 + clhs21);
        const double clhs147 =     clhs146*normalslave(1,0)*penalty_parameter;
        const double clhs148 =     DeltaMOperator[0](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs149 =     DeltaMOperator[0](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs150 =     DeltaDOperator[0](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs151 =     DeltaDOperator[0](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs152 =     DeltaMOperator[0](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs153 =     -clhs148*clhs6 + clhs150*clhs2 + clhs151*clhs4 - clhs152*clhs7;
        const double clhs154 =     clhs10*clhs150 + clhs11*clhs151 - clhs12*clhs148 - clhs13*clhs152;
        const double clhs155 =     clhs153*tangentetaslave(0,0) + clhs154*tangentetaslave(0,1);
        const double clhs156 =     clhs155*penalty_parameter*tangentetaslave(0,0);
        const double clhs157 =     DeltaDOperator[0](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs158 =     DeltaDOperator[0](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs159 =     DeltaMOperator[0](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,0))
        const double clhs160 =     -clhs149*clhs6 + clhs157*clhs2 + clhs158*clhs4 - clhs159*clhs7;
        const double clhs161 =     clhs10*clhs157 + clhs11*clhs158 - clhs12*clhs149 - clhs13*clhs159;
        const double clhs162 =     clhs160*tangentetaslave(1,0) + clhs161*tangentetaslave(1,1);
        const double clhs163 =     clhs162*penalty_parameter*tangentetaslave(1,0);
        const double clhs164 =     clhs153*tangentxislave(0,0) + clhs154*tangentxislave(0,1);
        const double clhs165 =     clhs164*penalty_parameter*tangentxislave(0,0);
        const double clhs166 =     clhs160*tangentxislave(1,0) + clhs161*tangentxislave(1,1);
        const double clhs167 =     clhs166*penalty_parameter*tangentxislave(1,0);
        const double clhs168 =     normalslave(0,0)*(-clhs148*clhs33 + clhs150*clhs31 + clhs151*clhs32 - clhs152*clhs34 + clhs3) + normalslave(0,1)*(-clhs148*clhs37 + clhs150*clhs35 + clhs151*clhs36 - clhs152*clhs38);
        const double clhs169 =     clhs168*normalslave(0,0)*penalty_parameter;
        const double clhs170 =     normalslave(1,0)*(-clhs149*clhs33 + clhs157*clhs31 + clhs158*clhs32 - clhs159*clhs34 + clhs19) + normalslave(1,1)*(-clhs149*clhs37 + clhs157*clhs35 + clhs158*clhs36 - clhs159*clhs38);
        const double clhs171 =     clhs170*normalslave(1,0)*penalty_parameter;
        const double clhs172 =     DeltaMOperator[1](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs173 =     DeltaMOperator[1](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs174 =     DeltaDOperator[1](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs175 =     DeltaDOperator[1](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs176 =     DeltaMOperator[1](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs177 =     -clhs172*clhs6 + clhs174*clhs2 + clhs175*clhs4 - clhs176*clhs7;
        const double clhs178 =     clhs10*clhs174 + clhs11*clhs175 - clhs12*clhs172 - clhs13*clhs176;
        const double clhs179 =     clhs177*tangentetaslave(0,0) + clhs178*tangentetaslave(0,1);
        const double clhs180 =     clhs179*penalty_parameter*tangentetaslave(0,0);
        const double clhs181 =     DeltaDOperator[1](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs182 =     DeltaDOperator[1](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs183 =     DeltaMOperator[1](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(0,1))
        const double clhs184 =     -clhs173*clhs6 + clhs181*clhs2 + clhs182*clhs4 - clhs183*clhs7;
        const double clhs185 =     clhs10*clhs181 + clhs11*clhs182 - clhs12*clhs173 - clhs13*clhs183;
        const double clhs186 =     clhs184*tangentetaslave(1,0) + clhs185*tangentetaslave(1,1);
        const double clhs187 =     clhs186*penalty_parameter*tangentetaslave(1,0);
        const double clhs188 =     clhs177*tangentxislave(0,0) + clhs178*tangentxislave(0,1);
        const double clhs189 =     clhs188*penalty_parameter*tangentxislave(0,0);
        const double clhs190 =     clhs184*tangentxislave(1,0) + clhs185*tangentxislave(1,1);
        const double clhs191 =     clhs190*penalty_parameter*tangentxislave(1,0);
        const double clhs192 =     normalslave(0,0)*(-clhs172*clhs33 + clhs174*clhs31 + clhs175*clhs32 - clhs176*clhs34) + normalslave(0,1)*(-clhs172*clhs37 + clhs174*clhs35 + clhs175*clhs36 - clhs176*clhs38 + clhs3);
        const double clhs193 =     clhs192*normalslave(0,0)*penalty_parameter;
        const double clhs194 =     normalslave(1,0)*(-clhs173*clhs33 + clhs181*clhs31 + clhs182*clhs32 - clhs183*clhs34) + normalslave(1,1)*(-clhs173*clhs37 + clhs181*clhs35 + clhs182*clhs36 - clhs183*clhs38 + clhs19);
        const double clhs195 =     clhs194*normalslave(1,0)*penalty_parameter;
        const double clhs196 =     DeltaMOperator[2](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs197 =     DeltaMOperator[2](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs198 =     DeltaDOperator[2](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs199 =     DeltaDOperator[2](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs200 =     DeltaMOperator[2](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs201 =     -clhs196*clhs6 + clhs198*clhs2 + clhs199*clhs4 - clhs200*clhs7;
        const double clhs202 =     clhs10*clhs198 + clhs11*clhs199 - clhs12*clhs196 - clhs13*clhs200;
        const double clhs203 =     clhs201*tangentetaslave(0,0) + clhs202*tangentetaslave(0,1);
        const double clhs204 =     clhs203*penalty_parameter*tangentetaslave(0,0);
        const double clhs205 =     DeltaDOperator[2](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs206 =     DeltaDOperator[2](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs207 =     DeltaMOperator[2](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,0))
        const double clhs208 =     -clhs197*clhs6 + clhs2*clhs205 + clhs206*clhs4 - clhs207*clhs7;
        const double clhs209 =     clhs10*clhs205 + clhs11*clhs206 - clhs12*clhs197 - clhs13*clhs207;
        const double clhs210 =     clhs208*tangentetaslave(1,0) + clhs209*tangentetaslave(1,1);
        const double clhs211 =     clhs210*penalty_parameter*tangentetaslave(1,0);
        const double clhs212 =     clhs201*tangentxislave(0,0) + clhs202*tangentxislave(0,1);
        const double clhs213 =     clhs212*penalty_parameter*tangentxislave(0,0);
        const double clhs214 =     clhs208*tangentxislave(1,0) + clhs209*tangentxislave(1,1);
        const double clhs215 =     clhs214*penalty_parameter*tangentxislave(1,0);
        const double clhs216 =     normalslave(0,0)*(-clhs196*clhs33 + clhs198*clhs31 + clhs199*clhs32 - clhs200*clhs34 + clhs5) + normalslave(0,1)*(-clhs196*clhs37 + clhs198*clhs35 + clhs199*clhs36 - clhs200*clhs38);
        const double clhs217 =     clhs216*normalslave(0,0)*penalty_parameter;
        const double clhs218 =     normalslave(1,0)*(-clhs197*clhs33 + clhs20 + clhs205*clhs31 + clhs206*clhs32 - clhs207*clhs34) + normalslave(1,1)*(-clhs197*clhs37 + clhs205*clhs35 + clhs206*clhs36 - clhs207*clhs38);
        const double clhs219 =     clhs218*normalslave(1,0)*penalty_parameter;
        const double clhs220 =     DeltaMOperator[3](0,0); // DERIVATIVE(MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs221 =     DeltaMOperator[3](1,0); // DERIVATIVE(MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs222 =     DeltaDOperator[3](0,0); // DERIVATIVE(DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs223 =     DeltaDOperator[3](0,1); // DERIVATIVE(DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs224 =     DeltaMOperator[3](0,1); // DERIVATIVE(MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs225 =     clhs2*clhs222 - clhs220*clhs6 + clhs223*clhs4 - clhs224*clhs7;
        const double clhs226 =     clhs10*clhs222 + clhs11*clhs223 - clhs12*clhs220 - clhs13*clhs224;
        const double clhs227 =     clhs225*tangentetaslave(0,0) + clhs226*tangentetaslave(0,1);
        const double clhs228 =     clhs227*penalty_parameter*tangentetaslave(0,0);
        const double clhs229 =     DeltaDOperator[3](1,0); // DERIVATIVE(DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs230 =     DeltaDOperator[3](1,1); // DERIVATIVE(DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs231 =     DeltaMOperator[3](1,1); // DERIVATIVE(MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1)), U1(1,1))
        const double clhs232 =     clhs2*clhs229 - clhs221*clhs6 + clhs230*clhs4 - clhs231*clhs7;
        const double clhs233 =     clhs10*clhs229 + clhs11*clhs230 - clhs12*clhs221 - clhs13*clhs231;
        const double clhs234 =     clhs232*tangentetaslave(1,0) + clhs233*tangentetaslave(1,1);
        const double clhs235 =     clhs234*penalty_parameter*tangentetaslave(1,0);
        const double clhs236 =     clhs225*tangentxislave(0,0) + clhs226*tangentxislave(0,1);
        const double clhs237 =     clhs236*penalty_parameter*tangentxislave(0,0);
        const double clhs238 =     clhs232*tangentxislave(1,0) + clhs233*tangentxislave(1,1);
        const double clhs239 =     clhs238*penalty_parameter*tangentxislave(1,0);
        const double clhs240 =     normalslave(0,0)*(-clhs220*clhs33 + clhs222*clhs31 + clhs223*clhs32 - clhs224*clhs34) + normalslave(0,1)*(-clhs220*clhs37 + clhs222*clhs35 + clhs223*clhs36 - clhs224*clhs38 + clhs5);
        const double clhs241 =     clhs240*normalslave(0,0)*penalty_parameter;
        const double clhs242 =     normalslave(1,0)*(-clhs221*clhs33 + clhs229*clhs31 + clhs230*clhs32 - clhs231*clhs34) + normalslave(1,1)*(clhs20 - clhs221*clhs37 + clhs229*clhs35 + clhs230*clhs36 - clhs231*clhs38);
        const double clhs243 =     clhs242*normalslave(1,0)*penalty_parameter;
        const double clhs244 =     scale_factor*(std::pow(normalslave(0,0), 2) + std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2));
        const double clhs245 =     scale_factor*(normalslave(0,0)*normalslave(0,1) + tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1));
        const double clhs246 =     clhs0*clhs245;
        const double clhs247 =     scale_factor*(std::pow(normalslave(1,0), 2) + std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2));
        const double clhs248 =     scale_factor*(normalslave(1,0)*normalslave(1,1) + tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1));
        const double clhs249 =     clhs17*clhs248;
        const double clhs250 =     clhs15*tangentetaslave(0,1);
        const double clhs251 =     clhs24*tangentetaslave(1,1);
        const double clhs252 =     clhs26*tangentxislave(0,1);
        const double clhs253 =     clhs28*tangentxislave(1,1);
        const double clhs254 =     clhs40*normalslave(0,1);
        const double clhs255 =     clhs44*normalslave(1,1);
        const double clhs256 =     clhs51*penalty_parameter*tangentetaslave(0,1);
        const double clhs257 =     clhs58*penalty_parameter*tangentetaslave(1,1);
        const double clhs258 =     clhs60*penalty_parameter*tangentxislave(0,1);
        const double clhs259 =     clhs62*penalty_parameter*tangentxislave(1,1);
        const double clhs260 =     clhs66*normalslave(0,1)*penalty_parameter;
        const double clhs261 =     clhs70*normalslave(1,1)*penalty_parameter;
        const double clhs262 =     clhs79*penalty_parameter*tangentetaslave(0,1);
        const double clhs263 =     clhs86*penalty_parameter*tangentetaslave(1,1);
        const double clhs264 =     clhs88*penalty_parameter*tangentxislave(0,1);
        const double clhs265 =     clhs90*penalty_parameter*tangentxislave(1,1);
        const double clhs266 =     clhs92*normalslave(0,1)*penalty_parameter;
        const double clhs267 =     clhs94*normalslave(1,1)*penalty_parameter;
        const double clhs268 =     clhs103*penalty_parameter*tangentetaslave(0,1);
        const double clhs269 =     clhs110*penalty_parameter*tangentetaslave(1,1);
        const double clhs270 =     clhs112*penalty_parameter*tangentxislave(0,1);
        const double clhs271 =     clhs114*penalty_parameter*tangentxislave(1,1);
        const double clhs272 =     clhs118*normalslave(0,1)*penalty_parameter;
        const double clhs273 =     clhs122*normalslave(1,1)*penalty_parameter;
        const double clhs274 =     clhs131*penalty_parameter*tangentetaslave(0,1);
        const double clhs275 =     clhs138*penalty_parameter*tangentetaslave(1,1);
        const double clhs276 =     clhs140*penalty_parameter*tangentxislave(0,1);
        const double clhs277 =     clhs142*penalty_parameter*tangentxislave(1,1);
        const double clhs278 =     clhs144*normalslave(0,1)*penalty_parameter;
        const double clhs279 =     clhs146*normalslave(1,1)*penalty_parameter;
        const double clhs280 =     clhs155*penalty_parameter*tangentetaslave(0,1);
        const double clhs281 =     clhs162*penalty_parameter*tangentetaslave(1,1);
        const double clhs282 =     clhs164*penalty_parameter*tangentxislave(0,1);
        const double clhs283 =     clhs166*penalty_parameter*tangentxislave(1,1);
        const double clhs284 =     clhs168*normalslave(0,1)*penalty_parameter;
        const double clhs285 =     clhs170*normalslave(1,1)*penalty_parameter;
        const double clhs286 =     clhs179*penalty_parameter*tangentetaslave(0,1);
        const double clhs287 =     clhs186*penalty_parameter*tangentetaslave(1,1);
        const double clhs288 =     clhs188*penalty_parameter*tangentxislave(0,1);
        const double clhs289 =     clhs190*penalty_parameter*tangentxislave(1,1);
        const double clhs290 =     clhs192*normalslave(0,1)*penalty_parameter;
        const double clhs291 =     clhs194*normalslave(1,1)*penalty_parameter;
        const double clhs292 =     clhs203*penalty_parameter*tangentetaslave(0,1);
        const double clhs293 =     clhs210*penalty_parameter*tangentetaslave(1,1);
        const double clhs294 =     clhs212*penalty_parameter*tangentxislave(0,1);
        const double clhs295 =     clhs214*penalty_parameter*tangentxislave(1,1);
        const double clhs296 =     clhs216*normalslave(0,1)*penalty_parameter;
        const double clhs297 =     clhs218*normalslave(1,1)*penalty_parameter;
        const double clhs298 =     clhs227*penalty_parameter*tangentetaslave(0,1);
        const double clhs299 =     clhs234*penalty_parameter*tangentetaslave(1,1);
        const double clhs300 =     clhs236*penalty_parameter*tangentxislave(0,1);
        const double clhs301 =     clhs238*penalty_parameter*tangentxislave(1,1);
        const double clhs302 =     clhs240*normalslave(0,1)*penalty_parameter;
        const double clhs303 =     clhs242*normalslave(1,1)*penalty_parameter;
        const double clhs304 =     scale_factor*(std::pow(normalslave(0,1), 2) + std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2));
        const double clhs305 =     scale_factor*(std::pow(normalslave(1,1), 2) + std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2));
        const double clhs306 =     clhs245*clhs8;
        const double clhs307 =     clhs21*clhs248;
        const double clhs308 =     clhs30 - clhs39;
        const double clhs309 =     clhs308*normalslave(0,0);
        const double clhs310 =     clhs42 - clhs43;
        const double clhs311 =     clhs310*normalslave(1,0);
        const double clhs312 =     clhs64 - clhs65;
        const double clhs313 =     clhs312*normalslave(0,0)*penalty_parameter;
        const double clhs314 =     clhs68 - clhs69;
        const double clhs315 =     clhs314*normalslave(1,0)*penalty_parameter;
        const double clhs316 =     clhs116 - clhs117;
        const double clhs317 =     clhs316*normalslave(0,0)*penalty_parameter;
        const double clhs318 =     clhs120 - clhs121;
        const double clhs319 =     clhs318*normalslave(1,0)*penalty_parameter;
        const double clhs320 =     -clhs245*clhs3;
        const double clhs321 =     -clhs19*clhs248;
        const double clhs322 =     clhs308*normalslave(0,1);
        const double clhs323 =     clhs310*normalslave(1,1);
        const double clhs324 =     clhs312*normalslave(0,1)*penalty_parameter;
        const double clhs325 =     clhs314*normalslave(1,1)*penalty_parameter;
        const double clhs326 =     clhs316*normalslave(0,1)*penalty_parameter;
        const double clhs327 =     clhs318*normalslave(1,1)*penalty_parameter;
        const double clhs328 =     -clhs245*clhs5;
        const double clhs329 =     -clhs20*clhs248;
    
        lhs(0,0)=clhs0*clhs52 + clhs0*clhs61 + clhs0*clhs67 + clhs1*clhs16 + clhs1*clhs27 - clhs1*clhs41 + clhs17*clhs59 + clhs17*clhs63 + clhs17*clhs71 + clhs18*clhs25 + clhs18*clhs29 - clhs18*clhs45;
        lhs(0,1)=clhs0*clhs80 + clhs0*clhs89 - clhs0*clhs93 + clhs16*clhs72 + clhs17*clhs87 + clhs17*clhs91 - clhs17*clhs95 + clhs25*clhs73 + clhs27*clhs72 + clhs29*clhs73 - clhs41*clhs72 - clhs45*clhs73;
        lhs(0,2)=clhs0*clhs104 + clhs0*clhs113 + clhs0*clhs119 + clhs111*clhs17 + clhs115*clhs17 + clhs123*clhs17 + clhs16*clhs96 + clhs25*clhs97 + clhs27*clhs96 + clhs29*clhs97 - clhs41*clhs96 - clhs45*clhs97;
        lhs(0,3)=clhs0*clhs132 + clhs0*clhs141 - clhs0*clhs145 + clhs124*clhs16 + clhs124*clhs27 - clhs124*clhs41 + clhs125*clhs25 + clhs125*clhs29 - clhs125*clhs45 + clhs139*clhs17 + clhs143*clhs17 - clhs147*clhs17;
        lhs(0,4)=clhs0*clhs156 + clhs0*clhs165 - clhs0*clhs169 + clhs148*clhs16 + clhs148*clhs27 - clhs148*clhs41 + clhs149*clhs25 + clhs149*clhs29 - clhs149*clhs45 + clhs163*clhs17 + clhs167*clhs17 - clhs17*clhs171;
        lhs(0,5)=clhs0*clhs180 + clhs0*clhs189 - clhs0*clhs193 + clhs16*clhs172 + clhs17*clhs187 + clhs17*clhs191 - clhs17*clhs195 + clhs172*clhs27 - clhs172*clhs41 + clhs173*clhs25 + clhs173*clhs29 - clhs173*clhs45;
        lhs(0,6)=clhs0*clhs204 + clhs0*clhs213 - clhs0*clhs217 + clhs16*clhs196 + clhs17*clhs211 + clhs17*clhs215 - clhs17*clhs219 + clhs196*clhs27 - clhs196*clhs41 + clhs197*clhs25 + clhs197*clhs29 - clhs197*clhs45;
        lhs(0,7)=clhs0*clhs228 + clhs0*clhs237 - clhs0*clhs241 + clhs16*clhs220 + clhs17*clhs235 + clhs17*clhs239 - clhs17*clhs243 + clhs220*clhs27 - clhs220*clhs41 + clhs221*clhs25 + clhs221*clhs29 - clhs221*clhs45;
        lhs(0,8)=clhs0*clhs244;
        lhs(0,9)=clhs246;
        lhs(0,10)=clhs17*clhs247;
        lhs(0,11)=clhs249;
        lhs(1,0)=clhs0*clhs256 + clhs0*clhs258 + clhs0*clhs260 + clhs1*clhs250 + clhs1*clhs252 - clhs1*clhs254 + clhs17*clhs257 + clhs17*clhs259 + clhs17*clhs261 + clhs18*clhs251 + clhs18*clhs253 - clhs18*clhs255;
        lhs(1,1)=clhs0*clhs262 + clhs0*clhs264 - clhs0*clhs266 + clhs17*clhs263 + clhs17*clhs265 - clhs17*clhs267 + clhs250*clhs72 + clhs251*clhs73 + clhs252*clhs72 + clhs253*clhs73 - clhs254*clhs72 - clhs255*clhs73;
        lhs(1,2)=clhs0*clhs268 + clhs0*clhs270 + clhs0*clhs272 + clhs17*clhs269 + clhs17*clhs271 + clhs17*clhs273 + clhs250*clhs96 + clhs251*clhs97 + clhs252*clhs96 + clhs253*clhs97 - clhs254*clhs96 - clhs255*clhs97;
        lhs(1,3)=clhs0*clhs274 + clhs0*clhs276 - clhs0*clhs278 + clhs124*clhs250 + clhs124*clhs252 - clhs124*clhs254 + clhs125*clhs251 + clhs125*clhs253 - clhs125*clhs255 + clhs17*clhs275 + clhs17*clhs277 - clhs17*clhs279;
        lhs(1,4)=clhs0*clhs280 + clhs0*clhs282 - clhs0*clhs284 + clhs148*clhs250 + clhs148*clhs252 - clhs148*clhs254 + clhs149*clhs251 + clhs149*clhs253 - clhs149*clhs255 + clhs17*clhs281 + clhs17*clhs283 - clhs17*clhs285;
        lhs(1,5)=clhs0*clhs286 + clhs0*clhs288 - clhs0*clhs290 + clhs17*clhs287 + clhs17*clhs289 - clhs17*clhs291 + clhs172*clhs250 + clhs172*clhs252 - clhs172*clhs254 + clhs173*clhs251 + clhs173*clhs253 - clhs173*clhs255;
        lhs(1,6)=clhs0*clhs292 + clhs0*clhs294 - clhs0*clhs296 + clhs17*clhs293 + clhs17*clhs295 - clhs17*clhs297 + clhs196*clhs250 + clhs196*clhs252 - clhs196*clhs254 + clhs197*clhs251 + clhs197*clhs253 - clhs197*clhs255;
        lhs(1,7)=clhs0*clhs298 + clhs0*clhs300 - clhs0*clhs302 + clhs17*clhs299 + clhs17*clhs301 - clhs17*clhs303 + clhs220*clhs250 + clhs220*clhs252 - clhs220*clhs254 + clhs221*clhs251 + clhs221*clhs253 - clhs221*clhs255;
        lhs(1,8)=clhs246;
        lhs(1,9)=clhs0*clhs304;
        lhs(1,10)=clhs249;
        lhs(1,11)=clhs17*clhs305;
        lhs(2,0)=clhs16*clhs48 + clhs21*clhs59 + clhs21*clhs63 + clhs21*clhs71 + clhs25*clhs55 + clhs27*clhs48 + clhs29*clhs55 - clhs41*clhs48 - clhs45*clhs55 + clhs52*clhs8 + clhs61*clhs8 + clhs67*clhs8;
        lhs(2,1)=clhs16*clhs76 + clhs21*clhs87 + clhs21*clhs91 - clhs21*clhs95 + clhs25*clhs83 + clhs27*clhs76 + clhs29*clhs83 - clhs41*clhs76 - clhs45*clhs83 + clhs8*clhs80 + clhs8*clhs89 - clhs8*clhs93;
        lhs(2,2)=clhs100*clhs16 + clhs100*clhs27 - clhs100*clhs41 + clhs104*clhs8 + clhs107*clhs25 + clhs107*clhs29 - clhs107*clhs45 + clhs111*clhs21 + clhs113*clhs8 + clhs115*clhs21 + clhs119*clhs8 + clhs123*clhs21;
        lhs(2,3)=clhs128*clhs16 + clhs128*clhs27 - clhs128*clhs41 + clhs132*clhs8 + clhs135*clhs25 + clhs135*clhs29 - clhs135*clhs45 + clhs139*clhs21 + clhs141*clhs8 + clhs143*clhs21 - clhs145*clhs8 - clhs147*clhs21;
        lhs(2,4)=clhs152*clhs16 + clhs152*clhs27 - clhs152*clhs41 + clhs156*clhs8 + clhs159*clhs25 + clhs159*clhs29 - clhs159*clhs45 + clhs163*clhs21 + clhs165*clhs8 + clhs167*clhs21 - clhs169*clhs8 - clhs171*clhs21;
        lhs(2,5)=clhs16*clhs176 + clhs176*clhs27 - clhs176*clhs41 + clhs180*clhs8 + clhs183*clhs25 + clhs183*clhs29 - clhs183*clhs45 + clhs187*clhs21 + clhs189*clhs8 + clhs191*clhs21 - clhs193*clhs8 - clhs195*clhs21;
        lhs(2,6)=clhs16*clhs200 + clhs200*clhs27 - clhs200*clhs41 + clhs204*clhs8 + clhs207*clhs25 + clhs207*clhs29 - clhs207*clhs45 + clhs21*clhs211 + clhs21*clhs215 - clhs21*clhs219 + clhs213*clhs8 - clhs217*clhs8;
        lhs(2,7)=clhs16*clhs224 + clhs21*clhs235 + clhs21*clhs239 - clhs21*clhs243 + clhs224*clhs27 - clhs224*clhs41 + clhs228*clhs8 + clhs231*clhs25 + clhs231*clhs29 - clhs231*clhs45 + clhs237*clhs8 - clhs241*clhs8;
        lhs(2,8)=clhs244*clhs8;
        lhs(2,9)=clhs306;
        lhs(2,10)=clhs21*clhs247;
        lhs(2,11)=clhs307;
        lhs(3,0)=clhs21*clhs257 + clhs21*clhs259 + clhs21*clhs261 + clhs250*clhs48 + clhs251*clhs55 + clhs252*clhs48 + clhs253*clhs55 - clhs254*clhs48 - clhs255*clhs55 + clhs256*clhs8 + clhs258*clhs8 + clhs260*clhs8;
        lhs(3,1)=clhs21*clhs263 + clhs21*clhs265 - clhs21*clhs267 + clhs250*clhs76 + clhs251*clhs83 + clhs252*clhs76 + clhs253*clhs83 - clhs254*clhs76 - clhs255*clhs83 + clhs262*clhs8 + clhs264*clhs8 - clhs266*clhs8;
        lhs(3,2)=clhs100*clhs250 + clhs100*clhs252 - clhs100*clhs254 + clhs107*clhs251 + clhs107*clhs253 - clhs107*clhs255 + clhs21*clhs269 + clhs21*clhs271 + clhs21*clhs273 + clhs268*clhs8 + clhs270*clhs8 + clhs272*clhs8;
        lhs(3,3)=clhs128*clhs250 + clhs128*clhs252 - clhs128*clhs254 + clhs135*clhs251 + clhs135*clhs253 - clhs135*clhs255 + clhs21*clhs275 + clhs21*clhs277 - clhs21*clhs279 + clhs274*clhs8 + clhs276*clhs8 - clhs278*clhs8;
        lhs(3,4)=clhs152*clhs250 + clhs152*clhs252 - clhs152*clhs254 + clhs159*clhs251 + clhs159*clhs253 - clhs159*clhs255 + clhs21*clhs281 + clhs21*clhs283 - clhs21*clhs285 + clhs280*clhs8 + clhs282*clhs8 - clhs284*clhs8;
        lhs(3,5)=clhs176*clhs250 + clhs176*clhs252 - clhs176*clhs254 + clhs183*clhs251 + clhs183*clhs253 - clhs183*clhs255 + clhs21*clhs287 + clhs21*clhs289 - clhs21*clhs291 + clhs286*clhs8 + clhs288*clhs8 - clhs290*clhs8;
        lhs(3,6)=clhs200*clhs250 + clhs200*clhs252 - clhs200*clhs254 + clhs207*clhs251 + clhs207*clhs253 - clhs207*clhs255 + clhs21*clhs293 + clhs21*clhs295 - clhs21*clhs297 + clhs292*clhs8 + clhs294*clhs8 - clhs296*clhs8;
        lhs(3,7)=clhs21*clhs299 + clhs21*clhs301 - clhs21*clhs303 + clhs224*clhs250 + clhs224*clhs252 - clhs224*clhs254 + clhs231*clhs251 + clhs231*clhs253 - clhs231*clhs255 + clhs298*clhs8 + clhs300*clhs8 - clhs302*clhs8;
        lhs(3,8)=clhs306;
        lhs(3,9)=clhs304*clhs8;
        lhs(3,10)=clhs307;
        lhs(3,11)=clhs21*clhs305;
        lhs(4,0)=-clhs16*clhs46 + clhs19*clhs315 - clhs19*clhs59 - clhs19*clhs63 - clhs25*clhs53 - clhs27*clhs46 - clhs29*clhs53 + clhs3*clhs313 - clhs3*clhs52 - clhs3*clhs61 - clhs309*clhs46 - clhs311*clhs53;
        lhs(4,1)=-clhs16*clhs74 - clhs19*clhs87 - clhs19*clhs91 + clhs19*clhs95 - clhs25*clhs81 - clhs27*clhs74 - clhs29*clhs81 - clhs3*clhs80 - clhs3*clhs89 + clhs3*clhs93 - clhs309*clhs74 - clhs311*clhs81;
        lhs(4,2)=-clhs104*clhs3 - clhs105*clhs25 - clhs105*clhs29 - clhs105*clhs311 - clhs111*clhs19 - clhs113*clhs3 - clhs115*clhs19 - clhs16*clhs98 + clhs19*clhs319 - clhs27*clhs98 + clhs3*clhs317 - clhs309*clhs98;
        lhs(4,3)=-clhs126*clhs16 - clhs126*clhs27 - clhs126*clhs309 - clhs132*clhs3 - clhs133*clhs25 - clhs133*clhs29 - clhs133*clhs311 - clhs139*clhs19 - clhs141*clhs3 - clhs143*clhs19 + clhs145*clhs3 + clhs147*clhs19;
        lhs(4,4)=-clhs150*clhs16 - clhs150*clhs27 - clhs150*clhs309 - clhs156*clhs3 - clhs157*clhs25 - clhs157*clhs29 - clhs157*clhs311 - clhs163*clhs19 - clhs165*clhs3 - clhs167*clhs19 + clhs169*clhs3 + clhs171*clhs19;
        lhs(4,5)=-clhs16*clhs174 - clhs174*clhs27 - clhs174*clhs309 - clhs180*clhs3 - clhs181*clhs25 - clhs181*clhs29 - clhs181*clhs311 - clhs187*clhs19 - clhs189*clhs3 - clhs19*clhs191 + clhs19*clhs195 + clhs193*clhs3;
        lhs(4,6)=-clhs16*clhs198 - clhs19*clhs211 - clhs19*clhs215 + clhs19*clhs219 - clhs198*clhs27 - clhs198*clhs309 - clhs204*clhs3 - clhs205*clhs25 - clhs205*clhs29 - clhs205*clhs311 - clhs213*clhs3 + clhs217*clhs3;
        lhs(4,7)=-clhs16*clhs222 - clhs19*clhs235 - clhs19*clhs239 + clhs19*clhs243 - clhs222*clhs27 - clhs222*clhs309 - clhs228*clhs3 - clhs229*clhs25 - clhs229*clhs29 - clhs229*clhs311 - clhs237*clhs3 + clhs241*clhs3;
        lhs(4,8)=-clhs244*clhs3;
        lhs(4,9)=clhs320;
        lhs(4,10)=-clhs19*clhs247;
        lhs(4,11)=clhs321;
        lhs(5,0)=-clhs19*clhs257 - clhs19*clhs259 + clhs19*clhs325 - clhs250*clhs46 - clhs251*clhs53 - clhs252*clhs46 - clhs253*clhs53 - clhs256*clhs3 - clhs258*clhs3 + clhs3*clhs324 - clhs322*clhs46 - clhs323*clhs53;
        lhs(5,1)=-clhs19*clhs263 - clhs19*clhs265 + clhs19*clhs267 - clhs250*clhs74 - clhs251*clhs81 - clhs252*clhs74 - clhs253*clhs81 - clhs262*clhs3 - clhs264*clhs3 + clhs266*clhs3 - clhs322*clhs74 - clhs323*clhs81;
        lhs(5,2)=-clhs105*clhs251 - clhs105*clhs253 - clhs105*clhs323 - clhs19*clhs269 - clhs19*clhs271 + clhs19*clhs327 - clhs250*clhs98 - clhs252*clhs98 - clhs268*clhs3 - clhs270*clhs3 + clhs3*clhs326 - clhs322*clhs98;
        lhs(5,3)=-clhs126*clhs250 - clhs126*clhs252 - clhs126*clhs322 - clhs133*clhs251 - clhs133*clhs253 - clhs133*clhs323 - clhs19*clhs275 - clhs19*clhs277 + clhs19*clhs279 - clhs274*clhs3 - clhs276*clhs3 + clhs278*clhs3;
        lhs(5,4)=-clhs150*clhs250 - clhs150*clhs252 - clhs150*clhs322 - clhs157*clhs251 - clhs157*clhs253 - clhs157*clhs323 - clhs19*clhs281 - clhs19*clhs283 + clhs19*clhs285 - clhs280*clhs3 - clhs282*clhs3 + clhs284*clhs3;
        lhs(5,5)=-clhs174*clhs250 - clhs174*clhs252 - clhs174*clhs322 - clhs181*clhs251 - clhs181*clhs253 - clhs181*clhs323 - clhs19*clhs287 - clhs19*clhs289 + clhs19*clhs291 - clhs286*clhs3 - clhs288*clhs3 + clhs290*clhs3;
        lhs(5,6)=-clhs19*clhs293 - clhs19*clhs295 + clhs19*clhs297 - clhs198*clhs250 - clhs198*clhs252 - clhs198*clhs322 - clhs205*clhs251 - clhs205*clhs253 - clhs205*clhs323 - clhs292*clhs3 - clhs294*clhs3 + clhs296*clhs3;
        lhs(5,7)=-clhs19*clhs299 - clhs19*clhs301 + clhs19*clhs303 - clhs222*clhs250 - clhs222*clhs252 - clhs222*clhs322 - clhs229*clhs251 - clhs229*clhs253 - clhs229*clhs323 - clhs298*clhs3 - clhs3*clhs300 + clhs3*clhs302;
        lhs(5,8)=clhs320;
        lhs(5,9)=-clhs3*clhs304;
        lhs(5,10)=clhs321;
        lhs(5,11)=-clhs19*clhs305;
        lhs(6,0)=-clhs16*clhs47 + clhs20*clhs315 - clhs20*clhs59 - clhs20*clhs63 - clhs25*clhs54 - clhs27*clhs47 - clhs29*clhs54 - clhs309*clhs47 - clhs311*clhs54 + clhs313*clhs5 - clhs5*clhs52 - clhs5*clhs61;
        lhs(6,1)=-clhs16*clhs75 - clhs20*clhs87 - clhs20*clhs91 + clhs20*clhs95 - clhs25*clhs82 - clhs27*clhs75 - clhs29*clhs82 - clhs309*clhs75 - clhs311*clhs82 - clhs5*clhs80 - clhs5*clhs89 + clhs5*clhs93;
        lhs(6,2)=-clhs104*clhs5 - clhs106*clhs25 - clhs106*clhs29 - clhs106*clhs311 - clhs111*clhs20 - clhs113*clhs5 - clhs115*clhs20 - clhs16*clhs99 + clhs20*clhs319 - clhs27*clhs99 - clhs309*clhs99 + clhs317*clhs5;
        lhs(6,3)=-clhs127*clhs16 - clhs127*clhs27 - clhs127*clhs309 - clhs132*clhs5 - clhs134*clhs25 - clhs134*clhs29 - clhs134*clhs311 - clhs139*clhs20 - clhs141*clhs5 - clhs143*clhs20 + clhs145*clhs5 + clhs147*clhs20;
        lhs(6,4)=-clhs151*clhs16 - clhs151*clhs27 - clhs151*clhs309 - clhs156*clhs5 - clhs158*clhs25 - clhs158*clhs29 - clhs158*clhs311 - clhs163*clhs20 - clhs165*clhs5 - clhs167*clhs20 + clhs169*clhs5 + clhs171*clhs20;
        lhs(6,5)=-clhs16*clhs175 - clhs175*clhs27 - clhs175*clhs309 - clhs180*clhs5 - clhs182*clhs25 - clhs182*clhs29 - clhs182*clhs311 - clhs187*clhs20 - clhs189*clhs5 - clhs191*clhs20 + clhs193*clhs5 + clhs195*clhs20;
        lhs(6,6)=-clhs16*clhs199 - clhs199*clhs27 - clhs199*clhs309 - clhs20*clhs211 - clhs20*clhs215 + clhs20*clhs219 - clhs204*clhs5 - clhs206*clhs25 - clhs206*clhs29 - clhs206*clhs311 - clhs213*clhs5 + clhs217*clhs5;
        lhs(6,7)=-clhs16*clhs223 - clhs20*clhs235 - clhs20*clhs239 + clhs20*clhs243 - clhs223*clhs27 - clhs223*clhs309 - clhs228*clhs5 - clhs230*clhs25 - clhs230*clhs29 - clhs230*clhs311 - clhs237*clhs5 + clhs241*clhs5;
        lhs(6,8)=-clhs244*clhs5;
        lhs(6,9)=clhs328;
        lhs(6,10)=-clhs20*clhs247;
        lhs(6,11)=clhs329;
        lhs(7,0)=-clhs20*clhs257 - clhs20*clhs259 + clhs20*clhs325 - clhs250*clhs47 - clhs251*clhs54 - clhs252*clhs47 - clhs253*clhs54 - clhs256*clhs5 - clhs258*clhs5 - clhs322*clhs47 - clhs323*clhs54 + clhs324*clhs5;
        lhs(7,1)=-clhs20*clhs263 - clhs20*clhs265 + clhs20*clhs267 - clhs250*clhs75 - clhs251*clhs82 - clhs252*clhs75 - clhs253*clhs82 - clhs262*clhs5 - clhs264*clhs5 + clhs266*clhs5 - clhs322*clhs75 - clhs323*clhs82;
        lhs(7,2)=-clhs106*clhs251 - clhs106*clhs253 - clhs106*clhs323 - clhs20*clhs269 - clhs20*clhs271 + clhs20*clhs327 - clhs250*clhs99 - clhs252*clhs99 - clhs268*clhs5 - clhs270*clhs5 - clhs322*clhs99 + clhs326*clhs5;
        lhs(7,3)=-clhs127*clhs250 - clhs127*clhs252 - clhs127*clhs322 - clhs134*clhs251 - clhs134*clhs253 - clhs134*clhs323 - clhs20*clhs275 - clhs20*clhs277 + clhs20*clhs279 - clhs274*clhs5 - clhs276*clhs5 + clhs278*clhs5;
        lhs(7,4)=-clhs151*clhs250 - clhs151*clhs252 - clhs151*clhs322 - clhs158*clhs251 - clhs158*clhs253 - clhs158*clhs323 - clhs20*clhs281 - clhs20*clhs283 + clhs20*clhs285 - clhs280*clhs5 - clhs282*clhs5 + clhs284*clhs5;
        lhs(7,5)=-clhs175*clhs250 - clhs175*clhs252 - clhs175*clhs322 - clhs182*clhs251 - clhs182*clhs253 - clhs182*clhs323 - clhs20*clhs287 - clhs20*clhs289 + clhs20*clhs291 - clhs286*clhs5 - clhs288*clhs5 + clhs290*clhs5;
        lhs(7,6)=-clhs199*clhs250 - clhs199*clhs252 - clhs199*clhs322 - clhs20*clhs293 - clhs20*clhs295 + clhs20*clhs297 - clhs206*clhs251 - clhs206*clhs253 - clhs206*clhs323 - clhs292*clhs5 - clhs294*clhs5 + clhs296*clhs5;
        lhs(7,7)=-clhs20*clhs299 - clhs20*clhs301 + clhs20*clhs303 - clhs223*clhs250 - clhs223*clhs252 - clhs223*clhs322 - clhs230*clhs251 - clhs230*clhs253 - clhs230*clhs323 - clhs298*clhs5 - clhs300*clhs5 + clhs302*clhs5;
        lhs(7,8)=clhs328;
        lhs(7,9)=-clhs304*clhs5;
        lhs(7,10)=clhs329;
        lhs(7,11)=-clhs20*clhs305;
        lhs(8,0)=scale_factor*(clhs312*normalslave(0,0) - clhs51*tangentetaslave(0,0) - clhs60*tangentxislave(0,0));
        lhs(8,1)=scale_factor*(-clhs79*tangentetaslave(0,0) - clhs88*tangentxislave(0,0) + clhs92*normalslave(0,0));
        lhs(8,2)=scale_factor*(-clhs103*tangentetaslave(0,0) - clhs112*tangentxislave(0,0) + clhs316*normalslave(0,0));
        lhs(8,3)=scale_factor*(-clhs131*tangentetaslave(0,0) - clhs140*tangentxislave(0,0) + clhs144*normalslave(0,0));
        lhs(8,4)=scale_factor*(-clhs155*tangentetaslave(0,0) - clhs164*tangentxislave(0,0) + clhs168*normalslave(0,0));
        lhs(8,5)=scale_factor*(-clhs179*tangentetaslave(0,0) - clhs188*tangentxislave(0,0) + clhs192*normalslave(0,0));
        lhs(8,6)=scale_factor*(-clhs203*tangentetaslave(0,0) - clhs212*tangentxislave(0,0) + clhs216*normalslave(0,0));
        lhs(8,7)=scale_factor*(-clhs227*tangentetaslave(0,0) - clhs236*tangentxislave(0,0) + clhs240*normalslave(0,0));
        lhs(8,8)=0;
        lhs(8,9)=0;
        lhs(8,10)=0;
        lhs(8,11)=0;
        lhs(9,0)=scale_factor*(clhs312*normalslave(0,1) - clhs51*tangentetaslave(0,1) - clhs60*tangentxislave(0,1));
        lhs(9,1)=scale_factor*(-clhs79*tangentetaslave(0,1) - clhs88*tangentxislave(0,1) + clhs92*normalslave(0,1));
        lhs(9,2)=scale_factor*(-clhs103*tangentetaslave(0,1) - clhs112*tangentxislave(0,1) + clhs316*normalslave(0,1));
        lhs(9,3)=scale_factor*(-clhs131*tangentetaslave(0,1) - clhs140*tangentxislave(0,1) + clhs144*normalslave(0,1));
        lhs(9,4)=scale_factor*(-clhs155*tangentetaslave(0,1) - clhs164*tangentxislave(0,1) + clhs168*normalslave(0,1));
        lhs(9,5)=scale_factor*(-clhs179*tangentetaslave(0,1) - clhs188*tangentxislave(0,1) + clhs192*normalslave(0,1));
        lhs(9,6)=scale_factor*(-clhs203*tangentetaslave(0,1) - clhs212*tangentxislave(0,1) + clhs216*normalslave(0,1));
        lhs(9,7)=scale_factor*(-clhs227*tangentetaslave(0,1) - clhs236*tangentxislave(0,1) + clhs240*normalslave(0,1));
        lhs(9,8)=0;
        lhs(9,9)=0;
        lhs(9,10)=0;
        lhs(9,11)=0;
        lhs(10,0)=scale_factor*(clhs314*normalslave(1,0) - clhs58*tangentetaslave(1,0) - clhs62*tangentxislave(1,0));
        lhs(10,1)=scale_factor*(-clhs86*tangentetaslave(1,0) - clhs90*tangentxislave(1,0) + clhs94*normalslave(1,0));
        lhs(10,2)=scale_factor*(-clhs110*tangentetaslave(1,0) - clhs114*tangentxislave(1,0) + clhs318*normalslave(1,0));
        lhs(10,3)=scale_factor*(-clhs138*tangentetaslave(1,0) - clhs142*tangentxislave(1,0) + clhs146*normalslave(1,0));
        lhs(10,4)=scale_factor*(-clhs162*tangentetaslave(1,0) - clhs166*tangentxislave(1,0) + clhs170*normalslave(1,0));
        lhs(10,5)=scale_factor*(-clhs186*tangentetaslave(1,0) - clhs190*tangentxislave(1,0) + clhs194*normalslave(1,0));
        lhs(10,6)=scale_factor*(-clhs210*tangentetaslave(1,0) - clhs214*tangentxislave(1,0) + clhs218*normalslave(1,0));
        lhs(10,7)=scale_factor*(-clhs234*tangentetaslave(1,0) - clhs238*tangentxislave(1,0) + clhs242*normalslave(1,0));
        lhs(10,8)=0;
        lhs(10,9)=0;
        lhs(10,10)=0;
        lhs(10,11)=0;
        lhs(11,0)=scale_factor*(clhs314*normalslave(1,1) - clhs58*tangentetaslave(1,1) - clhs62*tangentxislave(1,1));
        lhs(11,1)=scale_factor*(-clhs86*tangentetaslave(1,1) - clhs90*tangentxislave(1,1) + clhs94*normalslave(1,1));
        lhs(11,2)=scale_factor*(-clhs110*tangentetaslave(1,1) - clhs114*tangentxislave(1,1) + clhs318*normalslave(1,1));
        lhs(11,3)=scale_factor*(-clhs138*tangentetaslave(1,1) - clhs142*tangentxislave(1,1) + clhs146*normalslave(1,1));
        lhs(11,4)=scale_factor*(-clhs162*tangentetaslave(1,1) - clhs166*tangentxislave(1,1) + clhs170*normalslave(1,1));
        lhs(11,5)=scale_factor*(-clhs186*tangentetaslave(1,1) - clhs190*tangentxislave(1,1) + clhs194*normalslave(1,1));
        lhs(11,6)=scale_factor*(-clhs210*tangentetaslave(1,1) - clhs214*tangentxislave(1,1) + clhs218*normalslave(1,1));
        lhs(11,7)=scale_factor*(-clhs234*tangentetaslave(1,1) - clhs238*tangentxislave(1,1) + clhs242*normalslave(1,1));
        lhs(11,8)=0;
        lhs(11,9)=0;
        lhs(11,10)=0;
        lhs(11,11)=0;
    }


    return lhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

/***************************** BEGIN AD REPLACEMENT ********************************/
/***********************************************************************************/

template<>
array_1d<double, 12> AugmentedLagrangianMethodFrictionalMortarContactCondition<2,2>::CalculateLocalRHS(
        const MortarConditionMatrices& rMortarConditionMatrices,
        const unsigned int& rMasterElementIndex,
        const unsigned int& rActiveInactive
        )
{
    array_1d<double,12> rhs;

    // Master segment info
    GeometryType& CurrentMasterElement = mThisMasterElements[rMasterElementIndex]->GetGeometry();

    // Initialize values
    const bounded_matrix<double, 2, 2> u1 = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u1old = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> u2 = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 0);
    const bounded_matrix<double, 2, 2> u2old = ContactUtilities::GetVariableMatrix<2,2>(CurrentMasterElement, DISPLACEMENT, 1);
    const bounded_matrix<double, 2, 2> X1 = ContactUtilities::GetCoordinates<2,2>(this->GetGeometry(), false);
    const bounded_matrix<double, 2, 2> X2 = ContactUtilities::GetCoordinates<2,2>(CurrentMasterElement, false);
    
    const bounded_matrix<double, 2, 2> lm = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(), VECTOR_LAGRANGE_MULTIPLIER, 0); 
    
    const bounded_matrix<double, 2, 2> normalslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  NORMAL);
    const bounded_matrix<double, 2, 2> tangentxislave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_XI);
    const bounded_matrix<double, 2, 2> tangentetaslave = ContactUtilities::GetVariableMatrix<2,2>(this->GetGeometry(),  TANGENT_ETA);
    
    // Augmentation parameters
    double scale_factor = 1.0;
    double penalty_parameter = 0.0;
    if (GetProperties().Has(SCALE_FACTOR) == true)
    {
        scale_factor  = GetProperties().GetValue(SCALE_FACTOR);
    }
    if (GetProperties().Has(PENALTY_FACTOR) == true)
    {
        penalty_parameter = GetProperties().GetValue(PENALTY_FACTOR);
    }
    
    // Mortar operators
    const bounded_matrix<double, 2, 2> MOperator = rMortarConditionMatrices.MOperator;
    const bounded_matrix<double, 2, 2> DOperator = rMortarConditionMatrices.DOperator;
    // We get the friction coefficient

    const array_1d<double, 2> mu = GetFrictionCoefficient();

    if (rActiveInactive == 0 )
    {
        const double crhs0 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs1 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs2 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs3 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs4 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
        const double crhs5 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs6 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
    
        rhs[0]=0;
        rhs[1]=0;
        rhs[2]=0;
        rhs[3]=0;
        rhs[4]=0;
        rhs[5]=0;
        rhs[6]=0;
        rhs[7]=0;
        rhs[8]=-crhs0*(crhs1*normalslave(0,0) + crhs2*tangentetaslave(0,0) + crhs3*tangentxislave(0,0));
        rhs[9]=-crhs0*(crhs1*normalslave(0,1) + crhs2*tangentetaslave(0,1) + crhs3*tangentxislave(0,1));
        rhs[10]=-crhs0*(crhs4*normalslave(1,0) + crhs5*tangentetaslave(1,0) + crhs6*tangentxislave(1,0));
        rhs[11]=-crhs0*(crhs4*normalslave(1,1) + crhs5*tangentetaslave(1,1) + crhs6*tangentxislave(1,1));
    }
    else if (rActiveInactive == 1 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     -crhs1 + crhs6;
        const double crhs8 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs9 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs10 =     scale_factor*(crhs8*tangentetaslave(0,0) + crhs9*tangentxislave(0,0));
        const double crhs11 =     X1(0,0) + u1old(0,0);
        const double crhs12 =     X1(1,0) + u1old(1,0);
        const double crhs13 =     X2(0,0) + u2old(0,0);
        const double crhs14 =     X2(1,0) + u2old(1,0);
        const double crhs15 =     -crhs0*crhs13 + crhs11*crhs2 + crhs12*crhs3 - crhs14*crhs4;
        const double crhs16 =     X1(0,1) + u1old(0,1);
        const double crhs17 =     X1(1,1) + u1old(1,1);
        const double crhs18 =     X2(0,1) + u2old(0,1);
        const double crhs19 =     X2(1,1) + u2old(1,1);
        const double crhs20 =     -crhs0*crhs18 + crhs16*crhs2 + crhs17*crhs3 - crhs19*crhs4;
        const double crhs21 =     penalty_parameter*(crhs15*tangentetaslave(0,0) + crhs20*tangentetaslave(0,1)) + penalty_parameter*(crhs15*tangentxislave(0,0) + crhs20*tangentxislave(0,1));
        const double crhs22 =     crhs10 + crhs21;
        const double crhs23 =     scale_factor*(crhs8*tangentetaslave(0,1) + crhs9*tangentxislave(0,1));
        const double crhs24 =     crhs21 + crhs23;
        const double crhs25 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs26 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs27 =     crhs25*tangentetaslave(1,0) + crhs26*tangentxislave(1,0);
        const double crhs28 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs29 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs30 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs31 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs32 =     crhs11*crhs28 + crhs12*crhs29 - crhs13*crhs30 - crhs14*crhs31;
        const double crhs33 =     crhs16*crhs28 + crhs17*crhs29 - crhs18*crhs30 - crhs19*crhs31;
        const double crhs34 =     penalty_parameter*(crhs32*tangentetaslave(1,0) + crhs33*tangentetaslave(1,1)) + penalty_parameter*(crhs32*tangentxislave(1,0) + crhs33*tangentxislave(1,1));
        const double crhs35 =     crhs25*tangentetaslave(1,1) + crhs26*tangentxislave(1,1);
        const double crhs36 =     mu[0]/(std::sqrt(std::pow(crhs22, 2) + std::pow(crhs24, 2))*std::sqrt(std::pow(crhs34 + crhs35*scale_factor, 2) + std::pow(crhs27*scale_factor + crhs34, 2)));
        const double crhs37 =     crhs22*crhs36;
        const double crhs38 =     -crhs37 + normalslave(0,0);
        const double crhs39 =     crhs38*crhs7;
        const double crhs40 =     crhs24*crhs36;
        const double crhs41 =     -crhs40 + normalslave(0,1);
        const double crhs42 =     crhs41*crhs7;
        const double crhs43 =     crhs1 - crhs6;
        const double crhs44 =     crhs38*crhs43;
        const double crhs45 =     crhs41*crhs43;
        const double crhs46 =     1.0/penalty_parameter;
        const double crhs47 =     0.5*crhs46*(crhs10 + crhs37*crhs43);
        const double crhs48 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs49 =     0.5*crhs46*(crhs23 + crhs40*crhs43);
        const double crhs50 =     0.5*crhs46*std::pow(scale_factor, 2.0);
        const double crhs51 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
    
        rhs[0]=crhs0*crhs39;
        rhs[1]=crhs0*crhs42;
        rhs[2]=crhs39*crhs4;
        rhs[3]=crhs4*crhs42;
        rhs[4]=crhs2*crhs44;
        rhs[5]=crhs2*crhs45;
        rhs[6]=crhs3*crhs44;
        rhs[7]=crhs3*crhs45;
        rhs[8]=-scale_factor*(crhs47*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs48*crhs49 + crhs5*normalslave(0,0));
        rhs[9]=-scale_factor*(crhs47*crhs48 + crhs49*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)) + crhs5*normalslave(0,1));
        rhs[10]=-crhs50*(crhs27 + crhs51*normalslave(1,0));
        rhs[11]=-crhs50*(crhs35 + crhs51*normalslave(1,1));
    }
    else if (rActiveInactive == 2 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(0,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(0,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     crhs1 - crhs6;
        const double crhs8 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs9 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs10 =     crhs8*tangentetaslave(0,0) + crhs9*tangentetaslave(0,1);
        const double crhs11 =     crhs10*penalty_parameter + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double crhs12 =     crhs8*tangentxislave(0,0) + crhs9*tangentxislave(0,1);
        const double crhs13 =     crhs12*penalty_parameter + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double crhs14 =     crhs11*tangentetaslave(0,0) + crhs13*tangentxislave(0,0);
        const double crhs15 =     crhs14 + crhs7*normalslave(0,0);
        const double crhs16 =     crhs11*tangentetaslave(0,1) + crhs13*tangentxislave(0,1);
        const double crhs17 =     crhs16 + crhs7*normalslave(0,1);
        const double crhs18 =     -crhs1 + crhs6;
        const double crhs19 =     crhs14 - crhs18*normalslave(0,0);
        const double crhs20 =     crhs16 - crhs18*normalslave(0,1);
        const double crhs21 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs22 =     lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1);
        const double crhs23 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs24 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
    
        rhs[0]=-crhs0*crhs15;
        rhs[1]=-crhs0*crhs17;
        rhs[2]=-crhs15*crhs4;
        rhs[3]=-crhs17*crhs4;
        rhs[4]=crhs19*crhs2;
        rhs[5]=crhs2*crhs20;
        rhs[6]=crhs19*crhs3;
        rhs[7]=crhs20*crhs3;
        rhs[8]=scale_factor*(crhs10*tangentetaslave(0,0) + crhs12*tangentxislave(0,0) - crhs5*normalslave(0,0));
        rhs[9]=scale_factor*(crhs10*tangentetaslave(0,1) + crhs12*tangentxislave(0,1) - crhs5*normalslave(0,1));
        rhs[10]=-crhs21*(crhs22*normalslave(1,0) + crhs23*tangentetaslave(1,0) + crhs24*tangentxislave(1,0));
        rhs[11]=-crhs21*(crhs22*normalslave(1,1) + crhs23*tangentetaslave(1,1) + crhs24*tangentxislave(1,1));
    }
    else if (rActiveInactive == 3 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     -crhs1 + crhs6;
        const double crhs8 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs9 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs10 =     scale_factor*(crhs8*tangentetaslave(1,0) + crhs9*tangentxislave(1,0));
        const double crhs11 =     X1(0,0) + u1old(0,0);
        const double crhs12 =     X1(1,0) + u1old(1,0);
        const double crhs13 =     X2(0,0) + u2old(0,0);
        const double crhs14 =     X2(1,0) + u2old(1,0);
        const double crhs15 =     -crhs0*crhs13 + crhs11*crhs2 + crhs12*crhs3 - crhs14*crhs4;
        const double crhs16 =     X1(0,1) + u1old(0,1);
        const double crhs17 =     X1(1,1) + u1old(1,1);
        const double crhs18 =     X2(0,1) + u2old(0,1);
        const double crhs19 =     X2(1,1) + u2old(1,1);
        const double crhs20 =     -crhs0*crhs18 + crhs16*crhs2 + crhs17*crhs3 - crhs19*crhs4;
        const double crhs21 =     penalty_parameter*(crhs15*tangentetaslave(1,0) + crhs20*tangentetaslave(1,1)) + penalty_parameter*(crhs15*tangentxislave(1,0) + crhs20*tangentxislave(1,1));
        const double crhs22 =     crhs10 + crhs21;
        const double crhs23 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs24 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs25 =     crhs23*tangentetaslave(0,0) + crhs24*tangentxislave(0,0);
        const double crhs26 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs27 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs28 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs29 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs30 =     crhs11*crhs26 + crhs12*crhs27 - crhs13*crhs28 - crhs14*crhs29;
        const double crhs31 =     crhs16*crhs26 + crhs17*crhs27 - crhs18*crhs28 - crhs19*crhs29;
        const double crhs32 =     penalty_parameter*(crhs30*tangentetaslave(0,0) + crhs31*tangentetaslave(0,1)) + penalty_parameter*(crhs30*tangentxislave(0,0) + crhs31*tangentxislave(0,1));
        const double crhs33 =     crhs23*tangentetaslave(0,1) + crhs24*tangentxislave(0,1);
        const double crhs34 =     scale_factor*(crhs8*tangentetaslave(1,1) + crhs9*tangentxislave(1,1));
        const double crhs35 =     crhs21 + crhs34;
        const double crhs36 =     mu[1]/(std::sqrt(std::pow(crhs22, 2) + std::pow(crhs35, 2))*std::sqrt(std::pow(crhs32 + crhs33*scale_factor, 2) + std::pow(crhs25*scale_factor + crhs32, 2)));
        const double crhs37 =     crhs22*crhs36;
        const double crhs38 =     -crhs37 + normalslave(1,0);
        const double crhs39 =     crhs38*crhs7;
        const double crhs40 =     crhs35*crhs36;
        const double crhs41 =     -crhs40 + normalslave(1,1);
        const double crhs42 =     crhs41*crhs7;
        const double crhs43 =     crhs1 - crhs6;
        const double crhs44 =     crhs38*crhs43;
        const double crhs45 =     crhs41*crhs43;
        const double crhs46 =     1.0/penalty_parameter;
        const double crhs47 =     0.5*crhs46*std::pow(scale_factor, 2.0);
        const double crhs48 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs49 =     0.5*crhs46*(crhs10 + crhs37*crhs43);
        const double crhs50 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs51 =     0.5*crhs46*(crhs34 + crhs40*crhs43);
    
        rhs[0]=crhs0*crhs39;
        rhs[1]=crhs0*crhs42;
        rhs[2]=crhs39*crhs4;
        rhs[3]=crhs4*crhs42;
        rhs[4]=crhs2*crhs44;
        rhs[5]=crhs2*crhs45;
        rhs[6]=crhs3*crhs44;
        rhs[7]=crhs3*crhs45;
        rhs[8]=-crhs47*(crhs25 + crhs48*normalslave(0,0));
        rhs[9]=-crhs47*(crhs33 + crhs48*normalslave(0,1));
        rhs[10]=-scale_factor*(crhs49*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs5*normalslave(1,0) + crhs50*crhs51);
        rhs[11]=-scale_factor*(crhs49*crhs50 + crhs5*normalslave(1,1) + crhs51*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 4 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs2 =     X1(0,0) + u1(0,0);
        const double crhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     X1(1,0) + u1(1,0);
        const double crhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs6 =     X2(0,0) + u2(0,0);
        const double crhs7 =     X2(1,0) + u2(1,0);
        const double crhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs9 =     X1(0,1) + u1(0,1);
        const double crhs10 =     X1(1,1) + u1(1,1);
        const double crhs11 =     X2(0,1) + u2(0,1);
        const double crhs12 =     X2(1,1) + u2(1,1);
        const double crhs13 =     normalslave(0,0)*(-crhs0*crhs6 + crhs2*crhs3 + crhs4*crhs5 - crhs7*crhs8) + normalslave(0,1)*(-crhs0*crhs11 + crhs10*crhs5 - crhs12*crhs8 + crhs3*crhs9);
        const double crhs14 =     crhs13*penalty_parameter;
        const double crhs15 =     -crhs1 + crhs14;
        const double crhs16 =     crhs15*normalslave(0,0);
        const double crhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs19 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs21 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs22 =     normalslave(1,0)*(-crhs17*crhs6 + crhs19*crhs2 + crhs20*crhs4 - crhs21*crhs7) + normalslave(1,1)*(crhs10*crhs20 - crhs11*crhs17 - crhs12*crhs21 + crhs19*crhs9);
        const double crhs23 =     crhs22*penalty_parameter;
        const double crhs24 =     -crhs18 + crhs23;
        const double crhs25 =     crhs24*normalslave(1,0);
        const double crhs26 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs27 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs28 =     scale_factor*(crhs26*tangentetaslave(0,0) + crhs27*tangentxislave(0,0));
        const double crhs29 =     X1(0,0) + u1old(0,0);
        const double crhs30 =     X1(1,0) + u1old(1,0);
        const double crhs31 =     X2(0,0) + u2old(0,0);
        const double crhs32 =     X2(1,0) + u2old(1,0);
        const double crhs33 =     -crhs0*crhs31 + crhs29*crhs3 + crhs30*crhs5 - crhs32*crhs8;
        const double crhs34 =     X1(0,1) + u1old(0,1);
        const double crhs35 =     X1(1,1) + u1old(1,1);
        const double crhs36 =     X2(0,1) + u2old(0,1);
        const double crhs37 =     X2(1,1) + u2old(1,1);
        const double crhs38 =     -crhs0*crhs36 + crhs3*crhs34 + crhs35*crhs5 - crhs37*crhs8;
        const double crhs39 =     penalty_parameter*(crhs33*tangentetaslave(0,0) + crhs38*tangentetaslave(0,1)) + penalty_parameter*(crhs33*tangentxislave(0,0) + crhs38*tangentxislave(0,1));
        const double crhs40 =     crhs28 + crhs39;
        const double crhs41 =     scale_factor*(crhs26*tangentetaslave(0,1) + crhs27*tangentxislave(0,1));
        const double crhs42 =     crhs39 + crhs41;
        const double crhs43 =     std::pow(std::pow(crhs40, 2) + std::pow(crhs42, 2), -1.0L/2.0L);
        const double crhs44 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs45 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs46 =     scale_factor*(crhs44*tangentetaslave(1,0) + crhs45*tangentxislave(1,0));
        const double crhs47 =     -crhs17*crhs31 + crhs19*crhs29 + crhs20*crhs30 - crhs21*crhs32;
        const double crhs48 =     -crhs17*crhs36 + crhs19*crhs34 + crhs20*crhs35 - crhs21*crhs37;
        const double crhs49 =     penalty_parameter*(crhs47*tangentetaslave(1,0) + crhs48*tangentetaslave(1,1)) + penalty_parameter*(crhs47*tangentxislave(1,0) + crhs48*tangentxislave(1,1));
        const double crhs50 =     crhs46 + crhs49;
        const double crhs51 =     scale_factor*(crhs44*tangentetaslave(1,1) + crhs45*tangentxislave(1,1));
        const double crhs52 =     crhs49 + crhs51;
        const double crhs53 =     std::pow(std::pow(crhs50, 2) + std::pow(crhs52, 2), -1.0L/2.0L);
        const double crhs54 =     crhs15*crhs40*crhs43*crhs53*mu[0];
        const double crhs55 =     crhs24*crhs43*crhs50*crhs53*mu[1];
        const double crhs56 =     crhs15*normalslave(0,1);
        const double crhs57 =     crhs24*normalslave(1,1);
        const double crhs58 =     crhs15*crhs42*crhs43*crhs53*mu[0];
        const double crhs59 =     crhs24*crhs43*crhs52*crhs53*mu[1];
        const double crhs60 =     crhs1 - crhs14;
        const double crhs61 =     crhs60*normalslave(0,0);
        const double crhs62 =     crhs18 - crhs23;
        const double crhs63 =     crhs62*normalslave(1,0);
        const double crhs64 =     crhs43*crhs53*crhs60*mu[0];
        const double crhs65 =     crhs40*crhs64;
        const double crhs66 =     crhs43*crhs53*crhs62*mu[1];
        const double crhs67 =     crhs50*crhs66;
        const double crhs68 =     crhs60*normalslave(0,1);
        const double crhs69 =     crhs62*normalslave(1,1);
        const double crhs70 =     crhs42*crhs64;
        const double crhs71 =     crhs52*crhs66;
        const double crhs72 =     1.0/penalty_parameter;
        const double crhs73 =     0.5*crhs72*(crhs28 + crhs65);
        const double crhs74 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs75 =     0.5*crhs72*(crhs41 + crhs70);
        const double crhs76 =     0.5*crhs72*(crhs46 + crhs67);
        const double crhs77 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs78 =     0.5*crhs72*(crhs51 + crhs71);
    
        rhs[0]=crhs0*crhs16 - crhs0*crhs54 + crhs17*crhs25 - crhs17*crhs55;
        rhs[1]=crhs0*crhs56 - crhs0*crhs58 + crhs17*crhs57 - crhs17*crhs59;
        rhs[2]=crhs16*crhs8 + crhs21*crhs25 - crhs21*crhs55 - crhs54*crhs8;
        rhs[3]=crhs21*crhs57 - crhs21*crhs59 + crhs56*crhs8 - crhs58*crhs8;
        rhs[4]=crhs19*crhs63 - crhs19*crhs67 + crhs3*crhs61 - crhs3*crhs65;
        rhs[5]=crhs19*crhs69 - crhs19*crhs71 + crhs3*crhs68 - crhs3*crhs70;
        rhs[6]=crhs20*crhs63 - crhs20*crhs67 + crhs5*crhs61 - crhs5*crhs65;
        rhs[7]=crhs20*crhs69 - crhs20*crhs71 + crhs5*crhs68 - crhs5*crhs70;
        rhs[8]=-scale_factor*(crhs13*normalslave(0,0) + crhs73*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs74*crhs75);
        rhs[9]=-scale_factor*(crhs13*normalslave(0,1) + crhs73*crhs74 + crhs75*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=-scale_factor*(crhs22*normalslave(1,0) + crhs76*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs77*crhs78);
        rhs[11]=-scale_factor*(crhs22*normalslave(1,1) + crhs76*crhs77 + crhs78*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 5 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs2 =     X1(0,0) + u1old(0,0);
        const double crhs3 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     X1(1,0) + u1old(1,0);
        const double crhs5 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs6 =     X2(0,0) + u2old(0,0);
        const double crhs7 =     X2(1,0) + u2old(1,0);
        const double crhs8 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs9 =     -crhs0*crhs6 + crhs2*crhs3 + crhs4*crhs5 - crhs7*crhs8;
        const double crhs10 =     X1(0,1) + u1old(0,1);
        const double crhs11 =     X1(1,1) + u1old(1,1);
        const double crhs12 =     X2(0,1) + u2old(0,1);
        const double crhs13 =     X2(1,1) + u2old(1,1);
        const double crhs14 =     -crhs0*crhs12 + crhs10*crhs3 + crhs11*crhs5 - crhs13*crhs8;
        const double crhs15 =     crhs14*tangentetaslave(0,1) + crhs9*tangentetaslave(0,0);
        const double crhs16 =     crhs15*penalty_parameter;
        const double crhs17 =     crhs1*scale_factor + crhs16;
        const double crhs18 =     crhs17*tangentetaslave(0,0);
        const double crhs19 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs20 =     crhs14*tangentxislave(0,1) + crhs9*tangentxislave(0,0);
        const double crhs21 =     crhs20*penalty_parameter;
        const double crhs22 =     crhs19*scale_factor + crhs21;
        const double crhs23 =     crhs22*tangentxislave(0,0);
        const double crhs24 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs25 =     X1(0,0) + u1(0,0);
        const double crhs26 =     X1(1,0) + u1(1,0);
        const double crhs27 =     X2(0,0) + u2(0,0);
        const double crhs28 =     X2(1,0) + u2(1,0);
        const double crhs29 =     X1(0,1) + u1(0,1);
        const double crhs30 =     X1(1,1) + u1(1,1);
        const double crhs31 =     X2(0,1) + u2(0,1);
        const double crhs32 =     X2(1,1) + u2(1,1);
        const double crhs33 =     normalslave(0,0)*(-crhs0*crhs27 + crhs25*crhs3 + crhs26*crhs5 - crhs28*crhs8) + normalslave(0,1)*(-crhs0*crhs31 + crhs29*crhs3 + crhs30*crhs5 - crhs32*crhs8);
        const double crhs34 =     crhs33*penalty_parameter;
        const double crhs35 =     crhs24 - crhs34;
        const double crhs36 =     crhs35*normalslave(0,0);
        const double crhs37 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs38 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs39 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs40 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs41 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs42 =     normalslave(1,0)*(crhs25*crhs39 + crhs26*crhs40 - crhs27*crhs37 - crhs28*crhs41) + normalslave(1,1)*(crhs29*crhs39 + crhs30*crhs40 - crhs31*crhs37 - crhs32*crhs41);
        const double crhs43 =     crhs42*penalty_parameter;
        const double crhs44 =     crhs38 - crhs43;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs47 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs48 =     scale_factor*(crhs46*tangentetaslave(1,0) + crhs47*tangentxislave(1,0));
        const double crhs49 =     crhs2*crhs39 - crhs37*crhs6 + crhs4*crhs40 - crhs41*crhs7;
        const double crhs50 =     crhs10*crhs39 + crhs11*crhs40 - crhs12*crhs37 - crhs13*crhs41;
        const double crhs51 =     penalty_parameter*(crhs49*tangentetaslave(1,0) + crhs50*tangentetaslave(1,1)) + penalty_parameter*(crhs49*tangentxislave(1,0) + crhs50*tangentxislave(1,1));
        const double crhs52 =     crhs48 + crhs51;
        const double crhs53 =     crhs16 + crhs21;
        const double crhs54 =     std::pow(std::pow(crhs53 + scale_factor*(crhs1*tangentetaslave(0,0) + crhs19*tangentxislave(0,0)), 2) + std::pow(crhs53 + scale_factor*(crhs1*tangentetaslave(0,1) + crhs19*tangentxislave(0,1)), 2), -1.0L/2.0L);
        const double crhs55 =     scale_factor*(crhs46*tangentetaslave(1,1) + crhs47*tangentxislave(1,1));
        const double crhs56 =     crhs51 + crhs55;
        const double crhs57 =     std::pow(std::pow(crhs52, 2) + std::pow(crhs56, 2), -1.0L/2.0L);
        const double crhs58 =     crhs44*crhs54*crhs57*mu[1];
        const double crhs59 =     crhs52*crhs58;
        const double crhs60 =     crhs17*tangentetaslave(0,1);
        const double crhs61 =     crhs22*tangentxislave(0,1);
        const double crhs62 =     crhs35*normalslave(0,1);
        const double crhs63 =     crhs44*normalslave(1,1);
        const double crhs64 =     crhs56*crhs58;
        const double crhs65 =     -crhs24 + crhs34;
        const double crhs66 =     crhs65*normalslave(0,0);
        const double crhs67 =     -crhs38 + crhs43;
        const double crhs68 =     crhs67*normalslave(1,0);
        const double crhs69 =     crhs52*crhs54*crhs57*crhs67*mu[1];
        const double crhs70 =     crhs65*normalslave(0,1);
        const double crhs71 =     crhs67*normalslave(1,1);
        const double crhs72 =     crhs54*crhs56*crhs57*crhs67*mu[1];
        const double crhs73 =     1.0/penalty_parameter;
        const double crhs74 =     0.5*crhs73*(crhs48 + crhs59);
        const double crhs75 =     tangentetaslave(1,0)*tangentetaslave(1,1) + tangentxislave(1,0)*tangentxislave(1,1);
        const double crhs76 =     0.5*crhs73*(crhs55 + crhs64);
    
        rhs[0]=-crhs0*crhs18 - crhs0*crhs23 - crhs0*crhs36 - crhs37*crhs45 + crhs37*crhs59;
        rhs[1]=-crhs0*crhs60 - crhs0*crhs61 - crhs0*crhs62 - crhs37*crhs63 + crhs37*crhs64;
        rhs[2]=-crhs18*crhs8 - crhs23*crhs8 - crhs36*crhs8 - crhs41*crhs45 + crhs41*crhs59;
        rhs[3]=-crhs41*crhs63 + crhs41*crhs64 - crhs60*crhs8 - crhs61*crhs8 - crhs62*crhs8;
        rhs[4]=crhs18*crhs3 + crhs23*crhs3 - crhs3*crhs66 - crhs39*crhs68 + crhs39*crhs69;
        rhs[5]=crhs3*crhs60 + crhs3*crhs61 - crhs3*crhs70 - crhs39*crhs71 + crhs39*crhs72;
        rhs[6]=crhs18*crhs5 + crhs23*crhs5 - crhs40*crhs68 + crhs40*crhs69 - crhs5*crhs66;
        rhs[7]=-crhs40*crhs71 + crhs40*crhs72 + crhs5*crhs60 + crhs5*crhs61 - crhs5*crhs70;
        rhs[8]=scale_factor*(crhs15*tangentetaslave(0,0) + crhs20*tangentxislave(0,0) - crhs33*normalslave(0,0));
        rhs[9]=scale_factor*(crhs15*tangentetaslave(0,1) + crhs20*tangentxislave(0,1) - crhs33*normalslave(0,1));
        rhs[10]=-scale_factor*(crhs42*normalslave(1,0) + crhs74*(std::pow(tangentetaslave(1,0), 2) + std::pow(tangentxislave(1,0), 2)) + crhs75*crhs76);
        rhs[11]=-scale_factor*(crhs42*normalslave(1,1) + crhs74*crhs75 + crhs76*(std::pow(tangentetaslave(1,1), 2) + std::pow(tangentxislave(1,1), 2)));
    }
    else if (rActiveInactive == 6 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs2 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     normalslave(1,0)*(-crhs0*(X2(0,0) + u2(0,0)) + crhs2*(X1(0,0) + u1(0,0)) + crhs3*(X1(1,0) + u1(1,0)) - crhs4*(X2(1,0) + u2(1,0))) + normalslave(1,1)*(-crhs0*(X2(0,1) + u2(0,1)) + crhs2*(X1(0,1) + u1(0,1)) + crhs3*(X1(1,1) + u1(1,1)) - crhs4*(X2(1,1) + u2(1,1)));
        const double crhs6 =     crhs5*penalty_parameter;
        const double crhs7 =     crhs1 - crhs6;
        const double crhs8 =     -crhs0*(X2(0,0) + u2old(0,0)) + crhs2*(X1(0,0) + u1old(0,0)) + crhs3*(X1(1,0) + u1old(1,0)) - crhs4*(X2(1,0) + u2old(1,0));
        const double crhs9 =     -crhs0*(X2(0,1) + u2old(0,1)) + crhs2*(X1(0,1) + u1old(0,1)) + crhs3*(X1(1,1) + u1old(1,1)) - crhs4*(X2(1,1) + u2old(1,1));
        const double crhs10 =     crhs8*tangentetaslave(1,0) + crhs9*tangentetaslave(1,1);
        const double crhs11 =     crhs10*penalty_parameter + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double crhs12 =     crhs8*tangentxislave(1,0) + crhs9*tangentxislave(1,1);
        const double crhs13 =     crhs12*penalty_parameter + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double crhs14 =     crhs11*tangentetaslave(1,0) + crhs13*tangentxislave(1,0);
        const double crhs15 =     crhs14 + crhs7*normalslave(1,0);
        const double crhs16 =     crhs11*tangentetaslave(1,1) + crhs13*tangentxislave(1,1);
        const double crhs17 =     crhs16 + crhs7*normalslave(1,1);
        const double crhs18 =     -crhs1 + crhs6;
        const double crhs19 =     crhs14 - crhs18*normalslave(1,0);
        const double crhs20 =     crhs16 - crhs18*normalslave(1,1);
        const double crhs21 =     0.5*std::pow(scale_factor, 2.0)/penalty_parameter;
        const double crhs22 =     lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1);
        const double crhs23 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs24 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
    
        rhs[0]=-crhs0*crhs15;
        rhs[1]=-crhs0*crhs17;
        rhs[2]=-crhs15*crhs4;
        rhs[3]=-crhs17*crhs4;
        rhs[4]=crhs19*crhs2;
        rhs[5]=crhs2*crhs20;
        rhs[6]=crhs19*crhs3;
        rhs[7]=crhs20*crhs3;
        rhs[8]=-crhs21*(crhs22*normalslave(0,0) + crhs23*tangentetaslave(0,0) + crhs24*tangentxislave(0,0));
        rhs[9]=-crhs21*(crhs22*normalslave(0,1) + crhs23*tangentetaslave(0,1) + crhs24*tangentxislave(0,1));
        rhs[10]=scale_factor*(crhs10*tangentetaslave(1,0) + crhs12*tangentxislave(1,0) - crhs5*normalslave(1,0));
        rhs[11]=scale_factor*(crhs10*tangentetaslave(1,1) + crhs12*tangentxislave(1,1) - crhs5*normalslave(1,1));
    }
    else if (rActiveInactive == 7 )
    {
        const double crhs0 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1);
        const double crhs2 =     X1(0,0) + u1old(0,0);
        const double crhs3 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs4 =     X1(1,0) + u1old(1,0);
        const double crhs5 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs6 =     X2(0,0) + u2old(0,0);
        const double crhs7 =     X2(1,0) + u2old(1,0);
        const double crhs8 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs9 =     -crhs0*crhs6 + crhs2*crhs3 + crhs4*crhs5 - crhs7*crhs8;
        const double crhs10 =     X1(0,1) + u1old(0,1);
        const double crhs11 =     X1(1,1) + u1old(1,1);
        const double crhs12 =     X2(0,1) + u2old(0,1);
        const double crhs13 =     X2(1,1) + u2old(1,1);
        const double crhs14 =     -crhs0*crhs12 + crhs10*crhs3 + crhs11*crhs5 - crhs13*crhs8;
        const double crhs15 =     crhs14*tangentetaslave(1,1) + crhs9*tangentetaslave(1,0);
        const double crhs16 =     crhs15*penalty_parameter;
        const double crhs17 =     crhs1*scale_factor + crhs16;
        const double crhs18 =     crhs17*tangentetaslave(1,0);
        const double crhs19 =     lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1);
        const double crhs20 =     crhs14*tangentxislave(1,1) + crhs9*tangentxislave(1,0);
        const double crhs21 =     crhs20*penalty_parameter;
        const double crhs22 =     crhs19*scale_factor + crhs21;
        const double crhs23 =     crhs22*tangentxislave(1,0);
        const double crhs24 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs25 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs26 =     X1(0,0) + u1(0,0);
        const double crhs27 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs28 =     X1(1,0) + u1(1,0);
        const double crhs29 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs30 =     X2(0,0) + u2(0,0);
        const double crhs31 =     X2(1,0) + u2(1,0);
        const double crhs32 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs33 =     X1(0,1) + u1(0,1);
        const double crhs34 =     X1(1,1) + u1(1,1);
        const double crhs35 =     X2(0,1) + u2(0,1);
        const double crhs36 =     X2(1,1) + u2(1,1);
        const double crhs37 =     normalslave(0,0)*(-crhs24*crhs30 + crhs26*crhs27 + crhs28*crhs29 - crhs31*crhs32) + normalslave(0,1)*(-crhs24*crhs35 + crhs27*crhs33 + crhs29*crhs34 - crhs32*crhs36);
        const double crhs38 =     crhs37*penalty_parameter;
        const double crhs39 =     crhs25 - crhs38;
        const double crhs40 =     crhs39*normalslave(0,0);
        const double crhs41 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs42 =     normalslave(1,0)*(-crhs0*crhs30 + crhs26*crhs3 + crhs28*crhs5 - crhs31*crhs8) + normalslave(1,1)*(-crhs0*crhs35 + crhs3*crhs33 + crhs34*crhs5 - crhs36*crhs8);
        const double crhs43 =     crhs42*penalty_parameter;
        const double crhs44 =     crhs41 - crhs43;
        const double crhs45 =     crhs44*normalslave(1,0);
        const double crhs46 =     lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1);
        const double crhs47 =     lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1);
        const double crhs48 =     scale_factor*(crhs46*tangentetaslave(0,0) + crhs47*tangentxislave(0,0));
        const double crhs49 =     crhs2*crhs27 - crhs24*crhs6 + crhs29*crhs4 - crhs32*crhs7;
        const double crhs50 =     crhs10*crhs27 + crhs11*crhs29 - crhs12*crhs24 - crhs13*crhs32;
        const double crhs51 =     penalty_parameter*(crhs49*tangentetaslave(0,0) + crhs50*tangentetaslave(0,1)) + penalty_parameter*(crhs49*tangentxislave(0,0) + crhs50*tangentxislave(0,1));
        const double crhs52 =     crhs48 + crhs51;
        const double crhs53 =     scale_factor*(crhs46*tangentetaslave(0,1) + crhs47*tangentxislave(0,1));
        const double crhs54 =     crhs51 + crhs53;
        const double crhs55 =     std::pow(std::pow(crhs52, 2) + std::pow(crhs54, 2), -1.0L/2.0L);
        const double crhs56 =     crhs16 + crhs21;
        const double crhs57 =     std::pow(std::pow(crhs56 + scale_factor*(crhs1*tangentetaslave(1,0) + crhs19*tangentxislave(1,0)), 2) + std::pow(crhs56 + scale_factor*(crhs1*tangentetaslave(1,1) + crhs19*tangentxislave(1,1)), 2), -1.0L/2.0L);
        const double crhs58 =     crhs39*crhs55*crhs57*mu[0];
        const double crhs59 =     crhs52*crhs58;
        const double crhs60 =     crhs17*tangentetaslave(1,1);
        const double crhs61 =     crhs22*tangentxislave(1,1);
        const double crhs62 =     crhs39*normalslave(0,1);
        const double crhs63 =     crhs44*normalslave(1,1);
        const double crhs64 =     crhs54*crhs58;
        const double crhs65 =     -crhs25 + crhs38;
        const double crhs66 =     crhs65*normalslave(0,0);
        const double crhs67 =     -crhs41 + crhs43;
        const double crhs68 =     crhs67*normalslave(1,0);
        const double crhs69 =     crhs52*crhs55*crhs57*crhs65*mu[0];
        const double crhs70 =     crhs65*normalslave(0,1);
        const double crhs71 =     crhs67*normalslave(1,1);
        const double crhs72 =     crhs54*crhs55*crhs57*crhs65*mu[0];
        const double crhs73 =     1.0/penalty_parameter;
        const double crhs74 =     0.5*crhs73*(crhs48 + crhs59);
        const double crhs75 =     tangentetaslave(0,0)*tangentetaslave(0,1) + tangentxislave(0,0)*tangentxislave(0,1);
        const double crhs76 =     0.5*crhs73*(crhs53 + crhs64);
    
        rhs[0]=-crhs0*crhs18 - crhs0*crhs23 - crhs0*crhs45 - crhs24*crhs40 + crhs24*crhs59;
        rhs[1]=-crhs0*crhs60 - crhs0*crhs61 - crhs0*crhs63 - crhs24*crhs62 + crhs24*crhs64;
        rhs[2]=-crhs18*crhs8 - crhs23*crhs8 - crhs32*crhs40 + crhs32*crhs59 - crhs45*crhs8;
        rhs[3]=-crhs32*crhs62 + crhs32*crhs64 - crhs60*crhs8 - crhs61*crhs8 - crhs63*crhs8;
        rhs[4]=crhs18*crhs3 + crhs23*crhs3 - crhs27*crhs66 + crhs27*crhs69 - crhs3*crhs68;
        rhs[5]=-crhs27*crhs70 + crhs27*crhs72 + crhs3*crhs60 + crhs3*crhs61 - crhs3*crhs71;
        rhs[6]=crhs18*crhs5 + crhs23*crhs5 - crhs29*crhs66 + crhs29*crhs69 - crhs5*crhs68;
        rhs[7]=-crhs29*crhs70 + crhs29*crhs72 + crhs5*crhs60 + crhs5*crhs61 - crhs5*crhs71;
        rhs[8]=-scale_factor*(crhs37*normalslave(0,0) + crhs74*(std::pow(tangentetaslave(0,0), 2) + std::pow(tangentxislave(0,0), 2)) + crhs75*crhs76);
        rhs[9]=-scale_factor*(crhs37*normalslave(0,1) + crhs74*crhs75 + crhs76*(std::pow(tangentetaslave(0,1), 2) + std::pow(tangentxislave(0,1), 2)));
        rhs[10]=scale_factor*(crhs15*tangentetaslave(1,0) + crhs20*tangentxislave(1,0) - crhs42*normalslave(1,0));
        rhs[11]=scale_factor*(crhs15*tangentetaslave(1,1) + crhs20*tangentxislave(1,1) - crhs42*normalslave(1,1));
    }
    else if (rActiveInactive == 8 )
    {
        const double crhs0 =     MOperator(0,0); // MOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs1 =     X1(0,0) + u1old(0,0);
        const double crhs2 =     DOperator(0,0); // DOPERATOR(0,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs3 =     X1(1,0) + u1old(1,0);
        const double crhs4 =     DOperator(0,1); // DOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs5 =     X2(0,0) + u2old(0,0);
        const double crhs6 =     X2(1,0) + u2old(1,0);
        const double crhs7 =     MOperator(0,1); // MOPERATOR(0,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs8 =     -crhs0*crhs5 + crhs1*crhs2 + crhs3*crhs4 - crhs6*crhs7;
        const double crhs9 =     X1(0,1) + u1old(0,1);
        const double crhs10 =     X1(1,1) + u1old(1,1);
        const double crhs11 =     X2(0,1) + u2old(0,1);
        const double crhs12 =     X2(1,1) + u2old(1,1);
        const double crhs13 =     -crhs0*crhs11 + crhs10*crhs4 - crhs12*crhs7 + crhs2*crhs9;
        const double crhs14 =     crhs13*tangentetaslave(0,1) + crhs8*tangentetaslave(0,0);
        const double crhs15 =     crhs14*penalty_parameter + scale_factor*(lm(0,0)*tangentetaslave(0,0) + lm(0,1)*tangentetaslave(0,1));
        const double crhs16 =     crhs15*tangentetaslave(0,0);
        const double crhs17 =     MOperator(1,0); // MOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs18 =     DOperator(1,0); // DOPERATOR(1,0)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs19 =     DOperator(1,1); // DOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs20 =     MOperator(1,1); // MOPERATOR(1,1)(U1(0,0), U1(0,1), U1(1,0), U1(1,1), U2(0,0), U2(0,1), U2(1,0), U2(1,1))
        const double crhs21 =     crhs1*crhs18 - crhs17*crhs5 + crhs19*crhs3 - crhs20*crhs6;
        const double crhs22 =     crhs10*crhs19 - crhs11*crhs17 - crhs12*crhs20 + crhs18*crhs9;
        const double crhs23 =     crhs21*tangentetaslave(1,0) + crhs22*tangentetaslave(1,1);
        const double crhs24 =     crhs23*penalty_parameter + scale_factor*(lm(1,0)*tangentetaslave(1,0) + lm(1,1)*tangentetaslave(1,1));
        const double crhs25 =     crhs24*tangentetaslave(1,0);
        const double crhs26 =     crhs13*tangentxislave(0,1) + crhs8*tangentxislave(0,0);
        const double crhs27 =     crhs26*penalty_parameter + scale_factor*(lm(0,0)*tangentxislave(0,0) + lm(0,1)*tangentxislave(0,1));
        const double crhs28 =     crhs27*tangentxislave(0,0);
        const double crhs29 =     crhs21*tangentxislave(1,0) + crhs22*tangentxislave(1,1);
        const double crhs30 =     crhs29*penalty_parameter + scale_factor*(lm(1,0)*tangentxislave(1,0) + lm(1,1)*tangentxislave(1,1));
        const double crhs31 =     crhs30*tangentxislave(1,0);
        const double crhs32 =     scale_factor*(lm(0,0)*normalslave(0,0) + lm(0,1)*normalslave(0,1));
        const double crhs33 =     X1(0,0) + u1(0,0);
        const double crhs34 =     X1(1,0) + u1(1,0);
        const double crhs35 =     X2(0,0) + u2(0,0);
        const double crhs36 =     X2(1,0) + u2(1,0);
        const double crhs37 =     X1(0,1) + u1(0,1);
        const double crhs38 =     X1(1,1) + u1(1,1);
        const double crhs39 =     X2(0,1) + u2(0,1);
        const double crhs40 =     X2(1,1) + u2(1,1);
        const double crhs41 =     normalslave(0,0)*(-crhs0*crhs35 + crhs2*crhs33 + crhs34*crhs4 - crhs36*crhs7) + normalslave(0,1)*(-crhs0*crhs39 + crhs2*crhs37 + crhs38*crhs4 - crhs40*crhs7);
        const double crhs42 =     crhs41*penalty_parameter;
        const double crhs43 =     crhs32 - crhs42;
        const double crhs44 =     crhs43*normalslave(0,0);
        const double crhs45 =     scale_factor*(lm(1,0)*normalslave(1,0) + lm(1,1)*normalslave(1,1));
        const double crhs46 =     normalslave(1,0)*(-crhs17*crhs35 + crhs18*crhs33 + crhs19*crhs34 - crhs20*crhs36) + normalslave(1,1)*(-crhs17*crhs39 + crhs18*crhs37 + crhs19*crhs38 - crhs20*crhs40);
        const double crhs47 =     crhs46*penalty_parameter;
        const double crhs48 =     crhs45 - crhs47;
        const double crhs49 =     crhs48*normalslave(1,0);
        const double crhs50 =     crhs15*tangentetaslave(0,1);
        const double crhs51 =     crhs24*tangentetaslave(1,1);
        const double crhs52 =     crhs27*tangentxislave(0,1);
        const double crhs53 =     crhs30*tangentxislave(1,1);
        const double crhs54 =     crhs43*normalslave(0,1);
        const double crhs55 =     crhs48*normalslave(1,1);
        const double crhs56 =     -crhs32 + crhs42;
        const double crhs57 =     crhs56*normalslave(0,0);
        const double crhs58 =     -crhs45 + crhs47;
        const double crhs59 =     crhs58*normalslave(1,0);
        const double crhs60 =     crhs56*normalslave(0,1);
        const double crhs61 =     crhs58*normalslave(1,1);
    
        rhs[0]=-crhs0*crhs16 - crhs0*crhs28 - crhs0*crhs44 - crhs17*crhs25 - crhs17*crhs31 - crhs17*crhs49;
        rhs[1]=-crhs0*crhs50 - crhs0*crhs52 - crhs0*crhs54 - crhs17*crhs51 - crhs17*crhs53 - crhs17*crhs55;
        rhs[2]=-crhs16*crhs7 - crhs20*crhs25 - crhs20*crhs31 - crhs20*crhs49 - crhs28*crhs7 - crhs44*crhs7;
        rhs[3]=-crhs20*crhs51 - crhs20*crhs53 - crhs20*crhs55 - crhs50*crhs7 - crhs52*crhs7 - crhs54*crhs7;
        rhs[4]=crhs16*crhs2 + crhs18*crhs25 + crhs18*crhs31 - crhs18*crhs59 + crhs2*crhs28 - crhs2*crhs57;
        rhs[5]=crhs18*crhs51 + crhs18*crhs53 - crhs18*crhs61 + crhs2*crhs50 + crhs2*crhs52 - crhs2*crhs60;
        rhs[6]=crhs16*crhs4 + crhs19*crhs25 + crhs19*crhs31 - crhs19*crhs59 + crhs28*crhs4 - crhs4*crhs57;
        rhs[7]=crhs19*crhs51 + crhs19*crhs53 - crhs19*crhs61 + crhs4*crhs50 + crhs4*crhs52 - crhs4*crhs60;
        rhs[8]=scale_factor*(crhs14*tangentetaslave(0,0) + crhs26*tangentxislave(0,0) - crhs41*normalslave(0,0));
        rhs[9]=scale_factor*(crhs14*tangentetaslave(0,1) + crhs26*tangentxislave(0,1) - crhs41*normalslave(0,1));
        rhs[10]=scale_factor*(crhs23*tangentetaslave(1,0) + crhs29*tangentxislave(1,0) - crhs46*normalslave(1,0));
        rhs[11]=scale_factor*(crhs23*tangentetaslave(1,1) + crhs29*tangentxislave(1,1) - crhs46*normalslave(1,1));
    }


    return rhs;
}

/****************************** END AD REPLACEMENT *********************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim,TNumNodes>::EquationIdVector(
    EquationIdVectorType& rResult,
    ProcessInfo& CurrentProcessInfo 
    )
{
    KRATOS_TRY;   
    
    boost::shared_ptr<ConditionMap>& AllConditionSets = this->GetValue( CONTACT_SETS );
    
    // Calculates the size of the system
    const unsigned int ConditionSize = (TDim * ( TNumNodes + TNumNodes + TNumNodes) ) * AllConditionSets->size(); 
    
    if (rResult.size() != ConditionSize)
    {
        rResult.resize( ConditionSize, false );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for (auto ipair = AllConditionSets->begin(); ipair != AllConditionSets->end(); ++ipair )
    {
        GeometryType& current_master = (ipair->first)->GetGeometry( );
        
        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rResult[index++] = master_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = master_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = master_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( DISPLACEMENT_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( DISPLACEMENT_Z ).EquationId( );
            }
        }

        // Slave Nodes  Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_X ).EquationId( );
            rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_Y ).EquationId( );
            if (TDim == 3)
            {
                rResult[index++] = slave_node.GetDof( VECTOR_LAGRANGE_MULTIPLIER_Z ).EquationId( );
            }
        }
        
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template< unsigned int TDim, unsigned int TNumNodes>
void AugmentedLagrangianMethodFrictionalMortarContactCondition<TDim, TNumNodes>::GetDofList(
    DofsVectorType& rConditionalDofList,
    ProcessInfo& rCurrentProcessInfo 
)
{
    KRATOS_TRY;
    
    boost::shared_ptr<ConditionMap>& AllConditionSets = this->GetValue( CONTACT_SETS );
    
    // Calculates the size of the system
    const unsigned int ConditionSize = (TDim * ( TNumNodes + TNumNodes + TNumNodes) ) * AllConditionSets->size(); 
    
    if (rConditionalDofList.size() != ConditionSize)
    {
        rConditionalDofList.resize( ConditionSize );
    }
    
    unsigned int index = 0;
    
    /* ORDER - [ MASTER, SLAVE, LAMBDA ] */
    for (auto ipair = AllConditionSets->begin(); ipair != AllConditionSets->end(); ++ipair )
    {
        GeometryType& current_master = (ipair->first)->GetGeometry( );

        // Master Nodes Displacement Equation IDs
        for ( unsigned int i_master = 0; i_master < TNumNodes; i_master++ ) // NOTE: Assuming same number of nodes for master and slave
        {
            NodeType& master_node = current_master[i_master];
            rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = master_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Displacement Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_X );
            rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = slave_node.pGetDof( DISPLACEMENT_Z );
            }
        }

        // Slave Nodes Lambda Equation IDs
        for ( unsigned int i_slave = 0; i_slave < TNumNodes; i_slave++ )
        {
            NodeType& slave_node = this->GetGeometry()[ i_slave ];
            rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_X );
            rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_Y );
            if (TDim == 3)
            {
                rConditionalDofList[index++] = slave_node.pGetDof( VECTOR_LAGRANGE_MULTIPLIER_Z );
            }
        }
    }
    
    KRATOS_CATCH( "" );
}

/***********************************************************************************/
/***********************************************************************************/

template class AugmentedLagrangianMethodFrictionalMortarContactCondition<2, 2>;
// template class AugmentedLagrangianMethodFrictionalMortarContactCondition<3, 3>;
// template class AugmentedLagrangianMethodFrictionalMortarContactCondition<3, 4>;

} // Namespace Kratos
